'\" te
.\" Copyright (c) 1999, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH bufmod 7M "11 Nov 1997" "SunOS 5.11" "STREAMS Modules"
.SH NAME
bufmod \- STREAMS Buffer Module
.SH SYNOPSIS
.LP
.nf
\fB#include <sys/bufmod.h>\fR
.fi

.LP
.nf
\fBioctl(fd, I_PUSH, "bufmod");\fR
.fi

.SH DESCRIPTION
.sp
.LP
.B bufmod
is a
.B STREAMS
module that buffers incoming messages,
reducing the number of system calls and the associated overhead required to
read and process them. Although
.B bufmod
was originally designed to be
used in conjunction with
.B STREAMS-based
networking device drivers, the
version described here is general purpose so that it can be used anywhere
.B STREAMS
input buffering is required.
.SS "Read-side Behavior"
.sp
.LP
The behavior of
.B bufmod
depends on various parameters and flags that
can be set and queried as described below under
.BR IOCTLS .
.B bufmod
collects incoming
.B M_DATA
messages into chunks, passing each chunk
upstream when the chunk becomes full or the current read timeout expires. It
optionally converts
.B M_PROTO
messages to
.B M_DATA
and adds them to
chunks as well. It also optionally adds to each message a header containing
a timestamp, and a cumulative count of  messages dropped on the stream read
side due to resource exhaustion or flow control. Thedefault settings of
.B bufmod
allow it to drop messages when flow control sets in or
resources are exhausted; disabling headers and explicitly requesting no
.RB "drops makes " bufmod " pass all messages through. Finally, " bufmod " is"
capable of truncating upstream messages to a fixed, programmable length.
.sp
.LP
When a message arrives,
.B bufmod
processes it in several steps. The
following paragraphs discuss each step in turn.
.sp
.LP
Upon receiving a message from below, if the
.B SB_NO_HEADER
flag is not
set,
.B bufmod
immediately timestamps it and saves the current time value
for later insertion in the header described below.
.sp
.LP
Next, if
.B SB_NO_PROTO_CVT
is not set,
.B bufmod
converts all
leading
.B M_PROTO
blocks in the message to
.B M_DATA
blocks, altering
only the message type field and leaving the contents alone.
.sp
.LP
It then truncates the message to the current
.IR "snapshot length" ,
which
is set with the
.B "SBIOCSSNAP ioctl"
described below.
.sp
.LP
Afterwards, if
.B SB_NO_HEADER
is not set,
.B bufmod
prepends a
header to the converted message. This header is defined as follows.
.sp
.in +2
.nf
struct sb_hdr {
        uint_t   sbh_origlen;
        uint_t   sbh_msglen;
        uint_t   sbh_totlen;
        uint_t   sbh_drops;
#if defined(_LP64) || defined(_I32LPx)
        struct  timeval32 sbh_timestamp;
#else
        struct  timeval sbh_timestamp;
#endif /* !_LP64 */
};
.fi
.in -2

.sp
.LP
The
.B sbh_origlen
field gives the message's original length before
truncation in bytes. The
.B sbh_msglen
field gives the length in bytes of
the message after the truncation has been done.
.B sbh_totlen
gives the
distance in bytes from the start of the truncated message in the current
chunk (described below) to the start of the next message in the chunk; the
value reflects any padding necessary to insure correct data alignment for
the host machine and includes the length of the header itself.
.B sbh_drops
reports the cumulative number of input messages that this
instance of
.B bufmod
has dropped due to flow control or resource
exhaustion. In the current implementation message dropping due to flow
control can occur only if the
.B SB_NO_DROPS
flag is not set. (Note: this
accounts only for events occurring within
.BR bufmod ,
and does not count
messages dropped by downstream or by upstream modules.) The
.B sbh_timestamp
field contains the message arrival time expressed as a
.BR "struct timeval" .
.sp
.LP
After preparing a message,
.B bufmod
attempts to add it to the end of
the current chunk, using the chunk size and timeout values to govern the
addition. The chunk size and timeout values are set and inspected using the
.B ioctl()
calls described below. If adding the new message would make
the current chunk grow larger than the chunk size,
.B bufmod
closes off
the current chunk, passing it up to the next module in line, and starts a
new chunk. If adding the message would still make the new chunk overflow,
the module passes it upward in an over-size chunk of its own. Otherwise, the
module concatenates the message to the end of the current chunk.
.sp
.LP
To ensure that messages do not languish forever in an accumulating chunk,
.B bufmod
maintains a read timeout. Whenever this timeout expires, the
module closes off the current chunk and passes it upward. The module
restarts the timeout period when it receives a read side data message and a
timeout is not currently active. These two rules insure that
.B bufmod
minimizes the number of chunks it produces during periods of intense message
activity and that it periodically disposes of all messages during slack
intervals, but avoids any timeout overhead when there is no activity.
.sp
.LP
.B bufmod
handles other message types as follows. Upon receiving an
.B M_FLUSH
message specifying that the read queue be flushed, the module
clears the currently accumulating chunk and passes the message on to the
.RB "module or driver above. (Note: " bufmod " uses zero length " M_CTL 
messages for internal synchronization and does not pass them through.)
.B bufmod
passes all other messages through unaltered to its upper
neighbor, maintaining message order for non high priority messages by
passing up any accumulated chunk first.
.sp
.LP
If the
.B SB_DEFER_CHUNK
flag is set, buffering does not begin until the
second message is received within the timeout window.
.sp
.LP
If the
.B SB_SEND_ON_WRITE
flag is set,
.B bufmod
passes up the read
side any buffered data when a message is received on the write side.
.B SB_SEND_ON_WRITE
and
.B SB_DEFER_CHUNK
are often used together.
.SS "Write-side Behavior"
.sp
.LP
.B bufmod
intercepts
.B M_IOCTL
messages for the
.BR ioctl s
described below. The module passes all other messages through unaltered to
its lower neighbor. If
.B SB_SEND_ON_WRITE
is set, message arrival on the
writer side suffices to close and transmit the current read side chunk.
.SH IOCTLS
.sp
.LP
.B bufmod
responds to the following
.BR ioctl s.
.sp
.ne 2
.mk
.na
.B SBIOCSTIME
.ad
.RS 16n
.rt
Set the read timeout value to the value referred to by the \fBstruct timeval\fR pointer given as argument. Setting the timeout value to zero has
the side-effect of forcing the chunk size to zero as well, so that the
module will pass all incoming messages upward immediately upon arrival.
Negative values are rejected with an
.B EINVAL
error.
.RE

.sp
.ne 2
.mk
.na
.B SBIOCGTIME
.ad
.RS 16n
.rt
Return the read timeout in the
.B "struct timeval"
pointed to by the
argument. If the timeout has been cleared with the
.B SBIOCCTIME
.BR ioctl ,
return with an
.B ERANGE
error.
.RE

.sp
.ne 2
.mk
.na
.B SBIOCCTIME
.ad
.RS 16n
.rt
Clear the read timeout, effectively setting its value to infinity. This
results in no timeouts being active and the chunk being delivered when it is
full.
.RE

.sp
.ne 2
.mk
.na
.B SBIOCSCHUNK
.ad
.RS 16n
.rt
Set the chunk size to the value referred to by the
.I uint_t
pointer
given as argument. See Notes for a description of effect on stream head high
water mark.
.RE

.sp
.ne 2
.mk
.na
.B SBIOCGCHUNK
.ad
.RS 16n
.rt
Return the chunk size in the
.I uint_t
pointed to by the argument.
.RE

.sp
.ne 2
.mk
.na
.B SBIOCSSNAP
.ad
.RS 16n
.rt
Set the current snapshot length to the value given in the
.BR uint_t
pointed to by the
.BR ioctl 's
final argument. \fBbufmod\fR interprets a
snapshot length value of zero as meaning infinity, so it will not alter the
message. See  Notes for a description of effect on stream head high water
mark.
.RE

.sp
.ne 2
.mk
.na
.B SBIOCGSNAP
.ad
.RS 16n
.rt
Returns the current snapshot length in the
.B uint_t
pointed to by the
\fBioctl\fR's final argument.
.RE

.sp
.ne 2
.mk
.na
.B SBIOCSFLAGS
.ad
.RS 16n
.rt
Set the current flags to the value given in the
.B uint_t
pointed to by
the
.BR ioctl 's
final argument. Possible values are a combination of the
following.
.sp
.ne 2
.mk
.na
.B SB_SEND_ON_WRITE
.ad
.RS 21n
.rt
Transmit the read side chunk on arrival of a message on the write side.
.RE

.sp
.ne 2
.mk
.na
.B SB_NO_HEADER
.ad
.RS 21n
.rt
Do not add headers to read side messages.
.RE

.sp
.ne 2
.mk
.na
.B SB_NO_DROPS
.ad
.RS 21n
.rt
Do not drop messages due to flow control upstream.
.RE

.sp
.ne 2
.mk
.na
.B SB_NO_PROTO_CVT
.ad
.RS 21n
.rt
Do not convert
.B M_PROTO
messages into
.BR M_DATA .
.RE

.sp
.ne 2
.mk
.na
.B SB_DEFER_CHUNK
.ad
.RS 21n
.rt
Begin buffering on arrival of the second read side message in a timeout
interval.
.RE

.RE

.sp
.ne 2
.mk
.na
.B SBIOCGFLAGS
.ad
.RS 16n
.rt
Returns the current flags in the
.B uint_t
pointed to by the
\fBioctl\fR's final argument.
.RE

.SH SEE ALSO
.sp
.LP
.BR dlpi (7P),
.BR pfmod (7M)
.SH NOTES
.sp
.LP
Older versions of
.B bufmod
did not support the behavioral flexibility
controlled by the
.BR "SBIOCSFLAGS ioctl" .
Applications that wish to
take advantage of this flexibility can guard themselves against old versions
of the module by invoking the
.B SBIOCGFLAGS
ioctl and checking for an
.B EINVAL
error return.
.sp
.LP
When buffering is enabled by issuing an
.B SBIOCSCHUNK
ioctl to set the
chunk size to a non zero value,
.B bufmod
sends a
.B SETOPTS
message
to adjust the stream head high and low water marks to accommodate the
chunked messages.
.sp
.LP
When buffering is disabled by setting the chunk size to zero, message
truncation can have a significant  influence on data traffic at the stream
head and therefore the stream head high and low water marks are adjusted to
new values appropriate for the smaller truncated message sizes.
.SH BUGS
.sp
.LP
.B bufmod
does not defend itself against allocation failures, so that it
is possible, although very unlikely, for the stream head to use
inappropriate high and low water marks after the chunk size or snapshot
length have changed.
