'\" te
.\" Copyright 1989 AT&T
.\" Copyright (C) 1999, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH tirdwr 7M "3 Jul 1990" "SunOS 5.11" "STREAMS Modules"
.SH NAME
tirdwr \- Transport Interface read/write interface STREAMS module
.SH SYNOPSIS
.LP
.nf
\fBint ioctl( \fIfd, \fBI_PUSH\fI, \fB"tirdwr");\fR
.fi

.SH DESCRIPTION
.sp
.LP
.B tirdwr
is a STREAMS module  that provides an alternate interface to a
transport provider which supports the  Transport Interface ("\fBTI\fR")
functions of the Network Services library (see Section 3N). This alternate
interface allows a user to communicate with the transport protocol provider
using the
.BR read (2)
and
.BR write (2)
system calls. The
.BR putmsg (2)
and
.BR getmsg (2)
system calls may also be used. However,
.B putmsg
and
.B getmsg
can only transfer data messages between  user and stream; control
portions are disallowed.
.sp
.LP
The
.B tirdwr
module must only be pushed (see
.B I_PUSH
in
.BR streamio (7I))
onto a stream terminated by a transport protocol provider
which supports the
.BR TI .
After the
.B tirdwr
module has been pushed onto
a stream, none of the
.B TI
functions can be used. Subsequent calls to
.B TI
functions cause an error on the stream. Once the error is detected,
subsequent system calls on the stream return an error with
.B errno
set to
.BR EPROTO .
.sp
.LP
The following are the actions taken by the
.B tirdwr
module when pushed on
the stream, popped (see
.B I_POP
in 
.BR streamio (7I))
off  the stream, or
when data passes through it.
.sp
.ne 2
.mk
.na
.B push
.ad
.RS 9n
.rt
When the module is pushed onto a stream, it checks any existing data destined
for the user to ensure that only regular data messages are present. It ignores
any messages on the stream that relate to process management, such as messages
that generate signals to the user processes associated with the stream. If any
other messages are present, the
.B I_PUSH
will return an error with
.B errno
set to
.BR EPROTO .
.RE

.sp
.ne 2
.mk
.na
.B write
.ad
.RS 9n
.rt
The module takes the following actions on data that originated from a
.B write
system call:
.RS +4
.TP
.ie t \(bu
.el o
All messages with the exception of messages that contain control portions (see
the
.B putmsg
and
.B getmsg
system calls) are transparently passed onto
the module's downstream neighbor.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Any zero length data messages are freed by the module and they will not be
passed onto the module's downstream neighbor.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Any messages with control portions generate an error, and any further system
calls associated with the stream fails with
.B errno
set to
.BR EPROTO .
.RE
.RE

.sp
.ne 2
.mk
.na
.B read
.ad
.RS 9n
.rt
The module takes the following actions on data that originated from the
transport protocol provider.
.sp
All messages with the exception of those that contain control portions (see
the
.B putmsg
and
.B getmsg
system calls) are transparently passed onto
the module's upstream neighbor. The action taken on messages with control
portions will be as follows:
.RS +4
.TP
.ie t \(bu
.el o
Any data messages with control portions have the control portions removed from
the message before to passing the message on to the upstream neighbor.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Messages that represent an orderly release indication from the transport
provider generate a zero length data message, indicating the end of file, which
will be sent to the reader of the stream. The orderly release message itself is
freed by the module.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Messages that represent an abortive disconnect indication from the transport
provider cause all further
.B write
and
.B putmsg
system calls to fail
with
.B errno
set to
.BR ENXIO .
All further
.B read
and
.BR getmsg
system calls return zero length data (indicating end of file) once all previous
data has been read.
.RE
.RS +4
.TP
.ie t \(bu
.el o
With the exception of the above rules, all other messages with control
portions generate an error and all further system calls associated with the
stream will fail with
.B errno
set to
.BR EPROTO .
.RE
Any zero length data messages are freed by the module and they are not passed
onto the module's upstream neighbor.
.RE

.sp
.ne 2
.mk
.na
.B pop
.ad
.RS 9n
.rt
When the module is popped off the stream or the stream is closed, the module
takes the following action:
.RS +4
.TP
.ie t \(bu
.el o
If an orderly release indication has been previously received, then an orderly
release request will be sent to the remote side of the transport connection.
.RE
.RE

.SH SEE ALSO
.sp
.LP
.BR Intro (3),
.BR getmsg (2),
.BR putmsg (2),
.BR read (2),
.BR write (2),
.BR Intro (3),
.BR streamio (7I),
.BR timod (7M)
.sp
.LP
.I STREAMS Programming Guide
