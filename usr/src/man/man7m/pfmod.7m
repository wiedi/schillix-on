'\" te
.\" Copyright (C) 2006, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH pfmod 7M "18 June 2006" "SunOS 5.11" "STREAMS Modules"
.SH NAME
pfmod \- STREAMS Packet Filter Module
.SH SYNOPSIS
.LP
.nf
#include <sys/pfmod.h>
.fi

.LP
.nf
ioctl(\fIfd\fR, IPUSH, "pfmod");
.fi

.SH DESCRIPTION
.sp
.LP
.B pfmod
is a
.B STREAMS
module that subjects messages arriving on
its read queue to a packet filter and passes only those messages that the
filter accepts on to its upstream neighbor. Such filtering can be very
useful for user-level protocol implementations and for networking monitoring
programs that wish to view only specific types of events.
.SS "Read-side Behavior"
.sp
.LP
.B pfmod
applies the current packet filter to all
.B M_DATA
and
.B M_PROTO
messages arriving on its read queue. The module prepares these
messages for examination by first skipping over all leading
.BR M_PROTO
message blocks to arrive at the beginning of the message's data portion. If
there is no data portion,
.B pfmod
accepts the message and passes it
along to its upstream neighbor. Otherwise, the module ensures that the part
of the message's data that the packet filter might examine lies in
contiguous memory, calling the
.BR pullupmsg (9F)
utility routine if
necessary to force contiguity. (Note: this action destroys any sharing
relationships that the subject message might have had with other messages.)
Finally, it applies the packet filter to the message's data, passing the
entire message upstream to the next module if the filter accepts, and
discarding the message otherwise. See PACKET FILTERS below for details on
how the filter works.
.sp
.LP
If there is no packet filter yet in effect, the module acts as if the
filter exists but does nothing, implying that all incoming messages are
accepted. The ioctls section below describes how to associate a packet
filter with an instance of
.BR pfmod .
.sp
.LP
.B pfmod
passes all other messages through unaltered to its upper
neighbor.
.SS "Write-side Behavior"
.sp
.LP
.B pfmod
intercepts
.B M_IOCTL
messages for the
.I ioctl
described
below. The module passes all other messages through unaltered to its lower
neighbor.
.SH IOCTLS
.sp
.LP
.B pfmod
responds to the following
.IR ioctl .
.sp
.ne 2
.mk
.na
.B PFIOCSETF
.ad
.RS 14n
.rt
This
.I ioctl
directs the module to replace its current packet filter,
if any, with the filter specified by the
.B "struct packetfilt"
pointer
named by its final argument. This structure is defined in
.B <sys/pfmod.h>
as:
.RE

.sp
.in +2
.nf
struct packetfilt {
 uchar_t	Pf_Priority;             /* priority of filter */
 uchar_t	Pf_FilterLen;            /* length of filter cmd list */
 ushort_t	Pf_Filter[ENMAXFILTERS]; /* filter command list */
};
.fi
.in -2

.sp
.LP
The
.B Pf_Priority
field is included only for compatibility with other
packet filter implementations and is otherwise ignored. The packet filter
itself is specified in the
.B Pf_Filter
array as a sequence of two-byte
commands, with the
.B Pf_FilterLen
field giving the number of commands in
the sequence. This implementation restricts the maximum number of commands
in a filter
.RB ( ENMAXFILTERS )
to 255. The next section describes the
available commands and their semantics.
.SH PACKET FILTERS
.sp
.LP
A packet filter consists of the filter command list length (in units of
\fBushort_t\fRs), and the filter command list itself. (The priority field
mentioned above is ignored in this implementation.) Each filter command list
specifies a sequence of actions that operate on an internal stack of
ushort_ts ("shortwords") or an offset register. The offset register is
initially zero.  Each shortword of the command  list specifies an action and
a binary operator.  Using _n_ as shorthand for the next shortword of the
instruction stream and _%oreg_ for the offset register, the list of actions
is:
.sp
.in +2
.nf
       COMMAND        SHORTWORDS  ACTION
       ENF_PUSHLIT             2  Push _n_ on the stack.
       ENF_PUSHZERO            1  Push zero on the stack.
       ENF_PUSHONE             1  Push one on the stack.
       ENF_PUSHFFFF            1  Push 0xFFFF on the stack.
       ENF_PUSHFF00            1  Push 0xFF00 on the stack.
       ENF_PUSH00FF            1  Push 0x00FF on the stack.
       ENF_LOAD_OFFSET         2  Load _n_ into _%oreg_.
       ENF_BRTR                2  Branch forward _n_ shortwords if
                                  the top element of the stack is
                                  non-zero.
       ENF_BRFL                2  Branch forward _n_ shortwords if
                                  the top element of the stack is zero.
       ENF_POP                 1  Pop the top element from the stack.
       ENF_PUSHWORD+m          1  Push the value of shortword (_m_ +
                                  _%oreg_) of the packet onto the stack.
.fi
.in -2

.sp
.LP
The binary operators can be from the set
.RB { ENF_EQ ,
.BR ENF_NEQ ,
.BR ENF_LT ,
\fBENF_LE\fR, \fBENF_GT\fR,\fBENF_GE\fR, \fBENF_AND\fR,
.BR ENF_OR ,
.BR ENF_XOR }
which operate on the top two elements of the
stack and replace them with its result.
.sp
.LP
When both an action and operator are specified in the same shortword, the
action is performed followed by the operation.
.sp
.LP
The binary operator can also be from the set
.RB { ENF_COR ,
\fBENF_CAND\fR, \fBENF_CNOR\fR, \fBENF_CNAND\fR}. These are "short-circuit"
operators, in that they terminate the execution of the filter immediately if
the condition they are checking for is found, and continue otherwise. All
pop two elements from the stack and compare them for equality;
.B ENF_CAND
returns false if the result is false;
.B ENF_COR
returns
true if the result is true;
.B ENF_CNAND
returns true if the result is
false;
.B ENF_CNOR
returns false if the result is true. Unlike the other
binary operators, these four do not leave a result on the stack, even if
they continue.
.sp
.LP
The short-circuit operators should be used when possible, to reduce the
amount of time spent evaluating filters. When they are used, you should also
arrange the order of the tests so that the filter will succeed or fail as
soon as possible; for example, checking the
.B IP
destination field of a
.B UDP
packet is more likely to indicate failure than the packet type
field.
.sp
.LP
The special action
.B ENF_NOPUSH
and the special operator
.BR ENF_NOP
can be used to only perform the binary operation or to only push a value on
the stack. Since both are (conveniently) defined to be zero, indicating only
an action actually specifies the action followed by
.BR ENF_NOP ,
and
indicating only an operation actually specifies
.B ENF_NOPUSH
followed by
the operation.
.sp
.LP
After executing the filter command list, a non-zero value (true) left on
top of the stack (or an empty stack) causes the incoming packet to be
accepted and a zero value (false) causes the packet to be rejected. (If the
filter exits as the result of a short-circuit operator, the top-of-stack
value is ignored.) Specifying an undefined operation or action in the
command list or performing an illegal operation or action (such as pushing a
shortword offset past the end of the packet or executing a binary operator
with fewer than two shortwords on the stack) causes a filter to reject the
packet.
.SH EXAMPLES
.sp
.LP
The packet filter module is not dependent on any particular device driver
or module but is commonly used with datalink drivers such as the Ethernet
driver. If the underlying datalink driver supports the Data Link Provider
Interface (DLPI) message set, the appropriate
.B "STREAMS DLPI"
messages
must be issued to attach the stream to a particular hardware device and bind
a datalink address to the stream before the underlying driver will route
received packets upstream. Refer to the
.B DLPI
Version 2 specification
for details on this interface.
.sp
.LP
The reverse
.B ARP
daemon program may use code similar to the following
fragment to construct a filter that rejects all but
.B RARP
packets. That
is, it accepts only packets whose Ethernet type field has the value
.BR ETHERTYPE_REVARP .
The filter works whether a VLAN is configured or
not.
.sp
.in +2
.nf
struct ether_header eh;		/* used only for offset values */
struct packetfilt pf;
register ushort_t *fwp = pf.Pf_Filter;
ushort_t offset;
int	fd;
/*
 * Push packet filter streams module.
 */
if (ioctl(fd, I_PUSH, "pfmod") < 0)
	syserr("pfmod");

/*
 * Set up filter.  Offset is the displacement of the Ethernet
 * type field from the beginning of the packet in units of
 * ushort_ts.
 */
offset = ((uint_t) &eh.ether_type - (uint_t) &eh.ether_dhost) /
	            sizeof (us_short);
       *fwp++ = ENF_PUSHWORD + offset;
       *fwp++ = ENF_PUSHLIT;
       *fwp++ = htons(ETHERTYPE_VLAN);
       *fwp++ = ENF_EQ;
       *fwp++ = ENF_BRFL;
       *fwp++ = 3;  /* If this isn't ethertype VLAN, don't change oreg */
       *fwp++ = ENF_LOAD_OFFSET;
       *fwp++ = 2;  /* size of the VLAN tag in words */
       *fwp++ = ENF_POP;
       *fwp++ = ENF_PUSHWORD + offset;
       *fwp++ = ENF_PUSHLIT;
       *fwp++ = htons(ETHERTYPE_REVARP);
       *fwp++ = ENF_EQ;
       pf.Pf_FilterLen = fwp - &pf.PF_Filter[0];
.fi
.in -2

.sp
.LP
This filter can be abbreviated by taking advantage of the ability to
combine actions and operations:
.sp
.in +2
.nf
       *fwp++ = ENF_PUSHWORD + offset;
       *fwp++ = ENF_PUSHLIT | ENF_EQ;
       *fwp++ = htons(ETHERTYPE_REVARP);
       *fwp++ = htons(ETHERTYPE_VLAN);
       *fwp++ = ENF_BRFL | ENF_NOP;
       *fwp++ = 3;
       *fwp++ = ENF_LOAD_OFFSET | ENF_NOP;
       *fwp++ = 2;
       *fwp++ = ENF_POP | ENF_NOP;
       *fwp++ = ENF_PUSHWORD + offset;
       *fwp++ = ENF_PUSHLIT | ENF_EQ;
       *fwp++ = htons(ETHERTYPE_REVARP);
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR bufmod (7M),
.BR dlpi (7P),
.BR pullupmsg (9F)
