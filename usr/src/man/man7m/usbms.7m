'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH usbms 7M "1 Dec 2005" "SunOS 5.11" "STREAMS Modules"
.SH NAME
usbms \- USB mouse STREAMS module
.SH SYNOPSIS
.LP
.nf
#include <sys/vuid_event.h>
.fi

.LP
.nf
#include <sys/vuid_wheel.h>
.fi

.LP
.nf
#include <sys/msio.h>
.fi

.LP
.nf
#include <sys/msreg.h>
.fi

.SH DESCRIPTION
.sp
.LP
The
.B "usbms STREAMS"
module processes byte streams generated by a
\fBUSB\fR mouse.  A  \fBUSB\fR mouse is a member of the Human Interface Device
(HID) class and the
.B usbms
module supports only the mouse boot protocol
defined in the
.B HID
specification.
.sp
.LP
The
.B usbms
module must be pushed on top of the
.B HID
class driver
(see \fBhid\fR(7D)). In the  \fBVUID_FIRM_EVENT\fR mode, the \fBusbms\fR
module translates packets from the
.B USB
mouse into Firm events. The Firm
event structure is defined in
.BR <sys/vuid_event.h> \&.
The
.BR STREAMS
module state is initially set to raw or
.B VUID_NATIVE
mode which performs
no message processing. See the
.I "HID 1.0"
specification for the raw format
of the mouse packets. To initiate mouse protocol conversion to Firm events,
change the state to
.BR VUID_FIRM_EVENT .
.sp
.LP
When the usb mouse is opened or hot plugged in, the MOUSE_TYPE_ABSOLUTE
event (Firm event) is sent to the upper level to notify the VUID application
that it is the absolute mouse.
.SH IOCTLS
.sp
.ne 2
.mk
.na
.B VUIDGFORMAT
.ad
.RS 16n
.rt
This option returns the current state of the
.B STREAMS
module. The state
of the
.B "usbms STREAMS"
module may be either
.B VUID_NATIVE
(no
message processing) or
.B VUID_FIRM_EVENT
(convert to Firm events).
.RE

.sp
.ne 2
.mk
.na
.B VUIDSFORMAT
.ad
.RS 16n
.rt
The argument is a pointer to an
.BR int .
Set the state of the
\fBSTREAMS\fR module to the \fBint\fR pointed to by the argument.
.RE

.sp
.in +2
.nf
typedef struct  vuid_addr_probe {
     short base; /* default vuid device addr directed too */
     union {
            short next;   /* next addr for default when VUIDSADDR */
            short current; /* current addr of default when VUIDGADDR */
     } data;
} Vuid_addr_probe;
.fi
.in -2

.sp
.ne 2
.mk
.na
.B VUIDSADDR
.ad
.RS 14n
.rt
The argument is a pointer to a
.B Vuid_addr_probe
structure.
\fBVUIDSADDR\fR sets the virtual input device segment address indicated by
base to next.
.RE

.sp
.LP
If base does not equal
.BR VKEY_FIRST ,
\fBENODEV\fR is returned.
.sp
.ne 2
.mk
.na
.B VUIDGADDR
.ad
.RS 14n
.rt
The argument is a pointer to a
.B Vuid_addr_probe
structure. Return the
address of the virtual input device segment indicated by base to current.
.RE

.sp
.LP
If base does not equal
.BR VKEY_FIRST ,
\fBENODEV\fR is returned.
.sp
.ne 2
.mk
.na
.B VUIDGWHEELCOUNT
.ad
.sp .6
.RS 4n
This ioctl takes a pointer to an integer as argument and sets the value of
the integer to the number of wheels available on this device. This ioctl
returns 1 if wheel(s) are present and zero if no wheels are present.
.RE

.sp
.ne 2
.mk
.na
.B VUIDGWHEELINFO
.ad
.sp .6
.RS 4n
This command returns static information about the wheel that does not change
while a device is in use. Currently the only information  defined  is the
wheel orientation which is either VUID_WHEEL_FORMAT_VERTICAL or
VUID_WHEEL_FORMAT_HORIZONTAL. If the module cannot distinguish the orientation
of the wheel or the wheel is of some other format, the format is set to
VUID_WHEEL_FORMAT_UNKNOWN.
.sp
.in +2
.nf
   typedef struct {
           int     vers;
           int     id;
           int     format;
   } wheel_info;
.fi
.in -2

The  ioctl  takes a pointer to "wheel_info" structure with the "vers" set to
the current version of the "wheel_info" structure and "id" set to the id of
the wheel for which the information is desired.
.RE

.sp
.ne 2
.mk
.na
.B VUIDSWHEELSTATE/VUIDGWHEELSTATE
.ad
.sp .6
.RS 4n
VUIDSWHEELSTATE sets the state of the wheel to that specified in the
stateflags. VUIDGWHEELSTATE returns the current state settings in the
stateflags field.
.sp
stateflags is an  OR'ed  set of  flag  bits. The only flag currently defined
is VUID_WHEEL_STATE_ENABLED.
.sp
When stateflags is set to VUID_WHEEL_STATE_ENABLED the module converts motion
of the specified wheel into VUID events and sends those up stream.
.sp
Wheel events are enabled by default.
.sp
Applications that want to change the stateflags should first get the current
stateflags and then change only the bit they want.
.sp
.in +2
.nf
   typedef struct {
           int            vers;
           int            id;
           uint32_t       stateflags;
   } wheel_state;
.fi
.in -2

These ioctls take a pointer to "wheel_state" as an argument with  the "vers"
and "id" members filled in. These members have the same meaning as that for
\&'VUIDGWHEEL INFO' ioctl.
.RE

.sp
.LP
\fBioctl()\fR requests for changing and retrieving mouse parameters use the
\fBMs_parms\fR structure:
.sp
.in +2
.nf
   typedef struct {
        int     jitter_thresh;
        int     speed_law;
        int     speed_limit;
   } Ms_parms;
.fi
.in -2

.sp
.LP
\fBjitter_thresh\fR is the "jitter threshold" of the mouse.  Motions fewer
than
.B jitter_thresh
units along both axes are accumulated and then sent
up the stream after 1/12 second.
.sp
.LP
\fBspeed_law\fR indicates whether extremely large motions are to be ignored.
If it is \fB1,\fR a "speed limit" is applied to mouse motions.  Motions along
either axis of more than
.B speed_limit
units are discarded.
.sp
.ne 2
.mk
.na
.B MSIOGETPARMS
.ad
.RS 19n
.rt
The argument is a pointer to a
.B Ms_params
.RB "structure. The" " usbms"
module parameters are returned in the structure.
.RE

.sp
.ne 2
.mk
.na
.B MSIOSETPARMS
.ad
.RS 19n
.rt
The argument is a pointer to a
.B Ms_params
.RB "structure. The" " usbms"
module parameters are set according to the values in the structure.
.RE

.sp
.ne 2
.mk
.na
.B MSIOSRESOLUTION
.ad
.RS 19n
.rt
Used by the absolute mouse to get the  current screen resolution. The
parameter is a pointer to the
.B Ms_screen_resolution
structure:
.sp
.in +2
.nf
int    height;         /* height of the screen */
int    width;         /* width of the screen */
}Ms_screen_resolution;
.fi
.in -2

The
.B usbms
module parameters are set according to the values in the
structure and used to calculate the correct coordinates.
.RE

.SH FILES
.sp
.ne 2
.mk
.na
.B /kernel/strmod/usbms
.ad
.sp .6
.RS 4n
32-bit ELF kernel STREAMS module (x86 platform only.)
.RE

.sp
.ne 2
.mk
.na
.B /kernel/strmod/sparcv9/usbms
.ad
.sp .6
.RS 4n
SPARC 64-bit ELF kernel STREAMS module
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
ArchitecturePCI-based  systems
_
Availability SUNWusb
.TE

.SH SEE ALSO
.sp
.LP
.BR ioctl (2),
.BR attributes (5),
.BR hid (7D),
.BR virtualkm (7D),
.BR usba (7D)
.sp
.LP
.I System Administration Guide: Basic Administration
.sp
.LP
http://\fIwww/sun.com/io\fR
.SH DIAGNOSTICS
.sp
.LP
The following messages may be logged into the system log. They are formatted
in the following manner:
.sp
.in +2
.nf
<device path><usbms<instance number>): message...
.fi
.in -2
.sp

.sp
.ne 2
.mk
.na
\fBInvalid Hid descriptor tree. Set to default value (3 buttons).\fR
.ad
.sp .6
.RS 4n
The mouse supplied incorrect information in its HID report.
.RE

.sp
.ne 2
.mk
.na
\fBMouse buffer flushed when overrun.\fR
.ad
.sp .6
.RS 4n
Mouse data was lost.
.RE

