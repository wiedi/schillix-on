'\" te
.\"  All Rights Reserved Copyright (c) 2004, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH kb 7M "26 Feb 2004" "SunOS 5.11" "STREAMS Modules"
.SH NAME
kb \- keyboard STREAMS module
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
.fi

.LP
.nf
#include <sys/stream.h>
.fi

.LP
.nf
#include <sys/stropts.h>
.fi

.LP
.nf
#include <sys/vuid_event.h>
.fi

.LP
.nf
#include <sys/kbio.h>
.fi

.LP
.nf
#include <sys/kbd.h>
.fi

.LP
.nf
ioctl(fd, I_PUSH, "kb");
.fi

.SH DESCRIPTION
.sp
.LP
The
.B kb
STREAMS module processes byte streams generated by a keyboard
attached to a
.B CPU
serial port. Definitions for altering keyboard
translation and reading events from the keyboard are contained in
<\fBsys/kbio.h\fR> and <\fBsys/kbd.h\fR>.
.sp
.LP
The
.B kb
STREAMS module utilizes a set of keyboard tables to recognize
which keys have been typed. Each translation table is an array of 128 16-bit
words (\fBunsigned short\fRs). If a table entry is less than 0x100, the entry is
treated as an
.B ISO
8859/1 character. Higher values indicate special
characters that invoke more complicated actions.
.SS "Keyboard Translation Mode"
.sp
.LP
The keyboard can be in one of the following translation modes:
.sp
.ne 2
.mk
.na
.B TR_NONE
.ad
.RS 21n
.rt
Keyboard translation is turned off and up/down key codes are reported.
.RE

.sp
.ne 2
.mk
.na
.B TR_ASCII
.ad
.RS 21n
.rt
\fBISO\fR 8859/1 codes are reported.
.RE

.sp
.ne 2
.mk
.na
.B TR_EVENT
.ad
.RS 21n
.rt
\fBfirm_events\fR are reported.
.RE

.sp
.ne 2
.mk
.na
.B TR_UNTRANS_EVENT
.ad
.RS 21n
.rt
\fBfirm_events\fR containing unencoded keystation codes are reported for all
input events within the window system.
.RE

.SS "Keyboard Translation-Table Entries"
.sp
.LP
All instances of the
.B kb
module share seven translation tables that
convert raw keystation codes to event values. The tables are:
.sp
.ne 2
.mk
.na
\fBUnshifted\fR
.ad
.RS 14n
.rt
Used when a key is depressed and no shifts are in effect.
.RE

.sp
.ne 2
.mk
.na
\fBShifted\fR
.ad
.RS 14n
.rt
Used when a key is depressed and a Shift key is held down.
.RE

.sp
.ne 2
.mk
.na
.B Caps Lock
.ad
.RS 14n
.rt
Used when a key is depressed and Caps Lock is in effect.
.RE

.sp
.ne 2
.mk
.na
.B Alt Graph
.ad
.RS 14n
.rt
Used when a key is depressed and the Alt Graph key is held down.
.RE

.sp
.ne 2
.mk
.na
.B Num Lock
.ad
.RS 14n
.rt
Used when a key is depressed and Num Lock is in effect.
.RE

.sp
.ne 2
.mk
.na
.B Controlled
.ad
.RS 14n
.rt
Used when a key is depressed and the Control key is held down. (Regardless of
whether a Shift key or the Alt Graph is being held down, or whether Caps Lock or
Num Lock is in effect).
.RE

.sp
.ne 2
.mk
.na
.B Key Up
.ad
.RS 14n
.rt
Used when a key is released.
.RE

.sp
.LP
Each key on the keyboard has a
.B "key station"
code that represents a number
from 0 to 127. The number is used as an index into the translation table that is
currently in effect. If the corresponding entry in the translation table is a
value from 0 to 255, the value is treated as an
.B ISO
8859/1 character, and
the character is the result of the translation.
.sp
.LP
If the entry in the translation table is higher than 255, it is a special
entry. Special entry values are classified according to the value of the
high-order bits. The high-order value for each class is defined as a constant,
as shown below. When added to the constant, the value of the low-order bits
distinguish between keys within each class:
.sp
.ne 2
.mk
.na
.B SHIFTKEYS 0x100
.ad
.RS 20n
.rt
A shift key. The value of the particular shift key is added to determine which
shift mask to apply:
.sp
.ne 2
.mk
.na
.B CAPSLOCK 0
.ad
.RS 17n
.rt
Caps Lock key.
.RE

.sp
.ne 2
.mk
.na
.B SHIFTLOCK 1
.ad
.RS 17n
.rt
"Shift Lock" key.
.RE

.sp
.ne 2
.mk
.na
.B LEFTSHIFT 2
.ad
.RS 17n
.rt
Left-hand Shift key.
.RE

.sp
.ne 2
.mk
.na
.B RIGHTSHIFT 3
.ad
.RS 17n
.rt
Right-hand Shift key.
.RE

.sp
.ne 2
.mk
.na
.B LEFTCTRL 4
.ad
.RS 17n
.rt
Left-hand (or only) Control key.
.RE

.sp
.ne 2
.mk
.na
.B RIGHTCTRL 5
.ad
.RS 17n
.rt
Right-hand Control key.
.RE

.sp
.ne 2
.mk
.na
.B ALTGRAPH 9
.ad
.RS 17n
.rt
 Alt Graph key.
.RE

.sp
.ne 2
.mk
.na
.B ALT 10
.ad
.RS 17n
.rt
 Alternate or Alt key.
.RE

.sp
.ne 2
.mk
.na
.B NUMLOCK 11
.ad
.RS 17n
.rt
 Num Lock key.
.RE

.RE

.sp
.ne 2
.mk
.na
.B BUCKYBITS 0x200
.ad
.RS 20n
.rt
Used to toggle mode-key-up/down status without altering the value of an
accompanying
.B ISO
8859/1 character. The actual bit-position value, minus 7,
is added.
.sp
.ne 2
.mk
.na
.B METABIT 0
.ad
.RS 16n
.rt
The Meta key was pressed along with the key. This is the only user-accessible
bucky bit. It is ORed in as the 0x80 bit; since this bit is a legitimate bit in
a character, the only way to distinguish between, for example, 0xA0 as
\fBMETA+0x20\fR and 0xA0 as an 8-bit character is to watch for META key up and
META key down events and keep track of whether the
.B META
key was down.
.RE

.sp
.ne 2
.mk
.na
.B SYSTEMBIT 1
.ad
.RS 16n
.rt
The System key was pressed. This is a place holder to indicate which key is the
system-abort key.
.RE

.RE

.sp
.ne 2
.mk
.na
.B FUNNY 0x300
.ad
.RS 20n
.rt
Performs various functions depending on the value of the low 4 bits:
.sp
.ne 2
.mk
.na
.B NOP 0x300
.ad
.RS 20n
.rt
Does nothing.
.RE

.sp
.ne 2
.mk
.na
.B OOPS 0x301
.ad
.RS 20n
.rt
Exists, but is undefined.
.RE

.sp
.ne 2
.mk
.na
.B HOLE 0x302
.ad
.RS 20n
.rt
There is no key in this position on the keyboard, and the position-code should
not be used.
.RE

.sp
.ne 2
.mk
.na
.B RESET 0x306
.ad
.RS 20n
.rt
Keyboard reset.
.RE

.sp
.ne 2
.mk
.na
.B ERROR 0x307
.ad
.RS 20n
.rt
The keyboard driver detected an internal error.
.RE

.sp
.ne 2
.mk
.na
.B IDLE 0x308
.ad
.RS 20n
.rt
The keyboard is idle (no keys down).
.RE

.sp
.ne 2
.mk
.na
.B COMPOSE 0x309
.ad
.RS 20n
.rt
The
.B COMPOSE
key; the next two keys should comprise a two-character
COMPOSE key sequence.
.RE

.sp
.ne 2
.mk
.na
.B NONL 0x30A
.ad
.RS 20n
.rt
Used only in the Num Lock table; indicates that this key is not affected by the
Num Lock state, so that the translation table to use to translate this key
should be the one that would have been used had Num Lock not been in effect.
.RE

.sp
.ne 2
.mk
.na
\fB0x30B \(em 0x30F\fR
.ad
.RS 20n
.rt
Reserved for non-parameterized functions.
.RE

.RE

.sp
.ne 2
.mk
.na
.B FA_CLASS 0x400
.ad
.RS 20n
.rt
A floating accent or "dead key." When this key is pressed, the next key
generates an event for an accented character; for example, "floating accent
grave" followed by the "a" key generates an event with the \fBISO\fR 8859/1 code
for the "a with grave accent" character. The low-order bits indicate which
accent; the codes for the individual "floating accents" are as follows:
.sp
.ne 2
.mk
.na
.B FA_UMLAUT 0x400
.ad
.RS 21n
.rt
umlaut
.RE

.sp
.ne 2
.mk
.na
.B FA_CFLEX 0x401
.ad
.RS 21n
.rt
circumflex
.RE

.sp
.ne 2
.mk
.na
.B FA_TILDE 0x402
.ad
.RS 21n
.rt
tilde
.RE

.sp
.ne 2
.mk
.na
.B FA_CEDILLA 0x403
.ad
.RS 21n
.rt
cedilla
.RE

.sp
.ne 2
.mk
.na
.B FA_ACUTE 0x404
.ad
.RS 21n
.rt
acute accent
.RE

.sp
.ne 2
.mk
.na
.B FA_GRAVE 0x405
.ad
.RS 21n
.rt
grave accent
.RE

.RE

.sp
.ne 2
.mk
.na
.B STRING 0x500
.ad
.RS 20n
.rt
The low-order bits index a table of strings. When a key with a \fBSTRING\fR
entry is depressed, the characters in the null-terminated string for that key
are sent, character-by-character. The maximum length is defined as:
.sp
.ne 2
.mk
.na
.B KTAB_STRLEN
.ad
.RS 16n
.rt
10
.RE

Individual string numbers are defined as:
.sp
.ne 2
.mk
.na
.B HOMEARROW
.ad
.RS 15n
.rt
0x00
.RE

.sp
.ne 2
.mk
.na
.B UPARROW
.ad
.RS 15n
.rt
0x01
.RE

.sp
.ne 2
.mk
.na
.B DOWNARROW
.ad
.RS 15n
.rt
0x02
.RE

.sp
.ne 2
.mk
.na
.B LEFTARROW
.ad
.RS 15n
.rt
0x03
.RE

.sp
.ne 2
.mk
.na
.B RIGHTARROW
.ad
.RS 15n
.rt
0x04
.RE

String numbers 0x05 \(em 0x0F are available for custom entries.
.RE

.sp
.ne 2
.mk
.na
.B FUNCKEYS 0x600
.ad
.RS 20n
.rt
There are 64 keys reserved for function keys. The actual positions are usually
on the left/right/top/bottom of the keyboard.
.sp
The next-to-lowest 4 bits indicate the group of function keys:
.sp
.ne 2
.mk
.na
.B LEFTFUNC
.ad
.RS 18n
.rt
0x600
.RE

.sp
.ne 2
.mk
.na
.B RIGHTFUNC
.ad
.RS 18n
.rt
0x610
.RE

.sp
.ne 2
.mk
.na
.B TOPFUNC 0x610
.ad
.RS 18n
.rt
0x610
.RE

.sp
.ne 2
.mk
.na
.B BOTTOMFUNC
.ad
.RS 18n
.rt
0x630
.RE

The low 4 bits indicate the function key number within the group:
.sp
.ne 2
.mk
.na
\fBLF(\fIn\fR)\fR
.ad
.RS 10n
.rt
(LEFTFUNC+(\fIn\fR)-1)
.RE

.sp
.ne 2
.mk
.na
\fBRF(\fIn\fR)\fR
.ad
.RS 10n
.rt
(RIGHTFUNC+(\fIn\fR)-1)
.RE

.sp
.ne 2
.mk
.na
\fBTF(\fIn\fR)\fR
.ad
.RS 10n
.rt
(TOPFUNC+(\fIn\fR)-1)
.RE

.sp
.ne 2
.mk
.na
\fBBF(\fIn\fR)\fR
.ad
.RS 10n
.rt
(BOTTOMFUNC+(\fIn\fR)-1)
.RE

.RE

.sp
.ne 2
.mk
.na
.B PADKEYS 0x700
.ad
.RS 18n
.rt
A "numeric keypad key." These entries should appear only in the Num Lock
translation table; when Num Lock is in effect, these events will be generated by
pressing keys on the right-hand keypad. The low-order bits indicate which key.
The codes for the individual keys are:
.sp
.ne 2
.mk
.na
.B PADEQUAL 0x700
.ad
.RS 19n
.rt
"=" key
.RE

.sp
.ne 2
.mk
.na
.B PADSLASH 0x701
.ad
.RS 19n
.rt
"/" key
.RE

.sp
.ne 2
.mk
.na
.B PADSTAR 0x702
.ad
.RS 19n
.rt
"*" key
.RE

.sp
.ne 2
.mk
.na
.B PADMINUS 0x703
.ad
.RS 19n
.rt
"-" key
.RE

.sp
.ne 2
.mk
.na
.B PADSEP 0x704
.ad
.RS 19n
.rt
"," key
.RE

.sp
.ne 2
.mk
.na
.B PAD7 0x705
.ad
.RS 19n
.rt
"7" key
.RE

.sp
.ne 2
.mk
.na
.B PAD8 0x706
.ad
.RS 19n
.rt
"8" key
.RE

.sp
.ne 2
.mk
.na
.B PAD9 0x707
.ad
.RS 19n
.rt
"9" key
.RE

.sp
.ne 2
.mk
.na
.B PADPLUS 0x708
.ad
.RS 19n
.rt
"+" key
.RE

.sp
.ne 2
.mk
.na
.B PAD4 0x709
.ad
.RS 19n
.rt
"4" key
.RE

.sp
.ne 2
.mk
.na
.B PAD5 0x70A
.ad
.RS 19n
.rt
"5" key
.RE

.sp
.ne 2
.mk
.na
.B PAD6 0x70B
.ad
.RS 19n
.rt
"6" key
.RE

.sp
.ne 2
.mk
.na
.B PAD1 0x70C
.ad
.RS 19n
.rt
"1" key
.RE

.sp
.ne 2
.mk
.na
.B PAD2 0x70D
.ad
.RS 19n
.rt
"2" key
.RE

.sp
.ne 2
.mk
.na
.B PAD3 0x70E
.ad
.RS 19n
.rt
"3" key
.RE

.sp
.ne 2
.mk
.na
.B PAD0 0x70F
.ad
.RS 19n
.rt
"0" key
.RE

.sp
.ne 2
.mk
.na
.B PADDOT 0x710
.ad
.RS 19n
.rt
"." key
.RE

.sp
.ne 2
.mk
.na
.B PADENTER 0x711
.ad
.RS 19n
.rt
"Enter" key
.RE

.RE

.sp
.LP
When a function key is pressed in
.B TR_ASCII
mode, the following escape
sequence is sent:
.sp
.LP
\fBESC[0\|.\|.\|..\|9z\fR
.sp
.LP
where  \fBESC\fR is a single escape character and "0\|.\|..\|9" indicates the
decimal representation of the function-key value. For example, function key
\fBR1\fR sends the sequence:
.sp
.LP
\fBESC[208z\fR
.sp
.LP
because the decimal value of RF(1) is 208. In
.B TR_EVENT
mode, if there is
a
.B VUID
event code for the function key in question, an event with that
event code is generated; otherwise, individual events for the characters of the
escape sequence are generated.
.SS "Keyboard Compatibility Mode"
.sp
.LP
When started, the
.B kb
STREAMS module is in the compatibility mode. When
the keyboard is in the
.B TR_EVENT
translation mode,
.B ISO
8859/1
characters from the upper half of the character set (that is, characters with
.RB "the eighth bit set) , are presented as events with codes in the" " ISO_FIRST"
range (as defined in <\fB<sys/vuid_event.h>\fR>). For backwards compatibility
with older versions of the keyboard driver, the event code is \fBISO_FIRST\fR
plus the character value. When compatibility mode is turned off, \fBISO\fR
8859/1 characters are presented as events with codes equal to the character
code.
.SH DESCRIPTION
.sp
.LP
The following
.B ioctl()
requests set and retrieve the current translation
mode of a keyboard:
.sp
.ne 2
.mk
.na
.B KIOCTRANS
.ad
.RS 15n
.rt
Pointer to an
.BR int .
The translation mode is set to the value in the
\fBint\fR pointed to by the argument.
.RE

.sp
.ne 2
.mk
.na
.B KIOCGTRANS
.ad
.RS 15n
.rt
Pointer to an
.BR int .
The current translation mode is stored in the
\fBint\fR pointed to by the argument.
.RE

.sp
.LP
\fBioctl()\fR requests for changing and retrieving entries from the keyboard
translation table use the
.B kiockeymap
structure:
.sp
.in +2
.nf
struct kiockeymap {
int	kio_tablemask;	/* Translation table (one of: 0, CAPSMASK,
			 * SHIFTMASK, CTRLMASK, UPMASK,
			 * ALTGRAPHMASK, NUMLOCKMASK)
			 */
#define KIOCABORT1 -1	  /* Special "mask": abort1 keystation */
#define KIOCABORT2 -2	  /* Special "mask": abort2 keystation */
	uchar_t kio_station; /* Physical keyboard key station (0-127) */
	ushort_t kio_entry;	   /* Translation table station's entry */
	char kio_string[10]; /* Value for STRING entries-null terminated */
};
.fi
.in -2

.sp
.ne 2
.mk
.na
.B KIOCSKEY
.ad
.RS 13n
.rt
Pointer to a
.B kiockeymap
structure. The translation table entry referred
to by the values in that structure is changed. The
.B kio_tablemask
request
specifies which of the following translation tables contains the entry to be
modified:
.sp
.ne 2
.mk
.na
.B UPMASK 0x0080
.ad
.sp .6
.RS 4n
"Key Up" translation table.
.RE

.sp
.ne 2
.mk
.na
.B NUMLOCKMASK 0x0800
.ad
.sp .6
.RS 4n
"Num Lock" translation table.
.RE

.sp
.ne 2
.mk
.na
.B CTRLMASK 0x0030
.ad
.sp .6
.RS 4n
"Controlled" translation table.
.RE

.sp
.ne 2
.mk
.na
.B ALTGRAPHMASK 0x0200
.ad
.sp .6
.RS 4n
"Alt Graph" translation table.
.RE

.sp
.ne 2
.mk
.na
.B SHIFTMASK 0x000E
.ad
.sp .6
.RS 4n
"Shifted" translation table.
.RE

.sp
.ne 2
.mk
.na
.B CAPSMASK 0x0001
.ad
.sp .6
.RS 4n
"Caps Lock" translation table.
.RE

.sp
.ne 2
.mk
.na
\fB(No shift keys pressed or locked)\fR
.ad
.sp .6
.RS 4n
"Unshifted" translation table.
.RE

.RE

.sp
.LP
The
.B kio_station
request specifies the keystation code for the entry to be
modified. The value of
.B kio_entry
is stored in the entry in question. If
\fBkio_entry\fR is between \fBSTRING\fR and \fBSTRING+15,\fR the string
contained in
.B kio_string
is copied to the appropriate string table entry.
This call may return
.B EINVAL
if there are invalid arguments.
.sp
.LP
Special values of \fBkio_tablemask\fR can affect the two step "break to the
\fBPROM\fR monitor" sequence. The usual sequence is \fBL1\fR-\fBa\fR or
\fBStop\fR-. If \fBkio_tablemask\fR is
.BR KIOCABORT1 ,
then the value of
\fBkio_station\fR is set to be the first keystation in the sequence. If
.BR kio_tablemask ,
is
.B KIOCABORT2
then the value of
.B kio_station
is
set to be the second keystation in the sequence. An attempt to change the "break
to the  \fBPROM\fR monitor" sequence without having superuser permission results
in an
.B EPERM
error.
.sp
.ne 2
.mk
.na
.B KIOCGKEY
.ad
.RS 13n
.rt
The argument is a pointer to a
.B kiockeymap
structure. The current value of
the keyboard translation table entry specified by
.B kio_tablemask
and
\fBkio_station\fR is stored in the structure pointed to by the argument. This
call may return
.B EINVAL
if there are invalid arguments.
.RE

.sp
.ne 2
.mk
.na
.B KIOCTYPE
.ad
.RS 13n
.rt
The argument is a pointer to an
.BR int .
A code indicating the type of the
keyboard is stored in the
.B int
pointed to by the argument:
.sp
.ne 2
.mk
.na
.B KB_SUN3
.ad
.RS 14n
.rt
Sun Type 3 keyboard
.RE

.sp
.ne 2
.mk
.na
.B KB_SUN4
.ad
.RS 14n
.rt
Sun Type 4 or 5 keyboard, or non-USB Sun Type 6 keyboard
.RE

.sp
.ne 2
.mk
.na
.B KB_USB
.ad
.RS 14n
.rt
USB standard HID keyboard, including Sun Type 6 USB keyboards
.RE

.sp
.ne 2
.mk
.na
.B KB_ASCII
.ad
.RS 14n
.rt
ASCII terminal masquerading as keyboard
.RE

.sp
.ne 2
.mk
.na
.B KB_PC
.ad
.RS 14n
.rt
Type 101 PC keyboard
.RE

.sp
.ne 2
.mk
.na
.B KB_DEFAULT
.ad
.RS 14n
.rt
 Stored in the
.B int
pointed to by the argument if the keyboard type is unknown. In case of error, -1 is stored in the
.B int
pointed to by the argument.
.RE

.RE

.sp
.ne 2
.mk
.na
.B KIOCLAYOUT
.ad
.RS 15n
.rt
The argument is a pointer to an
.BR int .
On a Sun Type 4 keyboard, the layout
code specified by the keyboard's
.B DIP
switches is stored in the
.BR int
pointed to by the argument.
.RE

.sp
.ne 2
.mk
.na
.B KIOCCMD
.ad
.RS 15n
.rt
The argument is a pointer to an
.BR int .
The command specified by the value
of the
.B int
pointed to by the argument is sent to the keyboard. The
commands that can be sent are:
.sp
Commands to the Sun Type 3 and Sun Type 4 keyboards:
.sp
.ne 2
.mk
.na
.B KBD_CMD_RESET
.ad
.RS 20n
.rt
Reset keyboard as if power-up.
.RE

.sp
.ne 2
.mk
.na
.B KBD_CMD_BELL
.ad
.RS 20n
.rt
Turn on the bell.
.RE

.sp
.ne 2
.mk
.na
.B KBD_CMD_NOBELL
.ad
.RS 20n
.rt
Turn off the bell.
.RE

.sp
.ne 2
.mk
.na
.B KBD_CMD_CLICK
.ad
.RS 20n
.rt
Turn on the click annunciator.
.RE

.sp
.ne 2
.mk
.na
.B KBD_CMD_NOCLICK
.ad
.RS 20n
.rt
Turn off the click annunciator.
.RE

Commands to the Sun Type 4 keyboard:
.sp
.ne 2
.mk
.na
.B KBD_CMD_SETLED
.ad
.RS 22n
.rt
Set keyboard LEDs.
.RE

.sp
.ne 2
.mk
.na
.B KBD_CMD_GETLAYOUT
.ad
.RS 22n
.rt
Request that keyboard indicate layout.
.RE

.RE

.sp
.LP
Inappropriate commands for particular keyboard types are ignored. Since there
is no reliable way to get the state of the bell or click (because the keyboard
cannot be queried and a process could do writes to the appropriate serial driver
\(em circumventing this \fBioctl()\fR request) an equivalent \fBioctl()\fR to
query its state is not provided.
.sp
.ne 2
.mk
.na
.B KIOCSLED
.ad
.RS 13n
.rt
The argument is a pointer to an
.BR char .
On the Sun Type 4 keyboard, the
\fBLEDs\fR are set to the value specified in that
.BR char .
The values for the
four
.B LEDs
are:
.sp
.ne 2
.mk
.na
.B LED_CAPS_LOCK
.ad
.RS 20n
.rt
"Caps Lock" light.
.RE

.sp
.ne 2
.mk
.na
.B LED_COMPOSE
.ad
.RS 20n
.rt
"Compose" light.
.RE

.sp
.ne 2
.mk
.na
.B LED_SCROLL_LOCK
.ad
.RS 20n
.rt
"Scroll Lock" light.
.RE

.sp
.ne 2
.mk
.na
.B LED_NUM_LOCK
.ad
.RS 20n
.rt
"Num Lock" light.
.RE

On some Japanese layouts, the value for the fifth
.B LED
is:
.sp
.ne 2
.mk
.na
.B LED_KANA
.ad
.RS 13n
.rt
"Kana" light.
.RE

.RE

.sp
.ne 2
.mk
.na
.B KIOCGLED
.ad
.RS 16n
.rt
Pointer to a
.BR char .
The current state of the
.B LEDs
is stored in the
\fBchar\fR pointed to by the argument.
.RE

.sp
.ne 2
.mk
.na
.B KIOCSCOMPAT
.ad
.RS 16n
.rt
Pointer to an \fBint\fR. "Compatibility mode" is turned on if the \fBint\fR has
a value of 1, and is turned off if the
.B int
has a value of 0.
.RE

.sp
.ne 2
.mk
.na
.B KIOCGCOMPAT
.ad
.RS 16n
.rt
Pointer to an \fBint\fR. The current state of "compatibility mode" is stored in
the
.B int
pointed to by the argument.
.RE

.sp
.LP
The following
.B ioctl()
request allows the default effect of the keyboard
abort sequence to be changed.
.sp
.ne 2
.mk
.na
.B KIOCSKABORTEN
.ad
.RS 18n
.rt
Pointer to an
.BR int .
The keyboard abort sequence effect (typically L1-A or
Stop-A on the keyboard on SPARC systems, F1-A on x86 systems, and BREAK on the
serial console device) is enabled if the
.B int
has a value of
KIOCABORTENABLE(1). If the value is KIOCABORTDISABLE(0) , the keyboard abort
sequence effect is disabled. If the value is KIOCABORTALTERNATE(2), the
Alternate Break sequence is in effect and is defined by the serial console
drivers \fBzs\fR(7D)\fBse\fR(7D) and \fBasy\fR(7D). Any other value of the
parameter for this
.B ioctl()
is treated as
.BR enable .
The Alternate Break
sequence is applicable to the serial console devices only.
.sp
Due to a risk of incorrect sequence interpretation, SLIP and certain other
binary protocols should not be run over the serial console port when Alternate
Break sequence is in effect. Although PPP is a binary protocol, it is able to
avoid these sequences using the ACCM feature in
.IR "RFC 1662" .
For Solaris PPP
4.0, you do this by adding the following line to the
.B /etc/ppp/options
file
(or other configuration files used for the connection; see \fBpppd\fR(1M) for
details):
.sp
.in +2
.nf
asyncmap  0x00002000
.fi
.in -2

SLIP has no comparable capability, and must not be used if the Alternate Break
sequence is in use.
.sp
This
.B ioctl()
will be active and retain state even if there is no physical
keyboard in the system. The default effect (\fBenable\fR) causes the operating
system to suspend and enter the kernel debugger (if present) or the system prom
(on most systems with OpenBoot proms). The default effect is enabled on most
systems, but may be different on server systems with key switches in the
\&'secure' position. On these systems, the effect is always disabled when the
key switch is in the 'secure' position. This \fBioctl()\fRreturns \fBEPERM\fR if
the caller is not the superuser.
.RE

.sp
.LP
These
.B ioctl()
requests are supported for compatibility with the system
keyboard device
.BR /dev/kbd .
.sp
.ne 2
.mk
.na
.B KIOCSDIRECT
.ad
.RS 16n
.rt
Has no effect.
.RE

.sp
.ne 2
.mk
.na
.B KIOCGDIRECT
.ad
.RS 16n
.rt
Always returns 1.
.RE

.sp
.LP
The following
.B ioctl()
requests are used to set and get the keyboard
autorepeat delay and rate.
.sp
.ne 2
.mk
.na
.B KIOCSRPTDELAY
.ad
.RS 18n
.rt
This argument is a pointer to an int, which is the kb autorepeat delay, unit in
millisecond.
.RE

.sp
.ne 2
.mk
.na
.B KIOCGRPTDELAY
.ad
.RS 18n
.rt
This argument is a pointer to an int. The current auto repeat delay setting is
stored in the integer pointed by the argument, unit in millisecond.
.RE

.sp
.ne 2
.mk
.na
.B KIOCSRPTRATE
.ad
.RS 18n
.rt
This argument is a pointer to an int, which is the kb autorepeat rate, unit in
millisecond.
.RE

.sp
.ne 2
.mk
.na
.B KIOCGRPTRATE
.ad
.RS 18n
.rt
This argument is a pointer to an int. The current auto repeat rate setting is
stored in the integer pointed by the argument, unit in millisecond.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
lw(2.75i) |lw(2.75i)
lw(2.75i) |lw(2.75i)
.
\fBATTRIBUTE TYPE\fR\fBATTRIBUTE VALUE\fR
_
Interface StabilityStable
.TE

.SH SEE ALSO
.sp
.LP
.BR kbd (1),
.BR loadkeys (1),
.BR kadb (1M),
.BR pppd (1M),
.BR keytables (4),
.BR attributes (5),
.BR zs (7D),
.BR se (7D),
.BR asy (7D),
.BR virtualkm (7D),
.BR termio (7I),
.BR usbkbm (7M)
.SH NOTES
.sp
.LP
Many keyboards released after Sun Type 4 keyboard also report themselves  as
Sun Type 4 keyboards.
