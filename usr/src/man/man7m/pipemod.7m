'\" te
.\" Copyright (C) 1992 Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH pipemod 7M "21 Aug 1992" "SunOS 5.11" "STREAMS Modules"
.SH NAME
pipemod \- STREAMS pipe flushing module
.SH DESCRIPTION
.sp
.LP
The typical stream is composed of a stream head connected to modules and
terminated by a driver. Some stream configurations such as pipes and
.B FIFOs
do not have a driver and hence certain features commonly
supported by the driver need to be provided by other means. Flushing is one
such feature, and it is provided by the
.B pipemod
module.
.sp
.LP
Pipes and
.B FIFOs
in their simplest configurations only have stream
heads. A write side is connected to a read side. This remains true when
modules are pushed. The twist occurs at a point known as the mid-point. When
an
.B M_FLUSH
message is passed from a write queue to a read queue the
.B FLUSHR
and/or
.B FLUSHW
bits have to be switched. The mid-point of
a pipe is not always easily detectable, especially if there are numerous
modules pushed on either end of the pipe. In that case there needs to be a
mechanism to intercept all message passing through the stream. If the
message is an
.B M_FLUSH
message and it is at the mid-point, the flush
.RB "bits need to be switched. This bit switching is handled by the" " pipemod"
module.
.sp
.LP
.B pipemod
should be pushed onto a pipe or
.B FIFO
where flushing of
any kind will take place. The
.B pipemod
module can be pushed on either
end of the pipe. The only requirement is that it is pushed onto an end that
previously did not have modules on it. That is, pipemod must be the first
module pushed onto a pipe so that it is at the mid-point of the pipe
itself.
.sp
.LP
The
.B pipemod
module handles only
.B M_FLUSH
messages. All other
messages are passed on to the next module using the
.B putnext()
utility
routine. If an
.B M_FLUSH
message is passed to
.B pipemod
and the
.B FLUSHR
and
.B FLUSHW
bits are set, the message is not processed but
is passed to the next module using the
.B putnext()
routine. If only the
.B FLUSHR
bit is set, the
.B FLUSHR
bit is turned off and the
.B FLUSHW
bit is set. The message is then passed on to the next module
using
.BR putnext() .
Similarly, if the
.B FLUSHW
bit is the only bit
set in the
.B M_FLUSH
message, the
.B FLUSHW
bit is turned off and the
.B FLUSHR
bit is turned on. The message is then passed to the next module
on the stream.
.sp
.LP
The
.B pipemod
module can be pushed on any stream that desires the bit
switching. It must be pushed onto a pipe or
.B FIFO
if any form of
flushing must take place.
.SH SEE ALSO
.sp
.LP
.I STREAMS Programming Guide
