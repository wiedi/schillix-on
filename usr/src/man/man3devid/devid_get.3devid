'\" te
.\" Copyright (c) 1999, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH devid_get 3DEVID "30 Nov 2001" "SunOS 5.11" "Device ID Library Functions"
.SH NAME
devid_get, devid_compare, devid_deviceid_to_nmlist, devid_free,
devid_free_nmlist, devid_get_minor_name, devid_sizeof, devid_str_decode,
devid_str_free, devid_str_encode, devid_valid \- device ID interfaces for
user applications
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-ldevid\fR [ \fIlibrary\fR.\|.\|. ]
#include <devid.h>

\fBint\fR \fBdevid_get\fR(\fBint\fR \fIfd\fR, \fBddi_devid_t *\fIretdevid\fR);
.fi

.LP
.nf
\fBvoid\fR \fBdevid_free\fR(\fBddi_devid_t\fR \fIdevid\fR);
.fi

.LP
.nf
\fBint\fR \fBdevid_get_minor_name\fR(\fBint\fR \fIfd\fR, \fBchar **\fIretminor_name\fR);
.fi

.LP
.nf
\fBint\fR \fBdevid_deviceid_to_nmlist\fR(\fBchar *\fIsearch_path\fR, \fBddi_devid_t\fR \fIdevid\fR,
     \fBchar *\fIminor_name\fR, \fBdevid_nmlist_t **\fIretlist\fR);
.fi

.LP
.nf
\fBvoid\fR \fBdevid_free_nmlist\fR(\fBdevid_nmlist_t *\fIlist\fR);
.fi

.LP
.nf
\fBint\fR \fBdevid_compare\fR(\fBddi_devid_t\fR \fIdevid1\fR, \fBddi_devid_t\fR \fIdevid2\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBdevid_sizeof\fR(\fBddi_devid_t\fR \fIdevid\fR);
.fi

.LP
.nf
\fBint\fR \fBdevid_valid\fR(\fBddi_devid_t\fR \fIdevid\fR);
.fi

.LP
.nf
\fBchar *\fBdevid_str_encode\fR(\fBddi_devid_t\fR \fIdevid\fR, \fBchar *\fIminor_name\fR);
.fi

.LP
.nf
\fBint\fR \fBdevid_str_decode\fR(\fBchar *\fIdevidstr\fR, \fBddi_devid_t *\fIretdevid\fR,
     \fBchar **\fIretminor_name\fR);
.fi

.LP
.nf
\fBvoid\fR \fBdevid_str_free\fR(\fBchar *\fIstr\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions provide unique identifiers (device \fBID\fRs) for devices.
Applications and device drivers use these functions to identify and locate
devices, independent of the device's physical connection or its logical
device name or number.
.sp
.LP
The
.B devid_get()
function returns in
.I retdevid
the device
.B ID
for the device associated with the open file descriptor \fIfd\fR,
which refers to any device. It returns an error if the device does not have
an associated device
.BR ID .
The caller must free the memory allocated for
.I retdevid
using the
.B devid_free()
function.
.sp
.LP
The
.B devid_free()
function frees the space that was allocated for the
returned
.I devid
by
.B devid_get()
and
.BR devid_str_decode() .
.sp
.LP
The
.B devid_get_minor_name()
function returns the minor name, in
.IR retminor_name ,
for the device associated with the open file descriptor
.IR fd .
This name is specific to the particular minor number, but is
"instance number" specific. The caller of this function must free the memory
allocated for the returned
.I retminor_name
string using
.BR devid_str_free() .
.sp
.LP
The
.B devid_deviceid_to_nmlist()
function returns an array of
.I devid_nmlist
structures, where each entry matches the
.I devid
and
.I minor_name
passed in. If the
.I minor_name
specified is one of the
special values (\fBDEVID_MINOR_NAME_ALL\fR,
.BR DEVID_MINOR_NAME_ALL_CHR ,
or
.BR DEVID_MINOR_NAME_ALL_BLK )
, then all minor names associated with
.I devid
which also meet the special
.I minor_name
filtering
requirements are returned. The
.I devid_nmlist
structure contains the
device name and device number. The last entry of the array contains a null
pointer for the
.I devname
and
.B NODEV
for the device number. This
function traverses the file tree, starting at
.IR search_path .
For each
device with a matching device
.B ID
and minor name tuple, a device name
and device number are added to the
.IR retlist .
If no matches are found,
an error is returned. The caller of this function must free the memory
allocated for the returned array with the \fBdevid_free_nmlist()\fR
function. This function may take a long time to complete if called with the
device ID of an unattached device.
.sp
.LP
The
.B devid_free_nmlist()
function frees the memory allocated by the
.B devid_deviceid_to_nmlist()
function.
.sp
.LP
The
.B devid_compare()
function compares two device
.BR ID "s and"
determines both equality and sort order. The function returns an integer
greater than 0 if the device
.B ID
pointed to by
.I devid1
is greater
than the device
.B ID
pointed to by
.IR devid2 .
It returns 0 if the
device
.B ID
pointed to by
.I devid1
is equal to the device
.BR ID
pointed to by
.IR devid2 .
It returns an integer less than 0 if the device
.B ID
pointed to by
.I devid1
is less than the device
.BR ID
pointed to by
.IR devid2 .
This function is the only valid mechanism to
determine the equality of two devids. This function may indicate equality
for arguments which by simple inspection appear different.
.sp
.LP
The
.B devid_sizeof()
function returns the size of
.I devid
in
bytes.
.sp
.LP
The
.B devid_valid()
function validates the format of a
.IR devid .
It
returns 1 if the format is valid, and 0 if invalid. This check may not be as
complete as the corresponding kernel function
.B ddi_devid_valid()
(see
.BR ddi_devid_compare (9F)).
.sp
.LP
The
.B devid_str_encode()
function encodes a
.I devid
and
.I minor_name
into a null-terminated ASCII string, returning a pointer to
that string. To avoid shell conflicts, the
.I devid
portion of the string
is limited to uppercase and lowercase letters, digits, and the plus (+),
minus (-), period (.), equals (=), underscore (_), tilde (~), and comma (,)
characters. If there is an
.B ASCII
quote character in the binary form of
a
.IR devid ,
the string representation will be in
.B hex_id
form, not
\fBascii_id\fR form. The comma (,) character is added for "id1," at the head
of the string
.IR devid .
If both a
.I devid
and a
.I minor_name
are
non-null, a slash (/)is used to separate the
.I devid
from the
.I minor_name
in the encoded string.  If
.I minor_name
is null, only
the
.I devid
is encoded. If the
.I devid
is null then the special
string "id0" is returned. Note that you cannot compare the returned string
against another string with
.BR strcmp "(3C) to determine devid equality."
The string returned must be freed by calling
.BR devid_str_free() .
.sp
.LP
The
.B devid_str_decode()
function takes a string previously produced by
the
.B devid_str_encode()
or
.B ddi_devid_str_encode()
(see
.BR ddi_devid_compare (9F))
function and decodes the contained device ID
and minor name, allocating and returning pointers to the extracted parts via
the
.I retdevid
and
.I retminor_name
arguments. If the special
\fIdevidstr\fR "id0" was specified, the returned device ID and minor name
will both be null. A non-null returned devid must be freed by the caller by
the
.B devid_free()
function. A non-null returned minor name must be
freed by calling
.BR devid_str_free() .
.sp
.LP
The
.B devid_str_free()
function frees the character string returned by
.B devid_str_encode()
and the
.I retminor_name
argument returned by
.BR devid_str_decode() .
.SH RETURN VALUES
.sp
.LP
Upon successful completion, the
.BR devid_get() ,
.BR devid_get_minor_name() ,
.BR devid_str_decode() ,
and
.B devid_deviceid_to_nmlist()
functions return
.BR 0 .
Otherwise, they
return \fB\(mi1\fR\&.
.sp
.LP
The
.B devid_compare()
function returns the following values:
.sp
.ne 2
.mk
.na
\fB\(mi1\fR
.ad
.RS 9n
.rt
The device ID pointed to by
.I devid1
is less than the device ID pointed
to by
.IR devid2 .
.RE

.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 9n
.rt
The device ID pointed to by
.I devid1
is equal to  the device ID pointed
to by
.IR devid2 .
.RE

.sp
.ne 2
.mk
.na
.B 1
.ad
.RS 9n
.rt
The device ID pointed to by
.I devid1
is greater than the device ID
pointed to by
.IR devid2 .
.RE

.sp
.LP
The
.B devid_sizeof()
function returns the size of
.I devid
in bytes.
If
.I devid
is null, the number of bytes that must be allocated and
initialized to determine the size of a complete device ID is returned.
.sp
.LP
The
.B devid_valid()
function returns 1 if the
.I devid
is valid and
0 if the
.I devid
is invalid.
.sp
.LP
The
.B devid_str_encode()
function returns
.I NULL
to indicate
failure. Failure may be caused by attempting to encode an invalid string.
If the return value is non-null, the caller must free the returned string by
using the
.B devid_str_free()
function.
.SH EXAMPLES
.LP
.B Example 1
Using
.BR devid_get() ,
.BR devid_get_minor_name() ,
and
.B devid_str_encode()
.sp
.LP
The following example shows the proper use of
.BR devid_get() ,
.BR devid_get_minor_name() ,
and
.B devid_str_encode()
to free the space
allocated for
.IR devid ,
.I minor_name
and encoded
.IR devid .

.sp
.in +2
.nf
int fd;
ddi_devid_t    devid;
char        *minor_name, *devidstr;
if ((fd = open("/dev/dsk/c0t3d0s0", O_RDONLY|O_NDELAY)) < 0) {
    .\|.\|.
}
if (devid_get(fd, &devid) != 0) {
    .\|.\|.
}
if (devid_get_minor_name(fd, &minor_name) != 0) {
    .\|.\|.
}
if ((devidstr = devid_str_encode(devid, minor_name)) == 0) {
    .\|.\|.
}
printf("devid %s\en", devidstr);
devid_str_free(devidstr);
devid_free(devid);
devid_str_free(minor_name);
.fi
.in -2

.LP
.B Example 2
Using
.B devid_deviceid_to_nmlist()
and
.B devid_free_nmlist()
.sp
.LP
The following example shows the proper use of
.B devid_deviceid_to_nmlist()
and \fBdevid_free_nmlist()\fR:

.sp
.in +2
.nf
devid_nmlist_t  *list = NULL;
int    err;
if (devid_deviceid_to_nmlist("/dev/rdsk", devid,
    minor_name, &list))
        return (-1);
/* loop through list and process device names and numbers */
devid_free_nmlist(list);
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT\(miSafe
_
Interface StabilityStable
.TE

.SH SEE ALSO
.sp
.LP
.BR free (3C),
.BR libdevid (3LIB),
.BR attributes (5),
.BR ddi_devid_compare (9F)
