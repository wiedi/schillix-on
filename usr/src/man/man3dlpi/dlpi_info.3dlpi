'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH dlpi_info 3DLPI "22 Aug 2007" "SunOS 5.11" "Data Link Provider Interface Library Functions"
.SH NAME
dlpi_info \- get DLPI information
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-ldlpi\fR [ \fIlibrary\fR .\|.\|. ]
#include <libdlpi.h>

\fBint\fR \fIdlpi_info\fR(\fBdlpi_handle_t\fR \fIdh\fR, \fBdlpi_info_t *\fIinfop\fR,
     \fBuint_t\fR \fIopt\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBdlpi_info()\fR function provides \fBDLPI\fR information about the open
\fBDLPI\fR link instance associated with \fBDLPI\fR handle
.IR dh .
.B DLPI
information can be retrieved in any state of
.IR dh ,
but some of the
information might not be available if
.I dh
is in the
.BR DL_UNBOUND
\fBDLPI\fR state. The \fBDLPI\fR information received is copied into \fIinfop\fR,
which must point to a \fBdlpi_info_t\fR allocated by the caller. The \fIopt\fR
argument is reserved for future use and must be set to 0.
.sp
.LP
The \fBdlpi_info_t\fR is a structure defined in \fB<libdlpi.h>\fR as follows:
.sp
.in +2
.nf
typedef struct {
     uint_t                  di_opts;
     uint_t                  di_max_sdu;
     uint_t                  di_min_sdu;
     uint_t                  di_state;
     uchar_t                 di_mactype;
     char                    di_linkname[DLPI_LINKNAME_MAX];
     uchar_t                 di_physaddr[DLPI_PHYSADDR_MAX];
     uchar_t                 di_physaddrlen;
     uchar_t                 di_bcastaddr[DLPI_PHYSADDR_MAX];
     uchar_t                 di_bcastaddrlen;
     uint_t                  di_sap;
     int                     di_timeout;
     dl_qos_cl_sel1_t        di_qos_sel;
     dl_qos_cl_range1_t      di_qos_range;
} dlpi_info_t;
.fi
.in -2

.sp
.ne 2
.mk
.na
.I di_opts
.ad
.RS 19n
.rt
Reserved for future \fBdlpi_info_t\fR expansion.
.RE

.sp
.ne 2
.mk
.na
.I di_max_sdu
.ad
.RS 19n
.rt
Maximum message size, in bytes, that the
.B DLPI
link is able to accept for
transmission. The value is guaranteed to be greater than or equal to
.IR di_min_sdu .
.RE

.sp
.ne 2
.mk
.na
.I di_min_sdu
.ad
.RS 19n
.rt
Minimum message size, in bytes, that the
.B DLPI
link is able to accept for
transmission. The value is guaranteed to be greater than or equal to one.
.RE

.sp
.ne 2
.mk
.na
.I di_state
.ad
.RS 19n
.rt
Current
.B DLPI
state of
.IR dh ;
either
.B DL_UNBOUND
or
.BR DL_IDLE .
.RE

.sp
.ne 2
.mk
.na
.I di_mactype
.ad
.RS 19n
.rt
\fBMAC\fR type supported by the \fBDLPI\fR link associated with
.IR dh .
See
\fB<sys/dlpi.h>\fR for the list of possible \fBMAC\fR types.
.RE

.sp
.ne 2
.mk
.na
.I di_linkname
.ad
.RS 19n
.rt
Link name associated with
.B DLPI
handle
.IR dh .
.RE

.sp
.ne 2
.mk
.na
.I di_physaddr
.ad
.RS 19n
.rt
Link-layer physical address of bound
.IR dh .
If
.I dh
is in the
\fBDL_UNBOUND DLPI\fR state, the contents of \fIdi_physaddr\fR are
unspecified.
.RE

.sp
.ne 2
.mk
.na
.I di_physaddrlen
.ad
.RS 19n
.rt
Physical address length, in bytes. If
.I dh
is in the
.BR DL_UNBOUND
\fBDLPI\fR state, \fIdi_physaddrlen\fR is set to zero.
.RE

.sp
.ne 2
.mk
.na
.I di_bcastaddr
.ad
.RS 19n
.rt
Link-layer broadcast address. If the
.I di_mactype
of the
.B DLPI
link
does not support broadcast, the contents of
.I di_bcastaddr
are unspecified.
.RE

.sp
.ne 2
.mk
.na
.I di_bcastaddrlen
.ad
.RS 19n
.rt
Link-layer broadcast address length, in bytes. If the
.I di_mactype
of the
\fBDLPI\fR link does not support broadcast, \fIdi_bcastaddrlen\fR is set to
zero.
.RE

.sp
.ne 2
.mk
.na
.I di_sap
.ad
.RS 19n
.rt
\fBSAP\fR currently bound to handle. If \fIdh\fR is in the \fBDL_UNBOUND\fR
\fBDLPI\fR state, \fIdi_sap\fR is set to zero.
.RE

.sp
.ne 2
.mk
.na
.I di_timeout
.ad
.RS 19n
.rt
Current timeout value, in seconds, set on the
.B dlpi
handle.
.RE

.sp
.ne 2
.mk
.na
.I di_qos_sel
.ad
.RS 19n
.rt
Current
.B QOS
parameters supported by the
.B DLPI
link instance
associated with
.IR dh .
Unsupported
.B QOS
parameters are set to
.BR DL_UNKNOWN .
.RE

.sp
.ne 2
.mk
.na
.I di_qos_range
.ad
.RS 19n
.rt
Available range of
.B QOS
parameters supported by a
.B DLPI
link instance
associated with the
.B DLPI
handle
.IR dh .
Unsupported
.B QOS
range
values are set to
.BR DL_UNKNOWN .
.RE

.SH RETURN VALUES
.sp
.LP
Upon success,
.B DLPI_SUCCESS
is returned. If
.B DL_SYSERR
is returned,
\fBerrno\fR contains the specific UNIX system error value. Otherwise, a
\fBDLPI\fR error value defined in \fB<sys/dlpi.h>\fR or an error value listed in
the following section is returned.
.SH ERRORS
.sp
.ne 2
.mk
.na
.B DLPI_EBADMSG
.ad
.RS 20n
.rt
Bad DLPI message
.RE

.sp
.ne 2
.mk
.na
.B DLPI_EINHANDLE
.ad
.RS 20n
.rt
Invalid
.B DLPI
handle
.RE

.sp
.ne 2
.mk
.na
.B DLPI_EINVAL
.ad
.RS 20n
.rt
Invalid argument
.RE

.sp
.ne 2
.mk
.na
.B DLPI_EMODENOTSUP
.ad
.RS 20n
.rt
Unsupported
.B DLPI
connection mode
.RE

.sp
.ne 2
.mk
.na
.B DLPI_ETIMEDOUT
.ad
.RS 20n
.rt
\fBDLPI\fR operation timed out
.RE

.sp
.ne 2
.mk
.na
.B DLPI_EVERNOTSUP
.ad
.RS 20n
.rt
Unsupported
.B DLPI
Version
.RE

.sp
.ne 2
.mk
.na
.B DLPI_FAILURE
.ad
.RS 20n
.rt
\fBDLPI\fR operation failed
.RE

.SH EXAMPLES
.LP
\fBExample 1\fR Get link-layer broadcast address
.sp
.LP
The following example shows how \fBdlpi_info()\fR can be used.

.sp
.in +2
.nf
#include <libdlpi.h>

uchar_t *
get_bcastaddr(const char *linkname, uchar_t *baddrlenp)
{
        dlpi_handle_t   dh;
        dlpi_info_t     dlinfo;
        uchar_t         *baddr;

        if (dlpi_open(linkname, &dh, 0) != DLPI_SUCCESS)
                return (NULL);

        if (dlpi_info(dh, &dlinfo, 0) != DLPI_SUCCESS) {
                dlpi_close(dh);
                return (NULL);
        }
        dlpi_close(dh);

        *baddrlenp = dlinfo.di_bcastaddrlen;
        if ((baddr = malloc(*baddrlenp)) == NULL)
                return (NULL);

        return (memcpy(baddr, dlinfo.di_bcastaddr, *baddrlenp));
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR dlpi_bind (3DLPI),
.BR libdlpi (3LIB),
.BR attributes (5)
