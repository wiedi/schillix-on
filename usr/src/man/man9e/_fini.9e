'\" te
.\" Copyright (c) 2002, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH _fini 9E "22 Jan 2002" "SunOS 5.11" "Driver Entry Points"
.SH NAME
_fini, _info, _init \- loadable module configuration entry points
.SH SYNOPSIS
.LP
.nf
#include <sys/modctl.h>



\fBint\fR \fB_fini\fR(void)
.fi

.LP
.nf
\fBint\fR \fB_info\fR(\fBstruct modinfo *\fImodinfop\fR);
.fi

.LP
.nf
\fBint\fR \fB_init\fR(void)
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI). These entry points are required. You
must write them.
.SH PARAMETERS
.SS "_info(\|)"
.sp
.ne 2
.mk
.na
.I modinfop
.ad
.RS 13n
.rt
A pointer to an opaque
.B modinfo
structure.
.RE

.SH DESCRIPTION
.sp
.LP
.B _init()
initializes a loadable module. It is called before any other
routine in a loadable module.
.B _init()
returns the value returned by
.BR mod_install (9F).
The module may optionally perform some other work
before the
.BR mod_install (9F)
call is performed. If the module has done
some setup before the
.BR mod_install (9F)
function is called, then it
should be prepared to undo that setup if
.BR mod_install "(9F) returns an"
error.
.sp
.LP
.B _info()
returns information about a loadable module.
.B _info()
returns the value returned by
.BR mod_info (9F).
.sp
.LP
.B _fini()
prepares a loadable module for unloading. It is called when
the system wants to unload a module. If the module determines that it can be
unloaded, then
.B _fini()
returns the value returned by
.BR mod_remove (9F).
Upon successful return from
.B _fini()
no other
routine in the module will be called before
.B _init()
is called.
.SH RETURN VALUES
.sp
.LP
.B _init()
should return the appropriate error number if there is an
error, otherwise it should return the return value from
.BR mod_install (9F).
.sp
.LP
.B _info()
should return the return value from
.BR mod_info (9F)
.sp
.LP
.B _fini()
should return the return value from
.BR mod_remove (9F).
.B _fini()
is permitted to return
.B EBUSY
prior to calling
.BR mod_remove (9F)
if the driver should not be unloaded. Driver global
resources, such as mutexes and calls to
.BR ddi_soft_state_fini (9F),
should only be destroyed in
.B _fini()
after
.B mod_remove()
returns
successfully.
.SH EXAMPLES
.LP
.B Example 1
Initializing and Freeing a Mutex
.sp
.LP
The following example demonstrates how to initialize and free a
.BR mutex (9F).

.sp
.in +2
.nf
#include <sys/modctl.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>
static struct dev_ops  drv_ops;
/*
 * Module linkage information for the kernel.
 */
static struct modldrv modldrv = {
     &mod_driverops,     /* Type of module.  This one is a driver */
    "Sample Driver",
    &drv_ops       /* driver ops */
};

static struct modlinkage modlinkage = {
        MODREV_1,
        &modldrv,
        NULL
};


/*
 * Global driver mutex
 */
static kmutex_t   xx_global_mutex;


int
_init(void)
{
        int     i;

        /*
          * Initialize global mutex before mod_install'ing driver.
          * If mod_install() fails, must clean up mutex initialization
          */
        mutex_init(&xx_global_mutex, NULL,
                MUTEX_DRIVER, (void *)NULL);

        if ((i = mod_install(&modlinkage)) != 0) {
                mutex_destroy(&xx_global_mutex);
        }

        return (i);
}

int
_info(struct modinfo *modinfop)
{
        return (mod_info(&modlinkage, modinfop));
}


int
_fini(void)
{
        int       i;

        /*
          * If mod_remove() is successful, we destroy our global mutex
          */
        if ((i = mod_remove(&modlinkage)) == 0) {
                 mutex_destroy(&xx_global_mutex);
        }
        return (i);
}
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR add_drv (1M),
.BR mod_info (9F),
.BR mod_install (9F),
.BR mod_remove (9F),
.BR mutex (9F),
.BR modldrv (9S),
.BR modlinkage (9S),
.BR modlstrmod (9S)
.sp
.LP
.I Writing Device Drivers
.SH WARNINGS
.sp
.LP
Do not change the structures referred to by the
.B modlinkage
structure
after the call to
.BR mod_install() ,
as the system may copy or change
them.
.SH NOTES
.sp
.LP
Even though the identifiers
.BR _fini() ,
.BR _info() ,
and
.BR _init()
appear to be declared as globals, their scope is restricted by the kernel to
the module that they are defined in.
.SH BUGS
.sp
.LP
On some implementations
.B _info()
may be called before
.BR _init() .

