'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH devmap_contextmgt 9E "16 Jan 1997" "SunOS 5.11" "Driver Entry Points"
.SH NAME
devmap_contextmgt \- driver callback function for context management
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint\fR \fBdevmap_contextmgt\fR(\fBdevmap_cookie_t\fR \fIdhp\fR, \fBvoid *\fIpvtp\fR,
     \fBoffset_t\fR \fIoff\fR, \fBsize_t\fR \fIlen\fR, \fBuint_t\fR \fItype\fR, \fBuint_t\fR \fIrw\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH ARGUMENTS
.sp
.ne 2
.mk
.na
.I dhp
.ad
.RS 9n
.rt
An opaque mapping handle that the system uses to describe the mapping.
.RE

.sp
.ne 2
.mk
.na
.I pvtp
.ad
.RS 9n
.rt
Driver private mapping data.
.RE

.sp
.ne 2
.mk
.na
.I off
.ad
.RS 9n
.rt
User offset within the logical device memory at which the access begins.
.RE

.sp
.ne 2
.mk
.na
.I len
.ad
.RS 9n
.rt
Length (in bytes) of the memory being accessed.
.RE

.sp
.ne 2
.mk
.na
.I type
.ad
.RS 9n
.rt
Type of access operation. Possible values are:
.sp
.ne 2
.mk
.na
.B DEVMAP_ACCESS
.ad
.RS 18n
.rt
Memory access.
.RE

.sp
.ne 2
.mk
.na
.B DEVMAP_LOCK
.ad
.RS 18n
.rt
Lock the memory being accessed.
.RE

.sp
.ne 2
.mk
.na
.B DEVMAP_UNLOCK
.ad
.RS 18n
.rt
Unlock the memory being accessed.
.RE

.RE

.sp
.ne 2
.mk
.na
.I rw
.ad
.RS 9n
.rt
Direction of access. Possible values are:
.sp
.ne 2
.mk
.na
.B DEVMAP_READ
.ad
.RS 17n
.rt
Read access attempted.
.RE

.sp
.ne 2
.mk
.na
.B DEVMAP_WRITE
.ad
.RS 17n
.rt
Write access attempted.
.RE

.RE

.SH DESCRIPTION
.sp
.LP
.B devmap_contextmgt()
is a driver-supplied function that performs
device context switching on a  mapping.  Device drivers pass
.B devmap_contextmgt()
as an argument to
.BR devmap_do_ctxmgt "(9F) in"
the
.BR devmap_access "(9E) entry point. The system will call"
.B devmap_contextmgt()
when memory is accessed. The system expects
.B devmap_contextmgt()
to load the memory address translations of the
mapping by calling
.BR devmap_load (9F)
before returning.
.sp
.LP
.I dhp
uniquely identifies the mapping and is used as an argument to
.BR devmap_load (9F)
.RI "to validate the mapping. " off " and " len 
define the range to be affected by the operations in
.BR devmap_contextmgt() .
.sp
.LP
The driver must check if there is already a mapping established at
.I off
that needs to be unloaded. If a mapping exists at
.IR off ,
.B devmap_contextmgt()
must call
.BR devmap_unload "(9F) on the current"
mapping.
.BR devmap_unload (9F)
must be followed by
.B devmap_load()
on
the mapping that generated this call to
.BR devmap_contextmgt() .
.BR devmap_unload (9F)
unloads the current mapping so that a call to
.BR devmap_access (9E),
which causes the system to call
.BR devmap_contextmgt() ,
will be generated the next time the mapping is
accessed.
.sp
.LP
.I pvtp
is a pointer to the driver's private mapping data that was
allocated and initialized in the
.BR devmap_map "(9E) entry point."
.I type
defines the type of operation that device drivers should perform
on the memory object.  If
.I type
is either
.B DEVMAP_LOCK
or
.BR DEVMAP_UNLOCK ,
the length passed to either
.BR devmap_unload "(9F) or"
.BR devmap_load (9F)
must be same as
.IR len .
.I rw
specifies the
access direction on the memory object.
.sp
.LP
A non-zero return value from
.B devmap_contextmgt()
will be returned to
.BR devmap_access (9E)
and will cause the corresponding operation to fail.
The failure may result in a
.B SIGSEGV
or
.B SIGBUS
signal being
delivered to the process.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 12n
.rt
Successful completion.
.RE

.sp
.ne 2
.mk
.na
.B Non-zero
.ad
.RS 12n
.rt
An error occurred.
.RE

.SH EXAMPLES
.LP
.B Example 1
managing a device context
.sp
.LP
The following shows an example of managing a device context.

.sp
.in +2
.nf
struct xxcontext cur_ctx;
static int
xxdevmap_contextmgt(devmap_cookie_t dhp, void *pvtp, offset_t off,
	size_t len, uint_t type, uint_t rw)
{
    devmap_cookie_t cur_dhp;
    struct xxpvtdata *p;
    struct xxpvtdata *pvp = (struct xxpvtdata *)pvtp;
    struct xx_softc  *softc = pvp->softc;
    int    err;

    mutex_enter(&softc->mutex);

    /*
     * invalidate the translations of current context before
     * switching context.
     */
    if (cur_ctx != NULL && cur_ctx != pvp->ctx) {
        p = cur_ctx->pvt;
        cur_dhp = p->dhp;
        if ((err = devmap_unload(cur_dhp, off, len)) != 0)
            return (err);
    }
    /* Switch device context - device dependent*/
    ...
    /* Make handle the new current mapping */
    cur_ctx = pvp->ctx;

    /*
     * Load the address translations of the calling context.
     */
    err = devmap_load(pvp->dhp, off, len, type, rw);

    mutex_exit(&softc->mutex);

    return (err);
}
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR devmap_access (9E),
.BR devmap_do_ctxmgt (9F)
.BR devmap_load (9F),
.BR devmap_unload (9F)
.sp
.LP
.I Writing Device Drivers
