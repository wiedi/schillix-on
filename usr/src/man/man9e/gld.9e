'\" te
.\" Copyright (c) 2001, Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH gld 9E "3 Jan 2001" "SunOS 5.11" "Driver Entry Points"
.SH NAME
gld, gldm_reset, gldm_start, gldm_stop, gldm_set_mac_addr, gldm_set_multicast,
gldm_set_promiscuous, gldm_send, gldm_intr, gldm_get_stats, gldm_ioctl \-
Generic LAN Driver entry points
.SH SYNOPSIS
.LP
.nf
#include <sys/gld.h>

\fBint\fR \fBprefix_reset\fR(\fBgld_mac_info_t *\fImacinfo\fR);
.fi

.LP
.nf
\fBint\fR \fBprefix_start\fR(\fBgld_mac_info_t *\fImacinfo\fR);
.fi

.LP
.nf
\fBint\fR \fBprefix_stop\fR(\fBgld_mac_info_t *\fR
     \fImacinfo\fR);
.fi

.LP
.nf
\fBint\fR \fBprefix_set_mac_addr\fR(\fBgld_mac_info_t *\fR
     \fImacinfo\fR, \fBunsigned char *\fImacaddr\fR);
.fi

.LP
.nf
\fBint\fR \fBprefix_set_multicast\fR(\fBgld_mac_info_t *\fR
     \fImacinfo\fR, \fBunsigned char *\fImulticastaddr\fR,
     \fBint\fR \fImultiflag\fR);
.fi

.LP
.nf
\fBint\fR \fBprefix_set_promiscuous\fR(\fBgld_mac_info_t *\fImacinfo\fR,
      \fBint\fR \fIpromiscflag\fR);
.fi

.LP
.nf
\fBint\fR \fBprefix_send\fR(\fBgld_mac_info_t *\fImacinfo\fR,
     \fBmblk_t *\fImp\fR);
.fi

.LP
.nf
\fBuint_t\fR \fBprefix_intr\fR(\fBgld_mac_info_t *\fImacinfo\fR);
.fi

.LP
.nf
\fBint\fR \fBprefix_get_stats\fR(\fBgld_mac_info_t *\fImacinfo\fR,
     \fBstruct gld_stats *\fIstats\fR);
.fi

.LP
.nf
\fBint\fR \fBprefix_ioctl\fR(\fBgld_mac_info_t *\fImacinfo\fR,
     \fBqueue_t *\fIq\fR, \fBmblk_t *\fImp\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris architecture specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
\fImacinfo\fR
.ad
.RS 18n
.rt
Pointer to a \fBgld_mac_info\fR(9S) structure.
.RE

.sp
.ne 2
.mk
.na
.I macaddr
.ad
.RS 18n
.rt
Pointer to the beginning of a character array containing a valid MAC address.
The array will be of the length specified by the driver in the
\fBgldm_addrlen\fR element of the \fBgld_mac_info\fR(9S) structure.
.RE

.sp
.ne 2
.mk
.na
.I multicastaddr
.ad
.RS 18n
.rt
Pointer to the beginning of a character array containing a multicast, group, or
functional address. The array will be of the length specified by the driver in
the
.B gldm_addrlen
element of the \fBgld_mac_info\fR(9S) structure.
.RE

.sp
.ne 2
.mk
.na
\fImultiflag\fR
.ad
.RS 18n
.rt
A flag indicating whether reception of the multicast address is to be enabled
or disabled. This argument is specified as
.B GLD_MULTI_ENABLE
or
.BR GLD_MULTI_DISABLE .
.RE

.sp
.ne 2
.mk
.na
\fIpromiscflag\fR
.ad
.RS 18n
.rt
A flag indicating what type of promiscuous mode, if any, is to be enabled. This
argument is specified as
.BR GLD_MAC_PROMISC_PHYS ,
.BR GLD_MAC_PROMISC_MULTI ,
or
.BR GLD_MAC_PROMISC_NONE .
.RE

.sp
.ne 2
.mk
.na
.I mp
.ad
.RS 18n
.rt
Pointer to a STREAMS message block containing the packet to be transmitted or
the ioctl to be executed.
.RE

.sp
.ne 2
.mk
.na
.I stats
.ad
.RS 18n
.rt
Pointer to a \fBgld_stats\fR(9S) structure to be filled in with the current
values of statistics counters.
.RE

.sp
.ne 2
.mk
.na
.I q
.ad
.RS 18n
.rt
Pointer to the
.BR queue "(9S) structure to be used in the reply to the"
ioctl.
.RE

.SH DESCRIPTION
.sp
.LP
These entry points must be implemented by a device-specific network driver
designed to interface with the Generic LAN Driver (GLD).
.sp
.LP
As described in \fBgld\fR(7D), the main data structure for communication
between the device-specific driver and the GLD module is the
\fBgld_mac_info\fR(9S) structure. Some of the elements in that structure are
function pointers to the entry points described here. The device-specific driver
must, in its \fBattach\fR(9E) routine, initialize these function pointers before
calling \fBgld_register\fR(\|).
.sp
.LP
\fBgldm_reset\fR(\|) resets the hardware to its initial state.
.sp
.LP
\fBgldm_start\fR(\|) enables the device to generate interrupts and prepares the
driver to call
.BR gld_recv (\|)
for delivering received data packets to GLD.
.sp
.LP
\fBgldm_stop\fR(\|) disables the device from generating any interrupts and
stops the driver from calling
.BR gld_recv (\|)
for delivering data packets to
GLD. GLD depends on the
.BR gldm_stop (\|)
routine to ensure that the device
will no longer interrupt, and it must do so without fail.
.sp
.LP
\fBgldm_set_mac_addr\fR(\|) sets the physical address that the hardware is to
use for receiving data. This function should program the device to the passed
MAC address
.IR macaddr .
.sp
.LP
\fBgldm_set_multicast\fR(\|) enables and disables device-level reception of
specific multicast addresses. If the third argument \fImultiflag\fR is set to
.BR GLD_MULTI_ENABLE ,
then the function sets the interface to receive packets
with the multicast address pointed to by the second argument; if \fImultiflag\fR
is set to
.BR GLD_MULTI_DISABLE ,
the driver is allowed to disable reception of
the specified multicast address.
.sp
.LP
This function is called whenever GLD wants to enable or disable reception of a
multicast, group, or functional address. GLD makes no assumptions about how the
device does multicast support and calls this function to enable or disable a
specific multicast address. Some devices may use a hash algorithm and a bitmask
to enable collections of multicast addresses; this is allowed, and GLD will
filter out any superfluous packets that are not required. If disabling an
address could result in disabling more than one address at the device level, it
is the responsibility of the device driver to keep whatever information it needs
to avoid disabling an address that GLD has enabled but not disabled.
.sp
.LP
\fBgldm_set_multicast\fR(\|) will not be called to enable a particular
multicast address that is already enabled, nor to disable an address that is not
currently enabled. GLD keeps track of multiple requests for the same multicast
address and only calls the driver's entry point when the first request to
enable, or the last request to disable a particular multicast address is made.
.sp
.LP
\fBgldm_set_promiscuous\fR(\|) enables and disables promiscuous mode. This
function is called whenever GLD wants to enable or disable the reception of all
packets on the medium, or all multicast packets on the medium. If the second
argument \fIpromiscflag\fR is set to the value of
.BR GLD_MAC_PROMISC_PHYS ,
then the function enables physical-level promiscuous mode, resulting in the
reception of all packets on the medium. If \fIpromiscflag\fR is set to
.BR GLD_MAC_PROMISC_MULTI ,
then reception of all multicast packets will be
enabled. If \fIpromiscflag\fR is set to
.BR GLD_MAC_PROMISC_NONE ,
then
promiscuous mode is disabled.
.sp
.LP
In the case of a request for promiscuous multicast mode, drivers for devices
that have no multicast-only promiscuous mode must set the device to physical
promiscuous mode to ensure that all multicast packets are received. In this case
the routine should return
.BR GLD_SUCCESS .
The GLD software will filter out
any superfluous packets that are not required.
.sp
.LP
For forward compatibility,
.BR gldm_set_promiscuous (\|)
routines should treat
any unrecognized values for \fIpromiscflag\fR as though they were
.BR GLD_MAC_PROMISC_PHYS .
.sp
.LP
\fBgldm_send()\fR queues a packet to the device for transmission. This routine
is passed a STREAMS message containing the packet to be sent. The message may
comprise multiple message blocks, and the send routine must chain through all
the message blocks in the message to access the entire packet to be sent. The
driver should be prepared to handle and skip over any zero-length message
continuation blocks in the chain. The driver should check to ensure that the
packet does not exceed the maximum allowable packet size, and must pad the
packet, if necessary, to the minimum allowable packet size. If the send routine
successfully transmits or queues the packet, it should return
.BR GLD_SUCCESS .

.sp
.LP
The send routine should return
.B GLD_NORESOURCES
if it cannot immediately
accept the packet for transmission; in this case GLD will retry it later. If
\fBgldm_send\fR(\|) ever returns
.BR GLD_NORESOURCES ,
the driver must, at a
later time when resources have become available, call
.BR gld_sched (\|)
to
inform GLD that it should retry packets that the driver previously failed to
queue for transmission. (If the driver's \fBgldm_stop\fR(\|) routine is called,
the driver is absolved from this obligation until it later again returns
\fBGLD_NORESOURCES\fR from its
.BR gldm_send (\|)
routine; however, extra calls
to
.BR gld_sched (\|)
will not cause incorrect operation.)
.sp
.LP
If the driver's send routine returns
.BR GLD_SUCCESS ,
then the driver is
responsible for freeing the message when the driver and the hardware no longer
need it. If the send routine copied the message into the device, or into a
private buffer, then the send routine may free the message after the copy is
made. If the hardware uses DMA to read the data directly out of the message data
blocks, then the driver must not free the message until the hardware has
completed reading the data. In this case the driver will probably free the
message in the interrupt routine, or in a buffer-reclaim operation at the
beginning of a future send operation. If the send routine returns anything other
than
.BR GLD_SUCCESS ,
then the driver must not free the message.
.sp
.LP
\fBgldm_intr()\fR is called when the device might have interrupted. Since it is
possible to share interrupts with other devices, the driver must check the
device status to determine whether it actually caused an interrupt. If the
device that the driver controls did not cause the interrupt, then this routine
must return
.BR DDI_INTR_UNCLAIMED .
Otherwise it must service the interrupt
and should return
.BR DDI_INTR_CLAIMED .
If the interrupt was caused by
successful receipt of a packet, this routine should put the received packet into
a STREAMS message of type
.B M_DATA
and pass that message to
.BR gld_recv (\|).
.sp
.LP
\fBgld_recv()\fR will pass the inbound packet upstream to the appropriate next
layer of the network protocol stack. It is important to correctly set the
\fBb_rptr\fR and \fBb_wptr\fR members of the STREAMS message before calling
.BR gld_recv (\|).
.sp
.LP
The driver should avoid holding mutex or other locks during the call to
\fBgld_recv\fR(\|). In particular, locks that could be taken by a transmit
thread may not be held during a call to
.BR gld_recv (\|):
the interrupt thread
that calls
.BR gld_recv (\|)
may in some cases carry out processing that
includes sending an outgoing packet, resulting in a call to the driver's
\fBgldm_send\fR(\|) routine. If the \fBgldm_send\fR(\|) routine were to try to
acquire a mutex being held by the
.BR gldm_intr (\|)
routine at the time it
calls
.BR gld_recv (\|),
this could result in a panic due to recursive mutex
entry.
.sp
.LP
The interrupt code should increment statistics counters for any errors. This
includes failure to allocate a buffer needed for the received data and any
hardware-specific errors such as CRC errors or framing errors.
.sp
.LP
\fBgldm_get_stats\fR(\|) gathers statistics from the hardware and/or driver
private counters, and updates the
.BR gld_stats (9S)
structure pointed to by
.IR stats .
This routine is called by GLD when it gets a request for
statistics, and provides the mechanism by which GLD acquires device dependent
statistics from the driver before composing its reply to the statistics request.
See \fBgld_stats\fR(9S) and \fBgld\fR(7D) for a description of the defined
statistics counters.
.sp
.LP
\fBgldm_ioctl\fR(\|) implements any device-specific ioctl commands. This
element may be specified as
.I NULL
if the driver does not implement any
ioctl functions. The driver is responsible for converting the message block into
an ioctl reply message and calling the \fBqreply\fR(9F) function before
returning
.BR GLD_SUCCESS .
This function should always return
.BR GLD_SUCCESS ;
any errors the driver may wish to report should be returned
via the message passed to \fBqreply\fR(9F). If the
.B gldm_ioctl
element is
specified as
.IR NULL ,
GLD will return a message of type
.B M_IOCNAK
with
an error of
.BR EINVAL .
.SH RETURN VALUES
.sp
.LP
\fBgldm_intr\fR(\|) must return:
.sp
.ne 2
.mk
.na
.B DDI_INTR_CLAIMED
.ad
.RS 23n
.rt
if and only if the device definitely interrupted.
.RE

.sp
.ne 2
.mk
.na
.B DDI_INTR_UNCLAIMED
.ad
.RS 23n
.rt
if the device did not interrupt.
.RE

.sp
.LP
The other functions must return:
.sp
.ne 2
.mk
.na
.B GLD_SUCCESS
.ad
.RS 21n
.rt
on success.
.BR gldm_stop (\|)
and
.BR gldm_ioctl (\|)
should always return
this value.
.RE

.sp
.ne 2
.mk
.na
.B GLD_NORESOURCES
.ad
.RS 21n
.rt
if there are insufficient resources to carry out the request at this time. Only
\fBgldm_set_mac_addr\fR(\|), \fBgldm_set_multicast\fR(\|),
\fBgldm_set_promiscuous\fR(\|), and \fBgldm_send\fR(\|) may return this value.
.RE

.sp
.ne 2
.mk
.na
.B GLD_NOLINK
.ad
.RS 21n
.rt
if
.BR gldm_send (\|)
is called when there is no physical connection to a
network or link partner.
.RE

.sp
.ne 2
.mk
.na
.B GLD_NOTSUPPORTED
.ad
.RS 21n
.rt
if the requested function is not supported. Only \fBgldm_set_mac_addr\fR(\|),
\fBgldm_set_multicast\fR(\|), and \fBgldm_set_promiscuous\fR(\|) may return this
value.
.RE

.sp
.ne 2
.mk
.na
.B GLD_BADARG
.ad
.RS 21n
.rt
if the function detected an unsuitable argument, for example, a bad multicast
address, a bad MAC address, or a bad packet or packet length.
.RE

.sp
.ne 2
.mk
.na
.B GLD_FAILURE
.ad
.RS 21n
.rt
on hardware failure.
.RE

.SH SEE ALSO
.sp
.LP
.BR gld (7D),
.BR gld (9F),
.BR gld_mac_info (9S),
.BR gld_stats (9S),
.BR dlpi (7P),
.BR attach (9E),
.BR ddi_add_intr (9F)
.sp
.LP
.I Writing Device Drivers
