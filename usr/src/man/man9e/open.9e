'\" te
.\" Copyright 1989 AT&T
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH open 9E "24 Apr 2008" "SunOS 5.11" "Driver Entry Points"
.SH NAME
open \- gain access to a device
.SH SYNOPSIS
.SS "Block and Character"
.LP
.nf
#include <sys/types.h>
#include <sys/file.h>
#include <sys/errno.h>
#include <sys/open.h>
#include <sys/cred.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint prefix\fBopen\fR(\fBdev_t *\fIdevp\fR, \fBint\fR \fIflag\fR, \fBint\fR \fIotyp\fR,
     \fBcred_t *\fIcred_p\fR);
.fi

.SS "STREAMS"
.LP
.nf
#include <sys/file.h>
#include <sys/stream.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint prefix\fBopen\fR(\fBqueue_t *\fIq\fR, \fBdev_t *\fIdevp\fR, \fBint\fR \fIoflag\fR, \fBint\fR \fIsflag\fR,
     \fBcred_t *\fIcred_p\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Architecture independent level 1 (DDI/DKI). This entry point is required, but
it can be
.BR nulldev (9F)
.SH PARAMETERS
.SS "Block and Character"
.sp
.ne 2
.mk
.na
.I devp
.ad
.RS 10n
.rt
Pointer to a device number.
.RE

.sp
.ne 2
.mk
.na
.I flag
.ad
.RS 10n
.rt
A bit field passed from the user program
.BR open (2)
system call that
instructs the driver on how to open the file. Valid settings are:
.sp
.ne 2
.mk
.na
.B FEXCL
.ad
.RS 11n
.rt
Open the device with exclusive access; fail all other attempts to open the
device.
.RE

.sp
.ne 2
.mk
.na
.B FNDELAY
.ad
.RS 11n
.rt
Open the device and return immediately. Do not block the open even if
something is wrong.
.RE

.sp
.ne 2
.mk
.na
.B FREAD
.ad
.RS 11n
.rt
Open the device with read-only permission, If \fBOR\fRed with
.BR FWRITE ,
allow both read and write access.
.RE

.sp
.ne 2
.mk
.na
.B FWRITE
.ad
.RS 11n
.rt
Open a device with write-only permission. If ORed with
.BR FREAD ,
allow
both read and write access.
.RE

.RE

.sp
.ne 2
.mk
.na
.I otyp
.ad
.RS 10n
.rt
Parameter supplied for driver to determine how many times a device was opened
and for what reasons. For
.B OTYP_BLK
and
.BR OTYP_CHR ,
the
.BR open()
function can be called many times, but the \fBclose\fR(9E) function is called
only when the last reference to a device is removed. If the device is accessed
through file descriptors, it is done by a call to
.BR close (2)
or
.BR exit (2).
If the device is accessed through memory mapping, it is done by
a call to
.BR munmap (2)
or
.BR exit (2).
For
.BR OTYP_LYR ,
there is
exactly one \fBclose\fR(9E) for each
.B open()
operation that is called.
This permits software drivers to exist above hardware drivers and removes any
ambiguity from the hardware driver regarding how a device is used.
.sp
.ne 2
.mk
.na
.B OTYP_BLK
.ad
.RS 12n
.rt
Open occurred through block interface for the device.
.RE

.sp
.ne 2
.mk
.na
.B OTYP_CHR
.ad
.RS 12n
.rt
Open occurred through the raw/character interface for the device.
.RE

.sp
.ne 2
.mk
.na
.B OTYP_LYR
.ad
.RS 12n
.rt
Open a layered process. This flag is used when one driver calls another
driver's
.B open()
or \fBclose\fR(9E) function. The calling driver ensures
that there is one-layered close for each layered open. This flag applies to
both block and character devices.
.RE

.RE

.sp
.ne 2
.mk
.na
.I cred_p
.ad
.RS 10n
.rt
Pointer to the user credential structure.
.RE

.SS "STREAMS"
.sp
.ne 2
.mk
.na
.I q
.ad
.RS 10n
.rt
A pointer to the read
.BR queue .
.RE

.sp
.ne 2
.mk
.na
.I devp
.ad
.RS 10n
.rt
Pointer to a device number. For
.B STREAMS
modules,
.I devp
always
points to the device number associated with the driver at the end (tail) of
the stream.
.RE

.sp
.ne 2
.mk
.na
.I oflag
.ad
.RS 10n
.rt
Valid
.I oflag
values are
.BR FEXCL ,
.BR FNDELAY ,
.BR FREAD ,
and
.B FWRITEL
\(em the same as those listed above for
.IR flag. .
For
.B STREAMS
modules,
.I oflag
is always set to
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
.I sflag
.ad
.RS 10n
.rt
Valid values are as follows:
.sp
.ne 2
.mk
.na
.B CLONEOPEN
.ad
.RS 13n
.rt
Indicates that the
.B open()
function is called through the clone driver.
The driver should return a unique device number.
.RE

.sp
.ne 2
.mk
.na
.B MODOPEN
.ad
.RS 13n
.rt
Modules should be called with
.I sflag
set to this value. Modules should
return an error if they are called with
.I sflag
set to a different value.
Drivers should return an error if they are called with
.I sflag
set to this
value.
.RE

.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 13n
.rt
Indicates a driver is opened directly, without calling the clone driver.
.RE

.RE

.sp
.ne 2
.mk
.na
.I cred_p
.ad
.RS 10n
.rt
Pointer to the user credential structure.
.RE

.SH DESCRIPTION
.sp
.LP
The driver's
.B open()
function is called by the kernel during an
.BR open (2)
or a
.BR mount (2)
on the special file for the device. A device
can be opened simultaneously by multiple processes and the
.B open()
driver
operation is called for each open. Note that a device is referenced once its
associated \fBopen\fR(9E) function is entered, and thus
.BR open (9E)
operations which have not yet completed will prevent \fBclose\fR(9E) from
being called. The function should verify that the minor number component of
.I *devp
is valid, that the type of access requested by
.I otyp
and
.I flag
is appropriate for the device, and, if required, check permissions
using the user credentials pointed to by
.IR cred_p .
.sp
.LP
The kernel provides
.B "open() close()"
exclusion guarantees to the
driver at *\fIdevp\fR, \fIotyp\fR granularity. This delays new \fBopen()\fR
calls to the driver while a last-reference
.B close()
call is executing. If
the driver has indicated that an
.B EINTR
returns safe via the
.BR "D_OPEN_RETURNS_EINTR cb_ops" (9S)
.BR cb_flag ,
a delayed
.B open()
may be interrupted by a signal that results in an
.BR EINTR
return.
.sp
.LP
Last-reference accounting and
.B "open() close()"
exclusion typically
simplify driver writing. In some cases, however, they might be an impediment
for certain types of drivers. To overcome any impediment, the driver can
change minor numbers in
.BR open "(9E), as described below, or implement"
multiple minor nodes for the same device. Both techniques give the driver
control over when
.B close()
calls occur and whether additional
.B open()
calls will be delayed while
.B close()
is executing.
.sp
.LP
The
.B open()
function is passed a pointer to a device number so that the
driver can change the minor number. This allows drivers to dynamically create
minor instances of the device. An example of this might be a pseudo-terminal
driver that creates a new pseudo-terminal whenever it is opened. A driver that
chooses the minor number dynamically, normally creates only one minor device
node in
.BR attach "(9E) with"
.BR ddi_create_minor_node (9F).
It then changes
the minor number component of
.I *devp
using
.BR makedevice "(9F) and"
.BR getmajor (9F).
The driver needs to keep track of available minor numbers
internally. A driver that dynamically creates minor numbers might want to
avoid returning the original minor number since returning the original minor
will result in postponed dynamic opens when original minor
.B close()
call
occurs.
.sp
.in +2
.nf
*devp = makedevice(getmajor(*devp), new_minor);
.fi
.in -2

.SH RETURN VALUES
.sp
.LP
The
.B open()
function should return
.B 0
for success, or the
appropriate error number.
.SH SEE ALSO
.sp
.LP
.BR close (2),
.BR exit (2),
.BR mmap (2),
.BR mount (2),
.BR munmap (2),
.BR open (2),
.BR Intro (9E),
.BR attach (9E),
.BR close (9E),
.BR ddi_create_minor_node (9F),
.BR getmajor (9F),
.BR getminor (9F),
.BR makedevice (9F),
.BR nulldev (9F),
.BR cb_ops (9S)
.sp
.LP
.I Writing Device Drivers
.sp
.LP
.I STREAMS Programming Guide
.SH WARNINGS
.sp
.LP
Do not attempt to change the major number.
.sp
.LP
When a driver modifies the device number passed in, it must not change the
major number portion of the device number. Unless CLONEOPEN is specified, the
modified device number must map to the same driver instance indicated by the
driver's getinfo(9e) implementation. In other words, cloning across different
drivers is not supported. Cloning across different instances of the same
driver in only permitted if the driver specified in
.B CLONE_DEV
in
.BR ddi_create_minor_node (9F)
is not supported.
