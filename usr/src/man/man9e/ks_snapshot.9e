'\" te
.\" Copyright (c) 2002, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ks_snapshot 9E "4 Dec 2002" "SunOS 5.11" "Driver Entry Points"
.SH NAME
ks_snapshot \- take a snapshot of kstat data
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/kstat.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint prefix\fB_ks_snapshot\fR(\fBkstat_t *\fIksp\fR, \fBvoid *\fIbuf\fR, \fBint\fR \fIrw\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I ksp
.ad
.RS 8n
.rt
Pointer to a
.BR kstat "(9S) structure."
.RE

.sp
.ne 2
.mk
.na
.I buf
.ad
.RS 8n
.rt
Pointer to a buffer to copy the snapshot into.
.RE

.sp
.ne 2
.mk
.na
.I rw
.ad
.RS 8n
.rt
Read/Write flag. Possible values are:
.sp
.ne 2
.mk
.na
.B KSTAT_READ
.ad
.RS 15n
.rt
Copy driver statistics from the driver to the buffer.
.RE

.sp
.ne 2
.mk
.na
.B KSTAT_WRITE
.ad
.RS 15n
.rt
Copy statistics from the buffer to the driver.
.RE

.RE

.SH DESCRIPTION
.sp
.LP
The
.B kstat
mechanism allows for an optional
.B ks_snapshot()
function
to copy
.B kstat
data. This is the routine that is called to marshall the
.B kstat
data to be copied to user-land. A driver can opt to use a custom
snapshot routine rather than the default snapshot routine; to take advantage of
this feature, set the
.B ks_snapshot
field before calling
.BR kstat_install (9F).
.sp
.LP
The
.B ks_snapshot()
function must have the following structure:
.sp
.in +2
.nf
static int
xx_kstat_snapshot(kstat_t *ksp, void *buf, int rw)
{
     if (rw == KSTAT_WRITE) {
/* set the native stats to the values in buf */
/* return EACCES if you don't support this */
     } else {
/* copy the kstat-specific data into buf */
     }
     return (0);
}
.fi
.in -2
.sp

.sp
.LP
In general, the
.B ks_snapshot()
routine might need to refer to
provider-private data; for example, it might need a pointer to the provider's
raw statistics. The
.B ks_private
field is available for this purpose. Its
use is entirely at the provider's discretion.
.sp
.LP
No
.B kstat
locking should be done inside the
.B ks_update()
routine. The
caller will already be holding the
.BR kstat 's
.B ks_lock
(to ensure
consistent data) and will prevent the
.B kstat
from being removed.
.RS +4
.TP
1.
.B ks_snaptime
must be set (via
.BR gethrtime (9F))
to timestamp the
data.
.RE
.RS +4
.TP
2.
Data gets copied from the
.B kstat
to the buffer on
.BR KSTAT_READ ,
and
from the buffer to the
.B kstat
on
.BR KSTAT_WRITE .
.RE
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 10n
.rt
Success
.RE

.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 10n
.rt
If
.B KSTAT_WRITE
is not allowed
.RE

.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 10n
.rt
For any other error
.RE

.SH CONTEXT
.sp
.LP
This function is called from user context only.
.SH EXAMPLES
.LP
.B Example 1
Named
.BR kstat "s with Long Strings"
(\fBKSTAT_DATA_STRING\fR)
.sp
.in +2
.nf
static int
xxx_kstat_snapshot(kstat_t *ksp, void *buf, int rw)
{
    if (rw == KSTAT_WRITE) {
         return (EACCES);
    } else {
         kstat_named_t *knp = buf;
         char *end = knp + ksp->ks_ndata;
         uint_t i;

         bcopy(ksp->ks_data, buf,
                 sizeof (kstat_named_t) * ksp->ks_ndata);
/*
 * Now copy the strings to the end of the buffer, and
 * update the pointers appropriately.
 */
         for (i = 0; i < ksp->ks_ndata; i++, knp++)
                 if (knp->data_type == KSTAT_DATA_STRING &&
                     KSTAT_NAMED_STR_PTR(knp) != NULL) {
                         bcopy(KSTAT_NAMED_STR_PTR(knp), end,
                                 KSTAT_NAMED_STR_BUFLEN(knp));
                         KSTAT_NAMED_STR_PTR(knp) = end;
                         end += KSTAT_NAMED_STR_BUFLEN(knp);
                 }
    }
    return (0);
}
.fi
.in -2
.sp

.SH SEE ALSO
.sp
.LP
.BR ks_update (9E),
.BR kstat_create (9F),
.BR kstat_install (9F),
.BR kstat (9S)
.sp
.LP
.I Writing Device Drivers
