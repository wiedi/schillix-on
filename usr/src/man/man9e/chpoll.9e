'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH chpoll 9E "7 May 2008" "SunOS 5.11" "Driver Entry Points"
.SH NAME
chpoll \- poll entry point for a non-STREAMS character driver
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/poll.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint prefix\fBchpoll\fR(\fBdev_t\fR \fIdev\fR, \fBshort\fR \fIevents\fR, \fBint\fR \fIanyyet\fR,
     \fBshort *\fIreventsp\fR, \fBstruct pollhead **\fIphpp\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
This entry point is optional. Architecture independent level 1 (DDI/DKI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I dev
.ad
.RS 12n
.rt
The device number for the device to be polled.
.RE

.sp
.ne 2
.mk
.na
.I events
.ad
.RS 12n
.rt
The events that may occur. Valid events are:
.sp
.ne 2
.mk
.na
.B POLLIN
.ad
.RS 14n
.rt
Data other than high priority data may be read without blocking.
.RE

.sp
.ne 2
.mk
.na
.B POLLOUT
.ad
.RS 14n
.rt
Normal data may be written without blocking.
.RE

.sp
.ne 2
.mk
.na
.B POLLPRI
.ad
.RS 14n
.rt
High priority data may be received without blocking.
.RE

.sp
.ne 2
.mk
.na
.B POLLHUP
.ad
.RS 14n
.rt
A device hangup has occurred.
.RE

.sp
.ne 2
.mk
.na
.B POLLERR
.ad
.RS 14n
.rt
An error has occurred on the device.
.RE

.sp
.ne 2
.mk
.na
.B POLLRDNORM
.ad
.RS 14n
.rt
Normal data (priority band = 0) may be read without blocking.
.RE

.sp
.ne 2
.mk
.na
.B POLLRDBAND
.ad
.RS 14n
.rt
Data from a non-zero priority band may be read without blocking
.RE

.sp
.ne 2
.mk
.na
.B POLLWRNORM
.ad
.RS 14n
.rt
The same as
.BR POLLOUT .
.RE

.sp
.ne 2
.mk
.na
.B POLLWRBAND
.ad
.RS 14n
.rt
Priority data (priority band > 0) may be written.
.RE

.RE

.sp
.ne 2
.mk
.na
.I anyyet
.ad
.RS 12n
.rt
A flag that is non-zero if any other file descriptors in the \fBpollfd\fR
array have events pending. The
.BR poll (2)
system call takes a pointer to
an array of
.B pollfd
structures as one of its arguments. See the
.BR poll (2)
reference page for more details.
.RE

.sp
.ne 2
.mk
.na
.I reventsp
.ad
.RS 12n
.rt
A pointer to a bitmask of the returned events satisfied.
.RE

.sp
.ne 2
.mk
.na
.I phpp
.ad
.RS 12n
.rt
A pointer to a pointer to a
.B pollhead
structure.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B chpoll()
entry point routine is used by non-STREAMS character
device drivers that wish to support polling. The driver must implement the
polling discipline itself. The following rules must be followed when
implementing the polling discipline:
.RS +4
.TP
1.
Implement the following algorithm when the
.B chpoll()
entry point is
called:
.sp
.in +2
.nf
if (events_are_satisfied_now) {
      *reventsp = satisfied_events & events;
} else {
      *reventsp = 0;
      if (!anyyet)
            *phpp = &my_local_pollhead_structure;
}
return (0);
.fi
.in -2

.RE
.RS +4
.TP
2.
Allocate an instance of the
.B pollhead
structure. This instance may be
tied to the per-minor data structure defined by the driver. The
\fBpollhead\fR structure should be treated as a "black box" by the driver.
Initialize the
.B pollhead
structure by filling it with zeroes. The size
of this structure is guaranteed to remain the same across releases.
.RE
.RS +4
.TP
3.
Call the
.B pollwakeup()
function with
.B events
listed above
whenever pollable
.B events
which the driver should monitor occur. This
function can be called with multiple events at one time. The
.B pollwakup()
can be called regardless of whether or not the
.B chpoll()
entry is called; it should be called every time the driver
detects the pollable event. The driver must not hold any mutex across the
call to
.BR pollwakeup "(9F) that is acquired in its"
.B chpoll()
entry
point, or a deadlock may result.
.RE
.SH RETURN VALUES
.sp
.LP
.B chpoll()
should return
.B 0
for success, or the appropriate error
number.
.SH SEE ALSO
.sp
.LP
.BR poll (2),
.BR nochpoll (9F),
.BR pollwakeup (9F)
.sp
.LP
.I Writing Device Drivers
