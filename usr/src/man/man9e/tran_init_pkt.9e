'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH tran_init_pkt 9E "11 Jan 2009" "SunOS 5.11" "Driver Entry Points"
.SH NAME
tran_init_pkt, tran_destroy_pkt \- SCSI HBA packet preparation and
deallocation
.SH SYNOPSIS
.LP
.nf
#include <sys/scsi/scsi.h>

\fBstruct scsi_pkt *prefix\fBtran_init_pkt\fR(\fBstruct scsi_address *\fIap\fR,
     \fBstruct scsi_pkt *\fIpkt\fR, \fBstruct buf *\fIbp\fR, \fBint\fR \fIcmdlen\fR,
     \fBint\fR \fIstatuslen\fR, \fBint\fR \fItgtlen\fR, \fBint\fIflags\fR, \fBint (*\fIcallback\fR,
     \fBcaddr_t),caddr_t\fR \fIarg\fR);
.fi

.LP
.nf
\fBvoid prefix\fBtran_destroy_pkt\fR(\fBstruct scsi_address *\fIap\fR,
     \fBstruct scsi_pkt *\fIpkt\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris architecture specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I ap
.ad
.RS 13n
.rt
Pointer to a
.BR scsi_address "(9S) structure."
.RE

.sp
.ne 2
.mk
.na
.I pkt
.ad
.RS 13n
.rt
Pointer to a
.BR scsi_pkt "(9S) structure allocated in an earlier call, or"
.IR NULL .
.RE

.sp
.ne 2
.mk
.na
.I bp
.ad
.RS 13n
.rt
Pointer to a \fBbuf\fR(9S) structure if
.B DMA
resources are to be
allocated for the
.IR pkt ,
or
.IR NULL .
.RE

.sp
.ne 2
.mk
.na
.I cmdlen
.ad
.RS 13n
.rt
The required length for the
.B SCSI
command descriptor block (\fBCDB\fR)
in bytes.
.RE

.sp
.ne 2
.mk
.na
.I statuslen
.ad
.RS 13n
.rt
The required length for the
.B SCSI
status completion block (\fBSCB\fR)
in bytes.
.RE

.sp
.ne 2
.mk
.na
.I tgtlen
.ad
.RS 13n
.rt
The length of the packet private area within the
.B scsi_pkt
to be
allocated on behalf of the
.B SCSI
target driver.
.RE

.sp
.ne 2
.mk
.na
.I flags
.ad
.RS 13n
.rt
Flags for creating the packet.
.RE

.sp
.ne 2
.mk
.na
.I callback
.ad
.RS 13n
.rt
Pointer to either
.B NULL_FUNC
or
.BR SLEEP_FUNC .
.RE

.sp
.ne 2
.mk
.na
.I arg
.ad
.RS 13n
.rt
Always
.IR NULL .
.RE

.SH DESCRIPTION
.sp
.LP
The
.B tran_init_pkt()
and
.B tran_destroy_pkt()
vectors in the
.B scsi_hba_tran
structure must be initialized during the \fBHBA
\fRdriver's \fBattach\fR(9E) to point to \fBHBA\fR entry points to be called
when a target driver calls
.BR scsi_init_pkt "(9F) and"
.BR scsi_destroy_pkt (9F).
.SS "\fBtran_init_pkt()\fR"
.sp
.LP
.B tran_init_pkt()
is the entry point into the
.B HBA
which is used
to allocate and initialize a
.B scsi_pkt
structure on behalf of a \fBSCSI
\fRtarget driver. If \fIpkt\fR is \fINULL,\fR the \fBHBA\fR driver must use
.BR scsi_hba_pkt_alloc (9F)
to allocate a new
.B scsi_pkt
structure.
.sp
.LP
If
.I bp
is non-\fINULL\fR, the
.B HBA
driver must allocate
appropriate
.B DMA
resources for the
.IR pkt ,
for example,
through\fBddi_dma_buf_setup\fR(9F) or \fBddi_dma_buf_bind_handle\fR(9F).
.sp
.LP
If the
.B PKT_CONSISTENT
bit is set in
.IR flags ,
the buffer was
allocated by \fBscsi_alloc_consistent_buf\fR(9F). For packets marked with
.B PKT_CONSISTENT,
the
.B HBA
driver must synchronize any cached data
transfers before calling the target driver's command completion callback.
.sp
.LP
If the
.B PKT_DMA_PARTIAL
bit is set in
.IR flags ,
the \fBHBA
\fRdriver should set up partial data transfers, such as setting the
.B DDI_DMA_PARTIAL
bit in the
.I flags
argument if interfaces such as
.BR ddi_dma_buf_setup (9F)
or \fBddi_dma_buf_bind_handle\fR(9F) are used.
.sp
.LP
If only partial
.B DMA
.RB "resources are available, " " tran_init_pkt()"
must return in the
.B pkt_resid
field of
.I pkt
the number of bytes of
.B DMA
resources not allocated.
.sp
.LP
If both
.I pkt
and
.I bp
are  non-\fINULL\fR, if the
.B PKT_DMA_PARTIAL
bit is set in
.IR flags ,
and if
.B DMA
resources
have already been allocated for the  pkt with a previous call to
.B tran_init_pkt()
that returned a non-zero
.B pkt_resid
field, this
request is to move the
.B DMA
resources for the subsequent piece of the
transfer.
.sp
.LP
The contents of
.BR scsi_address "(9S) pointed to by"
.I ap
are copied
into the
.B pkt_address
field of the
.BR scsi_pkt "(9S) by"
.BR scsi_hba_pkt_alloc (9F).
.sp
.LP
.I tgtlen
is the length of the packet private area in the
.BR scsi_pkt
structure to be allocated on behalf of the
.B SCSI
target driver.
.sp
.LP
.I statuslen
is the required length for the
.B SCSI
status completion
block. If the requested status length is greater than or equal to
.B sizeof(struct scsi_arq_status)
and the
.B auto_rqsense
capability
has been set, automatic request sense (\fBARS\fR) is enabled for this
packet. If the status length is less than \fBsizeof(struct
scsi_arq_status)\fR, automatic request sense must be disabled for this
.IR pkt .
.sp
.LP
If the
.B HBA
driver is not capable of disabling
.B ARQ
on a
per-packet basis and
.B tran_init_pkt()
is called with a
.IR statuslen
that is less than
.BR "sizeof(struct scsi_arq_status)" ,
the driver's
.B tran_init_pkt
routine should  allocate at least \fBsizeof(struct
scsi_arq_status)\fR. If an \fBARS\fR is needed, upon successful \fBARS\fR
done by the
.B HBA
driver, the driver must copy the sense data over and
set
.B STAT_ARQ_DONE
in
.BR pkt_state .
.sp
.LP
.I cmdlen
is the required length for the
.B SCSI
command descriptor
block.
.sp
.LP
Note:
.IR tgtlen ,
.IR statuslen ,
and
.I cmdlen
are used only when
the
.B HBA
driver allocates the
.BR scsi_pkt "(9S), in other words, when"
.I pkt
is
.IR NULL .
.sp
.LP
.I callback
indicates what the allocator routines should do when
resources are not available:
.sp
.ne 2
.mk
.na
.B NULL_FUNC
.ad
.RS 14n
.rt
Do not wait for resources. Return a
.I NULL
pointer.
.RE

.sp
.ne 2
.mk
.na
.B SLEEP_FUNC
.ad
.RS 14n
.rt
Wait indefinitely for resources.
.RE

.SS "tran_destroy_pkt()"
.sp
.LP
.B tran_destroy_pkt()
is the entry point into the
.B HBA
that must
free all of the resources that were allocated to the
.BR scsi_pkt (9S)
structure during
.BR tran_init_pkt() .
.SH RETURN VALUES
.sp
.LP
.B tran_init_pkt()
must return a pointer to a
.BR scsi_pkt (9S)
structure on success, or
.I NULL
on failure.
.sp
.LP
If
.I pkt
is
.I NULL
on entry, and
.B tran_init_pkt()
allocated a
packet through\fBscsi_hba_pkt_alloc\fR(9F) but was unable to allocate \fBDMA
\fRresources, \fBtran_init_pkt()\fR must free the packet through
.BR scsi_hba_pkt_free (9F)
before returning
.IR NULL .
.SH SEE ALSO
.sp
.LP
.BR attach (9E),
.BR tran_setup_pkt (9E),
.BR tran_sync_pkt (9E),
.BR biodone (9F),
.BR bioerror (9F),
.BR ddi_dma_buf_bind_handle (9F),
.BR ddi_dma_buf_setup (9F),
.BR kmem_cache_create (9F),
.BR scsi_alloc_consistent_buf (9F),
.BR scsi_destroy_pkt (9F),
.BR scsi_hba_attach (9F),
.BR scsi_hba_pkt_alloc (9F),
.BR scsi_hba_pkt_free (9F),
.BR scsi_init_pkt (9F),
.BR buf (9S),
.BR scsi_address (9S),
.BR scsi_hba_tran (9S),
.BR scsi_pkt (9S)
.sp
.LP
.I Writing Device Drivers
.SH NOTES
.sp
.LP
If a
.B DMA
allocation request fails with
.BR DDI_DMA_NOMAPPING ,
indicate the error by calling
.BR bioerror "(9F) with"
.I bp
and an error
code of
.BR EFAULT .
.sp
.LP
If a
.B DMA
allocation request fails with
.B DDI_DMA_TOOBIG,
indicate
the error by calling \fBbioerror\fR(9F) with \fIbp\fR and an error code of
.BR EINVAL .
.sp
.LP
For increased performance, an HBA driver may want to provide a cache for
.BR scsi_pkt (9S)
allocation. This cache should be implemented by the HBA
driver providing a
.BR tran_setup_pkt "(9E) implementation. Implementing"
this cache by direct use of
.BR kmem_cache_create "(9F) adds a compile-time"
dependency on
.B scsi_pkt()
size, which is illegal.
