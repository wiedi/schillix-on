'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH awrite 9E "28 Mar 1997" "SunOS 5.11" "Driver Entry Points"
.SH NAME
awrite \- asynchronous write to a device
.SH SYNOPSIS
.LP
.nf
#include <sys/uio.h>
#include <sys/aio_req.h>
#include <sys/cred.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>

\fBintprefix\fBawrite\fR(\fBdev_t\fR \fIdev\fR, \fBstruct aio_req *\fIaio_reqp\fR,
     \fBcred_t *\fIcred_p\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris
.B DDI
specific (Solaris DDI). This entry point is optional. Drivers
that do not support an
.B awrite()
entry point should use
.BR nodev (9F)

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I dev
.ad
.RS 12n
.rt
Device number.
.RE

.sp
.ne 2
.mk
.na
.I aio_reqp
.ad
.RS 12n
.rt
Pointer to the
.BR aio_req "(9S) structure that describes where the data is"
stored.
.RE

.sp
.ne 2
.mk
.na
.I cred_p
.ad
.RS 12n
.rt
Pointer to the  credential structure.
.RE

.SH DESCRIPTION
.sp
.LP
The driver's
.B awrite()
routine is called to perform an asynchronous write.
.BR getminor (9F)
can be used to  access the minor number component of the
\fIdev\fR argument. \fBawrite()\fR may use the  credential structure pointed to
by
.I cred_p
to check for superuser access by calling
.BR drv_priv (9F).
The
.B awrite()
routine may also examine the
.BR uio "(9S) structure through"
the
.B aio_req
structure pointer,
.BR aio_reqp .
\fBawrite()\fR must call
.BR aphysio (9F)
with the
.B aio_req
pointer and a pointer to the driver's
.BR strategy (9E)
routine.
.sp
.LP
No fields of the
.BR uio "(9S) structure pointed to by"
.BR aio_req ,
other
than
.B uio_offset
or
.BR uio_loffset ,
may be modified for non-seekable
devices.
.SH RETURN VALUES
.sp
.LP
The
.B awrite()
routine should return
.B 0
for success, or the
appropriate error number.
.SH CONTEXT
.sp
.LP
This function is called from user context only.
.SH EXAMPLES
.LP
\fBExample 1\fR Using the \fBawrite()\fR routine:
.sp
.LP
The following is an example of an
.B awrite()
routine:

.sp
.in +2
.nf
static int
xxawrite(dev_t dev, struct aio_req *aio, cred_t *cred_p)
{
        int instance;
        struct xxstate *xsp;

        instance = getminor(dev);
        xsp = ddi_get_soft_state(statep, instance);
        /*Verify soft state structure has been allocated */
        if (xsp == NULL)
                 return (ENXIO);
        return (aphysio(xxstrategy, anocancel, dev, B_WRITE, \e
        xxminphys, aio));
}
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR write (2),
.BR aiowrite (3C),
.BR aread (9E),
.BR read (9E),
.BR strategy (9E),
.BR write (9E),
.BR anocancel (9F),
.BR aphysio (9F),
\fBddi_get_soft_state\fR(9F), \fBdrv_priv\fR(9F), \fBgetminor\fR(9F),
.BR minphys (9F),
.BR nodev (9F),
.BR aio_req (9S),
.BR cb_ops (9S),
.BR uio (9S)
.sp
.LP
.I Writing Device Drivers
.SH BUGS
.sp
.LP
There is no way other than calling
.BR aphysio "(9F) to accomplish an"
asynchronous write.
