'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH devmap_map 9E "7 Jan 1997" "SunOS 5.11" "Driver Entry Points"
.SH NAME
devmap_map \- device mapping create entry point
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint prefix\fBdevmap_map\fR(\fBdevmap_cookie_t\fR \fIdhp\fR, \fBdev_t\fR \fIdev\fR,
     \fBuint_t\fR \fIflags\fR, \fBoffset_t\fR \fIoff\fR, \fBsize_t\fR \fIlen\fR, \fBvoid **\fIpvtp\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH ARGUMENTS
.sp
.ne 2
.mk
.na
.I dhp
.ad
.RS 10n
.rt
An opaque mapping handle that the system uses to describe the mapping
currently being created.
.RE

.sp
.ne 2
.mk
.na
.I dev
.ad
.RS 10n
.rt
The device whose memory is to be mapped.
.RE

.sp
.ne 2
.mk
.na
\fIflags\fR
.ad
.RS 10n
.rt
Flags indicating type of mapping. Possible values are:
.sp
.ne 2
.mk
.na
.B MAP_PRIVATE
.ad
.RS 16n
.rt
Changes are private.
.RE

.sp
.ne 2
.mk
.na
.B MAP_SHARED
.ad
.RS 16n
.rt
Changes should be shared.
.RE

.RE

.sp
.ne 2
.mk
.na
\fIoff\fR
.ad
.RS 10n
.rt
User offset within the logical device memory at which the mapping begins.
.RE

.sp
.ne 2
.mk
.na
.I len
.ad
.RS 10n
.rt
Length (in bytes) of the memory to be mapped.
.RE

.sp
.ne 2
.mk
.na
.I pvtp
.ad
.RS 10n
.rt
A pointer to be filled in by device drivers with the driver private mapping
data.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B devmap_map()
entry point is an optional routine that allows
drivers to perform additional processing or to allocate private resources
during the mapping setup time.  For example, in order for device drivers to
support context switching, the drivers allocate private mapping data and
associate the private data with the mapping parameters in the
\fBdevmap_map()\fR entry point.
.sp
.LP
The system calls
.B devmap_map()
after the user mapping to device
physical memory has been established. (For example, after the
.BR devmap (9E)
entry point is called.)
.sp
.LP
\fBdevmap_map()\fR receives a pointer to the driver private data  for this
mapping in
.IR pvtp .
The system expects the driver to allocate its private
data and set
.I *pvtp
to the allocated data.  The driver must store
\fIoff\fR and
.IR len ,
which define the range of the mapping, in its
private data.  Later, when the system calls
.BR devmap_unmap (9E),
the
driver will use the \fIoff\fR and
.I len
stored in
.I pvtp
to check
if the entire mapping, or just a part of it, is being unmapped. If only a
part of the mapping is being unmapped, the driver must allocate  a new
private data for the remaining mapping before freeing the old private data.
The driver will receive
.I *pvtp
in subsequent event notification
callbacks.
.sp
.LP
If the driver support context switching,  it should store the mapping
handle
.I dhp
in its private data
.I *pvtp
for later use in
.BR devmap_unload (9F).
.sp
.LP
For a driver that supports context switching, \fIflags\fR indicates whether
or not the driver should allocate a private context  for the mapping.  For
example, a driver may allocate a memory region to store the device context
if \fIflags\fR is set to  \fBMAP_PRIVATE\fR.
.SH RETURN VALUES
.sp
.LP
\fBdevmap_map()\fR returns the following values:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 12n
.rt
Successful completion.
.RE

.sp
.ne 2
.mk
.na
.B Non-zero
.ad
.RS 12n
.rt
An error occurred.
.RE

.SH EXAMPLES
.LP
\fBExample 1\fR  \fBdevmap_map()\fRimplementation
.sp
.LP
The following shows an example implementation for
.BR devmap_map() .

.sp
.in +2
.nf
static int
xxdevmap_map(devmap_cookie_t dhp, dev_t dev, uint_t flags, \e
     offset_t off,size_t len, void **pvtp)
{
	struct xx_resources  *pvt;
	struct xx_context *this_context;
	struct xx_softc *softc;
	softc = ddi_get_soft_state(statep, getminor(dev));

	this_context = get_context(softc, off, len);

	/* allocate resources for the mapping  - Device dependent */
	pvt = kmem_zalloc(sizeof (struct xx_resources), KM_SLEEP);

	pvt->off = off;
	pvt->len = len;
	pvt->dhp = dhp;
	pvt->ctx = this_context;
	*pvtp = pvt;
}
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR devmap_unmap (9E),
.BR devmap_unload (9F),
.BR devmap_callback_ctl (9S)
.sp
.LP
.I Writing Device Drivers
