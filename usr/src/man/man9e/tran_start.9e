'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH tran_start 9E "17 Aug 2005" "SunOS 5.11" "Driver Entry Points"
.SH NAME
tran_start \- request to transport a SCSI command
.SH SYNOPSIS
.LP
.nf
#include <sys/scsi/scsi.h>



\fBint prefix\fBtran_start\fR(\fBstruct scsi_address *\fIap\fR,
     \fBstruct scsi_pkt *\fIpkt\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris architecture specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I pkt
.ad
.RS 8n
.rt
Pointer to the
.BR scsi_pkt "(9S) structure that is about to be"
transferred.
.RE

.sp
.ne 2
.mk
.na
.I ap
.ad
.RS 8n
.rt
Pointer to a
.BR scsi_address "(9S) structure."
.RE

.SH DESCRIPTION
.sp
.LP
The
.B tran_start()
vector in the
.BR scsi_hba_tran "(9S) structure must"
be initialized during the
.B HBA
driver's
.BR attach (9E)
to point to an
.B HBA
entry point to be called when a target driver calls
.BR scsi_transport (9F).
.sp
.LP
.B tran_start()
must perform the necessary operations on the \fBHBA
\fRhardware to transport the \fBSCSI\fR command in the  \fIpkt\fR structure to
the target/logical unit device specified in the
.I ap
structure.
.sp
.LP
If the flag
.B FLAG_NOINTR
is set in
.B pkt_flags
in
.IR pkt ,
.B tran_start()
should not return until the command has been completed. The
command completion callback
.B pkt_comp
in
.I pkt
must not be called
for commands with
.B FLAG_NOINTR
set, since the return is made directly to
the function invoking
.BR scsi_transport (9F).
.sp
.LP
When the flag
.B FLAG_NOINTR
is not set,
.B tran_start()
must queue
the command for execution on the hardware and return immediately.  The member
.B pkt_comp
in
.I pkt
indicates a callback routine to be called upon
command completion.
.sp
.LP
Refer to  \fBscsi_pkt\fR(9S) for other bits in  \fBpkt_flags\fR for which the
.B HBA
driver may need to adjust how the command is managed.
.sp
.LP
If the
.B auto_rqsense
capability has been set, and the status length
allocated in
.BR tran_init_pkt "(9E) is greater than or equal to"
.BR "sizeof(struct scsi_arq_status)" ,
automatic request sense is enabled for
this
.IR pkt .
If the command terminates with a Check Condition, the \fBHBA
\fRdriver must arrange for a Request Sense command to be transported to that
target/logical unit, and the members of the
.B scsi_arq_status
structure
pointed to by
.B pkt_scbp
updated with the results of this Request Sense
command before the
.B HBA
driver completes the command pointed by
.IR pkt .
.sp
.LP
The member
.B pkt_time
in
.I pkt
is the maximum number of seconds in
which the command should complete. Timeout starts when the command is
transmitted on the
.B SCSI
bus. A
.B pkt_time
of
.B 0
means no
timeout should be performed.
.sp
.LP
For a command which has timed out, the
.B HBA
driver must perform some
recovery operation to clear the command in the target, typically an Abort
message, or a Device or Bus Reset.  The
.B pkt_reason
member of the timed
out
.I pkt
should be set to
.B CMD_TIMEOUT,
and
.BR pkt_statistics
\fBOR\fR'ed with
.BR STAT_TIMEOUT .
If the
.B HBA
driver can successfully
recover from the timeout,
.B pkt_statistics
must also be
.BR OR "'ed with"
one of
.BR STAT_ABORTED ,
.BR STAT_BUS_RESET ,
or
.BR STAT_DEV_RESET ,
as
appropriate. This informs the target driver that timeout recovery has already
been successfully accomplished for the timed out command. The  \fBpkt_comp\fR
completion callback, if not
.IR NULL ,
must also be called at the conclusion
of the timeout recovery.
.sp
.LP
If the timeout recovery was accomplished with an Abort Tag message, only the
timed out packet is affected, and the  packet must be returned with
\fBpkt_statistics OR\fR'ed with  \fBSTAT_ABORTED\fR and
.BR STAT_TIMEOUT .
.sp
.LP
If the timeout recovery was accomplished with an Abort message, all commands
active in that target are affected. All corresponding packets must be returned
with
.BR pkt_reason ,
.BR CMD_TIMEOUT ,
and
.BR pkt_statistics
\fBOR\fR'ed with  \fBSTAT_TIMEOUT\fR and
.BR STAT_ABORTED .
.sp
.LP
If the timeout recovery was accomplished with a Device Reset, all packets
corresponding to commands active in the target must be returned in the
transport layer for this target. Packets corresponding to commands active in
the target must be returned returned with
.B pkt_reason
set to
.BR CMD_TIMEOUT ,
and
.BR "pkt_statistics OR" "'ed with"
.B STAT_DEV_RESET
and
.BR STAT_TIMEOUT .
Currently inactive packets
queued for the device should be returned with
.B pkt_reason
set to
.B CMD_RESET
and
.BR "pkt_statistics OR" "'ed with"
.BR STAT_ABORTED .

.sp
.LP
If the timeout recovery was accomplished with a Bus Reset, all packets
corresponding to commands active in the target must be returned in the
transport layer. Packets corresponding to commands active in the target must
be returned with
.B pkt_reason
set to
.B CMD_TIMEOUT
and
\fBpkt_statistics OR\fR'ed with \fBSTAT_TIMEOUT\fR and
.BR STAT_BUS_RESET .
All queued packets for other targets on this bus must be
returned with
.B pkt_reason
set to
.B CMD_RESET
and
.BR pkt_statistics
.B OR'ed
with
.BR STAT_ABORTED .
.sp
.LP
Note that after either a Device Reset or a Bus Reset,  the
.B HBA
driver
must enforce a reset delay time of \fB\&'scsi-reset-delay'\fR milliseconds,
during which time no commands should be sent to that device, or any device on
the bus, respectively.
.sp
.LP
.B tran_start()
should initialize the following members in
.I pkt
to
.BR 0 .
Upon command completion, the
.B HBA
driver should ensure that the
values in these members are updated to accurately reflect the states through
which the command transitioned while in the transport layer.
.sp
.ne 2
.mk
.na
.B pkt_resid
.ad
.RS 19n
.rt
For commands with data transfer, this member must be updated to indicate the
residual of the data transferred.
.RE

.sp
.ne 2
.mk
.na
.B pkt_reason
.ad
.RS 19n
.rt
The reason for the command completion. This field should be set to
.B CMD_CMPLT
at the beginning of
.BR tran_start() ,
then updated if the
command ever transitions to an abnormal termination state. To avoid losing
information, do not set
.B pkt_reason
to any other error state unless it
still has its original
.B CMD_CMPLT
value.
.RE

.sp
.ne 2
.mk
.na
.B pkt_statistics
.ad
.RS 19n
.rt
Bit field of transport-related statistics.
.RE

.sp
.ne 2
.mk
.na
.B pkt_state
.ad
.RS 19n
.rt
Bit field with the major states through which a
.B SCSI
command can
transition. Note: The members listed above, and
.B pkt_hba_private
member,
are the only fields in the \fBscsi_pkt\fR(9S) structure which may be modified
by the transport layer.
.RE

.SH RETURN VALUES
.sp
.LP
.B tran_start()
must return:
.sp
.ne 2
.mk
.na
.B TRAN_ACCEPT
.ad
.RS 21n
.rt
The packet was accepted by the transport layer.
.RE

.sp
.ne 2
.mk
.na
.B TRAN_BUSY
.ad
.RS 21n
.rt
The packet could not be accepted because there was already a packet in
progress for this target/logical unit, the
.B HBA
queue was full, or the
target device queue was full.
.RE

.sp
.ne 2
.mk
.na
.B TRAN_BADPKT
.ad
.RS 21n
.rt
The
.B DMA
count in the packet exceeded the
.B DMA
engine's maximum
.B DMA
size, or the packet could not be accepted for other reasons.
.RE

.sp
.ne 2
.mk
.na
.B TRAN_FATAL_ERROR
.ad
.RS 21n
.rt
A fatal error has occurred in the
.B HBA.
.RE

.SH CONTEXT
.sp
.LP
The
.B tran_start()
function can be called from user or interupt context.
This requirement comes from
.BR scsi_transport() .
.SH SEE ALSO
.sp
.LP
.BR attach (9E),
.BR tran_init_pkt (9E),
.BR scsi_hba_attach (9F),
.BR scsi_transport (9F),
.BR scsi_address (9S),
.BR scsi_arq_status (9S),
.BR scsi_hba_tran (9S),
.BR scsi_pkt (9S)
.sp
.LP
.I Writing Device Drivers
