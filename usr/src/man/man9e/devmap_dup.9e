'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH devmap_dup 9E "21 Jan 1997" "SunOS 5.11" "Driver Entry Points"
.SH NAME
devmap_dup \- device mapping duplication entry point
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h



\fB int prefix\fBdevmap_dup\fR(\fBdevmap_cookie_t\fR \fIdhp\fR, \fBvoid *\fIpvtp\fR,
     \fBdevmap_cookie_t\fR \fInew_dhp\fR, \fBvoid **\fInew_pvtp\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH ARGUMENTS
.sp
.ne 2
.mk
.na
.I dhp
.ad
.RS 13n
.rt
An opaque mapping handle that the system uses to describe the mapping
currently being duplicated.
.RE

.sp
.ne 2
.mk
.na
.I pvtp
.ad
.RS 13n
.rt
Driver private mapping data for the mapping currently being duplicated.
.RE

.sp
.ne 2
.mk
.na
.I new_dhp
.ad
.RS 13n
.rt
An opaque data structure that the system uses to describe the duplicated
device mapping.
.RE

.sp
.ne 2
.mk
.na
.I new_pvtp
.ad
.RS 13n
.rt
A pointer to be filled in by device drivers with the driver private mapping
data for the duplicated device mapping.
.RE

.SH DESCRIPTION
.sp
.LP
The system calls
.B devmap_dup()
when a device mapping is duplicated,
such as during the execution of the
.BR fork (2)
system call.  The system
expects
.B devmap_dup()
to generate new driver private data for the new
mapping, and to set
.I new_pvtp
to point to it.
.I new_dhp
is the
handle of the new mapped object.
.sp
.LP
A non-zero return value from
.B devmap_dup()
will cause a corresponding
operation such as
.B fork()
to fail.
.SH RETURN VALUES
.sp
.LP
.B devmap_dup()
returns the following values:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 12n
.rt
Successful completion.
.RE

.sp
.ne 2
.mk
.na
.B Non-zero
.ad
.RS 12n
.rt
An error occurred.
.RE

.SH EXAMPLES
.sp
.in +2
.nf
static int
xxdevmap_dup(devmap_cookie_t dhp, void *pvtp, \e
    devmap_cookie_t new_dhp,
    void **new_pvtp)
{
    struct xxpvtdata    *prvtdata;
    struct xxpvtdata    *p = (struct xxpvtdata *)pvtp;
    struct xx_softc     *softc = p->softc;
    mutex_enter(&softc->mutex);
    /* Allocate a new private data structure */
    prvtdata = kmem_alloc(sizeof (struct xxpvtdata), KM_SLEEP);
    /* Return the new data */
    prvtdata->off = p->off;
    prvtdata->len = p->len;
    prvtdata->ctx = p->ctx;
    prvtdata->dhp = new_dhp;
    prvtdata->softc = p->softc;
    *new_pvtp = prvtdata;
    mutex_exit(&softc->mutex);
    return (0);
}
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR fork (2),
.BR devmap_callback_ctl (9S)
.sp
.LP
.I Writing Device Drivers
