'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH devmap_access 9E "17 Jan 1997" "SunOS 5.11" "Driver Entry Points"
.SH NAME
devmap_access \- device mapping access entry point
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint prefix\fBdevmap_access\fR(\fBdevmap_cookie_t\fR \fIdhp\fR, \fBvoid *\fIpvtp\fR,
     \fBoffset_t\fR \fIoff\fR, \fBsize_t\fR \fIlen\fR, \fBuint_t\fR \fItype\fR, \fBuint_t\fR \fIrw\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH ARGUMENTS
.sp
.ne 2
.mk
.na
.I dhp
.ad
.RS 9n
.rt
An opaque mapping handle that the system uses to describe the mapping.
.RE

.sp
.ne 2
.mk
.na
.I pvtp
.ad
.RS 9n
.rt
Driver private mapping data.
.RE

.sp
.ne 2
.mk
.na
.I off
.ad
.RS 9n
.rt
User offset within the logical device memory at which the access begins.
.RE

.sp
.ne 2
.mk
.na
.I len
.ad
.RS 9n
.rt
Length (in bytes) of the memory being accessed.
.RE

.sp
.ne 2
.mk
.na
.I type
.ad
.RS 9n
.rt
Type of access operation.  Possible values are:
.sp
.ne 2
.mk
.na
.B DEVMAP_ACCESS
.ad
.RS 18n
.rt
Memory access.
.RE

.sp
.ne 2
.mk
.na
.B DEVMAP_LOCK
.ad
.RS 18n
.rt
Lock the memory being accessed.
.RE

.sp
.ne 2
.mk
.na
.B DEVMAP_UNLOCK
.ad
.RS 18n
.rt
Unlock the memory being accessed.
.RE

.RE

.sp
.ne 2
.mk
.na
.I rw
.ad
.RS 9n
.rt
Direction of access.  Possible values are:
.sp
.ne 2
.mk
.na
.B DEVMAP_READ
.ad
.RS 17n
.rt
Read access attempted.
.RE

.sp
.ne 2
.mk
.na
.B DEVMAP_WRITE
.ad
.RS 17n
.rt
Write access attempted.
.RE

.sp
.ne 2
.mk
.na
.B DEVMAP_EXEC
.ad
.RS 17n
.rt
Execution access attempted.
.RE

.RE

.SH DESCRIPTION
.sp
.LP
The
.B devmap_access()
entry point is an optional routine.  It notifies
drivers whenever an access is made to a mapping described by
.I dhp
that
has not been validated or does  not have sufficient protection for the
access. The system expects
.B devmap_access()
to call either
.BR devmap_do_ctxmgt (9F)
or \fBdevmap_default_access\fR(9F) to load the
memory address translations before it returns. For mappings that support
context switching,  device drivers should call
.BR devmap_do_ctxmgt (9F).
For mappings that do not support context switching, the drivers should call
.BR devmap_default_access (9F).
.sp
.LP
In
.BR devmap_access() ,
drivers perform memory access related operations
such as context switching, checking the availability of the memory object,
and locking and unlocking the memory object being accessed. The
.B devmap_access()
entry point is set to
.I NULL
if no operations
need to be performed.
.sp
.LP
.I pvtp
is a pointer to the driver's private mapping data that was
allocated and initialized in the
.BR devmap_map "(9E) entry point."
.sp
.LP
.I off
and
.I len
define the range to be affected by the operations
in
.BR devmap_access() .
.I type
defines the type of operation that
device drivers should perform on the memory object.  If
.B type
is either
.B DEVMAP_LOCK
or
.B DEVMAP_UNLOCK,
the length passed to either
.BR devmap_do_ctxmgt (9F)
or \fBdevmap_default_access\fR(9F) must be same
as
.IR len .
.I rw
specifies the direction of access on the memory
object.
.sp
.LP
A non-zero return value from
.B devmap_access()
may result in a
.B SIGSEGV
or
.B SIGBUS
signal being delivered to the process.
.SH RETURN VALUES
.sp
.LP
.B devmap_access()
returns the following values:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 12n
.rt
Successful completion.
.RE

.sp
.ne 2
.mk
.na
.B Non-zero
.ad
.RS 12n
.rt
An error occurred.  The return value from
.BR devmap_do_ctxmgt (9F)
or
.BR devmap_default_access (9F)
should be returned.
.RE

.SH EXAMPLES
.LP
.B Example 1 devmap_access()
entry point
.sp
.LP
The following is an example of the
.B devmap_access()
entry point.  If
the mapping supports context switching,
.B devmap_access()
calls
.BR devmap_do_ctxmgt (9F).
Otherwise,
.B devmap_access()
calls
.BR devmap_default_access (9F).

.sp
.in +2
.nf
\&.\|.\|.
#define OFF_DO_CTXMGT  0x40000000
#define OFF_NORMAL     0x40100000
#define CTXMGT_SIZE    0x100000
#define NORMAL_SIZE    0x100000

/*
 * Driver devmap_contextmgt(9E) callback function.
 */
static int
xx_context_mgt(devmap_cookie_t dhp, void *pvtp, offset_t offset,
   size_t length, uint_t type, uint_t rw)
{
   ......
   /*
    * see devmap_contextmgt(9E) for an example
    */
}

/*
 * Driver devmap_access(9E) entry point
 */
static int
xxdevmap_access(devmap_cookie_t dhp, void *pvtp, offset_t off,
   size_t len, uint_t type, uint_t rw)
{
   offset_t diff;
   int err;

   /*
    * check if \fIoff\fR is within the range that supports
    * context management.
    */
   if ((diff = off - OFF_DO_CTXMG) >= 0 && diff < CTXMGT_SIZE) {
       /*
        * calculates the length for context switching
        */
       if ((len + off) > (OFF_DO_CTXMGT + CTXMGT_SIZE))
           return (-1);
       /*
        * perform context switching
        */
       err = devmap_do_ctxmgt(dhp, pvtp, off, len, type,
           rw, xx_context_mgt);
    /*
     * check if \fI off \fRis within the range that does normal
     * memory mapping.
     */
    } else if ((diff = off - OFF_NORMAL) >= 0 && diff < NORMAL_SIZE) {
       if ((len + off) > (OFF_NORMAL + NORMAL_SIZE))
           return (-1);
       err = devmap_default_access(dhp, pvtp, off, len, type, rw);
    } else
       return (-1);

   return (err);
}
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR devmap_map (9E),
.BR devmap_default_access (9F),
.BR devmap_do_ctxmgt (9F),
.BR devmap_callback_ctl (9S)
.sp
.LP
.I Writing Device Drivers
