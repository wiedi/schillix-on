'\" te
.\" Copyright (c) 2000, Sun Microsystems, Inc.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\"  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH probe 9E "18 Nov 1992" "SunOS 5.11" "Driver Entry Points"
.SH NAME
probe \- determine if a non-self-identifying device is present
.SH SYNOPSIS
.LP
.nf
#include <sys/conf.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBstatic intprefix\fBprobe\fR(\fBdev_info_t *\fIdip\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI). This entry point is required for
non-self-identifying devices.  You must write it for such devices. For
self-identifying devices, 
.BR nulldev (9F)
should be specified in the
.BR dev_ops (9S)
structure if a probe routine is not necessary.
.SH ARGUMENTS
.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 8n
.rt
Pointer to the device's
.B dev_info
structure.
.RE

.SH DESCRIPTION
.sp
.LP
.B probe()
determines whether the device corresponding to
.IR dip
actually exists and is a valid device for this driver.
.B probe()
is
called after
.BR identify (9E)
and before \fBattach\fR(9E) for a given
.IR dip .
For example, the
.B probe()
routine can map the device
registers using
.BR ddi_map_regs "(9F) then attempt to access the hardware"
using
.BR ddi_peek (9F)
or \fBddi_poke\fR(9F) and determine if the device
exists. Then the device registers should be unmapped using
.BR ddi_unmap_regs (9F).
.sp
.LP
To probe a device that was left powered off after the last
.BR detach() ,
it might be necessary to power it up. If so, the driver must power up the
device by accessing device registers directly.
.BR pm_raise_power (9F)
will
be not be available until
.BR attach (9E).
The framework ensures that the
ancestors of the node being probed and all relevant platform-specific power
management hardware is at full power at the time that
.B probe()
is
called.
.sp
.LP
.B probe()
should only probe the device. It should not change any
software state and should not create any software state. Device
initialization should be done in
.BR attach (9E).
.sp
.LP
For a self-identifying device, this entry point is not necessary. However,
if a device exists in both self-identifying and non-self-identifying forms,
a
.B probe()
routine can be provided to simplify the driver.
.BR ddi_dev_is_sid (9F)
can then be used to determine whether
.B probe()
needs to do any work. See
.BR ddi_dev_is_sid (9F)
for an
example.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B DDI_PROBE_SUCCESS
.ad
.RS 23n
.rt
If the probe was successful.
.RE

.sp
.ne 2
.mk
.na
.B DDI_PROBE_FAILURE
.ad
.RS 23n
.rt
If the probe failed.
.RE

.sp
.ne 2
.mk
.na
.B DDI_PROBE_DONTCARE
.ad
.RS 23n
.rt
If the probe was unsuccessful, yet
.BR attach (9E)
should still be
called.
.RE

.sp
.ne 2
.mk
.na
.B DDI_PROBE_PARTIAL
.ad
.RS 23n
.rt
If the instance is not present now, but may be present in the future.
.RE

.SH SEE ALSO
.sp
.LP
.BR attach (9E),
.BR identify (9E),
.BR ddi_dev_is_sid (9F),
.BR ddi_map_regs (9F),
.BR ddi_peek (9F),
.BR ddi_poke (9F),
.BR nulldev (9F),
.BR dev_ops (9S)
.sp
.LP
.I Writing Device Drivers
