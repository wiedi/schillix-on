'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved. The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.TH signal 3UCB "30 Oct 2007" "SunOS 5.11" "SunOS/BSD Compatibility Library Functions"
.SH NAME
signal \- simplified software signal facilities
.SH SYNOPSIS
.LP
.nf
\fB/usr/ucb/cc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|.
#include <signal.h>

\fBvoid\fR (\fB*signal(\fIsig\fR, \fIfunc\fR))()
\fBint\fR \fIsig\fR;
\fBvoid\fR (\fB*\fIfunc\fR)();
.fi

.SH DESCRIPTION
.sp
.LP
.B signal()
is a simplified interface to the more general
.BR sigvec (3UCB)
facility.  Programs that use
.B signal()
in preference
to
.B sigvec()
are more likely to be portable to all systems.
.sp
.LP
A signal is generated by some abnormal event, initiated by a user at a
terminal (quit, interrupt, stop), by a program error (bus error, etc.), by
request of another program (kill), or when a process is stopped because it
wishes to access its control terminal while in the background (see
.BR termio (7I)).
Signals are optionally generated when a process resumes
after being stopped, when the status of child processes changes, or when
input is ready at the control terminal. Most signals cause termination of
the receiving process if no action is taken; some signals instead cause the
process receiving them to be stopped, or are simply discarded if the process
has not requested otherwise. Except for the
.B SIGKILL
and
.BR SIGSTOP
signals, the
.B signal()
call allows signals either to be ignored or to
interrupt to a specified location. See \fBsigvec\fR(3UCB) for a complete
list of the signals.
.sp
.LP
If
.IR func " is"
.BR SIG_DFL ,
the default action for signal
.I sig
is
reinstated; this default is termination (with a core image for starred
signals) except for signals marked with \(bu or a dagger. Signals marked
with \(bu are discarded if the action is
.BR SIG_DFL ;
signals marked with
a dagger cause the process to stop.  If
.I func
is
.B SIG_IGN
the
signal is subsequently ignored and pending instances of the signal are
discarded. Otherwise, when the signal occurs further occurrences of the
signal are automatically blocked and
.I func
is called.
.sp
.LP
A return from the function unblocks the handled signal and continues the
process at the point it was interrupted.
.sp
.LP
If a caught signal occurs during certain functions,  terminating the call
prematurely, the call is automatically restarted. In particular this can
occur during a
.BR read (2)
or
.BR write (2)
on a slow device (such as a
terminal; but not a file) and during a
.BR wait (3C).
.sp
.LP
The value of
.B signal()
is the previous (or initial) value of
.I func
for the particular signal.
.sp
.LP
After a
.BR fork (2)
or
.BR vfork (2)
the child inherits all signals.  An
.BR exec (2)
resets all caught signals to the default action; ignored
signals remain ignored.
.SH RETURN VALUES
.sp
.LP
The previous action is returned on a successful call. Otherwise,\fB\(mi1\fR
is returned and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
.B signal()
will fail and no action will take place if the following
occurs:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
.I sig
is not a valid signal number, or is
.B SIGKILL
or
.BR SIGSTOP .
.RE

.SH SEE ALSO
.sp
.LP
.BR kill (1),
.BR exec (2),
.BR fcntl (2),
.BR fork (2),
.BR getitimer (2),
.BR getrlimit (2),
.BR kill (2),
.BR read (2),
.BR sigaction (2),
.BR write (2),
.BR abort (3C),
.BR ptrace (3C),
.BR setjmp (3C),
.BR setjmp (3UCB),
.BR sigblock (3UCB),
.BR signal (3C),
.BR signal.h (3HEAD),
.BR sigstack (3UCB),
.BR sigvec (3UCB),
.BR wait (3C),
.BR wait (3UCB),
.BR termio (7I)
.SH NOTES
.sp
.LP
Use of these interfaces should be restricted to only applications written
on BSD platforms.  Use of these interfaces with any of the system libraries
or in multi-threaded applications is unsupported.
.sp
.LP
The handler routine
.I func
can be declared:
.sp
.in +2
.nf
void handler(signum) int signum;
.fi
.in -2

.sp
.LP
Here
.I signum
is the signal number. See \fBsigvec\fR(3UCB) for more
information.
