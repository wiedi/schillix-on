'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH printf 3UCB "30 Oct 2007" "SunOS 5.11" "SunOS/BSD Compatibility Library Functions"
.SH NAME
printf, fprintf, sprintf, vprintf, vfprintf, vsprintf \- formatted output
conversion
.SH SYNOPSIS
.LP
.nf
\fB/usr/ucb/cc\fR [\fIflag\fR .\|.\|.] \fIfile\fR .\|.\|.
#include <stdio.h>

\fBint\fR \fBprintf\fR(\fIformat\fR, \fI\&.\|.\|.\fR)
\fBconst char *\fIformat\fR;
.fi

.LP
.nf
\fBint\fR \fBfprintf\fR(\fIstream\fR, \fIformat\fR, \fIva_list\fR)
\fBFILE *\fIstream\fR;
\fBchar *\fIformat\fR;
\fIva_dcl\fR;
.fi

.LP
.nf
\fBchar *\fBsprintf\fR(\fIs\fR, \fIformat\fR, \fIva_list\fR)
\fBchar *\fIs\fR, \fB*\fIformat\fR;
\fIva_dcl\fR;
.fi

.LP
.nf
\fBint\fR \fBvprintf\fR(\fIformat\fR, \fIap\fR)
\fBchar *\fIformat\fR;
\fBva_list\fR \fIap\fR;
.fi

.LP
.nf
\fBint\fR \fBvfprintf\fR(\fIstream\fR, \fIformat\fR, \fIap\fR)
\fBFILE *\fIstream\fR;
\fBchar *\fIformat\fR;
\fBva_list\fR \fIap\fR;
.fi

.LP
.nf
\fBchar *\fBvsprintf\fR(\fIs\fR, \fIformat\fR, \fIap\fR)
\fBchar *\fIs\fR, \fB*\fIformat\fR;
\fBva_list\fR \fIap\fR;
.fi

.SH DESCRIPTION
.sp
.LP
\fBprintf()\fR places output on the standard output stream \fBstdout\fR.
\fBfprintf()\fR places output on the named output \fIstream\fR.
\fBsprintf()\fR places "output," followed by the \fINULL\fR character
(\fB\e0\fR), in consecutive bytes starting at *\fIs\fR; it is the user's
responsibility to ensure that enough storage is available.
.sp
.LP
\fBvprintf()\fR,
.BR vfprintf() ,
and \fBvsprintf()\fR are the same as
\fBprintf()\fR,
.BR fprintf() ,
and \fBsprintf()\fR respectively, except that
instead of being called with a variable number of arguments, they are called
with an argument list as defined by
.BR <varargs.h> .
.sp
.LP
Each of these functions converts, formats, and prints its \fIarg\fRs under
control of the
.IR format .
The \fIformat\fR is a character string which
contains two types of objects: plain characters, which are simply copied to
the output stream, and conversion specifications, each of which causes
conversion and printing of zero or more \fIarg\fRs. The results are undefined
if there are insufficient \fIarg\fRs for the format. If the format is
exhausted while \fIarg\fRs remain, the excess \fIarg\fRs are simply ignored.
.sp
.LP
Each conversion specification is introduced by the character
.BR % .
After
the
.BR % ,
the following appear in sequence:
.RS +4
.TP
.ie t \(bu
.el o
Zero or more
.IR flags ,
which modify the meaning of the conversion
specification.
.RE
.RS +4
.TP
.ie t \(bu
.el o
An optional decimal digit string specifying a minimum
.IR "field width" .
If
the converted value has fewer characters than the field width, it will be
padded on the left (or right, if the left-adjustment flag `\fB\(mi\fR\&',
described below, has been given) to the field width. The padding is with
blanks unless the field width digit string starts with a zero, in which case
the padding is with zeros.
.RE
.RS +4
.TP
.ie t \(bu
.el o
A
.I precision
that gives the minimum number of digits to appear for the
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
or
.B X
conversions, the
number of digits to appear after the decimal point for the
.BR e ,
.BR E ,
and \fBf\fR conversions, the maximum number of significant digits for the
\fBg\fR and \fBG\fR conversion, or the maximum number of characters to be
printed from a string in
.B s
conversion. The precision takes the form of a
period (\fB\&.\fR) followed by a decimal digit string; a
.I NULL
digit
string is treated as zero. Padding specified by the precision overrides the
padding specified by the field width.
.RE
.RS +4
.TP
.ie t \(bu
.el o
An optional
.B l
(ell) specifying that a following
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
or
.B X
conversion character applies to a long
integer
.IR arg .
An
.B l
before any other conversion character is
ignored.
.RE
.RS +4
.TP
.ie t \(bu
.el o
A character that indicates the type of conversion to be applied.
.RE
.sp
.LP
A field width or precision or both may be indicated by an asterisk (\fB*\fR)
instead of a digit string. In this case, an integer
.I arg
supplies the
field width or precision. The
.I arg
that is actually converted is not
fetched until the conversion letter is seen, so the \fIarg\fRs specifying
field width or precision must appear \fIbefore\fR the \fIarg\fR (if any) to be
converted. A negative field width argument is taken as a `\fB\(mi\fR\&' flag
followed by a positive field width. If the precision argument is negative, it
will be changed to zero.
.sp
.LP
The flag characters and their meanings are:
.sp
.ne 2
.mk
.na
\fB\(mi\fR
.ad
.RS 9n
.rt
The result of the conversion will be left-justified within the field.
.RE

.sp
.ne 2
.mk
.na
.B +
.ad
.RS 9n
.rt
The result of a signed conversion will always begin with a sign (\fB+\fR or
\fB\(mi\fR).
.RE

.sp
.ne 2
.mk
.na
.B blank
.ad
.RS 9n
.rt
If the first character of a signed conversion is not a sign, a blank will be
prefixed to the result. This implies that if the blank and
.B +
flags both
appear, the blank flag will be ignored.
.RE

.sp
.ne 2
.mk
.na
.B #
.ad
.RS 9n
.rt
This flag specifies that the value is to be converted to an "alternate form."
For
.BR c ,
.BR d ,
.BR i ,
.BR s ,
and
.B u
conversions, the flag has
no effect. For
.B o
conversion, it increases the precision to force the
first digit of the result to be a zero. For
.B x
or
.B X
conversion, a
non-zero result will have
.B 0x
or
.B 0X
prefixed to it. For \fBe\fR,
.BR E ,
\fBf\fR,
.BR g ,
and
.B G
conversions, the result will always
contain a decimal point, even if no digits follow the point (normally, a
decimal point appears in the result of these conversions only if a digit
follows it). For
.B g
and
.B G
conversions, trailing zeroes will
\fInot\fR be removed from the result (which they normally are).
.RE

.sp
.LP
The conversion characters and their meanings are:
.sp
.ne 2
.mk
.na
\fBd\fR,\fBi\fR,\fBo\fR,\fBu\fR,\fBx\fR,\fBX\fR
.ad
.RS 15n
.rt
The integer
.I arg
is converted to signed decimal (\fBd\fR or \fBi\fR),
unsigned octal
.RB ( o ),
unsigned decimal
.RB ( u ),
or unsigned hexadecimal
notation (\fBx\fR and
.BR X ),
respectively; the letters \fBabcdef\fR are
used for
.B x
conversion and the letters
.B ABCDEF
for
.BR X
conversion. The precision specifies the minimum number of digits to appear; if
the value being converted can be represented in fewer digits, it will be
expanded with leading zeroes. (For compatibility with older versions, padding
with leading zeroes may alternatively be specified by prepending a zero to the
field width. This does not imply an octal value for the field width.) The
default precision is 1. The result of converting a zero value with a precision
of zero is a
.I NULL
string.
.RE

.sp
.ne 2
.mk
.na
\fBf\fR
.ad
.RS 15n
.rt
The float or double
.I arg
is converted to decimal notation in the style
[\fB\(mi\fR]\fIddd\fB\&.\fIddd\fR where the number of digits after the
decimal point is equal to the precision specification. If the precision is
missing, 6 digits are given; if the precision is explicitly 0, no digits and
no decimal point are printed.
.RE

.sp
.ne 2
.mk
.na
\fBe\fR,\fBE\fR
.ad
.RS 15n
.rt
The float or double
.I arg
is converted in the style
[\fB\(mi\fR]\fId\fB\&.\fIddd\fBe\(+-\fIddd\fR, where there is one
digit before the decimal point and the number of digits after it is equal to
the precision; when the precision is missing, 6 digits are produced; if the
precision is zero, no decimal point appears. The
.B E
format code will
produce a number with
.B E
instead of
.B e
introducing the exponent. The
exponent always contains at least two digits.
.RE

.sp
.ne 2
.mk
.na
\fBg\fR,\fBG\fR
.ad
.RS 15n
.rt
The float or double
.I arg
is printed in style \fBf\fR or
.B e
(or in
style
.B E
in the case of a
.B G
format code), with the precision
specifying the number of significant digits. The style used depends on the
value converted: style
.B e
or
.B E
will be used only if the exponent
resulting from the conversion is less than \(mi4 or greater than the
precision. Trailing zeroes are removed from the result; a decimal point
appears only if it is followed by a digit.
.RE

.sp
.LP
The
.BR e ,
\fBE f\fR, \fBg,\fR and \fBG\fR formats print \fBIEEE\fR
indeterminate values (infinity or not-a-number) as "Infinity" or "NaN"
respectively.
.sp
.ne 2
.mk
.na
.B c
.ad
.RS 5n
.rt
The character
.I arg
is printed.
.RE

.sp
.ne 2
.mk
.na
.B s
.ad
.RS 5n
.rt
The
.I arg
is taken to be a string (character pointer) and characters from
the string are printed until a
.I NULL
character (\fB\e0\fR) is encountered
or until the number of characters indicated by the precision specification is
reached. If the precision is missing, it is taken to be infinite, so all
characters up to the first
.I NULL
.RI "character are printed. A" " NULL"
value for
.I arg
will yield undefined results.
.RE

.sp
.ne 2
.mk
.na
.B %
.ad
.RS 5n
.rt
Print a
.BR % ;
no argument is converted.
.RE

.sp
.LP
In no case does a nonexistent or small field width cause truncation of a
field; if the result of a conversion is wider than the field width, the field
is simply expanded to contain the conversion result. Padding takes place only
if the specified field width exceeds the actual width. Characters generated by
\fBprintf()\fR and \fBfprintf()\fR are printed as if \fBputc\fR(3C) had been
called.
.SH RETURN VALUES
.sp
.LP
Upon success, \fBprintf()\fR and \fBfprintf()\fR return the number of
characters transmitted, excluding the null character. \fBvprintf()\fR and
\fBvfprintf()\fR return the number of characters transmitted. \fBsprintf()\fR
and \fBvsprintf()\fR always return
.IR s .
If an output error is encountered,
\fBprintf()\fR, \fBfprint()\fR,
.BR vprintf() ,
and \fBvfprintf()\fR return
EOF.
.SH EXAMPLES
.LP
\fBExample 1\fR Examples of the \fBprintf\fR Command To Print a Date and
Time
.sp
.LP
To print a date and time in the form "Sunday, July 3, 10:02," where
\fIweekday\fR and \fImonth\fR are pointers to \fINULL\fR-terminated strings:

.sp
.in +2
.nf
printf("%s, %s %i, %d:%.2d", weekday, month, day, hour, min);
.fi
.in -2

.LP
\fBExample 2\fR Examples of the \fBprintf\fR Command To Print to Five Decimal
Places
.sp
.LP
To print to five decimal places:

.sp
.in +2
.nf
printf("pi \|= \|%.5f", \|4 * atan(1. 0));
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR econvert (3C),
.BR putc (3C),
\fBscanf\fR(3C), \fBvprintf\fR(3C)
.SH NOTES
.sp
.LP
Use of these interfaces should be restricted to only applications written on
BSD platforms. Use of these interfaces with any of the system libraries or in
multi-thread applications is unsupported.
.sp
.LP
Very wide fields (>128 characters) fail.
