'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved. The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.TH flock 3UCB "30 Oct 2007" "SunOS 5.11" "SunOS/BSD Compatibility Library Functions"
.SH NAME
flock \- apply or remove an advisory lock on an open file
.SH SYNOPSIS
.LP
.nf
\fB/usr/ucb/cc\fR[ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|.
#include <sys/file.h>

\fBint\fR \fBflock\fR( \fIfd\fR,  \fIoperation\fR)

\fBint\fR \fIfd\fR, \fIoperation\fR;
.fi

.SH DESCRIPTION
.sp
.LP
.B flock()
applies or removes an
.I advisory
lock on the file
associated with the file descriptor
.IR fd .
The compatibility version of
.B flock()
has been implemented on top of
.BR fcntl (2)
locking.  It
does not provide complete binary compatibility.
.sp
.LP
Advisory locks allow cooperating processes to perform consistent operations
on files, but do not guarantee exclusive access (that is, processes may
still access files without using advisory locks, possibly resulting in
inconsistencies).
.sp
.LP
The locking mechanism allows two types of locks: shared locks and exclusive
locks. More than one process may hold a shared lock for a file at any given
time, but multiple exclusive, or both shared and exclusive, locks may not
exist simultaneously on a file.
.sp
.LP
A lock is applied by specifying an
.I operation
parameter
.BR LOCK_SH
for a shared lock or
.B LOCK_EX
for an exclusive lock. The
.I operation
parameter may be ORed with
.B LOCK_NB
to make the
.RI "operation non-blocking. To unlock an existing lock, the" " operation"
should be
.BR LOCK_UN.
.sp
.LP
Read permission is required on a file to obtain a shared lock, and write
permission is required to obtain an exclusive lock. Locking a segment that
is already locked by the calling process causes the old lock type to be
removed and the new lock type to take effect.
.sp
.LP
Requesting a lock on an object that is already locked normally causes the
caller to block until the lock may be acquired.  If
.B LOCK_NB
is
included in
.IR operation ,
then this will not happen; instead, the call
will fail and the error
.B EWOULDBLOCK
will be returned.
.SH RETURN VALUES
.sp
.LP
.B flock()
returns:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 9n
.rt
on success.
.RE

.sp
.ne 2
.mk
.na
\fB\(mi1\fR
.ad
.RS 9n
.rt
on failure and sets
.B errno
to indicate the error.
.RE

.SH ERRORS
.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 15n
.rt
The argument
.I fd
is an invalid descriptor.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 15n
.rt
.I operation
is not a valid argument.
.RE

.sp
.ne 2
.mk
.na
.B EOPNOTSUPP
.ad
.RS 15n
.rt
The argument
.I fd
refers to an object other than a file.
.RE

.sp
.ne 2
.mk
.na
.B EWOULDBLOCK
.ad
.RS 15n
.rt
The file is locked and the
.B LOCK_NB
option was specified.
.RE

.SH SEE ALSO
.sp
.LP
.BR lockd (1M),
.BR chmod (2),
.BR close (2),
.BR dup (2),
.BR exec (2),
.BR fcntl (2),
.BR fork (2),
.BR open (2),
.BR lockf (3C)
.SH NOTES
.sp
.LP
Use of these interfaces should be restricted to only applications written
on BSD platforms.  Use of these interfaces with any of the system libraries
or in multi-thread applications is unsupported.
.sp
.LP
Locks are on files, not file descriptors.  That is, file descriptors
duplicated through
.BR dup (2)
or
.BR fork (2)
do not result in multiple
instances of a lock, but rather multiple references to a single lock.  If a
process holding a lock on a file forks and the child explicitly unlocks the
file, the parent will lose its lock. Locks are not inherited by a child
process.
.sp
.LP
Processes blocked awaiting a lock may be awakened by signals.
.sp
.LP
Mandatory locking may occur, depending on the mode bits of the file.  See
.BR chmod (2).
.sp
.LP
Locks obtained through the
.B flock()
mechanism under SunOS 4.1 were
known only within the system on which they were placed.  This is no longer
true.
