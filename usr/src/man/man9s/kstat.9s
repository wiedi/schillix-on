'\" te
.\" Copyright (c) 2000, Sun Microsystems, Inc., All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH kstat 9S "4 Apr 1994" "SunOS 5.11" "Data Structures for Drivers"
.SH NAME
kstat \- kernel statistics structure
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/kstat.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH DESCRIPTION
.sp
.LP
Each kernel statistic
.RB ( kstat )
exported by device drivers consists of
a header section and a data section. The
.B kstat
structure is the header
portion of the statistic.
.sp
.LP
A driver receives a pointer to a
.B kstat
structure from a successful
call to
.BR kstat_create (9F).
Drivers should never allocate a \fBkstat\fR
structure in any other manner.
.sp
.LP
After allocation, the driver should perform any further initialization
needed before calling
.BR kstat_install "(9F) to actually export the"
.BR kstat .
.SH STRUCTURE MEMBERS
.sp
.in +2
.nf
void      *ks_data;             /* kstat type-specif. data */
ulong_t   ks_ndata;             /* # of type-specif. data
                                     records */
ulong_t   ks_data_size;         /* total size of kstat data
                                   section */
int       (*ks_update)(struct kstat *, int);
void      *ks_private;          /* arbitrary provider-private
                                   data */
void      *ks_lock;             /* protects kstat's data */
.fi
.in -2

.sp
.LP
The members of the
.B kstat
structure available to examine or set by a
driver are as follows:
.sp
.ne 2
.mk
.na
.B ks_data
.ad
.RS 17n
.rt
Points to the data portion of the
.BR kstat .
Either allocated by
.BR kstat_create (9F)
for the drivers use, or by the driver if it is using
virtual
.BR kstat s.
.RE

.sp
.ne 2
.mk
.na
.B ks_ndata
.ad
.RS 17n
.rt
The number of data records in this
.BR kstat .
Set by the
.BR ks_update (9E)
routine.
.RE

.sp
.ne 2
.mk
.na
.B ks_data_size
.ad
.RS 17n
.rt
The amount of data pointed to by
.BR ks_data .
Set by the
.BR ks_update (9E)
routine.
.RE

.sp
.ne 2
.mk
.na
.B ks_update
.ad
.RS 17n
.rt
Pointer to a routine that dynamically updates
.BR kstat .
This is useful
for drivers where the underlying device keeps cheap hardware statistics, but
where extraction is expensive. Instead of constantly keeping the
.B kstat
data section up to date, the driver can supply a
.BR ks_update (9E)
function that updates the
.B kstat
data section on demand. To take
advantage of this feature, set the
.B ks_update
field before calling
.BR kstat_install (9F).
.RE

.sp
.ne 2
.mk
.na
.B ks_private
.ad
.RS 17n
.rt
Is a private field for the driver's use. Often used in
.BR ks_update (9E).

.RE

.sp
.ne 2
.mk
.na
.B ks_lock
.ad
.RS 17n
.rt
Is a pointer to a mutex that protects this
.BR kstat .
.B kstat
data
sections are optionally protected by the per-\fBkstat ks_lock\fR. If
.B ks_lock
is non-\fINULL\fR,
.B kstat
clients (such as
.BR /dev/kstat )
will acquire this lock for all of their operations on that
.BR kstat .
It is up to the
.B kstat
provider to decide whether
guaranteeing consistent data to
.B kstat
clients is sufficiently
important to justify the locking cost. Note, however, that most statistic
updates already occur under one of the provider's mutexes. If the provider
sets
.B ks_lock
to point to that mutex, then
.B kstat
data locking is
free.
.B ks_lock
is really of type
.B (kmutex_t*)
and is declared as
.B (void*)
in the
.B kstat
header. That way, users do not have to be
exposed to all of the kernel's lock-related data structures.
.RE

.SH SEE ALSO
.sp
.LP
.BR kstat_create (9F)
.sp
.LP
.I Writing Device Drivers
