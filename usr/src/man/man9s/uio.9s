'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc., All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH uio 9S "26Mar 2009" "SunOS 5.11" "Data Structures for Drivers"
.SH NAME
uio \- scatter/gather I/O request structure
.SH SYNOPSIS
.LP
.nf
#include <sys/uio.h>
.fi

.SH INTERFACE LEVEL
.sp
.LP
Architecture independent level 1 (DDI/DKI)
.SH DESCRIPTION
.sp
.LP
A
.B uio
structure describes an
.B I/O
request that can be broken up
into different data storage areas (scatter/gather I/O). A request is a list
of
.B iovec
structures (base-length pairs) indicating where in user space
or kernel space the
.B I/O
data is to be read or written.
.sp
.LP
The contents of
.B uio
structures passed to the driver through the
entry points should not be written by the driver. The
.BR uiomove (9F)
function takes care of all overhead related to maintaining the state of the
.B uio
structure.
.sp
.LP
.B uio
structures allocated by the driver should be initialized to zero
before use, by
.BR bzero (9F),
.BR kmem_zalloc (9F),
or an equivalent.
.SH STRUCTURE MEMBERS
.sp
.in +2
.nf
iovec_t      *uio_iov;      /* pointer to start of iovec */
                            /* list for uio struc. */
int          uio_iovcnt;    /* number of iovecs in list */
off_t        uio_offset;    /* 32-bit offset into file where
                            /* data is xferred. See NOTES. */
offset_t     uio_loffset;   /* 64-bit offset into file where */
                            /* data is xferred. See NOTES. */
uio_seg_t    uio_segflg;    /* ID's type of I/O transfer: */
                            /* UIO_SYSSPACE:  kernel <-> kernel */
                            /* UIO_USERSPACE: kernel <-> user */
uint16_t     uio_fmode;     /* file mode flags (not driver setable) */
daddr_t      uio_limit;     /* 32-bit ulimit for file (max. block */
                            /* offset). not driver setable. */
                            /* See NOTES. */
diskaddr_t   uio_llimit;    /* 64-bit ulimit for file (max. block */
                            /* offset). not driver setable. */
                            /* See NOTES */
ssize_t      uio_resid;     /* residual count */
.fi
.in -2

.sp
.LP
The
.B uio_iov
member is a pointer to the beginning of the
.BR iovec (9S)
list for the
.BR uio .
When the
.B uio
structure is
passed to the driver through an entry point, the driver should not set
.BR uio_iov .
When the
.B uio
structure is created by the driver,
.B uio_iov
should be initialized by the driver and not written to
afterward.
.SH SEE ALSO
.sp
.LP
.BR aread (9E),
.BR awrite (9E),
.BR read (9E),
.BR write (9E),
.BR bzero (9F),
.BR kmem_zalloc (9F),
.BR uiomove (9F),
.BR cb_ops (9S),
.BR iovec (9S)
.sp
.LP
.I Writing Device Drivers
.SH NOTES
.sp
.LP
Only one structure,
.B uio_offset
or
.BR uio_loffset ,
should be
interpreted by the driver. Which field the driver interprets is dependent
upon the settings in the
.BR cb_ops "(9S) structure."
.sp
.LP
Only one structure,
.B uio_limit
or
.BR uio_llimit ,
should be
interpreted by the driver. Which field the driver interprets is dependent
upon the settings in the
.BR cb_ops "(9S) structure."
.sp
.LP
When performing
.B I/O
on a seekable device, the driver should not
modify either the \fBuio_offset\fR or the \fBuio_loffset\fR field of the
.B uio
structure.
.B I/O
to such a device is constrained by the
maximum offset value. When performing
.B I/O
on a device on which the
concept of position has no relevance, the driver may preserve the
.B uio_offset
or
.BR uio_loffset ,
perform the
.B I/O
operation, then
restore the \fBuio_offset\fR or \fBuio_loffset\fR to the field's initial
value.
.B I/O
performed to a device in this manner is not constrained.
