'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc., All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_dmae_req 9S "18 Nov 2004" "SunOS 5.11" "Data Structures for Drivers"
.SH NAME
ddi_dmae_req \- DMA engine request structure
.SH SYNOPSIS
.LP
.nf
#include <sys/dma_engine.h>
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris x86 DDI specific (Solaris x86 DDI).
.SH DESCRIPTION
.sp
.LP
A device driver uses the
.B ddi_dmae_req
structure to describe the
parameters for a
.B DMA
channel. This structure contains all the
information necessary to set up the channel, except for the
.B DMA
memory
address and transfer count. The defaults, as specified below, support most
standard devices. Other modes might be desirable for some devices, or to
increase performance. The
.B DMA
engine request structure is passed to
.BR ddi_dmae_prog (9F).
.SH STRUCTURE MEMBERS
.sp
.LP
The
.B ddi_dmae_req
structure contains several members, each of which
controls some aspect of DMA engine operation. The structure members
associated with supported DMA engine options are described here.
.sp
.in +2
.nf
uchar_tder_command;          /* Read / Write *
/uchar_tder_bufprocess;      /* Standard / Chain */
uchar_tder_path;             /* 8 / 16 / 32 */
uchar_tder_cycles;           /* Compat / Type A / Type B / Burst */
uchar_tder_trans;            /* Single / Demand / Block */
ddi_dma_cookie_t*(*proc)();  /* address of nextcookie routine */
void*procparms;              /* parameter for nextcookie call */
.fi
.in -2

.sp
.ne 2
.mk
.na
.B der_command
.ad
.RS 18n
.rt
Specifies what
.B DMA
operation is to be performed. The value
.B DMAE_CMD_WRITE
signifies that data is to be transferred from memory to
the
.B I/O
device. The value
.B DMAE_CMD_READ
signifies that data is
to be transferred from the
.B I/O
device to memory. This field must be
set by the driver before calling
.BR ddi_dmae_prog() .
.RE

.sp
.ne 2
.mk
.na
.B der_bufprocess
.ad
.RS 18n
.rt
On some bus types, a driver can set
.B der_bufprocess
to the value
.B DMAE_BUF_CHAIN
to specify that multiple
.B DMA
cookies will be
given to the
.B DMA
engine for a single
.B I/O
transfer. This action
causes a scatter/gather operation. In this mode of operation, the driver
calls
.B ddi_dmae_prog()
to give the
.B DMA
engine the
.BR DMA
engine request structure and a pointer to the first cookie. The \fBproc\fR
structure member must be set to the address of a driver
.BR nextcookie
routine. This routine takes one argument, specified by the \fBprocparms\fR
structure member, and returns a pointer to a structure of type
.B ddi_dma_cookie_t
that specifies the next cookie for the
.BR I/O
transfer. When the
.B DMA
engine is ready to receive an additional
cookie, the bus nexus driver controlling that
.B DMA
engine calls the
routine specified by the
.B proc
structure member to obtain the next
cookie from the driver. The driver's
.B nextcookie
routine must then
return the address of the next cookie (in static storage) to the bus nexus
routine that called it. If there are no more segments in the current
.B DMA
window, then
.B (*proc)()
must return the
.B NULL
pointer.
.sp
A driver can specify the
.B DMAE_BUF_CHAIN
flag only if the particular
bus architecture supports the use of multiple
.B DMA
cookies in a single
.B I/O
transfer. A bus
.B DMA
engine can support this feature either
with a fixed-length scatter/gather list, or by an interrupt chaining
feature. A driver must determine whether its parent bus nexus supports this
feature by examining the scatter/gather list size returned in the
.B dlim_sgllen
member of the
.B DMA
limit structure returned by the
driver's call to
.BR ddi_dmae_getlim() .
(See
.BR ddi_dma_lim_x86 (9S).)
If the size of the scatter/gather list is 1, then no chaining is available.
The driver must not specify the
.B DMAE_BUF_CHAIN
flag in the
.B ddi_dmae_req
structure it passes to
.BR ddi_dmae_prog() ,
and the
driver need not provide a
.B nextcookie
routine.
.sp
If the size of the scatter/gather list is greater than 1, then \fBDMA\fR
chaining is available, and the driver has two options. Under the first
option, the driver chooses not to use the chaining feature. In this case (a)
the driver must
.B set
the size of the scatter/gather list to 1 before
passing it to the
.B DMA
setup routine, and (b) the driver must not set
the
.B DMAE_BUF_CHAIN
flag.
.sp
Under the second option, the driver chooses to use the chaining feature, in
which case, (a) it should leave the size of the scatter/gather list alone,
and (b) it must set the
.B DMAE_BUF_CHAIN
flag in the
.BR ddi_dmae_req
structure. Before calling
.BR ddi_dmae_prog() ,
the driver must
.I prefetch
cookies by repeatedly calling
.BR ddi_dma_nextseg "(9F) and"
.BR ddi_dma_segtocookie (9F)
until either (1) the end of the DMA window is
reached (\fBddi_dma_nextseg\fR(9F) returns
.BR NULL ),
or (2) the size of
the scatter/gather list is reached, whichever occurs first. These cookies
must be saved by the driver until they are requested by the nexus driver
calling the driver's
.B nextcookie
.RB "routine. The driver's" " nextcookie"
routine must return the prefetched cookies in order, one cookie for each
call to the
.B nextcookie
routine, until the list of prefetched cookies
is exhausted. After the end of the list of cookies is reached, the
.B nextcookie
routine must return the
.B NULL
pointer.
.sp
The size of the scatter/gather list determines how many discontiguous
segments of physical memory can participate in a single
.B DMA
transfer.
.B ISA
bus
.B DMA
engines have no scatter/gather capability, so their
scatter/gather list sizes are 1. Other finite scatter/gather list sizes
would also be possible. For performance reasons, drivers should use the
chaining capability if it is available on their parent bus.
.sp
As described above, a driver making use of
.B DMA
chaining must prefetch
.B DMA
cookies before calling
.BR ddi_dmae_prog() .
The reasons for this
are:
.RS +4
.TP
.ie t \(bu
.el o
First, the driver must have some way to know the total
.B I/O
count with
which to program the
.B I/O
device. This
.B I/O
count must match the
total size of all the
.B DMA
segments that will be chained together into
one
.B DMA
operation. Depending on the size of the scatter/gather list
and the memory position and alignment of the
.B DMA
object, all or just
part of the current
.B DMA
window might be able to participate in a
single
.B I/O
operation. The driver must compute the
.B I/O
count by
adding up the sizes of the prefetched
.B DMA
cookies. The number of
cookies whose sizes are to be summed is the lesser of (a) the size of the
scatter/gather list, or (b) the number of segments remaining in the
window.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Second, on some bus architectures, the driver's
.B nextcookie
routine
can be called from a high-level interrupt routine. If the cookies were not
prefetched, the
.B nextcookie
routine would have to call
.B ddi_dma_nextseg()
and
.B ddi_dma_segtocookie()
from a high-level
interrupt routine, which is not recommended.
.RE
When breaking a
.B DMA
window into segments, the system arranges for the
end of every segment whose number is an integral multiple of the
scatter/gather list size to fall on a device-granularity boundary, as
specified in the
.B dlim_granular
field in the
.BR ddi_dma_lim_x86 (9S)
structure.
.sp
If the scatter/gather list size is 1 (either because no chaining is
available or because the driver does not want to use the chaining feature),
then the total
.B I/O
count for a single
.B DMA
operation is the size
of
.B DMA
segment denoted by the single
.B DMA
cookie that is passed
in the call to
.BR ddi_dmae_prog() .
In this case, the system arranges for
each
.B DMA
segment to be a multiple of the device-granularity size.
.RE

.sp
.ne 2
.mk
.na
.B der_path
.ad
.RS 18n
.rt
Specifies the
.B DMA
transfer size. The default of zero
(\fBDMAE_PATH_DEF\fR) specifies \fBISA\fR compatibility mode. In that mode,
channels 0, 1, 2, and 3 are programmed in 8-bit mode
.RB ( DMAE_PATH_8 ),
and channels 5, 6, and 7 are programmed in 16-bit, count-by-word mode
(\fBDMAE_PATH_16\fR).
.RE

.sp
.ne 2
.mk
.na
.B der_cycles
.ad
.RS 18n
.rt
Specifies the timing mode to be used during
.B DMA
data transfers. The
default of zero (\fBDMAE_CYCLES_1\fR) specifies
.B ISA
compatible timing.
Drivers using this mode must also specify
.B DMAE_TRANS_SNGL
in the
.B der_trans
structure member.
.RE

.sp
.ne 2
.mk
.na
.B der_trans
.ad
.RS 18n
.rt
Specifies the bus transfer mode that the
.B DMA
engine should expect
from the device. The default value of zero (\fBDMAE_TRANS_SNGL\fR) specifies
that the device performs one transfer for each bus arbitration cycle.
Devices that use
.B ISA
compatible timing (specified by a value of zero,
which is the default, in the
.B der_cycles
structure member) should use
the
.B DMAE_TRANS_SNGL
mode.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Architecturex86
.TE

.SH SEE ALSO
.sp
.LP
.BR isa (4),
.BR attributes (5),
.BR ddi_dma_segtocookie (9F),
.BR ddi_dmae (9F),
.BR ddi_dma_lim_x86 (9S),
.BR ddi_dma_req (9S)
