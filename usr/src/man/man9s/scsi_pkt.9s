'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH scsi_pkt 9S "11 Jan 2009" "SunOS 5.11" "Data Structures for Drivers"
.SH NAME
scsi_pkt \- SCSI packet structure
.SH SYNOPSIS
.LP
.nf
#include <sys/scsi/scsi.h>
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH DESCRIPTION
.sp
.LP
A
.B scsi_pkt
structure defines the packet that is allocated by
.BR scsi_init_pkt (9F).
The target driver fills in some information and
passes it to \fBscsi_transport\fR(9F) for execution on the target. The host
bus adapter (\fBHBA\fR) fills in other information as the command is
processed. When the command completes or can be taken no further, the
completion function specified in the packet is called with a pointer to the
packet as its argument. From fields within the packet, the target driver can
determine the success or failure of the command.
.SH STRUCTURE MEMBERS
.sp
.in +2
.nf
opaque_t             pkt_ha_private;           /* private data for
                                                  host adapter */
struct scsi_address  pkt_address;              /* destination packet */
opaque_t             pkt_private;              /* private data
                                                  for target driver */
void                 (*pkt_comp)(struct scsi_pkt *); /* callback */
uint_t               pkt_flags;                /* flags */
int                  pkt_time;                 /* time allotted to
                                                  complete command */
uchar_t              *pkt_scbp;                /* pointer to
                                                  status block */
uchar_t              *pkt_cdbp;                /* pointer to
                                                  command block */
ssize_t              pkt_resid;                /* number of bytes
                                                  not transferred */
uint_t               pkt_state;                /* state of command */
uint_t               pkt_statistics;           /* statistics */
uchar_t              pkt_reason;               /* reason completion
                                                  called */
uint_t               pkt_cdblen;               /* length of pkt_cdbp */
uint_t               pkt_scdblen;              /* length of pkt_scbp */
uint_t               pkt_tgtlen;               /* length of pkt_private */
uint_t               pkt_numcookies;           /* number of DMA cookies */
ddi_dma_cookie_t     *pkt_cookies;             /* array of DMA cookies */
uint_t               pkt_dma_flags;            /* DMA flags */
.fi
.in -2

.sp
.ne 2
.mk
.na
.B pkt_ha_private
.ad
.RS 18n
.rt
Opaque pointer that the HBA uses to reference a private data structure that
transfers
.B scsi_pkt
requests.
.RE

.sp
.ne 2
.mk
.na
.B pkt_address
.ad
.RS 18n
.rt
Initialized by
.BR scsi_init_pkt (9F),
.B pkt_address
records the
intended route and the recipient of a request.
.RE

.sp
.ne 2
.mk
.na
.B pkt_private
.ad
.RS 18n
.rt
Reserved for the use of the target driver,
.B pkt_private
is not changed
by the HBA driver.
.RE

.sp
.ne 2
.mk
.na
.B pkt_comp
.ad
.RS 18n
.rt
Specifies the command completion callback routine. When the host adapter
driver has gone as far as it can in transporting a command to a
.BR SCSI
target, and the command has either run to completion or can go no further
for some other reason, the host adapter driver calls the function pointed to
by this field and passes a pointer to the packet as argument. The callback
routine itself is called from interrupt context and must not sleep or call
any function that might sleep.
.RE

.sp
.ne 2
.mk
.na
.B pkt_flags
.ad
.RS 18n
.rt
Provides additional information about how the target driver expects the
command to be executed. See
.BR "pkt_flag Definitions" .
.RE

.sp
.ne 2
.mk
.na
.B pkt_time
.ad
.RS 18n
.rt
Set by the target driver to represent the maximum time allowed in seconds
for this command to complete. Timeout starts when the command is transmitted
on the
.B SCSI
bus. The
.B pkt_time
may be
.B 0
if no timeout is
required.
.RE

.sp
.ne 2
.mk
.na
.B pkt_scbp
.ad
.RS 18n
.rt
Points to either a struct \fBscsi_status\fR(9S) or, if \fBauto-rqsense\fR
is enabled and
.B pkt_state
includes
.BR STATE_ARQ_DONE ,
a struct
.BR scsi_arq_status .
If
.B scsi_status
.RB "is returned, the" " SCSI"
status byte resulting from the requested command is available. If
.BR scsi_arq_status (9S)
is returned, the sense information is also
available.
.RE

.sp
.ne 2
.mk
.na
.B pkt_cdbp
.ad
.RS 18n
.rt
Points to a kernel-addressable buffer with a length specified by a call to
the proper resource allocation routine,
.BR scsi_init_pkt (9F).
.RE

.sp
.ne 2
.mk
.na
.B pkt_resid
.ad
.RS 18n
.rt
Contains a residual count, either the number of data bytes that have not
been transferred (\fBscsi_transport\fR(9F)) or the number of data bytes for
which DMA resources could not be allocated
.BR scsi_init_pkt "(9F). In the"
latter case, partial DMA resources can be allocated only if
.BR scsi_init_pkt (9F)
is called with the
.B PKT_DMA_PARTIAL
flag.
.RE

.sp
.ne 2
.mk
.na
.B pkt_state
.ad
.RS 18n
.rt
Has bit positions that represent the six most important states that a
.B SCSI
command can go through. See
.BR "pkt_state Definitions" .
.RE

.sp
.ne 2
.mk
.na
.B pkt_statistics
.ad
.RS 18n
.rt
Maintains some transport-related statistics. See \fBpkt_statistics
Definitions\fR.
.RE

.sp
.ne 2
.mk
.na
.B pkt_reason
.ad
.RS 18n
.rt
Contains a completion code that indicates why the
.B pkt_comp
function
was called. See
.BR "pkt_reason Definitions" .
.RE

.sp
.ne 2
.mk
.na
.B pkt_cdblen
.ad
.RS 18n
.rt
Length of buffer pointed to by
.BR pkt_cdbp .
See
.BR tran_setup_pkt .
.RE

.sp
.ne 2
.mk
.na
.B pkt_scblen
.ad
.RS 18n
.rt
Length of buffer pointed to by
.BR pkt_scbp .
See
.BR tran_setup_pkt .
.RE

.sp
.ne 2
.mk
.na
.B pkt_tgtlen
.ad
.RS 18n
.rt
Length of buffer pointed to by
.BR pkt_private .
See
.BR tran_setup_pkt .
.RE

.sp
.ne 2
.mk
.na
.B pkt_numcookies
.ad
.RS 18n
.rt
Length
.B pkt_cookies
array. See
.BR tran_setup_pkt .
.RE

.sp
.ne 2
.mk
.na
.B pkt_cookies
.ad
.RS 18n
.rt
Array of DMA cookies. See
.BR tran_setup_pkt .
.RE

.sp
.ne 2
.mk
.na
.B pkt_dma_flags
.ad
.RS 18n
.rt
DMA flags used, such as
.B DDI_DMA_READ
and
.BR DDI_DMA_WRITE .
See
.BR tran_setup_pkt .
.RE

.sp
.LP
The host adapter driver will update the
.BR pkt_resid ,
.BR pkt_reason ,
.BR pkt_state ,
and
.B pkt_statistics
fields.
.SS "\fBpkt_flags\fR Definitions"
.sp
.LP
The appropriate definitions for the structure member
.B pkt_flags
are:
.sp
.ne 2
.mk
.na
.B FLAG_NOINTR
.ad
.RS 30n
.rt
Run command with no command completion callback. Command is complete upon
return from
.BR scsi_transport (9F).
.RE

.sp
.ne 2
.mk
.na
.B FLAG_NODISCON
.ad
.RS 30n
.rt
Run command without disconnects.
.RE

.sp
.ne 2
.mk
.na
.B FLAG_NOPARITY
.ad
.RS 30n
.rt
Run command without parity checking.
.RE

.sp
.ne 2
.mk
.na
.B FLAG_HTAG
.ad
.RS 30n
.rt
Run command as the head-of-queue-tagged command.
.RE

.sp
.ne 2
.mk
.na
.B FLAG_OTAG
.ad
.RS 30n
.rt
Run command as an ordered-queue-tagged command.
.RE

.sp
.ne 2
.mk
.na
.B FLAG_STAG
.ad
.RS 30n
.rt
Run command as a simple-queue-tagged command.
.RE

.sp
.ne 2
.mk
.na
.B FLAG_SENSING
.ad
.RS 30n
.rt
Indicates a request sense command.
.RE

.sp
.ne 2
.mk
.na
.B FLAG_HEAD
.ad
.RS 30n
.rt
Place command at the head of the queue.
.RE

.sp
.ne 2
.mk
.na
.B FLAG_RENEGOTIATE_WIDE_SYNC
.ad
.RS 30n
.rt
Before transporting this command, the host adapter should initiate the
renegotiation of wide mode and synchronous transfer speed. Normally, the HBA
driver manages negotiations but under certain conditions forcing a
renegotiation is appropriate. Renegotiation is recommended before Request
Sense and Inquiry commands. Refer to the SCSI 2 standard, sections 6.6.21
and 6.6.23.
.sp
This flag should not be set for every packet as this will severely impact
performance.
.RE

.SS "\fBpkt_reason\fR Definitions"
.sp
.LP
The appropriate definitions for the structure member
.BR pkt_reason
are:
.sp
.ne 2
.mk
.na
.B CMD_CMPLT
.ad
.RS 20n
.rt
No transport errors; normal completion.
.RE

.sp
.ne 2
.mk
.na
.B CMD_INCOMPLETE
.ad
.RS 20n
.rt
Transport stopped with abnormal state.
.RE

.sp
.ne 2
.mk
.na
.B CMD_DMA_DERR
.ad
.RS 20n
.rt
\fBDMA\fRd irection error.
.RE

.sp
.ne 2
.mk
.na
.B CMD_TRAN_ERR
.ad
.RS 20n
.rt
Unspecified transport error.
.RE

.sp
.ne 2
.mk
.na
.B CMD_RESET
.ad
.RS 20n
.rt
.B SCSI
bus reset destroyed command.
.RE

.sp
.ne 2
.mk
.na
.B CMD_ABORTED
.ad
.RS 20n
.rt
Command transport aborted on request.
.RE

.sp
.ne 2
.mk
.na
.B CMD_TIMEOUT
.ad
.RS 20n
.rt
Command timed out.
.RE

.sp
.ne 2
.mk
.na
.B CMD_DATA_OVR
.ad
.RS 20n
.rt
Data overrun.
.RE

.sp
.ne 2
.mk
.na
.B CMD_CMD_OVR
.ad
.RS 20n
.rt
Command overrun.
.RE

.sp
.ne 2
.mk
.na
.B CMD_STS_OVR
.ad
.RS 20n
.rt
Status overrun.
.RE

.sp
.ne 2
.mk
.na
.B CMD_BADMSG
.ad
.RS 20n
.rt
Message not command complete.
.RE

.sp
.ne 2
.mk
.na
.B CMD_NOMSGOUT
.ad
.RS 20n
.rt
Target refused to go to message out phase.
.RE

.sp
.ne 2
.mk
.na
.B CMD_XID_FAIL
.ad
.RS 20n
.rt
Extended identify message rejected.
.RE

.sp
.ne 2
.mk
.na
.B CMD_IDE_FAIL
.ad
.RS 20n
.rt
"Initiator Detected Error" message rejected.
.RE

.sp
.ne 2
.mk
.na
.B CMD_ABORT_FAIL
.ad
.RS 20n
.rt
Abort message rejected.
.RE

.sp
.ne 2
.mk
.na
.B CMD_REJECT_FAIL
.ad
.RS 20n
.rt
Reject message rejected.
.RE

.sp
.ne 2
.mk
.na
.B CMD_NOP_FAIL
.ad
.RS 20n
.rt
"No Operation" message rejected.
.RE

.sp
.ne 2
.mk
.na
.B CMD_PER_FAIL
.ad
.RS 20n
.rt
"Message Parity Error" message rejected.
.RE

.sp
.ne 2
.mk
.na
.B CMD_BDR_FAIL
.ad
.RS 20n
.rt
"Bus Device Reset" message rejected.
.RE

.sp
.ne 2
.mk
.na
.B CMD_ID_FAIL
.ad
.RS 20n
.rt
Identify message rejected.
.RE

.sp
.ne 2
.mk
.na
.B CMD_UNX_BUS_FREE
.ad
.RS 20n
.rt
Unexpected bus free phase.
.RE

.sp
.ne 2
.mk
.na
.B CMD_TAG_REJECT
.ad
.RS 20n
.rt
Target rejected the tag message.
.RE

.sp
.ne 2
.mk
.na
.B CMD_DEV_GONE
.ad
.RS 20n
.rt
The device has been removed.
.RE

.SS "pkt_state Definitions"
.sp
.LP
The appropriate definitions for the structure member
.B pkt_state
are:
.sp
.ne 2
.mk
.na
.B STATE_GOT_BUS
.ad
.RS 22n
.rt
Bus arbitration succeeded.
.RE

.sp
.ne 2
.mk
.na
.B STATE_GOT_TARGET
.ad
.RS 22n
.rt
Target successfully selected.
.RE

.sp
.ne 2
.mk
.na
.B STATE_SENT_CMD
.ad
.RS 22n
.rt
Command successfully sent.
.RE

.sp
.ne 2
.mk
.na
.B STATE_XFERRED_DATA
.ad
.RS 22n
.rt
Data transfer took place.
.RE

.sp
.ne 2
.mk
.na
.B STATE_GOT_STATUS
.ad
.RS 22n
.rt
Status received.
.RE

.sp
.ne 2
.mk
.na
.B STATE_ARQ_DONE
.ad
.RS 22n
.rt
The command resulted in a check condition and the host adapter driver
executed an automatic request sense command.
.RE

.sp
.ne 2
.mk
.na
.B STATE_XARQ_DONE
.ad
.RS 22n
.rt
The command requested in extra sense data using a
.B PKT_XARQ
flag got a
check condition. The host adapter driver was able to successfully request
and return this. The
.B scsi_pkt.pkt_scbp->sts_rqpkt_resid
returns the
sense data residual based on the
.I statuslen
parameter of the
.BR scsi_init_pkt (9F)
call. The sense data begins at
.BR scsi_pkt.pkt_scbp->sts_sensedata .
.RE

.SS "pkt_statistics Definitions"
.sp
.LP
The definitions that are appropriate for the structure member
.B pkt_statistics
are:
.sp
.ne 2
.mk
.na
.B STAT_DISCON
.ad
.RS 18n
.rt
Device disconnect.
.RE

.sp
.ne 2
.mk
.na
.B STAT_SYNC
.ad
.RS 18n
.rt
Command did a synchronous data transfer.
.RE

.sp
.ne 2
.mk
.na
.B STAT_PERR
.ad
.RS 18n
.rt
.B SCSI
parity error.
.RE

.sp
.ne 2
.mk
.na
.B STAT_BUS_RESET
.ad
.RS 18n
.rt
Bus reset.
.RE

.sp
.ne 2
.mk
.na
.B STAT_DEV_RESET
.ad
.RS 18n
.rt
Device reset.
.RE

.sp
.ne 2
.mk
.na
.B STAT_ABORTED
.ad
.RS 18n
.rt
Command was aborted.
.RE

.sp
.ne 2
.mk
.na
.B STAT_TIMEOUT
.ad
.RS 18n
.rt
Command timed out.
.RE

.SH SEE ALSO
.sp
.LP
.BR tran_init_pkt (9E),
.BR tran_setup_pkt (9E),
.BR scsi_arq_status (9S),
.BR scsi_init_pkt (9F),
.BR scsi_transport (9F),
.BR scsi_status (9S),
.BR scsi_hba_pkt_comp (9F)
.sp
.LP
.I Writing Device Drivers
.SH NOTES
.sp
.LP
HBA drivers should signal
.B scsi_pkt
completion by calling
.BR scsi_hba_pkt_comp (9F).
This is mandatory for HBA drivers that
implement \fBtran_setup_pkt\fR(9E). Failure to comply results in undefined
behavior.
