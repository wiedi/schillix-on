'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc., All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH cb_ops 9S "24 Apr 2008" "SunOS 5.11" "Data Structures for Drivers"
.SH NAME
cb_ops \- character/block entry points structure
.SH SYNOPSIS
.LP
.nf
#include <sys/conf.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH DESCRIPTION
.sp
.LP
The
.B cb_ops
structure contains all entry points for drivers that
support both character and block entry points. All leaf device drivers that
support direct user process access to a device should declare a
.BR cb_ops
structure.
.sp
.LP
All drivers that safely allow multiple threads of execution in the driver
at the same time must set the
.B D_MP
flag in the
.B cb_flag
field.
See
.BR open (9E).
.sp
.LP
If the driver properly handles 64-bit offsets, it should also set the
.B D_64BIT
flag in the
.B cb_flag
field. This specifies that the
driver will use the
.B uio_loffset
field of the
.BR uio (9S)
structure.
.sp
.LP
If the driver returns
.B EINTR
from
.BR open "(9E), it should also set"
the
.B D_OPEN_RETURNS_EINTR
flag in the
.B cb_flag
field. This lets
the framework know that it is safe for the driver to return
.B EINTR
when
waiting, to provide exclusion for a last-reference
.BR close (9E)
call to
complete before calling
.BR open (9E).
.sp
.LP
The
.BR mt-streams (9F)
function describes other flags that can be set in
the
.B cb_flag
field.
.sp
.LP
The
.B cb_rev
is the
.B cb_ops
structure revision number. This field
must be set to
.BR CB_REV .
.sp
.LP
Non-\fBSTREAMS\fR drivers should set
.B cb_str
to
.IR NULL .
.sp
.LP
The following \fBDDI\fR/\fBDKI\fR or \fBDKI\fR-only or \fBDDI\fR-only
functions are provided in the character/block driver operations structure.
.sp

.sp
.TS
tab();
cw(1.17i) cw(1.36i) cw(1.25i) cw(1.72i)
lw(1.17i) lw(1.36i) lw(1.25i) lw(1.72i)
.
block/charFunctionDescription
_
b/cXXopen\fBDDI\fR/\fBDKI\fR
b/cXXclose\fBDDI\fR/\fBDKI\fR
bXXstrategyDDI/DKI
bXXprintDDI/DKI
bXXdumpDDI(Sun)
cXXreadDDI/DKI
cXXwriteDDI/DKI
cXXioctlDDI/DKI
cXXdevmapDDI(Sun)
cXXmmapDKI
cXXsegmapDKI
cXXchpollDDI/DKI
cXXprop_opDDI(Sun)
cXXareadDDI(Sun)
cXXawriteDDI(Sun)
.TE

.SH STRUCTURE MEMBERS
.sp
.in +2
.nf
int  (*cb_open)(dev_t *devp, int flag, int otyp, cred_t *credp);
int  (*cb_close)(dev_t dev, int flag, int otyp, cred_t *credp);
int  (*cb_strategy)(struct buf *bp);
int  (*cb_print)(dev_t dev, char *str);
int  (*cb_dump)(dev_t dev, caddr_t addr, daddr_t blkno, int nblk);
int  (*cb_read)(dev_t dev, struct uio *uiop, cred_t *credp);
int  (*cb_write)(dev_t dev, struct uio *uiop, cred_t *credp);
int  (*cb_ioctl)(dev_t dev, int cmd, intptr_t arg, int mode,
        cred_t *credp, int *rvalp);
int  (*cb_devmap)(dev_t dev, devmap_cookie_t dhp, offset_t off,
        size_t len, size_t *maplen, uint_t model);
int  (*cb_mmap)(dev_t dev, off_t off, int prot);
int  (*cb_segmap)(dev_t dev, off_t off, struct as *asp,
        caddr_t *addrp, off_t len, unsigned int prot,
        unsigned int maxprot, unsigned int flags, cred_t *credp);
int  (*cb_chpoll)(dev_t dev, short events, int anyyet,
        short *reventsp, struct pollhead **phpp);
int  (*cb_prop_op)(dev_t dev, dev_info_t *dip,
        ddi_prop_op_t prop_op, int mod_flags,
        char *name, caddr_t valuep, int *length);
struct streamtab *cb_str;   /* streams information */
int  cb_flag;
int  cb_rev;
int  (*cb_aread)(dev_t dev, struct aio_req *aio, cred_t *credp);
int  (*cb_awrite)(dev_t dev, struct aio_req *aio, cred_t *credp);
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR aread (9E),
.BR awrite (9E),
.BR chpoll (9E),
.BR close (9E),
.BR dump (9E),
.BR ioctl (9E),
.BR mmap (9E),
.BR open (9E),
.BR print (9E),
.BR prop_op (9E),
.BR read (9E),
.BR segmap (9E),
.BR strategy (9E),
.BR write (9E),
.BR nochpoll (9F),
.BR nodev (9F),
.BR nulldev (9F),
.BR dev_ops (9S),
.BR qinit (9S)
.sp
.LP
.I Writing Device Drivers
.sp
.LP
.I STREAMS Programming Guide
