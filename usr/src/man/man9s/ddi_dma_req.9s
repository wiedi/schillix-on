'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc., All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_dma_req 9S "12 Oct 2005" "SunOS 5.11" "Data Structures for Drivers"
.SH NAME
ddi_dma_req \- DMA Request structure
.SH SYNOPSIS
.LP
.nf
#include <sys/ddidmareq.h>
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI). This interface is obsolete.
.SH DESCRIPTION
.sp
.LP
A
.B ddi_dma_req
structure describes a request for
.B DMA
resources.
A driver can use it to describe forms of allocations and ways to allocate
\fBDMA\fR resources for a \fBDMA\fR request.
.SH STRUCTURE MEMBERS
.sp
.in +2
.nf
ddi_dma_lim_t  *dmar_limits;       /* Caller's dma engine
                                      constraints */
uint_t         dmar_flags;         /* Contains info for
                                      mapping routines */
int            (*dmar_fp)(caddr_t);/* Callback function */
caddr_t        dmar_arg;           /* Callback function's argument */
ddi_dma_obj_t  dmar_object;        /* Descrip. of  object
                                      to be mapped */
.fi
.in -2

.sp
.LP
For the definition of the
.B DMA
limits structure, which
\fBdmar_limits\fR points to, see \fBddi_dma_lim_sparc\fR(9S) or
.BR ddi_dma_lim_x86 (9S).
.sp
.LP
Valid values for \fBdmar_flags\fR are:
.sp
.in +2
.nf
DDI_DMA_WRITE         /* Direction memory --> IO */
DDI_DMA_READ          /* Direction IO --> memory */
DDI_DMA_RDWR          /* Both read and write */
DDI_DMA_REDZONE       /* Establish MMU redzone at end of mapping */
DDI_DMA_PARTIAL       /* Partial mapping is allowed */
DDI_DMA_CONSISTENT    /* Byte consistent access wanted */
DDI_DMA_SBUS_64BIT    /* Use 64 bit capability on SBus */
.fi
.in -2

.sp
.LP
.BR DDI_DMA_WRITE ,
.BR DDI_DMA_READ ,
and
.B DDI_DMA_RDWR
describe
the intended direction of the
.B DMA
transfer. Some implementations might
explicitly disallow
.BR DDI_DMA_RDWR .
.sp
.LP
\fBDDI_DMA_REDZONE\fR asks the system to establish a protected  \fBred
zone\fR after the object. The \fBDMA\fR resource allocation functions do not
guarantee the success of this request, as some implementations might not
have the hardware ability to support it.
.sp
.LP
\fBDDI_DMA_PARTIAL\fR lets the system know that the caller can accept
partial mapping. That is, if the size of the object exceeds the resources
available, the system allocates only a portion of the object and returns
status indicating this partial allocation. At a later point, the caller can
use
.BR ddi_dma_curwin "(9F) and"
.BR ddi_dma_movwin (9F)
to change the
valid portion of the object that has resources allocated.
.sp
.LP
\fBDDI_DMA_CONSISTENT\fR gives a hint to the system that the object should
be mapped for
.B "byte consistent"
access. Normal data transfers usually
use a
.B streaming
mode of operation. They start at a specific point,
transfer a fairly large amount of data sequentially, and then stop, usually
on an aligned boundary. Control mode data transfers for memory-resident
device control blocks (for example, Ethernet message descriptors) do not
access memory in such a sequential fashion. Instead, they tend to modify a
few words or bytes, move around and maybe modify a few more.
.sp
.LP
Many machine implementations make this non-sequential memory access
difficult to control in a generic and seamless fashion. Therefore, explicit
synchronization steps using \fBddi_dma_sync\fR(9F) or \fBddi_dma_free\fR(9F)
are required to make the view of a memory object shared between a \fBCPU
\fRand a \fBDMA\fR device consistent. However, proper use of the
\fBDDI_DMA_CONSISTENT\fR flag can create a condition in which a system will
pick resources in a way that makes these synchronization steps are as
efficient as possible.
.sp
.LP
\fBDDI_DMA_SBUS_64BIT\fR tells the system that the device can perform
64-bit transfers on a 64-bit SBus. If the SBus does not support 64-bit data
transfers, data will be transferred in 32-bit mode.
.sp
.LP
The callback function specified by the member \fBdmar_fp\fR indicates how a
caller to one of the
.B DMA
resource allocation functions wants to deal
with the possibility of resources not being available. (See
.BR ddi_dma_setup (9F).)
If \fBdmar_fp\fR is set to
.BR DDI_DMA_DONTWAIT ,
then the caller does not care if the allocation fails, and can deal with an
allocation failure appropriately. Setting \fBdmar_fp\fR to
\fBDDI_DMA_SLEEP\fR indicates the caller wants to have the allocation
routines wait for resources to become available. If any other value is set,
and a
.B DMA
resource allocation fails, this value is assumed to be a
function to call later, when resources become available. When the specified
function is called, it is passed the value set in the structure member
.BR dmar_arg .
The specified callback function
.B must
return either:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 5n
.rt
Indicating that it attempted to allocate a
.B DMA
resource but failed to
do so, again, in which case the callback function will be put back on a list
to be called again later.
.RE

.sp
.ne 2
.mk
.na
.B 1
.ad
.RS 5n
.rt
Indicating either success at allocating
.B DMA
resources or that it no
longer wants to retry.
.RE

.sp
.LP
The callback function is called in interrupt context. Therefore, only
system functions and contexts that are accessible from interrupt context are
available. The callback function must take whatever steps necessary to
protect its critical resources, data structures, and queues.
.sp
.LP
It is possible that a call to \fBddi_dma_free\fR(9F), which frees \fBDMA\fR
resources, might cause a callback function to be called and, unless some
care is taken, an undesired recursion can occur. This can cause an undesired
recursive
.BR mutex_enter "(9F), which makes the system panic."
.SS "dmar_object Structure"
.sp
.LP
The
.B dmar_object
member of the
.B ddi_dma_req
structure is itself a
complex and extensible structure:
.sp
.in +2
.nf
uint_t            dmao_size;     /* size, in bytes, of the object */
ddi_dma_atyp_t    dmao_type;     /* type of object */
ddi_dma_aobj_t    dmao_obj;      /* the object described */
.fi
.in -2

.sp
.LP
The
.B dmao_size
element is the size, in bytes, of the object resources
allocated for
.BR DMA .
.sp
.LP
The
.B dmao_type
element selects the kind of object described by
.BR dmao_obj .
It can be set to
.BR DMA_OTYP_VADDR ,
indicating virtual
addresses.
.sp
.LP
The last element,
.BR dmao_obj ,
consists of the virtual address type:
.sp
.in +2
.nf
struct v_address virt_obj;
.fi
.in -2

.sp
.LP
It is specified as:
.sp
.in +2
.nf
struct v_address {
      caddr_t      v_addr;   /* base virtual address */
      struct as    *v_as;    /* pointer to address space */
      void         *v_priv;  /* priv data for shadow I/O */
};
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityObsolete
.TE

.SH SEE ALSO
.sp
.LP
.BR ddi_dma_addr_setup (9F),
.BR ddi_dma_buf_setup (9F),
.BR ddi_dma_curwin (9F),
.BR ddi_dma_free (9F),
.BR ddi_dma_movwin (9F),
.BR ddi_dma_setup (9F),
.BR ddi_dma_sync (9F),
.BR mutex (9F)
.sp
.LP
.I Writing Device Drivers
