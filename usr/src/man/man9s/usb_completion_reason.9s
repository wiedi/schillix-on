'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc., All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH usb_completion_reason 9S "5 Jan 2004" "SunOS 5.11" "Data Structures for Drivers"
.SH NAME
usb_completion_reason \- USB completion reason definitions
.SH SYNOPSIS
.LP
.nf
#include <sys/usb/usba.h>
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH DESCRIPTION
.sp
.LP
If an error occurs during execution of a USB request, the USBA framework
calls a client driver's exception callback handler to relay what happened. The
host controller reports transport errors to the exception callback handler
through the handler's request argument's completion reason (usb_cr_t) field. A
completion reason of USB_CR_OK means the transfer completed with no errors
detected.
.sp
.LP
The usb_cr_t enumerated type contains the following definitions:
.sp
.ne 2
.mk
.na
.B USB_CR_OK
.ad
.RS 27n
.rt
The transfer completed without any errors being detected.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_CRC
.ad
.RS 27n
.rt
CRC error was detected.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_BITSTUFFING
.ad
.RS 27n
.rt
Bit stuffing violation was detected.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_DATA_TOGGLE_MM
.ad
.RS 27n
.rt
Data toggle packet identifier did not match expected value.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_STALL
.ad
.RS 27n
.rt
The device endpoint indicated that it is stalled. If autoclearing is enabled
for the request (request attributes has USB_ATTRS_AUTOCLEARING set), check the
callback flags (usb_cb_flags_t) in the callback handler to determine whether
the stall is a functional stall (USB_CB_FUNCTIONAL_STALL) or a protocol stall
(USB_CB_PROTOCOL_STALL). Please see \fBusb_request_attributes\fR(9S) for more
information on autoclearing.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_DEV_NOT_RESP
.ad
.RS 27n
.rt
Host controller timed out while waiting for device to respond.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_PID_CHECKFAILURE
.ad
.RS 27n
.rt
Check bits on the packet identifier returned from the device were
not as expected.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_UNEXP_PID
.ad
.RS 27n
.rt
Packet identifier received was not valid.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_DATA_OVERRUN
.ad
.RS 27n
.rt
Amount of data returned exceeded either the maximum packet size of the
endpoint or the remaining buffer size.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_DATA_UNDERRUN
.ad
.RS 27n
.rt
Amount of data returned was not sufficient to fill the specified buffer and
the USB_ATTRS_SHORT_XFER_OK attribute was not set. Please see
.BR usb_request_attributes (9S)
for more information on allowance of short
transfers.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_BUFFER_OVERRUN
.ad
.RS 27n
.rt
A device sent data faster than the system could digest it.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_BUFFER_UNDERRUN
.ad
.RS 27n
.rt
The host controller could not get data from the system fast enough to keep up
with the required USB data rate.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_TIMEOUT
.ad
.RS 27n
.rt
A timeout specified in a control, bulk, or one-time interrupt request has
expired.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_NOT_ACCESSED
.ad
.RS 27n
.rt
Request was not accessed nor processed by the host controller.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_NO_RESOURCES
.ad
.RS 27n
.rt
No resources were available to continue servicing a periodic interrupt or
isochronous request.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_STOPPED_POLLING
.ad
.RS 27n
.rt
Servicing of the current periodic request cannot continue because polling on
an interrupt-IN or isochronous-IN endpoint has stopped.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_PIPE_CLOSING
.ad
.RS 27n
.rt
Request was not started because the pipe to which it was queued was closing
or closed.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_PIPE_RESET
.ad
.RS 27n
.rt
Request was not started because the pipe to which it was queued was reset.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_NOT_SUPPORTED
.ad
.RS 27n
.rt
Request or command is not supported.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_FLUSHED
.ad
.RS 27n
.rt
Request was not completed because the pipe to which it was queued went to an
error state, became stalled, was reset or was closed.
.RE

.sp
.ne 2
.mk
.na
.B USB_CR_HC_HARDWARE_ERR
.ad
.RS 27n
.rt
Request could not be completed due to a general host controller
hardware error.
.RE

.SH ATTRIBUTES
.sp
.LP
See attributes(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
ArchitecturePCI-based systems
_
Interface stabilityCommitted
_
AvailabilitySUNWusb, SUNWusbu
.TE

.SH SEE ALSO
.sp
.LP
.BR usb_alloc_request (9F),
.BR usb_pipe_bulk_xfer (9F),
.BR usb_pipe_ctrl_xfer (9F),
.BR usb_pipe_intr_xfer (9F),
.BR usb_pipe_isoc_xfer (9F),
.BR usb_bulk_request (9S),
.BR usb_ctrl_request (9S),
.BR usb_intr_request (9S),
.BR usb_isoc_request (9S).
