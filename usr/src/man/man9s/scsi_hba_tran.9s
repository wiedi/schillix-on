'\" te
.\" Copyright (c) 2006 Sun Microsystems, Inc.,  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH scsi_hba_tran 9S "30 May 2006" "SunOS 5.11" "Data Structures for Drivers"
.SH NAME
scsi_hba_tran \- SCSI Host Bus Adapter (HBA) driver transport vector
structure
.SH SYNOPSIS
.LP
.nf
#include <sys/scsi/scsi.h>
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris architecture specific (Solaris DDI).
.SH DESCRIPTION
.sp
.LP
A
.B scsi_hba_tran_t
structure defines vectors that an
.B HBA
driver
exports to
.B SCSA
interfaces so that
.B HBA
specific functions can be
executed.
.SH STRUCTURE MEMBERS
.sp
.in +2
.nf
dev_info_t          *tran_hba_dip;          /* HBAs dev_info
                                                pointer */
void                *tran_hba_private;      /* HBA softstate */
void                *tran_tgt_private;      /* HBA target private
                                                pointer */
struct scsi_device  *tran_sd;               /* scsi_device */
int                 (*tran_tgt_init)( );    /* Transport target */
                                                Initialization */
int                 (*tran_tgt_probe)( );   /* Transport target
                                                probe */
void                (*tran_tgt_free)( );    /* Transport target
                                                free */
int                 (*tran_start)( );       /* Transport start */
int                 (*tran_reset)( );       /* Transport reset */
int                 (*tran_abort)( );       /* Transport abort */
int                 (*tran_getcap)( );      /* Capability
                                                retrieval */
int                 (*tran_setcap)( );      /* Capability
                                                establishment */
struct scsi_pkt     *(*tran_init_pkt)( );   /* Packet and DMA
                                                allocation */
void                (*tran_destroy_pkt)( ); /* Packet and DMA */
                                                deallocation */
void                (*tran_dmafree)( );     /* DMA deallocation */
void                (*tran_sync_pkt)( );    /* Sync DMA */
void                (*tran_reset_notify)( );/* Bus reset
                                                notification */
int                 (*tran_bus_reset)( );   /* Reset bus only */
int                 (*tran_quiesce)( );     /* Quiesce a bus */
int                 (*tran_unquiesce)( );   /* Unquiesce a bus */
int                 (*tran_setup_pkt)( );   /* Initialization
                                                for pkt */
int                 (*tran_teardown_pkt)( );/* Deallocation */
int                 (*tran_pkt_constructor) ( );
                                               /* Constructor */
int                 (*tran_pkt_destructor) ( );
                                              /* Destructor */
int                 tran_hba_len;            /* # bytes for
                                                 pkt_ha_private */
int                 tran_interconnect_type;  /* transport
                                                 interconnect */
.fi
.in -2

.sp
.ne 2
.mk
.na
.B tran_hba_dip
.ad
.RS 26n
.rt
.B dev_info
pointer to the
.B HBA
that supplies the
.B scsi_hba_tran
structure.
.RE

.sp
.ne 2
.mk
.na
.B tran_hba_private
.ad
.RS 26n
.rt
Private pointer that the
.B HBA
driver can use to refer to the device's
soft state structure.
.RE

.sp
.ne 2
.mk
.na
.B tran_tgt_private
.ad
.RS 26n
.rt
Private pointer that the
.B HBA
can use to refer to per-target specific
data. This field can only be used when the
.B SCSI_HBA_TRAN_CLONE
flag is
specified in
.BR scsi_hba_attach "(9F). In this case, the"
.B HBA
driver
must initialize this field in its
.BR tran_tgt_init "(9E) entry point."
.RE

.sp
.ne 2
.mk
.na
.B tran_sd
.ad
.RS 26n
.rt
Pointer to
.BR scsi_device (9S)
structure if cloning; otherwise
.IR NULL .
.RE

.sp
.ne 2
.mk
.na
.B tran_tgt_init
.ad
.RS 26n
.rt
Function entry that allows per-target
.B HBA
initialization, if
necessary.
.RE

.sp
.ne 2
.mk
.na
.B tran_tgt_probe
.ad
.RS 26n
.rt
Function entry that allows per-target
.BR scsi_probe (9F)
customization,
if necessary.
.RE

.sp
.ne 2
.mk
.na
.B tran_tgt_free
.ad
.RS 26n
.rt
Function entry that allows per-target
.B HBA
deallocation, if
necessary.
.RE

.sp
.ne 2
.mk
.na
.B tran_start
.ad
.RS 26n
.rt
Function entry that starts a
.B SCSI
command execution on the
.BR HBA
hardware.
.RE

.sp
.ne 2
.mk
.na
.B tran_reset
.ad
.RS 26n
.rt
Function entry that resets a
.B SCSI
bus or target device.
.RE

.sp
.ne 2
.mk
.na
.B tran_abort
.ad
.RS 26n
.rt
Function entry that aborts one
.B SCSI
command, or all pending
.B SCSI
commands.
.RE

.sp
.ne 2
.mk
.na
.B tran_getcap
.ad
.RS 26n
.rt
Function entry that retrieves a
.B SCSI
capability.
.RE

.sp
.ne 2
.mk
.na
.B tran_setcap
.ad
.RS 26n
.rt
Function entry that sets a
.B SCSI
capability.
.RE

.sp
.ne 2
.mk
.na
.B tran_init_pkt
.ad
.RS 26n
.rt
Function entry that allocates a
.B scsi_pkt
structure.
.RE

.sp
.ne 2
.mk
.na
.B tran_destroy_pkt
.ad
.RS 26n
.rt
Function entry that frees a
.B scsi_pkt
structure allocated by
.BR tran_init_pkt .
.RE

.sp
.ne 2
.mk
.na
.B tran_dmafree
.ad
.RS 26n
.rt
Function entry that frees
.B DMA
resources that were previously
allocated by
.BR tran_init_pkt .
Not called for
.B HBA
drivers that
provide a
.B tran_setup_pkt
entry point.
.RE

.sp
.ne 2
.mk
.na
.B tran_sync_pkt
.ad
.RS 26n
.rt
Synchronizes data in
.I pkt
after a data transfer has been completed.
Not called for
.B HBA
drivers that provide a
.B tran_setup_pkt
entry
point.
.RE

.sp
.ne 2
.mk
.na
.B tran_reset_notify
.ad
.RS 26n
.rt
Function entry that allows a target to register a bus reset notification
request with the
.B HBA
driver.
.RE

.sp
.ne 2
.mk
.na
.B tran_bus_reset
.ad
.RS 26n
.rt
Function entry that resets the
.B SCSI
bus without resetting targets.
.RE

.sp
.ne 2
.mk
.na
.B tran_quiesce
.ad
.RS 26n
.rt
Function entry that waits for all outstanding commands to complete and
blocks (or queues) any
.B I/O
requests issued.
.RE

.sp
.ne 2
.mk
.na
.B tran_unquiesce
.ad
.RS 26n
.rt
Function entry that allows
.B I/O
activities to resume on the
.BR SCSI
bus.
.RE

.sp
.ne 2
.mk
.na
.B tran_setup_pkt
.ad
.RS 26n
.rt
Optional entry point that initializes a
.B scsi_pkt
structure. See
.BR tran_setup_pkt (9E).
.RE

.sp
.ne 2
.mk
.na
.B tran_teardown_pkt
.ad
.RS 26n
.rt
Entry point that releases resources allocated by
.BR tran_setup_pkt .
.RE

.sp
.ne 2
.mk
.na
.B tran_pkt_constructor
.ad
.RS 26n
.rt
Additional optional entry point that performs the actions of a constructor.
See
.BR tran_setup_pkt (9E).
.RE

.sp
.ne 2
.mk
.na
.B tran_pkt_destructor
.ad
.RS 26n
.rt
Additional optional entry point that performs the actions of a destructor.
See
.BR tran_setup_pkt (9E).
.RE

.sp
.ne 2
.mk
.na
.B tran_hba_len
.ad
.RS 26n
.rt
Size of
.BR pkt_ha_private .
See
.BR tran_setup_pkt (9E).
.RE

.sp
.ne 2
.mk
.na
.B tran_interconnect_type
.ad
.RS 26n
.rt
Integer value that denotes the interconnect type of the transport as
defined in the
.B services.h
header file.
.RE

.SH SEE ALSO
.sp
.LP
.BR tran_abort (9E),
.BR tran_bus_reset (9E),
.BR tran_destroy_pkt (9E),
.BR tran_dmafree (9E),
.BR tran_getcap (9E),
.BR tran_init_pkt (9E),
.BR tran_quiesce (9E),
.BR tran_reset (9E),
.BR tran_reset_notify (9E),
.BR tran_setcap (9E),
.BR tran_setup_pkt (9E),
.BR tran_start (9E),
.BR tran_sync_pkt (9E),
.BR tran_tgt_free (9E),
.BR tran_tgt_init (9E),
.BR tran_tgt_probe (9E),
.BR tran_unquiesce (9E),
.BR ddi_dma_sync (9F),
.BR scsi_hba_attach (9F),
.BR scsi_hba_pkt_alloc (9F),
.BR scsi_hba_pkt_free (9F),
.BR scsi_probe (9F),
.BR scsi_device (9S),
.BR scsi_pkt (9S)
.sp
.LP
.I Writing Device Drivers
