'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH queue 9S "10 Jan 2006" "SunOS 5.11" "Data Structures for Drivers"
.SH NAME
queue \- STREAMS queue structure
.SH SYNOPSIS
.LP
.nf
#include <sys/stream.h>
.fi

.SH INTERFACE LEVEL
.sp
.LP
Architecture independent level 1 (DDI/DKI)
.SH DESCRIPTION
.sp
.LP
A
.B STREAMS
driver or module consists of two
.B queue
structures:
.I read
for upstream processing and
.I write
for downstream
processing. The queue structure is the major building block of a stream.
.SS "\fBqueue\fR Structure Members"
.sp
.LP
The
.B queue
structure is defined as type
.BR queue_t .
The structure
can be accessed at any time from inside a
.B STREAMS
entry point
associated with that queue.
.sp
.in +2
.nf
struct    qinit   *q_qinfo;     /* queue processing procedure */
struct    msgb    *q_first;     /* first message in queue */
struct    msgb    *q_last;      /* last message in queue */
struct    queue   *q_next;      /* next queue in stream */
void              *q_ptr;       /* module-specific data */
size_t             q_count;     /* number of bytes on queue */
uint_t             q_flag;      /* queue state */
ssize_t            q_minpsz;    /* smallest packet OK on queue */
ssize_t            q_maxpsz;    /* largest packet OK on queue */
size_t             q_hiwat;     /* queue high water mark */
size_t             q_lowat;     /* queue low water mark */
.fi
.in -2

.sp
.LP
.RB "Contstraints and restrictions on the use of " q_flag " and " queue_t 
fields and the
.B q_next
values are detailed in the following sections.
.SS "\fBq_flag\fR Field"
.sp
.LP
The
.B q_flag
field must be used only to check the following flag
values.
.sp
.ne 2
.mk
.na
.B QFULL
.ad
.RS 10n
.rt
Queue is full.
.RE

.sp
.ne 2
.mk
.na
.B QREADR
.ad
.RS 10n
.rt
Queue is used for upstream (read-side) processing.
.RE

.sp
.ne 2
.mk
.na
.B QUSE
.ad
.RS 10n
.rt
Queue has been allocated.
.RE

.sp
.ne 2
.mk
.na
.B QENAB
.ad
.RS 10n
.rt
Queue has been enabled for service by
.BR qenable (9F).
.RE

.sp
.ne 2
.mk
.na
.B QNOENB
.ad
.RS 10n
.rt
Queue will not be scheduled for service by
.BR putq (9F).
.RE

.sp
.ne 2
.mk
.na
.B QWANTR
.ad
.RS 10n
.rt
Upstream processing element wants to read from queue.
.RE

.sp
.ne 2
.mk
.na
.B QWANTW
.ad
.RS 10n
.rt
Downstream processing element wants to write to queue.
.RE

.SS "\fBqueue_t\fR Fields"
.sp
.LP
Aside from
.B q_ptr
and
.BR q_qinfo ,
a module or driver must never
assume that a
.B queue_t
field value will remain unchanged across calls
to
.B STREAMS
entry points. In addition, many fields can change values
inside a
.B STREAMS
entry point, especially if the
.B STREAMS
module
or driver has perimeters that allow parallelism. See
.BR mt-streams (9F).
Fields that are not documented below are private to the
.BR STREAMS
framework and must not be accessed.
.RS +4
.TP
.ie t \(bu
.el o
The values of the
.BR q_hiwat ,
.BR q_lowat ,
.BR q_minpsz ,
and
.B q_maxpsz
fields can be changed at the discretion of the module or
driver. As such, the stability of their values depends on the perimeter
configuration associated with any routines that modify them.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The values of the
.BR q_first ,
.BR q_last ,
and
.B q_count
fields can
change whenever
.BR putq (9F),
.BR putbq (9F),
.BR getq (9F),
.BR insq (9F),
or
.BR rmvq "(9F) is used on the queue. As such, the"
stability of their values depends on the perimeter configuration associated
with any routines that call those
.B STREAMS
functions.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The
.B q_flag
field can change at any time.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The
.B q_next
field will not change while inside a given
.BR STREAMS
entry point. Additional restrictions on the use of the
.B q_next
value
are described in the next section.
.RE
.sp
.LP
A
.B STREAMS
module or driver can assign any value to
.BR q_ptr .
Typically
.B q_ptr
is used to point to module-specific per-queue state,
allocated in
.BR open (9E)
and freed in
.BR close (9E).
The value or
contents of
.B q_ptr
is never inspected by the
.B STREAMS
framework.
.sp
.LP
The initial values for
.BR q_minpsz ,
.BR q_maxpsz ,
.BR q_hiwat ,
and
.B q_lowat
are set using the
.BR module_info (9S)
structure when
\fBmod_install\fR(9F) is called. A \fBSTREAMS\fR\ module or driver can
subsequently change the values of those fields as necessary. The remaining
visible fields,
.BR q_qinfo ,
.BR q_first ,
.BR q_last ,
.BR q_next ,
.BR q_count ,
and
.BR q_flag ,
must never be modified by a module or
driver.
.sp
.LP
The Solaris DDI requires that
.B STREAMS
modules and drivers obey the
rules described on this page. Those that do not follow the rules can cause
data corruption or system instability, and might change in behavior across
patches or upgrades.
.SS "\fBq_next\fR Restrictions"
.sp
.LP
There are additional restrictions associated with the use of the
.B q_next
value. In particular, a
.B STREAMS
module or driver:
.RS +4
.TP
.ie t \(bu
.el o
Must not access the data structure pointed to by
.BR q_next .
.RE
.RS +4
.TP
.ie t \(bu
.el o
Must not rely on the value of
.B q_next
before calling
.BR qprocson (9F)
or after calling
.BR qprocsoff (9F).
.RE
.RS +4
.TP
.ie t \(bu
.el o
Must not pass the value into any
.B STREAMS
framework function other
than
.BR put (9F),
.BR canput (9F),
.BR bcanput (9F),
.BR putctl (9F),
\fBputctl1\fR(9F). However, in all cases the "next" version of these
functions, such as
.BR putnext (9F),
should be preferred.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Must not use the value to compare against queue pointers from other
streams. However, checking
.B q_next
for NULL can be used to distinguish
a module from a driver in code shared by both.
.RE
.SH SEE ALSO
.sp
.LP
.BR close (9E),
.BR open (9E),
.BR bcanput (9F),
.BR canput (9F),
.BR getq (9F),
.BR insq (9F),
.BR mod_install (9F),
.BR put (9F),
.BR putbq (9F),
.BR putctl (9F),
.BR putctl1 (9F),
.BR putnext (9F),
.BR putq (9F),
.BR qprocsoff (9F),
.BR qprocson (9F),
.BR rmvq (9F),
.BR strqget (9F),
.BR strqset (9F),
.BR module_info (9S),
.BR msgb (9S),
.BR qinit (9S),
.BR streamtab (9S)
.sp
.LP
.I Writing Device Drivers
.sp
.LP
.I STREAMS Programming Guide
