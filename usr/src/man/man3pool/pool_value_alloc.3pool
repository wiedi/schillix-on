'\" te
.\" Copyright (c) 2003, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH pool_value_alloc 3POOL "23 Sep 2003" "SunOS 5.11" "Pool Configuration Manipulation Library Functions"
.SH NAME
pool_value_alloc, pool_value_free, pool_value_get_bool,
pool_value_get_double, pool_value_get_int64, pool_value_get_name,
pool_value_get_string, pool_value_get_type, pool_value_get_uint64,
pool_value_set_bool, pool_value_set_double, pool_value_set_int64,
pool_value_set_name, pool_value_set_string, pool_value_set_uint64 \-
resource pool property value manipulation functions
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lpool\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <pool.h>

\fBpool_value_t *\fBpool_value_alloc\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBvoid\fR \fBpool_value_free\fR(\fBpool_value_t *\fIvalue\fR);
.fi

.LP
.nf
\fBpool_value_class_t\fR \fBpool_value_get_type\fR(
     \fBconst pool_value_t *\fIvalue\fR);
.fi

.LP
.nf
\fBint\fR \fBpool_value_get_bool\fR(\fBconst pool_value_t *\fIvalue\fR,
     \fBuchar_t *\fIbool\fR);
.fi

.LP
.nf
\fBint\fR \fBpool_value_get_double\fR(\fBconst pool_value_t *\fIvalue\fR,
     \fBdouble *\fId\fR);
.fi

.LP
.nf
\fBint\fR \fBpool_value_get_int64\fR(\fBconst pool_value_t *\fIvalue\fR,
     \fBint64_t *\fIi64\fR);
.fi

.LP
.nf
\fBint\fR \fBpool_value_get_string\fR(\fBconst pool_value_t *\fIvalue\fR,
     \fBconst char **\fIstrp\fR);
.fi

.LP
.nf
\fBint\fR \fBpool_value_get_uint64\fR(\fBconst pool_value_t *\fIvalue\fR,
     \fBuint64_t *\fIui64\fR);
.fi

.LP
.nf
\fBvoid\fR \fBpool_value_set_bool\fR(\fBconst pool_value_t *\fIvalue\fR,
     \fBuchar_t\fR \fIbool\fR);
.fi

.LP
.nf
\fBvoid\fR \fBpool_value_set_double\fR(\fBconst pool_value_t *\fIvalue\fR,
     \fBdouble\fR \fId\fR);
.fi

.LP
.nf
\fBvoid\fR \fBpool_value_set_int64\fR(\fBconst pool_value_t *\fIvalue\fR,
     \fBint64_t\fR \fIi64\fR);
.fi

.LP
.nf
\fBint\fR \fBpool_value_set_string\fR(\fBconst pool_value_t *\fIvalue\fR,
     \fBconst char *\fIstrp\fR);
.fi

.LP
.nf
\fBvoid\fR \fBpool_value_set_uint64\fR(\fBconst pool_value_t *\fIvalue\fR,
     \fBuint64_t\fR \fIui64\fR);
.fi

.LP
.nf
\fBconst char *\fBpool_value_get_name\fR(\fBconst pool_value_t *\fIvalue\fR);
.fi

.LP
.nf
\fBint\fR \fBpool_value_set_name\fR(\fBconst pool_value_t *\fIvalue\fR,
     \fBconst char *\fIname\fR);
.fi

.SH DESCRIPTION
.sp
.LP
A
.B pool_value_t
is an opaque type representing the typed value portion
of a pool property. For a list of the types supported by a
.BR pool_value_t ,
see
.BR pool_get_property (3POOL).
.sp
.LP
The
.B pool_value_alloc()
function allocates and returns an opaque
container for a pool property value. The
.B pool_value_free()
function
must be called explicitly for allocated property values.
.sp
.LP
The
.BR pool_value_get_bool() ,
.BR pool_value_get_double() ,
.BR pool_value_get_int64() ,
.BR pool_value_get_string() ,
and
.B pool_value_get_uint64()
functions retrieve the value contained in the
.B pool_value_t
pointed to by
.I value
to the location pointed to by
the second argument. If the type of the value does not match that expected
by the function, an error value is returned.  The string retrieved by
.B pool_value_get_string()
is freed by the library when the value is
overwritten or
.B pool_value_free()
is called on the pool property
value.
.sp
.LP
The
.B pool_value_get_type()
function returns the type of the data
contained by a
.BR pool_value_t .
If the value is unused then a type of
.B POC_INVAL
is returned.
.sp
.LP
The
.BR pool_value_set_bool() ,
.BR pool_value_set_double() ,
.BR pool_value_set_int64() ,
.BR pool_value_set_string() ,
and
.B pool_value_set_uint64()
functions set the value and type of the
.RB "property value to the provided values. The" " pool_value_set_string()"
function copies the string passed in and returns -1 if the memory allocation
fails.
.sp
.LP
Property values can optionally have names. These names are used to describe
properties as name=value pairs in the various query functions (see
.BR pool_query_resources (3POOL)).
A copy of the string passed to
.B pool_value_set_name()
is made by the library, and the value returned
by
.B pool_value_get_name()
is freed when the
.B pool_value_t
is
deallocated or overwritten.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B pool_value_alloc()
returns a pool
property value with type initialized to
.BR PVC_INVAL .
Otherwise,
.I NULL
is returned and
.B pool_error()
returns the pool-specific
error value.
.sp
.LP
Upon successful completion,
.B pool_value_get_type()
returns the type
contained in the property value passed in as an argument. Otherwise,
.B POC_INVAL
is returned and
.B pool_error()
returns the pool-specific
error value.
.sp
.LP
Upon successful completion,
.BR pool_value_get_bool() ,
.BR pool_value_get_double() ,
.BR pool_value_get_int64() ,
.BR pool_value_get_string() ,
and
.B pool_value_get_uint64()
return 0.
Otherwise -1 is returned and
.BR pool_error (3POOL)
returns the
pool-specific error value.
.sp
.LP
Upon successful completion,
.B pool_value_set_string()
and
.B pool_value_set_name()
return 0. If the memory allocation failed, -1 is
returned and
.B pool_error()
returns the pool-specific error value.
.SH ERRORS
.sp
.LP
The
.B pool_value_alloc()
function will fail if:
.sp
.ne 2
.mk
.na
.B POE_SYSTEM
.ad
.RS 14n
.rt
A system error has occurred. Check the system error code for more
details.
.RE

.sp
.LP
The
.BR pool_value_get_bool() ,
.BR pool_value_get_double() ,
.BR pool_value_get_int64() ,
.BR pool_value_get_string() ,
and
.B pool_value_get_uint64()
functions will fail if:
.sp
.ne 2
.mk
.na
.B POE_BADPARAM
.ad
.RS 16n
.rt
The supplied
.I value
does not match the type of the requested
operation.
.RE

.sp
.LP
The
.B pool_value_set_string()
function will fail if:
.sp
.ne 2
.mk
.na
.B POE_SYSTEM
.ad
.RS 14n
.rt
A system error has occurred. Check the system error code for more
details.
.RE

.sp
.LP
The
.B pool_value_set_name()
function will fail if:
.sp
.ne 2
.mk
.na
.B POE_SYSTEM
.ad
.RS 14n
.rt
A system error has occurred. Check the system error code for more
details.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
CSIEnabled
_
Interface StabilityUnstable
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libpool (3LIB),
.BR pool_error (3POOL),
.BR attributes (5)
