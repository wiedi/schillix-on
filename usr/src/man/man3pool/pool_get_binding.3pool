'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH pool_get_binding 3POOL "27 Mar 2007" "SunOS 5.11" "Pool Configuration Manipulation Library Functions"
.SH NAME
pool_get_binding, pool_set_binding, pool_get_resource_binding \- set and
query process to resource pool bindings
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lpool\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <pool.h>

\fBchar *\fBpool_get_binding\fR(\fBpid_t\fR \fIpid\fR);
.fi

.LP
.nf
\fBint\fR \fBpool_set_binding\fR(\fBconst char *\fIpool\fR, \fBidtype_t\fR \fIidtype\fR,
     \fBid_t\fR \fIid\fR);
.fi

.LP
.nf
\fBchar *\fBpool_get_resource_binding\fR(\fBconst char *\fItype\fR, \fBpid_t\fR \fIpid\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B pool_get_binding()
function returns the name of the pool on the
running system that contains the set of resources to which the given process
is bound. If no such pool exists on the system or the search returns more
than one pool (since the set of resources is referred to by more than one
pool),
.I NULL
is  returned and the pool error value is set to
.BR POE_INVALID_SEARCH .
.sp
.LP
It is possible that one of the resources to which the given process is
bound is not associated with a pool. This could occur if a processor set was
created with one of the
.B pset_()
functions and the process was then
bound to that set. It could also occur if the process was bound to a
resource set not currently associated with a pool, since resources can exist
that are not associated with a pool.
.sp
.LP
The
.B pool_set_binding()
function binds the processes matching
.I idtype
and
.I id
to the resources associated with
.I pool
on the
running system. This function requires the privilege required by the
underlying resource types referenced by the pool; generally, this
requirement is equivalent to requiring superuser privilege.
.sp
.LP
The
.I idtype
parameter can be of the following types:
.sp
.ne 2
.mk
.na
.B P_PID
.ad
.RS 12n
.rt
The
.I id
parameter is a pid.
.RE

.sp
.ne 2
.mk
.na
.B P_TASKID
.ad
.RS 12n
.rt
The
.I id
parameter is a taskid.
.RE

.sp
.ne 2
.mk
.na
.B P_PROJID
.ad
.RS 12n
.rt
The
.I id
parameter is a project ID. All currently running processes
belonging to the given project will be bound to the pool's resources.
.RE

.sp
.LP
The
.B pool_get_resource_binding()
function returns the name of the
resource of the supplied type to which the supplied process is bound.
.sp
.LP
The application must explicity free the memory allocated for the return
values for
.B pool_get_binding()
and
.BR pool_get_resource_binding() .
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B pool_get_binding()
returns the name of
the pool to which the process is bound. Otherwise it returns
.I NULL
and
.BR pool_error (3POOL)
returns the pool-specific error value.
.sp
.LP
Upon successful completion,
.B pool_set_binding()
returns
.BR PO_SUCCESS .
Otherwise, it returns
.B PO_FAIL
and
.BR pool_error()
returns the pool-specific error value.
.sp
.LP
Upon successful completion,
.B pool_get_resource_binding()
returns the
name of the resource of the specified type to which the process is bound.
Otherwise it returns
.I NULL
and
.B pool_error()
returns the
pool-specific error value.
.SH ERRORS
.sp
.LP
The
.B pool_get_binding()
function will fail if:
.sp
.ne 2
.mk
.na
.B POE_INVALID_CONF
.ad
.RS 22n
.rt
The configuration is invalid.
.RE

.sp
.ne 2
.mk
.na
.B POE_INVALID_SEARCH
.ad
.RS 22n
.rt
It is not possible to determine the binding for this target due to the
overlapping nature of the pools configured for this system, or the pool
could not be located.
.RE

.sp
.ne 2
.mk
.na
.B POE_SYSTEM
.ad
.RS 22n
.rt
A system error has occurred. Check the system error code for more
details.
.RE

.sp
.LP
The
.B pool_set_binding()
function will fail if:
.sp
.ne 2
.mk
.na
.B POE_INVALID_SEARCH
.ad
.RS 22n
.rt
The pool could not be found.
.RE

.sp
.ne 2
.mk
.na
.B POE_INVALID_CONF
.ad
.RS 22n
.rt
The configuration is invalid.
.RE

.sp
.ne 2
.mk
.na
.B POE_SYSTEM
.ad
.RS 22n
.rt
A system error has occurred. Check the system error code for more
details.
.RE

.sp
.LP
The
.B pool_get_resource_binding()
function will fail if:
.sp
.ne 2
.mk
.na
.B POE_INVALID_CONF
.ad
.RS 22n
.rt
The configuration is invalid.
.RE

.sp
.ne 2
.mk
.na
.B POE_INVALID_SEARCH
.ad
.RS 22n
.rt
The target is not bound to a resource of the specified type.
.RE

.sp
.ne 2
.mk
.na
.B POE_SYSTEM
.ad
.RS 22n
.rt
A system error has occurred. Check the system error code for more
details.
.RE

.SH EXAMPLES
.LP
\fBExample 1\fR Bind the current process to the pool named "target".
.sp
.in +2
.nf
#include <sys/types.h>
#include <pool.h>
#include <unistd.h>

\&...

id_t pid = getpid();

\&...

if (pool_set_binding("target", P_PID, pid) == PO_FAIL) \{
        (void) fprintf(stderr, "pool binding failed (\%d)\B{}n",
                 pool_error());
\}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
CSIEnabled
_
Interface StabilityUnstable
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libpool (3LIB),
.BR pool_error (3POOL),
.BR attributes (5)
