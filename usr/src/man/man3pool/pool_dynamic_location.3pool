'\" te
.\" Copyright (c) 2003, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH pool_dynamic_location 3POOL "23 Sep 2003" "SunOS 5.11" "Pool Configuration Manipulation Library Functions"
.SH NAME
pool_dynamic_location, pool_static_location, pool_version, pool_get_status,
pool_set_status, pool_resource_type_list \- resource pool framework
functions
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lpool\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <pool.h>

\fBconst char *\fBpool_dynamic_location\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBconst char *\fBpool_static_location\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBuint_t\fR \fBpool_version\fR(\fBuint_t\fR \fIver\fR);
.fi

.LP
.nf
\fBint\fR \fBpool_get_status\fR(\fBint *\fIstate\fR);
.fi

.LP
.nf
\fBint\fR \fBpool_set_status\fR(\fBint\fR \fIstate\fR);
.fi

.LP
.nf
\fBint\fR \fBpool_resource_type_list\fR(\fBconst char **\fIreslist\fR,
     \fBuint_t *\fInumres\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B pool_dynamic_location()
function returns the location used by the
pools framework to store the dynamic configuration.
.sp
.LP
The
.B pool_static_location()
function returns the location used by the
pools framework to store the default configuration used for pools framework
instantiation.
.sp
.LP
The
.B pool_version()
function can be used to inquire about the version
number of the library by specifying
.BR POOL_VER_NONE .
The current (most
capable) version is
.BR POOL_VER_CURRENT .
The user can set the version
used by the library by specifying the required version number. If this is
not possible, the version returned will be
.BR POOL_VER_NONE .
.sp
.LP
The
.B pool_get_status()
function retrieves the current state of the
pools facility. If state is non-null, then on successful completion the
state of the pools facility is stored in the location pointed to by state.
.sp
.LP
The
.B pool_set_status()
function modifies the current state of the
pools facility. On successful completion the state of the pools facility is
changed to match the value supplied in state. Only two values are valid for
state,
.B POOL_DISABLED
and
.BR POOL_ENABLED ,
both of which are defined
in <\fBpool.h\fR>.
.sp
.LP
The
.B pool_resource_type_list()
function enumerates the resource types
supported by the pools framework on this platform. If
.I numres
and
.I reslist
are both non-null,
.I reslist
points to a buffer where a
list of resource types in the system is to be stored, and \fInumres\fR
points to the maximum number of resource types the buffer can hold. On
successful completion, the list of resource types up to the maximum buffer
size is stored in the buffer pointed to by
.IR reslist .
.SH RETURN VALUES
.sp
.LP
The
.B pool_dynamic_location()
function returns the location used by the
pools framework to store the dynamic configuration.
.sp
.LP
The
.B pool_static_location()
function returns the location used by the
pools framework to store the default configuration used for pools framework
instantiation.
.sp
.LP
The
.B pool_version()
function returns the version number of the library
or
.BR POOL_VER_NONE .
.sp
.LP
Upon successful completion,
.BR pool_get_status() ,
.BR pool_set_status() ,
and
.B pool_resource_type_list()
all return 0.
Otherwise, \(mi1 is returned and
.BR pool_error (3POOL)
returns the pool
specific error.
.SH ERRORS
.sp
.LP
No errors are defined for
.BR pool_dynamic_location() ,
.BR pool_static_location() ,
and
.BR pool_version() .
.sp
.LP
The
.B pool_get_status()
function will fail if:
.sp
.ne 2
.mk
.na
.B POE_SYSTEM
.ad
.RS 14n
.rt
A system error occurred when accessing the kernel pool state.
.RE

.sp
.LP
The
.B pool_set_status()
function will fail if:
.sp
.ne 2
.mk
.na
.B POE_SYSTEM
.ad
.RS 14n
.rt
A system error occurred when modifying the kernel pool state.
.RE

.sp
.LP
The
.B pool_resource_type_list()
function will fail if:
.sp
.ne 2
.mk
.na
.B POE_BADPARAM
.ad
.RS 16n
.rt
The
.I numres
parameter was
.IR NULL .
.RE

.SH EXAMPLES
.LP
.B Example 1
Get the static location used by the pools framework.
.sp
.in +2
.nf
#include sys/types.h>
#include <unistd.h>
#include <pool.h>

\&...

const char *location = pool_dynamic_location();

\&...

    (void) fprintf(stderr, "pool dynamic location is %s\en",
           location);
.fi
.in -2

.LP
.B Example 2
Enable the pools facility.
.sp
.in +2
.nf
#include <stdio.h>
#include <pool.h>

\&...

   if (pool_set_status(POOL_ENABLED) != 0) {
      (void) fprintf(stderr, "pools could not be enabled %s\en",
             pool_strerror(pool_error()));
             exit(2);
   }
\&...
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
CSIEnabled
_
Interface StabilityUnstable
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libpool (3LIB),
.BR pool_error (3POOL),
.BR attributes (5)
