'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH pool_get_pool 3POOL "18 Jul 2005" "SunOS 5.11" "Pool Configuration Manipulation Library Functions"
.SH NAME
pool_get_pool, pool_get_resource, pool_query_components, pool_query_pools,
pool_query_resources \- retrieve resource pool configuration elements
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR]\&.\|.\|.  \fIfile\fR\&.\|.\|. \fB-lpool\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <pool.h>

\fBpool_t *\fBpool_get_pool\fR(\fBpool_conf_t *\fIconf\fR, \fBconst char *\fIname\fR);
.fi

.LP
.nf
\fBpool_resource_t *\fBpool_get_resource\fR(\fBpool_conf_t *\fIconf\fR
     \fBconst char *\fItype\fR, \fBconst char *\fIname\fR);
.fi

.LP
.nf
\fBpool_component_t **\fBpool_query_components\fR(\fBpool_conf_t *\fIconf\fR,
     \fBuint_t *\fInelem\fR, \fBpool_value_t **\fIprops\fR);
.fi

.LP
.nf
\fBpool_t **\fBpool_query_pools\fR(\fBpool_conf_t *\fIconf\fR, \fBuint_t *\fInelem\fR,
     \fBpool_value_t **\fIprops\fR);
.fi

.LP
.nf
\fBpool_component_t **\fBpool_query_resources\fR(\fBpool_conf_t *\fIconf\fR,
     \fBuint_t *\fInelem\fR, \fBpool_value_t **\fIprops\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions provide a means for querying the contents of the specified
configuration. The
.I conf
argument for each function refers to the
target configuration to which the operation applies.
.sp
.LP
The
.B pool_get_pool()
function returns the pool with the given name
from the provided configuration.
.sp
.LP
The
.B pool_get_resource()
function returns the resource with the given
name and type from the provided configuration.
.sp
.LP
The
.B pool_query_components()
function retrieves all resource
components that match the given list of properties. If the list of
properties is
.IR NULL ,
all components are returned. The number of
elements returned is stored in the location pointed to by
.IR nelem .
The
value returned by
.B pool_query_components()
is allocated with
.BR malloc (3C)
and must be explicitly freed.
.sp
.LP
The
.B pool_query_pools()
function behaves similarly to
.B pool_query_components()
and returns the list of pools that match the
given list of properties. The value returned must be freed by the caller.
.sp
.LP
The
.B pool_query_resources()
function similarly returns the list of
resources that match the given list of properties. The return value must be
freed by the caller.
.SH RETURN VALUES
.sp
.LP
The
.B pool_get_pool()
and
.B pool_get_resource()
functions return
the matching pool and resource, respectively. Otherwise, they return
.I NULL
and \fBpool_error\fR(3POOL) returns the pool-specific error
value.
.sp
.LP
The
.BR pool_query_components() ,
.BR pool_query_pools() ,
and
.B pool_query_resources()
functions return a null-terminated array of
components, pools, and resources, respectively. If the query was
unsuccessful or there were no matches,
.I NULL
is returned and
.B pool_error()
returns the pool-specific error value.
.SH ERRORS
.sp
.LP
The
.B pool_get_pool()
will fail if:
.sp
.ne 2
.mk
.na
.B POE_BADPARAM
.ad
.RS 16n
.rt
The supplied configuration's status is not
.BR POF_VALID .
.RE

.sp
.LP
The
.B pool_get_resource()
will fail if:
.sp
.ne 2
.mk
.na
.B POE_BADPARAM
.ad
.RS 16n
.rt
The supplied configuration's status is not
.BR POF_VALID .
.RE

.sp
.ne 2
.mk
.na
.B POE_SYSTEM
.ad
.RS 16n
.rt
There is not enough memory available to allocate working buffers. Check
.B errno
for the specific system error code.
.RE

.sp
.LP
The
.BR pool_query_components() ,
.BR pool_query_pools() ,
and
.B pool_query_resources()
will fail if:
.sp
.ne 2
.mk
.na
.B POE_BADPARAM
.ad
.RS 20n
.rt
The supplied configuration's status is not
.BR POF_VALID .
.RE

.sp
.ne 2
.mk
.na
.B POE_INVALID_CONF
.ad
.RS 20n
.rt
The query generated results that were not of the correct type. The
configuration is invalid.
.RE

.sp
.ne 2
.mk
.na
.B POE_SYSTEM
.ad
.RS 20n
.rt
There is not enough memory available to allocate working buffers. Check
.B errno
for the specific system error code.
.RE

.SH EXAMPLES
.LP
\fBExample 1\fR Retrieve the pool named "foo" from a given configuration.
.sp
.in +2
.nf
#include <pool.h>
#include <stdio.h>

\&...

pool_conf_t *conf;
pool_t *pool;

\&...

if ((pool = pool_get_pool(conf, "foo")) == NULL) {
        (void) fprintf(stderr, "Cannot retrieve pool named
        'foo'\B{}n");
        ...
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
CSIEnabled
_
Interface StabilityUnstable
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libpool (3LIB),
.BR pool_error (3POOL),
.BR attributes (5)
