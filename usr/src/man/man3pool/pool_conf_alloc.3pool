'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH pool_conf_alloc 3POOL "3 Aug 2009" "SunOS 5.11" "Pool Configuration Manipulation Library Functions"
.SH NAME
pool_conf_alloc, pool_conf_close, pool_conf_commit, pool_conf_export,
pool_conf_free, pool_conf_info, pool_conf_location, pool_conf_open,
pool_conf_remove, pool_conf_rollback, pool_conf_status, pool_conf_update,
pool_conf_validate \- manipulate resource pool configurations
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lpool\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <pool.h>

\fBpool_conf_t *\fBpool_conf_alloc\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBint\fR \fBpool_conf_close\fR(\fBpool_conf_t *\fIconf\fR);
.fi

.LP
.nf
\fBint\fR \fBpool_conf_commit\fR(\fBpool_conf_t *\fIconf\fR, \fBint\fR \fIactive\fR);
.fi

.LP
.nf
\fBint\fR \fBpool_conf_export\fR(\fBpool_conf_t *\fIconf\fR, \fBconst char *\fIlocation\fR,
     \fBpool_export_format_t\fR \fIformat\fR);
.fi

.LP
.nf
\fBvoid\fR \fBpool_conf_free\fR(\fBpool_conf_t *\fIconf\fR);
.fi

.LP
.nf
\fBchar *\fBpool_conf_info\fR(\fBconst pool_conf_t *\fIconf\fR, \fBint\fR \fIflags\fR);
.fi

.LP
.nf
\fBconst char *\fBpool_conf_location\fR(\fBpool_conf_t *\fIconf\fR);
.fi

.LP
.nf
\fBint\fR \fBpool_conf_open\fR(\fBpool_conf_t *\fIconf\fR, \fBconst char *\fIlocation\fR,
     \fBint\fR \fIflags\fR);
.fi

.LP
.nf
\fBint\fR \fBpool_conf_remove\fR(\fBpool_conf_t *\fIconf\fR);
.fi

.LP
.nf
\fBint\fR \fBpool_conf_rollback\fR(\fBpool_conf_t *\fIconf\fR);
.fi

.LP
.nf
\fBpool_conf_state_t\fR \fBpool_conf_status\fR(\fBconst pool_conf_t *\fIconf\fR);
.fi

.LP
.nf
\fBint\fR \fBpool_conf_update\fR(\fBconst pool_conf_t *\fIconf\fR, \fBint *\fIchanged\fR);
.fi

.LP
.nf
\fBint\fR \fBpool_conf_validate\fR(\fBpool_conf_t *\fIconf\fR,
     \fBpool_valid_level_t\fR \fIlevel\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions enable the access and creation of configuration files
associated with the pools facility.  Since the pool configuration is an
opaque type, an initial configuration is obtained with
\fBpool_conf_alloc()\fR and released with \fBpool_conf_free()\fR when the
configuration is no longer of interest. The \fIconf\fR argument for each
function refers to the target configuration to which the operation
applies.
.sp
.LP
The \fBpool_conf_close()\fR function closes the given configuration,
releasing associated resources.
.sp
.LP
The \fBpool_conf_commit()\fR function commits changes made to the given
\fBpool_conf_t\fR to permanent storage. If the \fIactive\fR flag is
non-zero, the state of the system will be configured to match that described
in the supplied
.BR pool_conf_t .
If configuring the system fails,
\fBpool_conf_commit()\fR will attempt to restore the system to its previous
state.
.sp
.LP
The \fBpool_conf_export()\fR function saves the given configuration to the
specified location. The only currently supported value of \fIformat\fR is
.BR POX_NATIVE ,
which is the format native to
.BR libpool ,
the output of
which can be used as input to \fBpool_conf_open()\fR.
.sp
.LP
The \fBpool_conf_info()\fR function returns a string describing the entire
configuration. The string is allocated with
.BR malloc (3C).
The caller is
responsible for freeing the returned string. If the flags option is
non-zero, the string returned also describes the sub-elements (if any)
contained in the configuration.
.sp
.LP
The \fBpool_conf_location()\fR function returns the location string
provided to \fBpool_conf_open()\fR for the given \fBpool_conf_t\fR.
.sp
.LP
The \fBpool_conf_open()\fR function creates a \fBpool_conf_t\fR given a
location at which the configuration is stored. The valid flags are a bitmap
of the following:
.sp
.ne 2
.mk
.na
.B PO_RDONLY
.ad
.RS 13n
.rt
Open for reading only.
.RE

.sp
.ne 2
.mk
.na
.B PO_RDWR
.ad
.RS 13n
.rt
Open read-write.
.RE

.sp
.ne 2
.mk
.na
.B PO_CREAT
.ad
.RS 13n
.rt
Create a configuration at the given location if it does not exist. If it
does, truncate it.
.RE

.sp
.ne 2
.mk
.na
.B PO_DISCO
.ad
.RS 13n
.rt
Perform `discovery'. This option only makes sense when used in conjunction
with
.BR PO_CREAT ,
and causes the returned \fBpool_conf_t\fR to contain
the resources and components currently active on the system.
.sp
The use of this flag is deprecated.
.B PO_CREAT
always performs
discovery. If supplied, this flag is ignored.
.RE

.sp
.ne 2
.mk
.na
.B PO_UPDATE
.ad
.RS 13n
.rt
Use when opening the dynamic state file, which is the configuration at
.BR pool_dynamic_location (3POOL),
to ensure that the contents of the
dynamic state file are updated to represent the current state of the
system.
.sp
The use of this flag is deprecated. The dynamic state is always current and
does not require updating. If supplied, this flag is ignored.
.RE

.sp
.LP
A call to \fBpool_conf_open()\fR with the pool dynamic location and write
permission will hang if the dynamic location has already been opened for
writing.
.sp
.LP
The \fBpool_conf_remove()\fR function removes the configuration's permanent
storage. If the configuration is still open, it is first closed.
.sp
.LP
The \fBpool_conf_rollback()\fR function restores the configuration state to
that held in the configuration's permanent storage. This will either be the
state last successfully committed (using
.BR pool_conf_commit() )
or the
state when the configuration was opened if there have been no successfully
committed changes since then.
.sp
.LP
The \fBpool_conf_status()\fR function returns the status of a
configuration, which can be one of the following values:
.sp
.ne 2
.mk
.na
.B POF_INVALID
.ad
.RS 15n
.rt
The configuration is not in a suitable state for use.
.RE

.sp
.ne 2
.mk
.na
.B POF_VALID
.ad
.RS 15n
.rt
The configuration is in a suitable state for use.
.RE

.sp
.LP
The \fBpool_conf_update()\fR function updates the library snapshot of
kernel state. If
.I changed
is non-null, it is updated to identify which
types of configuration elements changed during the update. To check for
change, treat the
.I changed
value as a bitmap of possible element
types.
.sp
.LP
A change is defined for the different element classes as follows:
.sp
.ne 2
.mk
.na
.B POU_SYSTEM
.ad
.RS 14n
.rt
A property on the system element has been created, modified, or removed.
.RE

.sp
.ne 2
.mk
.na
.B POU_POOL
.ad
.RS 14n
.rt
A property on a pool element has been created, modified, or removed. A pool
has changed a resource association.
.RE

.sp
.ne 2
.mk
.na
.B POU_PSET
.ad
.RS 14n
.rt
A property on a pset element has been created, modified, or removed. A
pset's resource composition has changed.
.RE

.sp
.ne 2
.mk
.na
.B POU_CPU
.ad
.RS 14n
.rt
A property on a CPU element has been created, modified, or removed.
.RE

.sp
.LP
The \fBpool_conf_validate()\fR function checks the validity of the contents
of the given configuration. The validation can be at several (increasing)
levels of strictness:
.sp
.ne 2
.mk
.na
.B POV_LOOSE
.ad
.RS 15n
.rt
Performs basic internal syntax validation.
.RE

.sp
.ne 2
.mk
.na
.B POV_STRICT
.ad
.RS 15n
.rt
Performs a more thorough syntax validation and internal consistency
checks.
.RE

.sp
.ne 2
.mk
.na
.B POV_RUNTIME
.ad
.RS 15n
.rt
Performs an estimate of whether attempting to commit the given
configuration on the system would succeed or fail. It is optimistic in that
a successful validation does not guarantee a subsequent commit operation
will be successful; it is conservative in that a failed validation indicates
that a subsequent commit operation on the current system will always fail.
.RE

.SH RETURN VALUES
.sp
.LP
Upon successful completion, \fBpool_conf_alloc()\fR returns an initialized
\fBpool_conf_t\fR pointer. Otherwise it returns \fINULL\fR and
.BR pool_error (3POOL)
returns the pool-specific error value.
.sp
.LP
Upon successful completion, \fBpool_conf_close()\fR,
\fBpool_conf_commit()\fR,
.BR pool_conf_export() ,
\fBpool_conf_open()\fR,
\fBpool_conf_remove()\fR, \fBpool_conf_rollback()\fR,
\fBpool_conf_update()\fR, and \fBpool_conf_validate()\fR return 0. Otherwise
they return -1 and
.B pool_error()
returns the pool-specific error
value.
.sp
.LP
The \fBpool_conf_status()\fR function returns either
.B POF_INVALID
or
.BR POF_VALID .
.SH ERRORS
.sp
.LP
The \fBpool_conf_alloc()\fR function will fail if:
.sp
.ne 2
.mk
.na
.B POE_SYSTEM
.ad
.RS 20n
.rt
There is not enough memory available to allocate the configuration. Check
\fBerrno\fR for the specific system error code.
.RE

.sp
.ne 2
.mk
.na
.B POE_INVALID_CONF
.ad
.RS 20n
.rt
The configuration is invalid.
.RE

.sp
.LP
The \fBpool_conf_close()\fR function will fail if:
.sp
.ne 2
.mk
.na
.B POE_BADPARAM
.ad
.RS 16n
.rt
The supplied configuration's status is not \fBPOF_VALID\fR.
.RE

.sp
.ne 2
.mk
.na
.B POE_SYSTEM
.ad
.RS 16n
.rt
The configuration's permanent store cannot be closed.  Check \fBerrno\fR
for the specific system error code.
.RE

.sp
.LP
The \fBpool_conf_commit()\fR function will fail if:
.sp
.ne 2
.mk
.na
.B POE_BADPARAM
.ad
.RS 20n
.rt
The supplied configuration's status is not
.B POF_VALID
or the active
flag is non-zero and the system could not be modified.
.RE

.sp
.ne 2
.mk
.na
.B POE_SYSTEM
.ad
.RS 20n
.rt
The permanent store could not be updated. Check
.B errno
for the
specific system error code.
.RE

.sp
.ne 2
.mk
.na
.B POE_INVALID_CONF
.ad
.RS 20n
.rt
The configuration is not valid for this system.
.RE

.sp
.ne 2
.mk
.na
.B POE_ACCESS
.ad
.RS 20n
.rt
The configuration was not opened with the correct permissions.
.RE

.sp
.ne 2
.mk
.na
.B POE_DATASTORE
.ad
.RS 20n
.rt
The update of the permanent store has failed and the contents could be
corrupted. Check for a \fB\&.bak\fR file at the datastore location if manual
recovery is required.
.RE

.sp
.LP
The \fBpool_conf_export()\fR function will fail if:
.sp
.ne 2
.mk
.na
.B POE_BADPARAM
.ad
.RS 17n
.rt
The supplied configuration's status is not
.B POF_VALID
or the requested
export format is not supported.
.RE

.sp
.ne 2
.mk
.na
.B POE_DATASTORE
.ad
.RS 17n
.rt
The creation of the export file failed. A file might have been created at
the specified location but the contents of the file might not be correct.
.RE

.sp
.LP
The \fBpool_conf_info()\fR function will fail if:
.sp
.ne 2
.mk
.na
.B POE_BADPARAM
.ad
.RS 20n
.rt
The supplied configuration's status is not
.B POF_VALID
or \fIflags\fR
is neither 0 nor 1.
.RE

.sp
.ne 2
.mk
.na
.B POE_SYSTEM
.ad
.RS 20n
.rt
There is not enough memory available to allocate the buffer used to build
the information string. Check
.B errno
for the specific system error
code.
.RE

.sp
.ne 2
.mk
.na
.B POE_INVALID_CONF
.ad
.RS 20n
.rt
The configuration is invalid.
.RE

.sp
.LP
The \fBpool_conf_location()\fR function will fail if:
.sp
.ne 2
.mk
.na
.B POE_BADPARAM
.ad
.RS 16n
.rt
The supplied configuration's status is not \fBPOF_VALID\fR.
.RE

.sp
.LP
The \fBpool_conf_open()\fR function will fail if:
.sp
.ne 2
.mk
.na
.B POE_BADPARAM
.ad
.RS 20n
.rt
The supplied configuration's status is already \fBPOF_VALID\fR.
.RE

.sp
.ne 2
.mk
.na
.B POE_SYSTEM
.ad
.RS 20n
.rt
There is not enough memory available to store the supplied location, or the
pools facility is not active. Check
.B errno
for the specific system
error code.
.RE

.sp
.ne 2
.mk
.na
.B POE_INVALID_CONF
.ad
.RS 20n
.rt
The configuration to be opened is at
.BR pool_dynamic_location "(3POOL) and"
the configuration is not valid for this system.
.RE

.sp
.LP
The \fBpool_conf_remove()\fR function will fail if:
.sp
.ne 2
.mk
.na
.B POE_BADPARAM
.ad
.RS 16n
.rt
The supplied configuration's status is not \fBPOF_VALID\fR.
.RE

.sp
.ne 2
.mk
.na
.B POE_SYSTEM
.ad
.RS 16n
.rt
The configuration's permanent storage could not be removed. Check
\fBerrno\fR for the specific system error code.
.RE

.sp
.LP
The \fBpool_conf_rollback()\fR function will fail if:
.sp
.ne 2
.mk
.na
.B POE_BADPARAM
.ad
.RS 16n
.rt
The supplied configuration's status is not \fBPOF_VALID\fR.
.RE

.sp
.ne 2
.mk
.na
.B POE_SYSTEM
.ad
.RS 16n
.rt
The permanent store could not be accessed. Check
.B errno
for the
specific system error code.
.RE

.sp
.LP
The \fBpool_conf_update()\fR function will fail if:
.sp
.ne 2
.mk
.na
.B POE_BADPARAM
.ad
.RS 20n
.rt
The supplied configuration's status is not
.B POF_VALID
or the
configuration is not the dynamic configuration.
.RE

.sp
.ne 2
.mk
.na
.B POE_DATASTORE
.ad
.RS 20n
.rt
The kernel snapshot cannot be correctly unpacked.
.RE

.sp
.ne 2
.mk
.na
.B POE_INVALID_CONF
.ad
.RS 20n
.rt
The configuration contains uncommitted transactions.
.RE

.sp
.ne 2
.mk
.na
.B POE_SYSTEM
.ad
.RS 20n
.rt
A system error occurred during snapshot retrieval and update.
.RE

.sp
.LP
The \fBpool_conf_validate()\fR function will fail if:
.sp
.ne 2
.mk
.na
.B POE_BADPARAM
.ad
.RS 20n
.rt
The supplied configuration's status is not \fBPOF_VALID\fR.
.RE

.sp
.ne 2
.mk
.na
.B POE_INVALID_CONF
.ad
.RS 20n
.rt
The configuration is invalid.
.RE

.SH EXAMPLES
.LP
\fBExample 1\fR Create the configuration at the specified location.
.sp
.in +2
.nf
#include <pool.h>
#include <stdio.h>

\&...

pool_conf_t *pool_conf;
pool_conf = pool_conf_alloc();
char *input_location = "/tmp/poolconf.example";

if (pool_conf_open(pool_conf, input_location,
    PO_RDONLY) < 0) {
        fprintf(stderr, "Opening pool configuration %s
                failed\en", input_location);
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
CSIEnabled
_
Interface StabilityUncommitted
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libpool (3LIB),
.BR pool_error (3POOL),
.BR attributes (5)
