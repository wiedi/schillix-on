'\" te
.\" Copyright (c) 1990, 1995 by Mortice Kern Systems Inc.  All Rights Reserved
.\" Portions Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH add_wchnstr 3XCURSES "5 Jun 2002" "SunOS 5.11" "X/Open Curses Library Functions"
.SH NAME
add_wchnstr, add_wchstr, mvadd_wchnstr, mvadd_wchstr, mvwadd_wchnstr,
mvwadd_wchstr, wadd_wchnstr, wadd_wchstr \- copy a string of complex characters
(with renditions) to a window
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-I\fR /usr/xpg4/include \fB -L \fR /usr/xpg4/lib \e
\fB -R \fR /usr/xpg4/lib \fB -lcurses \fR [ \fIlibrary\fR.\|.\|. ]

\fBc89\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lcurses\fR [ \fIlibrary\fR .\|.\|. ]

#include <curses.h>

\fBint\fR \fBadd_wchnstr\fR(\fBconst cchar_t *\fIwchstr\fR, \fBint\fR \fIn\fR);
.fi

.LP
.nf
\fBint\fR \fBadd_wchstr\fR(\fBconst cchar_t *\fIwchstr\fR);
.fi

.LP
.nf
\fBint\fR \fBmvadd_wchnstr\fR(\fBint\fR \fIy\fR, \fBint\fR \fIx\fR, \fBconst cchar_t *\fIwchstr\fR, \fBint\fR \fIn\fR);
.fi

.LP
.nf
\fBint\fR \fBmvadd_wchstr\fR(\fBint\fR \fIy\fR, \fBint\fR \fIx\fR, \fBconst cchar_t *\fIwchstr\fR);
.fi

.LP
.nf
\fBint\fR \fBmvwadd_wchnstr\fR(\fBWINDOW *\fIwin\fR, \fBint\fR \fIy\fR, \fBint\fR \fIx\fR,
     \fBconst cchar_t *\fIwchstr\fR, \fBint\fR \fIn\fR);
.fi

.LP
.nf
\fBint\fR \fBmvwadd_wchstr\fR(\fBWINDOW *\fIwin\fR, \fBint\fR \fIy\fR, \fBint\fR \fIx\fR, \fBconst cchar_t *\fIwchstr\fR);
.fi

.LP
.nf
\fBint\fR \fBwadd_wchstr\fR(\fBWINDOW *\fIwin\fR, \fBconst cchar_t *\fIwchstr\fR);
.fi

.LP
.nf
\fBint\fR \fBwadd_wchnstr\fR(\fBWINDOW *\fIwin\fR, \fBconst cchar_t *\fIwchstr\fR, \fBint\fR \fIn\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B add_wchstr()
function copies the string of
.B cchar_t
characters to
the
.B stdscr
.RB "window at the current cursor position.  The" " mvadd_wchstr()"
and
.B mvwadd_wchstr()
functions copy the  string to the starting position
indicated by the
.I x
(column) and
.I y
(row) parameters (the former to
the
.B stdscr
window; the latter to window
.IR win ).
The
.B wadd_wchstr()
is identical to
.BR add_wchstr() ,
but writes  to the window
specified by
.IR win .
.sp
.LP
The
.BR add_wchnstr() ,
.BR wadd_wchnstr() ,
.BR mvadd_wchnstr() ,
and
.B mvwadd_wchnstr()
functions write
.I n
characters to the window,  or as
many as will fit on the line. If
.I n
is less than 0, the entire string is
written, or as much of it as  fits on the line.  The former two functions place
the string at the current cursor position; the  latter two commands use the
position specified by the
.I x
and
.I y
parameters.
.sp
.LP
These functions differ from the
.BR addwstr (3XCURSES)
set of functions in two
important respects. First, these functions do
.I not
advance the cursor after
writing the  string to the window. Second, the current window rendition (that is,
the combination of attributes  and color pair) is not combined with the
character; only those attributes that  are already part of the
.B cchar_t
character are used.
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I wchstr
.ad
.RS 10n
.rt
Is a pointer to the
.B cchar_t
string to be copied to the window.
.RE

.sp
.ne 2
.mk
.na
.I n
.ad
.RS 10n
.rt
Is the maximum number of characters to be copied from
.IR wchstr .
If
.IR n
is less than 0, the entire string is written or as much of it as fits on the
line.
.RE

.sp
.ne 2
.mk
.na
.I y
.ad
.RS 10n
.rt
Is the y (row) coordinate of the starting position of
.I wchstr
in the
window.
.RE

.sp
.ne 2
.mk
.na
.I x
.ad
.RS 10n
.rt
Is the x (column) coordinate of the starting position of
.I wchstr
in the
window.
.RE

.sp
.ne 2
.mk
.na
.I win
.ad
.RS 10n
.rt
Is a pointer to the window to which the string is to be copied.
.RE

.SH RETURN VALUES
.sp
.LP
On success, these functions return
.BR OK .
Otherwise, they return
.BR ERR .
.SH ERRORS
.sp
.LP
None.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR addnwstr (3XCURSES),
.BR add_wch (3XCURSES),
.BR attr_off (3XCURSES),
.BR libcurses (3XCURSES),
.BR attributes (5),
.BR standards (5)
