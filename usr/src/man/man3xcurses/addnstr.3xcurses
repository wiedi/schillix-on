'\" te
.\" Copyright (c) 1990, 1995 by Mortice Kern Systems Inc.  All Rights Reserved
.\" Portions Copyright (c) 1999, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH addnstr 3XCURSES "5 Jun 2002" "SunOS 5.11" "X/Open Curses Library Functions"
.SH NAME
addnstr, addstr, mvaddnstr, mvaddstr, mvwaddnstr, mvwaddstr, waddnstr,
waddstr \- add a multi-byte character string (without rendition) to a
window
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-I\fR /usr/xpg4/include \fB -L \fR /usr/xpg4/lib \e
\fB -R \fR /usr/xpg4/lib \fB -lcurses \fR [ \fIlibrary\fR.\|.\|. ]

\fBc89\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lcurses\fR [ \fIlibrary\fR .\|.\|. ]

#include <curses.h>

\fBint\fR \fBaddnstr\fR(\fBconst char *\fIstr\fR, \fBint\fR \fIn\fR);
.fi

.LP
.nf
\fBint\fR \fBaddstr\fR(\fBconst char *\fIstr\fR);
.fi

.LP
.nf
\fBint\fR \fBmvaddnstr\fR(\fBint\fR \fIy\fR, \fBint\fR \fIx\fR, \fBconst char *\fIstr\fR, \fBint\fR \fIn\fR);
.fi

.LP
.nf
\fBint\fR \fBmvaddstr\fR(\fBint\fR \fIy\fR, \fBint\fR \fIx\fR, \fBconst char *\fIstr\fR);
.fi

.LP
.nf
\fBint\fR \fBmvwaddnstr\fR(\fBWINDOW *\fIwin\fR, \fBint\fR \fIy\fR, \fBint\fR \fIx\fR, \fBconst char *\fIstr\fR, \fBint\fR \fIn\fR);
.fi

.LP
.nf
\fBint\fR \fBmvwaddstr\fR(\fBWINDOW *\fIwin\fR, \fBint\fR \fIy\fR, \fBint\fR \fIx\fR, \fBconst char *\fIstr\fR);
.fi

.LP
.nf
\fBint\fR \fBwaddstr\fR(\fBWINDOW *\fIwin\fR, \fBconst char *\fIstr\fR);
.fi

.LP
.nf
\fBint\fR \fBwaddnstr\fR(\fBWINDOW *\fIwin\fR, \fBconst char *\fIstr\fR, \fBint\fR \fIn\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B addstr()
function writes a null-terminated string of multi-byte
characters to the
.B stdscr
window at the current cursor position. The
\fBwaddstr()\fR function performs an identical action, but writes the
character to the window specified by
.IR win .
The
.B mvaddstr()
and
\fBmvwaddstr()\fR functions write the string to the  position indicated by
the
.I x
(column) and
.I y
(row) parameters (the  former to the
\fBstdscr\fR window; the latter to window \fIwin\fR).
.sp
.LP
The
.BR addnstr() ,
.BR waddnstr() ,
.BR mvaddnstr() ,
and
\fBmvwaddnstr()\fR functions are similar but write at most \fIn\fR
characters to the window. If
.I n
is less than 0, the entire string is
written.
.sp
.LP
All of these functions advance the cursor after writing the string.
.sp
.LP
These functions are functionally equivalent to calling the corresponding
function from the \fBaddch\fR(3XCURSES) set of functions once for each
character in  the string.  Refer to the \fBcurses\fR(3XCURSES) man page for
a complete description of  special character handling and of the interaction
between the window rendition (or background character and rendition) and the
character written.
.sp
.LP
Note that these functions differ from the
.B addchstr()
set of functions
in that the \fBaddchstr\fR(3XCURSES) functions copy the string as is
(without combining each character with the window rendition or the
background character  and rendition.
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I str
.ad
.RS 7n
.rt
Is a pointer to the character string that is to be written to the window.
.RE

.sp
.ne 2
.mk
.na
.I n
.ad
.RS 7n
.rt
Is the maximum number of characters to be copied from
.IR str .
If
.IR n
is less than 0, the entire string is written or as much of it as fits on the
line.
.RE

.sp
.ne 2
.mk
.na
.I y
.ad
.RS 7n
.rt
Is the y (row) coordinate of the starting position of
.I str
in the
window.
.RE

.sp
.ne 2
.mk
.na
.I x
.ad
.RS 7n
.rt
Is the x (column) coordinate of the starting position of
.I str
in  the
window.
.RE

.sp
.ne 2
.mk
.na
.I win
.ad
.RS 7n
.rt
Is a pointer to the window in which the string is to be written.
.RE

.SH RETURN VALUES
.sp
.LP
On success, these functions return
.BR OK .
Otherwise, they return
.BR ERR .
.SH ERRORS
.sp
.LP
None.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR addch (3XCURSES),
.BR addchstr (3XCURSES),
.BR curses (3XCURSES),
.BR libcurses (3XCURSES),
.BR attributes (5),
.BR standards (5)
