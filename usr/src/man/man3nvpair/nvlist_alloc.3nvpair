'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH nvlist_alloc 3NVPAIR "2 Feb 2004" "SunOS 5.11" "Name-value Pair Library Functions"
.SH NAME
nvlist_alloc, nvlist_free, nvlist_size, nvlist_pack, nvlist_unpack, nvlist_dup,
nvlist_merge, nvlist_xalloc, nvlist_xpack, nvlist_xunpack, nvlist_xdup,
nvlist_lookup_nv_alloc, nv_alloc_init, nv_alloc_reset, nv_alloc_fini \- manage a
name-value pair list
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lnvpair\fR [ \fIlibrary\fR.\|.\|. ]
#include <libnvpair.h>

\fBint\fR \fBnvlist_alloc\fR(\fBnvlist_t **\fInvlp\fR, \fBuint_t\fR \fInvflag\fR, \fBint\fR \fIflag\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_xalloc\fR(\fBnvlist_t **\fInvlp\fR, \fBuint_t\fR \fInvflag\fR,
     \fBnv_alloc_t *\fR \fInva\fR);
.fi

.LP
.nf
\fBvoid\fR \fBnvlist_free\fR(\fBnvlist_t *\fInvl\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_size\fR(\fBnvlist_t *\fInvl\fR, \fBsize_t *\fIsize\fR, \fBint\fR \fIencoding\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_pack\fR(\fBnvlist_t *\fInvl\fR, \fBchar **\fIbufp\fR, \fBsize_t *\fIbuflen\fR,
     \fBint\fR \fIencoding\fR, \fBint\fR \fIflag\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_xpack\fR(\fBnvlist_t *\fInvl\fR, \fBchar **\fIbufp\fR, \fBsize_t *\fIbuflen\fR,
     \fBint\fR \fIencoding\fR, \fBnv_alloc_t *\fR \fInva\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_unpack\fR(\fBchar *\fIbuf\fR, \fBsize_t\fR \fIbuflen\fR, \fBnvlist_t **\fInvlp\fR,
     \fBint\fR \fIflag\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_xunpack\fR(\fBchar *\fIbuf\fR, \fBsize_t\fR \fIbuflen\fR, \fBnvlist_t **\fInvlp\fR,
     \fBnv_alloc_t *\fR \fInva\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_dup\fR(\fBnvlist_t *\fInvl\fR, \fBnvlist_t **\fInvlp\fR, \fBint\fR \fIflag\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_xdup\fR(\fBnvlist_t *\fInvl\fR, \fBnvlist_t **\fInvlp\fR,
     \fBnv_alloc_t *\fR \fInva\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_merge\fR(\fBnvlist_t *\fIdst\fR, \fBnvlist_t *\fInvl\fR, \fBint\fR \fIflag\fR);
.fi

.LP
.nf
\fBnv_alloc_t *\fR \fBnvlist_lookup_nv_alloc\fR(\fBnvlist_t *\fInvl\fR);
.fi

.LP
.nf
\fBint\fR \fBnv_alloc_init\fR(\fBnv_alloc_t *\fInva\fR, \fBconst nv_alloc_ops_t *\fInvo\fR,
     \fB/*\fR \fIargs\fR */ .\|.\|.);
.fi

.LP
.nf
\fBvoid\fR \fBnv_alloc_reset\fR(\fBnv_alloc_t *\fInva\fR);
.fi

.LP
.nf
\fBvoid\fR \fBnv_alloc_fini\fR(\fBnv_alloc_t *\fInva\fR);
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I nvlp
.ad
.RS 12n
.rt
Address of a pointer to
.BR nvlist_t .
.RE

.sp
.ne 2
.mk
.na
\fInvflag\fR
.ad
.RS 12n
.rt
Specify bit fields defining
.B nvlist
properties:
.sp
.ne 2
.mk
.na
.B NV_UNIQUE_NAME
.ad
.RS 23n
.rt
The
.B nvpair
names are unique.
.RE

.sp
.ne 2
.mk
.na
.B NV_UNIQUE_NAME_TYPE
.ad
.RS 23n
.rt
Name-data type combination is unique.
.RE

.RE

.sp
.ne 2
.mk
.na
\fIflag\fR
.ad
.RS 12n
.rt
Specify 0. Reserved for future use.
.RE

.sp
.ne 2
.mk
.na
.I nvl
.ad
.RS 12n
.rt
The
.B nvlist_t
to be processed.
.RE

.sp
.ne 2
.mk
.na
.I dst
.ad
.RS 12n
.rt
The destination
.BR nvlist_t .
.RE

.sp
.ne 2
.mk
.na
.I size
.ad
.RS 12n
.rt
Pointer to buffer to contain the encoded size.
.RE

.sp
.ne 2
.mk
.na
\fIbufp\fR
.ad
.RS 12n
.rt
Address of buffer to pack
.B nvlist
into. Must be 8-byte aligned. If
.IR NULL ,
library will allocate memory.
.RE

.sp
.ne 2
.mk
.na
\fIbuf\fR
.ad
.RS 12n
.rt
Buffer containing packed
.BR nvlist .
.RE

.sp
.ne 2
.mk
.na
\fIbuflen\fR
.ad
.RS 12n
.rt
Size of buffer \fIbufp\fR or \fIbuf\fR points to.
.RE

.sp
.ne 2
.mk
.na
.I encoding
.ad
.RS 12n
.rt
Encoding method for packing.
.RE

.sp
.ne 2
.mk
.na
.I nvo
.ad
.RS 12n
.rt
Pluggable allocator operations pointer
.RB ( nv_alloc_ops_t ).
.RE

.sp
.ne 2
.mk
.na
.I nva
.ad
.RS 12n
.rt
A pointer to an
.B nv_alloc_t
structure to be used for the specified
.BR nvlist_t .
.RE

.SH DESCRIPTION
.SS "List Manipulation"
.sp
.LP
The
.B nvlist_alloc()
function allocates a new name-value pair list and
updates
.I nvlp
to point to the handle. The \fInvflag\fR argument specifies
\fBnvlist\fR properties to remain persistent across packing, unpacking, and
duplication. If
.B NV_UNIQUE_NAME
was specified for
.IR nvflag ,
existing
nvpairs with matching names are removed before the new nvpair is added. If
\fBNV_UNIQUE_NAME_TYPE\fR was specified for
.IR nvflag ,
existing nvpairs with
matching names and data types are removed before the new nvpair is added. See
.BR nvlist_add_byte (3NVPAIR)
for more information.
.sp
.LP
The
.B nvlist_xalloc()
function is identical to
.B nvlist_alloc()
except
that
.B nvlist_xalloc()
can use a different allocator, as described in the
Pluggable Allocators section.
.sp
.LP
The \fBnvlist_free()\fR function frees a name-value pair list.
.sp
.LP
The
.B nvlist_size()
function returns the minimum size of a contiguous
buffer large enough to pack
.IR nvl .
The
.I encoding
parameter specifies
the method of encoding when packing
.IR nvl .
Supported encoding methods are:
.sp
.ne 2
.mk
.na
.B NV_ENCODE_NATIVE
.ad
.RS 20n
.rt
Straight
.B bcopy()
as described in
.BR bcopy (3C).
.RE

.sp
.ne 2
.mk
.na
.B NV_ENCODE_XDR
.ad
.RS 20n
.rt
Use XDR encoding, suitable for sending to another host.
.RE

.sp
.LP
The
.B nvlist_pack()
function packs
.I nvl
into contiguous memory
starting at *\fIbufp\fR. The \fIencoding\fR parameter specifies the method of
encoding (see above).
.RS +4
.TP
.ie t \(bu
.el o
If *\fIbufp\fR is not
.IR NULL ,
*\fIbufp\fR is expected to be a
caller-allocated buffer of size *\fIbuflen\fR.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If *\fIbufp\fR is
.IR NULL ,
the library will allocate memory and update
*\fIbufp\fR to point to the memory and update *\fIbuflen\fR to contain the size
of the allocated memory.
.RE
.sp
.LP
The
.B nvlist_xpack()
function is identical to
.B nvlist_pack()
except
that
.B nvlist_xpack()
can use a different allocator.
.sp
.LP
The
.B nvlist_unpack()
function takes a buffer with a packed
.BR nvlist_t
and unpacks it into a searchable
.BR nvlist_t .
The library allocates memory
for
.BR nvlist_t .
The caller is responsible for freeing the memory by calling
.BR nvlist_free() .
.sp
.LP
The
.B nvlist_xunpack()
function is identical to
.BR nvlist_unpack()
except that
.B nvlist_xunpack()
can use a different allocator.
.sp
.LP
The
.B nvlist_dup()
function makes a copy of
.I nvl
and updates
\fInvlp\fR to point to the copy.
.sp
.LP
The
.B nvlist_xdup()
function is identical to
.B nvlist_dup()
except that
\fBnvlist_xdup()\fR can use a different allocator.
.sp
.LP
The
.B nvlist_merge()
function adds copies of all name-value pairs from
\fInvl\fR to
.IR dst .
Name-value pairs in
.I dst
are replaced with
name-value pairs from
.I nvl
that have identical names (if
.I dst
has the
type
.BR NV_UNIQUE_NAME )
or identical names and types (if
.I dst
has the
type
.BR NV_UNIQUE_NAME_TYPE ).
.sp
.LP
The
.B nvlist_lookup_nv_alloc()
function retrieves the pointer to the
allocator that was used when manipulating a name-value pair list.
.SS "Pluggable Allocators"
.SS "Using Pluggable Allocators"
.sp
.LP
The
.BR nv_alloc_init() ,
\fBnv_alloc_reset()\fR and \fBnv_alloc_fini()\fR
functions provide an interface to specify the allocator to be used when
manipulating a name-value pair list.
.sp
.LP
The
.B nv_alloc_init()
function determines the allocator properties and puts
them into the
.I nva
argument. The application must specify the \fInv_arg\fR
and
.I nvo
arguments and an optional variable argument list. The optional
arguments are passed to the (*\fBnv_ao_init()\fR) function.
.sp
.LP
The
.I nva
argument must be passed to
.BR nvlist_xalloc() ,
.BR nvlist_xpack() ,
\fBnvlist_xunpack()\fR and
.BR nvlist_xdup() .
.sp
.LP
The
.B nv_alloc_reset()
function is responsible for resetting the allocator
properties to the data specified by
.BR nv_alloc_init() .
When no
(*\fBnv_ao_reset()\fR) function is specified, \fBnv_alloc_reset()\fR has no
effect.
.sp
.LP
The \fBnv_alloc_fini()\fR function destroys the allocator properties determined
by
.BR nv_alloc_init() .
When a (*\fBnv_ao_fini()\fR) function is specified, it
is called from
.BR nv_alloc_fini() .
.sp
.LP
The disposition of the allocated objects and the memory used to store them is
left to the allocator implementation.
.sp
.LP
The
.B "nv_alloc_nosleep nv_alloc_t"
can be used with
\fBnvlist_xalloc()\fR to mimic the behavior of
.BR nvlist_alloc() .
.sp
.LP
The nvpair allocator framework provides a pointer to the operation structure of
a fixed buffer allocator. This allocator,
.BR nv_fixed_ops ,
uses a
pre-allocated buffer for memory allocations. It is intended primarily for kernel
use and is described on
.BR nvlist_alloc (9F).
.sp
.LP
An example program that uses the pluggable allocator functionality is provided
on
.BR nvlist_alloc (9F).
.SS "Creating Pluggable Allocators"
.sp
.LP
Any producer of name-value pairs can specify its own allocator functions. The
application must provide the following pluggable allocator operations:
.sp
.in +2
.nf
int (*nv_ao_init)(nv_alloc_t *nva, va_list nv_valist);
void (*nv_ao_fini)(nv_alloc_t *nva);
void *(*nv_ao_alloc)(nv_alloc_t *nva, size_t sz);
void (*nv_ao_reset)(nv_alloc_t *nva);
void (*nv_ao_free)(nv_alloc_t *nva, void *buf, size_t sz);
.fi
.in -2

.sp
.LP
The
.I nva
argument of the allocator implementation is always the first
argument.
.sp
.LP
The optional (*\fBnv_ao_init()\fR) function is responsible for filling the data
specified by
.B nv_alloc_init()
into the
.I nva_arg
argument.  The
(*\fBnv_ao_init()\fR) function is only called when \fBnv_alloc_init()\fR is
executed.
.sp
.LP
The optional (*\fBnv_ao_fini()\fR) function is responsible for the cleanup of
the allocator implementation. It is called by
.BR nv_alloc_fini() .
.sp
.LP
The required (*\fBnv_ao_alloc()\fR) function is used in the nvpair allocation
framework for memory allocation. The
.I sz
argument specifies the size of the
requested buffer.
.sp
.LP
The optional (*\fBnv_ao_reset()\fR) function is responsible for resetting the
\fInva_arg\fR argument to the data specified by
.BR nv_alloc_init() .
.sp
.LP
The required (*\fBnv_ao_free()\fR) function is used in the nvpair allocator
framework for memory deallocation. The \fIbuf\fR argument is a pointer to a
block previously allocated by the (*\fBnv_ao_alloc()\fR) function. The size
argument
.I sz
must exactly match the original allocation.
.sp
.LP
The disposition of the allocated objects and the memory used to store them is
left to the allocator implementation.
.SH RETURN VALUES
.sp
.LP
These functions return 0 on success and an error value on failure.
.sp
.LP
The
.B nvlist_lookup_nv_alloc()
function returns a pointer to an
allocator.
.SH ERRORS
.sp
.LP
These functions will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
There is an invalid argument.
.RE

.sp
.LP
The
.BR nvlist_alloc() ,
.BR nvlist_dup() ,
.BR nvlist_pack() ,
.BR nvlist_unpack() ,
.BR nvlist_merge() ,
.BR nvlist_xalloc() ,
.BR nvlist_xdup() ,
.BR nvlist_xpack() ,
and
.B nvlist_xunpack()
functions
will fail if:
.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
There is insufficient memory.
.RE

.sp
.LP
The
.BR nvlist_pack() ,
.BR nvlist_unpack() ,
.BR nvlist_xpack() ,
and
\fBnvlist_xunpack()\fR functions will fail if:
.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 11n
.rt
An encode/decode error occurs.
.RE

.sp
.ne 2
.mk
.na
.B ENOTSUP
.ad
.RS 11n
.rt
An encode/decode method is not supported.
.RE

.SH EXAMPLES
.sp
.in +2
.nf
/*
 * Program to create an nvlist.
 */
#include <stdio.h>
#include <sys/types.h>
#include <string.h>
#include <libnvpair.h>

/* generate a packed nvlist */
static int
create_packed_nvlist(char **buf, uint_t *buflen, int encode)
{
    uchar_t bytes[] = {0xaa, 0xbb, 0xcc, 0xdd};
    int32_t int32[] = {3, 4, 5};
    char *strs[] = {"child0", "child1", "child2"};
    int err;
    nvlist_t *nvl;

    err = nvlist_alloc(&nvl, NV_UNIQUE_NAME, 0);    /* allocate list */
    if (err) {
        (void) printf("nvlist_alloc() failed\en");
        return (err);
    }

    /* add a value of some types */
    if ((nvlist_add_byte(nvl, "byte", bytes[0]) != 0) ||
        (nvlist_add_int32(nvl, "int32", int32[0]) != 0) ||
        (nvlist_add_int32_array(nvl, "int32_array", int32, 3) != 0) ||
        (nvlist_add_string_array(nvl, "string_array", strs, 3) != 0)) {
        nvlist_free(nvl);
        return (-1);
    }

    err = nvlist_size(nvl, buflen, encode);
    if (err) {
        (void) printf("nvlist_size: %s\en", strerror(err));
        nvlist_free(nvl);
        return (err);
    }

    /* pack into contig. memory */
    err = nvlist_pack(nvl, buf, buflen, encode, 0);
    if (err)
        (void) printf("nvlist_pack: %s\en", strerror(err));

    /* free the original list */
    nvlist_free(nvl);
    return (err);
}

/* selectively print nvpairs */
static void
nvlist_lookup_and_print(nvlist_t *nvl)
{
    char **str_val;
    int i, int_val;
    uint_t nval;

    if (nvlist_lookup_int32(nvl, "int32", &int_val) == 0)
        (void) printf("int32 = %d\en", int_val);
    if (nvlist_lookup_string_array(nvl, "string_array", &str_val, &nval)
        == 0) {
            (void) printf("string_array =");
            for (i = 0; i < nval; i++)
                    (void) printf(" %s", str_val[i]);
            (void) printf("\en");
    }
}

/*ARGSUSED*/
int
main(int argc, char *argv[])
{
    int err;
    char *buf = NULL;
    size_t buflen;
    nvlist_t *nvl = NULL;

    if (create_packed_nvlist(&buf, &buflen, NV_ENCODE_XDR) != 0) {
        (void) printf("cannot create packed nvlist buffer\en");
        return(-1);
        }

    /* unpack into an nvlist_t */
    err = nvlist_unpack(buf, buflen, &nvl, 0);
    if (err) {
        (void) printf("nvlist_unpack(): %s\en", strerror(err));
        return(-1);
    }

    /* selectively print out attributes */
    nvlist_lookup_and_print(nvl);
    return(0);
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.69i) |cw(2.81i)
lw(2.69i) |lw(2.81i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR libnvpair (3LIB),
.BR attributes (5),
.BR nvlist_alloc (9F)
