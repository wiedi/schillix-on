'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH nvlist_next_nvpair 3NVPAIR "2 Feb 2004" "SunOS 5.11" "Name-value Pair Library Functions"
.SH NAME
nvlist_next_nvpair, nvpair_name, nvpair_type \- return data regarding
name-value pairs
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lnvpair\fR [ \fIlibrary\fR.\|.\|. ]
#include <libnvpair.h>

\fBnvpair_t *\fBnvlist_next_nvpair\fR(\fBnvlist_t *\fInvl\fR, \fBnvpair_t *\fInvpair\fR);
.fi

.LP
.nf
\fBchar *\fBnvpair_name\fR(\fBnvpair_t *\fInvpair\fR);
.fi

.LP
.nf
\fBdata_type_t\fR \fBnvpair_type\fR(\fBnvpair_t *\fInvpair\fR);
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I nvl
.ad
.RS 10n
.rt
The
.B nvlist_t
to be processed.
.RE

.sp
.ne 2
.mk
.na
.I nvpair
.ad
.RS 10n
.rt
Handle to a name-value pair.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B nvlist_next_nvpair()
function returns a handle to the next
.B nvpair
in the list following
.BR nvpair .
If
.B nvpair
is
.IR NULL ,
the first pair is returned. If
.B nvpair
is the last pair in
the
.BR nvlist ,
.I NULL
is returned.
.sp
.LP
The
.B nvpair_name()
function returns a string containing the name of
.BR nvpair .
.sp
.LP
The
.B nvpair_type()
function retrieves the value of the
.B nvpair
in
the form of enumerated type
.BR data_type_t .
This is used to determine the
appropriate
.B nvpair_*()
function to call for retrieving the value.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B nvpair_name()
returns a string containing
the name of the name-value pair.
.sp
.LP
Upon successful completion,
.B nvpair_type()
returns an enumerated data
type
.BR data_type_t .
Possible values for
.B data_type_t
are as
follows:
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_BOOLEAN
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_BOOLEAN_VALUE
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_BYTE
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_INT8
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_UINT8
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_INT16
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_UINT16
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_INT32
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_UINT32
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_INT64
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_UINT64
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_STRING
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_NVLIST
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_BOOLEAN_ARRAY
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_BYTE_ARRAY
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_INT8_ARRAY
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_UINT8_ARRAY
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_INT16_ARRAY
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_UINT16_ARRAY
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_INT32_ARRAY
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_UINT32_ARRAY
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_INT64_ARRAY
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_UINT64_ARRAY
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_STRING_ARRAY
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DATA_TYPE_NVLIST_ARRAY
.RE
.sp
.LP
Upon reaching the end of a list,
.B nvlist_next_pair()
returns
.IR NULL .
Otherwise, the function returns a handle to next
.B nvpair
in
the list.
.sp
.LP
These and other \fBlibnvpair\fR(3LIB) functions cannot manipulate nvpairs
after they have been removed from or replaced in an nvlist. Replacement can
occur during pair additions to nvlists created with
.B NV_UNIQUE_NAME_TYPE
and
.BR NV_UNIQUE_NAME .
See
.BR nvlist_alloc (3NVPAIR).
.SH ERRORS
.sp
.LP
No errors are defined.
.SH EXAMPLES
.LP
.B Example 1
Example of usage of
.BR nvlist_next_nvpair() .
.sp
.in +2
.nf
/*
 * usage of nvlist_next_nvpair()
 */
 static int
 edit_nvl(nvlist_t *nvl)
 {
     nvpair_t *curr = nvlist_next_nvpair(nvl, NULL);

     while (curr != NULL) {
         int err;
        nvpair_t *next = nvlist_next_nvpair(nvl, curr);

        if (!nvl_check(curr))
            if ((err = nvlist_remove(nvl, nvpair_name(curr),
                nvpair_type(curr))) != 0)
                    return (err);

         curr = next;
     }
    return (0);
 }
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.69i) |cw(2.81i)
lw(2.69i) |lw(2.81i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR libnvpair (3LIB),
.BR nvlist_alloc (3NVPAIR),
.BR attributes (5)
.SH NOTES
.sp
.LP
The enumerated nvpair data types might not be an exhaustive list and new
data types can be added.  An application using the data type enumeration,
.BR data_type_t ,
should be written to expect or ignore new data types.
