'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH nvlist_add_boolean 3NVPAIR "15 Sep 2009" "SunOS 5.11" "Name-value Pair Library Functions"
.SH NAME
nvlist_add_boolean, nvlist_add_boolean_value, nvlist_add_byte,
nvlist_add_int8, nvlist_add_uint8, nvlist_add_int16, nvlist_add_uint16,
nvlist_add_int32, nvlist_add_uint32, nvlist_add_int64, nvlist_add_uint64,
nvlist_add_double, nvlist_add_string, nvlist_add_nvlist, nvlist_add_nvpair,
nvlist_add_boolean_array, nvlist_add_byte_array, nvlist_add_int8_array,
nvlist_add_uint8_array, nvlist_add_int16_array, nvlist_add_uint16_array,
nvlist_add_int32_array, nvlist_add_uint32_array, nvlist_add_int64_array,
nvlist_add_uint64_array, nvlist_add_string_array, nvlist_add_nvlist_array \-
add new name-value pair to nvlist_t
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lnvpair\fR [ \fIlibrary\fR.\|.\|. ]
#include <libnvpair.h>

\fBint\fR \fBnvlist_add_boolean\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_boolean_value\fR(\fBnvlist_t *\fInvl\fR,
     \fBconst char *\fIname\fR, \fBboolean_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_byte\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuchar_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int8\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBint8_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint8\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuint8_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int16\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBint16_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint16\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuint16_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int32\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBint32_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint32\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuint32_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int64\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBint64_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint64\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuint64_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_double\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBdouble\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_string\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBconst char *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_nvlist\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBnvlist_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_nvpair\fR(\fBnvlist_t *\fInvl\fR, \fBnvpair_t *\fInvp\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_boolean_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBboolean_t *\fIval\fR, \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_byte_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuchar_t *\fIval\fR, \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int8_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBint8_t *\fIval\fR, \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint8_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuint8_t *\fIval\fR, \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int16_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBint16_t *\fIval\fR, \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint16_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuint16_t *\fIval\fR, \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int32_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBint32_t *\fIval\fR, \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint32_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuint32_t *\fIval\fR, \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int64_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBint64_t *\fIval\fR, \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint64_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuint64_t *\fIval\fR, \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_string_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBchar *const *\fIval\fR, \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_nvlist_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBnvlist_t **\fIval\fR, \fBuint_t\fR \fInelem\fR);
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I nvl
.ad
.RS 9n
.rt
The
.B nvlist_t
(name-value pair list) to be processed.
.RE

.sp
.ne 2
.mk
.na
.I nvp
.ad
.RS 9n
.rt
The
.B nvpair_t
(name-value pair) to be processed.
.RE

.sp
.ne 2
.mk
.na
.I name
.ad
.RS 9n
.rt
Name of the
.B nvpair
(name-value pair).
.RE

.sp
.ne 2
.mk
.na
.I nelem
.ad
.RS 9n
.rt
Number of elements in value (that is, array size).
.RE

.sp
.ne 2
.mk
.na
.I val
.ad
.RS 9n
.rt
Value or starting address of the array value.
.RE

.SH DESCRIPTION
.sp
.LP
These functions add a new name-value pair to an
.BR nvlist_t .
The
uniqueness of
.B nvpair
name and data types follows the \fInvflag\fR
argument specified for
.BR nvlist_alloc() .
See
.BR nvlist_alloc (3NVPAIR).
.sp
.LP
If
.B NV_UNIQUE_NAME
was specified for
.IR nvflag ,
existing
\fBnvpair\fRs with matching names are removed before the new \fBnvpair\fR is
added.
.sp
.LP
If
.B NV_UNIQUE_NAME_TYPE
was specified for
.IR nvflag ,
existing
\fBnvpair\fRs with matching names and data types are removed before the new
.B nvpair
is added.
.sp
.LP
If neither was specified for
.IR nvflag ,
the new
.B nvpair
is
unconditionally added at the end of the list. The library preserves the
order of the name-value pairs across packing, unpacking, and duplication.
.sp
.LP
Multiple threads can simultaneously read the same
.BR nvlist_t ,
but only
one thread can actively change a given
.B nvlist_t
at a time. The caller
is responsible for the synchronization.
.sp
.LP
The list that is added to the parent
.B nvlist_t
by calling
.B nvlist_add_nvlist()
is copied and thus is not freed when
.B nvlist_free()
is called on the parent list. To prevent memory leaks,
your code needs to look like the following (error handling elided for
clarity):
.sp
.in +2
.nf
nvlist_t *parent_nvl;
nvlist_t *child_nvl;

/* create parent list, add an entry */
(void) nvlist_alloc(&parent_nvl, NV_UNIQUE_NAME, KM_SLEEP);
(void) nvlist_add_boolean(parent_nvl, "parent_bool", 0);

/* create child list, add an entry */
(void) nvlist_alloc(&child_nvl, NV_UNIQUE_NAME, KM_SLEEP);
(void) nvlist_add_boolean(child_nvl, "child_bool", 0);

/* add the child to the parent */
(void) nvlist_add_nvlist(parent_nvl, "child_nvlist", child_nvl);

/* do stuff .. */

/* free nvlist(s) */
(void) nvlist_free(child_nvl); /* required, but not obvious */
(void) nvlist_free(parent_nvl);
.fi
.in -2

.sp
.LP
The
.B nvlist_add_boolean()
function is deprecated. The
.B nvlist_add_boolean_value()
function should be used instead.
.SH RETURN VALUES
.sp
.LP
These functions return 0 on success and an error value on failure.
.SH ERRORS
.sp
.LP
These functions will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
There is an invalid argument.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
There is insufficient memory.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.69i) |cw(2.81i)
lw(2.69i) |lw(2.81i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR libnvpair (3LIB),
.BR nvlist_alloc (3NVPAIR),
.BR attributes (5)
