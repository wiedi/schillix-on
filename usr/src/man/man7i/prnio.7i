'\" te
.\" Copyright (c) 20002 Sun Microsystems, Inc.
.\"  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH prnio 7I "2 Jan 2002" "SunOS 5.11" "Ioctl Requests"
.SH NAME
prnio \- generic printer interface
.SH SYNOPSIS
.LP
.nf
\fB#include <sys/prnio.h>\fR
.fi

.SH DESCRIPTION
.sp
.LP
The
.B prnio
generic printer interface defines ioctl commands and data
structures for printer device drivers.
.sp
.LP
.B prnio
defines and provides facilities for five basic phases of the
printing process:
.RS +4
.TP
.ie t \(bu
.el o
Identification \(em Retrieve device information/attributes
.RE
.RS +4
.TP
.ie t \(bu
.el o
Setup \(em Set device attributes
.RE
.RS +4
.TP
.ie t \(bu
.el o
Transfer \(em Transfer data to or from the device
.RE
.RS +4
.TP
.ie t \(bu
.el o
Cleanup \(em Transfer phase conclusion
.RE
.RS +4
.TP
.ie t \(bu
.el o
Abort \(em Transfer phase interruption
.RE
.sp
.LP
During the Identification phase, the application retrieves a set of device
capabilities and additional information using the
.BR PRNIOC_GET_IFCAP ,
.BR PRNIOC_GET_STATUS ,
.BR PRNIOC_GET_TIMEOUTS ,
.B PRNIOC_GET_IFINFO
and
.B PRNIOC_GET_1284_DEVID
commands.
.sp
.LP
During the Setup phase the application sets some interface attributes and
probably resets the printer as described in the
.BR PRNIOC_SET_IFCAP ,
.B PRNIOC_SET_TIMEOUTS
and
.B PRNIOC_RESET
sections.
.sp
.LP
During the Transfer phase, data is transferred in a forward (host to
peripheral) or reverse direction (peripheral to host). Transfer is
accomplished using
.BR write (2)
and
.BR read (2)
system calls. For
.B prnio
compliant printer drivers, forward transfer support is
mandatory, while reverse transfer support is optional. Applications can also
use
.B PRNIOC_GET_STATUS
and
.B PRNIOC_GET_1284_STATUS
commands during
the transfer to monitor the device state.
.sp
.LP
The Cleanup phase is accomplished by closing the device using
.BR close (2).
Device drivers supporting
.B prnio
may set non-zero error
code as appropriate. Applications should explicitly
.BR close (2)
a device
before exiting and check
.B errno
value.
.sp
.LP
The Abort phase is accomplished by interrupting the
.BR write (2)
and
.BR read (2)
system calls. The application can perform some additional
cleanup during the Abort phase as described in
.BR PRNIOC_GET_IFCAP
section.
.SH IOCTLS
.sp
.ne 2
.mk
.na
.B PRNIOC_GET_IFCAP
.ad
.RS 21n
.rt
Application can retrieve printer interface capabilities using this command.
The
.BR ioctl (2)
argument is a pointer to
.BR uint_t ,
a bit field
representing a set of properties and services provided by a printer driver.
Set bit means supported capability. The following values are defined:
.br
.in +2
.B PRN_BIDI
- When this bit is set,  the interface operates in a
bidirectional mode,  instead of forward-only mode.
.in -2
.br
.in +2
.B PRN_HOTPLUG
- If this bit is set, the interface allows device
hot-plugging.
.in -2
.br
.in +2
.B PRN_1284_DEVID
- If this bit is set, the device is capable of
returning
.I 1284
device ID (see
.BR PRNIOC_GET_1284_DEVID .)
.in -2
.br
.in +2
.B PRN_1284_STATUS
- If this bit is set, the device driver can return
device status lines (see
.BR PRNIOC_GET_1284_STATUS ).
Some devices support
this ioctl in unidirectional mode only.
.in -2
.br
.in +2
.B PRN_TIMEOUTS
- If this bit is set the peripheral may stall during the
transfer phase and the driver can timeout and return from the
.BR write (2)
and
.BR read (2)
returning the number of bytes that have been transferred.
If
.B PRN_TIMEOUTS
is set, the driver supports this functionality and the
timeout values can be retrieved and modified via the
.B PRNIOC_GET_TIMEOUTS
and
.B PRNIOC_SET_TIMEOUTS
ioctls. Otherwise,
applications can implement their own timeouts and abort phase.
.in -2
.br
.in +2
.B PRN_STREAMS
- This bit impacts the application abort phase behaviour.
If the device claimed
.B PRN_STREAMS
capability, the application must
issue an
.BR "I_FLUSH ioctl" (2)
before
.BR close (2)
to dismiss the
untransferred data. Only STREAMS drivers can support this capability.
.in -2
.RE

.sp
.ne 2
.mk
.na
.B PRNIOC_SET_IFCAP
.ad
.RS 21n
.rt
This ioctl can be used to change interface capabilities. The argument is a
pointer to
.B uint_t
bit field that is described in detail in the
.B PRNIOC_GET_IFCAP
section. Capabilities should be set one at a time;
otherwise the command will return
.BR EINVAL .
The following capabilities
can be changed by this ioctl:
.br
.in +2
.B PRN_BIDI
- When this capability is set, the interface operates in a
bidirectional mode, instead of forward-only mode. Devices that support only
one mode will not return error; applications should use
.B PRNIOC_GET_IFCAP
to check if the mode was successfully changed.
Because some capabilities may be altered as a side effect of changing other
capabilities, this command should be followed by
.BR PRNIOC_GET_IFCAP .
.in -2
.RE

.sp
.ne 2
.mk
.na
.B PRNIOC_GET_IFINFO
.ad
.RS 21n
.rt
This command can be used to retrieve printer interface info string, which
is an arbitrary format string usually describing the bus type. The argument
is a pointer to
.B "struct prn_interface_info"
as described
below.\f(CW\fR
.RE

.sp
.in +2
.nf
struct prn_interface_info {
  uint_t	  if_len;   /* length of buffer */
  uint_t	  if_rlen;  /* actual info length */
  char   *if_data;  /* buffer address */
};
.fi
.in -2

.sp
.LP
The application allocates a buffer and sets \fBif_data\fR and \fBif_len\fR
values to its address and length, respectively. The driver returns the
string to this buffer and sets
.B if_len
to its length. If
.B if_len
is less that
.BR if_rlen ,
the driver must return the first
.B if_len
bytes of the string. The application  may then repeat the
command with a bigger buffer.
.sp
.LP
Although
.B prnio
does not limit the contents of the interface info
string, some values are recommended and defined in <\fBsys/prnio.h\fR> by
the following macros:
.br
.in +2
.B PRN_PARALLEL
- Centronics or
.I "IEEE 1284"
compatible devices
.in -2
.br
.in +2
.B PRN_SERIAL
- EIA-232/EIA-485 serial ports
.in -2
.br
.in +2
.B PRN_USB
- Universal Serial Bus printers
.in -2
.br
.in +2
.B PRN_1394
-
.I "IEEE 1394"
peripherals
.in -2
.br
.in +2
Printer interface info string is for information only: no implications
should be made from its value.
.in -2
.sp
.ne 2
.mk
.na
.B PRNIOC_RESET
.ad
.RS 25n
.rt
Some applications may want to reset the printer state during Setup and/or
Cleanup phase using
.B PRNIOC_RESET
command. Reset semantics are
device-specific, and in general, applications using this command should be
aware of the printer type.
.sp
Each
.B prnio
compliant driver is required to accept this request,
although performed actions are completely driver-dependent. More information
on the
.B PRNIOC_RESET
implementation for the particular driver is
available in the corresponding man page and printer manual.
.RE

.sp
.ne 2
.mk
.na
.B PRNIOC_GET_1284_DEVID
.ad
.RS 25n
.rt
This command can be used to retrieve printer device ID as defined by
.IR "IEEE 1284-1994" .The
.BR ioctl (2)
argument is a pointer to \fBstruct
prn_1284_device_id\fR as described below.
.RE

.sp
.in +2
.nf
struct prn_1284_device_id {
   uint_t	  id_len;   /* length of buffer */
   uint_t	  id_rlen;  /* actual ID length */
   char      *id_data;  /* buffer address */
};
.fi
.in -2

.sp
.LP
For convenience, the two-byte length field is not considered part of device
ID string and is not returned 	in the user buffer. Instead, \fBid_rlen\fR
value shall be set to (length - 2) by the driver, where length is the ID
length field value. If buffer length is less than
.BR id_rlen ,
the driver
returns the first
.B id_len
bytes of the ID.
.sp
.LP
The printer driver must return the most up-to-date value of the device
ID.
.sp
.ne 2
.mk
.na
.B PRNIOC_GET_STATUS
.ad
.RS 21n
.rt
This command can be used by applications to retrieve current device status.
The argument is a pointer to
.BR uint_t ,
where the status word is
returned. Status is a combination of the following bits:
.RE

.br
.in +2
.B PRN_ONLINE
- For devices that support
.B PRN_HOTPLUG
capability,
this bit is set when the device is online, otherwise the device is offline.
Devices without
.B PRN_HOTPLUG
support should always have this bit set.
.in -2
.br
.in +2
.B PRN_READY
- This bit indicates if the device is ready to receive/send
data. Applications may use this bit for an outbound flow control
.in -2
.sp
.ne 2
.mk
.na
.B PRNIOC_GET_1284_STATUS
.ad
.RS 26n
.rt
Devices that support
.B PRN_1284_STATUS
capability accept this ioctl to
retrieve the device status lines defined in
.I "IEEE 1284"
for use in
Compatibility mode. The following bits may be set by the driver:
.br
.in +2
.B PRN_1284_NOFAULT
- Device is not in error state
.in -2
.br
.in +2
.B PRN_1284_SELECT
- Device is selected
.in -2
.br
.in +2
.B PRN_1284_PE
- Paper error
.in -2
.br
.in +2
.B PRN_1284_BUSY
- Device is busy
.in -2
.RE

.sp
.ne 2
.mk
.na
.B PRNIOC_GET_TIMEOUTS
.ad
.RS 26n
.rt
This command  retrieves current transfer timeout values for  the driver.
The argument is  a pointer to
.B "struct prn_timeouts"
as described
below.
.RE

.sp
.in +2
.nf
struct prn_timeouts {
  uint_t	tmo_forward;  /* forward transfer timeout */
  uint_t	tmo_reverse;  /* reverse transfer timeout */
	};
.fi
.in -2

.sp
.LP
.B tmo_forward
and
.B tmo_reverse
define forward and reverse transfer
timeouts in seconds. This command is only valid for drivers that support
.B PRN_TIMEOUTS
capability.
.sp
.ne 2
.mk
.na
.B PRNIOC_SET_TIMEOUTS
.ad
.RS 23n
.rt
This command sets current transfer  timeout values for the driver. The
argument is  a pointer to
.BR "struct prn_timeouts" .
See
.B PRNIOC_GET_TIMEOUTS
for description of  this structure. This command
is only valid for drivers that support
.B PRN_TIMEOUTS
capability.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Architecture SPARC, IA
_
Interface StabilityEvolving
.TE

.SH SEE ALSO
.sp
.LP
.BR close (2),
.BR ioctl (2),
.BR read (2),
.BR write (2),
.BR attributes (5),
.BR ecpp (7D),
.BR usbprn (7D),
.BR lp (7D)
.sp
.LP
.I IEEE Std 1284-1994
