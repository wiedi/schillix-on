'\" te
.\" Copyright (c) 2009 Sun Microsystems, Inc. All rights reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH mixer 7I "21 May 2009" "SunOS 5.11" "Ioctl Requests"
.SH NAME
mixer \- generic mixer device interface
.SH SYNOPSIS
.LP
.nf
\fB#include\fR \fB<sys/soundcard.h>\fR
.fi

.SH DESCRIPTION
.sp
.LP
\&.
.SS "Mixer Pseudo-Device"
.sp
.LP
The
.B /dev/mixer
pseudo-device is provided for two purposes:
.RS +4
.TP
.ie t \(bu
.el o
The first purpose is for applications that wish to learn about the list of audio
devices on the system, so that they can select (or provide for users to select)
an appropriate audio device. The
.B /dev/mixer
pseudo-device provides
interfaces to enumerate all of the audio devices on the system.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The second purpose is for mixer panel type applications which need to control
master settings for the audio hardware in the system, such as gain levels,
balance, port functionality, and other device features.
.RE
.sp
.LP
Ordinary audio applications should
.B not
attempt to adjust their playback or
record volumes or other device settings using this device. Instead, they should
use the
.B SNDCTL_DSP_SETPLAYVOL
and
.B SNDCTL_DSP_SETRECVOL
ioctls that
are documented in
.BR dsp (7I).
.SS "Sndstat Device"
.sp
.LP
The
.B /dev/sndstat
device supports
.BR read (2),
and can be read to
retrieve human-readable information about the audio devices on the system.
Software should not attempt to interpret the contents of this device.
.SH IOCTLS
.SS "Information IOCTLs"
.sp
.LP
The following ioctls are intended to aid applications in identifying the audio
devices available on the system. These ioctls can be issued against either the
pseudo-device
.BR /dev/mixer ,
or a against a file descriptor open to any other
audio device in the system.
.sp
.LP
Applications should issue
.B SNDCTL_SYSINFO
first to learn what audio devices
and mixers are available on the system, and then use
.B SNDCTL_AUDIOINFO
or
.B SNDCTL_MIXERINFO
to obtain more information about the audio devices or
mixers, respectively.
.sp
.ne 2
.mk
.na
.B OSS_GETVERSION
.ad
.RS 20n
.rt
The argument is a pointer to an integer, which retrieves the version of the
.B OSS API
used. The value is encoded with the major version (currently 4)
encoded in the most significant 16 bits, and a minor version encoded in the lower
16 bits.
.RE

.sp
.ne 2
.mk
.na
.B SNDCTL_SYSINFO
.ad
.RS 20n
.rt
The argument is a pointer to an
.B oss_sysinfo
structure, which has the
following definition:
.sp
.in +2
.nf
typedef struct oss_sysinfo {
   char product[32];   /* E.g. SunOS Audio */
   char version[32];   /* E.g. 4.0a */
   int versionnum;     /* See OSS_GETVERSION */
   char options[128];  /* NOT SUPPORTED */

   int numaudios;      /* # of audio/dsp devices */
   int openedaudio[8]; /* Reserved, always 0 */

 int numsynths;        /* NOT SUPPORTED, always 0 */
 int nummidis;         /* NOT SUPPORTED, always 0 */
 int numtimers;        /* NOT SUPPORTED, always 0 */
 int nummixers;        /* # of mixer devices */

 int openedmidi[8];    /* Mask of midi devices are
                          busy */
 int numcards;         /* Number of sound cards in
                          the system */
 int numaudioengines;  /* Number of audio engines in
                          the system */
 char license[16];     /* E.g. "GPL" or "CDDL" */
 char revision_info[256];  /* Reserved */
 int filler[172];          /* Reserved */
} oss_sysinfo;
.fi
.in -2
.sp

The important fields here are
.BR numaudios ,
which is used to determine the
number of audio devices that can be queried with
.BR SNDCTL_AUDIOINFO ,
.B nummixers
which provides a count of mixers on the system, and
.B numcards
which counts to total number of aggregate devices. A \fBcard\fR
can consist of one or more audio devices and one or more mixers, although more
typically there is exactly one audio device and one mixer for each card.
.RE

.sp
.ne 2
.mk
.na
.B SNDCTL_AUDIOINFO
.ad
.RS 20n
.rt
The argument is a pointer to an
.B oss_audioinfo
structure, which has the
following structure:
.sp
.in +2
.nf
typedef struct oss_audioinfo {
   int dev;  /* Device to query */
   char name[64];  /* Human readable name */
   int busy;  /* reserved */
   int pid;  /* reserved */
   int caps;  /* PCM_CAP_INPUT, PCM_CAP_OUTPUT */
   int iformats;  /* Supported input formats */
   int oformats;  /* Supported output formats */
   int magic;  /* reserved */
   char cmd[64];  /* reserved */
   int card_number;
   int port_number;  /* reserved */
   int mixer_dev;
   int legacy_device; /* Obsolete field.
                         Replaced by devnode */
   int enabled;  /* reserved */
   int flags;  /* reserved */
   int min_rate;  /* Minimum sample rate */
   int max_rate;  /* Maximum sample rate */
   int min_channels;  /* Minimum number
                         of channels */
   int max_channels;  /* Maximum number
                         of channels */
   int binding;  /* reserved */
   int rate_source;  /* reserved */
   char handle[32];  /* reserved */
   unsigned int nrates;  /* reserved */
   unsigned int rates[20];  /* reserved */
   char song_name[64];  /* reserved */
   char label[16];  /* reserved */
   int latency;  /* reserved */
   char devnode[32];  /* Device special file
                         name (absolute path) */
   int next_play_engine;  /* reserved */
   int next_rec_engine;  /* reserved */
   int filler[184];  /* reserved */
} oss_audioinfo;
.fi
.in -2
.sp

In the above structure, all of the fields are reserved except the following:
d\fBev, name, card_number, mixer_dev, caps, min_rate, max_rate, min_channels,
max_channels,\fR and
.BR devnode .
The reserved fields are provided for
compatibility with other OSS implementations, and available for legacy
applications. New applications should not attempt to use these fields.
.sp
The
.B dev
field should be initialized by the application to the number of
the device to query. This is a number between zero (inclusive) and value of
.B numaudios
(exclusive) returned by
.BR SNDCTL_SYSINFO .
Alternatively, when
issuing the ioctl against a real mixer or
.B dsp
device, the special value
.B -1
can be used to indicate that the query is being made against the device
opened. If
.B -1
is used, the field is overwritten with the device number for
the current device on successful return.
.sp
No other fields are significant upon entry, but a successful return contains
details of the device.
.sp
The
.B name
field is a human readable name representing the device.
Applications should not try to interpret it.
.sp
The
.B card_number
field indicates the number assigned to the aggregate
device. This can be used with the
.B SNDCTL_CARDINFO
ioctl.
.sp
The
.B mixer_dev
is the mixer device number for the mixing device associated
with the audio device. This can be used with the
.B SNDCTL_MIXERINFO
ioctl.
.sp
The caps field contains any of the bits
.BR PCM_CAP_INPUT ,
.BR PCM_CAP_OUTPUT ,
and
.BR PCM_CAP_DUPLEX .
Indicating whether the device
support input, output, and whether input and output can be used simultaneously.
All other bits are reserved.
.sp
The
.B min_rate
and
.B max_rate
fields indicate the minimum and maximum
sample rates supported by the device. Most applications should try to use the
maximum supported rate for the best audio quality and lowest system resource
consumption.
.sp
The
.B min_channels
and
.B max_channels
provide an indication of the
number of channels (1 for mono, 2 for stereo, 6 for 5.1, etc.) supported by the
device.
.sp
The
.B devnode
field contains the actual full path to the device node for
this device, such as
.BR /dev/sound/audio810:0dsp .
Applications should open
this file to access the device.
.RE

.sp
.ne 2
.mk
.na
.B SNDCTL_CARDINFO
.ad
.RS 20n
.rt
The argument is a pointer to a
.BR "struct oss_card_info" ,
which has the
following definition:
.sp
.in +2
.nf
typedef struct oss_card_info {
int card;
 char shortname[16];
 char longname[128];
 int flags;/* reserved */
 char hw_info[400];
 int intr_count;/* reserved */
 int ack_count;/* reserved */
 int filler[154];
} oss_card_info;
.fi
.in -2
.sp

This ioctl is used to query for information about the aggregate audio device.
.sp
The
.B card
field should be initialized by the application to the number of
the card to query. This is a number between zero inclusive and value of
.B numcards
(exclusive) returned by
.BR SNDCTL_SYSINFO .)
Alternatively, when
issuing the ioctl against a real mixer or
.B dsp
device, the special value
.B -1
can be used to indicate that the query is being made against the device
opened. If
.B -1
is used, the field is overwritten with the number for the
current hardware device on successful return.
.sp
The
.BR shortname ,
.BR longname ,
and \fBhw_info\fR contain \fBASCIIZ\fR
strings describing the device in more detail. The
.B hw_info
member can
contain multiple lines of detail, each line ending in a NEWLINE.
.sp
The flag, intr_count, and ack_count fields are not used by this
implementation.
.RE

.sp
.ne 2
.mk
.na
.B SNDCTL_MIXERINFO
.ad
.RS 20n
.rt
The argument is a pointer to a
.BR "struct oss_mixer_info" ,
which has the
following definition:
.sp
.in +2
.nf
typedef struct oss_mixerinfo {
  int dev;
  char id[16];/* Reserved */
  char name[32];
  int modify_counter;
  int card_number;
  int port_number;/* Reserved */
  char handle[32];/* Reserved */
  int magic;/* Reserved */
  int enabled;/* Reserved */
  int caps;/* Reserved */
  int flags;/* Reserved */
  int nrext;
  int priority;
  char devnode[32];/* Device special file name
                     (absolute path) */
  int legacy_device;/* Reserved */
  int filler[245];/* Reserved */
} oss_mixerinfo;
.fi
.in -2
.sp

In the above structure, all of the fields are reserved except the following:
.B "dev, name, modify_counter, card_number, nrext, priority,
and
.BR devnode .
The reserved fields are provided for compatibility with other OSS
implementations, and available for legacy applications.  New applications should
not attempt to use these fields.
.sp
The
.B dev
field should be initialized by the application to the number of
the device to query. This is a number between zero inclusive and value of
.B nummixers
(exclusive) returned by
.BR SNDCTL_SYSINFO ,
or by
.BR SNDCTL_MIX_NRMIX .
Alternatively, when issuing the ioctl against a real
mixer or
.B dsp
device, the special value
.B -1
can be used to indicate
that the query is being made against the device opened. If
.B -1
is used, the
field is overwritten with the mixer number for the current open file on
successful return.
.sp
No other fields are significant upon entry, but on successful return contains
details of the device.
.sp
The
.B name
field is a human readable name representing the device.
Applications should not try to interpret it.
.sp
The
.B modify_counter
is changed by the mixer framework each time the
settings for the various controls or extensions of the device are changed.
Applications can poll this value to learn if any other changes need to be
searched for.
.sp
The
.B card_number
field is the number of the aggregate audio device this
mixer is located on. It can be used with the
.B SNDCTL_CARDINFO
ioctl.
.sp
The
.B nrext
field is the number of mixer extensions available on this mixer.
See the
.B SNDCTL_MIX_NREXT
description.
.sp
The priority is used by the framework to assign a preference that applications
can use in choosing a device. Higher values are preferable. Mixers with
priorities less than -1 should never be selected by default.
.sp
The
.B devnode
field contains the actual full path to the device node for the
physical mixer, such as
.BR /dev/sound/audio810:0mixer .
Applications should
open this file to access the mixer settings.
.RE

.SS "Mixer Extension IOCTLs"
.sp
.LP
The pseudo
.B /dev/mixer
device supports ioctls that can change the
various settings for the audio hardware in the system.
.sp
.LP
Those ioctls should only be used by dedicated mixer applications  or desktop
volume controls, and not by typical ordinary audio applications such as media
players. Ordinary applications that wish to adjust their own volume settings
should use the
.B SNDCTL_DSP_SETPLAYVOL
or
.B SNDCTL_DSP_SETRECVOL
ioctls
for that purpose.  See \fBdsp\fR(7I) for more information.  Ordinary applications
should never attempt to change master port selection or hardware settings such as
monitor gain settings.
.sp
.LP
The ioctls in this section can only be used to access the mixer device that is
associated with the current file descriptor.
.sp
.LP
Applications should not assume that a single
.B /dev/mixer
node is able to
access any physical settings. Instead, they should use the ioctl
.B SNDCTL_MIXERINFO
to determine the device path for the real mixer device,
and issue ioctls on a file descriptor opened against the corresponding
.B devnode
field.
.sp
.LP
When a
.B dev
member is specified in each of the following ioctls, the
application should specify
.BR -1 ,
although for compatibility the mixer allows
the application to specify the mixer device number.
.sp
.ne 2
.mk
.na
.B SNDCTL_MIX_NRMIX
.ad
.RS 23n
.rt
The argument is a pointer to an integer, which receives the number of mixer
devices in the system. Each can be queried by using its number with the
.B SNDCTL_MIXERINFO
ioctl. The same information is available using the
.B SNDCTL_SYSINFO
ioctl.
.RE

.sp
.ne 2
.mk
.na
.B SNDCTL_MIX_NREXT
.ad
.RS 23n
.rt
The argument is a pointer to an integer. On entry, the integer should contain
the special value
.BR -1 .
On return the argument receives the number of mixer
extensions (or mixer controls) supported by the mixer device. More details about
each extension can be obtained by
.B SNDCTL_MIX_EXTINFO
ioctl.
.RE

.sp
.ne 2
.mk
.na
.B SNDCTL_MIX_EXTINFO
.ad
.RS 23n
.rt
The argument is a pointer to an
.B oss_mixext
structure which is defined as
follows:
.sp
.in +2
.nf
typedef struct oss_mixext {
   int dev;  /* Mixer device number */
   int ctrl;  /* Extension number */
   int type;  /* Entry type */
   int maxvalue;
   int minvalue;
   int flags;
   char id[16];  /* Mnemonic ID (internal use) */
   int parent;   /* Entry# of parent
                    (-1 if root) */
   int dummy;   /* NOT SUPPORTED */
   int timestamp;
   char data[64];  /* Reserved */
   unsigned char enum_present[32];  /* Mask
                                       of allowed
                                       enum
                                       values */
   int control_no;  /* Reserved */
   unsigned int desc;  /* NOT SUPPORTED */
   char extname[32];
   int update_counter;
   int filler[7];  /* Reserved */
} oss_mixext;
.fi
.in -2
.sp

On entry, the
.B dev
field should be initialized to the value
.BR -1 ,
and
the
.B ctrl
field should be initialized with the number of the extension being
accessed. Between 0, inclusive, and the value returned by
.BR SNDCTL_MIX_NREXT ,
exclusive.
.sp
Mixer extensions are organized as a logical tree, starting with a root node. The
root node always has a
.B ctrl
value of zero. The structure of the tree can be
determined by looking at the parent field, which contains the extension number of
the parent extension, or
.B -1
if the extension is the root extension.
.sp
The type indicates the type of extension used. This implementation supports the
following values:
.sp
.in +2
.nf
MIXT_DEVROOT      Root node for extension tree
MIXT_GROUP        Logical grouping of controls
MXIT_ONOFF        Boolean value, 0 = off, 1 = on.
MIXT_ENUM         Enumerated value, 0 to maxvalue.
MIXT_MONOSLIDER   Monophonic slider, 0 to 255.
MIXT_STEREOSLIDER Stereophonic slider, 0 to 255
                  (encoded as
                  lower two bytes in value.)
MIXT_MARKER       Place holder, can ignore.
.fi
.in -2
.sp

The flags field is a bit array. This implementation makes use of the following
possible bits:
.sp
.in +2
.nf
MIXF_READABLE    Extension's value is readable.
MIXF_WRITEABLE   Extension's value is modifiable.
MIXF_POLL        Extension can self-update.
MIXF_PCMVOL      Extension is for master
                 PCM playback volume.
MIXF_MAINVOL     Extension is for a typical
                 analog volume
MIXF_RECVOL      Extension is for master
                 record gain.
MIXF_MONVOL      Extension is for a monitor
                 source's gain.
.fi
.in -2
.sp

The
.B id
field contains an
.B ASCIIZ
identifier for the extension.
.sp
The timestamp field is set when the extension tree is first initialized.
Applications must use the same timestamp value when attempting to change the
values. A change in the timestamp indicates a change a in the structure of the
extension tree.
.sp
The
.B enum_present
field is a bit mask of possible enumeration values. If a
bit is present in the
.B enum_present
mask, then the corresponding enumeration
value is legal. The mask is in little endian order.
.sp
The
.B desc
field provides information about scoping, which can be useful as
layout hints to applications. The following hints are available:
.sp
.in +2
.nf
MIXEXT_SCOPE_MASK    Mask of possible scope
                     values.
MIXEXT_SCOPE_INPUT   Extension is an input
                     control.
MIXEXT_SCOPE_OUTPUT  Extension is an
                     output control.
MIXEXT_SCOPE_MONITOR Extension relates to
                     input monitoring.
MIXEXT_SCOPE_OTHER   No scoping hint provided.
.fi
.in -2
.sp

The
.B extname
is the full name of the extension.
.sp
The
.B update_counter
is incremented each time the control's value is
changed.
.RE

.sp
.ne 2
.mk
.na
.B SNDCTL_MIX_ENUMINFO
.ad
.RS 23n
.rt
The argument is a pointer to an
.B oss_mixer_enuminfo
structure, which is
defined as follows:
.sp
.in +2
.nf
typedef struct oss_mixer_enuminfo {
   int dev;
   int ctrl;
   int nvalues;
   int version;
   short strindex[255];
   char strings[3000];
} oss_mixer_enuminfo;
.fi
.in -2
.sp

On entry, the
.B dev
field should be initialized to the value
.BR -1 ,
and
the
.B ctrl
field should be initialized with the number of the extension being
accessed. Between 0, inclusive, and the value returned by
.BR SNDCTL_MIX_NREXT ,
exclusive.
.sp
On return the
.B nvalues
field contains the number of values, and
.B strindex
contains an array of indices into the strings member, each index
pointing to an
.B ASCIIZ
describing the enumeration value.
.RE

.sp
.ne 2
.mk
.na
.B SNDCTL_MIX_READ
.ad
.br
.na
.B SNDCTL_MIX_WRITE
.ad
.RS 23n
.rt
The argument is a pointer to an
.B oss_mixer_value
structure, defined as
follows:
.sp
.in +2
.nf
typedef struct oss_mixer_value {
   int dev;
   int ctrl;
   int value;
   int flags;  /* Reserved for future use.
                  Initialize to 0 */
   int timestamp;  /* Must be set to
                      oss_mixext.timestamp */
   int filler[8];  /* Reserved for future use.
                      Initialize to 0 */
} oss_mixer_value;
.fi
.in -2
.sp

On entry, the
.B dev
field should be initialized to the value
.BR -1 ,
and
the
.B ctrl
field should be initialized with the number of the extension being
accessed. Between 0, inclusive, and the value returned by
.BR SNDCTL_MIX_NREXT ,
exclusive. Additionally, the timestamp member must be initialized to the same
value as was supplied in the
.B oss_mixext
structure used with
.BR SNDCTL_MIX_EXTINFO .
.sp
For
.BR SNDCTL_MIX_WRITE ,
the application should supply the new value for the
extension. For
.BR SNDCTL_MIX_READ ,
the mixer returns the extensions current
value in value.
.RE

.SS "Compatibility IOCTLs"
.sp
.LP
The following ioctls are for compatibility use only:
.sp
.in +2
.nf
SOUND_MIXER_READ_VOLUME
SOUND_MIXER_READ_PCM
SOUND_MIXER_READ_OGAIN
SOUND_MIXER_READ_RECGAIN
SOUND_MIXER_READ_RECLEV
SOUND_MIXER_READ_IGAIN
SOUND_MIXER_READ_RECSRC
SOUND_MIXER_READ_RECMASK
SOUND_MIXER_READ_DEVMASK
SOUND_MIXER_READ_STEREODEVS
SOUND_MIXER_WRITE_VOLUME
SOUND_MIXER_WRITE_PCM
SOUND_MIXER_WRITE_OGAIN
SOUND_MIXER_WRITE_RECGAIN
SOUND_MIXER_WRITE_RECLEV
SOUND_MIXER_WRITE_IGAIN
SOUND_MIXER_WRITE_RECSRC
SOUND_MIXER_WRITE_RECMASK
SOUND_MIXER_INFO
SNDCTL_AUDIOINFO_EX
SNDCTL_ENGINEINFO
.fi
.in -2
.sp

.sp
.LP
These ioctls can affect the software volume levels associated with the calling
process. They have no effect on the physical hardware levels or settings. They
should not be used in new applications.
.SH ERRORS
.sp
.LP
An
.B ioctl()
fails if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The parameter changes requested in the ioctl are invalid or are not supported by
the device.
.RE

.sp
.ne 2
.mk
.na
.B ENXIO
.ad
.RS 10n
.rt
The device or extension referenced does not exist.
.RE

.SH FILES
.sp
.ne 2
.mk
.na
.B /dev/mixer
.ad
.RS 16n
.rt
Symbolic link to the pseudo mixer device for the system
.RE

.sp
.ne 2
.mk
.na
.B /dev/sndstat
.ad
.RS 16n
.rt
Sound status device
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(1.8i) |cw(3.7i)
lw(1.8i) |lw(3.7i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
ArchitectureSPARC, x86
_
AvailabilitySUNWcsu, SUNWaudd, SUNWaudh
_
Stability LevelSee below.
.TE

.sp
.LP
The information and mixer extension IOCTLs are Uncommitted. The Compatibility
IOCTLs are Obsolete Uncommitted. The extension names are Uncommitted.
.SH SEE ALSO
.sp
.LP
.BR close (2),
.BR ioctl (2),
.BR open (2),
,
.BR read (2),
.BR attributes (5),
.BR dsp (7I)
.SH BUGS
.sp
.LP
The names of mixer extensions are not guaranteed to be predictable.
