'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH visual_io 7I "14 Oct 2005" "SunOS 5.11" "Ioctl Requests"
.SH NAME
visual_io \- Solaris VISUAL I/O control operations
.SH SYNOPSIS
.LP
.nf
\fB#include <sys/visual_io.h>\fR
.fi

.SH DESCRIPTION
.sp
.LP
The Solaris VISUAL environment defines a small set of ioctls for
controlling graphics and imaging devices.
.sp
.LP
The
.B VIS_GETIDENTIFIER
ioctl is mandatory and must be implemented in
device drivers for graphics devices using the Solaris VISUAL environment.
The
.B VIS_GETIDENTIFIER
ioctl is defined to return a device identifier
from the device driver. This identifier must be a uniquely-defined string.
.sp
.LP
There are two additional sets of ioctls. One supports mouse tracking via
hardware cursor operations. Use of this set is optional, however, if a
graphics device has hardware cursor support and implements these ioctls, the
mouse tracking performance is improved. The remaining set supports the
device acting as the system console device. Use of this set is optional, but
if a graphics device is to be used as the system console device, it must
implement these ioctls.
.sp
.LP
The VISUAL environment also defines interfaces for non-ioctl entry points
into the driver that the Solaris operating environment calls when it is
running in standalone  mode (for example, when using a stand-alone
debugger, entering  the  PROM  monitor, or when the system panicking). These
are also known as "Polled I/O" entry points, which operate under an an
explicit set of  restrictions, described below.
.SH IOCTLS
.sp
.ne 2
.mk
.na
.B VIS_GETIDENTIFIER
.ad
.RS 21n
.rt
This
.B ioctl()
returns an identifier string to uniquely identify a
device used in the Solaris VISUAL environment.  This is a mandatory ioctl
and must return a unique string. We suggest that the name be formed as
\fI<companysymbol><devicetype>\fR\&. For example, the
.B cgsix
driver
returns
.BR SUNWcg6 .
.sp
.B VIS_GETIDENTIFIER
takes a
.B vis_identifier
structure as its
parameter. This structure has the form:
.sp
.in +2
.nf
#define VIS_MAXNAMELEN 128
struct vis_identifier {
       char name[VIS_MAXNAMELEN];
};
.fi
.in -2

.RE

.sp
.ne 2
.mk
.na
.B VIS_GETCURSOR
.ad
.br
.na
.B VIS_SETCURSOR
.ad
.RS 21n
.rt
These ioctls fetch and set various cursor attributes, using the
.B vis_cursor
structure.
.sp
.in +2
.nf
struct vis_cursorpos {
	   short	x;	     /* cursor x coordinate */
	   short	y;	     /* cursor y coordinate */
};

struct vis_cursorcmap {
	  int	version;	         /* version */
	  int	reserved;
	  unsigned char *red;  /* red color map elements */
	  unsigned char *green;/* green color map elements */
	  unsigned char *blue; /* blue color map elements */
};

#define VIS_CURSOR_SETCURSOR   0x01  /* set cursor */
#define VIS_CURSOR_SETPOSITION 0x02  /* set cursor position */
#define VIS_CURSOR_SETHOTSPOT  0x04  /* set cursor hot spot */
#define VIS_CURSOR_SETCOLORMAP 0x08  /* set cursor colormap */
#define VIS_CURSOR_SETSHAPE 0x10     /* set cursor shape */
#define VIS_CURSOR_SETALL	\e
    (VIS_CURSOR_SETCURSOR | VIS_CURSOR_SETPOSITION | \e
    VIS_CURSOR_SETHOTSPOT | VIS_CURSOR_SETCOLORMAP | \e
    VIS_CURSOR_SETSHAPE)

struct vis_cursor {
    short set;                    /* what to set */
    short enable;                 /* cursor on/off */
    struct vis_cursorpos pos;     /* cursor position */
    struct  vis_cursorpos hot;    /* cursor hot spot */
    struct vis_cursorcmap cmap;   /* color map info */
    struct vis_cursorpos size;    /* cursor bitmap size */
    char  *image;                 /* cursor image bits */
    char  *mask;                  /* cursor mask bits */
};
.fi
.in -2

.RE

.sp
.LP
The
.B vis_cursorcmap
structure should contain pointers to two elements,
specifying the red, green, and blue values for foreground and background.
.sp
.ne 2
.mk
.na
.B VIS_SETCURSORPOS
.ad
.br
.na
.B VIS_MOVECURSOR
.ad
.RS 20n
.rt
These ioctls fetch and move the current cursor position, using the
.B vis_cursorpos
structure.
.RE

.SS "Console Optional Ioctls"
.sp
.LP
The following ioctl sets are used by graphics drivers that are part of the
system console device. All of the ioctls must be implemented to be a
console device.  In addition, if the system does not have a prom or the prom
goes away during boot, the special standalone ioctls (listed below) must
also be implemented.
.sp
.LP
The coordinate system for the console device places 0,0 at the upper left
corner of the device, with rows increasing toward the bottom of the device
and columns increasing from left to right.
.sp
.ne 2
.mk
.na
.B VIS_PUTCMAP
.ad
.br
.na
.B VIS_GETCMAP
.ad
.RS 15n
.rt
Set or get color map entries.
.RE

.sp
.LP
The argument is a pointer to a
.B vis_cmap
structure, which contains the
following fields:
.sp
.in +2
.nf
struct vis_cmap {
    int	index;
    int	count;
    uchar_t	*red;
    uchar_t	*green;
    uchar_t	*blue;
}
.fi
.in -2

.sp
.LP
.B index
is the starting index in the color map where you want to start
setting or getting color map entries.
.sp
.LP
.B count
is the number of color map entries to set or get.  It also is
the size of the
.BR red ,
.BR green ,
and
.B blue
color arrays.
.sp
.LP
.BR *red ,
.BR *green ,
and
.B *blue
are pointers to unsigned
character arrays which contain the color map info to set or where the color
map info is placed on a get.
.sp
.ne 2
.mk
.na
.B VIS_DEVINIT
.ad
.RS 15n
.rt
Initializes the graphics driver as a console device.
.RE

.sp
.LP
The argument is a pointer to a
.B vis_devinit
structure. The graphics
driver is expected to allocate any local state information needed to be a
console device and fill in this structure.
.sp
.in +2
.nf
struct vis_devinit {
    int  version;
    screen_size_t  width;
    screen_size_t  height;
    screen_size_t  linebytes;
    unit_t	size;
    int	   depth;
    short  mode;
    struct vis_polledio    *polledio;
    vis_modechg_cb_t       modechg_cb;
    struct vis_modechg_arg *modechg_arg;
};
.fi
.in -2

.sp
.LP
.B version
is the version of this structure and should be set to
.BR VIS_CONS_REV .
.sp
.LP
.B width
and
.B height
are the width and height of the device.  If
.B mode
(see below) is
.B VIS_TEXT
then
.B width
and
.BR height
are the number of characters wide and high of the device. If
.B mode
is
.B VIS_PIXEL
then
.B width
and
.B height
are the number of pixels
wide and high of the device.
.sp
.LP
.B linebytes
is the number of bytes per line of the device.
.sp
.LP
.B size
is the total size of the device in pixels.
.sp
.LP
.B depth
is the pixel depth in device bits. Currently supported depths
are:
.BR 1 ,
.BR 4 ,
.B 8
and
.BR 24 .
.sp
.LP
.B mode
is the mode of the device.  Either
.B VIS_PIXEL
(data to be
displayed is in bitmap format) or
.B VIS_TEXT
(data to be displayed is in
ascii format).
.sp
.LP
.B polledio
is used to pass the address of the structure containing the
standalone mode polled I/O entry points to the device driver back to the
terminal emulator. The
.B vis_polledio
interfaces are described in the
Console Standalone Entry Points section of this manpage. These entry points
are where the operating system enters the driver when the system is running
in standalone mode. These functions perform identically to the
VIS_CONSDISPLAY, VIS_CONSCURSOR and VIS_CONSCOPY ioctls, but are called
directly by the Solaris operating environment and must operate under a very
strict set of assumptions.
.sp
.LP
.B modechg_cb
is a callback function passed from the terminal emulator
to the framebuffer driver which the frame-buffer driver must call whenever a
video mode change event occurs that changes the screen height, width or
depth. The callback takes two arguments, an opaque handle,
.BR modechg_arg ,
and the address of a vis_devinit struct containing the
new video mode information.
.sp
.LP
.B modechg_arg
is an opaque handle passed from the terminal emulator to
the driver, which the driver must pass back to the terminal emulator as an
argument to the
.B modechg_cb
function when the driver notifies the
terminal emulator of a video mode change.
.sp
.ne 2
.mk
.na
.B VIS_DEVFINI
.ad
.RS 18n
.rt
Tells the graphics driver that it is no longer the system console device.
There is no argument to this ioctl. The driver is expected to free any
locally kept state information related to the console.
.RE

.sp
.ne 2
.mk
.na
.B VIS_CONSCURSOR
.ad
.RS 18n
.rt
Describes the size and placement of the cursor on the screen. The graphics
driver is expected to display or hide the cursor at the indicated
position.
.RE

.sp
.LP
The argument is a pointer to a
.B vis_conscursor
structure which
contains the following fields:
.sp
.in +2
.nf
struct vis_conscursor {
    screen_pos_t   row;
    screen_pos_t   col;
    screen_size_t  width;
    screen_size_t  height
    color_t        fg_color;
    color_t        bg_color;
    short          action;
};
.fi
.in -2

.sp
.LP
.B row
and
.B col
are the first row and column (upper left corner of
the cursor).
.sp
.LP
.B width
and
.B height
are the width and height of the cursor.
.sp
.LP
If
.B mode
in the
.B VIS_DEVINIT
ioctl is set to
.BR VIS_PIXEL ,
then
.BR col ,
.BR row ,
.B width
and
.B height
are in pixels. If
.B mode
in the
.B VIS_DEVINIT
ioctl was set to
.BR VIS_TEXT ,
then
.BR col ,
.BR row ,
.B width
and
.B height
are in characters.
.sp
.LP
.B fg_color
and
.B bg_color
are the foreground and background color
map indexes to use when the
.B action
(see below) is set to
.BR VIS_DISPLAY_CURSOR .
.sp
.LP
.B action
indicates whether to display or hide the cursor.  It is set to
either
.B VIS_HIDE_CURSOR
or
.BR VIS_DISPLAY_CURSOR .
.sp
.ne 2
.mk
.na
.B VIS_CONSDISPLAY
.ad
.RS 19n
.rt
Display data on the graphics device. The graphics driver is expected to
display the data contained in the
.B vis_display
structure at the
specified position on the console.
.RE

.sp
.LP
The
.B vis_display
structure contains the following fields:
.sp
.in +2
.nf
struct vis_display {
    screen_pos_t   row;
    screen_pos_t   col;
    screen_size_t  width;
    screen_size_t  height;
    uchar_t        *data;
    color_t        fg_color;
    color_t        bg_color;
};
.fi
.in -2

.sp
.LP
.B row
and
.B col
specify at which starting row and column the date
is to be displayed. If
.B mode
in the
.B VIS_DEVINIT
ioctl was set to
.BR VIS_TEXT ,
.B row
and
.B col
are defined to be a character
offset from the starting  position of the console device. If
.B mode
in
the
.B VIS_DEVINIT
ioctl was set to
.BR VIS_PIXEL ,
.B row
and
.B col
are defined to be a pixel offset from the starting position of
the console device.
.sp
.LP
.B width
and
.B height
specify the size of the
.B data
to be
displayed. If
.B mode
in the
.B VIS_DEVINIT
ioctl was set to
.BR VIS_TEXT ,
.B width
and
.B height
define the size of
.BR data
as a rectangle that is
.B width
characters wide and
.BR height
characters high. If
.B mode
in the
.B VIS_DEVINIT
ioctl was set to
.BR VIS_PIXEL ,
.B width
and
.B height
define the size of
.BR data
as a rectangle that is
.B width
pixels wide and
.B height
pixels
high.
.sp
.LP
.B *data
is a pointer to the data to be displayed on the console device.
If
.B mode
in the
.B VIS_DEVINIT
ioctl was set to
.BR VIS_TEXT ,
.B data
is an array of
.B ASCII
characters to be displayed on the
console device. The driver must break these characters up appropriately and
display it in  the retangle defined by
.BR row ,
.BR col ,
.BR width ,
and
.BR height .
If
.B mode
in the
.B VIS_DEVINIT
ioctl was set to
.BR VIS_PIXEL ,
.B data
is an array of bitmap data to be displayed on
the console device.  The driver must break this data up appropriately and
display it in the retangle defined by
.BR row ,
.BR col ,
.BR width ,
and
.BR height .
.sp
.LP
The
.BR fg_color " and "
.B bg_color
fields define the foreground and
background color map indexes to use when displaying the data.
.B fb_color
is used for "on" pixels and \fBbg_color\fR is used for "off" pixels.
.sp
.ne 2
.mk
.na
.B VIS_CONSCOPY
.ad
.RS 16n
.rt
Copy data from one location on the device to another.  The driver is
expected to copy the specified data.  The source data should not be
modified. Any modifications to the source data should be as a side effect of
the copy destination overlapping the copy source.
.RE

.sp
.LP
The argument is a pointer to a
.B vis_copy
structure which contains the
following fields:
.sp
.in +2
.nf
struct vis_copy {
    screen_pos_t  s_row;
    screen_pos_t  s_col;
    screen_pos_t  e_row;
    screen_pos_t  e_col;
    screen_pos_t  t_row;
    screen_pos_t  t_col;
    short         direction;
};
.fi
.in -2

.sp
.LP
.BR s_row ,
.BR s_col ,
.BR e_row ,
and
.B e_col
define the source
rectangle of the copy.
.B s_row
and
.B s_col
are the upper left corner
of the source rectangle.
.B e_row
and
.B e_col
are the lower right
corner of the source rectangle. If
.B mode
in the
.BR VIS_DEVINIT
.B ioctl()
was set to
.BR VIS_TEXT ,
.BR s_row ,
.B s_col,
.B e_row,
and
.B e_col
are defined to be character offsets from the
starting position of the console device. If
.B mode
in the
.B VIS_DEVINIT
ioctl was set to
.BR VIS_PIXEL ,
.BR s_row ,
.B s_col, e_row,
and
.B e_col
are defined to be pixel offsets
from the starting  position of the console device.
.sp
.LP
.B t_row
and
.B t_col
define the upper left corner of the destination
rectangle of the copy. The entire rectangle is copied to this location. If
.B mode
in the
.B VIS_DEVINIT
ioctl was set to
.BR VIS_TEXT ,
.BR t_row ,
and
.B t_col
are defined to be character offsets from the
starting position of the console device.   If
.B mode
in the
.B VIS_DEVINIT
ioctl was set to
.BR VIS_PIXEL ,
.BR t_row ,
and
.B t_col
are defined to be pixel offsets from the starting position of
the console device.
.sp
.LP
.B direction
specifies which way to do the copy.  If direction is
.B VIS_COPY_FORWARD
the graphics driver should copy data from position
.RB ( s_row ,
.BR s_col )
in the source rectangle to position
.RB ( t_row ,
.BR t_col )
in the destination rectangle. If direction is
.B VIS_COPY_BACKWARDS
the graphics driver should copy data from position
.RB ( e_row ,
.BR e_col )
in the source rectangle to position
.BR (t_row+(e_row-s_row) ,
.B t_col+(e_col-s_col))
in the destination
rectangle.
.SS "Console Standalone Entry Points  (Polled I/O Interfaces)"
.sp
.LP
Console standalone entry points are necessary only if the driver is
implementing console-compatible extensions. All console vectored standalone
entry points must be implemented along with all console-related ioctls if
the console extension is implemented.
.sp
.in +2
.nf
struct vis_polledio {
    struct vis_polledio_arg *arg;
    void    (*display)(vis_polledio_arg *, struct vis_consdisplay *);
    void    (*copy)(vis_polledio_arg *, struct vis_conscopy *);
    void    (*cursor)(vis_polledio_arg *, struct vis_conscursor *);
};
.fi
.in -2

.sp
.LP
The
.B vis_polledio
structure is passed from the driver to the Solaris
operating environment, conveying the entry point addresses of three
functions which perform the same operations of their similarly named ioctl
counterparts. The rendering parameters for each entry point are derived from
the same structure passed as the respective ioctl. See the Console Optional
Ioctls section of this manpage for an explanation of the specific function
each of the entry points, display(), copy() and cursor() are required to
implement. In addition to performing the prescribed function of their ioctl
counterparts, the standalone vectors operate in a special context and must
adhere to a strict set of rules. The polled I/O vectors are called directly
whenever the system is quisced (running in a limited context) and must send
output to the display. Standalone mode describes the state in which the
system is running in single-threaded mode and only one processor is active.
Solaris operating environment services are stopped, along with all other
threads on the system, prior to entering any of the polled I/O interfaces.
The polled I/O vectors are called when the system is running in a standalone
debugger, when executing the PROM monitor (OBP) or when panicking.
.sp
.LP
The following restrictions must be observed in the polled I/O functions:
.RS +4
.TP
1.
The driver must not allocate memory.
.RE
.RS +4
.TP
2.
The driver must not wait on mutexes.
.RE
.RS +4
.TP
3.
The driver must not wait for interrupts.
.RE
.RS +4
.TP
4.
The driver must not call any DDI or LDI services.
.RE
.RS +4
.TP
5.
The driver must not call any system services.
.RE
.sp
.LP
The system is single-threaded when calling these functions, meaning that
all other threads are effectively halted. Single-threading makes mutexes
(which cannot be held) easier to deal with, so long as the driver does not
disturb any shared state. See
.I "Writing Device Drivers"
for more
information about implementing polled I/O entry points.
.SH SEE ALSO
.sp
.LP
.BR ioctl (2)
.sp
.LP
.I Writing Device Drivers
.SH NOTES
.sp
.LP
On SPARC systems, compatible drivers supporting the kernel terminal
emulator should export the
.B tem-support
DDI property.\fBtem-support\fR
indicates that the driver supports the kernel terminal emulator. By
exporting
.B tem-support
it's possible to avoid premature handling of an
incompatible driver.
.sp
.ne 2
.mk
.na
.B tem-support
.ad
.RS 15n
.rt
This DDI property, set to 1, means driver is compatible with the console
kernel framebuffer interface.
.RE

