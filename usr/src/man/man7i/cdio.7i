'\" te
.\" Copyright (c) 2001, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH cdio 7I "4 Oct 2001" "SunOS 5.11" "Ioctl Requests"
.SH NAME
cdio \- CD-ROM control operations
.SH SYNOPSIS
.LP
.nf
\fB#include <sys/cdio.h>\fR
.fi

.SH DESCRIPTION
.sp
.LP
The set of
.BR ioctl (2)
commands described below are used to perform
audio and
.B CD-ROM
specific operations. Basic to these
.B cdio
ioctl
requests are the definitions in \fB<sys/cdio.h>\fR\&.
.sp
.LP
Several
.B CD-ROM
specific commands can report addresses either in
.B LBA
(Logical Block Address) format or in
.B MSF
(Minute, Second,
Frame) format. The
.BR "READ HEADER" ,
.BR "READ SUBCHANNEL" ,
and \fBREAD
TABLE OF CONTENTS\fR commands have this feature.
.sp
.LP
.B LBA
format represents the logical block address for the
.BR CD-ROM
absolute address field or for the offset from the beginning of the current
track expressed as a number of logical blocks in a
.B CD-ROM
track
relative address field.
.B MSF
format represents the physical address
written on
.B CD-ROM
discs, expressed as a sector count relative to
either the beginning of the medium or the beginning of the current track.
.SH IOCTLS
.sp
.LP
The following
.B I/O
controls do not have any additional data passed
into or received from them.
.sp
.ne 2
.mk
.na
.B CDROMSTART
.ad
.RS 18n
.rt
This
.B ioctl()
spins up the disc and seeks to the last address
requested.
.RE

.sp
.ne 2
.mk
.na
.B CDROMSTOP
.ad
.RS 18n
.rt
This
.B ioctl()
spins down the disc.
.RE

.sp
.ne 2
.mk
.na
.B CDROMPAUSE
.ad
.RS 18n
.rt
This
.B ioctl()
pauses the current audio play operation.
.RE

.sp
.ne 2
.mk
.na
.B CDROMRESUME
.ad
.RS 18n
.rt
This
.B ioctl()
resumes the paused audio play operation.
.RE

.sp
.ne 2
.mk
.na
.B CDROMEJECT
.ad
.RS 18n
.rt
This
.B ioctl()
ejects the caddy with the disc.
.RE

.sp
.ne 2
.mk
.na
.B CDROMCLOSETRAY
.ad
.RS 18n
.rt
This
.B ioctl()
closes the caddy with the disc.
.RE

.sp
.LP
The following
.B I/O
controls require a pointer to the structure for
that
.BR ioctl() ,
with data being passed into the
.BR ioctl() .
.sp
.ne 2
.mk
.na
.B CDROMPLAYMSF
.ad
.RS 19n
.rt
This
.B ioctl()
command requests the drive to output the audio signals
at the specified starting address and continue the audio play until the
specified ending address is detected. The address is in
.B MSF
format.
The third argument of this
.B ioctl()
call is a pointer to the type
\fBstruct cdrom_msf\fR.
.sp
.in +2
.nf
/*
 * definition of play audio msf structure
 */
struct cdrom_msf {
	unsigned char	cdmsf_min0;	/* starting minute*/
	unsigned char	cdmsf_sec0;	/* starting second*/
	unsigned char	cdmsf_frame0;	/*starting frame*/
	unsigned char	cdmsf_min1;	/* ending minute */
	unsigned char	cdmsf_sec1;	/* ending second */
	unsigned char	cdmsf_frame1;	/* ending frame */
};
.fi
.in -2

The
.B CDROMREADTOCENTRY
ioctl request may be used to obtain the start
time for a track. An approximation of the finish time can be obtained by
using the
.B CDROMREADTOCENTRY
ioctl request to retrieve the start time
of the track following the current track.
.sp
The leadout track is the next consecutive track after the last audio track.
Hence, the start time of the leadout track may be used as the effective
finish time of the  last audio track.
.RE

.sp
.ne 2
.mk
.na
.B CDROMPLAYTRKIND
.ad
.RS 19n
.rt
This
.B ioctl()
command is similar to
.BR CDROMPLAYMSF .
The starting
and ending address is in track/index format. The third argument of the
.B ioctl()
call is a pointer to the type
.BR "struct cdrom_ti" .
.sp
.in +2
.nf
/*
 * definition of play audio track/index structure
 */
struct cdrom_ti {
	unsigned char	cdti_trk0;	/* starting track*/
	unsigned char	cdti_ind0;	/* starting index*/
	unsigned char	cdti_trk1;	/* ending track */
	unsigned char	cdti_ind1;	/* ending index */
};
.fi
.in -2

.RE

.sp
.ne 2
.mk
.na
.B CDROMVOLCTRL
.ad
.RS 19n
.rt
This
.B ioctl()
.RB "command controls the audio output level. The" " SCSI"
command allows the control of up to four channels. The current
implementation of the supported
.B CD-ROM
drive only uses channel 0 and
channel 1. The valid values of volume control are between 0x00 and 0xFF,
with a value of 0xFF indicating maximum volume. The third argument of the
.B ioctl()
call is a pointer to
.B "struct cdrom_volctrl"
which
contains the output volume values.
.sp
.in +2
.nf
/*
 * definition of audio volume control structure
 */
struct cdrom_volctrl {
	unsigned char	channel0;
	unsigned char	channel1;
	unsigned char	channel2;
	unsigned char	channel3;
};
.fi
.in -2

.RE

.sp
.LP
The following
.B I/O
controls take a pointer that will have data
returned to the user program from the
.B CD-ROM
driver.
.sp
.ne 2
.mk
.na
.B CDROMREADTOCHDR
.ad
.RS 21n
.rt
This
.B ioctl()
command returns the header of the  table of contents
(TOC). The header consists of the starting tracking number and the ending
track number of the disc. These two numbers are returned through a pointer
of
.BR "struct cdrom_tochdr" .
While the disc can start at any number, all
tracks between the first and last tracks are in contiguous ascending
order.
.sp
.in +2
.nf
/*
 * definition of read toc header structure
 */
struct cdrom_tochdr {
	unsigned char	cdth_trk0;	/* starting track*/
	unsigned char	cdth_trk1;	/* ending track*/
};
.fi
.in -2

.RE

.sp
.ne 2
.mk
.na
.B CDROMREADTOCENTRY
.ad
.RS 21n
.rt
This
.B ioctl()
command returns the information of a specified track.
The third argument of the function call is a pointer to the type \fBstruct
cdrom_tocentry\fR. The caller needs to supply the track number and the
address format. This command will return a 4-bit
.B adr
field, a 4-bit
.B ctrl
field, the starting address in
.B MSF
format or
.BR LBA
format, and the data mode if the track is a data track. The
.B ctrl
field
specifies whether the track is data or audio.
.sp
.in +2
.nf
/*
 * definition of read toc entry structure
 */
struct cdrom_tocentry {
	unsigned char  cdte_track;
	unsigned char  cdte_adr   :4;
	unsigned char  cdte_ctrl   :4;
	unsigned char  cdte_format;
	union {
		struct {
			unsigned char  minute;
			unsigned char  second;
			unsigned char  frame;
		} msf;
		int	lba;
	} cdte_addr;
	unsigned char  cdte_datamode;
};
.fi
.in -2

To get the information from the leadout track, the following value is
appropriate for the
.B cdte_track
field:
.sp
.ne 2
.mk
.na
.B CDROM_LEADOUT
.ad
.RS 17n
.rt
Leadout track
.RE

To get the information from the data track, the following value is
appropriate for the
.B cdte_ctrl
field:
.sp
.ne 2
.mk
.na
.B CDROM_DATA_TRACK
.ad
.RS 20n
.rt
Data track
.RE

The following values are appropriate for the
.B cdte_format
field:
.sp
.ne 2
.mk
.na
.B CDROM_LBA
.ad
.RS 13n
.rt
.B LBA
format
.RE

.sp
.ne 2
.mk
.na
.B CDROM_MSF
.ad
.RS 13n
.rt
.B MSF
format
.RE

.RE

.sp
.ne 2
.mk
.na
.B CDROMSUBCHNL
.ad
.RS 21n
.rt
This
.B ioctl()
command reads the Q sub-channel data of the current
block. The subchannel data includes track number, index number, absolute
.B CD-ROM
address, track relative
.B CD-ROM
address, control data and
audio status. All information is returned through a pointer to  \fBstruct
cdrom_subchnl\fR. The caller needs to supply the address format for the
returned address.
.sp
.in +2
.nf
struct cdrom_subchnl {
	unsigned char	cdsc_format;
	unsigned char	cdsc_audiostatus;
	unsigned char	cdsc_adr:	4;
	unsigned char	cdsc_ctrl:	4;
	unsigned char	cdsc_trk;
	unsigned char	cdsc_ind;
	union {
		struct {
			unsigned char 	minute;
			unsigned char 	second;
			unsigned char 	frame;
		} msf;
		int	lba;
	} cdsc_absaddr;
	union {
		struct {
			unsigned char 	minute;
			unsigned char 	second;
			unsigned char 	frame;
		} msf;
		int	lba;
	} cdsc_reladdr;
};
.fi
.in -2

The following values are valid for the audio status field returned from
.B READ SUBCHANNEL
command:
.sp
.ne 2
.mk
.na
.B CDROM_AUDIO_INVALID
.ad
.RS 25n
.rt
Audio status not supported.
.RE

.sp
.ne 2
.mk
.na
.B CDROM_AUDIO_PLAY
.ad
.RS 25n
.rt
Audio play operation in progress.
.RE

.sp
.ne 2
.mk
.na
.B CDROM_AUDIO_PAUSED
.ad
.RS 25n
.rt
Audio play operation paused.
.RE

.sp
.ne 2
.mk
.na
.B CDROM_AUDIO_COMPLETED
.ad
.RS 25n
.rt
Audio play successfully completed.
.RE

.sp
.ne 2
.mk
.na
.B CDROM_AUDIO_ERROR
.ad
.RS 25n
.rt
Audio play stopped due to error.
.RE

.sp
.ne 2
.mk
.na
.B CDROM_AUDIO_NO_STATUS
.ad
.RS 25n
.rt
No current audio status to return.
.RE

.RE

.sp
.ne 2
.mk
.na
.B CDROMREADOFFSET
.ad
.RS 21n
.rt
This
.B ioctl()
command returns the absolute
.B CD-ROM
address of the
first track in the last session of a Multi-Session
.BR CD-ROM .
The third
argument of the
.B ioctl()
call is a pointer to an
.BR int .
.RE

.sp
.ne 2
.mk
.na
.B CDROMCDDA
.ad
.RS 21n
.rt
This
.B ioctl()
command returns the
.B CD-DA
data or the subcode
data. The third argument of the
.B ioctl()
call is a pointer to the type
.BR "struct cdrom_cdda" .
In addition to allocating memory and supplying its
address, the caller needs to supply the starting address of the data, the
transfer length in terms of the number of blocks to be transferred, and the
.RB "subcode options. The caller also needs to issue the" " CDROMREADTOCENTRY"
.B ioctl()
to find out which tracks contain
.B CD-DA
data before
issuing this
.BR ioctl() .
.sp
.in +2
.nf
/*
 * Definition of CD-DA structure
 */
struct cdrom_cdda {
	unsigned int	cdda_addr;
	unsigned int	cdda_length;
	caddr_t		cdda_data;
	unsigned char	cdda_subcode;
};
.fi
.in -2

.B cdda_addr
signifies the starting logical block address.
.sp
.B cdda_length
signifies the transfer length in blocks. The length of
the block depends on the
.B cdda_subcode
selection, which is explained
below.
.sp
To get the subcode information related to
.B CD-DA
data, the following
values are appropriate for the
.B cdda_subcode
field:
.sp
.ne 2
.mk
.na
.B CDROM_DA_NO_SUBCODE
.ad
.RS 25n
.rt
.B CD-DA
data with no subcode.
.RE

.sp
.ne 2
.mk
.na
.B CDROM_DA_SUBQ
.ad
.RS 25n
.rt
.B CD-DA
data with sub Q code.
.RE

.sp
.ne 2
.mk
.na
.B CDROM_DA_ALL_SUBCODE
.ad
.RS 25n
.rt
.B CD-DA
data with all subcode.
.RE

.sp
.ne 2
.mk
.na
.B CDROM_DA_SUBCODE_ONLY
.ad
.RS 25n
.rt
All subcode only.
.RE

To allocate the memory related to
.B CD-DA
and/or subcode data, the
following values are appropriate for each data  block transferred:
.sp
.ne 2
.mk
.na
.B CD-DA
data with no subcode\fR
.ad
.sp .6
.RS 4n
2352 bytes
.RE

.sp
.ne 2
.mk
.na
.B CD-DA
data with sub Q code\fR
.ad
.sp .6
.RS 4n
2368 bytes
.RE

.sp
.ne 2
.mk
.na
.B CD-DA
data with all subcode\fR
.ad
.sp .6
.RS 4n
2448 bytes
.RE

.sp
.ne 2
.mk
.na
.B All subcode only
.ad
.sp .6
.RS 4n
96 bytes
.RE

.RE

.sp
.ne 2
.mk
.na
.B CDROMCDXA
.ad
.RS 21n
.rt
This
.B ioctl()
command returns the
.B "CD-ROM XA"
(CD-ROM
Extended Architecture) data according to
.B "CD-ROM XA"
format. The
third argument of the
.B ioctl()
call is a pointer to the type \fBstruct
cdrom_cdxa\fR. In addition to allocating memory and supplying its address,
the caller needs  to supply the starting address of the data, the transfer
length in terms of number of blocks, and the format. The caller also needs
to issue the
.B "CDROMREADTOCENTRY ioctl()"
to find out which tracks
contain
.B "CD-ROM XA"
data before issuing this
.BR ioctl() .
.sp
.in +2
.nf
/*
 * Definition of CD-ROM XA structure
 */
struct cdrom_cdxa {
	unsigned int	cdxa_addr;
	unsigned int	cdxa_length;
	caddr_t		cdxa_data;
	unsigned char	cdxa_format;
};
.fi
.in -2

To get the proper
.B "CD-ROM XA"
data, the following values are
appropriate for the
.B cdxa_format
field:
.sp
.ne 2
.mk
.na
.B CDROM_XA_DATA
.ad
.RS 25n
.rt
.B CD-ROM XA
data only
.RE

.sp
.ne 2
.mk
.na
.B CDROM_XA_SECTOR_DATA
.ad
.RS 25n
.rt
.B CD-ROM XA
all sector data
.RE

.sp
.ne 2
.mk
.na
.B CDROM_XA_DATA_W_ERROR
.ad
.RS 25n
.rt
.B CD-ROM XA
data with error flags data
.RE

To allocate the memory related to
.B "CD-ROM XA"
format, the
following values are appropriate for each data  block transferred:
.sp
.ne 2
.mk
.na
.B CD-ROM XA
data only\fR
.ad
.sp .6
.RS 4n
2048 bytes
.RE

.sp
.ne 2
.mk
.na
.B CD-ROM XA
all sector data\fR
.ad
.sp .6
.RS 4n
2352 bytes
.RE

.sp
.ne 2
.mk
.na
.B CD-ROM XA
data with error flags data\fR
.ad
.sp .6
.RS 4n
2646 bytes
.RE

.RE

.sp
.ne 2
.mk
.na
.B CDROMSUBCODE
.ad
.RS 21n
.rt
This
.B ioctl()
command returns raw subcode data (subcodes P ~ W are
described in  the "Red Book," see \fBSEE ALSO\fR) to the initiator while the
target is  playing audio. The third argument of the
.B ioctl()
call is a
pointer to the type
.BR "struct cdrom_subcode" .
The caller needs to supply
the transfer length in terms of number of blocks and allocate memory for
subcode data. The memory allocated should be a multiple of 96  bytes
depending on the transfer length.
.sp
.in +2
.nf
/*
 * Definition of subcode structure
 */
struct cdrom_subcode {
	unsigned int	cdsc_length;
	caddr_t		cdsc_addr;
};
.fi
.in -2

.RE

.sp
.LP
The next group of
.B I/O
controls get and set various
.B CD-ROM
drive
parameters.
.sp
.ne 2
.mk
.na
.B CDROMGBLKMODE
.ad
.RS 18n
.rt
This
.B ioctl()
command returns the current block size used by the
.B CD-ROM
drive.  The third argument of the
.B ioctl()
call is a
pointer to an integer.
.RE

.sp
.ne 2
.mk
.na
.B CDROMSBLKMODE
.ad
.RS 18n
.rt
This
.B ioctl()
command requests the
.B CD-ROM
drive to change from
the current block size to the requested block size. The third argument of
the
.B ioctl()
call is an integer which contains the requested block
size.
.sp
This
.B ioctl()
command operates in exclusive-use mode only. The caller
must ensure  that no other processes can operate on the same
.BR CD-ROM
device before issuing this
.BR ioctl() .
.BR read (2)
behavior subsequent
to this
.B ioctl()
remains the same: the caller is still constrained to
read the raw device on block boundaries and in block multiples.
.sp
To set the proper block size, the following values are appropriate:
.sp
.ne 2
.mk
.na
.B CDROM_BLK_512
.ad
.RS 18n
.rt
512 bytes
.RE

.sp
.ne 2
.mk
.na
.B CDROM_BLK_1024
.ad
.RS 18n
.rt
1024 bytes
.RE

.sp
.ne 2
.mk
.na
.B CDROM_BLK_2048
.ad
.RS 18n
.rt
2048 bytes
.RE

.sp
.ne 2
.mk
.na
.B CDROM_BLK_2056
.ad
.RS 18n
.rt
2056 bytes
.RE

.sp
.ne 2
.mk
.na
.B CDROM_BLK_2336
.ad
.RS 18n
.rt
2336 bytes
.RE

.sp
.ne 2
.mk
.na
.B CDROM_BLK_2340
.ad
.RS 18n
.rt
2340 bytes
.RE

.sp
.ne 2
.mk
.na
.B CDROM_BLK_2352
.ad
.RS 18n
.rt
2352 bytes
.RE

.sp
.ne 2
.mk
.na
.B CDROM_BLK_2368
.ad
.RS 18n
.rt
2368 bytes
.RE

.sp
.ne 2
.mk
.na
.B CDROM_BLK_2448
.ad
.RS 18n
.rt
2448 bytes
.RE

.sp
.ne 2
.mk
.na
.B CDROM_BLK_2646
.ad
.RS 18n
.rt
2646 bytes
.RE

.sp
.ne 2
.mk
.na
.B CDROM_BLK_2647
.ad
.RS 18n
.rt
2647 bytes
.RE

.RE

.sp
.ne 2
.mk
.na
.B CDROMGDRVSPEED
.ad
.RS 18n
.rt
This
.B ioctl()
command returns the current
.B CD-ROM
drive speed.
The third argument of the
.B ioctl()
call is a pointer to an integer.
.RE

.sp
.ne 2
.mk
.na
.B CDROMSDRVSPEED
.ad
.RS 18n
.rt
This
.B ioctl()
command requests the
.B CD-ROM
drive to change the
current drive speed to the requested drive speed. This speed setting is only
applicable when reading data areas. The third argument of the  \fBioctl()\fR
is an integer which contains the requested drive speed.
.sp
To set the
.B CD-ROM
drive to the proper speed, the following values
are appropriate:
.sp
.ne 2
.mk
.na
.B CDROM_NORMAL_SPEED
.ad
.RS 23n
.rt
150k/second
.RE

.sp
.ne 2
.mk
.na
.B CDROM_DOUBLE_SPEED
.ad
.RS 23n
.rt
300k/second
.RE

.sp
.ne 2
.mk
.na
.B CDROM_QUAD_SPEED
.ad
.RS 23n
.rt
600k/second
.RE

.sp
.ne 2
.mk
.na
.B CDROM_MAXIMUM_SPEED
.ad
.RS 23n
.rt
300k/second (2x drive) 600k/second (4x drive)
.RE

Note that these numbers are only accurate when reading 2048 byte blocks.
The
.B CD-ROM
drive will automatically switch to normal speed when
playing audio tracks  and will switch back to the speed setting when
accessing data.
.RE

.SH SEE ALSO
.sp
.LP
.BR ioctl (2),
.BR read (2)
.sp
.LP
N. V. Phillips and Sony Corporation, \fISystem Description Compact Disc
Digital Audio\fR, ("Red Book").
.sp
.LP
N. V. Phillips and Sony Corporation, \fISystem Description of Compact Disc
Read Only Memory\fR, ("Yellow Book").
.sp
.LP
N. V. Phillips, Microsoft, and Sony Corporation, \fISystem Description
CD-ROM XA\fR, 1991.
.sp
.LP
.IR "Volume and File Structure of CD-ROM for Information Interchange" ,
ISO
9660:1988(E).
.sp
.LP
.I "SCSI-2 Standard," document X3T9.2/86-109
.sp
.LP
.I "SCSI Multimedia Commands, Version 2 (MMC-2)
.SH NOTES
.sp
.LP
The
.BR CDROMCDDA ,
.BR CDROMCDXA ,
.BR CDROMSUBCODE ,
.BR CDROMGDRVSPEED ,
.BR CDROMSDRVSPEED ,
and some of the block sizes in
.B CDROMSBLKMODE
are designed for new Sun-supported
.B CD-ROM
drives
and might not work on some of the older
.B CD-ROM
drives.
.sp
.LP
CDROMCDDA, CDROMCDXA and CDROMSUBCODE will return error if the transfer
length exceeds valid limits as determined appropriate. Example: for MMC-2
drives, length can not exceed 3 bytes (i.e. 0xffffff).  The same restriction
is enforced for older, pre-MMC-2 drives, as no limit was published for these
older drives (and 3 bytes is reasonable for all media). Note that enforcing
this limit does not imply that values passed in below this limit will
actually be applicable for each and every piece of media.
.sp
.LP
The interface to this device is preliminary and subject to change in future
releases. Programs should be written in  a modular fashion so that future
changes can be easily incorporated.
