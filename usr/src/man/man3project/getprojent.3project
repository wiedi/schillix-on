'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH getprojent 3PROJECT "5 Apr 2004" "SunOS 5.11" "Project Database Access Library Functions"
.SH NAME
getprojent, getprojbyname, getprojbyid, getdefaultproj, inproj,
getprojidbyname, setprojent, endprojent, fgetprojent \- project database
entry operations
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \(milproject [ \fIlibrary\fR.\|.\|. ]
#include <project.h>

\fBstruct project *\fBgetprojent\fR(\fBstruct project *\fIproj\fR, \fBvoid *\fIbuffer\fR,
     \fBsize_t\fR \fIbufsize\fR);
.fi

.LP
.nf
\fBstruct project *\fBgetprojbyname\fR(\fBconst char *\fIname\fR,
     \fBstruct project *\fIproj\fR, \fBvoid *\fIbuffer\fR, \fBsize_t\fR \fIbufsize\fR);
.fi

.LP
.nf
\fBstruct project *\fBgetprojbyid\fR(\fBprojid_t\fR \fIprojid\fR,
     \fBstruct project *\fIproj\fR, \fBvoid *\fIbuffer\fR, \fBsize_t\fR \fIbufsize\fR);
.fi

.LP
.nf
\fBstruct project *\fBgetdefaultproj\fR(\fBconst char *\fIusername\fR,
     \fBstruct project *\fIproj\fR, \fBvoid *\fIbuffer\fR, \fBsize_t\fR \fIbufsize\fR);
.fi

.LP
.nf
\fBint\fR \fBinproj\fR(\fBconst char *\fIusername\fR, \fBconst char *\fIprojname\fR,
     \fBvoid *\fIbuffer\fR, \fBsize_t\fR \fIbufsize\fR);
.fi

.LP
.nf
\fBprojid_t\fR \fBgetprojidbyname\fR(\fBconst char *\fIname\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsetprojent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBvoid\fR \fBendprojent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBstruct project *\fBfgetprojent\fR(\fBFILE *\fIf\fR, \fBstruct project *\fIproj\fR,
     \fBvoid *\fIbuffer\fR, \fBsize_t\fR \fIbufsize\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions are used to obtain entries describing user projects. Entries
can come from any of the sources for a project specified in the
.B /etc/nsswitch.conf
file (see \fBnsswitch.conf\fR(4)).
.sp
.LP
The
.BR setprojent() ,
.BR getprojent() ,
and
.B endprojent()
functions
are used to enumerate project entries from the database.
.sp
.LP
The
.B setprojent()
function effectively rewinds the project database to
allow repeated searches. It sets (or resets) the enumeration to the beginning
of the set of project entries. This function should be called before the
first call to
.BR getprojent() .
.sp
.LP
The
.B getprojent()
function returns a pointer to a structure containing
the broken-out fields of an entry in the project database. When first called,
.B getprojent()
returns a pointer to a project structure containing the
first project structure in the project database. Successive calls can be used
to read the entire database.
.sp
.LP
The
.B endprojent()
function closes the project database and deallocates
resources when processing is complete. It is permissible, though possibly
less efficient, for the process to call more project functions after calling
.BR endprojent() .
.sp
.LP
The
.B getprojbyname()
function searches the project database for an
entry with the project name specified by the character string
.IR name .
.sp
.LP
The
.B getprojbyid()
function searches the project database for an entry
with the (numeric) project
.B ID
specified by
.IR projid .
.sp
.LP
The
.B getdefaultproj()
function first looks up the project key word in
the
.B user_attr
database used to define user attributes in restricted
Solaris environments. If the database is available and the keyword is
present, the function looks up the named project, returning
.I NULL
if it
cannot be found or if the user is not a member of the named project. If
absent, the function looks for a match in the project database for the
special project \fBuser\fR.\fIusername\fR. If no match is found, or if the
user is excluded from project \fBuser\fR.\fIusername\fR, the function looks
at the default group entry of the
.B passwd
database for the user, and
looks for a match in the project database for the special name
\fBgroup\fR.\fIgroupname\fR, where \fIgroupname\fR is the default group
associated with the password entry corresponding to the given
.IR username .
If no match is found, or if the user is excluded from project
\fBgroup\fR.\fIgroupname\fR, the function returns \fINULL\fR. A special
project entry called 'default' can be looked up and used as a last resort,
unless the user is excluded from project 'default'. On successful lookup,
this function returns a pointer to the valid
.B project
structure. By
convention, the user must have a default project defined on a system to be
able to log on to that system.
.sp
.LP
The
.B inproj()
function checks if the user specified by
.IR username
is able to use the project specified by
.IR projname .
This function returns
1 if the user belongs to the list of project's users, if there is a project's
group that contains the specified user, if project is a user's default
project, or if project's user or group list contains "*"  wildcard. In all
other cases it returns 0.
.sp
.LP
The
.B getprojidbyname()
function searches the project database for an
entry with the project name specified by the character string name. This
function returns the project ID if the requested entry is found; otherwise it
returns \(mi1.
.sp
.LP
The
.B fgetprojent()
function, unlike the other functions described
above, does not use
.BR nsswitch.conf ;
it reads and parses the next line
from the stream
.IR f ,
which is assumed to have the format of the
.BR project (4)
file. This function returns the same values as
.BR getprojent() .
.sp
.LP
The
.BR getprojent() ,
.BR getprojbyname() ,
.BR getprojbyid() ,
.BR getdefaultproj() ,
and
.B inproj()
functions are reentrant interfaces
for operations with the
.B project
database. These functions use buffers
supplied by the caller to store returned results and are safe for use in both
single-threaded and multithreaded applications.
.sp
.LP
Reentrant interfaces require the additional arguments
.IR proj ,
.IR buffer ,
and
.IR bufsize .
The
.I proj
argument must be a pointer to
a
.B "struct project"
structure allocated by the caller. On successful
completion, the function returns the project entry in this structure. Storage
referenced by the
.B project
structure is allocated from the memory
provided with the \fIbuffer\fR argument, which is \fIbufsize\fR bytes in
size. The  content  of the memory buffer could be lost in cases when these
functions return errors.
.sp
.LP
For enumeration in multithreaded applications, the position within the
enumeration is a process-wide property shared by all threads. The
.B setprojent()
function can be used in a multithreaded application but
resets the enumeration position for all threads. If multiple threads
interleave calls to
.BR getprojent() ,
the threads will enumerate disjoint
subsets of the project database. The
.BR inproj() ,
.BR getprojbyname() ,
.BR getprojbyid() ,
and
.B getdefaultproj()
functions leave the
enumeration position in an indeterminate state.
.SH RETURN VALUES
.sp
.LP
Project entries are represented by the
.B "struct project"
structure
defined in <\fBproject.h\fR>.
.sp
.in +2
.nf
struct project {
    char      *pj_name;     /* name of the project */
    projid_t  pj_projid;    /* numerical project id */
    char      *pj_comment;  /* project comment */
    char      **pj_users;   /* vector of pointers to
                               project user names */
    char      **pj_groups;  /* vector of pointers to
                               project group names */
    char      *pj_attr;     /* project attributes */
};
.fi
.in -2

.sp
.LP
The
.B getprojbyname()
and
.B getprojbyid()
functions each return a
pointer to a
.B "struct project"
if they successfully locate the requested
entry; otherwise they return
.IR NULL .
.sp
.LP
The
.B getprojent()
function returns a pointer to a
.BR "struct project"
if it successfully enumerates an entry; otherwise it returns
.IR NULL ,
indicating the end of the enumeration.
.sp
.LP
The
.B getprojidbyname()
function returns the project ID if the requsted
entry is found; otherwise it returns \(mi1 and sets errno to indicate the
error.
.sp
.LP
When the pointer returned by the reentrant functions
.BR getprojbyname() ,
.BR getprojbyid() ,
and
.B getprojent()
is non-null, it is always equal
to the
.I proj
pointer that was supplied by the caller.
.sp
.LP
Upon failure,
.B NULL
is returned and errno is set to indicate the
error.
.SH ERRORS
.sp
.LP
The
.BR getprojent() ,
.BR getprojbyname() ,
.BR getprojbyid() ,
.BR inproj() ,
.BR getprojidbyname() ,
.BR fgetprojent() ,
and
.B getdefaultproj()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 10n
.rt
A signal was caught during the operation.
.RE

.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 10n
.rt
An I/O error has occurred.
.RE

.sp
.ne 2
.mk
.na
.B EMFILE
.ad
.RS 10n
.rt
There are
.B OPEN_MAX
file descriptors currently open in the calling
process.
.RE

.sp
.ne 2
.mk
.na
.B ENFILE
.ad
.RS 10n
.rt
The maximum allowable number of files is currently open in the system.
.RE

.sp
.ne 2
.mk
.na
.B ERANGE
.ad
.RS 10n
.rt
Insufficient storage was supplied by \fIbuffer\fR and \fIbufsize\fR to
contain the data to be referenced by the resulting
.B project
structure.
.RE

.sp
.LP
These functions can also fail if the name service switch does not specify
valid
.BR project (4)
name service sources. In the case of an incompletely
configurated name service switch configuration,
.B getprojbyid()
and other
functions can return error values other than those documented above. These
conditions usually occur when the
.B nsswitch.conf
file indicates that one
or more name services is providing entries for the project database when that
name service does not actually make a project table available.
.SH USAGE
.sp
.LP
When compiling multithreaded applications, see
.BR Intro (3),
Notes On
Multithreaded Applications.
.sp
.LP
Use of the enumeration interface
.B getprojent()
is discouraged.
Enumeration is supported for the project file, NIS, and LDAP but in general
is not efficient. The semantics of enumeration are discussed further in
.BR nsswitch.conf (4).
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.64i) |cw(2.86i)
lw(2.64i) |lw(2.86i)
.
ATTRIBUTE  TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelSee Description.
.TE

.SH SEE ALSO
.sp
.LP
.BR Intro (3),
.BR libproject (3LIB),
.BR project_walk (3PROJECT),
.BR sysconf (3C),
.BR nsswitch.conf (4),
.BR project (4),
.BR attributes (5)
