'\" te
.\" Copyright (c) 2001, Sun Microsystems, Inc.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH aclcheck 3SEC "10 Dec 2001" "SunOS 5.11" "File Access Control Library Functions"
.SH NAME
aclcheck \- check the validity of an ACL
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR... ] \fIfile\fR... \fB-lsec\fR [ \fIlibrary\fR... ]
#include <sys/acl.h>

\fBint\fR \fBaclcheck\fR(\fBaclent_t *\fIaclbufp\fR, \fBint\fR \fInentries\fR, \fBint *\fIwhich\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBaclcheck()\fR function checks the validity of an \fBACL\fR pointed
to by \fIaclbufp.\fR The \fInentries\fR argument is the number of entries
contained in the buffer. The \fIwhich\fR parameter returns the index of the
first entry that is invalid.
.sp
.LP
The function verifies that an \fBACL\fR pointed to by \fIaclbufp\fR is
valid according to the following rules:
.RS +4
.TP
.ie t \(bu
.el o
There must be exactly one \fBGROUP_OBJ\fR \fBACL\fR entry.
.RE
.RS +4
.TP
.ie t \(bu
.el o
There must be exactly one \fBUSER_OBJ\fR \fBACL\fR entry.
.RE
.RS +4
.TP
.ie t \(bu
.el o
There must be exactly one \fBOTHER_OBJ\fR \fBACL\fR entry.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If there are any \fBGROUP\fR \fBACL\fR entries, then the group \fBID\fR in
each group \fBACL\fR entry must be unique.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If there are any \fBUSER\fR \fBACL\fR entries, then the user \fBID\fR in
each user \fBACL\fR entry must be unique.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If there are any \fBGROUP\fR or \fBUSER\fR \fBACL\fR entries, then there
must be exactly one \fBCLASS_OBJ\fR (\fBACL\fR mask) entry.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If there are any default \fBACL\fR entries, then the following apply:
.RS +4
.TP
.ie t \(bu
.el o
There must be exactly one default \fBGROUP_OBJ\fR \fBACL\fR entry.
.RE
.RS +4
.TP
.ie t \(bu
.el o
There must be exactly one default \fBOTHER_OBJ\fR \fBACL\fR entry.
.RE
.RS +4
.TP
.ie t \(bu
.el o
There must be exactly one default \fBUSER_OBJ\fR \fBACL\fR entry.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If there are any \fBDEF_GROUP\fR entries, then the group \fBID\fR in each
\fBDEF_GROUP\fR \fBACL\fR entry must be unique.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If there are any \fBDEF_USER\fR entries, then the user \fBID\fR in each
\fBDEF_USER\fR \fBACL\fR entry must be unique.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If there are any \fBDEF_GROUP\fR or \fBDEF_USER\fR entries, then there must
be exactly one \fBDEF_CLASS_OBJ\fR (default \fBACL\fR mask) entry.
.RE
.RE
.RS +4
.TP
.ie t \(bu
.el o
If any of the above rules are violated, then the function fails with
\fBerrno\fR set to  \fBEINVAL\fR.
.RE
.SH RETURN VALUES
.sp
.LP
If the \fBACL\fR is valid, \fBalcheck()\fR will return \fB0\fR. Otherwise
\fBerrno\fR is set to \fBEINVAL\fR and return code is set to one of the
following:
.sp
.ne 2
.mk
.na
\fBGRP_ERROR\fR
.ad
.RS 19n
.rt
There is more than one \fBGROUP_OBJ\fR or \fBDEF_GROUP_OBJ\fR \fBACL\fR
entry.
.RE

.sp
.ne 2
.mk
.na
\fBUSER_ERROR\fR
.ad
.RS 19n
.rt
There is more than one \fBUSER_OBJ\fR or \fBDEF_USER_OBJ\fR \fBACL\fR
entry.
.RE

.sp
.ne 2
.mk
.na
\fBCLASS_ERROR\fR
.ad
.RS 19n
.rt
There is more than one \fBCLASS_OBJ\fR (\fBACL\fR mask) or
\fBDEF_CLASS_OBJ\fR (default \fBACL\fR mask) entry.
.RE

.sp
.ne 2
.mk
.na
\fBOTHER_ERROR\fR
.ad
.RS 19n
.rt
There is more than one \fBOTHER_OBJ\fR or \fBDEF_OTHER_OBJ\fR \fBACL\fR
entry.
.RE

.sp
.ne 2
.mk
.na
\fBDUPLICATE_ERROR\fR
.ad
.RS 19n
.rt
Duplicate entries of \fBUSER\fR, \fBGROUP\fR, \fBDEF_USER\fR, or
\fBDEF_GROUP\fR.
.RE

.sp
.ne 2
.mk
.na
\fBENTRY_ERROR\fR
.ad
.RS 19n
.rt
The entry type is invalid.
.RE

.sp
.ne 2
.mk
.na
\fBMISS_ERROR\fR
.ad
.RS 19n
.rt
Missing an entry. The \fIwhich\fR parameter returns \fB\(mi1\fR in this
case.
.RE

.sp
.ne 2
.mk
.na
\fBMEM_ERROR\fR
.ad
.RS 19n
.rt
The system cannot allocate any memory. The \fBwhich\fR parameter returns
\fB\(mi1\fR in this case.
.RE

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
\fBacl\fR(2), \fBaclsort\fR(3SEC), \fBattributes\fR(5)
