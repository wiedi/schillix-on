'\" te
.\" This manual page is derived from the DAT/uDAPL 1.2 specification.
.\" Portions Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH dat_evd_modify_cno 3DAT "16 Jul 2004" "SunOS 5.11" "Direct Access Transport Library Functions"
.SH NAME
dat_evd_modify_cno \- change the associated CNO for the Event Dispatcher
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-ldat\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <\fBdat/udat.h\fR>

DAT_RETURN
    dat_evd_modify_cno (
    IN    DAT_EVD_HANDLE    \fIevd_handle\fR,
    IN    DAT_CNO_HANDLE    \fIcno_handle\fR
    )
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I evd_handle
.ad
.RS 14n
.rt
Handle for an instance of the Event Dispatcher.
.RE

.sp
.ne 2
.mk
.na
.I cno_handle
.ad
.RS 14n
.rt
Handle for a CNO. The value of
.B DAT_NULL_HANDLE
specifies no CNO.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B dat_evd_modify_cno()
function changes the associated CNO for the
Event Dispatcher.
.sp
.LP
A Consumer can specify the value of
.B DAT_HANDLE_NULL
for
.I cno_handle
to associate not CNO with the Event Dispatcher instance.
.sp
.LP
Upon completion of the
.B dat_evd_modify_cno()
operation, the passed IN
new CNO is used for notification. During the operation, an event arrival can
be delivered to the old or new CNO. If Notification is generated by EVD, it
is delivered to the new or old CNO.
.sp
.LP
If the EVD is enabled at the time
.B dat_evd_modify_cno()
is called, the
Consumer must be prepared to collect a notification event on the EVD's old
CNO as well as the new one. Checking immediately prior to calling
.B dat_evd_modify_cno()
is not adequate. A notification could have been
generated after the prior check and before the completion of the change.
.sp
.LP
The Consumer can avoid the risk of missed notifications either by
temporarily disabling the EVD, or by checking the prior CNO after invoking
this operation. The Consumer can disable EVD before a
.B dat_evd_modify_cno()
call and enable it afterwards. This ensures that
any notifications from the EVD are delivered to the new CNO only.
.sp
.LP
If this function is used to disassociate a CNO from the EVD, events
arriving on this EVD might cause waiters on that CNO to awaken after
returning from this routine because of unblocking a CNO waiter already "in
progress" at the time this routine is called. If this is the case, the
events causing that unblocking are present on the EVD upon return from the
.B dat_evd_modify_cno()
call and can be dequeued at that time
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B DAT_SUCCESS
.ad
.RS 22n
.rt
The operation was successful.
.RE

.sp
.ne 2
.mk
.na
.B DAT_INVALID_HANDLE
.ad
.RS 22n
.rt
Invalid DAT handle.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard: uDAPL, 1.1, 1.2
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libdat (3LIB),
.BR attributes (5)
