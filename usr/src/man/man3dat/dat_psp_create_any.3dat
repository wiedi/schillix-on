'\" te
.\" This manual page is derived from the DAT/uDAPL 1.2 specification.
.\" Portions Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH dat_psp_create_any 3DAT "16 Jul 2004" "SunOS 5.11" "Direct Access Transport Library Functions"
.SH NAME
dat_psp_create_any \- create a persistent Public Service Point
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-ldat\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <\fBdat/udat.h\fR>

DAT_RETURN
    dat_psp_create_any(
    IN    DAT_IA_HANDLE    \fIia_handle\fR,
    IN    DAT_CONN_QUAL    \fIconn_qual\fR,
    IN    DAT_EVD_HANDLE   \fIevd_handle\fR,
    IN    DAT_PSP_FLAGS    \fIpsp_flags\fR,
    OUT   DAT_PSP_HANDLE   *\fIpsp_handle\fR
    )
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I ia_handle
.ad
.RS 14n
.rt
Handle for an instance of DAT IA.
.RE

.sp
.ne 2
.mk
.na
.I conn_qual
.ad
.RS 14n
.rt
Connection Qualifier of the IA on which the Public Service Point is
listening.
.RE

.sp
.ne 2
.mk
.na
.I evd_handle
.ad
.RS 14n
.rt
Event Dispatcher that provides the Connection Requested Events to the
Consumer. The size of the event queue for the Event Dispatcher controls the
size of the backlog for the created Public Service Point.
.RE

.sp
.ne 2
.mk
.na
.I psp_flags
.ad
.RS 14n
.rt
Flag that indicates whether the Provider or Consumer creates an Endpoint
per arrived Connection Request. The value of \fBDAT_PSP_PROVIDER\fR
indicates that the Consumer wants to get an Endpoint from the Provider; a
value of
.B DAT_PSP_CONSUMER
means the Consumer does not want the
Provider to provide an Endpoint for each arrived Connection Request.
.RE

.sp
.ne 2
.mk
.na
.I psp_handle
.ad
.RS 14n
.rt
Handle to an opaque Public Service Point.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B dat_psp_create_any()
function creates a persistent Public Service
Point that can receive multiple requests for connection and generate
multiple Connection Request instances that are delivered through the
specified Event Dispatcher in Notification events.
.sp
.LP
The
.B dat_psp_create_any()
function allocates an unused Connection
Qualifier, creates a Public Service point for it, and returns both the
allocated Connection Qualifier and the created Public Service Point to the
Consumer.
.sp
.LP
The allocated Connection Qualifier should be chosen from "nonprivileged"
ports that are not currently used or reserved by any user or kernel Consumer
or host ULP of the IA. The format of allocated Connection Qualifier returned
is specific to IA transport type.
.sp
.LP
The
.B dat_psp_create_any()
function is blocking. When the Public
Service Point is created,
.B DAT_SUCCESS
.RI "is returned," " psp_handle"
contains a handle to an opaque Public Service Point Object, and
.I conn_qual
contains the allocated Connection Qualifier. When return is
not
.BR DAT_SUCCESS ,
.I psp_handle
and
.I conn_qual
return values
are undefined.
.sp
.LP
There is no explicit backlog for a Public Service Point. Instead, Consumers
can control the size of backlog through the queue size of the associated
Event Dispatcher.
.sp
.LP
The
.I psp_flags
parameter allows Consumers to request that the Provider
create an implicit Endpoint for each incoming Connection Request, or request
that the Provider should not create one per Connection Request. If the
Provider cannot satisfy the request, the operation shall fail and
.B DAT_MODEL_NOT_SUPPORTED
is returned.
.sp
.LP
All Endpoints created by the Provider have
.B DAT_HANDLE_NULL
for the
Protection Zone and all Event Dispatchers. The Provider sets up Endpoint
attributes to match the Active side connection request. The Consumer can
change Endpoint parameters. Consumers should change Endpoint parameters,
especially PZ and EVD, and are advised to change parameters for local
accesses prior to the connection request acceptance with the Endpoint.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B DAT_SUCCESS
.ad
.RS 30n
.rt
The operation was successful.
.RE

.sp
.ne 2
.mk
.na
.B DAT_INSUFFICIENT_RESOURCES
.ad
.RS 30n
.rt
The operation failed due to resource limitations.
.RE

.sp
.ne 2
.mk
.na
.B DAT_INVALID_HANDLE
.ad
.RS 30n
.rt
The
.I ia_handle
or
.I evd_handle
parameter is invalid.
.RE

.sp
.ne 2
.mk
.na
.B DAT_INVALID_PARAMETER
.ad
.RS 30n
.rt
The
.I conn_qual
or
.I psp_flags
parameter is invalid.
.RE

.sp
.ne 2
.mk
.na
.B DAT_CONN_QUAL_UNAVAILABLE
.ad
.RS 30n
.rt
No Connection Qualifiers available.
.RE

.sp
.ne 2
.mk
.na
.B DAT_MODEL_NOT_SUPPORTED
.ad
.RS 30n
.rt
The requested Model was not supported by the Provider.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard: uDAPL, 1.1, 1.2
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libdat (3LIB),
.BR attributes (5)
