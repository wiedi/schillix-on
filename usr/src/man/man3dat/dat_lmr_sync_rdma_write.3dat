'\" te
.\" This manual page is derived from the DAT/uDAPL 1.2 specification.
.\" Portions Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH dat_lmr_sync_rdma_write 3DAT "16 Jul 2004" "SunOS 5.11" "Direct Access Transport Library Functions"
.SH NAME
dat_lmr_sync_rdma_write \- synchronize local memory with RDMA write on
non-coherent memory
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-ldat\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <\fBdat/udat.h\fR>

DAT_RETURN
    dat_lmr_sync_rdma_write (
    IN DAT_IA_HANDLE ia_handle,
    IN const DAT_LMR_TRIPLET *local_segments,
    IN DAT_VLEN num_segments
    )
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I ia_handle
.ad
.RS 18n
.rt
A handle for an open instance of the IA.
.RE

.sp
.ne 2
.mk
.na
.I local_segments
.ad
.RS 18n
.rt
An array of buffer segments.
.RE

.sp
.ne 2
.mk
.na
.I num_segments
.ad
.RS 18n
.rt
The number of segments in the
.I local_segments
argument.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B dat_lmr_sync_rdma_write()
function makes effects of an incoming
RDMA Write operation visible to the Consumer. This operation guarantees
consistency by locally invalidating the non-coherent cache whose buffer has
been populated by remote peer RDMA write operations.
.sp
.LP
The
.B dat_lmr_sync_rdma_write()
function is needed if and only if the
Provider attribute specifies that this operation is needed after an incoming
.RB "RDMA Write operation. The Consumer must call" " dat_lmr_sync_rdma_write()"
before reading data from a memory range in this region that was the target
of an incoming RDMA Write operation. The
.B dat_lmr_sync_rdma_write()
function must be called after the RDMA Write operation completes, and the
memory range that was modified by the RDMA Write must be supplied by the
caller in the
.I "local_ segments"
array. After this call returns, the
Consumer may safely see the modified contents of the memory range. It is
permissible to batch synchronizations of multiple RDMA Write operations in a
single call by passing a
.I local_segments
array that includes all
modified memory ranges. The
.I local_segments
entries need not contain
the same LMR and need not be in the same Protection Zone.
.sp
.LP
The Consumer must also use
.B dat_lmr_sync_rdma_write()
when performing
local writes to a memory range that was or will be the target of incoming
RDMA writes. After performing the local write, the Consumer must call
.B dat_lmr_sync_rdma_write()
before the RDMA Write is initiated.
Conversely, after an RDMA Write completes, the Consumer must call
.B dat_lmr_sync_rdma_write()
before performing a local write to the same
range.
.sp
.LP
If the Provider attribute specifies that this operation is needed and the
Consumer attempts to read from a memory range in an LMR without properly
synchronizing using
.BR dat_lmr_sync_rdma_write() ,
the returned contents
are undefined. If the Consumer attempts to write to a memory range without
properly synchronizing, the contents of the memory range become undefined.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B DAT_SUCCESS
.ad
.RS 25n
.rt
The operation was successful.
.RE

.sp
.ne 2
.mk
.na
.B DAT_INVALID_HANDLE
.ad
.RS 25n
.rt
The DAT handle is invalid.
.RE

.sp
.ne 2
.mk
.na
.B DAT_INVALID_PARAMETER
.ad
.RS 25n
.rt
One of the parameters is invalid. For example, the address range for a
local segment fell outside the boundaries of the corresponding Local Memory
Region or the LMR handle was invalid.
.RE

.SH USAGE
.sp
.LP
Determining when an RDMA Write completes and determining which memory range
was modified is the Consumer's responsibility. One possibility is for the
RDMA Write initiator to post a Send DTO message after each RDMA Write that
identifies the range in the body of the Send. The Consumer at the target of
the RDMA Write can receive the message and know when and how to call
.BR dat_lmr_sync_rdma_write() .
.sp
.LP
This call ensures that the Provider receives a coherent view of the buffer
contents after a subsequent remote RDMA Write operation. After the call
completes, the Consumer can be assured that all platform-specific buffer and
cache updates have been performed, and that the LMR range has consistency
with the Provider hardware. Any subsequent read by the Consumer can void
this consistency. The Provider is not required to detect such access.
.sp
.LP
The action performed on the cache before the RDMA Write depends on the
cache type:
.RS +4
.TP
.ie t \(bu
.el o
I/O noncoherent cache will be flushed.
.RE
.RS +4
.TP
.ie t \(bu
.el o
CPU noncoherent cache will be invalidated.
.RE
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard: uDAPL, 1.2
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR dat_lmr_sync_rdma_read (3DAT),
.BR libdat (3LIB),
.BR attributes (5)
