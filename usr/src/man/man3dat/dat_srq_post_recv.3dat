'\" te
.\" This manual page is derived from the DAT/uDAPL 1.2 specification.
.\" Portions Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH dat_srq_post_recv 3DAT "16 Jul 2004" "SunOS 5.11" "Direct Access Transport Library Functions"
.SH NAME
dat_srq_post_recv \- add receive buffers to shared receive queue
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-ldat\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <\fBdat/udat.h\fR>

DAT_RETURN
    dat_srq_post_recv (
    IN      DAT_SRQ_HANDLE      srq_handle,
    IN      DAT_COUNT           num_segments,
    IN      DAT_LMR_TRIPLET     *local_iov,
    IN      DAT_DTO_COOKIE      user_cookie
    )
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I srq_handle
.ad
.RS 16n
.rt
A handle for an instance of the SRQ.
.RE

.sp
.ne 2
.mk
.na
.I num_segments
.ad
.RS 16n
.rt
The number of
.I lmr_triplets
in
.IR local_iov .
Can be 0 for receiving
a zero-size message.
.RE

.sp
.ne 2
.mk
.na
.I local_iov
.ad
.RS 16n
.rt
An I/O Vector that specifies the local buffer to be filled.  Can be
\fINULL\fR for receiving a zero-size message.
.RE

.sp
.ne 2
.mk
.na
.I user_cookie
.ad
.RS 16n
.rt
A user-provided cookie that is returned to the Consumer at the completion of
the Receive DTO. Can be
.IR NULL .
.RE

.SH DESCRIPTION
.sp
.LP
The
.B dat_srq_post_recv()
function posts the receive buffer that can be
used for the incoming message into the
.I local_iov
by any connected EP
that uses SRQ.
.sp
.LP
The
.I num_segments
argument specifies the number of segments in the
.IR local_iov .
The
.I local_iov
segments are filled in the I/O Vector
order until the whole message is received. This ensures that all the front
segments of the
.I local_iov
I/O Vector are completely filled, only one
segment is partially filled, if needed, and all segments that follow it are
not filled at all. The actual order of segment fillings is left to the
implementation.
.sp
.LP
The
.I user_cookie
argument allows Consumers to have unique identifiers
for each DTO. These identifiers are completely under user control and are
opaque to the Provider. There is no requirement on the Consumer that the
value
.I user_cookie
should be unique for each DTO. The \fIuser_cookie\fR
is returned to the Consumer in the Completion event for the posted Receive.
.sp
.LP
The completion of the posted Receive is reported to the Consumer
asynchronously through a DTO Completion event based on the configuration of
the EP that dequeues the posted buffer and the specified
\fIcompletion_flags\fR value for Solicited Wait for the matching Send. If EP
Recv Completion Flag is
.BR DAT_COMPLETION_UNSIGNALLED_FLAG ,
which is the
default value for SRQ EP, then all posted Recvs will generate completions
with Signal Notifications.
.sp
.LP
A Consumer should not modify the
.I local_iov
or its content until the
DTO is completed. When a Consumer does not adhere to this rule, the behavior
of the Provider and the underlying Transport is not defined. Providers that
allow Consumers to get ownership of the
.I local_iov
but not the memory it
specified back after the
.B dat_srq_post_recv()
returns should document
this behavior and also specify its support in Provider attributes. This
behavior allows Consumer full control of the
.I local_iov
content after
\fBdat_srq_post_recv()\fR returns. Because this behavior is not guaranteed by
all Providers, portable Consumers shall not rely on this behavior. Consumers
shall not rely on the Provider copying
.I local_iov
information.
.sp
.LP
The
.B DAT_SUCCESS
return of the
.B dat_srq_post_recv()
is at least
the equivalent of posting a Receive operation directly by native Transport.
Providers shall avoid resource allocation as part of
\fBdat_srq_post_recv()\fR to ensure that this operation is nonblocking.
.sp
.LP
The completion of the Receive posted to the SRQ is equivalent to what
happened to the Receive posted to the Endpoint for the Endpoint that dequeued
the Receive buffer from the Shared Receive queue.
.sp
.LP
The posted Recv DTO will complete with signal, equivalently to the
completion of Recv posted directly to the Endpoint that dequeued the Recv
buffer from SRQ with
.B DAT_COMPLETION_UNSIGNALLED_FLAG
value not set for
it.
.sp
.LP
The posted Recv DTOs will complete in the order of Send postings to the
other endpoint of each connection whose local EP uses SRQ. There is no
ordering among different connections regardless if they share SRQ and
\fIrecv_evd\fR or not.
.sp
.LP
If the reported status of the Completion DTO event corresponding to the
posted RDMA Read DTO is not
.BR DAT_DTO_SUCCESS ,
the content of the
\fIlocal_iov\fR is not defined and the \fItransfered_length\fR in the DTO
Completion event is not defined.
.sp
.LP
The operation is valid for all states of the Shared Receive Queue.
.sp
.LP
The
.B dat_srq_post_recv()
function is asynchronous, nonblocking, and its
thread safety is Provider-dependent.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B DAT_SUCCESS
.ad
.RS 30n
.rt
The operation was successful.
.RE

.sp
.ne 2
.mk
.na
.B DAT_INVALID_HANDLE
.ad
.RS 30n
.rt
The
.I srq_handle
argument is an invalid DAT handle.
.RE

.sp
.ne 2
.mk
.na
.B DAT_INSUFFICIENT_RESOURCES
.ad
.RS 30n
.rt
The operation failed due to resource limitations.
.RE

.sp
.ne 2
.mk
.na
.B DAT_INVALID_PARAMETER
.ad
.RS 30n
.rt
Invalid parameter. For example, one of the IOV segments pointed to a memory
outside its LMR.
.RE

.sp
.ne 2
.mk
.na
.B DAT_PROTECTION_VIOLATION
.ad
.RS 30n
.rt
Protection violation for local or remote memory access.
.sp
Protection Zone mismatch between an LMR of one of the
.IR local_iov
segments and the SRQ.
.RE

.sp
.ne 2
.mk
.na
.B DAT_PRIVILEGES_VIOLATION
.ad
.RS 30n
.rt
Privileges violation for local or remote memory access.  One of the LMRs
used in local_iov was either invalid or did not have the local write
privileges.
.RE

.SH USAGE
.sp
.LP
For the best Recv operation performance, the Consumer should align each
buffer segment of
.I local_iov
to the Optimal Buffer Alignment attribute
of the Provider. For portable applications, the Consumer should align each
buffer segment of
.I local_iov
to the
.BR DAT_OPTIMAL_ALIGNMENT .
.sp
.LP
Since any of the Endpoints that use the SRQ can dequeue the posted buffer
from SRQ, Consumers should post a buffer large enough to handle incoming
message on any of these Endpoint connections.
.sp
.LP
The buffer posted to SRQ does not have a DTO completion flag value.  Posting
Recv buffer to SRQ is semantically equivalent to posting to EP with
\fBDAT_COMPLETION_UNSIGNALLED_FLAG\fR is not set. The configuration of the
Recv Completion flag of an Endpoint that dequeues the posted buffer defines
how DTO completion is generated. If the Endpoint Recv Completion flag is
\fBDAT_COMPLETION_SOLICITED_WAIT_FLAG\fR then matching Send DTO completion
flag value for Solicited Wait determines if the completion will be Signalled
or not. If the Endpoint Recv Completion flag is not
.BR DAT_COMPLETION_SOLICITED_WAIT_FLAG ,
the posted Recv completion will be
generated with Signal. If the Endpoint Recv Completion flag is
.BR DAT_COMPLETION_EVD_THRESHOLD_FLAG ,
the posted Recv completion will be
generated with Signal and
.I dat_evd_wait
threshold value controls if the
waiter will be unblocked or not.
.sp
.LP
Only the Endpoint that is in Connected or Disconnect Pending states can
dequeue buffers from SRQ. When an Endpoint is transitioned into Disconnected
state, all the buffers that it dequeued from SRQ are queued on the Endpoint
.IR recv_evd .
All the buffers that the Endpoint has not completed by the
time of transition into Disconnected state and that have not completed
message reception will be flushed.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard: uDAPL, 1.2
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR dat_srq_create (3DAT),
.BR dat_srq_free (3DAT),
.BR dat_srq_query (3DAT),
.BR dat_srq_resize (3DAT),
.BR dat_srq_set_lw (3DAT),
.BR libdat (3LIB),
.BR attributes (5)
