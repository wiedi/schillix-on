'\" te
.\" This manual page is derived from the DAT/uDAPL 1.2 specification.
.\" Portions Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH dat_ia_query 3DAT "16 Jul 2004" "SunOS 5.11" "Direct Access Transport Library Functions"
.SH NAME
dat_ia_query \- query an IA
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-ldat\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <\fBdat/udat.h\fR>

DAT_RETURN
    dat_ia_query (
    IN    DAT_IA_HANDLE           \fIia_handle\fR,
    OUT   DAT_EVD_HANDLE          *\fIasync_evd_handle\fR,
    IN    DAT_IA_ATTR_MASK        \fIia_attr_mask\fR,
    OUT   DAT_IA_ATTR             *\fIia_attributes\fR,
    IN    DAT_PROVIDER_ATTR_MASK  \fIprovider_attr_mask\fR,
    OUT   DAT_PROVIDER_ATTR       *\fIprovider_attributes\fR
    )
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I ia_handle
.ad
.RS 23n
.rt
Handle for an open instance of an IA.
.RE

.sp
.ne 2
.mk
.na
.I async_evd_handle
.ad
.RS 23n
.rt
Handle for an Event Dispatcher for asynchronous events generated by the
IA.
.RE

.sp
.ne 2
.mk
.na
.I ia_attr_mask
.ad
.RS 23n
.rt
Mask for the
.IR ia_attributes .
.RE

.sp
.ne 2
.mk
.na
.I ia_attributes
.ad
.RS 23n
.rt
Pointer to a Consumer-allocated structure that the Provider fills with IA
attributes.
.RE

.sp
.ne 2
.mk
.na
.I provider_attr_mask
.ad
.RS 23n
.rt
Mask for the
.IR provider_attributes .
.RE

.sp
.ne 2
.mk
.na
.I provider_attributes
.ad
.RS 23n
.rt
Pointer to a Consumer-allocated structure that the Provider fills with
Provider attributes.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B dat_ia_query()
functions provides the Consumer with the IA
parameters, as well as the IA and Provider attributes. Consumers pass in
pointers to Consumer-allocated structures for the IA and Provider attributes
that the Provider fills.
.sp
.LP
The
.I ia_attr_mask
and
.I provider_attr_mask
parameters allow the
Consumer to specify which attributes to query. The Provider returns values
for requested attributes. The Provider can also return values for any of the
other attributes.
.SS "Interface Adapter Attributes"
.sp
.LP
The IA attributes are common to all open instances of the IA. DAT defines a
method to query the IA attributes but does not define a method to modify
them.
.sp
.LP
If IA is multiported, each port is presented to a Consumer as a separate
IA.
.sp
.ne 2
.mk
.na
.B Adapter name:
.ad
.br
.na
\fR
.ad
.sp .6
.RS 4n
The name of the IA controlled by the Provider. The same as
.IR ia_name_ptr .
.RE

.sp
.ne 2
.mk
.na
.B Vendor name:
.ad
.sp .6
.RS 4n
Vendor if IA hardware.
.RE

.sp
.ne 2
.mk
.na
.B HW version major:
.ad
.sp .6
.RS 4n
Major version of IA hardware.
.RE

.sp
.ne 2
.mk
.na
.B HW version minor:
.ad
.sp .6
.RS 4n
Minor version of IA hardware.
.RE

.sp
.ne 2
.mk
.na
.B Firmware version major:
.ad
.sp .6
.RS 4n
Major version of IA firmware.
.RE

.sp
.ne 2
.mk
.na
.B Firmware version minor:
.ad
.sp .6
.RS 4n
Minor version of IA firmware.
.RE

.sp
.ne 2
.mk
.na
.B IA_address_ptr:
.ad
.sp .6
.RS 4n
An address of the interface Adapter.
.RE

.sp
.ne 2
.mk
.na
.B Max EPs:
.ad
.sp .6
.RS 4n
Maximum number of Endpoints that the IA can support. This covers all
Endpoints in all states, including the ones used by the Providers, zero or
more applications, and management.
.RE

.sp
.ne 2
.mk
.na
.B Max DTOs per EP:
.ad
.sp .6
.RS 4n
Maximum number of DTOs and RMR_binds that any Endpoint can support for a
single direction. This means the maximum number of outstanding and
in-progress Send, RDMA Read, RDMA Write DTOs, and RMR Binds at any one time
for any Endpoint; and maximum number of outstanding and in-progress Receive
DTOs at any one time for any Endpoint.
.RE

.sp
.ne 2
.mk
.na
.B "Max incoming RDMA Reads per EP:
.ad
.sp .6
.RS 4n
Maximum number of RDMA Reads that can be outstanding per (connected)
Endpoint with the IA as the target.
.RE

.sp
.ne 2
.mk
.na
.B "Max outgoing RDMA Reads per EP:
.ad
.sp .6
.RS 4n
Maximum number of RDMA Reads that can be outstanding per (connected)
Endpoint with the IA as the originator.
.RE

.sp
.ne 2
.mk
.na
.B Max EVDs:
.ad
.sp .6
.RS 4n
Maximum number of Event Dispatchers that an IA can support. An IA cannot
support an Event Dispatcher directly, but indirectly by Transport-specific
Objects, for example, Completion Queues for Infiniband\(tm and VI. The Event
Dispatcher Objects can be shared among multiple Providers and similar
Objects from other APIs, for example, Event Queues for uDAPL.
.RE

.sp
.ne 2
.mk
.na
.B Max EVD queue size:
.ad
.sp .6
.RS 4n
Maximum size of the EVD queue supported by an IA.
.RE

.sp
.ne 2
.mk
.na
.B Max IOV segments per DTO:
.ad
.sp .6
.RS 4n
Maximum entries in an IOV list that an IA supports. Notice that this number
cannot be explicit but must be implicit to transport-specific Object
entries. For example, for IB, it is the maximum number of scatter/gather
entries per Work Request, and for VI it is the maximum number of data
segments per VI Descriptor.
.RE

.sp
.ne 2
.mk
.na
.B Max LMRs:
.ad
.sp .6
.RS 4n
Maximum number of Local Memory Regions IA supports among all Providers and
applications of this IA.
.RE

.sp
.ne 2
.mk
.na
.B Max LMR block size:
.ad
.sp .6
.RS 4n
Maximum contiguous block that can be registered by the IA.
.RE

.sp
.ne 2
.mk
.na
.B Mac LMR VA:
.ad
.sp .6
.RS 4n
Highest valid virtual address within the context of an LMR. Frequently, IAs
on 32-bit architectures support only 32-bit local virtual addresses.
.RE

.sp
.ne 2
.mk
.na
.B Max PZs:
.ad
.sp .6
.RS 4n
Maximum number of Protection Zones that the IA supports.
.RE

.sp
.ne 2
.mk
.na
.B Max MTU size:
.ad
.sp .6
.RS 4n
Maximum message size supported by the IA
.RE

.sp
.ne 2
.mk
.na
.B Max RDMA size:
.ad
.sp .6
.RS 4n
Maximum RDMA size supported by the IA
.RE

.sp
.ne 2
.mk
.na
.B Max RMRs:
.ad
.sp .6
.RS 4n
Maximum number of RMRs an IA supports among all Providers and applications
of this IA.
.RE

.sp
.ne 2
.mk
.na
.B Max RMR target address:
.ad
.sp .6
.RS 4n
Highest valid target address with the context of a local RMR. Frequently,
IAs on 32-bit architectures support only 32-bit local virtual addresses.
.RE

.sp
.ne 2
.mk
.na
.B Num transport attributes:
.ad
.sp .6
.RS 4n
Number of transport-specific attributes.
.RE

.sp
.ne 2
.mk
.na
.B Transport-specific attributes:
.ad
.sp .6
.RS 4n
Array of transport-specific attributes. Each entry has the format of
.BR DAT_NAMED_ATTR ,
which is a structure with two elements. The first
element is the name of the attribute. The second element is the value of the
attribute as a string.
.RE

.sp
.ne 2
.mk
.na
.B Num vendor attributes:
.ad
.sp .6
.RS 4n
Number of vendor-specific attributes.
.RE

.sp
.ne 2
.mk
.na
.B Vendor-specific attributes:
.ad
.sp .6
.RS 4n
Array of vendor-specific attributes. Each entry has the format of
.BR DAT_NAMED_ATTR ,
which is a structure with two elements. The first
element is the name of the attribute. The second element is the value of the
attribute as a string.
.RE

.SS "DAPL Provider Attributes"
.sp
.LP
The provider attributes are specific to the open instance of the IA. DAT
defines a method to query Provider attributes but does not define a method
to modify them.
.sp
.ne 2
.mk
.na
.B Provider name:
.ad
.sp .6
.RS 4n
Name of the Provider vendor.
.RE

.sp
.ne 2
.mk
.na
.B Provider version major:
.ad
.sp .6
.RS 4n
Major Version of uDAPL Provider.
.RE

.sp
.ne 2
.mk
.na
.B Provider version minor:
.ad
.sp .6
.RS 4n
Minor Version of uDAPL Provider.
.RE

.sp
.ne 2
.mk
.na
.B DAPL API version major:
.ad
.sp .6
.RS 4n
Major Version of uDAPL API supported.
.RE

.sp
.ne 2
.mk
.na
.B DAPL API version minor:
.ad
.sp .6
.RS 4n
Minor Version of uDAPL API supported.
.RE

.sp
.ne 2
.mk
.na
.B LMR memory types supported:
.ad
.sp .6
.RS 4n
Memory types that LMR Create supports for memory registration. This value
is a union of LMR Memory Types
.BR DAT_MEM_TYPE_VIRTUAL ,
.BR DAT_MEM_TYPE_LMR ,
and
.B DAT_MEM_TYPE_SHARED_VIRTUAL
that the
Provider supports. All Providers must support the following Memory Types:
.BR DAT_MEM_TYPE_VIRTUAL ,
.BR DAT_MEM_TYPE_LMR ,
and
.BR DAT_MEM_TYPE_SHARED_VIRTUAL .
.RE

.sp
.ne 2
.mk
.na
.B IOV ownership:
.ad
.sp .6
.RS 4n
An enumeration flag that specifies the ownership of the local buffer
description (IOV list) after post DTO returns. The three values are as
follows:
.RS +4
.TP
.ie t \(bu
.el o
.B DAT_IOV_CONSUMER
indicates that the Consumer has the ownership of the
local buffer description after a post returns.
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DAT_IOV_PROVIDER_NOMOD
indicates that the Provider still has
ownership of the local buffer description of the DTO when the post DTO
returns, but the Provider does not modify the buffer description.
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B DAT_IOV_PROVIDER_MOD
indicates that the Provider still has ownership
of the local buffer description of the DTO when the post DTO returns and can
modify the buffer description.
.RE
In any case, the Consumer obtains ownership of the local buffer description
after the DTO transfer is completed and the Consumer is notified through a
DTO completion event.
.RE

.sp
.ne 2
.mk
.na
.B QOS supported:
.ad
.sp .6
.RS 4n
The union of the connection QOS supported by the Provider.
.RE

.sp
.ne 2
.mk
.na
.B Completion flags supported:
.ad
.sp .6
.RS 4n
The following values for the completion flag
.B DAT_COMPLETION_FLAGS
are
supported by the Provider:
.BR DAT_COMPLETION_SUPPRESS_FLAG ,
.BR DAT_COMPLETION_UNSIGNALLED_FLAG ,
.BR DAT_COMPLETION_SOLICITED_WAIT_FLAG ,
and
.BR DAT_COMPLETION_BARRIER_FENCE_FLAG .
.RE

.sp
.ne 2
.mk
.na
.B Thread safety:
.ad
.sp .6
.RS 4n
Provider Library thread safe or not. The Provider Library is not required
to be thread safe.
.RE

.sp
.ne 2
.mk
.na
.B Max private data size:
.ad
.sp .6
.RS 4n
Maximum size of private data the Provider supports. This value is at least
64 bytes.
.RE

.sp
.ne 2
.mk
.na
.B Multipathing support:
.ad
.sp .6
.RS 4n
Capability of the Provider to support Multipathing for connection
establishment.
.RE

.sp
.ne 2
.mk
.na
.B EP creator for PSP:
.ad
.sp .6
.RS 4n
Indicator for who can create an Endpoint for a Connection Request. For the
Consumer it is
.BR DAT_PSP_CREATES_EP_NEVER .
For the Provider it is
.BR DAT_PSP_CREATES_EP_ALWAYS .
For both it is
.BR DAT_PSP_CREATES_EP_IFASKED .
This attribute is used for Public Service
Point creation.
.RE

.sp
.ne 2
.mk
.na
.B PZ support:
.ad
.sp .6
.RS 4n
Indicator of what kind of protection the Provider's PZ provides.
.RE

.sp
.ne 2
.mk
.na
.B Optimal Buffer Alignment:
.ad
.sp .6
.RS 4n
Local and remote DTO buffer alignment for optimal performance on the
Platform. The
.B DAT_OPTIMAL_ALIGMNEMT
must be divisible by this
attribute value. The maximum allowed value is
.BR DAT_OPTIMAL_ALIGMNEMT ,
or 256.
.RE

.sp
.ne 2
.mk
.na
.B EVD stream merging support:
.ad
.sp .6
.RS 4n
A 2D binary matrix where each row and column represent an event stream
type. Each binary entry is 1 if the event streams of its row and column can
be fed to the same EVD, and 0 otherwise.
.sp
More than two different event stream types can feed the same EVD if for
each pair of the event stream types the entry is 1.
.sp
The Provider should support merging of all event stream types.
.sp
The Consumer should check this attribute before requesting an EVD that
merges multiple event stream types.
.RE

.sp
.ne 2
.mk
.na
.B Num provider attributes:
.ad
.sp .6
.RS 4n
Number of Provider-specific attributes.
.RE

.sp
.ne 2
.mk
.na
.B Provider-specific attributes:
.ad
.sp .6
.RS 4n
Array of Provider-specific attributes. Each entry has the format of
.BR DAT_NAMED_ATTR ,
which is a structure with two elements. The first
element is the name of the attribute. The second element is the value of the
attribute as a string.
.RE

.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B DAT_SUCCESS
.ad
.RS 25n
.rt
The operation was successful.
.RE

.sp
.ne 2
.mk
.na
.B DAT_INVALID_PARAMETER
.ad
.RS 25n
.rt
Invalid parameter;
.RE

.sp
.ne 2
.mk
.na
.B DAT_INVALID_HANDLE
.ad
.RS 25n
.rt
Invalid DAT handle; ia_handle is invalid.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard: uDAPL, 1.1, 1.2
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libdat (3LIB),
.BR attributes (5)
