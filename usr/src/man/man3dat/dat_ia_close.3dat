'\" te
.\" This manual page is derived from the DAT/uDAPL 1.2 specification.
.\" Portions Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH dat_ia_close 3DAT "16 Jul 2004" "SunOS 5.11" "Direct Access Transport Library Functions"
.SH NAME
dat_ia_close \- close an IA
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-ldat\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <\fBdat/udat.h\fR>

DAT_RETURN
    dat_ia_close (
    IN    DAT_IA_HANDLE    \fIia_handle\fR,
    IN    DAT_CLOSE_FLAGS  \fIia_flags\fR
    )
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I ia_handle
.ad
.RS 13n
.rt
Handle for an instance of a DAT IA.
.RE

.sp
.ne 2
.mk
.na
.I ia_flags
.ad
.RS 13n
.rt
Flags for IA closure. Flag definitions are:
.sp
.ne 2
.mk
.na
.B DAT_CLOSE_ABRUPT_FLAG
.ad
.RS 27n
.rt
Abrupt close. Abrupt cascading close of IA including all Consumer created
DAT objects.
.RE

.sp
.ne 2
.mk
.na
.B DAT_CLOSE_GRACEFUL_FLAG
.ad
.RS 27n
.rt
Graceful close. Closure is successful only if all DAT objects created by
the Consumer have been freed before the graceful closure call.
.RE

Default value of
.B DAT_CLOSE_DEFAULT
.RB = " DAT_CLOSE_ABRUPT_FLAG"
represents abrupt closure of IA.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B dat_ia_close()
function closes an IA (destroys an instance of the
Interface Adapter).
.sp
.LP
The\fI ia_flags\fR specify whether the Consumer wants abrupt or graceful
close.
.sp
.LP
The abrupt close does a phased, cascading destroy. All DAT Objects
associated with an IA instance are destroyed. These include all the
connection oriented Objects: public and reserved Service Points; Endpoints,
Connection Requests, LMRs (including lmr_contexts), RMRs (including
rmr_contexts), Event Dispatchers, CNOs, and Protection Zones. All the
waiters on all CNOs, including the OS Wait Proxy Agents, are unblocked with
the DAT_HANDLE_NULL handle returns for an unblocking EVD. All direct waiters
on all EVDs are also unblocked and return with DAT_ABORT.
.sp
.LP
The graceful close does a destroy only if the Consumer has done a cleanup
of all DAT objects created by the Consumer with the exception of the
asynchronous EVD. Otherwise, the operation does not destroy the IA instance
and returns the
.BR DAT_INVALID_STATE .
.sp
.LP
If async EVD was created as part of the of
.BR dat_ia_open (3DAT),
.B dat_ia_close()
must destroy it. If
.I async_evd_handle
was passed
in by the Consumer at
.BR dat_ia_open() ,
this handle is not destroyed.
This is applicable to both abrupt and graceful
.I ia_flags
values.
.sp
.LP
Because the Consumer did not create async EVD explicitly, the Consumer does
not need to destroy it for graceful close to succeed.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B DAT_SUCCESS
.ad
.RS 30n
.rt
The operation was successful.
.RE

.sp
.ne 2
.mk
.na
.B DAT_INSUFFICIENT_RESOURCES
.ad
.RS 30n
.rt
The operation failed due to resource limitations. This is a catastrophic
error.
.RE

.sp
.ne 2
.mk
.na
.B DAT_INVALID_HANDLE
.ad
.RS 30n
.rt
Invalid DAT handle;
.I ia_handle
is invalid.
.RE

.sp
.ne 2
.mk
.na
.B DAT_INVALID_PARAMETER
.ad
.RS 30n
.rt
Invalid parameter;
.I ia_flags
is invalid.
.RE

.sp
.ne 2
.mk
.na
.B DAT_INVALID_STATE
.ad
.RS 30n
.rt
Parameter in an invalid state. IA instance has Consumer-created objects
associated with it.
.RE

.SH USAGE
.sp
.LP
The
.B dat_ia_close()
function is the root cleanup method for the
Provider, and, thus, all Objects.
.sp
.LP
Consumers are advised to explicitly destroy all Objects they created prior
to closing the IA instance, but can use this function to clean up everything
associated with an open instance of IA. This allows the Consumer to clean up
in case of errors.
.sp
.LP
Note that an abrupt close implies destruction of EVDs and CNOs. Just as
with explicit destruction of an EVD or CNO, the Consumer should take care to
avoid a race condition where a Consumer ends up attempting to wait on an EVD
or CNO that has just been deleted.
.sp
.LP
The techniques described in \fBdat_cno_free\fR(3DAT) and
.BR dat_evd_free (3DAT)
can be used for these purposes.
.sp
.LP
If the Consumer desires to shut down the IA as quickly as possible, the
Consumer can call dat_ia_close(abrupt) without unblocking CNO and EVD
waiters in an orderly fashion. There is a slight chance that an invalidated
DAT handle will cause a memory fault for a waiter. But this might be an
acceptable behavior, especially if the Consumer is shutting down the
process.
.sp
.LP
No provision is made for blocking on event completion or pulling events
from queues.
.sp
.LP
This is the general cleanup and last resort method for Consumer recovery.
An implementation must provide for successful completion under all
conditions, avoiding hidden resource leakage (dangling memory, zombie
processes, and so on) eventually leading to a reboot of the operating
system.
.sp
.LP
The
.B dat_ia_close()
function deletes all Objects that were created
using the IA handle.
.sp
.LP
The
.B dat_ia_close()
function can decrement a reference count for the
Provider Library that is incremented by
.B dat_ia_open()
to ensure that
the Provider Library cannot be removed when it is in use by a DAT
Consumer.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard: uDAPL, 1.1, 1.2
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR dat_cno_free (3DAT),
.BR dat_evd_free (3DAT),
.BR dat_ia_open (3DAT),
.BR libdat (3LIB),
.BR attributes (5)
