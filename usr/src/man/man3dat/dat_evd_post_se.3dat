'\" te
.\" This manual page is derived from the DAT/uDAPL 1.2 specification.
.\" Portions Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH dat_evd_post_se 3DAT "16 Jul 2004" "SunOS 5.11" "Direct Access Transport Library Functions"
.SH NAME
dat_evd_post_se \- post Software event to the Event Dispatcher event
queue
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-ldat\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <\fBdat/udat.h\fR>

DAT_RETURN
    dat_evd_post_se(
    IN        DAT_EVD_HANDLE    \fIevd_handle\fR,
    IN const  DAT_EVENT         *\fIevent\fR
    )
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I evd_handle
.ad
.RS 14n
.rt
Handle for an instance of the Event Dispatcher
.RE

.sp
.ne 2
.mk
.na
.I event
.ad
.RS 14n
.rt
A pointer to a Consumer created Software Event.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B dat_evd_post_se()
function posts Software events to the Event
Dispatcher event queue. This is analogous to event arrival on the Event
Dispatcher software Event Stream. The
.I event
that the Consumer provides
adheres to the event format as defined in
.RB < dat.h >.
The first element
in the
.I event
provides the type of the event
.RB ( DAT_EVENT_TYPE_SOFTWARE );
the rest provide the event-type-specific
parameters. These parameters are opaque to a Provider. Allocation and
release of the memory referenced by the
.I event
pointer in a software
event are the Consumer's responsibility.
.sp
.LP
There is no ordering between events from different Event Streams. All the
synchronization issues between multiple Consumer contexts trying to post
events to an Event Dispatcher instance simultaneously are left to a
Consumer.
.sp
.LP
If the event queue is full, the operation is completed unsuccessfully and
returns
.BR DAT_QUEUE_FULL .
The
.I event
is not queued. The queue
overflow condition does takes place and, therefore, the asynchronous Event
Dispatcher is not effected.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B DAT_SUCCESS
.ad
.RS 25n
.rt
The operation was successful.
.RE

.sp
.ne 2
.mk
.na
.B DAT_INVALID_HANDLE
.ad
.RS 25n
.rt
The
.I evd_handle
parameter is invalid.
.RE

.sp
.ne 2
.mk
.na
.B DAT_INVALID_PARAMETER
.ad
.RS 25n
.rt
The
.I event
parameter is invalid.
.RE

.sp
.ne 2
.mk
.na
.B DAT_QUEUE_FULL
.ad
.RS 25n
.rt
The Event Dispatcher queue is full.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard: uDAPL, 1.1, 1.2
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libdat (3LIB),
.BR attributes (5)
