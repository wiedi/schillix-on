'\" te
.\" Copyright (c) 1992, X/Open Company Limited All Rights Reserved.
.\" Portions Copyright (c) 2009, Sun Microsystems, Inc.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH socket.h 3HEAD "28 Jan 2009" "SunOS 5.11" "Headers"
.SH NAME
socket.h, socket \- Internet Protocol family
.SH SYNOPSIS
.LP
.nf
\fB#include <sys/socket.h>\fR
.fi

.SH DESCRIPTION
.sp
.LP
The
.B <sys/socket.h>
header defines the unsigned integral type
\fBsa_family_t\fR through \fBtypedef\fR.
.sp
.LP
The
.B <sys/socket.h>
header defines the
.B sockaddr
structure that
includes the following members:
.sp
.in +2
.nf
sa_family_t   sa_family     /* address family */
char          sa_data[]     /* socket   address (variable-length
                                data) */
.fi
.in -2

.SS "\fBlibxnet\fR Interfaces"
.sp
.LP
The
.B <sys/socket.h>
header defines the
.B msghdr
structure for
\fBlibxnet\fR interfaces that includes the following members:
.sp
.in +2
.nf
void            *msg_name         /* optional address */
socklen_t       msg_namelen       /* size of address */
struct iovec    *msg_iov          /* scatter/gather array */
int             msg_iovlen        /* members in msg_iov */
void            *msg_control      /* ancillary data, see below */
socklen_t       msg_controllen    /* ancillary data buffer len */
int             msg_flags         /* flags on received message */
.fi
.in -2

.sp
.LP
The
.B <sys/socket.h>
header defines the
.B cmsghdr
structure for
\fBlibxnet\fR that includes the following members:
.sp
.in +2
.nf
socklen_t  cmsg_len      /* data byte count, including hdr */
int        cmsg_level    /* originating protocol */
int        cmsg_type     /* protocol-specific type */
.fi
.in -2

.sp
.LP
Ancillary data consists of a sequence of pairs, each consisting of a
\fBcmsghdr\fR structure followed by a data array. The data array contains
the ancillary data message, and the
.B cmsghdr
structure contains
descriptive information that allows an application to correctly parse the
data.
.sp
.LP
The values for
.B cmsg_level
will be legal values for the level argument
to the
.B getsockopt()
and
.B setsockopt()
functions. The
\fBSCM_RIGHTS\fR type is supported for level
.BR SOL_SOCKET .
.sp
.LP
Ancillary data is also possible at the socket level. The
\fB<sys/socket.h>\fR header defines the following macros for use as the
\fBcmsg_type\fR values when \fBcmsg_level\fR is
.BR SOL_SOCKET .
.sp
.ne 2
.mk
.na
.B SCM_RIGHTS
.ad
.RS 14n
.rt
Indicates that the data array contains the access rights to be sent or
received.
.RE

.sp
.ne 2
.mk
.na
.B SCM_UCRED
.ad
.RS 14n
.rt
Indicates that the data array contains a
.B ucred_t
to be received. The
\fBucred_t\fR is the credential of the sending process at the time the
message was sent. This is a Sun-specific, Evolving interface. See
.BR ucred_get (3C).
.RE

.sp
.LP
The IPv4 data formats generally use the same values for data passed back in
\fBcmsghdr\fR as for \fBsetsockopt()\fR to enable the feature. The IPv4 data
formats are listed below with the associated payload for each.
.sp
.ne 2
.mk
.na
.B IPPROTO_IP
.ad
.br
.na
.B IP_RECVDSTADDR
.ad
.sp .6
.RS 4n
.BR ipaddr_t ,
IP address
.RE

.sp
.ne 2
.mk
.na
.B IPPROTO_IP
.ad
.br
.na
.B IP_RECVOPTS
.ad
.sp .6
.RS 4n
variable-length IP options, up to 40 bytes
.RE

.sp
.ne 2
.mk
.na
.B IPPROTO_IP
.ad
.br
.na
.B IP_RECVIF
.ad
.sp .6
.RS 4n
.BR uint_t ,
\fBifIndex\fR number
.RE

.sp
.ne 2
.mk
.na
.B IPPROTO_IP
.ad
.br
.na
.B IP_RECVSLLA
.ad
.sp .6
.RS 4n
.BR "struct sockaddr_dl" ,
link layer address
.RE

.sp
.ne 2
.mk
.na
.B IPPROTO_IP
.ad
.br
.na
.B IP_RECVTTL
.ad
.sp .6
.RS 4n
.B uint8_t
.RE

.sp
.ne 2
.mk
.na
.B SOL_SOCKET
.ad
.br
.na
.B SO_RECVUCRED
.ad
.sp .6
.RS 4n
\fBucred_t\fR \(em \fBcmsghdr.cmsg_type\fR is
.BR SCM_UCRED ,
not
.B SO_RECVUCRED
.RE

.sp
.LP
The IPv6 data formats use different values for enabling the option and for
passing the value back to the application. The IPv6 data formats are listed
below with the associated payload for each.
.sp
.ne 2
.mk
.na
.B IPPROTO_IPV6
.ad
.br
.na
.B IPV6_RECVPKTINFO
.ad
.sp .6
.RS 4n
\fBin_pktinfo\fR, \fBcmsg_type IPV6_PKTINFO\fR
.RE

.sp
.ne 2
.mk
.na
.B IPPROTO_IPV6
.ad
.br
.na
.B IPV6_RECVTCLASS
.ad
.sp .6
.RS 4n
.BR uint_t ,
.B cmsg_type IPV6_TCLASS
.RE

.sp
.ne 2
.mk
.na
.B IPPROTO_IPV6
.ad
.br
.na
.B IPV6_RECVPATHMTU
.ad
.sp .6
.RS 4n
\fBip6_mtuinfo\fR, \fBcmsg_type IPV6_PATHMTU\fR
.RE

.sp
.ne 2
.mk
.na
.B IPPROTO_IPV6
.ad
.br
.na
.B IPV6_RECVHOPLIMIT
.ad
.sp .6
.RS 4n
.BR uint_t ,
.B cmsg_type IPV6_HOPLIMIT
.RE

.sp
.ne 2
.mk
.na
.B IPPROTO_IPV6
.ad
.br
.na
.B IPV6_RECVHOPOPTS
.ad
.sp .6
.RS 4n
.RB "variable-length IPv6 options," " cmsg_type IPV6_HOPOPTS"
.RE

.sp
.ne 2
.mk
.na
.B IPPROTO_IPV6
.ad
.br
.na
.B IPV6_RECVDSTOPTS
.ad
.sp .6
.RS 4n
.RB "variable-length IPv6 options," " cmsg_type IPV6_DSTOPTS"
.RE

.sp
.ne 2
.mk
.na
.B IPPROTO_IPV6
.ad
.br
.na
.B IPV6_RECVRTHDR
.ad
.sp .6
.RS 4n
.RB "variable-length IPv6 options," " cmsg_type IPV6_RTHDR"
.RE

.sp
.ne 2
.mk
.na
.B IPPROTO_IPV6
.ad
.br
.na
.B IPV6_RECVRTHDRDSTOPTS
.ad
.sp .6
.RS 4n
.RB "variable-length IPv6 options," " cmsg_type IPV6_DSTOPTS"
.RE

.sp
.LP
The
.B <sys/socket.h>
header defines the following macros to gain access
to the data arrays in the ancillary data associated with a message header:
.sp
.ne 2
.mk
.na
\fBCMSG_DATA(\fIcmsg\fR)\fR
.ad
.sp .6
.RS 4n
If the argument is a pointer to a
.B cmsghdr
structure, this macro
returns an unsigned character pointer to the data array associated with the
\fBcmsghdr\fR structure.
.RE

.sp
.ne 2
.mk
.na
\fBCMSG_NXTHDR(\fImhdr\fR, \fIcmsg\fR)\fR
.ad
.sp .6
.RS 4n
If the first argument is a pointer to a
.B msghdr
structure and the
second argument is a pointer to a
.B cmsghdr
structure in the ancillary
data, pointed to by the
.B msg_control
field of that
.BR msghdr
structure, this macro returns a pointer to the next
.B cmsghdr
structure,
or a null pointer if this structure is the last
.B cmsghdr
in the
ancillary data.
.RE

.sp
.ne 2
.mk
.na
\fBCMSG_FIRSTHDR(\fImhdr\fR)\fR
.ad
.sp .6
.RS 4n
If the argument is a pointer to a
.B msghdr
structure, this macro
returns a pointer to the first
.B cmsghdr
structure in the ancillary data
associated with this
.B msghdr
structure, or a null pointer if there is
no ancillary data associated with the
.B msghdr
structure.
.RE

.sp
.ne 2
.mk
.na
\fBCMSG_SPACE\fR(\fIlen\fR)\fR
.ad
.sp .6
.RS 4n
Given the length of an ancillary data object,
.B CMSG_SPACE()
returns
the space required by the object and its
.B cmsghdr
structure, including
any padding needed to satisfy alignment requirements. This macro can be
used, for example, to allocate space dynamically for the ancillary data.
This macro should not be used to initialize the
.B cmsg_len
member of a
\fBcmsghdr\fR structure. Use the \fBCMSG_LEN()\fR macro instead.
.RE

.sp
.ne 2
.mk
.na
\fBCMSG_LEN\fR(\fIlen\fR)\fR
.ad
.sp .6
.RS 4n
Given the length of an ancillary data object,
.B CMSG_LEN()
returns the
value to store in the cmsg_len member of the
.B cmsghdr
structure, taking
into account any padding needed to satisfy alignment requirements.
.RE

.sp
.LP
The
.B <sys/socket.h>
header defines the
.B linger
structure that
includes the following members:
.sp
.in +2
.nf
int   l_onoff   /* indicates  whether  linger option is enabled */
int   l_linger  /* linger time, in seconds */
.fi
.in -2

.sp
.LP
The
.B <sys/socket.h>
header defines the following macros:
.sp
.ne 2
.mk
.na
.B SOCK_DGRAM
.ad
.RS 18n
.rt
Datagram socket
.RE

.sp
.ne 2
.mk
.na
.B SOCK_STREAM
.ad
.RS 18n
.rt
Byte-stream socket
.RE

.sp
.ne 2
.mk
.na
.B SOCK_SEQPACKET
.ad
.RS 18n
.rt
Sequenced-packet socket
.RE

.sp
.LP
The
.B <sys/socket.h>
header defines the following macros for use as the
\fIlevel\fR argument of \fBsetsockopt()\fR and
.BR getsockopt() .
.sp
.ne 2
.mk
.na
.B SOL_SOCKET
.ad
.RS 14n
.rt
Options to be accessed at the socket level, not the protocol level.
.RE

.sp
.ne 2
.mk
.na
.B SOL_ROUTE
.ad
.RS 14n
.rt
Options to be accessed at the routing socket level, not the protocol
level.
.RE

.sp
.LP
The
.B <sys/socket.h>
header defines the following macros for use as the
\fIoption_name\fR argument of \fBgetsockopt()\fR or \fBsetsockopt()\fR
calls:
.sp
.ne 2
.mk
.na
.B SO_DEBUG
.ad
.RS 17n
.rt
Debugging information is being recorded.
.RE

.sp
.ne 2
.mk
.na
.B SO_ACCEPTCONN
.ad
.RS 17n
.rt
Socket is accepting connections.
.RE

.sp
.ne 2
.mk
.na
.B SO_BROADCAST
.ad
.RS 17n
.rt
Transmission of broadcast messages is supported.
.RE

.sp
.ne 2
.mk
.na
.B SO_REUSEADDR
.ad
.RS 17n
.rt
Reuse of local addresses is supported.
.RE

.sp
.ne 2
.mk
.na
.B SO_KEEPALIVE
.ad
.RS 17n
.rt
Connections are kept alive with periodic messages.
.RE

.sp
.ne 2
.mk
.na
.B SO_LINGER
.ad
.RS 17n
.rt
Socket lingers on close.
.RE

.sp
.ne 2
.mk
.na
.B SO_OOBINLINE
.ad
.RS 17n
.rt
Out-of-band data is transmitted in line.
.RE

.sp
.ne 2
.mk
.na
.B SO_SNDBUF
.ad
.RS 17n
.rt
Send buffer size.
.RE

.sp
.ne 2
.mk
.na
.B SO_RCVBUF
.ad
.RS 17n
.rt
Receive buffer size.
.RE

.sp
.ne 2
.mk
.na
.B SO_ERROR
.ad
.RS 17n
.rt
Socket error status.
.RE

.sp
.ne 2
.mk
.na
.B SO_TYPE
.ad
.RS 17n
.rt
Socket type.
.RE

.sp
.ne 2
.mk
.na
.B SO_RECVUCRED
.ad
.RS 17n
.rt
Request the reception of user credential ancillary data. This is a
Sun-specific, Evolving interface. See
.BR ucred_get (3C).
.RE

.sp
.ne 2
.mk
.na
.B SO_MAC_EXEMPT
.ad
.RS 17n
.rt
Mandatory Access Control (\fBMAC\fR) exemption for unlabeled peers. This
option is available only if the system is configured with Trusted
Extensions.
.RE

.sp
.ne 2
.mk
.na
.B SO_ALLZONES
.ad
.RS 17n
.rt
Bypass zone boundaries (privileged).
.RE

.sp
.LP
The
.B <sys/socket.h>
header defines the following macros for use as the
valid values for the \fBmsg_flags\fR field in the
.B msghdr
structure, or
the flags parameter in
.BR recvfrom() ,
.BR recvmsg() ,
.BR sendto() ,
or
\fBsendmsg()\fR calls:
.sp
.ne 2
.mk
.na
.B MSG_CTRUNC
.ad
.RS 15n
.rt
Control data truncated.
.RE

.sp
.ne 2
.mk
.na
.B MSG_EOR
.ad
.RS 15n
.rt
Terminates a record (if supported by the protocol).
.RE

.sp
.ne 2
.mk
.na
.B MSG_OOB
.ad
.RS 15n
.rt
Out-of-band data.
.RE

.sp
.ne 2
.mk
.na
.B MSG_PEEK
.ad
.RS 15n
.rt
Leave received data in queue.
.RE

.sp
.ne 2
.mk
.na
.B MSG_TRUNC
.ad
.RS 15n
.rt
Normal data truncated.
.RE

.sp
.ne 2
.mk
.na
.B MSG_WAITALL
.ad
.RS 15n
.rt
Wait for complete message.
.RE

.sp
.LP
The
.B <sys/socket.h>
header defines the following macros:
.sp
.ne 2
.mk
.na
.B AF_UNIX
.ad
.RS 11n
.rt
UNIX domain sockets
.RE

.sp
.ne 2
.mk
.na
.B AF_INET
.ad
.RS 11n
.rt
Internet domain sockets
.RE

.sp
.LP
The
.B <sys/socket.h>
header defines the following macros:
.sp
.ne 2
.mk
.na
.B SHUT_RD
.ad
.RS 13n
.rt
Disables further receive operations.
.RE

.sp
.ne 2
.mk
.na
.B SHUT_WR
.ad
.RS 13n
.rt
Disables further send operations.
.RE

.sp
.ne 2
.mk
.na
.B SHUT_RDWR
.ad
.RS 13n
.rt
Disables further send and receive operations.
.RE

.SS "\fBlibsocket\fR Interfaces"
.sp
.LP
The
.B <sys/socket.h>
header defines the
.B msghdr
structure for
\fBlibsocket\fR interfaces that includes the following members:
.sp
.in +2
.nf
void           *msg_name        /* optional address */
socklen_t      msg_namelen      /* size of address */
struct iovec   *msg_iov         /* scatter/gather array */
int            msg_iovlen       /* # elements in msg_iov */
caddr_t        msg_accrights    /* access rights sent/received */
.fi
.in -2

.sp
.LP
The
.I msg_name
and
.I msg_namelen
parameters specify the destination
address when the socket is unconnected The
.I msg_name
can be specified
as a
.I NULL
pointer if no names are desired or required. The
\fImsg_iov\fR and \fImsg_iovlen\fR parameters describe the scatter-gather
locations, as described in
.BR read (2).
The
.I msg_accrights
parameter
specifies the buffer in which access rights sent along with the message are
received. The
.I msg_accrightslen
specifies the length of the buffer.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
.TE

.SH SEE ALSO
.sp
.LP
.BR accept (3SOCKET),
.BR accept (3XNET),
.BR bind (3SOCKET),
.BR bind (3XNET),
.BR connect (3SOCKET),
.BR connect (3XNET),
.BR getpeername (3SOCKET),
.BR getpeername (3XNET),
.BR getpeerucred (3C),
.BR getsockname (3SOCKET),
.BR getsockname (3XNET),
.BR getsockopt (3SOCKET),
.BR getsockopt (3XNET),
.BR libsocket (3LIB),
.BR listen (3SOCKET),
.BR listen (3XNET),
.BR recv (3SOCKET),
.BR recv (3XNET),
\fBrecvfrom\fR(3SOCKET), \fBrecvfrom\fR(3XNET),
.BR recvmsg (3SOCKET),
.BR recvmsg (3XNET),
.BR send (3SOCKET),
.BR send (3XNET),
.BR sendmsg (3SOCKET),
.BR sendmsg (3XNET),
.BR sendto (3SOCKET),
.BR sendto (3XNET),
.BR setsockopt (3SOCKET),
.BR setsockopt (3XNET),
.BR shutdown (3SOCKET),
.BR shutdown (3XNET),
.BR socket (3SOCKET),
.BR socket (3XNET),
.BR socketpair (3SOCKET),
.BR socketpair (3XNET),
.BR ucred_get (3C),
.BR attributes (5),
.BR standards (5)
