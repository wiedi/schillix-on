'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 1989 AT&T
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH fcntl.h 3HEAD "5 Feb 2008" "SunOS 5.11" "Headers"
.SH NAME
fcntl.h, fcntl \- file control options
.SH SYNOPSIS
.LP
.nf
#include <fcntl.h>
.fi

.SH DESCRIPTION
.sp
.LP
The \fB<fcntl.h>\fR header defines the following requests and arguments for
use by the functions
.BR fcntl (2),
.BR open (2),
and
.BR openat (2).
.sp
.LP
Values for
.I cmd
used by \fBfcntl()\fR (the following values are
unique):
.sp
.ne 2
.mk
.na
.B F_DUPFD
.ad
.RS 15n
.rt
Duplicate file descriptor.
.RE

.sp
.ne 2
.mk
.na
.B F_DUP2FD
.ad
.RS 15n
.rt
Similar to
.BR F_DUPFD ,
but always returns
.IR arg .
.RE

.sp
.ne 2
.mk
.na
.B F_GETFD
.ad
.RS 15n
.rt
Get file descriptor flags.
.RE

.sp
.ne 2
.mk
.na
.B F_SETFD
.ad
.RS 15n
.rt
Set file descriptor flags.
.RE

.sp
.ne 2
.mk
.na
.B F_GETFL
.ad
.RS 15n
.rt
Get file status flags.
.RE

.sp
.ne 2
.mk
.na
.B F_SETFL
.ad
.RS 15n
.rt
Set file status flags.
.RE

.sp
.ne 2
.mk
.na
.B F_GETOWN
.ad
.RS 15n
.rt
Get process or process group
.B ID
to receive
.B SIGURG
signals.
.RE

.sp
.ne 2
.mk
.na
.B F_SETOWN
.ad
.RS 15n
.rt
Set process or process group
.B ID
to receive
.B SIGURG
signals.
.RE

.sp
.ne 2
.mk
.na
.B F_FREESP
.ad
.RS 15n
.rt
Free storage space associated with a section of the ordinary file
.IR fildes .
.RE

.sp
.ne 2
.mk
.na
.B F_ALLOCSP
.ad
.RS 15n
.rt
Allocate space for a section of the ordinary file
.IR fildes .
.RE

.sp
.ne 2
.mk
.na
.B F_ALLOCSP64
.ad
.RS 15n
.rt
Equivalent to
.BR F_ALLOCSP ,
but takes a \fBstruct flock64\fR argument
rather than a \fBstruct flock\fR argument.
.RE

.sp
.ne 2
.mk
.na
.B F_GETLK
.ad
.RS 15n
.rt
Get record locking information.
.RE

.sp
.ne 2
.mk
.na
.B F_GETLK64
.ad
.RS 15n
.rt
Equivalent to
.BR F_GETLK ,
but takes a \fBstruct flock64\fR argument
rather than a \fBstruct flock\fR argument.
.RE

.sp
.ne 2
.mk
.na
.B F_SETLK
.ad
.RS 15n
.rt
Set record locking information.
.RE

.sp
.ne 2
.mk
.na
.B F_SETLK64
.ad
.RS 15n
.rt
Equivalent to
.BR F_SETLK ,
but takes a \fBstruct flock64\fR argument
rather than a \fBstruct flock\fR argument.
.RE

.sp
.ne 2
.mk
.na
.B F_SETLKW
.ad
.RS 15n
.rt
Set record locking information; wait if blocked.
.RE

.sp
.ne 2
.mk
.na
.B F_SETLKW64
.ad
.RS 15n
.rt
Equivalent to
.BR F_SETLKW ,
but takes a \fBstruct flock64\fR argument
rather than a \fBstruct flock\fR argument.
.RE

.sp
.ne 2
.mk
.na
.B F_SHARE
.ad
.RS 15n
.rt
Set share reservation.
.RE

.sp
.ne 2
.mk
.na
.B F_UNSHARE
.ad
.RS 15n
.rt
Remove share reservation.
.RE

.sp
.LP
File descriptor flags used for
.BR fcntl() :
.sp
.ne 2
.mk
.na
.B FD_CLOEXEC
.ad
.RS 14n
.rt
Close the file descriptor upon execution of an
.B exec
function (see
.BR exec (2)).
.RE

.sp
.LP
Values for
.B l_type
used for record locking with \fBfcntl()\fR (the
following values are unique):
.sp
.ne 2
.mk
.na
.B F_RDLCK
.ad
.RS 11n
.rt
Shared or read lock.
.RE

.sp
.ne 2
.mk
.na
.B F_UNLCK
.ad
.RS 11n
.rt
Unlock.
.RE

.sp
.ne 2
.mk
.na
.B F_WRLCK
.ad
.RS 11n
.rt
Exclusive or write lock.
.RE

.sp
.LP
Values for \fBf_access\fR used for share reservations with \fBfcntl()\fR
(the following values are unique):
.sp
.ne 2
.mk
.na
.B F_RDACC
.ad
.RS 11n
.rt
Read-only share reservation.
.RE

.sp
.ne 2
.mk
.na
.B F_WRACC
.ad
.RS 11n
.rt
Write-only share reservation.
.RE

.sp
.ne 2
.mk
.na
.B F_RWACC
.ad
.RS 11n
.rt
Read and write share reservation.
.RE

.sp
.LP
Values for \fBf_deny\fR used for share reservations with \fBfcntl()\fR (the
following values are unique):
.sp
.ne 2
.mk
.na
.B F_COMPAT
.ad
.RS 12n
.rt
Compatibility mode share reservation.
.RE

.sp
.ne 2
.mk
.na
.B F_RDDNY
.ad
.RS 12n
.rt
Deny other read access share reservations.
.RE

.sp
.ne 2
.mk
.na
.B F_WRDNY
.ad
.RS 12n
.rt
Deny other write access share reservations.
.RE

.sp
.ne 2
.mk
.na
.B F_RWDNY
.ad
.RS 12n
.rt
Deny other read or write access share reservations.
.RE

.sp
.ne 2
.mk
.na
.B F_NODNY
.ad
.RS 12n
.rt
Do not deny other read or write access share reservations.
.RE

.sp
.LP
File creation and assignment flags are used in the \fIoflag\fR argument by
\fBopen()\fR and
.BR openat() .
All of these values are bitwise distinct:
.sp
.ne 2
.mk
.na
.B O_CREAT
.ad
.RS 12n
.rt
Create file if it does not exist.
.RE

.sp
.ne 2
.mk
.na
.B O_EXCL
.ad
.RS 12n
.rt
Exclusive use flag.
.RE

.sp
.ne 2
.mk
.na
.B O_NOCTTY
.ad
.RS 12n
.rt
Do not assign controlling tty.
.RE

.sp
.ne 2
.mk
.na
.B O_TRUNC
.ad
.RS 12n
.rt
Truncate flag.
.RE

.sp
.ne 2
.mk
.na
.B O_XATTR
.ad
.RS 12n
.rt
When opening a file, this flag affects the way in which relative paths are
resolved by
.B open()
and
.BR openat() .
With this flag set, the
\fIpath\fR argument is resolved as an extended attribute reference on either
the current working directory (if open) or of the file referenced by the
file descriptor argument of
.BR openat() .
.RE

.sp
.LP
File status flags used for
.BR fcntl() ,
.BR open() ,
and
.BR open() :
.sp
.ne 2
.mk
.na
.B O_APPEND
.ad
.RS 14n
.rt
Set append mode.
.RE

.sp
.ne 2
.mk
.na
.B O_NDELAY
.ad
.RS 14n
.rt
Non-blocking mode.
.RE

.sp
.ne 2
.mk
.na
.B O_NONBLOCK
.ad
.RS 14n
.rt
Non-blocking mode (POSIX; see
.BR standards (5)).
.RE

.sp
.ne 2
.mk
.na
.B O_DSYNC
.ad
.RS 14n
.rt
Write I/O operations on the file descriptor complete as defined by
synchronized I/O data integrity completion.
.RE

.sp
.ne 2
.mk
.na
.B O_RSYNC
.ad
.RS 14n
.rt
Read I/O operations on the file descriptor complete at the same level of
integrity as specified by the
.B O_DSYNC
and
.B O_SYNC
flags. If both
\fBO_DSYNC\fR and \fBO_RSYNC\fR are set in
.IR oflag ,
all I/O operations
on the file descriptor complete as defined by synchronized I/O data
integrity completion.  If both
.B O_SYNC
and
.B O_RSYNC
are set in
\fIoflag\fR, all I/O operations on the file descriptor complete as defined
by synchronized I/O file integrity completion.
.RE

.sp
.ne 2
.mk
.na
.B O_SYNC
.ad
.RS 14n
.rt
When opening a regular file, this flag affects subsequent writes. If set,
each
.BR write (2)
will wait for both the file data and file status to be
physically updated.  Write I/O operations on the file descriptor complete as
defined by synchronized I/O file integrity completion.
.RE

.sp
.LP
Mask for use with file access modes:
.sp
.ne 2
.mk
.na
.B O_ACCMODE
.ad
.RS 13n
.rt
Mask for file access modes.
.RE

.sp
.LP
File access modes used for
.BR fcntl() ,
.BR open() ,
and
.BR openat() :
.sp
.ne 2
.mk
.na
.B O_RDONLY
.ad
.RS 12n
.rt
Open for reading only.
.RE

.sp
.ne 2
.mk
.na
.B O_RDWR
.ad
.RS 12n
.rt
Open for reading and writing.
.RE

.sp
.ne 2
.mk
.na
.B O_WRONLY
.ad
.RS 12n
.rt
Open for writing only.
.RE

.sp
.LP
The following constants are used by system calls capable of resolving paths
relative to a provided open file descriptor:
.sp
.ne 2
.mk
.na
.B AT_FDCWD
.ad
.RS 23n
.rt
Special value to pass in place of a file descriptor to inform the called
routine that relative path arguments should be resolved from the current
working directory.
.RE

.sp
.ne 2
.mk
.na
.B AT_SYMLINK_NOFOLLOW
.ad
.RS 23n
.rt
Flag passed to
.BR fstatat (2)
and
.BR fchownat (2)
to change the
bahavior of these functions when they are given a file as an argument that
is a symbolic link. In this case the functions operate on the symbolic link
file rather than the file the link references.
.RE

.sp
.ne 2
.mk
.na
.B AT_REMOVEDIR
.ad
.RS 23n
.rt
Flag passed to
.BR unlinkat (2)
to tell it to assume that its path
argument refers to a directory and to attempt to remove this directory.
.RE

.sp
.LP
The \fBflock\fR structure describes a file lock. It includes the following
members:
.sp
.in +2
.nf
short   l_type;   /* Type of lock */
short   l_whence; /* Flag for starting offset */
off_t   l_start;  /* Relative offset in bytes */
off_t   l_len;    /* Size; if 0 then until EOF */
long    l_sysid;  /* Returned with F_GETLK */
pid_t   l_pid;    /* Returned with F_GETLK */
.fi
.in -2

.sp
.LP
The structure \fBfshare\fR describes a file share reservation. It includes
the following members:
.sp
.in +2
.nf
short   f_access; /* Type of reservation */
short   f_deny;   /* Type of reservations to deny */
long    f_id;     /* Process unique identifier */
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
.BR creat (2),
.BR exec (2),
\fBfcntl\fR(2), \fBopen\fR(2),
\fBfdatasync\fR(3C), \fBfsync\fR(3C),
.BR fsattr (5),
.BR attributes (5),
.BR standards (5)
.SH NOTES
.sp
.LP
Data is successfully  transferred for a write operation to a regular file
when the system ensures that all data written is readable on any subsequent
open of the file (even one that follows a system or power failure) in the
absence of a failure of the physical storage medium.
.sp
.LP
Data is successfully transferred for a read operation when an image of the
data on the physical storage medium is available to the requesting
process.
.sp
.LP
Synchronized I/O data integrity completion (see \fBfdatasync\fR(3C)):
.RS +4
.TP
.ie t \(bu
.el o
For reads, the operation has been completed or diagnosed if unsuccessful.
The read is complete only when an image of the data has been successfully
transferred to the requesting process. If there were any pending write
requests affecting the data to be read at the time that the synchronized
read operation was requested, these write requests will be successfully
transferred prior to reading the data.
.RE
.RS +4
.TP
.ie t \(bu
.el o
For writes, the operation has been completed or diagnosed if unsuccessful.
The write is complete only when the data specified in the write request is
successfully transferred, and all file system information required to
retrieve the data is successfully transferred.
.RE
.sp
.LP
File attributes that are not necessary for data retrieval (access time,
modification time, status change time) need not be successfully transferred
prior to returning to the calling process.
.sp
.LP
Synchronized I/O file integrity completion (see \fBfsync\fR(3C)):
.RS +4
.TP
.ie t \(bu
.el o
Identical to a synchronized I/O data integrity completion with the addition
that all file attributes relative to the I/O operation (including access
time, modification time, status change time) will be successfully
transferred prior to returning to the calling process.
.RE
