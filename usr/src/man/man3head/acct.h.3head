'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH acct.h 3HEAD "19 May 1994" "SunOS 5.11" "Headers"
.SH NAME
acct.h, acct \- per-process accounting file format
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/acct.h>
.fi

.SH DESCRIPTION
.sp
.LP
Files produced as a result of calling
.BR acct (2)
have records in the
form defined by <\fBsys/acct.h\fR>, whose contents are:
.sp
.in +2
.nf
typedef ushort_t  comp_t;   /* pseudo "floating point"
                               representation */
                            /* 3 bit base-8 exponent in the high */
                            /* order bits, and a 13-bit fraction */
                            /* in the low order bits. */

struct	acct
{
    char   ac_flag;    /* Accounting flag */
    char   ac_stat;    /* Exit status */
    uid_t  ac_uid;     /* Accounting user ID */
    gid_t  ac_gid;     /* Accounting group ID */
    dev_t  ac_tty;     /* control tty */
    time_t ac_btime;   /* Beginning time */
    comp_t ac_utime;   /* accounting user time in clock ticks */
    comp_t ac_stime;   /* accounting system time in clock ticks */
    comp_t ac_etime;   /* accounting total elapsed time in clock
                          ticks */
    comp_t ac_mem;     /* memory usage in clicks (pages) */
    comp_t ac_io;      /* chars transferred by read/write */
    comp_t ac_rw;      /* number of block reads/writes */
    char   ac_comm[8]; /* command name */
};

/*
 * Accounting Flags
 */

#define AFORK   01    /* has executed fork, but no exec */
#define ASU     02    /* used super-user privileges */
#define ACCTF   0300  /* record type */
#define AEXPND  040   /* Expanded Record Type \(mi default */
.fi
.in -2

.sp
.LP
In
.BR ac_flag ,
the
.B AFORK
flag is turned on by each
.B fork
and
turned off by an
.BR exec .
The
.B ac_comm
field is inherited from the
parent process and is reset by any
.BR exec .
Each time the system charges
the process with a clock tick, it also adds to
.B ac_mem
the current
process size, computed as follows:
.sp
.LP
\fI(data size) + (text size) / (number of in-core processes using
text)\fR
.sp
.LP
The value of \fBac_mem\|/\|(ac_stime\|+\|ac_utime)\fR can be viewed as an
approximation to the mean process size, as modified by text sharing.
.sp
.LP
The structure
.BR tacct ,
(which resides with the source files of the
accounting commands), represents a summary of accounting statistics for the
user id
.BR ta_uid .
This structure is used by the accounting commands to
report statistics based on user id.
.sp
.in +2
.nf
/*
 *  total accounting (for acct period), also for day
 */
struct tacct {
   uid_t           ta_uid;       /* user id */
   char            ta_name[8];   /* login name */
   float           ta_cpu[2];    /* cum. cpu time in minutes, */
                                 /* p/np (prime/non-prime time) */
   float           ta_kcore[2];  /* cum. kcore-minutes, p/np */
   float           ta_con[2];    /* cum. connect time in minutes,
                                     p/np */
   float           ta_du;        /* cum. disk usage (blocks)*/
   long            ta_pc;        /* count of processes */
   unsigned short  ta_sc;        /* count of login sessions */
   unsigned short  ta_dc;        /* count of disk samples */
   unsigned short  ta_fee;       /* fee for special services */
};
.fi
.in -2

.sp
.LP
The
.BR ta_cpu ,
.BR ta_kcore ,
and
.B ta_con
members contain usage
information pertaining to prime time and non-prime time hours.  The first
element in each array represents the time the  resource was used during
prime time hours.  The second element in  each array represents the time the
resource was used during non-prime time hours.  Prime time and non-prime
time hours may be set in the
.B holidays
file (see
.BR holidays (4)).
.sp
.LP
The
.B ta_kcore
member is a cumulative measure of the amount of memory
used over the accounting period by processes owned by the user with uid
.BR ta_uid .
The amount shown represents kilobyte segments of memory used,
per minute.
.sp
.LP
The
.B ta_con
member represents the amount of time the user was logged
in to the system.
.SH FILES
.sp
.ne 2
.mk
.na
.B /etc/acct/holidays
.ad
.RS 22n
.rt
prime/non-prime time table
.RE

.SH SEE ALSO
.sp
.LP
.BR acctcom (1),
.BR acct (1M),
.BR acctcon (1M),
.BR acctmerg (1M),
.BR acctprc (1M),
.BR acctsh (1M),
.BR prtacct (1M),
.BR runacct (1M),
.BR shutacct (1M),
.BR acct (2),
.BR exec (2),
.BR fork (2)
.SH NOTES
.sp
.LP
The
.B ac_mem
value for a short-lived command gives little information
about the actual size of the command, because
.B ac_mem
may be
incremented while a different command (for example, the shell) is being
executed by the process.
