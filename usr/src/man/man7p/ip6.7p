'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ip6 7P "2 Dec 2008" "SunOS 5.11" "Protocols"
.SH NAME
ip6 \- Internet Protocol Version 6
.SH SYNOPSIS
.LP
.nf
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/ip6.h>
.fi

.LP
.nf
s = socket(AF_INET6, SOCK_RAW, proto);
.fi

.LP
.nf
t = t_open ("/dev/rawip6", O_RDWR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B IPv6
protocol is the next generation of the internetwork datagram
delivery protocol of the Internet protocol family. Programs may use
.B IPv6
through higher-level protocols such as the Transmission Control
Protocol
.RB ( TCP )
or the User Datagram Protocol
.RB ( UDP ),
or may
interface directly to
.BR IPv6 .
See
.BR tcp "(7P) and"
.BR udp (7P).
Direct access may be by means of the socket interface, using a "raw socket,"
or by means of the Transport Level Interface
.RB ( TLI ).
The protocol
options and
.B IPv6
extension headers defined in the
.BR IPv6
specification may be set in outgoing datagrams.
.SH APPLICATION PROGRAMMING INTERFACE
.sp
.LP
The
.B STREAMS
driver
.B /dev/rawip6
is the
.B TLI
transport
provider that provides raw access to
.BR IPv6 .
.sp
.LP
Raw
.B IPv6
sockets are connectionless and are normally used with the
.B sendto()
and
.B recvfrom()
calls (see
.BR send (3SOCKET)
and
.BR recv (3SOCKET)),
although the
.BR connect "(3SOCKET) call may also be"
used to fix the destination for future datagrams. In this case, the
.BR read (2)
or
.BR recv "(3SOCKET) and"
.BR write (2)
or
.BR send (3SOCKET)
calls may be used. Ancillary data may also be sent or
received over raw
.B IPv6
sockets using the
.BR sendmsg "(3SOCKET) and"
.BR recvmsg (3SOCKET)
system calls.
.sp
.LP
Unlike raw
.BR IP ,
.B IPv6
applications do not include a complete
.B IPv6
header when sending; there is no
.B IPv6
analog to the
.B IP IP_HDRINCL
socket option.
.B IPv6
header values may be
specified or received as ancillary data to a
.BR sendmsg "(3SOCKET) or"
.BR recvmsg (3SOCKET)
system call, or may be specified as "sticky" options
on a per-socket basis by using the
.BR setsockopt (3SOCKET)
system call.
Such sticky options are applied to all outbound packets unless overridden by
ancillary data. If any ancillary data is specified in a
.BR sendmsg (3SOCKET)
call, all sticky options not explicitly overridden
revert to default values for that datagram only; the sticky options persist
as set for subsequent datagrams.
.sp
.LP
Since
.BR sendmsg (3SOCKET)
is not supported for
.B SOCK_STREAM
upper
level protocols such as
.BR TCP ,
ancillary data is unsupported for
.BR TCP .
Sticky options, however, are supported.
.sp
.LP
Since
.BR sendmsg (3SOCKET)
is supported for
.B SOCK_DGRAM
upper level
protocols, both ancillary data and sticky options are supported for
.BR UDP ,
.BR ICMP6 ,
and raw
.B IPv6
sockets.
.sp
.LP
The socket options supported at the
.B IPv6
level are:
.sp
.ne 2
.mk
.na
.B IPV6_BOUND_IF
.ad
.RS 24n
.rt
Limit reception and transmission of packets to this interface. Takes an
integer as an argument; the integer is the selected interace index.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_UNSPEC_SRC
.ad
.RS 24n
.rt
Boolean. Allow/disallow sending with a zero source address.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_UNICAST_HOPS
.ad
.RS 24n
.rt
Default hop limit for unicast datagrams. This option takes an integer as an
argument. Its value becomes the new default value for
.B ip6_hops
that
.B IPv6
will use on outgoing unicast datagrams sent from that socket. The
initial default is
.BR 60 .
.RE

.sp
.ne 2
.mk
.na
.B IPV6_CHECKSUM
.ad
.RS 24n
.rt
Specify the integer offset in bytes into the user data of the checksum
location. Does not apply to the
.B ICMP6
protocol. Note: checksums are
required for all
.B IPv6
datagrams; this is different from
.BR IP ,
in
which datagram checksums were optional.
.B IPv6
will compute the
.B ULP
checksum if the value in the checksum field is zero.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_SEC_OPT
.ad
.RS 24n
.rt
Enable or obtain IPsec security settings for this socket. For more details
on the protection services of IPsec, see
.BR ipsec (7P).
.RE

.sp
.ne 2
.mk
.na
.B IPV6_DONTFRAG
.ad
.RS 24n
.rt
Boolean. Control fragmentation.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_USE_MIN_MTU
.ad
.RS 24n
.rt
Controls whether path MTU discovery is used. If set to 1, path MTU
discovery is never used and IPv6 packets are sent with the IPv6 minimum MTU.
If set to -1, path MTU discovery is not used for multicast and multicast
packets are sent with the IPv6 minimum MTU.  If set to 0, path MTU is always
performed.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_V6ONLY
.ad
.RS 24n
.rt
Boolean. If set, only V6 packets can be sent or received
.RE

.sp
.ne 2
.mk
.na
.B IPV6_SRC_PREFERENCES
.ad
.RS 24n
.rt
Enable or obtain Source Address Selection rule settings for this socket.
For more details on the Source Address Selection rules, see
.BR inet6 (7P).
.RE

.sp
.LP
The following options are boolean switches controlling the reception of
ancillary data:
.sp
.ne 2
.mk
.na
.B IPV6_RECVPKTINFO
.ad
.RS 25n
.rt
Enable/disable receipt of the index of the interface the packet arrived on,
and of the inbound packet's destination address.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_RECVHOPLIMIT
.ad
.RS 25n
.rt
Enable/disable receipt of the inbound packet's current hoplimit.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_RECVHOPOPTS
.ad
.RS 25n
.rt
Enable/disable receipt of the inbound packet's
.B IPv6
hop-by-hop
extension header.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_RECVDSTOPTS
.ad
.RS 25n
.rt
Enable/disable receipt of the inbound packet's
.B IPv6
destination
options extension header.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_RECVRTHDR
.ad
.RS 25n
.rt
Enable/disable receipt of the inbound packet's
.B IPv6
routing header.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_RECVRTHDRDSTOPTS
.ad
.RS 25n
.rt
Enable/disable receipt of the inbound packet's intermediate-hops options
extension header. This option is obsolete. IPV6_RECVDSTOPTS turns on receipt
of both destination option headers.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_RECVTCLASS
.ad
.RS 25n
.rt
Enable/disable receipt of the traffic class of the inbound packet.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_RECVPATHMTU
.ad
.RS 25n
.rt
Enable/disable receipt of the path mtu of the inbound packet.
.RE

.sp
.LP
The following options may be set as sticky options with
.BR setsockopt (3SOCKET)
or as ancillary data to a
.BR sendmsg (3SOCKET)
system call:
.sp
.ne 2
.mk
.na
.B IPV6_PKTINFO
.ad
.RS 21n
.rt
Set the source address and/or interface out which the packet(s) will be
sent. Takes a
.B "struct in6_pktinfo"
as the parameter.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_HOPLIMIT
.ad
.RS 21n
.rt
Set the initial hoplimit for outbound datagrams. Takes an integer as the
parameter. Note: This option sets the hoplimit only for ancillary data or
sticky options and does not change the default hoplimit for the socket; see
.B IPV6_UNICAST_HOPS
and
.B IPV6_MULTICAST_HOPS
to change the socket's
default hoplimit.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_NEXTHOP
.ad
.RS 21n
.rt
Specify the
.B IPv6
address of the first hop, which must be a neighbor
of the sending host. Takes a
.B "struct sockaddr_in6"
as the
parameter. When this option specifies the same address as the destination
.B IPv6
address of the datagram, this is equivalent to the existing
.B SO_DONTROUTE
option.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_HOPOPTS
.ad
.RS 21n
.rt
Specify one or more hop-by-hop options. Variable length. Takes a complete
.B IPv6
hop-by-hop options extension header as the parameter.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_DSTOPTS
.ad
.RS 21n
.rt
Specify one or more destination options. Variable length. Takes a complete
.B IPv6
destination options extension header as the parameter.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_RTHDR
.ad
.RS 21n
.rt
Specify the
.B IPv6
routing header. Variable length. Takes a complete
.B IPv6
routing header as the parameter. Currently, only type 0 routing
headers are supported.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_RTHDRDSTOPTS
.ad
.RS 21n
.rt
Specify one or more destination options for all intermediate hops. May be
configured, but will not be applied unless an
.B IPv6
routing header is
also configured. Variable length. Takes a complete
.B IPv6
destination
options extension header as the parameter.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_PATHMTU
.ad
.RS 21n
.rt
Get the path MTU associated with a connected socket. Takes a ip6_mtuinfo as
the parameter.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_TCLASS
.ad
.RS 21n
.rt
Set the traffic class associated with outgoing packets. The parameter is an
integer. If the parameter is less then -1 or greater then 256, EINVAL is
returned. If the parameter is equal to -1, use the default. If the parameter
is between 0 and 255 inclusive, use that value.
.RE

.sp
.LP
The following options affect the socket's multicast behavior:
.sp
.ne 2
.mk
.na
.B IPV6_JOIN_GROUP
.ad
.RS 28n
.rt
Join a multicast group. Takes a
.B "struct ipv6_mreq"
as the
parameter; the structure contains a multicast address and an interface
index.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_LEAVE_GROUP
.ad
.RS 28n
.rt
Leave a multicast group. Takes a
.B "struct ipv6_mreq"
as the
parameter; the structure contains a multicast address and an interface
index.
.RE

.sp
.ne 2
.mk
.na
.B MCAST_JOIN_GROUP
.ad
.RS 28n
.rt
.RB "Functionally equivalent to IPV6_JOIN_GROUP. Takes a" " struct"
.B group_req
as the parameter. The structure contains a multicast address
and an interface index.
.RE

.sp
.ne 2
.mk
.na
.B MCAST_BLOCK_SOURCE
.ad
.RS 28n
.rt
Block multicast packets on a particular multicast group whose source
address matches the given source address. The specified group must be joined
.RB "previously using IPV6_JOIN_GROUP or MCAST_JOIN_GROUP. Takes a" " struct"
.B group_source_req
as the parameter. The structure contains an interface
index, a multicast address, and a source address.
.RE

.sp
.ne 2
.mk
.na
.B MCAST_UNBLOCK_SOURCE
.ad
.RS 28n
.rt
Unblock multicast packets which were previously blocked using
MCAST_BLOCK_SOURCE. Takes a
.B "struct group_source_req"
as the
parameter. The structure contains an interface index, a multicast address,
and a source address.
.RE

.sp
.ne 2
.mk
.na
.B MCAST_LEAVE_GROUP
.ad
.RS 28n
.rt
.RB "Functionally equivalent to IPV6_LEAVE_GROUP. Takes a" " struct"
.B group_req
as the parameter. The structure contains a multicast address
and an interface index.
.RE

.sp
.ne 2
.mk
.na
.B MCAST_JOIN_SOURCE_GROUP
.ad
.RS 28n
.rt
Begin receiving packets for the given multicast group whose source address
matches the specified address. Takes a
.B "struct group_source_req"
as the parameter. The structure contains an interface index, a multicast
address, and a source address.
.RE

.sp
.ne 2
.mk
.na
.B MCAST_LEAVE_SOURCE_GROUP
.ad
.RS 28n
.rt
Stop receiving packets for the given multicast group whose source address
matches the specified address. Takes a
.B "struct group_source_req"
as the parameter. The structure contains an interface index, a multicast
address, and a source address.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_MULTICAST_IF
.ad
.RS 28n
.rt
The outgoing interface for multicast packets. This option takes an integer
as an argument; the integer is the interface index of the selected
interface.
.RE

.sp
.ne 2
.mk
.na
.B IPV6_MULTICAST_HOPS
.ad
.RS 28n
.rt
Default hop limit for multicast datagrams. This option takes an integer as
an argument. Its value becomes the new default value for
.B ip6_hops
that
.B IPv6
will use on outgoing multicast datagrams sent from that socket.
The initial default is
.BR 1 .
.RE

.sp
.ne 2
.mk
.na
.B IPV6_MULTICAST_LOOP
.ad
.RS 28n
.rt
Loopback for multicast datagrams. Normally multicast datagrams are
delivered to members on the sending host. Setting the unsigned character
argument to 0 will cause the opposite behavior.
.RE

.sp
.LP
The multicast socket options can be used with any datagram socket type in
the
.B IPv6
family.
.sp
.LP
At the socket level, the socket option
.B SO_DONTROUTE
may be applied.
This option forces datagrams being sent to bypass routing and forwarding by
forcing the
.B IPv6
hoplimit field to
.BR 1 ,
meaning that the packet
will not be forwarded by routers.
.sp
.LP
Raw
.B IPv6
datagrams can also be sent and received using the
.BR TLI
connectionless primitives.
.sp
.LP
Datagrams flow through the
.B IPv6
layer in two directions: from the
network
.I up
to user processes and from user processes
.I down
to the
network. Using this orientation,
.B IPv6
is layered
.I above
the
network interface drivers and
.I below
the transport protocols such as
.B UDP
and
.BR TCP .
The Internet Control Message Protocol
.RB ( ICMPv6 ") for the Internet Protocol Version 6 (" IPv6 )
is logically
a part of
.BR IPv6 .
See
.BR icmp6 (7P).
.sp
.LP
Unlike
.BR IP ,
.B IPv6
provides no checksum of the
.B IPv6
header.
Also unlike
.BR IP ,
upper level protocol checksums are required.
.B IPv6
will compute the
.BR ULP /data
portion checksum if the checksum
field contains a zero (see
.B IPV6_CHECKSUM
option above).
.sp
.LP
.B IPv6
extension headers in received datagrams are processed in the
.B IPv6
layer according to the protocol specification. Currently
recognized
.B IPv6
extension headers include hop-by-hop options header,
destination options header, routing header (currently, only type 0 routing
headers are supported), and fragment header.
.sp
.LP
By default, the IPv6 layer will not forward IPv6 packets that are not
addressed to it. This behavior can be overridden by using
.BR routeadm (1M)
to enable the ipv6-forwarding option. IPv6 forwarding is
configured at boot time based on the setting of
.BR routeadm (1M)'s
ipv6-forwarding option.
.sp
.LP
For backwards compatibility, IPv6 forwarding can be enabled or disabled
using
.BR ndd (1M)'s
ip_forwarding variable.  It is set to 1 if IPv6
forwarding is enabled, or 0 if it is disabled.
.sp
.LP
Additionally, finer-grained forwarding can be configured in IPv6. Each
interface can be configured to forward IPv6 packets by setting the
IFF_ROUTER interface flag. This flag can be set and cleared using
\fBifconfig\fR(1M)'s router and -router options. If an interface's
IFF_ROUTER flag is set, packets can be forwarded to or from the interface.
If it is clear, packets will neither be forwarded from this interface to
others, nor forwarded to this interface. Setting the ip6_forwarding variable
sets all of the IPv6 interfaces' IFF_ROUTER flags.
.sp
.LP
For backwards compatibility, each interface creates an
.B <ifname>ip6_forwarding /dev/ip6
variable that can be modified using
.BR ndd (1M).
An interface's
.B ":ip6_forwarding ndd"
variable is a
boolean variable that mirrors the status of its IFF_ROUTER interface flag.
It is set to 1 if the flag is set, or 0 if it is clear. This interface
specific
.B "<ifname>:ip6_forwarding ndd"
variable is obsolete and may be
removed in a future release of Solaris. The
.BR ifconfig (1M)
router and
-router interfaces are preferred.
.sp
.LP
The
.B IPv6
layer will send an
.B ICMP6
message back to the source
host in many cases when it receives a datagram that can not be handled. A
"\fBtime exceeded\fR" \fBICMP6\fR message will be sent if the
.B ip6_hops
field in the
.B IPv6
header drops to zero in the process
of forwarding a datagram. A "\fBdestination unreachable\fR" message
will be sent by a router or by the originating host if a datagram can not be
sent on because there is no route to the final destination; it will be sent
by a router when it encounters a firewall prohibition; it will be sent by a
destination node when the transport protocol
.RB "(that is, " TCP )
has no
listener. A "\fBpacket too\fR \fBbig\fR" message will be sent by a
router if the packet is larger than the
.B MTU
of the outgoing link (this
is used for Path \fBMTU\fR Discovery). A "\fBparameter problem\fR"
message will be sent if there is a problem with a field in the
.BR IPv6
header or any of the
.B IPv6
extension headers such that the packet
cannot be fully processed.
.sp
.LP
The
.B IPv6
layer supports fragmentation and reassembly. Datagrams are
fragmented on output if the datagram is larger than the maximum transmission
unit
.RB ( MTU )
of the network interface. Fragments of received datagrams
are dropped from the reassembly queues if the complete datagram is not
reconstructed within a short time period.
.sp
.LP
Errors in sending discovered at the network interface driver layer are
passed by IPv6 back up to the user process.
.SH SEE ALSO
.sp
.LP
.BR svcs (1),
.BR ndd (1M),
.BR routeadm (1M),
.BR svcadm (1M),
.BR read (2),
.BR write (2),
.BR bind (3SOCKET),
.BR connect (3SOCKET),
.BR getsockopt (3SOCKET),
.BR recv (3SOCKET),
.BR recvmsg (3SOCKET),
.BR send (3SOCKET),
.BR sendmsg (3SOCKET),
.BR setsockopt (3SOCKET),
.BR defaultrouter (4),
.BR smf (5),
.BR icmp6 (7P),
.BR if_tcp (7P),
.BR ipsec (7P),
.BR inet6 (7P),
.BR routing (7P),
.BR tcp (7P),
.BR udp (7P)
.sp
.LP
Deering, S. and Hinden, B. \fI RFC 2460, Internet Protocol, Version 6 (IPv6) Specification\fR. The Internet Society. December, 1998.
.sp
.LP
Stevens, W., and Thomas, M.
.IR "RFC 2292, Advanced Sockets API for IPv6" .
Network Working Group. February 1998.
.SH DIAGNOSTICS
.sp
.LP
A socket operation may fail with one of the following errors returned:
.sp
.ne 2
.mk
.na
.B EPROTONOSUPPORT
.ad
.RS 19n
.rt
Unsupported protocol (for example, IPPROTO_RAW.)
.RE

.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 19n
.rt
A \fBbind()\fR operation was attempted with a "reserved" port number and
the effective user ID of the process was not the privileged user.
.RE

.sp
.ne 2
.mk
.na
.B EADDRINUSE
.ad
.RS 19n
.rt
A
.B bind()
operation was attempted on a socket with a network
address/port pair that has already been bound to another socket.
.RE

.sp
.ne 2
.mk
.na
.B EADDRNOTAVAIL
.ad
.RS 19n
.rt
A
.B bind()
operation was attempted for an address that is not
configured on this machine.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 19n
.rt
A
.B sendmsg()
operation with a non-NULL
.B msg_accrights
was
attempted.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 19n
.rt
A
.B getsockopt()
or
.B setsockopt()
operation with an unknown socket
option name was given.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 19n
.rt
A
.B getsockopt()
or
.B setsockopt()
operation was attempted with the
.B IPv6
option field improperly formed; an option field was shorter than
the minimum value or longer than the option buffer provided; the value in
the option field was invalid.
.RE

.sp
.ne 2
.mk
.na
.B EISCONN
.ad
.RS 19n
.rt
A
.B connect()
operation was attempted on a socket on which a
.B connect()
operation had already been performed, and the socket could
not be successfully disconnected before making the new connection.
.RE

.sp
.ne 2
.mk
.na
.B EISCONN
.ad
.RS 19n
.rt
A
.B sendto()
or
.B sendmsg()
operation specifying an address to
which the message should be sent was attempted on a socket on which a
.B connect()
operation had already been performed.
.RE

.sp
.ne 2
.mk
.na
.B EMSGSIZE
.ad
.RS 19n
.rt
A
.BR send() ,
.BR sendto() ,
or
.B sendmsg()
operation was attempted
to send a datagram that was too large for an interface, but was not allowed
to be fragmented (such as broadcasts).
.RE

.sp
.ne 2
.mk
.na
.B ENETUNREACH
.ad
.RS 19n
.rt
An attempt was made to establish a connection via
.BR connect() ,
or to
send a datagram by means of
.B sendto()
or
.BR sendmsg() ,
where there
was no matching entry in the routing table; or if an
.B ICMP
"\fBdestination unreachable\fR" message was received.
.RE

.sp
.ne 2
.mk
.na
.B ENOTCONN
.ad
.RS 19n
.rt
A
.B send()
or
.B write()
operation, or a
.B sendto()
or
.B sendmsg()
operation not specifying an address to which the message
.RB "should be sent, was attempted on a socket on which a" " connect()"
operation had not already been performed.
.RE

.sp
.ne 2
.mk
.na
.B ENOBUFS
.ad
.RS 19n
.rt
The system ran out of memory for fragmentation buffers or other internal
data structures.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 19n
.rt
The system was unable to allocate memory for an
.B IPv6
socket option or
other internal data structures.
.RE

.sp
.ne 2
.mk
.na
.B ENOPROTOOPT
.ad
.RS 19n
.rt
An
.B IP
socket option was attempted on an
.B IPv6
socket, or an
.B IPv6
socket option was attempted on an
.B IP
socket.
.RE

.sp
.ne 2
.mk
.na
.B ENOPROTOOPT
.ad
.RS 19n
.rt
Invalid socket type for the option.
.RE

.SH NOTES
.sp
.LP
Applications using the sockets
.B API
must use the Advanced Sockets
.B API
for
.B IPv6
.RI ( "RFC 2292" )
to see elements of the inbound
packet's
.B IPv6
header or extension headers.
.sp
.LP
The
.B ip6
service is managed by the service management facility,
.BR smf (5),
under the service identifier:
.sp
.in +2
.nf
svc:/network/initial:default
.fi
.in -2
.sp

.sp
.LP
Administrative actions on this service, such as enabling, disabling, or
requesting restart, can be performed using
.BR svcadm (1M).
The service's
status can be queried using the
.BR svcs (1)
command.
