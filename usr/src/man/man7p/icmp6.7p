'\" te
.\" Copyright (C) 1999, Sun Microsystems,
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH icmp6 7P "10 Nov 1999" "SunOS 5.11" "Protocols"
.SH NAME
icmp6 \- Internet Control Message Protocol for Internet Protocol Version
6
.SH SYNOPSIS
.LP
.nf
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/ip_icmp.h>
#include <netinet/icmp6.h>
.fi

.LP
.nf
s = socket(AF_INET6, SOCK_RAW, proto);
.fi

.LP
.nf
t = t_open("/dev/icmp6", O_RDWR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B ICMP6
protocol is the error and control message protocol used
with Version 6 of the Internet Protocol. It is used by the kernel to handle
and report errors in protocol processing. It is also used for
.B IPv6
neighbor and router discovery, and for multicast group membership queries
and reports. It may also be accessed by programs using the socket interface
or the Transport Level Interface
.RB ( TLI )
for network monitoring and
diagnostic functions. When used with the socket interface, a "raw socket"
type is used. The protocol number for
.BR ICMP6 ,
used in the
.IR proto
parameter to the socket call, can be obtained from
.BR getprotobyname (3SOCKET).
.B ICMP6
file descriptors and sockets are
connectionless and are normally used with the
.B t_sndudata
/
.B t_rcvudata
and the
.B sendto()
/
.B recvfrom()
calls. They may
.RB "also be used with the " sendmsg() / recvgmsg() " calls when sending or"
receiving ancillary data.
.sp
.LP
Outgoing packets automatically have an Internet Protocol Version 6
.RB ( IPv6 ") header and zero or more " IPv6 " extension headers prepended."
These headers are prepended by the kernel. Unlike
.B ICMP
for
.BR IPv4 ,
the
.B IP_HDRINCL
option is not supported for
.BR ICMP6 ,
so
.BR ICMP6
applications neither build their own outbound
.B IPv6
headers, nor do
they receive the inbound
.B IPv6
.RB "headers with received data." " IPv6"
extension headers and relevant fields of the
.B IPv6
header may be set or
received as ancillary data to a
.BR sendmsg "(3SOCKET) or"
.BR recvmsg (3SOCKET)
system call. Each of these fields and extension
headers may also be set on a per socket basis with the
\fBsetsockopt\fR(3SOCKET) system call. Such "sticky" options are used on all
outgoing packets unless overridden by ancillary data. When any ancillary
data is present with a
.BR sendmsg "(3SOCKET) system call, all sticky"
options are ignored for that system call, but subsequently remain
configured.
.sp
.LP
.B ICMP6
is a datagram protocol layered above
.BR IPv6 .
Received
.B ICMP6
messages may be reflected back to users of higher-level
protocols such as
.B TCP
or
.B UDP
as error returns from system calls.
A copy of each
.BR ICMP6 "error message received by the system is provided"
to every holder of an open
.B ICMP6
socket or
.B TLI
descriptor.
.SH SEE ALSO
.sp
.LP
.BR getprotobyname (3SOCKET),
.BR recv (3SOCKET),
.BR recvmsg (3SOCKET),
.BR send (3SOCKET),
.BR sendmsg (3SOCKET),
.BR setsockopt (3SOCKET),
.BR t_rcvudata (3NSL),
.BR t_sndudata (3NSL),
.BR inet6 (7P),
.BR ip6 (7P),
.BR routing (7P)
.sp
.LP
Conta, A. and Deering, S., \fIRFC 2463, Internet Control Message Protocol (ICMPv6) for the Internet Protocol Version 6 (IPv6) Specification\fR, The
Internet Society, December 1998.
.SH DIAGNOSTICS
.sp
.LP
A socket operation may fail with one of the following errors returned:
.sp
.ne 2
.mk
.na
.B EISCONN
.ad
.RS 17n
.rt
An attempt was made to establish a connection on a socket which already has
one, or when trying to send a datagram with the destination address
specified and the socket is already connected.
.RE

.sp
.ne 2
.mk
.na
.B ENOTCONN
.ad
.RS 17n
.rt
An attempt was made to send a datagram, but no destination address is
specified, and the socket has not been connected.
.RE

.sp
.ne 2
.mk
.na
.B ENOBUFS
.ad
.RS 17n
.rt
The system ran out of memory for an internal data structure.
.RE

.sp
.ne 2
.mk
.na
.B EADDRNOTAVAIL
.ad
.RS 17n
.rt
An attempt was made to create a socket with a network address for which no
network interface exists.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 17n
.rt
The system was unable to allocate memory for an internal data structure.
.RE

.sp
.ne 2
.mk
.na
.B ENOPROTOOPT
.ad
.RS 17n
.rt
An attempt was made to set an
.B IPv4
socket option on an
.BR IPv6
socket.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 17n
.rt
An attempt was made to set an invalid or malformed socket option.
.RE

.sp
.ne 2
.mk
.na
.B EAFNOSUPPORT
.ad
.RS 17n
.rt
An attempt was made to bind or connect to an
.B IPv4
or mapped address,
or to specify an
.B IPv4
or mapped address as the next hop.
.RE

