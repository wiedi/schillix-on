'\" te
.\" Copyright 2006 AT&T
.\" Copyright (C) 2006, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH udp 7P "4 July 2006" "SunOS 5.11" "Protocols"
.SH NAME
udp, UDP \- Internet User Datagram Protocol
.SH SYNOPSIS
.LP
.nf
\fB#include <sys/socket.h>\fR
.fi

.LP
.nf
\fB#include <netinet/in.h>\fR
.fi

.LP
.nf
\fBs = socket(AF_INET, SOCK_DGRAM, 0);\fR
.fi

.LP
.nf
\fBs = socket(AF_INET6, SOCK_DGRAM, 0);\fR
.fi

.LP
.nf
\fBt = t_open("/dev/udp", O_RDWR);\fR
.fi

.LP
.nf
\fBt = t_open("/dev/udp6", O_RDWR);\fR
.fi

.SH DESCRIPTION
.sp
.LP
.B UDP
is a simple datagram protocol which is layered directly above the
Internet Protocol ("\fBIP\fR") or the Internet Protocol Version 6 ("IPv6").
Programs may access
.B UDP
using the socket interface, where it supports
the
.B SOCK_DGRAM
socket type, or using the Transport Level
Interface ("\fBTLI\fR"), where it supports the connectionless (\fBT_CLTS\fR)
service type.
.sp
.LP
Within the socket interface,
.B UDP
is normally used with the
.BR sendto() ,
.BR sendmsg() ,
.BR recvfrom() ,
and
.B recvmsg()
calls
(see \fBsend\fR(3SOCKET) and \fBrecv\fR(3SOCKET)). If the
.BR connect (3SOCKET)
call is used to fix the destination for future packets,
then the
.BR recv "(3SOCKET) or"
.BR read (2)
and
.BR send "(3SOCKET) or"
.BR write (2)
calls may be used.
.sp
.LP
.B UDP
address formats are identical to those used by the Transmission
Control Protocol ("\fBTCP\fR"). Like \fBTCP, UDP\fR uses a port number
along with an \fBIP\fRor IPv6 address to identify the endpoint of
communication. The
.B UDP
port number space is separate from the
.BR TCP
port number space, that is, a \fBUDP\fR port may not be "connected" to a
.B TCP
port. The
.BR bind (3SOCKET)
call can be used to set the local
address and port number of a
.B UDP
socket. The local
.B IP
or IPv6
address may be left unspecified in the
.B bind()
call by using the special
value
.B INADDR_ANY
for
.BR IP ,
or the unspecified address (all zeroes)
for IPv6. If the
.B bind()
call is not done, a local
.B IP
or IPv6
address and port number will be assigned to  the endpoint when the first
packet is sent. Broadcast packets may be sent, assuming the underlying network
supports this, by using a reserved "broadcast address" This address is network
interface dependent. Broadcasts may only be sent by the privileged user.
.sp
.LP
Note that no two UDP sockets can be bound to the same port unless the bound
IP addresses are different. IPv4
.B INADDR_ANY
and IPv6 unspecified
addresses compare as equal to any IPv4 or IPv6 address. For example, if a
socket is bound to
.B INADDR_ANY
or unspecified address and port X, no
other socket can bind to port X, regardless of the binding address.  This
special consideration of
.B INADDR_ANY
and unspecified address can be
changed using the
.B SO_REUSEADDR
socket option.  If
.B SO_REUSEADDR
is
set on a socket doing a bind, IPv4
.B INADDR_ANY
and IPv6 unspecified
address do not compare as equal to any IP address. This means that as long as
the two sockets are not both bound to \fBINADDR_ANY\fR/unspecified address or
the same IP address, the two sockets can be bound to the same port.
.sp
.LP
If an application does not want to allow another socket using the
.B SO_REUSEADDR
option to bind to a port its socket is bound to, the
application can set the socket level option
.B SO_EXCLBIND
on a socket. The
option values of 0 and 1 represent enabling and disabling the option,
respectively. Once this option is enabled on a socket, no other socket can be
bound to the same port.
.sp
.LP
IPv6 does not support broadcast addresses; their function is supported by
IPv6 multicast addresses.
.sp
.LP
Options at the
.B IP
level may be used with
.BR UDP .
See
.BR ip "(7P) or"
.BR ip6 (7P).
Additionally, there is one UDP-level option of interest to
IPsec Key Management applications (see \fBipsec\fR(7P)and \fBpf_key\fR(7P)):
.sp
.ne 2
.mk
.na
.B UDP_NAT_T_ENDPOINT
.ad
.sp .6
.RS 4n
If this boolean option is set, datagrams sent via this socket will have a
non-ESP marker inserted between the UDP header and the data. Likewise, inbound
packets that match the endpoint's local-port will be demultiplexed between ESP
or the endpoint itself if a non-ESP marker is present. This option is only
available on IPv4 sockets (AF_INET), and the application must have sufficient
privilege to use PF_KEY sockets to also enable this option.
.RE

.sp
.LP
There are a variety of ways that a
.B UDP
packet can be lost or corrupted,
including a failure of the underlying communication mechanism. \fBUDP\fR
implements a checksum over the data portion of the packet. If the checksum of
a received packet is in error, the packet will be dropped with no indication
given to the user. A queue of received packets is provided for each \fBUDP\fR
socket. This queue has a limited capacity. Arriving datagrams which will not
fit within its
.I high-water
capacity are silently discarded.
.sp
.LP
\fBUDP\fR processes Internet Control Message Protocol ("\fBICMP\fR") and
Internet Control Message Protocol Version 6 ("\fBICMP6\fR") error messages
received in response to
.B UDP
packets it has sent. See
.BR icmp (7P)
and
.BR icmp6 (7P).
.sp
.LP
\fBICMP\fR "source quench" messages are ignored. \fBICMP\fR "destination
unreachable," "time exceeded" and "parameter problem" messages disconnect the
socket from its peer so that subsequent attempts to send packets using that
socket will return an error.
.B UDP
will not guarantee that packets are
delivered in the order they were sent. As well, duplicate packets may be
generated in the communication process.
.sp
.LP
\fBICMP6\fR "destination unreachable" packets are ignored unless the enclosed
code indicates that the port is not in use on the target host, in which case,
the application is notified. \fBICMP6\fR "parameter problem" notifications are
similarly passed upstream. All other
.B ICMP6
messages are ignored.
.SH SEE ALSO
.sp
.LP
.BR read (2),
.BR write (2),
.BR bind (3SOCKET),
.BR connect (3SOCKET),
.BR recv (3SOCKET),
.BR send (3SOCKET),
.BR icmp (7P),
.BR icmp6 (7P),
.BR inet (7P),
.BR inet6 (7P),
.BR ip (7P),
.BR ipsec (7P),
.BR ip6 (7P),
.BR pf_key (7P),
.BR tcp (7P)
.sp
.LP
Postel, Jon,
.IR "RFC 768, User Datagram Protocol" ,
Network Information
Center, SRI International, Menlo Park, Calif., August 1980
.sp
.LP
Huttunen, A., Swander, B., Volpe, V., DiBurro, L., Stenberg, \fIM., RFC 3948,
UDP Encapsulation of IPsec ESP Packets\fR, The Internet Society, 2005.
.SH DIAGNOSTICS
.sp
.LP
A socket operation may fail if:
.sp
.ne 2
.mk
.na
.B EISCONN
.ad
.RS 17n
.rt
A
.B connect()
operation was attempted on a socket on which a
.B connect()
operation had already been performed, and the socket could not
be successfully disconnected before making the new connection.
.RE

.sp
.ne 2
.mk
.na
.B EISCONN
.ad
.RS 17n
.rt
A
.B sendto()
or
.B sendmsg()
operation specifying an address to which
the message should be sent was attempted on a socket on which a
.B connect()
operation had already been performed.
.RE

.sp
.ne 2
.mk
.na
.B ENOTCONN
.ad
.RS 17n
.rt
A
.B send()
or
.B write()
operation, or a
.B sendto()
or
.B sendmsg()
operation not specifying an address to which the message
should be sent, was attempted on a socket on which a
.B connect()
operation
had not already been performed.
.RE

.sp
.ne 2
.mk
.na
.B EADDRINUSE
.ad
.RS 17n
.rt
A
.B bind()
operation was attempted on a socket with a network
address/port pair that has already been bound to another socket.
.RE

.sp
.ne 2
.mk
.na
.B EADDRNOTAVAIL
.ad
.RS 17n
.rt
A
.B bind()
operation was attempted on a socket with a network address for
which no network interface exists.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 17n
.rt
A
.B sendmsg()
operation with a non-NULL
.B msg_accrights
was
attempted.
.RE

.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 17n
.rt
A \fBbind()\fR operation was attempted with a "reserved" port number and the
effective user
.B ID
of the process was not the privileged user.
.RE

.sp
.ne 2
.mk
.na
.B ENOBUFS
.ad
.RS 17n
.rt
The system ran out of memory for internal data structures.
.RE

