'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH tcp 7P "30 June 2006" "SunOS 5.11" "Protocols"
.SH NAME
tcp, TCP \- Internet Transmission Control Protocol
.SH SYNOPSIS
.LP
.nf
\fB#include <sys/socket.h>\fR
.fi

.LP
.nf
\fB#include <netinet/in.h>\fR
.fi

.LP
.nf
\fBs = socket(AF_INET, SOCK_STREAM, 0);\fR
.fi

.LP
.nf
\fBs = socket(AF_INET6, SOCK_STREAM, 0);\fR
.fi

.LP
.nf
\fBt = t_open("/dev/tcp", O_RDWR);\fR
.fi

.LP
.nf
\fBt = t_open("/dev/tcp6", O_RDWR);\fR
.fi

.SH DESCRIPTION
.sp
.LP
.B TCP
is the virtual circuit protocol of the Internet protocol family.
It provides reliable, flow-controlled, in order, two-way transmission of
data. It is a byte-stream protocol layered above the Internet Protocol
.RB ( IP ),
or the Internet Protocol Version 6
.RB ( IPv6 ),
the Internet
protocol family's internetwork datagram delivery protocol.
.sp
.LP
Programs can access
.B TCP
using the socket interface as a
.B SOCK_STREAM
socket type, or using the Transport Level Interface
.RB ( TLI ") where it supports the connection-oriented (" T_COTS_ORD )
service type.
.sp
.LP
.B TCP
uses
.BR IP "'s host-level addressing and adds its own per-host"
collection of "port addresses." The endpoints of a \fBTCP\fR connection are
identified by the combination of an
.B IP
or IPv6 address and a
.BR TCP
port number. Although other protocols, such as the User Datagram Protocol
(UDP), may use the same host and port address format, the port space of
these protocols is distinct. See
.BR inet (7P)
and \fBinet6\fR(7P) for
details on the common aspects of addressing in the Internet protocol
family.
.sp
.LP
Sockets utilizing \fBTCP\fR are either "active" or "passive." Active
sockets initiate connections to passive sockets. Both types of sockets must
have their local
.B IP
or IPv6 address and
.B TCP
port number bound
with the
.BR bind (3SOCKET)
system call after the socket is created. By
default,
.B TCP
sockets are active. A passive socket is created by
calling the
.BR listen (3SOCKET)
system call after binding the socket with
.BR bind() .
This establishes a queueing parameter for the passive socket.
After this, connections to the passive socket can be received with the
.BR accept (3SOCKET)
system call. Active sockets use the
.BR connect (3SOCKET)
call after binding to initiate connections.
.sp
.LP
By using the special value
.B INADDR_ANY
with
.BR IP ,
or the
unspecified address (all zeroes) with IPv6, the local
.B IP
address can
be left unspecified in the
.B bind()
call by either active or passive
.B TCP
sockets. This feature is usually used if the local address is
either unknown or irrelevant. If left unspecified, the local
.B IP
or
IPv6 address will be bound at connection time to the address of the network
interface used to service the connection.
.sp
.LP
Note that no two TCP sockets can be bound to the same port unless the bound
IP addresses are different.  IPv4
.B INADDR_ANY
and IPv6 unspecified
addresses compare as equal to any IPv4 or IPv6 address. For example, if a
socket is bound to
.B INADDR_ANY
or unspecified address and port X, no
other socket can bind to port X, regardless of the binding address. This
special consideration of
.B INADDR_ANY
and unspecified address can be
changed using the socket option
.BR SO_REUSEADDR .
If
.B SO_REUSEADDR
is
set on a socket doing a bind, IPv4
.B INADDR_ANY
and IPv6 unspecified
address do not compare as equal to any IP address. This means that as long
as the two sockets are not both bound to
.BR INADDR_ANY /unspecified
address or the same IP address, the two sockets can be bound to the same
port.
.sp
.LP
 If an application does not want to allow another socket  using the
.B SO_REUSEADDR
option to bind to a port its socket is bound to, the application can set the
socket level option
.B SO_EXCLBIND
on a socket. The option values of 0 and 1 mean enabling and disabling the
option respectively.  Once this option is enabled on a socket, no other socket can be bound to the same port.
.sp
.LP
Once a connection has been established, data can be exchanged using the
.BR read (2)
and
.BR write (2)
system calls.
.sp
.LP
Under most circumstances,
.B TCP
sends data when it is presented. When
outstanding data has not yet been acknowledged,
.B TCP
gathers small
amounts of output to be sent in a single packet once an acknowledgement has
been received. For a small number of clients, such as window systems that
send a stream of mouse events which receive no replies, this packetization
may cause significant delays. To circumvent this problem,
.B TCP
provides
a socket-level boolean option,
.B "TCP_NODELAY. TCP_NODELAY"
is
defined in
.BR <netinet/tcp.h> ,
and is set with
.BR setsockopt (3SOCKET)
and tested with
.BR getsockopt (3SOCKET).
The option level for the
.B setsockopt()
call is the protocol number for
.B TCP,
available from
.BR getprotobyname (3SOCKET).
.sp
.LP
For some applications, it may be desirable for TCP not to send out data
unless a full TCP segment can be sent. To enable this behavior, an
application can use the
.B TCP_CORK
socket option. When
.B TCP_CORK
is
set with a non-zero value, TCP sends out a full TCP segment only. When
.B TCP_CORK
is set to zero after it has been enabled, all buffered data
is sent out (as permitted by the peer's receive window and the current
congestion window).
.B TCP_CORK
is defined in
.RB < netinet/tcp.h >,
and
is set with
.BR setsockopt "(3SOCKET) and tested with"
.BR getsockopt (3SOCKET).
The option level for the
.B setsockopt()
call
is the protocol  number  for TCP, available from
.BR getprotobyname (3SOCKET).
.sp
.LP
The SO_RCVBUF socket level option can be used to control the window that
TCP advertises to the peer. IP level options may also be used with TCP. See
.BR ip (7P)
and
.BR ip6 (7P).
.sp
.LP
Another socket level option,
.B SO_RCVBUF,
can be used to control the
window that
.B TCP
advertises to the peer.
.B IP
level options may
also be used with
.B TCP.
See
.BR ip "(7P) and"
.BR ip6 (7P).
.sp
.LP
.B TCP
provides an urgent data mechanism, which may be invoked using the
out-of-band provisions of
.BR send (3SOCKET).
The caller may mark one byte
as "urgent" with the \fBMSG_OOB\fR flag to \fBsend\fR(3SOCKET). This sets an
"urgent pointer" pointing to this byte in the \fBTCP\fR stream. The receiver
on the other side of the stream is notified of the urgent data by a
.B SIGURG
signal. The
.BR "SIOCATMARK ioctl" (2)
request returns a
value indicating whether the stream is at the urgent mark. Because the
system never returns data across the urgent mark in a single
.BR read (2)
call, it is possible to advance to the urgent data in a simple loop which
.RB "reads data, testing the socket with the" " SIOCATMARK ioctl()"
request, until it reaches the mark.
.sp
.LP
Incoming connection requests that include an
.B IP
source route option
are noted, and the reverse source route is used in responding.
.sp
.LP
A checksum over all data helps
.B TCP
implement reliability. Using a
window-based flow control mechanism that makes use of positive
.RB "acknowledgements, sequence numbers, and a retransmission strategy," " TCP"
can usually recover when datagrams are damaged, delayed, duplicated or
delivered out of order by the underlying communication medium.
.sp
.LP
If the local
.B TCP
receives no acknowledgements from its peer for a
period of time, (for example, if the remote machine crashes), the connection
is closed and an error is returned.
.sp
.LP
TCP follows the congestion control algorithm described in
.IR "RFC 2581" ,
and also supports the initial congestion window (cwnd) changes in \fIRFC 3390\fR. The initial cwnd calculation can be overridden by the socket option
TCP_INIT_CWND. An application can use this option to set the initial cwnd to
a specified number of TCP segments. This applies to the cases when the
connection first starts and restarts after an idle period.  The process must
have the PRIV_SYS_NET_CONFIG privilege if it wants to specify a number
greater than that calculated by
.IR "RFC 3390" .
.sp
.LP
SunOS supports
.B TCP
Extensions for High Performance
.RI ( "RFC 1323" )
which includes the window scale and time stamp options, and Protection
Against Wrap Around Sequence Numbers (PAWS). SunOS also supports Selective
Acknowledgment (SACK) capabilities (RFC 2018) and Explicit Congestion
Notification (ECN) mechanism
.RI ( "RFC 3168" ).
.sp
.LP
Turn on the window scale option in one of the following ways:
.RS +4
.TP
.ie t \(bu
.el o
An application can set
.B SO_SNDBUF
or
.B SO_RCVBUF
size in the
.B setsockopt()
option to be larger than 64K. This must be done
.I before
the program calls
.B listen()
or
.BR connect() ,
because
the window scale option is negotiated when the connection is established.
Once the connection has been made, it is too late to increase the send or
receive window beyond the default
.B TCP
limit of 64K.
.RE
.RS +4
.TP
.ie t \(bu
.el o
For all applications, use
.BR ndd (1M)
to modify the configuration
parameter
.BR tcp_wscale_always .
If
.B tcp_wscale_always
is set to
.BR 1 ,
the window scale option will always be set when connecting to a
remote system. If
.B tcp_wscale_always
is
.B 0,
the window scale
option will be set only if the user has requested a send or receive window
larger than 64K. The default value of
.B tcp_wscale_always
is
.BR 1 .
.RE
.RS +4
.TP
.ie t \(bu
.el o
Regardless of the value of
.BR tcp_wscale_always ,
the window scale option
will always be included in a connect acknowledgement if the connecting
system has used the option.
.RE
.sp
.LP
Turn on
.B SACK
capabilities in the following way:
.RS +4
.TP
.ie t \(bu
.el o
Use
.B ndd
to modify the configuration parameter
.BR tcp_sack_permitted .
If
.B tcp_sack_permitted
is set to
.BR 0 ,
.B TCP
will not accept
.B SACK
or send out
.B SACK
information. If
.B tcp_sack_permitted
is set to
.BR 1 ,
.B TCP
will not initiate a
connection with
.B SACK
permitted option in the
.B SYN
segment, but
will respond with
.B SACK
permitted option in the
.B SYN|ACK
segment
if an incoming connection request has the
.B SACK
permitted option. This
means that
.B TCP
will only accept
.B SACK
information if the other
side of the connection also accepts
.B SACK
information. If
.B tcp_sack_permitted
is set to
.BR 2 ,
it will both initiate and accept
connections with
.B SACK
information. The default for
.B tcp_sack_permitted
is
.B 2
(active enabled).
.RE
.sp
.LP
Turn on
.B "TCP ECN"
mechanism in the following way:
.RS +4
.TP
.ie t \(bu
.el o
Use
.B ndd
to modify the configuration parameter
.BR tcp_ecn_permitted .
If
.B tcp_ecn_permitted
is set to
.BR 0 ,
.B TCP
will not negotiate with a peer that supports
.B ECN
mechanism.
If
.B tcp_ecn_permitted
is set to
.B 1
when initiating a connection,
TCP will not tell a peer that it supports ECN mechanism. However, it will
tell a peer that it supports
.B ECN
mechanism when accepting a new
incoming connection request if the peer indicates that it supports
.BR ECN
mechanism in the SYN segment. If tcp_ecn_permitted is set to 2, in addition
to negotiating with a peer on ECN mechanism when accepting connections, TCP
will indicate in the outgoing SYN segment that it supports
.BR ECN
mechanism when
.B TCP
makes active outgoing connections. The default for
.B tcp_ecn_permitted
is 1.
.RE
.sp
.LP
Turn on the time stamp option in the following way:
.RS +4
.TP
.ie t \(bu
.el o
Use
.B ndd
to modify the configuration parameter
.BR tcp_tstamp_always .
If
.B tcp_tstamp_always
is
.BR 1 ,
the time
stamp option will always be set when connecting to a remote machine. If
.B tcp_tstamp_always
is
.BR 0 ,
the timestamp option will not be set
when connecting to a remote system. The default for
.B tcp_tstamp_always
is
.BR 0 .
.RE
.RS +4
.TP
.ie t \(bu
.el o
Regardless of the value of
.BR tcp_tstamp_always ,
the time stamp option
will always be included in a connect acknowledgement (and all succeeding
packets) if the connecting system has used the time stamp option.
.RE
.sp
.LP
Use the following procedure to turn on the time stamp option only when the
window scale option is in effect:
.RS +4
.TP
.ie t \(bu
.el o
Use
.B ndd
to modify the configuration parameter
.BR tcp_tstamp_if_wscale .
.RB "Setting " tcp_tstamp_if_wscale " to " 1 
will cause the time stamp option to be set when connecting to a remote
system, if the window scale option has been set. If
.B tcp_tstamp_if_wscale
is
.BR 0 ,
the time stamp option will not be set
when connecting to a remote system. The default for
.B tcp_tstamp_if_wscale
is
.BR 1 .
.RE
.sp
.LP
Protection Against Wrap Around Sequence Numbers (PAWS) is always used when
the time stamp option is set.
.sp
.LP
SunOS also supports multiple methods of generating initial sequence
numbers. One of these methods is the improved technique suggested in
.B RFC
1948. We
.B HIGHLY
recommend that you set sequence number
generation parameters as close to boot time as possible. This prevents
sequence number problems on connections that use the same connection-ID as
ones that used a different sequence number generation. The
.B svc:/network/initial:default
service configures the initial sequence
number generation.  The service reads the value contained in the
configuration file
.B /etc/default/inetinit
to determine which method to
use.
.sp
.LP
The
.B /etc/default/inetinit
file is an unstable interface, and may
change in future releases.
.sp
.LP
.B TCP
may be configured to report some information on connections that
terminate by means of an
.B RST
packet. By default, no logging is done.
If the
.BR ndd "(1M) parameter"
.I tcp_trace
is set to 1, then trace data
is collected for all new connections established after that time.
.sp
.LP
The trace data consists of the
.B TCP
headers and
.B IP
source and
destination addresses of the last few packets sent in each direction before
RST occurred. Those packets are logged in a series of
.BR strlog (9F)
calls. This trace facility has a very low overhead, and so is superior to
such utilities as
.BR snoop (1M)
for non-intrusive debugging for
connections terminating by means of an
.BR RST .
.sp
.LP
SunOS supports the keep-alive mechanism described in
.IR "RFC 1122" .
It is
enabled using the socket option SO_KEEPALIVE. When enabled, the first
keep-alive probe is sent out after a TCP is idle for two hours If the peer
does not respond to the probe within eight minutes, the TCP connection is
aborted. You can alter the interval for sending out the first probe using
the socket option TCP_KEEPALIVE_THRESHOLD. The option value is an unsigned
integer in milliseconds. The system default is controlled by the TCP ndd
parameter tcp_keepalive_interval. The minimum value is ten seconds. The
maximum is ten days, while the default is two hours. If you receive no
response to the probe, you can use the TCP_KEEPALIVE_ABORT_THRESHOLD socket
option to change the time threshold for aborting a TCP connection. The
option value is an unsigned integer in milliseconds. The value zero
indicates that TCP should never time out and abort the connection when
probing. The system default is controlled by the TCP ndd parameter
tcp_keepalive_abort_interval. The default is eight minutes.
.SH SEE ALSO
.sp
.LP
.BR svcs (1),
.BR ndd (1M),
.BR ioctl (2),
.BR read (2),
.BR svcadm (1M),
.BR write (2),
.BR accept (3SOCKET),
.BR bind (3SOCKET),
.BR connect (3SOCKET),
.BR getprotobyname (3SOCKET),
.BR getsockopt (3SOCKET),
.BR listen (3SOCKET),
.BR send (3SOCKET),
.BR smf (5),
.BR inet (7P),
.BR inet6 (7P),
.BR ip (7P),
.BR ip6 (7P)
.sp
.LP
Ramakrishnan, K., Floyd, S., Black, D., RFC 3168, \fIThe Addition of Explicit Congestion Notification (ECN) to IP\fR, September 2001.
.sp
.LP
Mathias, M. and Hahdavi, J. Pittsburgh Supercomputing Center; Ford, S.
Lawrence Berkeley National Laboratory; Romanow, A. Sun Microsystems, Inc.
.IR "RFC 2018, TCP Selective Acknowledgement Options" ,
October 1996.
.sp
.LP
Bellovin, S.,
.IR "RFC 1948, Defending Against Sequence Number Attacks" ,
May 1996.
.sp
.LP
Jacobson, V., Braden, R., and Borman, D., \fIRFC 1323, TCP Extensions for High Performance\fR, May 1992.
.sp
.LP
Postel, Jon, \fIRFC 793, Transmission Control Protocol - DARPA Internet Program Protocol Specification\fR, Network Information Center, SRI
International, Menlo Park, CA., September 1981.
.SH DIAGNOSTICS
.sp
.LP
A socket operation may fail if:
.sp
.ne 2
.mk
.na
.B EISCONN
.ad
.RS 17n
.rt
A
.B connect()
operation was attempted on a socket on which a
.B connect()
operation had already been performed.
.RE

.sp
.ne 2
.mk
.na
.B ETIMEDOUT
.ad
.RS 17n
.rt
A connection was dropped due to excessive retransmissions.
.RE

.sp
.ne 2
.mk
.na
.B ECONNRESET
.ad
.RS 17n
.rt
The remote peer forced the connection to be closed (usually because the
remote machine has lost state information about the connection due to a
crash).
.RE

.sp
.ne 2
.mk
.na
.B ECONNREFUSED
.ad
.RS 17n
.rt
The remote peer actively refused connection establishment (usually because
no process is listening to the port).
.RE

.sp
.ne 2
.mk
.na
.B EADDRINUSE
.ad
.RS 17n
.rt
A
.B bind()
operation was attempted on a socket with a network
address/port pair that has already been bound to another socket.
.RE

.sp
.ne 2
.mk
.na
.B EADDRNOTAVAIL
.ad
.RS 17n
.rt
A
.B bind()
operation was attempted on a socket with a network address
for which no network interface exists.
.RE

.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 17n
.rt
A \fBbind()\fR operation was attempted with a "reserved" port number and
the effective user
.B ID
of the process was not the privileged user.
.RE

.sp
.ne 2
.mk
.na
.B ENOBUFS
.ad
.RS 17n
.rt
The system ran out of memory for internal data structures.
.RE

.SH NOTES
.sp
.LP
The
.B tcp
service is managed by the service management facility,
.BR smf (5),
under the service identifier:
.sp
.in +2
.nf
svc:/network/initial:default
.fi
.in -2
.sp

.sp
.LP
Administrative actions on this service, such as enabling, disabling, or
requesting restart, can be performed using
.BR svcadm (1M).
The service's
status can be queried using the
.BR svcs (1)
command.
