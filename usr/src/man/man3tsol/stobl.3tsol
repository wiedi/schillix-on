'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH stobl 3TSOL "20 Jul 2007" "SunOS 5.11" "Trusted Extensions Library Functions"
.SH NAME
stobl, stobsl, stobclear \- translate character-coded labels to binary
labels
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [\fIflag\fR.\|.\|.] \fIfile\fR.\|.\|. \fB-ltsol\fR [\fIlibrary\fR.\|.\|.]
.fi

.LP
.nf
#include <tsol/label.h>

\fBint\fR \fBstobsl\fR(\fBconst char *\fIstring\fR, \fBm_label_t *\fIlabel\fR, \fBconst int\fR \fIflags\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBint\fR \fBstobclear\fR(\fBconst char *\fIstring\fR, \fBm_label_t *\fIclearance\fR,
     \fBconst int\fR \fIflags\fR, \fBint *\fIerror\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B stobsl()
and
.B stobclear()
functions translate
character-coded labels into binary labels. They also modify an existing
binary label by incrementing or decrementing it to produce a new binary
label relative to its existing value.
.sp
.LP
The calling process must have
.B PRIV_SYS_TRANS_LABEL
in its set of
effective privileges to perform label translation on character-coded labels
that dominate the process's sensitivity label.
.sp
.LP
The generic form of an input character-coded label string is:
.sp
.in +2
.nf
[  +  ] \fIclassification name\fR ] [ [  + | \(mi ] \fIword\fR .\|.\|.
.fi
.in -2
.sp

.sp
.LP
Leading and trailing white space is ignored. Fields are separated by white
.RB "space, a `" / "' (slash), or a `" , '
(comma). Case is irrelevant. If
.I string
starts with
.B +
or
.BR \(mi ,
.I string
is interpreted
a modification to an existing label. If
.I string
starts with a
classification name followed by a
.B +
or
.BR \(mi ,
the new
classification is used and the rest of the old label is retained and
modified as specified by
.IR string .
.B +
modifies an existing label by
adding words.
.B \(mi
modifies an existing label by removing words. To
the maximum extent possible, errors in
.I string
are corrected in the
resulting binary label
.IR label .
.sp
.LP
The
.B stobsl()
and
.B stobclear()
functions also translate
hexadecimal label representations into binary labels (see
.BR hextob (3TSOL))
when the string starts with
.B 0x
and either
.B NEW_LABEL
or
.B NO_CORRECTION
is specified in
.IR flags .
.sp
.LP
The
.I flags
argument can take the following values:
.sp
.ne 2
.mk
.na
.B NEW_LABEL
.ad
.RS 17n
.rt
.I label
contents is not used, is formatted as a label of the relevant
type, and is assumed to be
.B ADMIN_LOW
for modification changes. If
.B NEW_LABEL
is not present,
.I label
is validated as a defined label
of the correct type dominated by the process's sensitivity label.
.RE

.sp
.ne 2
.mk
.na
.B NO_CORRECTION
.ad
.RS 17n
.rt
No corrections are made if there are errors in the character-coded label
.IR string .
.I string
must be complete and contain all the label
components that are required by the
.B label_encodings
file. The
.B NO_CORRECTION
flag implies the
.B NEW_LABEL
flag.
.RE

.sp
.ne 2
.mk
.na
.B 0 (zero)
.ad
.RS 17n
.rt
The default action is taken.
.RE

.sp
.LP
The
.I error
argument is a return parameter that is set only if the
function is unsuccessful.
.sp
.LP
The
.B stobsl()
function translates the character-coded sensitivity
label string into a binary sensitivity label and places the result in the
return parameter
.IR label .
.sp
.LP
The
.I flags
argument can be either
.BR NEW_LABEL ,
.BR NO_CORRECTION ,
or 0 (zero). Unless
.B NO_CORRECTION
is specified,
this translation forces the label to dominate the minimum classification,
and initial compartments set that is specified in the
.BR label_encodings
file and corrects the label to include other label components required by
the
.B label_encodings
file, but not present in
.IR string .
.sp
.LP
The
.B stobclear()
function translates the character-coded clearance
string into a binary clearance and places the result in the return parameter
.IR clearance .
.sp
.LP
The
.I flags
argument can be either
.BR NEW_LABEL ,
.BR NO_CORRECTION ,
or
.B 0
(zero). Unless
.B NO_CORRECTION
is
specified, this translation forces the label to dominate the minimum
classification, and initial compartments set that is specified in the
.B label_encodings
file and corrects the label to include other label
components that are required by the
.B label_encodings
file, but not
present in
.IR string .
The translation of a clearance might not be the
same as the translation of a sensitivity label. These functions use
different tables of the
.B label_encodings
file that might contain
different words and constraints.
.SH RETURN VALUES
.sp
.LP
These functions return 1 if the translation was successful and a valid
binary label was returned. Otherwise they return 0 and the value of the
.I error
argument indicates the error.
.SH ERRORS
.sp
.LP
When these functions return zero,
.I error
contains one of the following
values:
.sp
.ne 2
.mk
.na
\fB\(mi1\fR
.ad
.RS 9n
.rt
Unable to access the
.B label_encodings
file.
.RE

.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 9n
.rt
The label
.I label
is not valid for this translation and the
.B NEW_LABEL
or
.B NO_CORRECTION
flag was not specified, or the label
.I label
is not dominated by the process's
.I "sensitivity label"
and
the process does not have
.B PRIV_SYS_TRANS_LABEL
in its set of effective
privileges.
.RE

.sp
.ne 2
.mk
.na
.B >0
.ad
.RS 9n
.rt
The character-coded label
.I string
is in error.
.I error
is a
one-based index into
.I string
indicating where the translation error
occurred.
.RE

.SH FILES
.sp
.ne 2
.mk
.na
.B /etc/security/tsol/label_encodings
.ad
.sp .6
.RS 4n
The label encodings file contains the classification names, words,
constraints, and values for the defined labels of this system.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityObsolete
_
MT-LevelMT-Safe
.TE

.sp
.LP
The
.B stobsl()
and
.B stobclear()
functions are obsolete. Use the
.BR str_to_label (3TSOL)
function instead.
.SH SEE ALSO
.sp
.LP
.BR blcompare (3TSOL),
.BR hextob (3TSOL),
.BR libtsol (3LIB),
.BR str_to_label (3TSOL),
.BR attributes (5)
.SH NOTES
.sp
.LP
The functionality described on this manual page is available only if the
system is configured with Trusted Extensions.
.sp
.LP
In addition to the
.B ADMIN_LOW
name and
.B ADMIN_HIGH
name strings
defined in the \fBlabel_encodings\fR file, the strings "\fBADMIN_LOW\fR" and
"\fBADMIN_HIGH\fR" are always accepted as character-coded labels to be
translated to the appropriate
.B ADMIN_LOW
and
.B ADMIN_HIGH
label,
respectively.
.sp
.LP
Modifying an existing
.B ADMIN_LOW
label acts as the specification of a
.B NEW_LABEL
and forces the label to start at the minimum label that is
specified in the
.B label_encodings
file.
.sp
.LP
Modifying an existing
.B ADMIN_HIGH
label is treated as an attempt to
change a label that represents the highest defined classification and all
the defined compartments that are specified in the
.BR label_encodings
file.
.sp
.LP
The
.B NO_CORRECTION
flag is used when the character-coded label must be
complete and accurate so that translation to and from the binary form
results in an equivalent character-coded label.
