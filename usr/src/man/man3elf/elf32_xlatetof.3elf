'\" te
.\" Copyright 1989 AT&T  Copyright (c) 2001, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH elf32_xlatetof 3ELF "11 Jul 2001" "SunOS 5.11" "ELF Library Functions"
.SH NAME
elf32_xlatetof, elf32_xlatetom, elf64_xlatetof, elf64_xlatetom \-
class-dependent data translation
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR .\|.\|. ] \fIfile\fR.\|.\|. \fB-lelf\fR [ \fIlibrary\fR .\|.\|. ]
#include <libelf.h>

\fBElf_Data *\fBelf32_xlatetof\fR(\fBElf_Data *\fIdst\fR, \fBconst Elf_Data *\fIsrc\fR,
     \fBunsigned\fR \fIencode\fR);
.fi

.LP
.nf
\fBElf_Data *\fBelf32_xlatetom\fR(\fBElf_Data *\fIdst\fR, \fBconst Elf_Data *\fIsrc\fR,
     \fBunsigned\fR \fIencode\fR);
.fi

.LP
.nf
\fBElf_Data *\fBelf64_xlatetof\fR(\fBElf_Data *\fIdst\fR, \fBconst Elf_Data *\fIsrc\fR,
     \fBunsigned\fR \fIencode\fR);
.fi

.LP
.nf
\fBElf_Data *\fBelf64_xlatetom\fR(\fBElf_Data *\fIdst\fR, \fBconst Elf_Data *\fIsrc\fR,
     \fBunsigned\fR \fIencode\fR);
.fi

.SH DESCRIPTION
.sp
.LP
.B elf32_xlatetom()
translates various data structures from their 32-bit
class file representations to their memory representations;
.B elf32_xlatetof()
provides the inverse. This conversion is particularly
important for cross development environments.
.I src
is a pointer to the
source buffer that holds the original data;
.I dst
is a pointer to a
destination buffer that will hold the translated copy.
.I encode
gives
the byte encoding in which the file objects are to be represented and must
have one of the encoding values defined for the
.B ELF
header's
.B e_ident[EI_DATA]
entry (see
.BR elf_getident (3ELF)).
If the data can
be translated, the functions return
.IR dst .
Otherwise, they return
.I NULL
because an error occurred, such as incompatible types,
destination buffer overflow, etc.
.sp
.LP
.BR elf_getdata (3ELF)
describes the
.B Elf_Data
descriptor, which the
translation routines use as follows:
.sp
.ne 2
.mk
.na
.B d_buf
.ad
.RS 13n
.rt
Both the source and destination must have valid buffer pointers.
.RE

.sp
.ne 2
.mk
.na
.B d_type
.ad
.RS 13n
.rt
This member's value specifies the type of the data to which
.B d_buf
points and the type of data to be created in the destination. The program
supplies a
.B d_type
value in the source; the library sets the
destination's
.B d_type
to the same value. These values are summarized
below.
.RE

.sp
.ne 2
.mk
.na
.B d_size
.ad
.RS 13n
.rt
This member holds the total size, in bytes, of the memory occupied by the
source data and the size allocated for the destination data. If the
destination buffer is not large enough, the routines do not change its
original contents. The translation routines reset the destination's
.B d_size
member to the actual size required, after the translation
occurs. The source and destination sizes may differ.
.RE

.sp
.ne 2
.mk
.na
.B d_version
.ad
.RS 13n
.rt
This member holds the version number of the objects (desired) in the
buffer. The source and destination versions are independent.
.RE

.sp
.LP
Translation routines allow the source and destination buffers to coincide.
That is, \fBdst\(->d_buf\fR may equal \fBsrc\(->d_buf\fR. Other cases where
the source and destination buffers overlap give undefined behavior.
.sp
.in +2
.nf
\fBElf_Type   	32-Bit Memory Type
ELF_T_ADDR	Elf32_Addr
ELF_T_BYTE	unsigned char
ELF_T_DYN	Elf32_Dyn
ELF_T_EHDR	Elf32_Ehdr
ELF_T_HALF	Elf32_Half
ELT_T_OFF	Elf32_Off
ELF_T_PHDR	Elf32_Phdr
ELF_T_REL	Elf32_Rel
ELF_T_RELA	Elf32_Rela
ELF_T_SHDR	Elf32_Shdr
ELF_T_SWORD	Elf32_Sword
ELF_T_SYM	Elf32_Sym
ELF_T_WORD	Elf32_Word\fR
.fi
.in -2

.sp
.LP
Translating buffers of type
.B ELF_T_BYTE
does not change the byte
order.
.sp
.LP
For the 64\(mibit class, replace 32 with 64 as appropriate.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStable
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR elf (3ELF),
.BR elf32_fsize (3ELF),
.BR elf_getdata (3ELF),
.BR elf_getident (3ELF),
.BR libelf (3LIB),
.BR attributes (5)
