'\" te
.\" Copyright 1989 AT&T  Copyright (c) 2001, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH elf_getscn 3ELF "11 Jul 2001" "SunOS 5.11" "ELF Library Functions"
.SH NAME
elf_getscn, elf_ndxscn, elf_newscn, elf_nextscn \- get section
information
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lelf\fR [ \fIlibrary\fR .\|.\|. ]
#include <libelf.h>

\fBElf_Scn *\fBelf_getscn\fR(\fBElf *\fIelf\fR, \fBsize_t\fR \fIindex\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBelf_ndxscn\fR(\fBElf_Scn *\fIscn\fR);
.fi

.LP
.nf
\fBElf_Scn *\fBelf_newscn\fR(\fBElf *\fIelf\fR);
.fi

.LP
.nf
\fBElf_Scn *\fBelf_nextscn\fR(\fBElf *\fIelf\fR, \fBElf_Scn *\fIscn\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions provide indexed and sequential access to the sections
associated with the
.B ELF
descriptor
.IR elf .
If the program is
building a new file, it is responsible for creating the file's \fBELF\fR
header before creating sections; see \fBelf32_getehdr\fR(3ELF).
.sp
.LP
The
.B elf_getscn()
function returns a section descriptor, given an
.I index
into the file's section header table. Note that the first
``real'' section has an index of
.BR 1 .
Although a program can get a
section descriptor for the section whose
.I index
is
.BR 0
(\fBSHN_UNDEF\fR, the undefined section), the section has no data and the
section header is ``empty'' (though present). If the specified section does
not exist, an error occurs, or
.I elf
is
.IR NULL ,
.B elf_getscn()
returns a null pointer.
.sp
.LP
The
.B elf_newscn()
function creates a new section and appends it to the
list for
.IR elf .
Because the
.B SHN_UNDEF
section is required and not
``interesting'' to applications, the library creates it automatically. Thus
the first call to
.B elf_newscn()
for an
.B ELF
descriptor with no
existing sections returns a descriptor for section 1. If an error occurs or
.I elf
is
.IR NULL ,
.B elf_newscn()
returns a null pointer.
.sp
.LP
After creating a new section descriptor, the program can use
.B elf32_getshdr()
to retrieve the newly created, ``clean'' section
header. The new section descriptor will have no associated data (see
.BR elf_getdata (3ELF)).
When creating a new section in this way, the
library updates the
.B e_shnum
member of the
.B ELF
header and sets
the
.B ELF_F_DIRTY
bit for the section (see \fBelf_flagdata\fR(3ELF)). If
the program is building a new file, it is responsible for creating the
file's
.B ELF
header (see \fBelf32_getehdr\fR(3ELF)) before creating new
sections.
.sp
.LP
The
.B elf_nextscn()
function takes an existing section descriptor,
.IR scn ,
and returns a section descriptor for the next higher section. One
may use a null
.I scn
to obtain a section descriptor for the section
whose index is
.B 1
(skipping the section whose index is
.BR SHN_UNDEF ).
If no further sections are present or an error occurs,
.B elf_nextscn()
returns a null pointer.
.sp
.LP
The
.B elf_ndxscn()
function takes an existing section descriptor,
.IR scn ,
and returns its section table index. If
.I scn
is null or an
error occurs,
.B elf_ndxscn()
returns
.BR SHN_UNDEF .
.SH EXAMPLES
.LP
.B Example 1
A sample of calling
.B elf_getscn()
function.
.sp
.LP
An example of sequential access appears below. Each pass through the loop
processes the next section in the file; the loop terminates when all
sections have been processed.

.sp
.in +2
.nf
\fBscn = 0;
while ((scn = elf_nextscn(elf, scn)) != 0)
{
	/* process section */
}\fR
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStable
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR elf (3ELF),
.BR elf32_getehdr (3ELF),
.BR elf32_getshdr (3ELF),
.BR elf_begin (3ELF),
.BR elf_flagdata (3ELF),
.BR elf_getdata (3ELF),
.BR libelf (3LIB),
.BR attributes (5)
