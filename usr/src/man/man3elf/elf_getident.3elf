'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH elf_getident 3ELF "18 Jun 2009" "SunOS 5.11" "ELF Library Functions"
.SH NAME
elf_getident, elf_getphdrnum, elf_getshdrnum, elf_getshdrstrndx,
elf_getphnum, elf_getshnum, elf_getshstrndx \- retrieve
.B ELF
header
data
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lelf\fR [ \fIlibrary\fR .\|.\|. ]
#include <libelf.h>

\fBchar *\fBelf_getident\fR(\fBElf *\fIelf\fR, \fBsize_t *\fIdst\fR);
.fi

.LP
.nf
\fBint\fR \fBelf_getphdrnum\fR(\fBElf *\fIelf\fR, \fBsize_t *\fIdst\fR);
.fi

.LP
.nf
\fBint\fR \fBelf_getshdrnum\fR(\fBElf *\fIelf\fR, \fBsize_t *\fIdst\fR);
.fi

.LP
.nf
\fBint\fR \fBelf_getshdrstrndx\fR(\fBElf *\fIelf\fR, \fBsize_t *\fIdst\fR);
.fi

.SS "Obsolete Interfaces"
.LP
.nf
\fBint\fR \fBelf_getphnum\fR(\fBElf *\fIelf\fR, \fBsize_t *\fIdst\fR);
.fi

.LP
.nf
\fBint\fR \fBelf_getshnum\fR(\fBElf *\fIelf\fR, \fBsize_t *\fIdst\fR);
.fi

.LP
.nf
\fBint\fR \fBelf_getshstrndx\fR(\fBElf *\fIelf\fR, \fBsize_t *\fIdst\fR);
.fi

.SH DESCRIPTION
.sp
.LP
As \fBelf\fR(3ELF) explains, \fBELF\fR provides a framework for various
classes of files, where basic objects might have 32 or 64 bits. To
accommodate these differences, without forcing the larger sizes on smaller
machines, the initial bytes in an
.B ELF
file hold identification
information common to all file classes. The
.B e_ident
of every
.BR ELF
header has
.B EI_NIDENT
bytes with interpretations described in the
following table.
.sp

.sp
.TS
tab();
lw(1.83i) lw(1.83i) lw(1.83i)
lw(1.83i) lw(1.83i) lw(1.83i)
.
\fBe_ident Index\fR\fBValue\fR\fBPurpose\fR

\fBEI_MAG0\fR\fBELFMAG0\fRFile identification
\fBEI_MAG1\fR\fBELFMAG1\fR
\fBEI_MAG2\fR\fBELFMAG2\fR
\fBEI_MAG3\fR\fBELFMAG3\fR

\fBEI_CLASS\fR\fBELFCLASSNONE\fRFile class
\fBELFCLASS32\fR
\fBELFCLASS64\fR

\fBEI_DATA\fR\fBELFDATANONE\fRData encoding
\fBELFDATA2LSB\fR
\fBELFDATA2MSB\fR

\fBEI_VERSION\fR\fBEV_CURRENT\fRFile version

7-150Unused, set to zero
.TE

.sp
.LP
Other kinds of files might have identification data, though they would not
conform to
.BR e_ident .
See \fBelf_kind\fR(3ELF) for information on other
kinds of files.
.sp
.LP
The
.B elf_getident()
function returns a pointer to the initial bytes of
the file. If the library recognizes the file, a conversion from the file
image to the memory image can occur. The identification bytes are guaranteed
to be unmodified, though the size of the unmodified area depends on the file
type. If the
.I dst
argument is non-null, the library stores the number
of identification bytes in the location to which
.I dst
points. If no
data are present,
.I elf
is
.IR NULL ,
or an error occurs, the return
value is a null pointer, with
.B 0
stored through
.IR dst ,
if
.IR dst
is non-null.
.sp
.LP
The
.B elf_getphdrnum()
function obtains the number of program headers
recorded in the
.B ELF
file. The number of sections in a file is
typically recorded in the
.B e_phnum
field of the
.B ELF
header. A
file that requires the
.B ELF
extended program header records the value
.B PN_XNUM
in the
.B e_phnum
field and records the number of sections
in the \fBsh_info\fR field of section header 0. See USAGE. The \fIdst\fR
argument points to the location where the number of sections is stored. If
.I elf
is
.I NULL
or an error occurs,
.B elf_getphdrnum()
returns
.BR \(mi1 \&.
.sp
.LP
The
.B elf_getshdrnum()
function obtains the number of sections recorded
in the
.B ELF
file. The number of sections in a file is typically
recorded in the
.B e_shnum
field of the
.B ELF
header. A file that
requires
.B ELF
extended section records the value
.B 0
in the
.B e_shnum
field and records the number of sections in the
.BR sh_size
field of section header 0. See USAGE. The
.I dst
argument points to the
location where the number of sections is stored. If a call to
.BR elf_newscn (3ELF)
that uses the same
.I elf
descriptor is performed,
the value obtained by
.B elf_getshnum()
is valid only after a successful
call to \fBelf_update\fR(3ELF). If \fIelf\fR is
.I NULL
or an error
occurs, \fBelf_getshdrnum()\fR returns \fB\(mi1\fR\&.
.sp
.LP
The
.B elf_getshdrstrndx()
function obtains the section index of the
string table associated with the section headers in the
.B ELF
file. The
section header string table index is typically recorded in the
.B e_shstrndx
field of the
.B ELF
header. A file that requires
.B ELF
extended section records the value
.B SHN_XINDEX
in the
.B e_shstrndx
field and records the string table index in the
.B sh_link
field of section header 0. See USAGE. The
.I dst
argument
points to the location where the section header string table index is
stored. If
.I elf
is
.I NULL
or an error occurs,
.B elf_getshdrstrndx()
returns \fB\(mi1\fR\&.
.sp
.LP
The
.BR elf_getphnum() ,
.BR elf_getshnum() ,
and \fBelf_getshstrndx()\fR
functions behave in a manner similar to
.BR elf_getphdrnum() ,
.BR elf_getshdrnum() ,
and
.BR elf_getshdrstrndx() ,
respectively, except
that they return 0 if
.I elf
is
.I NULL
or an error occurs. Because
these return values differ from those used by some other systems, they are
therefore non-portable and their use is discouraged. The
.BR elf_getphdrnum() ,
.BR elf_getshdrnum() ,
and
.B elf_getshdrstrndx()
functions should be used instead.
.SH USAGE
.sp
.LP
ELF extended sections allow an ELF file to contain more than \fB0xff00\fR
(\fBSHN_LORESERVE\fR) section. ELF extended program headers allow an ELF
file to contain \fB0xffff\fR (\fBPN_XNUM\fR) or more program headers. See
the
.I "Linker and Libraries Guide"
for more information.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, the
.B elf_getident()
function returns 1.
Otherwise, it return 0.
.sp
.LP
Upon successful completion, the
.BR elf_getphdrnum() ,
.BR elf_getshdrnum() ,
and
.B elf_getshdrstrndx()
functions return 0.
Otherwise, they return -1.
.sp
.LP
Upon successful completion, the
.BR elf_getphnum() ,
.BR elf_getshnum() ,
and
.B elf_getshstrndx()
functions return 1. Otherwise, they return 0.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilitySee below.
_
MT-LevelMT-Safe
.TE

.sp
.LP
The
.BR elf_getident() ,
.BR elf_getphdrnum() ,
.BR elf_getshdrnum() ,
and
.B elf_getshdrstrndx()
functions are Committed. The
.BR elf_getphnum() ,
.BR elf_getshnum() ,
and  \fBelf_getshstrndx()\fR
functions are Committed (Obsolete).
.SH SEE ALSO
.sp
.LP
.BR elf (3ELF),
.BR elf32_getehdr (3ELF),
.BR elf_begin (3ELF),
.BR elf_kind (3ELF),
.BR elf_newscn (3ELF),
.BR elf_rawfile (3ELF),
.BR elf_update (3ELF),
.BR libelf (3LIB),
.BR attributes (5)
.sp
.LP
.I Linker and Libraries Guide
