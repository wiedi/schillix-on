'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc., All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH gelf 3ELF "8 June 2004" "SunOS 5.11" "ELF Library Functions"
.SH NAME
gelf, gelf_checksum, gelf_fsize, gelf_getcap, gelf_getclass, gelf_getdyn,
gelf_getehdr, gelf_getmove, gelf_getphdr, gelf_getrel, gelf_getrela,
gelf_getshdr, gelf_getsym, gelf_getsyminfo, gelf_getsymshndx, gelf_newehdr,
gelf_newphdr, gelf_update_cap, gelf_update_dyn, gelf_update_ehdr,
gelf_update_getmove, gelf_update_move, gelf_update_phdr, gelf_update_rel,
gelf_update_rela, gelf_update_shdr, gelf_update_sym, gelf_update_symshndx,
gelf_update_syminfo, gelf_xlatetof, gelf_xlatetom \- generic
class-independent ELF interface
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|.  \fB\(milelf\fR [ \fIlibrary\fR.\|.\|. ]
#include <gelf.h>

\fBlong\fR \fBgelf_checksum\fR(\fBElf *\fIelf\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBgelf_fsize\fR(\fBElf *\fIelf\fR, \fBElf_Type\fR \fItype\fR, \fBsize_t\fR \fIcnt\fR, \fBunsigned\fR \fIver\fR);
.fi

.LP
.nf
\fBint\fR \fBgelf_getcap\fR(\fBElf_Data *\fIsrc\fR, \fBint\fR \fIndx\fR, \fBGElf_Cap *\fIdst\fR);
.fi

.LP
.nf
\fBint\fR \fBgelf_getclass\fR(\fBElf *\fIelf\fR);
.fi

.LP
.nf
\fBGElf_Dyn *\fBgelf_getdyn\fR(\fBElf_Data *\fIsrc\fR, \fBint\fR \fIndx\fR, \fBGElf_Dyn *\fIdst\fR);
.fi

.LP
.nf
\fBGElf_Ehdr *\fBgelf_getehdr\fR(\fBElf *\fIelf\fR, \fBGElf_Ehdr *\fIdst\fR);
.fi

.LP
.nf
\fBGElf_Move *\fBgelf_getmove\fR(\fBElf_Data *\fIsrc\fR, \fBint\fR \fIndx\fR, \fBGElf_Move *\fIdst\fR);
.fi

.LP
.nf
\fBGElf_Phdr *\fBgelf_getphdr\fR(\fBElf *\fIelf\fR, \fBint\fR \fIndx\fR, \fBGElf_Phdr *\fIdst\fR);
.fi

.LP
.nf
\fBGElf_Rel *\fBgelf_getrel\fR(\fBElf_Data *\fIsrc\fR, \fBint\fR \fIndx\fR, \fBGElf_Rel *\fIdst\fR);
.fi

.LP
.nf
\fBGElf_Rela *\fBgelf_getrela\fR(\fBElf_Data *\fIsrc\fR, \fBint\fR \fIndx\fR, \fBGElf_Rela *\fIdst\fR);
.fi

.LP
.nf
\fBGElf_Shdr *\fBgelf_getshdr\fR(\fBElf_Scn *\fIscn\fR, \fBGElf_Shdr *\fIdst\fR);
.fi

.LP
.nf
\fBGElf_Sym *\fBgelf_getsym\fR(\fBElf_Data *\fIsrc\fR, \fBint\fR \fIndx\fR, \fBGElf_Sym *\fIdst\fR);
.fi

.LP
.nf
\fBGElf_Syminfo *\fBgelf_getsyminfo\fR(\fBElf_Data *\fIsrc\fR, \fBint\fR \fIndx\fR, \fBGElf_Syminfo *\fIdst\fR);
.fi

.LP
.nf
\fBGElf_Sym *\fBgelf_getsymshndx\fR(\fBElf_Data *\fIsymsrc\fR, \fBElf_Data *\fIshndxsrc\fR,
     \fBint\fR \fIndx\fR, \fBGElf_Sym *\fIsymdst\fR, \fBElf32_Word *\fIshndxdst\fR);
.fi

.LP
.nf
\fBunsigned long\fR \fBgelf_newehdr\fR(\fBElf *\fIelf\fR, \fBint\fR \fIclass\fR);
.fi

.LP
.nf
\fBunsigned long\fR \fBgelf_newphdr\fR(\fBElf *\fIelf\fR, \fBsize_t\fR \fIphnum\fR);
.fi

.LP
.nf
\fBint\fR \fBgelf_update_cap\fR(\fBElf_Data *\fIdst\fR, \fBint\fR \fIndx\fR, \fBGElf_Cap *\fIsrc\fR);
.fi

.LP
.nf
\fBint\fR \fBgelf_update_dyn\fR(\fBElf_Data *\fIdst\fR, \fBint\fR \fIndx\fR, \fBGElf_Dyn *\fIsrc\fR);
.fi

.LP
.nf
\fBint\fR \fBgelf_update_ehdr\fR(\fBElf *\fIelf\fR, \fBGElf_Ehdr *\fIsrc\fR);
.fi

.LP
.nf
\fBint\fR \fBgelf_update_move\fR(\fBElf_Data *\fIdst\fR, \fBint\fR \fIndx\fR, \fBGElf_Move *\fIsrc\fR);
.fi

.LP
.nf
\fBint\fR \fBgelf_update_phdr\fR(\fBElf *\fIelf\fR, \fBint\fR \fIndx\fR, \fBGElf_Phdr *\fIsrc\fR);
.fi

.LP
.nf
\fBint\fR \fBgelf_update_rel\fR(\fBElf_Data *\fIdst\fR, \fBint\fR \fIndx\fR, \fBGElf_Rel *\fIsrc\fR);
.fi

.LP
.nf
\fBint\fR \fBgelf_update_rela\fR(\fBElf_Data *\fIdst\fR, \fBint\fR \fIndx\fR, \fBGElf_Rela *\fIsrc\fR);
.fi

.LP
.nf
\fBint\fR \fBgelf_update_shdr\fR(\fBElf_Scn *\fIdst\fR, \fBGElf_Shdr *\fIsrc\fR);
.fi

.LP
.nf
\fBint\fR \fBgelf_update_sym\fR(\fBElf_Data *\fIdst\fR, \fBint\fR \fIndx\fR, \fBGElf_Sym *\fIsrc\fR);
.fi

.LP
.nf
\fBint\fR \fBgelf_update_syminfo\fR(\fBElf_Data *\fIdst\fR, \fBint\fR \fIndx\fR, \fBGElf_Syminfo *\fIsrc\fR);
.fi

.LP
.nf
\fBint\fR \fBgelf_update_symshndx\fR(\fBElf_Data *\fIsymdst\fR, \fBElf_Data *\fIshndxdst\fR, \fBint\fR \fIndx\fR,
     \fBGElf_Sym *\fIsymsrc\fR, \fBElf32_Word\fR \fIshndxsrc\fR);
.fi

.LP
.nf
\fBElf_Data *\fBgelf_xlatetof\fR(\fBElf *\fIelf\fR, \fBElf_Data *\fIdst\fR, \fBconst Elf_Data *\fIsrc\fR,
     \fBunsigned\fR \fIencode\fR);
.fi

.LP
.nf
\fBElf_Data *\fBgelf_xlatetom\fR(\fBElf *\fIelf\fR, \fBElf_Data *\fIdst\fR, \fBconst Elf_Data *\fIsrc\fR,
     \fBunsigned\fR \fIencode\fR);
.fi

.SH DESCRIPTION
.sp
.LP
.B GElf
is a generic,
.B ELF
class-independent
.B API
for
manipulating
.B ELF
object files.
.B GElf
provides a single, common
interface for handling 32-bit and 64-bit
.B ELF
format object files.
.B GElf
is a translation layer between the application and the
class-dependent parts of the
.B ELF
library. Thus, the application can
use
.BR GElf ,
which in turn, will call the corresponding
.B elf32_
or
.B elf64_
functions on behalf of the application. The data structures
returned are all large enough to hold 32-bit and 64-bit data.
.sp
.LP
.B GElf
provides a simple, class-independent layer of indirection over
the class-dependent
.B ELF32
and \fBELF64 API\fR's. \fBGElf\fR is
stateless, and may be used along side the
.B ELF32
and
.BR ELF64
.BR API 's.
.sp
.LP
.B GElf
always returns a copy of the underlying
.B ELF32
or
.B ELF64
structure, and therefore the programming practice of using the
address of an
.B ELF
header as the base offset for the
.BR ELF 's
mapping into memory should be avoided. Also, data accessed by type-casting
the
.B Elf_Data
buffer to a class-dependent type and treating it like an
array, for example, a symbol table, will not work under
.BR GElf ,
and the
.B gelf_get
functions must be used instead. See the EXAMPLE section.
.sp
.LP
Programs that create or modify
.B ELF
files using \fBlibelf\fR(3LIB)
need to perform an extra step when using
.BR GElf .
Modifications to
.B GElf
values must be explicitly flushed to the underlying
.BR ELF32
or
.B ELF64
structures by way of the
.B gelf_update_
interfaces. Use
of \fBelf_update\fR or \fBelf_flagelf\fR and the like remains the same.
.sp
.LP
The sizes of versioning structures remain the same between
.B ELF32
and
.BR ELF64 .
The
.B "GElf API"
only defines types for versioning,
rather than a functional
.BR API .
The processing of versioning information
will stay the same in the
.B GElf
environment as it was in the
class-dependent
.B ELF
environment.
.SS "List of Functions"
.sp
.ne 2
.mk
.na
.B gelf_checksum()
.ad
.RS 26n
.rt
An analog to \fBelf32_checksum\fR(3ELF) and \fBelf64_checksum\fR(3ELF).
.RE

.sp
.ne 2
.mk
.na
.B gelf_fsize()
.ad
.RS 26n
.rt
An analog to \fBelf32_fsize\fR(3ELF) and \fBelf64_fsize\fR(3ELF).
.RE

.sp
.ne 2
.mk
.na
.B gelf_getcap()
.ad
.RS 26n
.rt
Retrieves the \fBElf32_Cap\fR or \fBElf64_Cap\fR information from the
capability table at the given index.
.B dst
points to the location where
the
.B GElf_Cap
capability entry is stored.
.RE

.sp
.ne 2
.mk
.na
.B gelf_getclass()
.ad
.RS 26n
.rt
Returns one of the constants
.BR ELFCLASS32 ,
.B ELFCLASS64
or
.BR ELFCLASSNONE .
.RE

.sp
.ne 2
.mk
.na
.B gelf_getdyn()
.ad
.RS 26n
.rt
Retrieves the \fBElf32_Dyn\fR or \fBElf64_Dyn\fR information from the
dynamic table at the given index.
.B dst
points to the location where the
.B GElf_Dyn
dynamic entry is stored.
.RE

.sp
.ne 2
.mk
.na
.B gelf_getehdr()
.ad
.RS 26n
.rt
An analog to \fBelf32_getehdr\fR(3ELF) and \fBelf64_getehdr\fR(3ELF).
.B dst
points to the location where the
.B GElf_Ehdr
header is
stored.
.RE

.sp
.ne 2
.mk
.na
.B gelf_getmove()
.ad
.RS 26n
.rt
Retrieves the \fBElf32_Move\fR or \fBElf64_Move\fR information from the
move table at the given index.
.B dst
points to the location where the
.B GElf_Move
move entry is stored.
.RE

.sp
.ne 2
.mk
.na
.B gelf_getphdr()
.ad
.RS 26n
.rt
An analog to\fBelf32_getphdr\fR(3ELF) and \fBelf64_getphdr\fR(3ELF).
.B dst
points to the location where the
.B GElf_Phdr
program header is
stored.
.RE

.sp
.ne 2
.mk
.na
.B gelf_getrel()
.ad
.RS 26n
.rt
Retrieves the \fBElf32_Rel\fR or \fBElf64_Rel\fR information from the
relocation table at the given index.
.B dst
points to the location where
the
.B GElf_Rel
relocation entry is stored.
.RE

.sp
.ne 2
.mk
.na
.B gelf_getrela()
.ad
.RS 26n
.rt
Retrieves the \fBElf32_Rela\fR or \fBElf64_Rela\fR information from the
relocation table at the given index.
.B dst
points to the location where
the
.B GElf_Rela
relocation entry is stored.
.RE

.sp
.ne 2
.mk
.na
.B gelf_getshdr()
.ad
.RS 26n
.rt
An analog to \fBelf32_getshdr\fR(3ELF) and \fBelf64_getshdr\fR(3ELF).
.B dst
points to the location where the
.B GElf_Shdr
section header is
stored.
.RE

.sp
.ne 2
.mk
.na
.B gelf_getsym()
.ad
.RS 26n
.rt
Retrieves the \fBElf32_Sym\fR or \fBElf64_Sym\fR information from the
symbol table at the given index.
.B dst
points to the location where the
.B GElf_Sym
symbol entry is stored.
.RE

.sp
.ne 2
.mk
.na
.B gelf_getsyminfo()
.ad
.RS 26n
.rt
Retrieves the \fBElf32_Syminfo\fR or \fBElf64_Syminfo\fR information from
the relocation table at the given index.
.B dst
points to the location
where the
.B GElf_Syminfo
symbol information entry is stored.
.RE

.sp
.ne 2
.mk
.na
.B gelf_getsymshndx()
.ad
.RS 26n
.rt
Provides an extension to
.B gelf_getsym()
that retrieves the
.B Elf32_Sym
or
.B Elf64_Sym
information, and the section index from
the symbol table at the given index
.IR ndx .
.sp
The symbols section index is typically recorded in the
.B st_shndx
field
of the symbols structure. However, a file that requires
.B ELF
Extended
Sections may record an
.B st_shndx
of
.B SHN_XINDEX
indicating that
the section index must be obtained from an associated
.BR SHT_SYMTAB_SHNDX
section entry. If
.I xshndx
and
.I shndxdata
are non-null, the value
recorded at index
.I ndx
of the
.B SHT_SYMTAB_SHNDX
table pointed to
by
.I shndxdata
is returned in
.IR xshndx .
See USAGE.
.RE

.sp
.ne 2
.mk
.na
.B gelf_newehdr()
.ad
.RS 26n
.rt
An analog to \fBelf32_newehdr\fR(3ELF) and \fBelf64_newehdr\fR(3ELF).
.RE

.sp
.ne 2
.mk
.na
.B gelf_newphdr()
.ad
.RS 26n
.rt
An analog to \fBelf32_newphdr\fR(3ELF) and \fBelf64_newphdr\fR(3ELF).
.RE

.sp
.ne 2
.mk
.na
.B gelf_update_cap()
.ad
.RS 26n
.rt
Copies the
.B GElf_Cap
information back into the underlying
.B Elf32_Cap
or
.B Elf64_Cap
structure at the given index.
.RE

.sp
.ne 2
.mk
.na
.B gelf_update_dyn()
.ad
.RS 26n
.rt
Copies the
.B GElf_Dyn
information back into the underlying
.B Elf32_Dyn
or
.B Elf64_Dyn
structure at the given index.
.RE

.sp
.ne 2
.mk
.na
.B gelf_update_ehdr()
.ad
.RS 26n
.rt
Copies the contents of the
.B "GElf_Ehdr ELF"
header to the
underlying \fBElf32_Ehdr\fR or \fBElf64_Ehdr\fR structure.
.RE

.sp
.ne 2
.mk
.na
.B gelf_update_move()
.ad
.RS 26n
.rt
Copies the
.B GElf_Move
information back into the underlying
.B Elf32_Move
or
.B Elf64_Move
structure at the given index.
.RE

.sp
.ne 2
.mk
.na
.B gelf_update_phdr()
.ad
.RS 26n
.rt
Copies of the contents of
.B GElf_Phdr
program header to underlying the
.B Elf32_Phdr
or
.B Elf64_Phdr
structure.
.RE

.sp
.ne 2
.mk
.na
.B gelf_update_rel()
.ad
.RS 26n
.rt
Copies the
.B GElf_Rel
information back into the underlying
.B Elf32_Rel
or
.B Elf64_Rel
structure at the given index.
.RE

.sp
.ne 2
.mk
.na
.B gelf_update_rela()
.ad
.RS 26n
.rt
Copies the
.B GElf_Rela
information back into the underlying
.B Elf32_Rela
or
.B Elf64_Rela
structure at the given index.
.RE

.sp
.ne 2
.mk
.na
.B gelf_update_shdr()
.ad
.RS 26n
.rt
Copies of the contents of
.B GElf_Shdr
section header to underlying the
.B Elf32_Shdr
or
.B Elf64_Shdr
structure.
.RE

.sp
.ne 2
.mk
.na
.B gelf_update_sym()
.ad
.RS 26n
.rt
Copies the
.B GElf_Sym
information back into the underlying
.B Elf32_Sym
or
.B Elf64_Sym
structure at the given index.
.RE

.sp
.ne 2
.mk
.na
.B gelf_update_syminfo()
.ad
.RS 26n
.rt
Copies the
.B GElf_Syminfo
information back into the underlying
.B Elf32_Syminfo
or
.B Elf64_Syminfo
structure at the given index.
.RE

.sp
.ne 2
.mk
.na
.B gelf_update_symshndx()
.ad
.RS 26n
.rt
Provides an extension to
.B gelf_update_sym()
that copies the
.B GElf_Sym
information back into the \fBElf32_Sym\fR or \fBElf64_Sym\fR
structure at the given index
.IR ndx ,
and copies the extended
.IR xshndx
section index into the
.B Elf32_Word
at the given index
.I ndx
in the
buffer described by
.BR shndxdata .
See USAGE.
.RE

.sp
.ne 2
.mk
.na
.B gelf_xlatetof()
.ad
.RS 26n
.rt
An analog to \fBelf32_xlatetof\fR(3ELF) and \fBelf64_xlatetof\fR(3ELF)
.RE

.sp
.ne 2
.mk
.na
.B gelf_xlatetom()
.ad
.RS 26n
.rt
An analog to \fBelf32_xlatetom\fR(3ELF) and \fBelf64_xlatetom\fR(3ELF)
.RE

.SH RETURN VALUES
.sp
.LP
Upon failure, all
.B GElf
functions return
.B 0
and set
.IR elf_errno .
See \fBelf_errno\fR(3ELF)
.SH EXAMPLES
.LP
.B Example 1
Printing the ELF Symbol Table
.sp
.in +2
.nf
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <libelf.h>
#include <gelf.h>

void
main(int argc, char **argv)
{
    Elf         *elf;
    Elf_Scn     *scn = NULL;
    GElf_Shdr   shdr;
    Elf_Data    *data;
    int         fd, ii, count;

    elf_version(EV_CURRENT);

    fd = open(argv[1], O_RDONLY);
    elf = elf_begin(fd, ELF_C_READ, NULL);

    while ((scn = elf_nextscn(elf, scn)) != NULL) {
        gelf_getshdr(scn, &shdr);
        if (shdr.sh_type == SHT_SYMTAB) {
            /* found a symbol table, go print it. */
            break;
        }
    }

    data = elf_getdata(scn, NULL);
    count = shdr.sh_size / shdr.sh_entsize;

    /* print the symbol names */
    for (ii = 0; ii < count; ++ii) {
        GElf_Sym sym;
        gelf_getsym(data, ii, &sym);
        printf("%s\en", elf_strptr(elf, shdr.sh_link, sym.st_name));
    }
    elf_end(elf);
    close(fd);
}
.fi
.in -2

.SH USAGE
.sp
.LP
ELF Extended Sections are employed to allow an ELF file to contain more
than \fB0xff00\fR (\fBSHN_LORESERVE\fR) section. See the \fILinker and
Libraries Guide\fR for more information.
.SH FILES
.sp
.ne 2
.mk
.na
.B /lib/libelf.so.1
.ad
.RS 23n
.rt
shared object
.RE

.sp
.ne 2
.mk
.na
.B /lib/64/libelf.so.1
.ad
.RS 23n
.rt
64-bit shared object
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStable
_
MT LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR elf (3ELF),
.BR elf32_checksum (3ELF),
.BR elf32_fsize (3ELF),
.BR elf32_getehdr (3ELF),
.BR elf32_newehdr (3ELF),
.BR elf32_getphdr (3ELF),
.BR elf32_newphdr (3ELF),
.BR elf32_getshdr (3ELF),
.BR elf32_xlatetof (3ELF),
.BR elf32_xlatetom (3ELF),
.BR elf_errno (3ELF),
.BR libelf (3LIB),
.BR attributes (5)
.sp
.LP
.I Linker and Libraries Guide
