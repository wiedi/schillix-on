'\" te
.\" Copyright 1989 AT&T  Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH elf_begin 3ELF "11 Jul 2001" "SunOS 5.11" "ELF Library Functions"
.SH NAME
elf_begin, elf_end, elf_memory, elf_next, elf_rand \- process ELF object
files
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR .\|.\|. \fB-lelf\fR [ \fIlibrary\fR .\|.\|. ]
#include <libelf.h>

\fBElf *\fBelf_begin\fR(\fBint\fR \fIfildes\fR, \fBElf_Cmd\fR \fIcmd\fR, \fBElf *\fIref\fR);
.fi

.LP
.nf
\fBint\fR \fBelf_end\fR(\fBElf *\fIelf\fR);
.fi

.LP
.nf
\fBElf *\fBelf_memory\fR(\fBchar *\fIimage\fR, \fBsize_t\fR \fIsz\fR);
.fi

.LP
.nf
\fBElf_Cmd\fR \fBelf_next\fR(\fBElf *\fIelf\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBelf_rand\fR(\fBElf *\fIelf\fR, \fBsize_t\fR \fIoffset\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.BR elf_begin() ,
.BR elf_end() ,
\fBelf_memory()\fR,
.BR elf_next() ,
and \fBelf_rand()\fR functions work together to process
Executable and Linking Format (ELF) object files, either individually or as
members of archives. After obtaining an
.B ELF
descriptor from
\fBelf_begin()\fR or
.BR elf_memory() ,
the program can read an existing
file, update an existing file, or create a new file. The
.I fildes
argument is an open file descriptor that
.B elf_begin()
uses for reading
or writing. The
.I elf
argument is an
.B ELF
descriptor previously
returned from
.BR elf_begin() .
The initial file offset (see
.BR lseek (2))
is unconstrained, and the resulting file offset is
undefined.
.sp
.LP
The
.I cmd
argument can take the following values:
.sp
.ne 2
.mk
.na
.B ELF_C_NULL
.ad
.RS 15n
.rt
When a program sets
.I cmd
to this value,
.B elf_begin()
returns a
null pointer, without opening a new descriptor.
.I ref
is ignored for
this command. See the examples below for more information.
.RE

.sp
.ne 2
.mk
.na
.B ELF_C_READ
.ad
.RS 15n
.rt
When a program wants to examine the contents of an existing file, it should
set
.I cmd
to this value. Depending on the value of
.IR ref ,
this
command examines archive members or entire files. Three cases can occur.
.RS +4
.TP
.ie t \(bu
.el o
If \fIref\fR is a null pointer,
.B elf_begin()
allocates a new \fBELF\fR
descriptor and prepares to process the entire file. If the file being read
is an archive,
.B elf_begin()
also prepares the resulting descriptor to
examine the initial archive member on the next call to
.BR elf_begin() ,
as
if the program had used
.BR " elf_next()" " or "
.B elf_rand()
to ``move'' to
the initial member.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.I ref
is a non-null descriptor associated with an archive file,
\fBelf_begin()\fR lets a program obtain a separate
.B ELF
descriptor
associated with an individual member. The program should have used
\fBelf_next()\fR or \fBelf_rand()\fR to position
.I ref
appropriately
(except for the initial member, which
.B elf_begin()
prepares; see the
example below). In this case,
.I fildes
should be the same file
descriptor used for the parent archive.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.I ref
is a non-null
.B ELF
descriptor that is not an archive,
\fBelf_begin()\fR increments the number of activations for the descriptor
and returns
.IR ref ,
without allocating a new descriptor and without
changing the descriptor's read/write permissions. To terminate the
descriptor for
.IR ref ,
the program must call
.B elf_end()
once for
each activation. See the examples below for more information.
.RE
.RE

.sp
.ne 2
.mk
.na
.B ELF_C_RDWR
.ad
.RS 15n
.rt
This command duplicates the actions of
.B ELF_C_READ
and additionally
allows the program to update the file image (see
.BR elf_update (3ELF)).
Using
.B ELF_C_READ
gives a read-only view of the file, while
\fBELF_C_RDWR\fR lets the program read
.I and
write the file.
\fBELF_C_RDWR\fR is not valid for archive members. If 
.I ref
is
non-null, it must have been created with the
.B ELF_C_RDWR
command.
.RE

.sp
.ne 2
.mk
.na
.B ELF_C_WRITE
.ad
.RS 15n
.rt
If the program wants to ignore previous file contents, presumably to create
a new file, it should set
.I cmd
to this value.
.I ref
is ignored for
this command.
.RE

.sp
.LP
The
.B elf_begin()
function operates on all files (including files with
zero bytes), providing it can allocate memory for its internal structures
and read any necessary information from the file. Programs reading object
files can call
.BR elf_kind (3ELF)
or \fBelf32_getehdr\fR(3ELF) to
determine the file type (only object files have an
.B ELF
header). If the
file is an archive with no more members to process, or an error occurs,
\fBelf_begin()\fR returns a null pointer. Otherwise, the return value is a
non-null
.B ELF
descriptor.
.sp
.LP
Before the first call to
.BR elf_begin() ,
a program must call
\fBelf_version()\fR to coordinate versions.
.sp
.LP
The
.B elf_end()
function is used to terminate an
.B ELF
descriptor,
.IR elf ,
and to deallocate data associated with the descriptor. Until the
program terminates a descriptor, the data remain allocated. A null pointer
is allowed as an argument, to simplify error handling. If the program wants
to write data associated with the
.B ELF
descriptor to the file, it must
.RB "use " elf_update() " before calling " elf_end() .
.sp
.LP
Calling
.B elf_end()
removes one activation and returns the remaining
activation count. The library does not terminate the descriptor until the
activation count reaches
.BR 0 .
Consequently, a
.B 0
return value
indicates the
.B ELF
descriptor is no longer valid.
.sp
.LP
.RB "The " elf_memory() " function returns a pointer to an " ELF 
descriptor. The
.B ELF
image has read operations enabled (
.BR ELF_C_READ ).
The
.I image
argument is a pointer to an image of the
Elf file mapped into memory. The
.I sz
argument is the size of the
\fBELF\fR image. An
.B ELF
image that is mapped in with
\fBelf_memory()\fR can be read and modified, but the
.B ELF
image size
cannot be changed.
.sp
.LP
The
.B elf_next()
function provides sequential access to the next
archive member. Having an
.B ELF
descriptor,
.IR elf ,
associated with
an archive member,
.B elf_next()
prepares the containing archive to
access the following member when the program calls
.BR elf_begin() .
After
successfully positioning an archive for the next member,
.B elf_next()
returns the value
.BR ELF_C_READ .
Otherwise, the open file was not an
archive,
.I elf
was
.IR NULL ,
or an error occurred, and the return
value is
.BR ELF_C_NULL .
In either case, the return value can be passed as
an argument to
.BR elf_begin() ,
specifying the appropriate action.
.sp
.LP
The
.B elf_rand()
function provides random archive processing, preparing
\fIelf\fR to access an arbitrary archive member. The
.I elf
argument must
be a descriptor for the archive itself, not a member within the archive. The
\fIoffset\fR argument specifies the byte offset from the beginning of the
archive to the archive header of the desired member. See
.BR elf_getarsym (3ELF)
for more information about archive member offsets.
When
.B elf_rand()
works, it returns
.IR offset .
Otherwise, it returns
.BR 0 ,
because an error occurred,
.I elf
was
.IR " NULL" ,
or the file
was not an archive (no archive member can have a zero offset). A program can
mix random and sequential archive processing.
.SS "System Services"
.sp
.LP
When processing a file, the library decides when to read or write the file,
depending on the program's requests. Normally, the library assumes the file
descriptor remains usable for the life of the
.B ELF
descriptor. If,
however, a program must process many files simultaneously and the underlying
operating system limits the number of open files, the program can use
\fBelf_cntl()\fR to let it reuse file descriptors. After calling
\fBelf_cntl()\fR with appropriate arguments, the program can close the file
descriptor without interfering with the library.
.sp
.LP
All data associated with an
.B ELF
descriptor remain allocated until
\fBelf_end()\fR terminates the descriptor's last activation. After the
descriptors have been terminated, the storage is released; attempting to
reference such data gives undefined behavior. Consequently, a program that
deals with multiple input (or output) files must keep the
.B ELF
descriptors active until it finishes with them.
.SH EXAMPLES
.LP
\fBExample 1\fR A sample program of calling the \fBelf_begin()\fR
function.
.sp
.LP
A prototype for reading a file appears on the next page. If the file is a
simple object file, the program executes the loop one time, receiving a null
descriptor in the second iteration. In this case, both
.B elf
and
\fBarf\fR will have the same value, the activation count will be \fB2\fR,
and the program calls
.B elf_end()
twice to terminate the descriptor. If
the file is an archive, the loop processes each archive member in turn,
ignoring those that are not object files.

.sp
.in +2
.nf
\fBif (elf_version(EV_CURRENT) == EV_NONE)
{
	/* library out of date */
	/* recover from error */
}
cmd = ELF_C_READ;
arf = elf_begin(fildes, cmd, (Elf *)0);
while ((elf = elf_begin(fildes, cmd, arf)) != 0)
{
	if ((ehdr = elf32_getehdr(elf)) != 0)
	{
		/* process the file \|.\|.\|. */
	}
	cmd = elf_next(elf);
	elf_end(elf);
}
elf_end(arf);\fR
.fi
.in -2

.sp
.LP
Alternatively, the next example illustrates random archive processing.
After identifying the file as an archive, the program repeatedly processes
archive members of interest. For clarity, this example omits error checking
and ignores simple object files. Additionally, this fragment preserves the
\fBELF\fR descriptors for all archive members, because it does not call
\fBelf_end()\fR to terminate them.

.sp
.in +2
.nf
\fBelf_version(EV_CURRENT);
arf = elf_begin(fildes, ELF_C_READ, (Elf *)0);
if (elf_kind(arf) != ELF_K_AR)
{
	/* not an archive */
}
/* initial processing */
/* set offset = \|.\|.\|. for desired member header */
while (elf_rand(arf, offset) == offset)
{
	if ((elf = elf_begin(fildes, ELF_C_READ, arf)) == 0)
		break;
	if ((ehdr = elf32_getehdr(elf)) != 0)
	{
		/* process archive member \|.\|.\|. */
	}
	/* set offset = \|.\|.\|. for desired member header */
}\fR
.fi
.in -2

.sp
.LP
An archive starts with a ``magic string'' that has
.B SARMAG
bytes; the
initial archive member follows immediately. An application could thus
provide the following function to rewind an archive (the function returns
\fB\(mi1\fR for errors and
.B 0
otherwise).

.sp
.in +2
.nf
\fB#include <ar.h>
#include <libelf.h>
int
rewindelf(Elf *elf)
{
     if (elf_rand(elf, (size_t)SARMAG) == SARMAG)
          return 0;
     return \(mi1;
}\fR
.fi
.in -2

.sp
.LP
The following outline shows how one might create a new
.B ELF
file. This
example is simplified to show the overall flow.

.sp
.in +2
.nf
\fBelf_version(EV_CURRENT);
fildes = open("path/name", O_RDWR|O_TRUNC|O_CREAT, 0666);
if ((elf = elf_begin(fildes, ELF_C_WRITE, (Elf *)0)) == 0)
	return;
ehdr = elf32_newehdr(elf);
phdr = elf32_newphdr(elf, count);
scn = elf_newscn(elf);
shdr = elf32_getshdr(scn);
data = elf_newdata(scn);
elf_update(elf, ELF_C_WRITE);
elf_end(elf);\fR
.fi
.in -2

.sp
.LP
Finally, the following outline shows how one might update an existing
\fBELF\fR file. Again, this example is simplified to show the overall
flow.

.sp
.in +2
.nf
\fBelf_version(EV_CURRENT);
fildes = open("path/name", O_RDWR);
elf = elf_begin(fildes, ELF_C_RDWR, (Elf *)0);
/* add new or delete old information */
\|.\|.\|.
/* ensure that the memory image of the file is complete */
elf_update(elf, ELF_C_NULL);
elf_update(elf, ELF_C_WRITE);   /* update file */
elf_end(elf);\fR
.fi
.in -2

.sp
.LP
Notice that both file creation examples open the file with write
.IR and
read permissions. On systems that support
.BR mmap (2),
the library uses it
to enhance performance, and
.BR mmap (2)
requires a readable file
descriptor. Although the library can use a write-only file descriptor, the
application will not obtain the performance advantages of
.BR mmap (2).

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStable
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR creat (2),
.BR lseek (2),
.BR mmap (2),
.BR open (2),
.BR ar.h (3HEAD),
.BR elf (3ELF),
\fBelf32_getehdr\fR(3ELF),
.BR elf_cntl (3ELF),
\fBelf_getarhdr\fR(3ELF), \fBelf_getarsym\fR(3ELF),
.BR elf_getbase (3ELF),
\fBelf_getdata\fR(3ELF), \fBelf_getscn\fR(3ELF),
.BR elf_kind (3ELF),
\fBelf_rawfile\fR(3ELF), \fBelf_update\fR(3ELF),
.BR elf_version (3ELF),
\fBlibelf\fR(3LIB), \fBattributes\fR(5)
