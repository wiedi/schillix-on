'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ct_pr_event_get_pid 3CONTRACT "19 Jul 2004" "SunOS 5.11" "Contract Management Library Functions"
.SH NAME
ct_pr_event_get_pid, ct_pr_event_get_ppid, ct_pr_event_get_signal,
ct_pr_event_get_sender, ct_pr_event_get_senderct,
ct_pr_event_get_exitstatus, ct_pr_event_get_pcorefile,
ct_pr_event_get_gcorefile, ct_pr_event_get_zcorefile \- process contract
event functions
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-D_LARGEFILE64_SOURCE\fR \fB -lcontract \fR [ \fIlibrary\fR\&.\|.\|. ]
#include <libcontract.h>
#include <sys/contract/process.h>

\fBint\fR \fBct_pr_event_get_pid\fR(\fBct_evthdl_t\fR \fIevthdl\fR, \fBpid_t *\fIpidp\fR);
.fi

.LP
.nf
\fBint\fR \fBct_pr_event_get_ppid\fR(\fBct_evthdl_t\fR \fIevthdl\fR, \fBpid_t *\fIpidp\fR);
.fi

.LP
.nf
\fBint\fR \fBct_pr_event_get_signal\fR(\fBct_evthdl_t\fR \fIevthdl\fR, \fBint *\fIsignalp\fR);
.fi

.LP
.nf
\fBint\fR \fBct_pr_event_get_sender\fR(\fBct_evthdl_t\fR \fIevthdl\fR, \fBpid_t *\fIpidp\fR);
.fi

.LP
.nf
\fBint\fR \fBct_pr_event_get_senderct\fR(\fBct_evthdl_t\fR \fIevthdl\fR, \fBctid_t *\fIpidp\fR);
.fi

.LP
.nf
\fBint\fR \fBct_pr_event_get_exitstatus\fR(\fBct_evthdl_t\fR \fIevthdl\fR, \fBint *\fIstatusp\fR);
.fi

.LP
.nf
\fBint\fR \fBct_pr_event_get_pcorefile\fR(\fBct_evthdl_t\fR \fIevthdl\fR, \fBchar **\fInamep\fR);
.fi

.LP
.nf
\fBint\fR \fBct_pr_event_get_gcorefile\fR(\fBct_evthdl_t\fR \fIevthdl\fR, \fBchar **\fInamep\fR);
.fi

.LP
.nf
\fBint\fR \fBct_pr_event_get_zcorefile\fR(\fBct_evthdl_t\fR \fIevthdl\fR, \fBchar **\fInamep\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions read process contract event information from an event
object returned by
.BR ct_event_read "(3CONTRACT) or"
.BR ct_event_read_critical (3CONTRACT).
.sp
.LP
The
.B ct_pr_event_get_pid()
function reads the process ID of the
process generating the event.
.sp
.LP
The
.B ct_pr_event_get_ppid()
function reads the process ID of the
process that forked the new process causing the
.B CT_PR_EV_FORK
event.
.sp
.LP
The
.B ct_pr_event_get_signal()
function reads the signal number of the
signal that caused the
.B CT_PR_EV_SIGNAL
event.
.sp
.LP
The
.B ct_pr_event_get_sender()
function reads the process ID of the
process that sent the signal that caused the
.B CT_PR_EV_SIGNAL
event. If
the signal's sender was not in the same zone as the signal's recipient, this
information is available only to event consumers in the global zone.
.sp
.LP
The ct_pr_event_get_senderct function reads the contract ID of the process
that sent the signal that caused the CT_PR_EV_SIGNAL event. If the signal's
sender was not in the same zone as the signal's recipient, this information
is available only
.sp
.LP
The
.B ct_pr_event_get_exitstatus()
function reads the exit status of
the process generating a
.B CT_PR_EV_EXIT
event.
.sp
.LP
The
.B ct_pr_event_get_pcorefile()
function reads the name of the
process core file if one was created when the
.B CT_PR_EV_CORE
event was
generated. A pointer to a character array is stored in
.RI * namep
and is
freed when
.BR ct_event_free (3CONTRACT)
is called on the event handle.
.sp
.LP
The
.B ct_pr_event_get_gcorefile()
function reads the name of the zone's
global core file if one was created when the
.B CT_PR_EV_CORE
event was
generated. A pointer to a character array is stored in
.RI * namep
and is
freed when
.B ct_event_free()
is called on the event handle.
.sp
.LP
The
.B ct_pr_event_get_zcorefile()
function reads the name of the
system-wide core file in the global zone if one was created when the
.B CT_PR_EV_CORE
event was generated. This information is available only
to event consumers in the global zone. A pointer to a character array is
stored in
.RI * namep
and is freed when
.B ct_event_free()
is called on
the event handle.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.BR ct_pr_event_get_pid() ,
.BR ct_pr_event_get_ppid() ,
.BR ct_pr_event_get_signal() ,
.BR ct_pr_event_get_sender() ,
.BR ct_pr_event_get_senderct() ,
.BR ct_pr_event_get_exitstatus() ,
.BR ct_pr_event_get_pcorefile() ,
.BR ct_pr_event_get_gcorefile() ,
and
.B ct_pr_event_get_zcorefile()
return 0. Otherwise, they return a non-zero error value.
.SH ERRORS
.sp
.LP
The
.BR ct_pr_event_get_pid() ,
.BR ct_pr_event_get_ppid() ,
.BR ct_pr_event_get_signal() ,
.BR ct_pr_event_get_sender() ,
.BR ct_pr_event_get_senderct() ,
.BR ct_pr_event_get_exitstatus() ,
.BR ct_pr_event_get_pcorefile() ,
.BR ct_pr_event_get_gcorefile() ,
and
.B ct_pr_event_get_zcorefile()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I evthdl
argument is not a process contract event object.
.RE

.sp
.LP
The
.BR ct_pr_event_get_ppid() ,
.BR ct_pr_event_get_signal() ,
.BR ct_pr_event_get_sender() ,
.BR ct_pr_event_get_senderct() ,
.BR ct_pr_event_get_exitstatus() ,
.BR ct_pr_event_get_pcorefile() ,
.BR ct_pr_event_get_gcorefile() ,
and
.B ct_pr_event_get_zcorefile()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The requested data do not match the event type.
.RE

.sp
.LP
The
.BR ct_pr_event_get_sender() a
functions will fail if:
.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 10n
.rt
The process ID of the sender was not available, or the event object was
read by a process running in a non-global zone and the sender was in a
different zone.
.RE

.sp
.LP
The
.BR ct_pr_event_get_pcorefile() ,
.BR ct_pr_event_get_gcorefile() ,
and
.B ct_pr_event_get_zcorefile()
functions will fail if:
.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 10n
.rt
The requested core file was not created.
.RE

.sp
.LP
The
.B ct_pr_event_get_zcorefile()
function will fail if:
.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 10n
.rt
The event object was read by a process running in a non-global zone.
.RE

.SH EXAMPLES
.LP
.B Example 1
Print the instigator of all
.B CT_PR_EV_SIGNAL
events.
.sp
.LP
Open the process contract bundle. Loop reading events. Fetch and display
the signalled pid and signalling pid for each
.B CT_PR_EV_SIGNAL
event
encountered.

.sp
.in +2
.nf
#include <sys/types.h>
#include <fcntl.h>
#include <stdio.h>
#include <libcontract.h>

\&...
int fd;
ct_evthdl_t event;
pid_t pid, sender;

fd = open("/system/contract/process/bundle", O_RDONLY);
for (;;) {
        ct_event_read(fd, &event);
        if (ct_event_get_type(event) != CT_PR_EV_SIGNAL) {
                ct_event_free(event);
                continue;
        }
        ct_pr_event_get_pid(event, &pid);
        if (ct_pr_event_get_sender(event, &sender) == ENOENT)
                printf("process %ld killed by unknown process\en",
                    (long)pid);
        else
                printf("process %ld killed by process %ld\en",
                    (long)pid, (long)sender);
        ct_event_free(event);
}
        ...
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR ct_event_free (3CONTRACT),
.BR ct_event_read (3CONTRACT),
.BR ct_event_read_critical (3CONTRACT),
.BR libcontract (3LIB),
.BR contract (4),
.BR process (4),
.BR attributes (5),
.BR lfcompile (5)
