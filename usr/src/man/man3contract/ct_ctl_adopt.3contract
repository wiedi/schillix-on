'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ct_ctl_adopt 3CONTRACT "9 Aug 2007" "SunOS 5.11" "Contract Management Library Functions"
.SH NAME
ct_ctl_adopt, ct_ctl_abandon, ct_ctl_newct, ct_ctl_ack, ct_ctl_nack,
ct_ctl_qack \- common contract control functions
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-D_LARGEFILE64_SOURCE\fR \fB -lcontract \fR [ \fIlibrary\fR\&.\|.\|. ]
#include <libcontract.h>

\fBint\fR \fBct_ctl_adopt\fR(\fBint\fR \fIfd\fR);
.fi

.LP
.nf
\fBint\fR \fBct_ctl_abandon\fR(\fBint\fR \fIfd\fR);
.fi

.LP
.nf
\fBint\fR \fBct_ctl_newct\fR(\fBint\fR \fIfd\fR, \fBuint64_t\fR \fIevid\fR, \fBint\fR \fItemplatefd\fR);
.fi

.LP
.nf
\fBint\fR \fBct_ctl_ack\fR(\fBint\fR \fIfd\fR, \fBuint64_t\fR \fIevid\fR);
.fi

.LP
.nf
\fBint\fR \fBct_ctl_nack\fR(\fBint\fR \fIfd\fR, \fBuint64_t\fR \fIevid\fR);
.fi

.LP
.nf
\fBint\fR \fBct_ctl_qack\fR(\fBint\fR \fIfd\fR, \fBuint64_t\fR \fIevid\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions operate on contract control file descriptors obtained from
the
.BR contract (4)
file system.
.sp
.LP
The
.B ct_ctl_adopt()
function adopts the contract referenced by the
file descriptor
.IR fd .
After a successful call to
.BR ct_ctl_adopt() ,
the contract is owned by the calling process and any events in that
contract's event queue are appended to the process's bundle of the
appropriate type.
.sp
.LP
The
.B ct_ctl_abandon()
function abandons the contract referenced by the
file descriptor
.IR fd .
After a successful call to
.BR ct_ctl_abandon()
the process no longer owns the contract, any events sent by that contract
are automatically removed from the process's bundle, and any critical events
on the contract's event queue are automatically acknowledged. Depending on
its type and terms, the contract will either be orphaned or destroyed.
.sp
.LP
The
.B ct_ctl_ack()
function acknowledges the critical event specified
.RI by evid .
If the event corresponds to an exit negotiation,
.B ct_ctl_ack()
also indicates that the caller is prepared for the system
to proceed with the referenced reconfiguration.
.sp
.LP
The
.B ct_ctl_nack()
function acknowledges the critical negotiation
event specified by
.IR evid .
The
.B ct_ctl_nack()
function also
indicates that the caller wishes to block the proposed reconfiguration
indicated by event
.IR evid .
Depending on the contract type, this function
might require certain privileges to be asserted in the process's effective
set. This function will fail and return an error if the event represented by
.I evid
is not a negotiation event.
.sp
.LP
The
.B ct_ctl_qack()
function requests a new quantum of time for the
negotiation specified by the event ID
.IR evid .
.sp
.LP
The
.B ct_ctl_newct()
function instructs the contract specified by the
file descriptor
.I fd
that when the current exit negotiation completes,
another contract with the terms provided by the template specified by
.I templatefd
should be automatically written.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.BR ct_ctl_adopt() ,
.BR ct_ctl_abandon() ,
.BR ct_ctl_newct() ,
.BR ct_ctl_ack() ,
and
.B ct_ctl_qack()
return 0.
Otherwise, they return a non-zero error value.
.SH ERRORS
.sp
.LP
The
.B ct_ctl_adopt()
function will fail if:
.sp
.ne 2
.mk
.na
.B EBUSY
.ad
.RS 10n
.rt
The contract is in the owned state.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The contract was not inherited by the caller's process contract or was
created by a process in a different zone.
.RE

.sp
.LP
The
.BR ct_ctl_abandon() ,
.BR ct_ctl_newct() ,
.BR ct_ctl_ack() ,
.BR ct_ctl_nack() ,
and
.B ct_ctl_qack()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EBUSY
.ad
.RS 9n
.rt
The contract does not belong to the calling process.
.RE

.sp
.LP
The
.B ct_ctl_newct()
and
.B ct_ctl_qack()
functions will fail if:
.sp
.ne 2
.mk
.na
.B ESRCH
.ad
.RS 9n
.rt
The event ID specified by
.I evid
does not correspond to an
unacknowledged negotiation event.
.RE

.sp
.LP
The
.B ct_ctl_newct()
function will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The file descriptor specified by
.I fd
was not a valid template file
descriptor.
.RE

.sp
.LP
The
.B ct_ctl_ack()
and
.B ct_ctl_nack()
functions will fail if:
.sp
.ne 2
.mk
.na
.B ESRCH
.ad
.RS 9n
.rt
The event ID specified by
.I evid
does not correspond to an
unacknowledged negotiation event.
.RE

.sp
.LP
The
.B ct_ctl_nack()
function will fail if:
.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 9n
.rt
The calling process lacks the appropriate privileges required to block the
reconfiguration.
.RE

.sp
.LP
The
.B ct_ctl_qack()
function will fail if:
.sp
.ne 2
.mk
.na
.B ERANGE
.ad
.RS 10n
.rt
The maximum amount of time has been requested.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libcontract (3LIB),
.BR contract (4),
.BR attributes (5),
.BR lfcompile (5)
