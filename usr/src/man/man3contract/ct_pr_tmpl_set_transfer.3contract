'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ct_pr_tmpl_set_transfer 3CONTRACT "25 Feb 2008" "SunOS 5.11" "Contract Management Library Functions"
.SH NAME
ct_pr_tmpl_set_transfer, ct_pr_tmpl_set_fatal, ct_pr_tmpl_set_param,
ct_pr_tmpl_set_svc_fmri, ct_pr_tmpl_set_svc_aux, ct_pr_tmpl_get_transfer,
ct_pr_tmpl_get_fatal, ct_pr_tmpl_get_param, ct_pr_tmpl_get_svc_fmri,
ct_pr_tmpl_get_svc_aux \- process contract template functions
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-D_LARGEFILE64_SOURCE\fR \fB -lcontract \fR [ \fIlibrary\fR\&.\|.\|. ]
#include <libcontract.h>
#include <sys/contract/process.h>

\fBint\fR \fBct_pr_tmpl_set_transfer\fR(\fBint\fR \fIfd\fR, \fBctid_t\fR \fIctid\fR);
.fi

.LP
.nf
\fBint\fR \fBct_pr_tmpl_set_fatal\fR(\fBint\fR \fIfd\fR, \fBuint_t\fR \fIevents\fR);
.fi

.LP
.nf
\fBint\fR \fBct_pr_tmpl_set_param\fR(\fBint\fR \fIfd\fR, \fBuint_t\fR \fIparams\fR);
.fi

.LP
.nf
\fBint\fR \fBct_pr_tmpl_set_svc_fmri\fR(\fBint\fR \fIfd\fR, \fBconst char *\fIfmri\fR);
.fi

.LP
.nf
\fBint\fR \fBct_pr_tmpl_set_svc_aux\fR(\fBint\fR \fIfd\fR, \fBconst char *\fIaux\fR);
.fi

.LP
.nf
\fBint\fR \fBct_pr_tmpl_get_transfer\fR(\fBint\fR \fIfd\fR, \fBctid_t *\fIctidp\fR);
.fi

.LP
.nf
\fBint\fR \fBct_pr_tmpl_get_fatal\fR(\fBint\fR \fIfd\fR, \fBuint_t *\fIeventsp\fR);
.fi

.LP
.nf
\fBint\fR \fBct_pr_tmpl_get_param\fR(\fBint\fR \fIfd\fR, \fBuint_t *\fIparamsp\fR);
.fi

.LP
.nf
\fBint\fR \fBct_pr_tmpl_get_svc_fmri\fR(\fBint\fR \fIfd\fR, \fBchar *\fIfmri\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBint\fR \fBct_pr_tmpl_get_svc_aux\fR(\fBint\fR \fIfd\fR, \fBchar *\fIaux\fR, \fBsize_t\fR \fIsize\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions read and write process contract terms and operate on
process contract template file descriptors obtained from the
.BR contract (4)
file system.
.sp
.LP
The \fBct_pr_tmpl_set_transfer()\fR and \fBct_pr_tmpl_get_transfer()\fR
functions write and read the transfer contract term. The value is the ID of
an empty regent process contract owned by the caller whose inherited
contracts are to be transferred to a newly created contract.
.sp
.LP
The \fBct_pr_tmpl_set_fatal()\fR and \fBct_pr_tmpl_get_fatal()\fR functions
write and read the fatal event set term. The value is a collection of bits
as described in
.BR process (4).
.sp
.LP
The
.B ct_pr_tmpl_set_param()
and
.B ct_pr_tmpl_get_param()
functions
write and read the parameter set term. The value is a collection of bits as
described in
.BR process (4).
.sp
.LP
The \fBct_pr_tmpl_set_svc_fmri()\fR and  \fBct_pr_tmpl_get_svc_fmri()\fR
functions write and read the service FMRI value of a process contract
template. The
.B ct_pr_tmpl_set_svc_fmri()
function requires the caller
to have the {\fBPRIV_CONTRACT_IDENTITY\fR} privilege in its effective set.
.sp
.LP
The
.B ct_pr_tmpl_set_svc_aux()
and
.BR ct_pr_tmpl_get_svc_aux()
functions write and read the creator's auxiliary value of a process contract
template.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.BR ct_pr_tmpl_set_transfer() ,
.BR ct_pr_tmpl_set_fatal() ,
.BR ct_pr_tmpl_set_param() ,
.BR ct_pr_tmpl_set_svc_fmri() ,
.BR ct_pr_tmpl_set_svc_aux() ,
.BR ct_pr_tmpl_get_transfer() ,
.BR ct_pr_tmpl_get_fatal() ,
and
.B ct_pr_tmpl_get_param()
return 0. Otherwise, they return a non-zero
error value.
.sp
.LP
Upon successful completion,
.B ct_pr_tmpl_get_svc_fmri()
and
.B ct_pr_tmpl_get_svc_aux()
return the size required to store the value,
which is the same value return by \fBstrcpy\fR(3C) + 1. Insufficient buffer
size can be checked by:
.sp
.in +2
.nf
if (ct_pr_tmpl_get_svc_fmri(fd, fmri, size) > size)
        /* buffer is too small */
.fi
.in -2

.sp
.LP
Otherwise,
.B ct_pr_tmpl_get_svc_fmri()
and
.B ct_pr_tmpl_get_svc_aux()
return -1 and set
.B errno
to indicate the
error.
.SH ERRORS
.sp
.LP
The
.BR ct_pr_tmpl_set_param() ,
.BR ct_pr_tmpl_set_svc_fmri() ,
.BR ct_pr_tmpl_set_svc_aux() ,
.B ct_pr_tmpl_get_svc_fmri()
and
.B ct_pr_tmpl_get_svc_aux()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
An invalid parameter was specified.
.RE

.sp
.LP
The
.B ct_pr_tmpl_set_fatal()
function will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
An invalid event was specified.
.RE

.sp
.LP
The
.B ct_pr_tmpl_set_transfer()
function will fail if:
.sp
.ne 2
.mk
.na
.B ESRCH
.ad
.RS 13n
.rt
The ID specified by
.I ctid
does not correspond to a process contract.
.RE

.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 13n
.rt
The ID specified by
.I ctid
does not correspond to a process contract
owned by the calling process.
.RE

.sp
.ne 2
.mk
.na
.B ENOTEMPTY
.ad
.RS 13n
.rt
The ID specified by
.I ctid
does not correspond to an empty process
contract.
.RE

.sp
.LP
The
.B ct_pr_tmpl_set_svc_fmri()
function will fail if:
.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 9n
.rt
The calling process does not have {\fBPRIV_CONTRACT_IDENTITY\fR} in its
effective set.
.RE

.SH EXAMPLES
.LP
.B Example 1
Create and activate a process contract template.
.sp
.LP
The following example opens a new template, makes hardware errors and
signals fatal events, makes hardware errors critical events, and activates
the template. It then forks a process in the new contract using the
requested terms.

.sp
.in +2
.nf
#include <libcontract.h>
#include <fcntl.h>
#include <unistd.h>

\&...
int fd;

fd = open("/system/contract/process/template", O_RDWR);
(void) ct_pr_tmpl_set_fatal(fd, CT_PR_EV_HWERR|CT_PR_EV_SIGNAL);
(void) ct_tmpl_set_critical(fd, CT_PR_EV_HWERR);
(void) ct_tmpl_activate(fd);
close(fd);

if (fork()) {
        /* parent - owns new process contract */
        ...
} else {
        /* child - in new process contract */
        ...
}
\&...
.fi
.in -2

.LP
.B Example 2
Clear the process contract template.
.sp
.LP
The following example opens the template file and requests that the active
template be cleared.

.sp
.in +2
.nf
#include <libcontract.h>
#include <fcntl.h>

\&...
int fd;

fd = open("/system/contract/process/template", O_RDWR);
(void) ct_tmpl_clear(fd);
close(fd);
\&...
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libcontract (3LIB),
.BR strcpy (3C),
.BR contract (4),
.BR process (4),
.BR attributes (5),
.BR lfcompile (5)
