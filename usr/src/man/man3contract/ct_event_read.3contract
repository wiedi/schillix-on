'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ct_event_read 3CONTRACT "1 Apr 2004" "SunOS 5.11" "Contract Management Library Functions"
.SH NAME
ct_event_read, ct_event_read_critical, ct_event_reset, ct_event_reliable,
ct_event_free, ct_event_get_flags, ct_event_get_ctid, ct_event_get_evid,
ct_event_get_type, ct_event_get_nevid, ct_event_get_newct \- common contract
event functions
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-D_LARGEFILE64_SOURCE\fR \fB -lcontract \fR [ \fIlibrary\fR\&.\|.\|. ]
#include <libcontract.h>

\fBint\fR \fBct_event_read\fR(\fBint\fR \fIfd\fR, \fBct_evthdl_t *\fIevthndlp\fR);
.fi

.LP
.nf
\fBint\fR \fBct_event_read_critical\fR(\fBint\fR \fIfd\fR, \fBct_evthdl_t *\fIevthndlp\fR);
.fi

.LP
.nf
\fBint\fR \fBct_event_reset\fR(\fBint\fR \fIfd\fR);
.fi

.LP
.nf
\fBint\fR \fBct_event_reliable\fR(\fBint\fR \fIfd\fR);
.fi

.LP
.nf
\fBvoid\fR \fBct_event_free\fR(\fBct_evthdl_t\fR \fIevthndl\fR);
.fi

.LP
.nf
\fBctid_t\fR \fBct_event_get_ctid\fR(\fBct_evthdl_t\fR \fIevthndl\fR);
.fi

.LP
.nf
\fBctevid_t\fR \fBct_event_get_evid\fR(\fBct_evthdl_t\fR \fIevthndl\fR);
.fi

.LP
.nf
\fBuint_t\fR \fBct_event_get_flags\fR(\fBct_evthdl_t\fR \fIevthndl\fR);
.fi

.LP
.nf
\fBuint_t\fR \fBct_event_get_type\fR(\fBct_evthdl_t\fR \fIevthndl\fR);
.fi

.LP
.nf
\fBint\fR \fBct_event_get_nevid\fR(\fBct_evthdl_t\fR \fIevthndl\fR, \fBctevid_t *\fIevidp\fR);
.fi

.LP
.nf
\fBint\fR \fBct_event_get_newct\fR(\fBct_evthdl_t\fR \fIevthndl\fR, \fBctid_t *\fIctidp\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions operate on contract event endpoint file descriptors
obtained from the
.BR contract (4)
file system and event object handles
returned by
.B ct_event_read()
and
.BR ct_event_read_critical() .
.sp
.LP
The
.B ct_event_read()
function reads the next event from the queue
referenced by the file descriptor
.I fd
and initializes the event object
handle pointed to by
.IR evthndlp .
After a successful call to
.BR ct_event_read() ,
the caller is responsible for calling
.B ct_event_free()
on this event object handle when it has finished using
it.
.sp
.LP
The
.B ct_event_read_critical()
function behaves like
.B ct_event_read()
except that it reads the next critical event from the
queue, skipping any intermediate events.
.sp
.LP
The
.B ct_event_reset()
function resets the location of the listener to
the beginning of the queue. This function can be used to re-read events, or
read events that were sent before the event endpoint was opened. Informative
and acknowledged critical events, however, might have been removed from the
queue.
.sp
.LP
The
.B ct_event_reliable()
function indicates that no event published to
the specified event queue should be dropped by the system until the
specified listener has read the event. This function requires that the
caller have the
.RB { PRIV_CONTRACT_EVENT }
privilege in its effective
set.
.sp
.LP
The
.B ct_event_free()
function frees any storage associated with the
event object handle specified by
.IR evthndl .
.sp
.LP
The
.B ct_event_get_ctid()
function returns the ID of the contract that
sent the specified event.
.sp
.LP
The
.B ct_event_get_evid()
function returns the ID of the specified
event.
.sp
.LP
The
.B ct_event_get_flags()
function returns the event flags for the
specified event. Valid event flags are:
.sp
.ne 2
.mk
.na
.B CTE_INFO
.ad
.RS 12n
.rt
The event is an informative event.
.RE

.sp
.ne 2
.mk
.na
.B CTE_ACK
.ad
.RS 12n
.rt
The event has been acknowledged (for critical and negotiation messages).
.RE

.sp
.ne 2
.mk
.na
.B CTE_NEG
.ad
.RS 12n
.rt
The message represents an exit negotiation.
.RE

.sp
.LP
The
.B ct_event_get_type()
function reads the event type. The value is
one of the event types described in
.BR contract (4)
or the contract type's
manual page.
.sp
.LP
 The
.B ct_event_get_nevid()
function reads the negotiation ID from an
.B CT_EV_NEGEND
event.
.sp
.LP
The
.B ct_event_get_newct()
function obtains the ID of the contract
created when the negotiation referenced by the
.B CT_EV_NEGEND
event
succeeded. If no contract was created,
.I ctidp
will be 0.  If the
operation was cancelled, *\fIctidp\fR will equal the ID of the existing
contract.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.BR ct_event_read() ,
.BR ct_event_read_critical() ,
.BR ct_event_reset() ,
.BR ct_event_reliable() ,
.BR ct_event_get_nevid() ,
and
.B ct_event_get_newct()
return 0. Otherwise, they return a non-zero error
value.
.sp
.LP
The
.BR ct_event_get_flags() ,
.BR ct_event_get_ctid() ,
.BR ct_event_get_evid() ,
and
.B ct_event_get_type()
functions return
data as described in the DESCRIPTION.
.SH ERRORS
.sp
.LP
The
.B ct_event_reliable()
function will fail if:
.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 9n
.rt
The caller does not have
.RB { PRIV_CONTRACT_EVENT }
in its effective
set.
.RE

.sp
.LP
The
.B ct_event_read()
and
.B ct_event_read_critical()
functions will
fail if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
The event endpoint was opened
.B O_NONBLOCK
and no applicable events
were available to be read.
.RE

.sp
.LP
The The
.B ct_event_get_nevid()
and
.B ct_event_get_newct()
functions
will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I evthndl
argument is not a
.B CT_EV_NEGEND
event object.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libcontract (3LIB),
.BR contract (4),
.BR attributes (5),
.BR lfcompile (5)
