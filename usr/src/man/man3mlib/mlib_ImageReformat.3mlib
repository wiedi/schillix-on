'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH mlib_ImageReformat 3MLIB "2 Mar 2007" "SunOS 5.11" "mediaLib Library Functions"
.SH NAME
mlib_ImageReformat \- image data buffer reformat
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lmlib\fR [ \fIlibrary\fR.\|.\|. ]
#include <mlib.h>

\fBmlib_status\fR \fBmlib_ImageReformat\fR(\fBvoid **\fIdstData\fR, \fBconst void **\fIsrcData\fR,
     \fBmlib_s32\fR \fInumBands\fR, \fBmlib_s32\fR \fIxSize\fR, \fBmlib_s32\fR \fIySize\fR,
     \fBmlib_type\fR \fIdstDataType\fR, \fBconst mlib_s32 *\fIdstBandoffsets\fR,
     \fBmlib_s32\fR \fIdstScanlinestride\fR, \fBmlib_s32\fR \fIdstPixelstride\fR,
     \fBmlib_type\fR \fIsrcDataType\fR, \fBconst mlib_s32 *\fIsrcBandoffsets\fR,
     \fBmlib_s32\fR \fIsrcScanlinestride\fR, \fBmlib_s32\fR \fIsrcPixelstride\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B mlib_ImageReformat()
function copies and casts, if needed, an
image from one buffer to another. The formats and data types of the two
buffers may be different.
.sp
.in +2
.nf
dstPixel[x][y][i] = (dstDataType) srcPixel[x][y][i]
.fi
.in -2

.sp
.LP
where the values of a pixel at position
.B "(x, y)"
and in channel
.BR i
are:
.sp
.in +2
.nf
srcPixel[x][y][i] = srcData[i][srcBandoffsets[i] +
                               srcScanlinestride*y +
                               srcPixelstride*x]

dstPixel[x][y][i] = dstData[i][dstBandoffsets[i] +
                               dstScanlinestride*y +
                               dstPixelstride*x]
.fi
.in -2

.sp
.LP
It is the user's responsibility to make sure that the data buffers supplied
are suitable for this operation. The srcData and dstData can have 1, 2, 3,
or 4 channels, and they must have the same number of channels. The
srcDataType and dstDataType can be
.BR MLIB_BYTE ,
.BR MLIB_SHORT ,
.BR MLIB_USHORT ,
.BR MLIB_INT ,
.BR MLIB_FLOAT ,
or
.BR MLIB_DOUBLE .
.sp
.LP
The conversions between different data types are implemented as described
in the following table:
.sp

.sp
.TS
tab();
cw(0i) cw(0i) cw(5.5i)
lw(0i) lw(0i) lw(5.5i)
.
Source TypeDest. TypeAction
_
MLIB_SHORTMLIB_BYTE(mlib_u8)clamp(x, 0, 255)
MLIB_USHORTMLIB_BYTE(mlib_u8)clamp(x, 0, 255)
_
MLIB_INTMLIB_BYTE(mlib_u8)clamp(x, 0, 255)
_
MLIB_FLOATMLIB_BYTE(mlib_u8)clamp(x, 0, 255)
_
MLIB_DOUBLEMLIB_BYTE(mlib_u8)clamp(x, 0, 255)
_
MLIB_BYTEMLIB_SHORT(mlib_s16)x
_
MLIB_USHORTMLIB_SHORT(mlib_s16)clamp(x, -32768, 32767)
_
MLIB_INTMLIB_SHORT(mlib_s16)clamp(x, -32768, 32767)
_
MLIB_FLOATMLIB_SHORT(mlib_s16)clamp(x, -32768, 32767)
_
MLIB_DOUBLEMLIB_SHORT(mlib_s16)clamp(x, -32768, 32767)
_
MLIB_BYTEMLIB_USHORT(mlib_u16)x
_
MLIB_SHORTMLIB_USHORT(mlib_u16)clamp(x, 0, 65535)
_
MLIB_INTMLIB_USHORT(mlib_u16)clamp(x, 0, 65535)
_
MLIB_FLOATMLIB_USHORT(mlib_u16)clamp(x, 0, 65535)
_
MLIB_DOUBLEMLIB_USHORT(mlib_u16)clamp(x, 0, 65535)
_
MLIB_BYTEMLIB_INT(mlib_s32)x
_
MLIB_SHORTMLIB_INT(mlib_s32)x
_
MLIB_USHORTMLIB_INT(mlib_s32)x
_
MLIB_FLOATMLIB_INTT{
(mlib_s32)clamp(x, -2147483647-1, 2147483647)
T}
_
MLIB_DOUBLEMLIB_INTT{
(mlib_s32)clamp(x, -2147483647-1, 2147483647)
T}
_
MLIB_BYTEMLIB_FLOAT(mlib_f32)x
_
MLIB_SHORTMLIB_FLOAT(mlib_f32)x
_
MLIB_USHORTMLIB_FLOAT(mlib_f32)x
_
MLIB_INTMLIB_FLOAT(mlib_f32)x
_
MLIB_DOUBLEMLIB_FLOAT(mlib_f32)x
_
MLIB_BYTEMLIB_DOUBLE(mlib_d64)x
_
MLIB_SHORTMLIB_DOUBLE(mlib_d64)x
_
MLIB_USHORTMLIB_DOUBLE(mlib_d64)x
_
MLIB_INTMLIB_DOUBLE(mlib_d64)x
_
MLIB_FLOATMLIB_DOUBLE(mlib_d64)x
.TE

.sp
.LP
The actions are defined in C-style pseudo-code. All type casts follow the
rules of standard C.
.B clamp()
can be defined as a macro: \fB#define
clamp(x, low, high) (((x) < (low)) ? (low) : (((x) > (high)) ? (high) :
(x)))\fR
.SH PARAMETERS
.sp
.LP
The function takes the following arguments:
.sp
.ne 2
.mk
.na
.I dstData
.ad
.RS 21n
.rt
The pointer to the destination image data buffer.
.RE

.sp
.ne 2
.mk
.na
.I srcData
.ad
.RS 21n
.rt
The pointer to the source image data buffer.
.RE

.sp
.ne 2
.mk
.na
.I numBands
.ad
.RS 21n
.rt
The number of channels of the image data buffers.
.RE

.sp
.ne 2
.mk
.na
.I xSize
.ad
.RS 21n
.rt
The width of the image.
.RE

.sp
.ne 2
.mk
.na
.I ySize
.ad
.RS 21n
.rt
The height of the image.
.RE

.sp
.ne 2
.mk
.na
.I dstDataType
.ad
.RS 21n
.rt
The data type of the
.I dstData
buffer.
.RE

.sp
.ne 2
.mk
.na
.I dstBandoffsets
.ad
.RS 21n
.rt
The initial pixel's offsets in the
.I dstData
buffer in terms of
destination data buffer elements.
.RE

.sp
.ne 2
.mk
.na
.I dstScanlinestride
.ad
.RS 21n
.rt
The scanline stride of the
.I dstData
buffer in terms of destination
data buffer elements.
.RE

.sp
.ne 2
.mk
.na
.I dstPixelstride
.ad
.RS 21n
.rt
The pixel stride of the
.I dstData
buffer in terms of destination data
buffer elements.
.RE

.sp
.ne 2
.mk
.na
.I srcDataType
.ad
.RS 21n
.rt
The data type of the
.I srcData
buffer.
.RE

.sp
.ne 2
.mk
.na
.I srcBandoffsets
.ad
.RS 21n
.rt
The initial pixel's offsets in the
.I srcData
buffer in terms of source
data buffer elements.
.RE

.sp
.ne 2
.mk
.na
.I srcScanlinestride
.ad
.RS 21n
.rt
The scanline stride of the
.I srcData
buffer in terms of source data
buffer elements.
.RE

.sp
.ne 2
.mk
.na
.I srcPixelstride
.ad
.RS 21n
.rt
The pixel stride of the
.I srcData
buffer in terms of source data buffer
elements.
.RE

.SH RETURN VALUES
.sp
.LP
The function returns
.B MLIB_SUCCESS
if successful. Otherwise it returns
.BR MLIB_FAILURE .
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR mlib_ImageDataTypeConvert (3MLIB),
.BR attributes (5)
