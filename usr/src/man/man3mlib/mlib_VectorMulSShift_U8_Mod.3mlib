'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH mlib_VectorMulSShift_U8_Mod 3MLIB "2 Mar 2007" "SunOS 5.11" "mediaLib Library Functions"
.SH NAME
mlib_VectorMulSShift_U8_Mod, mlib_VectorMulSShift_U8_Sat,
mlib_VectorMulSShift_U8C_Mod, mlib_VectorMulSShift_U8C_Sat,
mlib_VectorMulSShift_S8_Mod, mlib_VectorMulSShift_S8_Sat,
mlib_VectorMulSShift_S8C_Mod, mlib_VectorMulSShift_S8C_Sat,
mlib_VectorMulSShift_S16_Mod, mlib_VectorMulSShift_S16_Sat,
mlib_VectorMulSShift_S16C_Mod, mlib_VectorMulSShift_S16C_Sat,
mlib_VectorMulSShift_S32_Mod, mlib_VectorMulSShift_S32_Sat,
mlib_VectorMulSShift_S32C_Mod, mlib_VectorMulSShift_S32C_Sat \- vector
multiplication by scalar plus shifting, in place
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lmlib\fR [ \fIlibrary\fR.\|.\|. ]
#include <mlib.h>

\fBmlib_status\fR \fBmlib_VectorMulSShift_U8_Mod\fR(\fBmlib_u8 *\fIxz\fR,
     \fBconst mlib_u8 *\fIc\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorMulSShift_U8_Sat\fR(\fBmlib_u8 *\fIxz\fR,
     \fBconst mlib_u8 *\fIc\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorMulSShift_U8C_Mod\fR(\fBmlib_u8 *\fIxz\fR,
     \fBconst mlib_u8 *\fIc\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorMulSShift_U8C_Sat\fR(\fBmlib_u8 *\fIxz\fR,
     \fBconst mlib_u8 *\fIc\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorMulSShift_S8_Mod\fR(\fBmlib_s8 *\fIxz\fR,
     \fBconst mlib_s8 *\fIc\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorMulSShift_S8_Sat\fR(\fBmlib_s8 *\fIxz\fR,
     \fBconst mlib_s8 *\fIc\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorMulSShift_S8C_Mod\fR(\fBmlib_s8 *\fIxz\fR,
     \fBconst mlib_s8 *\fIc\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorMulSShift_S8C_Sat\fR(\fBmlib_s8 *\fIxz\fR,
     \fBconst mlib_s8 *\fIc\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorMulSShift_S16_Mod\fR(\fBmlib_s16 *\fIxz\fR,
     \fBconst mlib_s16 *\fIc\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorMulSShift_S16_Sat\fR(\fBmlib_s16 *\fIxz\fR,
     \fBconst mlib_s16 *\fIc\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorMulSShift_S16C_Mod\fR(\fBmlib_s16 *\fIxz\fR,
     \fBconst mlib_s16 *\fIc\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorMulSShift_S16C_Sat\fR(\fBmlib_s16 *\fIxz\fR,
     \fBconst mlib_s16 *\fIc\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorMulSShift_S32_Mod\fR(\fBmlib_s32 *\fIxz\fR,
     \fBconst mlib_s32 *\fIc\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorMulSShift_S32_Sat\fR(\fBmlib_s32 *\fIxz\fR,
     \fBconst mlib_s32 *\fIc\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorMulSShift_S32C_Mod\fR(\fBmlib_s32 *\fIxz\fR,
     \fBconst mlib_s32 *\fIc\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorMulSShift_S32C_Sat\fR(\fBmlib_s32 *\fIxz\fR,
     \fBconst mlib_s32 *\fIc\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.SH DESCRIPTION
.sp
.LP
Each of these functions performs an in-place multiplication of a vector by
a scalar and shifts the result.
.sp
.LP
For real data, the following equation is used:
.sp
.in +2
.nf
xz[i] = xz[i] * c[0] * 2**(-shift)
.fi
.in -2

.sp
.LP
where
.BR "i = 0, 1, .\|.\|., (n - 1)" .
.sp
.LP
For complex data, the following equation is used:
.sp
.in +2
.nf
tmp         = xz[2*i]
xz[2*i]     = (tmp*c[0] - xz[2*i + 1]*c[1]) * 2**(-shift)
xz[2*i + 1] = (tmp*c[1] + xz[2*i + 1]*c[0]) * 2**(-shift)
.fi
.in -2

.sp
.LP
where
.BR "i = 0, 1, .\|.\|., (n - 1)" .
.SH PARAMETERS
.sp
.LP
Each of the functions takes the following arguments:
.sp
.ne 2
.mk
.na
.I xz
.ad
.RS 9n
.rt
Pointer to the first element of the source and result vector.
.RE

.sp
.ne 2
.mk
.na
.I c
.ad
.RS 9n
.rt
Pointer to the source scalar. When the function is used with complex data
types, \fBc[0]\fR contains the real part of the scalar, and \fBc[1]\fR
contains the imaginary part of the scalar.
.RE

.sp
.ne 2
.mk
.na
.I n
.ad
.RS 9n
.rt
Number of elements in each vector.
.RE

.sp
.ne 2
.mk
.na
.I shift
.ad
.RS 9n
.rt
Right shifting factor. The ranges of valid
.B shift
are:
.sp
.in +2
.nf
1 \(<= shift \(<= 8   for U8, S8, U8C, S8C types
1 \(<= shift \(<= 16  for S16, S16C types
1 \(<= shift \(<= 31  for S32, S32C types
.fi
.in -2

.RE

.SH RETURN VALUES
.sp
.LP
Each of the functions returns
.B MLIB_SUCCESS
if successful. Otherwise
it returns
.BR MLIB_FAILURE .
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR mlib_VectorMulSShift_U8_U8_Mod (3MLIB),
.BR attributes (5)
