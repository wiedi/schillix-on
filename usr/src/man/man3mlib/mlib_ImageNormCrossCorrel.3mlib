'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH mlib_ImageNormCrossCorrel 3MLIB "2 Mar 2007" "SunOS 5.11" "mediaLib Library Functions"
.SH NAME
mlib_ImageNormCrossCorrel \- normalized cross correlation
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lmlib\fR [ \fIlibrary\fR.\|.\|. ]
#include <mlib.h>

\fBmlib_status\fR \fBmlib_ImageNormCrossCorrel\fR(\fBmlib_d64 *\fIcorrel\fR,
     \fBconst mlib_image *\fIimg1\fR, \fBconst mlib_image *\fIimg2\fR, \fBconst mlib_d64 *\fImean2\fR,
     \fBconst mlib_d64 *\fIsdev2\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B mlib_ImageNormCrossCorrel()
function computes the normalized
cross-correlation coefficients between a pair of images, on a per-channel
basis.
.sp
.LP
It uses the following equations:
.sp
.in +2
.nf
               w-1 h-1
               SUM SUM (d1[x][y][i] * d2[x][y][i])
               x=0 y=0
  correl[i] = -------------------------------------
                         s1[i] * s2[i]

d1[x][y][i] = img1[x][y][i] - m1[i]

d2[x][y][i] = img2[x][y][i] - m2[i]

                1     w-1 h-1
      m1[i] = ----- * SUM SUM img1[x][y][i]
               w*h    x=0 y=0

                1     w-1 h-1
      m2[i] = ----- * SUM SUM img2[x][y][i]
               w*h    x=0 y=0

                    w-1 h-1
      s1[i] = sqrt{ SUM SUM (img1[x][y][i] - m1[i])**2 }
                    x=0 y=0

                    w-1 h-1
      s2[i] = sqrt{ SUM SUM (img2[x][y][i] - m2[i])**2 }
                    x=0 y=0
.fi
.in -2

.sp
.LP
where
.B w
and
.B h
are the width and height of the images,
respectively;
.B m1
and
.B m2
are the mean arrays of the first and
second images, respectively;
.B s1
and
.B s2
are the un-normalized
standard deviation arrays of the first and second images, respectively.
.sp
.LP
In usual cases, the normalized cross-correlation coefficient is in the
range of \fB[-1.0, 1.0]\fR.  In the case of \fB(s1[i] == 0)\fR or \fB(s2[i] == 0)\fR, where a constant image channel is involved, the normalized
cross-correlation coefficient is defined as follows:
.sp
.in +2
.nf
    #define signof(x) ((x > 0) ? 1 : ((x < 0) ? -1 : 0))

    if ((s1[i] == 0.) || (s2[i] == 0.)) {
        if ((s1[i] == 0.) && (s2[i] == 0.)) {
           if (signof(m1[i]) == signof(m2[i]) {
               correl[i] = 1.0;
           } else {
               correl[i] = -1.0;
           }
        } else {
            correl[i] = -1.0;
        }
    }
.fi
.in -2

.sp
.LP
The two images must have the same type, the same size, and the same number
of channels. They can have 1, 2, 3 or 4 channels. They can be of type
.BR MLIB_BYTE ,
.BR MLIB_SHORT ,
.B MLIB_USHORT
or
.BR MLIB_INT .
.sp
.LP
If
.B "(mean2 == NULL)"
or
.BR "(sdev2 == NULL)" ,
then
.B m2
and
.B s2
are calculated in this function according to the formulas shown
above. Otherwise, they are calculated as follows:
.sp
.in +2
.nf
    m2[i] = mean2[i];
    s2[i] = sdev2[i] * sqrt(w*h);
.fi
.in -2

.sp
.LP
where
.B mean2
and
.B sdev2
can be the output of
.B mlib_ImageMean()
and
.BR mlib_ImageStdDev() ,
respectively.
.SH PARAMETERS
.sp
.LP
The function takes the following arguments:
.sp
.ne 2
.mk
.na
.I correl
.ad
.RS 10n
.rt
Pointer to normalized cross correlation array on a channel basis. The array
must be the size of channels in the images.
.B correl[i]
contains the
cross-correlation of channel
.BR i .
.RE

.sp
.ne 2
.mk
.na
.I img1
.ad
.RS 10n
.rt
Pointer to first image.
.RE

.sp
.ne 2
.mk
.na
.I img2
.ad
.RS 10n
.rt
Pointer to second image.
.RE

.sp
.ne 2
.mk
.na
.I mean2
.ad
.RS 10n
.rt
Pointer to the mean array of the second image.
.RE

.sp
.ne 2
.mk
.na
.I sdev2
.ad
.RS 10n
.rt
Pointer to the standard deviation array of the second image.
.RE

.SH RETURN VALUES
.sp
.LP
The function returns
.B MLIB_SUCCESS
if successful. Otherwise it returns
.BR MLIB_FAILURE .
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR mlib_ImageAutoCorrel (3MLIB),
.BR mlib_ImageAutoCorrel_Fp (3MLIB),
.BR mlib_ImageCrossCorrel (3MLIB),
.BR mlib_ImageCrossCorrel_Fp (3MLIB),
.BR mlib_ImageNormCrossCorrel_Fp (3MLIB),
.BR attributes (5)
