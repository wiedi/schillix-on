'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH mlib_ImageGridWarp 3MLIB "12 Sep 2007" "SunOS 5.11" "mediaLib Library Functions"
.SH NAME
mlib_ImageGridWarp \- grid-based image warp
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lmlib\fR [ \fIlibrary\fR.\|.\|. ]
#include <mlib.h>

\fBmlib_status\fR \fBmlib_ImageGridWarp\fR(\fBmlib_image *\fIdst\fR, \fBconst mlib_image *\fIsrc\fR,
     \fBconst mlib_f32 *\fIxWarpPos\fR, \fBconst mlib_f32 *\fIyWarpPos\fR,
     \fBmlib_d64\fR \fIpostShiftX\fR, \fBmlib_d64\fR \fIpostShiftY\fR,
     \fBmlib_s32\fR \fIxStart\fR, \fBmlib_s32\fR \fIxStep\fR, \fBmlib_s32\fR \fIxNumCells\fR,
     \fBmlib_s32\fR \fIyStart\fR, \fBmlib_s32\fR \fIyStep\fR, \fBmlib_s32\fR \fIyNumCells\fR,
     \fBmlib_filter\fR \fIfilter\fR, \fBmlib_edge\fR \fIedge\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B mlib_ImageGridWarp()
function performs a regular grid-based image
warp. The images must have the same type, and the same number of channels. The
images can have 1, 2, 3, or 4 channels. The data type of the images can be
.BR MLIB_BYTE ,
.BR MLIB_SHORT ,
.BR MLIB_USHORT ,
or
.BR MLIB_INT .
The two
images may have different sizes.
.sp
.LP
The image pixels are assumed to be centered at \fB\&.5\fR coordinate points. For
example, the upper-left corner pixel of an image is located at \fB(0.5,
0.5)\fR.
.sp
.LP
For each pixel in the destination image, its center point
.B D
is, first,
backward mapped to a point
.B S
in the source image; then the source pixels
with their centers surrounding point
.B S
are selected to do one of the
interpolations specified by the filter parameter to generate the pixel value for
point
.BR D .
.sp
.LP
The mapping from destination pixels to source positions is described by bilinear
interpolation between a rectilinear grid of points with known mappings.
.sp
.LP
Given a destination pixel coordinate
.B "(x, y)"
that lies within a cell having
corners at
.BR "(x0, y0)" ,
.BR "(x1, y0)" ,
.B (x0, y1)
and
.BR "(x1, y1)" ,
with source coordinates defined at each respective corner equal to \fB(sx0,
sy0)\fR,
.BR "(sx1, sy1)" ,
.B (sx2, sy2)
and
.BR "(sx3, sy3)" ,
the source
position
.B "(sx, sy)"
that maps onto
.B "(x, y)"
is given by the formulas:
.sp
.in +2
.nf
  xfrac = (x - x0)/(x1 - x0)
  yfrac = (y - y0)/(y1 - y0)

  s = sx0 + (sx1 - sx0)*xfrac
  t = sy0 + (sy1 - sy0)*xfrac

  u = sx2 + (sx3 - sx2)*xfrac
  v = sy2 + (sy3 - sy2)*xfrac

  sx = s + (u - s)*yfrac - postShiftX
  sy = t + (v - t)*yfrac - postShiftY
.fi
.in -2

.sp
.LP
In other words, the source
.B x
and
.B y
values are interpolated
horizontally along the top and bottom edges of the grid cell, and the results are
interpolated vertically:
.sp
.in +2
.nf
         (x0, y0) ->            (x1, y0) ->
           (sx0, sy0)             (sx1, sy1)
            +------------+---------+
            |           /|         |
            |     (s, t) |         |
            |            |         |
            |            |         |
            |            |         |
            |            |         |
            | (x, y) ->  |         |
            |  (sx, sy)--+         |
            |            |         |
            |            |         |
            |            | (u, v)  |
            |            |/        |
            +------------+---------+
         (x0, y1) ->          (x1, y1) ->
           (sx2, sy2)           (sx3, sy3)
.fi
.in -2

.sp
.LP
The results of above interpolation are shifted by \fB(-postShiftX,
-postShiftY)\fR to produce the source pixel coordinates.
.sp
.LP
The destination pixels that lie outside of any grid cells are kept intact. The
grid is defined by a set of equal-sized cells. The grid starts at \fB(xStart,
yStart)\fR. Each cell has width equal to
.B xStep
and height equal to
.BR yStep ,
and there are
.B xNumCells
cells horizontally and
.BR yNumCells
cells vertically.
.sp
.LP
The degree of warping within each cell is defined by the values in
.B xWarpPos
and
.B yWarpPos
parameters. Each of these parameters must
contain
.B "(xNumCells + 1)*(yNumCells + 1)"
values, which, respectively,
contain the source X and source Y coordinates that map to the upper-left corner
of each cell in the destination image. The cells are enumerated in row-major
order. That is, all the grid points along a row are enumerated first, then the
grid points for the next row are enumerated, and so on.
.sp
.LP
For example, suppose
.B xNumCells
is equal to
.B 2
and
.B yNumCells
is
equal to
.BR 1 .
Then the order of the data in the
.B xWarpPos
would be:
.sp
.in +2
.nf
  x00, x10, x20, x01, x11, x21
.fi
.in -2

.sp
.LP
and in the yWarpPos:
.sp
.in +2
.nf
  y00, y10, y20, y01, y11, y21
.fi
.in -2

.sp
.LP
for a total of
.B "(2 + 1)*(1 + 1) = 6"
elements in each table.
.SH PARAMETERS
.sp
.LP
The function takes the following arguments:
.sp
.ne 2
.mk
.na
.I dst
.ad
.RS 14n
.rt
Pointer to destination image.
.RE

.sp
.ne 2
.mk
.na
.I src
.ad
.RS 14n
.rt
Pointer to source image.
.RE

.sp
.ne 2
.mk
.na
.I xWarpPos
.ad
.RS 14n
.rt
A float array of length
.B "(xNumCells + 1)*(yNumCells + 1)"
containing
horizontal warp positions at the grid points, in row-major order.
.RE

.sp
.ne 2
.mk
.na
.I yWarpPos
.ad
.RS 14n
.rt
A float array of length
.B "(xNumCells + 1)*(yNumCells + 1)"
containing
vertical warp positions at the grid points, in row-major order.
.RE

.sp
.ne 2
.mk
.na
.I postShiftX
.ad
.RS 14n
.rt
The displacement to apply to source X positions.
.RE

.sp
.ne 2
.mk
.na
.I postShiftY
.ad
.RS 14n
.rt
The displacement to apply to source Y positions.
.RE

.sp
.ne 2
.mk
.na
.I xStart
.ad
.RS 14n
.rt
The minimum X coordinate of the grid.
.RE

.sp
.ne 2
.mk
.na
.I xStep
.ad
.RS 14n
.rt
The horizontal spacing between grid cells.
.RE

.sp
.ne 2
.mk
.na
.I xNumCells
.ad
.RS 14n
.rt
The number of grid cell columns.
.RE

.sp
.ne 2
.mk
.na
.I yStart
.ad
.RS 14n
.rt
The minimum Y coordinate of the grid.
.RE

.sp
.ne 2
.mk
.na
.I yStep
.ad
.RS 14n
.rt
The vertical spacing between grid cells.
.RE

.sp
.ne 2
.mk
.na
.I yNumCells
.ad
.RS 14n
.rt
The number of grid cell rows.
.RE

.sp
.ne 2
.mk
.na
.I filter
.ad
.RS 14n
.rt
Type of resampling filter. It can be one of the following:
.sp
.in +2
.nf
MLIB_NEAREST
MLIB_BILINEAR
MLIB_BICUBIC
MLIB_BICUBIC2
.fi
.in -2

.RE

.sp
.ne 2
.mk
.na
.I edge
.ad
.RS 14n
.rt
Type of edge condition. It can be one of the following:
.sp
.in +2
.nf
MLIB_EDGE_DST_NO_WRITE
MLIB_EDGE_SRC_PADDED
.fi
.in -2

.RE

.SH RETURN VALUES
.sp
.LP
The function returns
.B MLIB_SUCCESS
if successful. Otherwise it returns
.BR MLIB_FAILURE .
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR mlib_ImageGridWarp_Fp (3MLIB),
.BR mlib_ImageGridWarpTable (3MLIB),
.BR mlib_ImageGridWarpTable_Fp (3MLIB),
.BR attributes (5)
