'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved 
.\" The contents of this file are subject to the terms of the Common Development and Distribution License (the "License").  You may not use this file except in compliance with the License.
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE or http://www.opensolaris.org/os/licensing.  See the License for the specific language governing permissions and limitations under the License.
.\" When distributing Covered Code, include this CDDL HEADER in each file and include the License file at usr/src/OPENSOLARIS.LICENSE.  If applicable, add the following below this CDDL HEADER, with the fields enclosed by brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
.TH mlib_MatrixAddS_U8_Mod 3MLIB "2 Mar 2007" "SunOS 5.11" "mediaLib Library Functions"
.SH NAME
mlib_MatrixAddS_U8_Mod, mlib_MatrixAddS_U8_Sat, mlib_MatrixAddS_U8C_Mod, mlib_MatrixAddS_U8C_Sat, mlib_MatrixAddS_S8_Mod, mlib_MatrixAddS_S8_Sat, mlib_MatrixAddS_S8C_Mod, mlib_MatrixAddS_S8C_Sat, mlib_MatrixAddS_S16_Mod, mlib_MatrixAddS_S16_Sat, mlib_MatrixAddS_S16C_Mod, mlib_MatrixAddS_S16C_Sat, mlib_MatrixAddS_S32_Mod, mlib_MatrixAddS_S32_Sat, mlib_MatrixAddS_S32C_Mod, mlib_MatrixAddS_S32C_Sat \- matrix addition to scalar, in place
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR... ] \fIfile\fR... \fB-lmlib\fR [ \fIlibrary\fR... ]
#include <mlib.h>

\fBmlib_status\fR \fBmlib_MatrixAddS_U8_Mod\fR(\fBmlib_u8 *\fR\fIxz\fR, \fBconst mlib_u8 *\fR\fIc\fR,
     \fBmlib_s32\fR \fIm\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_MatrixAddS_U8_Sat\fR(\fBmlib_u8 *\fR\fIxz\fR, \fBconst mlib_u8 *\fR\fIc\fR,
     \fBmlib_s32\fR \fIm\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_MatrixAddS_U8C_Mod\fR(\fBmlib_u8 *\fR\fIxz\fR, \fBconst mlib_u8 *\fR\fIc\fR,
     \fBmlib_s32\fR \fIm\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_MatrixAddS_U8C_Sat\fR(\fBmlib_u8 *\fR\fIxz\fR, \fBconst mlib_u8 *\fR\fIc\fR,
     \fBmlib_s32\fR \fIm\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_MatrixAddS_S8_Mod\fR(\fBmlib_s8 *\fR\fIxz\fR, \fBconst mlib_s8 *\fR\fIc\fR,
     \fBmlib_s32\fR \fIm\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_MatrixAddS_S8_Sat\fR(\fBmlib_s8 *\fR\fIxz\fR, \fBconst mlib_s8 *\fR\fIc\fR,
     \fBmlib_s32\fR \fIm\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_MatrixAddS_S8C_Mod\fR(\fBmlib_s8 *\fR\fIxz\fR, \fBconst mlib_s8 *\fR\fIc\fR,
     \fBmlib_s32\fR \fIm\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_MatrixAddS_S8C_Sat\fR(\fBmlib_s8 *\fR\fIxz\fR, \fBconst mlib_s8 *\fR\fIc\fR,
     \fBmlib_s32\fR \fIm\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_MatrixAddS_S16_Mod\fR(\fBmlib_s16 *\fR\fIxz\fR, \fBconst mlib_s16 *\fR\fIc\fR,
     \fBmlib_s32\fR \fIm\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_MatrixAddS_S16_Sat\fR(\fBmlib_s16 *\fR\fIxz\fR, \fBconst mlib_s16 *\fR\fIc\fR,
     \fBmlib_s32\fR \fIm\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_MatrixAddS_S16C_Mod\fR(\fBmlib_s16 *\fR\fIxz\fR, \fBconst mlib_s16 *\fR\fIc\fR,
     \fBmlib_s32\fR \fIm\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_MatrixAddS_S16C_Sat\fR(\fBmlib_s16 *\fR\fIxz\fR, \fBconst mlib_s16 *\fR\fIc\fR,
     \fBmlib_s32\fR \fIm\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_MatrixAddS_S32_Mod\fR(\fBmlib_s32 *\fR\fIxz\fR, \fBconst mlib_s32 *\fR\fIc\fR,
     \fBmlib_s32\fR \fIm\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_MatrixAddS_S32_Sat\fR(\fBmlib_s32 *\fR\fIxz\fR, \fBconst mlib_s32 *\fR\fIc\fR,
     \fBmlib_s32\fR \fIm\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_MatrixAddS_S32C_Mod\fR(\fBmlib_s32 *\fR\fIxz\fR, \fBconst mlib_s32 *\fR\fIc\fR,
     \fBmlib_s32\fR \fIm\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_MatrixAddS_S32C_Sat\fR(\fBmlib_s32 *\fR\fIxz\fR, \fBconst mlib_s32 *\fR\fIc\fR,
     \fBmlib_s32\fR \fIm\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.SH DESCRIPTION
.sp
.LP
Each of these functions performs an in-place addition of a scalar value to a matrix.
.sp
.LP
For real data, the following equation is used:
.sp
.in +2
.nf
xz[i] = c[0] + xz[i]
.fi
.in -2

.sp
.LP
where \fBi = 0, 1, ..., (m*n - 1)\fR.
.sp
.LP
For complex data, the following equation is used:
.sp
.in +2
.nf
xz[2*i]     = c[0] + xz[2*i]
xz[2*i + 1] = c[1] + xz[2*i + 1]
.fi
.in -2

.sp
.LP
where \fBi = 0, 1, ..., (m*n - 1)\fR.
.SH PARAMETERS
.sp
.LP
Each of the functions takes the following arguments:
.sp
.ne 2
.mk
.na
\fB\fIxz\fR\fR
.ad
.RS 6n
.rt  
Pointer to the source and the destination matrix.
.RE

.sp
.ne 2
.mk
.na
\fB\fIc\fR\fR
.ad
.RS 6n
.rt  
Pointer to the source scalar. When the function is used with complex data types, \fBc[0]\fR contains the scalar for the real part, and \fBc[1]\fR contains the scalar for the imaginary part.
.RE

.sp
.ne 2
.mk
.na
\fB\fIm\fR\fR
.ad
.RS 6n
.rt  
Number of rows in the matrices.
.RE

.sp
.ne 2
.mk
.na
\fB\fIn\fR\fR
.ad
.RS 6n
.rt  
Number of columns in the matrices.
.RE

.SH RETURN VALUES
.sp
.LP
Each of the functions returns \fBMLIB_SUCCESS\fR if successful. Otherwise it returns \fBMLIB_FAILURE\fR.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
\fBmlib_MatrixAddS_U8_U8_Mod\fR(3MLIB), \fBattributes\fR(5)
