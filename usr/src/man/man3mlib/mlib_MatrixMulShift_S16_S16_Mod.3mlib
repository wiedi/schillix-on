'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH mlib_MatrixMulShift_S16_S16_Mod 3MLIB "2 Mar 2007" "SunOS 5.11" "mediaLib Library Functions"
.SH NAME
mlib_MatrixMulShift_S16_S16_Mod, mlib_MatrixMulShift_S16_S16_Sat,
mlib_MatrixMulShift_S16C_S16C_Mod, mlib_MatrixMulShift_S16C_S16C_Sat \-
matrix multiplication plus shifting
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lmlib\fR [ \fIlibrary\fR.\|.\|. ]
#include <mlib.h>

\fBmlib_status\fR \fBmlib_MatrixMulShift_S16_S16_Mod\fR(\fBmlib_s16 *\fIz\fR,
    \fBconst mlib_s16 *\fIx\fR, \fBconst mlib_s16 *\fIy\fR, \fBmlib_s32\fR \fIm\fR,
    \fBmlib_s32\fR \fIl\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_MatrixMulShift_S16_S16_Sat\fR(\fBmlib_s16 *\fIz\fR,
     \fBconst mlib_s16 *\fIx\fR, \fBconst mlib_s16 *\fIy\fR, \fBmlib_s32\fR \fIm\fR,
     \fBmlib_s32\fR \fIl\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_MatrixMulShift_S16C_S16C_Mod\fR(\fBmlib_s16 *\fIz\fR,
     \fBconst mlib_s16 *\fIx\fR, \fBconst mlib_s16 *\fIy\fR, \fBmlib_s32\fR \fIm\fR,
     \fBmlib_s32\fR \fIl\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_MatrixMulShift_S16C_S16C_Sat\fR(\fBmlib_s16 *\fIz\fR,
     \fBconst mlib_s16 *\fIx\fR, \fBconst mlib_s16 *\fIy\fR, \fBmlib_s32\fR \fIm\fR,
     \fBmlib_s32\fR \fIl\fR, \fBmlib_s32\fR \fIn\fR, \fBmlib_s32\fR \fIshift\fR);
.fi

.SH DESCRIPTION
.sp
.LP
Each of these functions performs a multiplication of two matrices and
shifts the result.
.sp
.LP
For real data, the following equation is used:
.sp
.in +2
.nf
              l-1
z[i*n + j] = {SUM (x[i*l + k] * y[k*n + j])} * 2**(-shift)
              k=0
.fi
.in -2

.sp
.LP
where
\fBi = 0, 1, .\|.\|., (m - 1)\fR;
.BR "j = 0, 1, .\|.\|., (n - 1)" .
.sp
.LP
For complex data, the following equation is used:
.sp
.in +2
.nf
                      l-1
z[2*(i*n + j)]     = {SUM (xR*yR - xI*yI)} * 2**(-shift)
                      k=0

                      l-1
z[2*(i*n + j) + 1] = {SUM (xR*yI + xI*yR)} * 2**(-shift)
                      k=0
.fi
.in -2

.sp
.LP
where
.sp
.in +2
.nf
xR = x[2*(i*l + k)]
xI = x[2*(i*l + k) + 1]
yR = y[2*(k*n + j)]
yI = y[2*(k*n + j) + 1]
i = 0, 1, .\|.\|., (m - 1)
j = 0, 1, .\|.\|., (n - 1)
.fi
.in -2

.SH PARAMETERS
.sp
.LP
Each of the functions takes the following arguments:
.sp
.ne 2
.mk
.na
.I z
.ad
.RS 9n
.rt
Pointer to the first element of the result matrix, in row major order.
.RE

.sp
.ne 2
.mk
.na
.I x
.ad
.RS 9n
.rt
Pointer to the first element of the first matrix, in row major order.
.RE

.sp
.ne 2
.mk
.na
.I y
.ad
.RS 9n
.rt
Pointer to the first element of the second matrix, in row major order.
.RE

.sp
.ne 2
.mk
.na
.I m
.ad
.RS 9n
.rt
Number of rows in the first matrix.
.BR "m > 0" .
.RE

.sp
.ne 2
.mk
.na
.I l
.ad
.RS 9n
.rt
Number of columns in the first matrix, and the number of rows in the second
matrix.
.BR "l > 0" .
.RE

.sp
.ne 2
.mk
.na
.I n
.ad
.RS 9n
.rt
Number of columns in the second matrix.
.BR "n > 0" .
.RE

.sp
.ne 2
.mk
.na
.I shift
.ad
.RS 9n
.rt
Right shifting factor.
.BR "1 \(<= shift \(<= 16" .
.RE

.SH RETURN VALUES
.sp
.LP
Each of the functions returns
.B MLIB_SUCCESS
if successful. Otherwise
it returns
.BR MLIB_FAILURE .
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR mlib_MatrixMul_U8_U8_Mod (3MLIB),
.BR attributes (5)
