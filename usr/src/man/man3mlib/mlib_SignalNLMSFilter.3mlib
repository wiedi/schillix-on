'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved 
.\" The contents of this file are subject to the terms of the Common Development and Distribution License (the "License").  You may not use this file except in compliance with the License.
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE or http://www.opensolaris.org/os/licensing.  See the License for the specific language governing permissions and limitations under the License.
.\" When distributing Covered Code, include this CDDL HEADER in each file and include the License file at usr/src/OPENSOLARIS.LICENSE.  If applicable, add the following below this CDDL HEADER, with the fields enclosed by brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
.TH mlib_SignalNLMSFilter 3MLIB "10 Sep 2007" "SunOS 5.11" "mediaLib Library Functions"
.SH NAME
mlib_SignalNLMSFilter, mlib_SignalNLMSFilterInit_S16_S16, mlib_SignalNLMSFilterInit_S16S_S16S, mlib_SignalNLMSFilterInit_F32_F32, mlib_SignalNLMSFilterInit_F32S_F32S, mlib_SignalNLMSFilter_S16_S16_Sat, mlib_SignalNLMSFilter_S16S_S16S_Sat, mlib_SignalNLMSFilter_F32_F32, mlib_SignalNLMSFilter_F32S_F32S, mlib_SignalNLMSFilterNonAdapt_S16_S16_Sat, mlib_SignalNLMSFilterNonAdapt_S16S_S16S_Sat, mlib_SignalNLMSFilterNonAdapt_F32_F32, mlib_SignalNLMSFilterNonAdapt_F32S_F32S, mlib_SignalNLMSFilterFree_S16_S16, mlib_SignalNLMSFilterFree_S16S_S16S, mlib_SignalNLMSFilterFree_F32_F32, mlib_SignalNLMSFilterFree_F32S_F32S \- normalized least mean square (NLMS) adaptive filtering
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR... ] \fIfile\fR... \fB-lmlib\fR [ \fIlibrary\fR... ]
#include <mlib.h>

\fBmlib_status\fR \fBmlib_SignalNLMSFilterInit_S16_S16\fR(\fBvoid **\fR\fIfilter\fR, 
     \fBconst mlib_f32 *\fR\fIflt\fR, \fBmlib_s32\fR \fItap\fR, \fBmlib_f32\fR \fIbeta\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalNLMSFilterInit_S16S_S16S\fR(\fBvoid **\fR\fIfilter\fR, 
     \fBconst mlib_f32 *\fR\fIflt\fR, \fBmlib_s32\fR \fItap\fR, \fBmlib_f32\fR \fIbeta\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalNLMSFilterInit_F32_F32\fR(\fBvoid **\fR\fIfilter\fR, 
     \fBconst mlib_f32 *\fR\fIflt\fR, \fBmlib_s32\fR \fItap\fR, \fBmlib_f32\fR \fIbeta\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalNLMSFilterInit_F32S_F32S\fR(\fBvoid **\fR\fIfilter\fR, 
     \fBconst mlib_f32 *\fR\fIflt\fR, \fBmlib_s32\fR \fItap\fR, \fBmlib_f32\fR \fIbeta\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalNLMSFilter_S16_S16_Sat\fR(\fBmlib_s16 *\fR\fIdst\fR, 
     \fBconst mlib_s16 *\fR\fIsrc\fR, \fBconst mlib_s16 *\fR\fIref\fR, \fBvoid *\fR\fIfilter\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalNLMSFilter_S16S_S16S_Sat\fR(\fBmlib_s16 *\fR\fIdst\fR, 
     \fBconst mlib_s16 *\fR\fIsrc\fR, \fBconst mlib_s16 *\fR\fIref\fR, \fBvoid *\fR\fIfilter\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalNLMSFilter_F32_F32\fR(\fBmlib_f32 *\fR\fIdst\fR, 
     \fBconst mlib_f32 *\fR\fIsrc\fR, \fBconst mlib_f32 *\fR\fIref\fR, \fBvoid *\fR\fIfilter\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalNLMSFilter_F32S_F32S\fR(\fBmlib_f32 *\fR\fIdst\fR, 
     \fBconst mlib_f32 *\fR\fIsrc\fR, \fBconst mlib_f32 *\fR\fIref\fR, \fBvoid *\fR\fIfilter\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalNLMSFilterNonAdapt_S16_S16_Sat\fR(\fBmlib_s16 *\fR\fIdst\fR,
     \fBconst mlib_s16 *\fR\fIsrc\fR, \fBconst mlib_s16 *\fR\fIref\fR, \fBvoid *\fR\fIfilter\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalNLMSFilterNonAdapt_S16S_S16S_Sat\fR(\fBmlib_s16 *\fR\fIdst\fR,
     \fBconst mlib_s16 *\fR\fIsrc\fR, \fBconst mlib_s16 *\fR\fIref\fR, \fBvoid *\fR\fIfilter\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalNLMSFilterNonAdapt_F32_F32\fR(\fBmlib_f32 *\fR\fIdst\fR,
     \fBconst mlib_f32 *\fR\fIsrc\fR, \fBconst mlib_f32 *\fR\fIref\fR, \fBvoid *\fR\fIfilter\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalNLMSFilterNonAdapt_F32S_F32S\fR(\fBmlib_f32 *\fR\fIdst\fR,
     \fBconst mlib_f32 *\fR\fIsrc\fR, \fBconst mlib_f32 *\fR\fIref\fR, \fBvoid *\fR\fIfilter\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBvoid\fR \fBmlib_SignalNLMSFilterFree_S16_S16\fR(\fBvoid *\fR\fIfilter\fR);
.fi

.LP
.nf
\fBvoid\fR \fBmlib_SignalNLMSFilterFree_S16S_S16S\fR(\fBvoid *\fR\fIfilter\fR);
.fi

.LP
.nf
\fBvoid\fR \fBmlib_SignalNLMSFilterFree_F32_F32\fR(\fBvoid *\fR\fIfilter\fR);
.fi

.LP
.nf
\fBvoid\fR \fBmlib_SignalNLMSFilterFree_F32S_F32S\fR(\fBvoid *\fR\fIfilter\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The normalized LMS adaptive algorithm is summarized as follows:
.RS +4
.TP
1.
Initialize the weights \fBWk(i)\fR, \fBi = 0, 1, ..., tap - 1\fR.
.RE
.RS +4
.TP
2.
Initialize previous source elements \fBXo(i)\fR, \fBi = 0, 1, ..., tap - 1\fR.
.RE
.RS +4
.TP
3.
Read \fBXk(t)\fR from \fBsrc\fR and \fBYk(t)\fR from \fBref\fR, \fBt = 0, 1, ..., n - 1\fR.
.RE
.RS +4
.TP
4.
Compute filter output: \fBnk = sum(Wk(i) * Xk(t - i))\fR, \fBi = 0, 1, ..., tap - 1\fR. If \fBi > t\fR, use previous source elements stored in the \fBXo\fR vector.
.RE
.RS +4
.TP
5.
Compute source elements power: \fBPwk = sum(Xk(t - i) * Xk(t - i))\fR, \fBi = 0, 1, ..., tap - 1\fR. If \fBi > t\fR, use previous source elements stored in the \fBXo\fR vector.
.RE
.RS +4
.TP
6.
Store filter output : \fBdst[t] = nk\fR.
.RE
.RS +4
.TP
7.
Compute the error estimate: \fBEk = Yk - nk\fR.
.RE
.RS +4
.TP
8.
Compute factor \fBBE0 = 2 * beta * Ek / Pwk\fR.
.RE
.RS +4
.TP
9.
Update filter weights: \fBWk(i) += BE0 * Xk(t - i)\fR, \fBi = 0, 1, ..., tap - 1\fR. If \fBi > t\fR, use previous source elements stored in the \fBXo\fR vector.
.RE
.RS +4
.TP
10.
Next \fBt\fR, go to step 3.
.RE
.RS +4
.TP
11.
Store \fBN\fR ending source elements in previous source elements vector \fBXo\fR: if \fBN > n\fR, \fBN = n\fR; else \fBN = tap\fR.
.RE
.sp
.LP
Each of the \fBFilterInit\fR functions allocates memory for the internal filter structure and converts the parameters into the internal representation.
.sp
.LP
Each of the \fBFilter\fR functions applies the NLMS adaptive filter on one signal packet and updates the filter states.
.sp
.LP
Each of the \fBFilterNoAdapt\fR functions applies the NLMS filter on one signal packet and updates the filter states but without changing the filter weights.
.sp
.LP
Each of the \fBFilterFree\fR functions releases the memory allocated for the internal filter structure.
.SH PARAMETERS
.sp
.LP
Each of the functions takes some of the following arguments:
.sp
.ne 2
.mk
.na
\fB\fIfilter\fR\fR
.ad
.RS 10n
.rt  
Internal filter structure.
.RE

.sp
.ne 2
.mk
.na
\fB\fIflt\fR\fR
.ad
.RS 10n
.rt  
Filter coefficient array.
.RE

.sp
.ne 2
.mk
.na
\fB\fItap\fR\fR
.ad
.RS 10n
.rt  
Taps of the filter.
.RE

.sp
.ne 2
.mk
.na
\fB\fIbeta\fR\fR
.ad
.RS 10n
.rt  
Error weighting factor. \fB0 < beta < 1\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fIdst\fR\fR
.ad
.RS 10n
.rt  
Destination signal array.
.RE

.sp
.ne 2
.mk
.na
\fB\fIsrc\fR\fR
.ad
.RS 10n
.rt  
Source signal array.
.RE

.sp
.ne 2
.mk
.na
\fB\fIref\fR\fR
.ad
.RS 10n
.rt  
Reference or "desired" signal array.
.RE

.sp
.ne 2
.mk
.na
\fB\fIn\fR\fR
.ad
.RS 10n
.rt  
Number of samples in the source signal array.
.RE

.SH RETURN VALUES
.sp
.LP
Each of the \fBFilterInit\fR, \fBFilter\fR and \fBFilterNonAdapt\fR functions returns \fBMLIB_SUCCESS\fR if successful. Otherwise it returns \fBMLIB_FAILURE\fR. The \fBFilterFree\fR functions don't return anything.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
\fBmlib_SignalLMSFilter\fR(3MLIB), \fBattributes\fR(5)
