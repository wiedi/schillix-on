'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH mlib_SignalLMSFilter 3MLIB "2 Mar 2007" "SunOS 5.11" "mediaLib Library Functions"
.SH NAME
mlib_SignalLMSFilter, mlib_SignalLMSFilterInit_S16_S16,
mlib_SignalLMSFilterInit_S16S_S16S, mlib_SignalLMSFilterInit_F32_F32,
mlib_SignalLMSFilterInit_F32S_F32S, mlib_SignalLMSFilter_S16_S16_Sat,
mlib_SignalLMSFilter_S16S_S16S_Sat, mlib_SignalLMSFilter_F32_F32,
mlib_SignalLMSFilter_F32S_F32S, mlib_SignalLMSFilterNonAdapt_S16_S16_Sat,
mlib_SignalLMSFilterNonAdapt_S16S_S16S_Sat, mlib_SignalLMSFilterNonAdapt_F32_F32,
mlib_SignalLMSFilterNonAdapt_F32S_F32S, mlib_SignalLMSFilterFree_S16_S16,
mlib_SignalLMSFilterFree_S16S_S16S, mlib_SignalLMSFilterFree_F32_F32,
mlib_SignalLMSFilterFree_F32S_F32S \- least mean square (LMS) adaptive
filtering
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lmlib\fR [ \fIlibrary\fR.\|.\|. ]
#include <mlib.h>

\fBmlib_status\fR \fBmlib_SignalLMSFilterInit_S16_S16\fR(\fBvoid **\fIfilter\fR,
     \fBconst mlib_f32 *\fIflt\fR,
     \fBmlib_s32\fR \fItap\fR, \fBmlib_f32\fR \fIbeta\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalLMSFilterInit_S16S_S16S\fR(\fBvoid **\fIfilter\fR,
     \fBconst mlib_f32 *\fIflt\fR,
     \fBmlib_s32\fR \fItap\fR, \fBmlib_f32\fR \fIbeta\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalLMSFilterInit_F32_F32\fR(\fBvoid **\fIfilter\fR,
     \fBconst mlib_f32 *\fIflt\fR,
     \fBmlib_s32\fR \fItap\fR, \fBmlib_f32\fR \fIbeta\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalLMSFilterInit_F32S_F32S\fR(\fBvoid **\fIfilter\fR,
     \fBconst mlib_f32 *\fIflt\fR,
     \fBmlib_s32\fR \fItap\fR, \fBmlib_f32\fR \fIbeta\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalLMSFilter_S16_S16_Sat\fR(\fBmlib_s16 *\fIdst\fR,
     \fBconst mlib_s16 *\fIsrc\fR,
     \fBconst mlib_s16 *\fIref\fR, \fBvoid *\fIfilter\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalLMSFilter_S16S_S16S_Sat\fR(\fBmlib_s16 *\fIdst\fR,
     \fBconst mlib_s16 *\fIsrc\fR,
     \fBconst mlib_s16 *\fIref\fR, \fBvoid *\fIfilter\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalLMSFilter_F32_F32\fR(\fBmlib_f32 *\fIdst\fR,
     \fBconst mlib_f32 *\fIsrc\fR,
     \fBconst mlib_f32 *\fIref\fR, \fBvoid *\fIfilter\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalLMSFilter_F32S_F32S\fR(\fBmlib_f32 *\fIdst\fR,
     \fBconst mlib_f32 *\fIsrc\fR,
     \fBconst mlib_f32 *\fIref\fR, \fBvoid *\fIfilter\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalLMSFilterNonAdapt_S16_S16_Sat\fR(\fBmlib_s16 *\fIdst\fR,
     \fBconst mlib_s16 *\fIsrc\fR, \fBconst mlib_s16 *\fIref\fR,
     \fBvoid *\fIfilter\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalLMSFilterNonAdapt_S16S_S16S_Sat\fR(\fBmlib_s16 *\fIdst\fR,
     \fBconst mlib_s16 *\fIsrc\fR, \fBconst mlib_s16 *\fIref\fR,
     \fBvoid *\fIfilter\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalLMSFilterNonAdapt_F32_F32\fR(\fBmlib_f32 *\fIdst\fR,
     \fBconst mlib_f32 *\fIsrc\fR, \fBconst mlib_f32 *\fIref\fR,
     \fBvoid *\fIfilter\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_SignalLMSFilterNonAdapt_F32S_F32S\fR(\fBmlib_f32 *\fIdst\fR,
     \fBconst mlib_f32 *\fIsrc\fR, \fBconst mlib_f32 *\fIref\fR,
     \fBvoid *\fIfilter\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBvoid\fR \fBmlib_SignalLMSFilterFree_S16_S16\fR(\fBvoid *\fIfilter\fR);
.fi

.LP
.nf
\fBvoid\fR \fBmlib_SignalLMSFilterFree_S16S_S16S\fR(\fBvoid *\fIfilter\fR);
.fi

.LP
.nf
\fBvoid\fR \fBmlib_SignalLMSFilterFree_F32_F32\fR(\fBvoid *\fIfilter\fR);
.fi

.LP
.nf
\fBvoid\fR \fBmlib_SignalLMSFilterFree_F32S_F32S\fR(\fBvoid *\fIfilter\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The basic LMS adaptive algorithm is summarized as follows:
.RS +4
.TP
1.
Initialize the weights
.BR Wk(i) ,
.BR "i = 0, 1, .\|.\|., tap - 1" .
.RE
.RS +4
.TP
2.
Initialize previous source elements
.BR Xo(i) ,
\fBi = 0, 1, .\|.\|., tap -
1\fR.
.RE
.RS +4
.TP
3.
Read
.B Xk(t)
from
.B src
and
.B Yk(t)
from
.BR ref ,
\fBt = 0,
1, .\|.\|., n - 1\fR.
.RE
.RS +4
.TP
4.
Compute filter output:
.BR "nk = sum(Wk(i) * Xk(t - i))" ,
\fBi = 0, 1, .\|.\|.,
tap - 1\fR. If
.BR "i > t" ,
use previous source elements stored in the
\fBXo\fR vector.
.RE
.RS +4
.TP
5.
Store filter output :
.BR "dst[t] = nk" .
.RE
.RS +4
.TP
6.
Compute the error estimate:
.BR "Ek = Yk - nk" .
.RE
.RS +4
.TP
7.
Compute factor
.BR "BE0 = 2 * beta * Ek" .
.RE
.RS +4
.TP
8.
Update filter weights:
.BR "Wk(i) += BE0 * Xk(t - i)" ,
\fBi = 0, 1, .\|.\|.,
tap - 1\fR. If
.BR "i > t" ,
use previous source elements stored in
.BR Xo
vector.
.RE
.RS +4
.TP
9.
Next
.BR t ,
go to step 3.
.RE
.RS +4
.TP
10.
Store
.B N
ending source elements in previous source elements vector
.BR Xo :
if
.BR "N > n" ,
.BR "N = n" ;
else
.BR "N = tap" .
.RE
.sp
.LP
The functions assume that the input signal has a power maximum equal to 1.
If it is not,
.B beta
should be divided by power maximum. Power maximum
is calculated according to the following formula:
.sp
.in +2
.nf
                     flt_len
    Power_max = MAX {  SUM  signal(n + k)**2 }
                 n     k=0
.fi
.in -2

.sp
.LP
It is necessary to consider the maximum of power maxima of both components
as the stereo signal's power maximum.
.sp
.LP
Each of the
.B FilterInit
functions allocates memory for the internal
filter structure and converts the parameters into the internal
representation.
.sp
.LP
Each of the
.B Filter
functions applies the LMS adaptive filter on one
signal packet and updates the filter states.
.sp
.LP
Each of the
.B FilterNoAdapt
functions applies the LMS filter on one
signal packet and updates the filter states but without changing the filter
weights.
.sp
.LP
Each of the
.B FilterFree
functions releases the memory allocated for
the internal filter structure.
.SH PARAMETERS
.sp
.LP
Each of the functions takes some of the following arguments:
.sp
.ne 2
.mk
.na
\fIfilter\fR
.ad
.RS 10n
.rt
Internal filter structure.
.RE

.sp
.ne 2
.mk
.na
\fIflt\fR
.ad
.RS 10n
.rt
Filter coefficient array.
.RE

.sp
.ne 2
.mk
.na
.I tap
.ad
.RS 10n
.rt
Taps of the filter.
.RE

.sp
.ne 2
.mk
.na
.I beta
.ad
.RS 10n
.rt
Error weighting factor.
.BR "0 < beta < 1" .
.RE

.sp
.ne 2
.mk
.na
.I dst
.ad
.RS 10n
.rt
Destination signal array.
.RE

.sp
.ne 2
.mk
.na
.I src
.ad
.RS 10n
.rt
Source signal array.
.RE

.sp
.ne 2
.mk
.na
\fIref\fR
.ad
.RS 10n
.rt
Reference or "desired" signal array.
.RE

.sp
.ne 2
.mk
.na
.I n
.ad
.RS 10n
.rt
Number of samples in the source signal array.
.RE

.SH RETURN VALUES
.sp
.LP
Each of the
.BR FilterInit ,
\fBFilter\fR and \fBFilterNonAdapt\fR
functions returns
.B MLIB_SUCCESS
if successful. Otherwise it returns
.BR MLIB_FAILURE .
The
.B FilterFree
functions don't return anything.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR mlib_SignalNLMSFilter (3MLIB),
.BR attributes (5)
