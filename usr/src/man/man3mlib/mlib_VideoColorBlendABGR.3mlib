'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH mlib_VideoColorBlendABGR 3MLIB "2 Mar 2007" "SunOS 5.11" "mediaLib Library Functions"
.SH NAME
mlib_VideoColorBlendABGR, mlib_VideoColorBlendABGR_ResetAlpha \- image
blend
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lmlib\fR [ \fIlibrary\fR.\|.\|. ]
#include <mlib.h>

\fBvoid\fR \fBmlib_VideoColorBlendABGR\fR(\fBmlib_u32 *\fIdst\fR,
     \fBconst mlib_u32 *\fIsrc1\fR,\fBconst mlib_u32 *\fIsrc2\fR,
     \fBmlib_s32\fR \fIsrc1_w\fR, \fBmlib_s32\fR \fIsrc1_h\fR,
     \fBmlib_s32\fR \fIsrc2_w\fR,\fBmlib_s32\fR \fIsrc2_h\fR,
     \fBmlib_s32\fR \fIsrc2_x\fR, \fBmlib_s32\fR \fIsrc2_y\fR,
     \fBmlib_s32\fR \fIdst_lb\fR,\fBmlib_s32\fR \fIsrc1_lb\fR,
     \fBmlib_s32\fR \fIsrc2_lb\fR, \fBmlib_blend\fR \fIsrc1_blend\fR,
     \fBmlib_blend\fR \fIsrc2_blend\fR);
.fi

.LP
.nf
\fBvoid\fR \fBmlib_VideoColorBlendABGR_ResetAlpha\fR(\fBmlib_u32 *\fIdst\fR,
     \fBconst mlib_u32 *\fIsrc1\fR,\fBconst mlib_u32 *\fIsrc2\fR,
     \fBmlib_s32\fR \fIsrc1_w\fR, \fBmlib_s32\fR \fIsrc1_h\fR,
     \fBmlib_s32\fR \fIsrc2_w\fR,\fBmlib_s32\fR \fIsrc2_h\fR,
     \fBmlib_s32\fR \fIsrc2_x\fR, \fBmlib_s32\fR \fIsrc2_y\fR,
     \fBmlib_s32\fR \fIdst_lb\fR, \fBmlib_s32\fR \fIsrc1_lb\fR,
     \fBmlib_s32\fR \fIsrc2_lb\fR, \fBmlib_blend\fR \fIsrc1_blend\fR,
     \fBmlib_blend\fR \fIsrc2_blend\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The functions use the following equation for blending images:
.sp
.in +2
.nf
  dst = (src1 * src1_blend) + (src2 * src2_blend)
.fi
.in -2

.sp
.LP
The two multi-banded source images (src1 and src2) are blended together and
stored in the destination image (dst). The image buffers pointed to by dst,
src1, and src2 contain 4-banded ABGR images, 8 bits per component. src1_w
and src1_h are the dimensions of the src1 input buffer. src2_w and src2_h
are the dimensions of the src2 input buffer. The output buffer must be at
least as large as the src1 input buffer. src2_x and src2_y are the offset of
the src2 input buffer relative to src1. Where pixels in src2 overlap pixels
in src1, the pixels are blended. Pixels in src1 which are outside of src2
are copied into dst. Pixels in the dst image outside of src1 are left
unchanged. src1_blend specifies the blend function to be applied to the
pixels of src1 image and src2_blend specifies the blend function to be
applied to the pixels of src2.
.sp
.LP
Possible blend functions are:
.sp
.in +2
.nf
  MLIB_BLEND_ZERO
  MLIB_BLEND_ONE
  MLIB_BLEND_SRC_ALPHA
  MLIB_BLEND_ONE_MINUS_SRC_ALPHA
  MLIB_BLEND_DST_ALPHA
  MLIB_BLEND_ONE_MINUS_DST_ALPHA
.fi
.in -2

.sp
.LP
MLIB_BLEND_SRC_ALPHA is the alpha component of image src2 scaled to the
range 0.0 to 1.0. MLIB_BLEND_DST_ALPHA is the alpha component of image src1
scaled to the range 0.0 to 1.0. All pixel components are treated as unsigned
8-bit quantities and the output pixel component values are clamped to the
range 0 to 255.
.sp
.LP
For the
.B mlib_VideoColorBlendABGR_ResetAlpha()
function,  the alpha
value of every pixel in destination image is set to 0 after blending is
complete.
.SH PARAMETERS
.sp
.LP
Each of the functions takes the following arguments:
.sp
.ne 2
.mk
.na
.I dst
.ad
.RS 14n
.rt
Pointer to output image.
.RE

.sp
.ne 2
.mk
.na
.I src1
.ad
.RS 14n
.rt
Pointer to 1st input image.
.RE

.sp
.ne 2
.mk
.na
.I src2
.ad
.RS 14n
.rt
Pointer to 2nd input image.
.RE

.sp
.ne 2
.mk
.na
.I src1_w
.ad
.RS 14n
.rt
src1 image width in pixels.
.RE

.sp
.ne 2
.mk
.na
.I src1_h
.ad
.RS 14n
.rt
src1 image height in rows.
.RE

.sp
.ne 2
.mk
.na
.I src2_w
.ad
.RS 14n
.rt
src2 image width in pixels.
.RE

.sp
.ne 2
.mk
.na
.I src2_h
.ad
.RS 14n
.rt
src2 image height in rows.
.RE

.sp
.ne 2
.mk
.na
.I src2_x
.ad
.RS 14n
.rt
src2 horizontal displacement (in pixels), relative to the upper-left corner
of src1.
.RE

.sp
.ne 2
.mk
.na
.I src2_y
.ad
.RS 14n
.rt
src2 vertical displacement (in rows), relative to the upper-left corner of
src1.
.RE

.sp
.ne 2
.mk
.na
.I dst_lb
.ad
.RS 14n
.rt
Linebytes for output image.
.RE

.sp
.ne 2
.mk
.na
.I src1_lb
.ad
.RS 14n
.rt
Linebytes for 1st input image.
.RE

.sp
.ne 2
.mk
.na
.I src2_lb
.ad
.RS 14n
.rt
Linebytes for 2nd input image.
.RE

.sp
.ne 2
.mk
.na
.I src1_blend
.ad
.RS 14n
.rt
Blend function for src1 image.
.RE

.sp
.ne 2
.mk
.na
.I src2_blend
.ad
.RS 14n
.rt
Blend function for src2 image.
.RE

.SH RETURN VALUES
.sp
.LP
None.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR mlib_VideoColorBlendABGR_Inp (3MLIB),
.BR attributes (5)
