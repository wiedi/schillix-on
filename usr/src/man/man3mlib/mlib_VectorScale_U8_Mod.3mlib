'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH mlib_VectorScale_U8_Mod 3MLIB "2 Mar 2007" "SunOS 5.11" "mediaLib Library Functions"
.SH NAME
mlib_VectorScale_U8_Mod, mlib_VectorScale_U8_Sat, mlib_VectorScale_U8C_Mod,
mlib_VectorScale_U8C_Sat, mlib_VectorScale_S8_Mod, mlib_VectorScale_S8_Sat,
mlib_VectorScale_S8C_Mod, mlib_VectorScale_S8C_Sat,
mlib_VectorScale_S16_Mod, mlib_VectorScale_S16_Sat,
mlib_VectorScale_S16C_Mod, mlib_VectorScale_S16C_Sat,
mlib_VectorScale_S32_Mod, mlib_VectorScale_S32_Sat,
mlib_VectorScale_S32C_Mod, mlib_VectorScale_S32C_Sat \- vector linear
scaling, in place
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR... ] \fIfile\fR... \fB-lmlib\fR [ \fIlibrary\fR... ]
#include <mlib.h>

\fBmlib_status\fR \fBmlib_VectorScale_U8_Mod\fR(\fBmlib_u8 *\fR\fIxz\fR,
     \fBconst mlib_u8 *\fR\fIa\fR, \fBconst mlib_u8 *\fR\fIb\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorScale_U8_Sat\fR(\fBmlib_u8 *\fR\fIxz\fR,
     \fBconst mlib_u8 *\fR\fIa\fR, \fBconst mlib_u8 *\fR\fIb\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorScale_U8C_Mod\fR(\fBmlib_u8 *\fR\fIxz\fR,
     \fBconst mlib_u8 *\fR\fIa\fR, \fBconst mlib_u8 *\fR\fIb\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorScale_U8C_Sat\fR(\fBmlib_u8 *\fR\fIxz\fR,
     \fBconst mlib_u8 *\fR\fIa\fR, \fBconst mlib_u8 *\fR\fIb\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorScale_S8_Mod\fR(\fBmlib_s8 *\fR\fIxz\fR,
     \fBconst mlib_s8 *\fR\fIa\fR, \fBconst mlib_s8 *\fR\fIb\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorScale_S8_Sat\fR(\fBmlib_s8 *\fR\fIxz\fR,
     \fBconst mlib_s8 *\fR\fIa\fR, \fBconst mlib_s8 *\fR\fIb\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorScale_S8C_Mod\fR(\fBmlib_s8 *\fR\fIxz\fR,
     \fBconst mlib_s8 *\fR\fIa\fR, \fBconst mlib_s8 *\fR\fIb\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorScale_S8C_Sat\fR(\fBmlib_s8 *\fR\fIxz\fR,
     \fBconst mlib_s8 *\fR\fIa\fR, \fBconst mlib_s8 *\fR\fIb\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorScale_S16_Mod\fR(\fBmlib_s16 *\fR\fIxz\fR,
     \fBconst mlib_s16 *\fR\fIa\fR, \fBconst mlib_s16 *\fR\fIb\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorScale_S16_Sat\fR(\fBmlib_s16 *\fR\fIxz\fR,
     \fBconst mlib_s16 *\fR\fIa\fR, \fBconst mlib_s16 *\fR\fIb\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorScale_S16C_Mod\fR(\fBmlib_s16 *\fR\fIxz\fR,
     \fBconst mlib_s16 *\fR\fIa\fR, \fBconst mlib_s16 *\fR\fIb\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorScale_S16C_Sat\fR(\fBmlib_s16 *\fR\fIxz\fR,
     \fBconst mlib_s16 *\fR\fIa\fR, \fBconst mlib_s16 *\fR\fIb\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorScale_S32_Mod\fR(\fBmlib_s32 *\fR\fIxz\fR,
     \fBconst mlib_s32 *\fR\fIa\fR, \fBconst mlib_s32 *\fR\fIb\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorScale_S32_Sat\fR(\fBmlib_s32 *\fR\fIxz\fR,
     \fBconst mlib_s32 *\fR\fIa\fR, \fBconst mlib_s32 *\fR\fIb\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorScale_S32C_Mod\fR(\fBmlib_s32 *\fR\fIxz\fR,
     \fBconst mlib_s32 *\fR\fIa\fR, \fBconst mlib_s32 *\fR\fIb\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.LP
.nf
\fBmlib_status\fR \fBmlib_VectorScale_S32C_Sat\fR(\fBmlib_s32 *\fR\fIxz\fR,
     \fBconst mlib_s32 *\fR\fIa\fR, \fBconst mlib_s32 *\fR\fIb\fR, \fBmlib_s32\fR \fIn\fR);
.fi

.SH DESCRIPTION
.sp
.LP
Each of these functions performs an in-place scaling of a vector by
multiplying by a scalar and adding an offset.
.sp
.LP
For real data, the following equation is used:
.sp
.in +2
.nf
xz[i] = a[0]*xz[i] + b[0]
.fi
.in -2

.sp
.LP
where \fBi = 0, 1, ..., (n - 1)\fR.
.sp
.LP
For complex data, the following equation is used:
.sp
.in +2
.nf
tmp         = xz[2*i]
xz[2*i]     = a[0]*tmp - a[1]*xz[2*i + 1] + b[0]
xz[2*i + 1] = a[1]*tmp + a[0]*xz[2*i + 1] + b[1]
.fi
.in -2

.sp
.LP
where \fBi = 0, 1, ..., (n - 1)\fR.
.SH PARAMETERS
.sp
.LP
Each of the functions takes the following arguments:
.sp
.ne 2
.mk
.na
\fB\fIxz\fR\fR
.ad
.RS 6n
.rt
Pointer to the first element of the source and destination vector.
.RE

.sp
.ne 2
.mk
.na
\fB\fIa\fR\fR
.ad
.RS 6n
.rt
Pointer to the source scaling factor. When the function is used with
complex data types, \fBa[0]\fR contains the real part of the scaling factor,
and \fBa[1]\fR contains the imaginary part of the scaling factor.
.RE

.sp
.ne 2
.mk
.na
\fB\fIb\fR\fR
.ad
.RS 6n
.rt
Pointer to the source offset. When the function is used with complex data
types, \fBb[0]\fR contains the real part of the offset, and \fBb[1]\fR
contains the imaginary part of the offset.
.RE

.sp
.ne 2
.mk
.na
\fB\fIn\fR\fR
.ad
.RS 6n
.rt
Number of elements in the vectors.
.RE

.SH RETURN VALUES
.sp
.LP
Each of the functions returns \fBMLIB_SUCCESS\fR if successful. Otherwise
it returns \fBMLIB_FAILURE\fR.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
\fBmlib_VectorScale_U8_U8_Mod\fR(3MLIB), \fBattributes\fR(5)
