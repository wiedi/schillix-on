'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH mlib_ImageDataTypeConvert 3MLIB "2 Mar 2007" "SunOS 5.11" "mediaLib Library Functions"
.SH NAME
mlib_ImageDataTypeConvert \- data type conversion
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lmlib\fR [ \fIlibrary\fR.\|.\|. ]
#include <mlib.h>

\fBmlib_status\fR \fBmlib_ImageDataTypeConvert\fR(\fBmlib_image *\fIdst\fR, \fBconst mlib_image *\fIsrc\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBmlib_ImageDataTypeConvert()\fR function converts between data types
\fBMLIB_BIT\fR, \fBMLIB_BYTE\fR, \fBMLIB_SHORT\fR, \fBMLIB_USHORT\fR,
\fBMLIB_INT\fR, \fBMLIB_FLOAT\fR, and \fBMLIB_DOUBLE\fR.
.sp
.LP
The input and output data images must have the same width, height, and
number of channels. Conversion to a smaller pixel format clamps the source
value to the dynamic range of the destination pixel.
.sp
.LP
See the following table for available variations of the data type
conversion function.
.sp

.sp
.TS
tab();
cw(0i) cw(0i) cw(5.5i)
lw(0i) lw(0i) lw(5.5i)
.
Source TypeDest. TypeAction
_
MLIB_BYTEMLIB_BIT(x > 0) ? 1 : 0
MLIB_SHORTMLIB_BIT(x > 0) ? 1 : 0
_
MLIB_USHORTMLIB_BIT(x > 0) ? 1 : 0
_
MLIB_INTMLIB_BIT(x > 0) ? 1 : 0
_
MLIB_FLOATMLIB_BIT(x > 0) ? 1 : 0
_
MLIB_DOUBLEMLIB_BIT(x > 0) ? 1 : 0
_
MLIB_BITMLIB_BYTE(x == 1) ? 1 : 0
_
MLIB_SHORTMLIB_BYTE(mlib_u8)clamp(x, 0, 255)
_
MLIB_USHORTMLIB_BYTE(mlib_u8)clamp(x, 0, 255)
_
MLIB_INTMLIB_BYTE(mlib_u8)clamp(x, 0, 255)
_
MLIB_FLOATMLIB_BYTE(mlib_u8)clamp(x, 0, 255)
_
MLIB_DOUBLEMLIB_BYTE(mlib_u8)clamp(x, 0, 255)
_
MLIB_BITMLIB_SHORT(x == 1) ? 1 : 0
_
MLIB_BYTEMLIB_SHORT(mlib_s16)x
_
MLIB_USHORTMLIB_SHORT(mlib_s16)clamp(x, -32768, 32767)
_
MLIB_INTMLIB_SHORT(mlib_s16)clamp(x, -32768, 32767)
_
MLIB_FLOATMLIB_SHORT(mlib_s16)clamp(x, -32768, 32767)
_
MLIB_DOUBLEMLIB_SHORT(mlib_s16)clamp(x, -32768, 32767)
_
MLIB_BITMLIB_USHORT(x == 1) ? 1 : 0
_
MLIB_BYTEMLIB_USHORT(mlib_u16)x
_
MLIB_SHORTMLIB_USHORT(mlib_u16)clamp(x, 0, 65535)
_
MLIB_INTMLIB_USHORT(mlib_u16)clamp(x, 0, 65535)
_
MLIB_FLOATMLIB_USHORT(mlib_u16)clamp(x, 0, 65535)
_
MLIB_DOUBLEMLIB_USHORT(mlib_u16)clamp(x, 0, 65535)
_
MLIB_BITMLIB_INT(x == 1) ? 1 : 0
_
MLIB_BYTEMLIB_INT(mlib_s32)x
_
MLIB_SHORTMLIB_INT(mlib_s32)x
_
MLIB_USHORTMLIB_INT(mlib_s32)x
_
MLIB_FLOATMLIB_INTT{
(mlib_s32)clamp(x, -2147483647-1, 2147483647)
T}
_
MLIB_DOUBLEMLIB_INTT{
(mlib_s32)clamp(x, -2147483647-1, 2147483647)
T}
_
MLIB_BITMLIB_FLOAT(x == 1) ? 1.0 : 0.0
_
MLIB_BYTEMLIB_FLOAT(mlib_f32)x
_
MLIB_SHORTMLIB_FLOAT(mlib_f32)x
_
MLIB_USHORTMLIB_FLOAT(mlib_f32)x
_
MLIB_INTMLIB_FLOAT(mlib_f32)x
_
MLIB_DOUBLEMLIB_FLOAT(mlib_f32)x
_
MLIB_BITMLIB_DOUBLE(x == 1) ? 1.0 : 0.0
_
MLIB_BYTEMLIB_DOUBLE(mlib_d64)x
_
MLIB_SHORTMLIB_DOUBLE(mlib_d64)x
_
MLIB_USHORTMLIB_DOUBLE(mlib_d64)x
_
MLIB_INTMLIB_DOUBLE(mlib_d64)x
_
MLIB_FLOATMLIB_DOUBLE(mlib_d64)x
.TE

.sp
.LP
The actions are defined in C-style pseudo-code. All type casts follow the
rules of standard C. \fBclamp()\fR can be defined as a macro: \fB#define
clamp(x, low, high) (((x) < (low)) ? (low) : (((x) > (high)) ? (high) :
(x)))\fR
.SH PARAMETERS
.sp
.LP
The function takes the following arguments:
.sp
.ne 2
.mk
.na
\fIdst\fR
.ad
.RS 7n
.rt
Pointer to destination image.
.RE

.sp
.ne 2
.mk
.na
\fIsrc\fR
.ad
.RS 7n
.rt
Pointer to source image.
.RE

.SH RETURN VALUES
.sp
.LP
The function returns \fBMLIB_SUCCESS\fR if successful. Otherwise it returns
\fBMLIB_FAILURE\fR.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
\fBmlib_ImageReformat\fR(3MLIB), \fBattributes\fR(5)
