'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH pam 3PAM "22 Feb 2005" "SunOS 5.11" "PAM Library Functions"
.SH NAME
pam \- PAM (Pluggable Authentication Module)
.SH SYNOPSIS
.LP
.nf
#include <security/pam_appl.h>
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR .\|.\|. \fB-lpam\fR [ \fIlibrary\fR .\|.\|. ]
.fi

.SH DESCRIPTION
.sp
.LP
The
.B PAM
framework,
.BR libpam ,
consists of an interface library and
multiple authentication  service modules.  The
.B PAM
interface library is
the layer implementing the  Application Programming Interface
.RB ( API ).
The authentication service modules are a set of dynamically loadable objects
invoked by the
.B "PAM API"
to provide a particular type of user
authentication.
.B PAM
gives system administrators the flexibility of
choosing any authentication service available on the system to perform
authentication. This framework also allows new authentication service modules to
be plugged in and made available without modifying the applications.
.sp
.LP
Refer to
.I "Solaris Security for Developers Guide"
for information about
providing authentication, account management, session management, and password
management through PAM modules.
.SS "Interface Overview"
.sp
.LP
The
.B PAM
library interface consists of six categories of functions,  the
names for which all start with the prefix
.BR pam_ .
.sp
.LP
The first category contains functions for establishing and terminating an
authentication activity, which are
.BR pam_start (3PAM)
and
.BR pam_end (3PAM).
The functions
.BR pam_set_data "(3PAM) and"
.BR pam_get_data (3PAM)
maintain module specific data. The functions
.BR pam_set_item (3PAM)
and
.BR pam_get_item "(3PAM) maintain state"
information. \fBpam_strerror\fR(3PAM) is the function that returns error status
information.
.sp
.LP
The second category contains the functions that authenticate an individual user
and set the credentials of the user,
.BR pam_authenticate (3PAM)
and
.BR pam_setcred (3PAM).
.sp
.LP
The third category of
.B PAM
interfaces is account management. The function
.BR pam_acct_mgmt (3PAM)
checks for password aging and access-hour
restrictions.
.sp
.LP
Category four contains the functions that perform session management after
access to the system has been granted. See
.BR pam_open_session (3PAM)
and
.BR pam_close_session (3PAM)
.sp
.LP
The fifth category consists of the function that changes authentication tokens,
.BR pam_chauthtok (3PAM).
An authentication token is the object used to verify
the identity of the user. In UNIX, an authentication token is a user's
password.
.sp
.LP
The sixth category of functions can be used to set values for
.BR PAM
environment variables. See
.BR pam_putenv (3PAM),
.BR pam_getenv (3PAM),
and
.BR pam_getenvlist (3PAM).
.sp
.LP
The \fBpam_*(\|)\fR interfaces are implemented through the library
.BR libpam .
For each of the categories listed above, excluding categories one
and six, dynamically loadable shared modules exist that provides the appropriate
service layer functionality upon demand. The functional entry points in the
service layer start with the
.B pam_sm_
prefix.  The only difference between
the \fBpam_sm_*(\|)\fR interfaces and their corresponding \fBpam_\fR interfaces
is that all the \fBpam_sm_*(\|)\fR interfaces require extra parameters to pass
service\(mispecific options to the shared modules.   Refer to
.BR pam_sm (3PAM)
for an overview of the
.B PAM
service module
.BR APIs.
.SS "Stateful Interface"
.sp
.LP
A sequence of calls sharing a common set of state information is referred to as
an authentication transaction.  An authentication  transaction begins with a
call to
.BR pam_start() .
.B pam_start()
allocates space, performs various
initialization activities, and assigns a
.B PAM
authentication handle to be
used for subsequent calls to the library.
.sp
.LP
After initiating an authentication transaction, applications can invoke
.B pam_authenticate()
to authenticate a particular user, and
.B pam_acct_mgmt()
to perform system entry management. For example, the
application may want to determine if the user's  password has expired.
.sp
.LP
If the user has been successfully authenticated, the application calls
.B pam_setcred()
to set any user credentials associated with the
authentication service. Within one authentication transaction (between
.B pam_start()
and
.BR pam_end() ),
all calls to the
.B PAM
interface
should be made with the same authentication handle returned by
.BR pam_start() .
This is necessary because certain service modules may store
module-specific data in a handle that is intended for use by other modules. For
example, during the call to
.BR pam_authenticate() ,
service modules may store
data in the handle that is intended for use by
.BR pam_setcred() .
.sp
.LP
To perform session management, applications call
.BR pam_open_session() .
Specifically, the system may want to store  the total time for the session. The
function
.B pam_close_session()
closes the current session.
.sp
.LP
When necessary, applications can call
.B pam_get_item()
and
.B pam_set_item()
to access and to update specific authentication
information. Such information may include the current username.
.sp
.LP
To terminate an authentication transaction, the application simply calls
.BR pam_end() ,
which frees previously allocated space used to store
authentication information.
.SS "Application\(miAuthentication Service Interactive Interface"
.sp
.LP
The authentication service in
.B PAM
does not communicate directly with the
user; instead it relies on the application to perform all such interactions. The
application passes a pointer to the function,
.BR conv() ,
along with any
associated application data pointers, through a
.I pam_conv
structure to the
authentication service when it initiates an authentication transaction, via a
call to
.BR pam_start() .
The service will then use the function,
.BR conv() ,
to prompt the user for data,  output error messages, and display text
information. Refer to \fBpam_start\fR(3PAM) for more information.
.SS "Stacking Multiple Schemes"
.sp
.LP
The
.B PAM
architecture enables authentication by multiple authentication
services through
.IR stacking .
System entry applications, such as
.BR login (1),
stack multiple service modules to authenticate users with
multiple authentication services. The order in which authentication service
modules are stacked is specified in the configuration file,
.BR pam.conf (4).
A
system administrator determines this ordering, and also determines  whether the
same password can be used for all authentication services.
.SS "Administrative Interface"
.sp
.LP
The authentication library,
.BR /usr/lib/libpam.so.1 ,
implements the
framework interface. Various authentication services are  implemented by their
own loadable modules whose paths are specified through the
.BR pam.conf (4)
file.
.SH RETURN VALUES
.sp
.LP
The
.B PAM
functions may return one of the following generic values,  or one
of the values defined in the specific man pages:
.sp
.ne 2
.mk
.na
.B PAM_SUCCESS
.ad
.RS 19n
.rt
The function returned successfully.
.RE

.sp
.ne 2
.mk
.na
.B PAM_OPEN_ERR
.ad
.RS 19n
.rt
.B dlopen()
failed when dynamically loading a service module.
.RE

.sp
.ne 2
.mk
.na
.B PAM_SYMBOL_ERR
.ad
.RS 19n
.rt
Symbol not found.
.RE

.sp
.ne 2
.mk
.na
.B PAM_SERVICE_ERR
.ad
.RS 19n
.rt
Error in service module.
.RE

.sp
.ne 2
.mk
.na
.B PAM_SYSTEM_ERR
.ad
.RS 19n
.rt
System error.
.RE

.sp
.ne 2
.mk
.na
.B PAM_BUF_ERR
.ad
.RS 19n
.rt
Memory buffer error.
.RE

.sp
.ne 2
.mk
.na
.B PAM_CONV_ERR
.ad
.RS 19n
.rt
Conversation failure.
.RE

.sp
.ne 2
.mk
.na
.B PAM_PERM_DENIED
.ad
.RS 19n
.rt
Permission denied.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT LevelMT-Safe with exceptions
.TE

.SH SEE ALSO
.sp
.LP
.BR login (1),
.BR pam_authenticate (3PAM),
.BR pam_chauthtok (3PAM),
.BR pam_open_session (3PAM),
.BR pam_set_item (3PAM),
.BR pam_setcred (3PAM),
.BR pam_sm (3PAM),
.BR pam_start (3PAM),
.BR pam_strerror (3PAM),
.BR pam.conf (4),
.BR attributes (5)
.sp
.LP
.I Solaris Security for Developers Guide
.SH NOTES
.sp
.LP
The interfaces in
.B libpam()
are MT-Safe only if each thread within the
multithreaded application uses its own
.B PAM
handle.
