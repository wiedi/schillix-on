'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc., All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH kiconv 9F "16 Oct 2007" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
kiconv \- buffer-based code conversion function
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/errno.h>
#include <sys/sunddi.h>



\fBsize_t\fR \fBkiconv\fR(\fBkiconv_t\fR \fIcd\fR, \fBchar **\fIinbuf\fR, \fBsize_t *\fIinbytesleft\fR,
     \fBchar **\fIoutbuf\fR, \fBsize_t *\fIoutbytesleft\fR, \fBint *\fIerrno\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.LP
The parameters for the
.B kiconv
function are as follows:
.sp
.ne 2
.mk
.na
.I cd
.ad
.RS 16n
.rt
Code conversion descriptor indicating the code conversion and conversion
state.
.RE

.sp
.ne 2
.mk
.na
.I inbuf
.ad
.RS 16n
.rt
Points to an address of a buffer containing a sequence of character bytes
in
.B fromcode
codeset to be converted. After the conversion, the
variable is updated to point to the byte following the last byte that was
successfully used in the conversion.
.RE

.sp
.ne 2
.mk
.na
.I inbytesleft
.ad
.RS 16n
.rt
As an input parameter, the number of bytes to be converted in
.IR inbuf .
As an output parameter, the number of bytes in
.I inbuf
still not
converted after the conversion.
.RE

.sp
.ne 2
.mk
.na
.I outbuf
.ad
.RS 16n
.rt
Points to an address of a buffer where converted character bytes in
.B tocode
codeset can be saved. After the conversion, the variable is
updated to point to the byte following the last byte of converted output
data.
.RE

.sp
.ne 2
.mk
.na
.I outbytesleft
.ad
.RS 16n
.rt
As an input parameter, the number of available bytes at
.I outbuf
where
converted character bytes can be saved. As an output parameter, the number
of bytes still available at
.I outbuf
after the conversion.
.RE

.sp
.ne 2
.mk
.na
.I errno
.ad
.RS 16n
.rt
Indicates the error when conversion is not completed or failed. The
following are possible values:
.sp
.ne 2
.mk
.na
.B EILSEQ
.ad
.RS 13n
.rt
The input conversion was stopped due to an input byte that does not belong
to the input codeset.
.RE

.sp
.ne 2
.mk
.na
.B E2BIG
.ad
.RS 13n
.rt
The input conversion was stopped due to lack of space in the output
buffer.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 13n
.rt
The input conversion was stopped due to an incomplete character or shift
sequence at the end of the input buffer.
.RE

.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 13n
.rt
The
.I cd
input parameter is not a valid open code conversion
descriptor.
.RE

.RE

.SH DESCRIPTION
.sp
.LP
The
.B kiconv()
function converts the sequence of characters from one
.BR codeset ,
in the array specified by
.IR inbuf ,
into a sequence of
corresponding characters in another
.BR codeset ,
in the array specified by
.IR outbuf .
The
.B codesets
are those specified in the
.B kiconv_open()
call that returned the code conversion descriptor,
.IR cd .
The
.I inbuf
parameter points to a variable that points to the
first character in the input buffer and
.I inbytesleft
indicates the
number of bytes to the end of the buffer to be converted. The
.I outbuf
parameter points to a variable that points to the first available byte in
the output buffer and
.I outbytesleft
indicates the number of the
available bytes to the end of the buffer.
.sp
.LP
For state-dependent encodings, the conversion descriptor
.I cd
is placed
into its initial shift state by a call for which
.I inbuf
is a null
pointer, or for which
.I inbuf
points to a null pointer. When
.B kiconv()
is called in this way, and if
.I outbuf
is not a null
pointer or a pointer to a null pointer, and
.I outbytesleft
points to a
positive value,
.B kiconv()
places, if any, into the output buffer, the
byte sequence to change the output buffer to its initial shift state. If the
output buffer is not large enough to hold the entire reset sequence,
.B kiconv()
fails and sets
.I errno
to
.BR E2BIG .
Subsequent calls
with
.I inbuf
as other than a null pointer or a pointer to a null pointer
cause the conversion to take place from the current state of the conversion
descriptor.
.sp
.LP
If a sequence of input bytes does not form a valid character in the
specified
.BR codeset ,
conversion stops after the previous successfully
converted character. If the input buffer ends with an incomplete character
or shift sequence, conversion stops after the previous successfully
converted bytes. If the output buffer is not large enough to hold the entire
converted input, conversion stops just prior to the input bytes that would
cause the output buffer to overflow. The variable pointed to by
.I inbuf
is updated to point to the byte following the last byte that was
successfully used in the conversion. The value pointed to by
.I inbytesleft
is decremented to reflect the number of bytes still not
converted in the input buffer. The variable pointed to by
.I outbuf
is
updated to point to the byte following the last byte of converted output
data. The value pointed to by
.I outbytesleft
is decremented to reflect
the number of bytes still available in the output buffer. For
state-dependent encodings, the conversion descriptor is updated to reflect
the shift state in effect at the end of the last successfully converted byte
sequence.
.sp
.LP
If
.B kiconv()
encounters a character in the input buffer that is legal,
but for which an identical character does not exist in the target
.BR codeset ,
.B kiconv()
performs an implementation-defined conversion
(that is, a non-identical conversion) on this character.
.SH RETURN VALUES
.sp
.LP
The
.B kiconv()
function updates the variables pointed to by the
parameters to reflect the extent of the conversion and returns the number of
non-identical conversions performed. If the entire string in the input
buffer is converted, the value pointed to by
.I inbytesleft
is 0. If the
input conversion is stopped due to any conditions mentioned above, the value
pointed to by
.I inbytesleft
is non-zero and
.I errno
is set to
indicate the condition. If such and other error occurs,
.B kiconv()
returns
.RB ( size_t )-1
and sets
.I errno
to indicate the error.
.SH CONTEXT
.sp
.LP
.B kiconv()
can be called from user or interrupt context.
.SH EXAMPLES
.LP
.B Example 1
Performing a Simple Conversion
.sp
.LP
The following example shows how to perform a simple conversion using
.B kiconv()
with a limited size of output buffer:

.sp
.in +2
.nf
#include <sys/types.h>
#include <sys/errno.h>
#include <sys/sunddi.h>

int
doconversion(char *fromcode, char *tocode, char *inbuf, char *outbuf,
                size_t inlen, size_t *outlen)
{
        kiconv_t cd;
        size_t ileft, ret;
        int err;

        cd = kiconv_open((const char *)tocode, (const char *)fromcode);
        if (cd == (kiconv_t)-1) {
               /* Cannot open conversion. */
               return (-1);
        }

        ret = kiconv(cd, &inbuf, &inlen, &outbuf, outlen, &err);
        if (ret == (size_t)-1)
                goto doconv_error_return;

        /*
         * Reset the conversion descriptor. This will also
         * make sure to write to output buffer any saved bytes
         * in the conversion descriptor state.
         */
        ileft = 0;
        ret = kiconv(cd, (char *)NULL, &ileft, &outbuf, outlen, &err);
        if (ret == (size_t)-1)
                goto doconv_error_return;

        (void) kiconv_close(cd);

        return (0);

doconv_error_return:
        (void) kiconv_close(cd);

        /* Need more output buffer. */
        if (err == E2BIG)
                return (-2);

        /* Illegal sequence? */
        if (err == EILSEQ)
                return (-3);

        /* Incomplete character? */
        if (err == EINVAL)
                return (-4);

        /*
         * Bad code conversion descriptor or any other unknown error.
         */
        return (-5);
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR iconv (3C),
.BR iconv_close (3C),
.BR iconv_open (3C),
.BR u8_strcmp (3C),
.BR u8_textprep_str (3C),
.BR u8_validate (3C),
.BR uconv_u16tou32 (3C),
.BR uconv_u16tou8 (3C),
.BR uconv_u32tou16 (3C),
.BR uconv_u32tou8 (3C),
.BR uconv_u8tou16 (3C),
.BR uconv_u8tou32 (3C),
.BR attributes (5),
.BR kiconvstr (9F),
.BR kiconv_close (9F),
.BR kiconv_open (9F),
.BR u8_strcmp (9F),
.BR u8_textprep_str (9F),
.BR u8_validate (9F),
.BR uconv_u16tou32 (9F),
.BR uconv_u16tou8 (9F),
.BR uconv_u32tou16 (9F),
.BR uconv_u32tou8 (9F),
.BR uconv_u8tou16 (9F),
.BR uconv_u8tou32 (9F)
.sp
.LP
The Unicode Standard:
.sp
.LP
http://www.unicode.org/standard/standard.html
.SH NOTES
.sp
.LP
The
.BR iconv "(3C) man page also has a good example code that can be"
referenced.
