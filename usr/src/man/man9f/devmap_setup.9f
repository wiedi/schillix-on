'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH devmap_setup 9F "22 Jan 1997" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
devmap_setup, ddi_devmap_segmap \- set up a user mapping to device memory
using the devmap framework
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint\fR \fBdevmap_setup\fR(\fBdev_t\fR \fIdev\fR, \fBoffset_t\fR \fIoff\fR, \fBddi_as_handle_t\fR \fIas\fR,
     \fBcaddr_t *\fIaddrp\fR, \fBsize_t\fIlen\fR, \fBuint_t\fR \fIprot\fR, \fBuint_t\fR \fImaxprot\fR,
     \fBuint_t\fR \fIflags\fR, \fBcred_t *\fIcred\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_devmap_segmap\fR(\fBdev_t\fR \fIdev\fR, \fBoff_t\fR \fIoff\fR, \fBddi_as_handle_t\fR \fIas\fR,
     \fBcaddr_t *\fIaddrp\fR, \fBoff_t\fIlen\fR, \fBuint_t\fR \fIprot\fR, \fBuint_t\fR \fImaxprot\fR,
     \fBuint_t\fR \fIflags\fR, \fBcred_t *\fIcred\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I dev
.ad
.RS 12n
.rt
Device whose memory is to be mapped.
.RE

.sp
.ne 2
.mk
.na
.I off
.ad
.RS 12n
.rt
User offset within the logical device memory at which the mapping begins.
.RE

.sp
.ne 2
.mk
.na
.I as
.ad
.RS 12n
.rt
An opaque data structure that describes the address space into which the
device memory should be mapped.
.RE

.sp
.ne 2
.mk
.na
.I addrp
.ad
.RS 12n
.rt
Pointer to the starting address in the address space into which the device
memory should be mapped.
.RE

.sp
.ne 2
.mk
.na
.I len
.ad
.RS 12n
.rt
Length (in bytes) of the memory to be mapped.
.RE

.sp
.ne 2
.mk
.na
.I prot
.ad
.RS 12n
.rt
A bit field that specifies the protections. Some possible settings
combinations are:
.sp
.ne 2
.mk
.na
.B PROT_READ
.ad
.RS 15n
.rt
Read access is desired.
.RE

.sp
.ne 2
.mk
.na
.B PROT_WRITE
.ad
.RS 15n
.rt
Write access is desired.
.RE

.sp
.ne 2
.mk
.na
.B PROT_EXEC
.ad
.RS 15n
.rt
Execute access is desired.
.RE

.sp
.ne 2
.mk
.na
.B PROT_USER
.ad
.RS 15n
.rt
User-level access is desired (the mapping is being done as a result of a
.BR mmap (2)
system call).
.RE

.sp
.ne 2
.mk
.na
.B PROT_ALL
.ad
.RS 15n
.rt
All access is desired.
.RE

.RE

.sp
.ne 2
.mk
.na
.I maxprot
.ad
.RS 12n
.rt
Maximum protection flag possible for attempted mapping; the
.B PROT_WRITE
bit may be masked out if the user opened the special file
read-only.
.RE

.sp
.ne 2
.mk
.na
.I flags
.ad
.RS 12n
.rt
Flags indicating type of mapping. The following flags can be specified:
.sp
.ne 2
.mk
.na
.B MAP_PRIVATE
.ad
.RS 16n
.rt
Changes are private.
.RE

.sp
.ne 2
.mk
.na
.B MAP_SHARED
.ad
.RS 16n
.rt
Changes should be shared.
.RE

.sp
.ne 2
.mk
.na
.B MAP_FIXED
.ad
.RS 16n
.rt
The user specified an address in
.I *addrp
rather than letting the
system choose an address.
.RE

.RE

.sp
.ne 2
.mk
.na
.I cred
.ad
.RS 12n
.rt
Pointer to the user credential structure.
.RE

.SH DESCRIPTION
.sp
.LP
.B devmap_setup()
and
.B ddi_devmap_segmap()
allow device drivers to
use the devmap framework to set up user mappings to device memory.  The
devmap framework provides several advantages over the default device mapping
framework that is used by
.BR ddi_segmap "(9F) or"
.BR ddi_segmap_setup (9F).
Device drivers should use the devmap framework,
if the driver wants to:
.RS +4
.TP
.ie t \(bu
.el o
use an optimal MMU pagesize to minimize address translations,
.RE
.RS +4
.TP
.ie t \(bu
.el o
conserve kernel resources,
.RE
.RS +4
.TP
.ie t \(bu
.el o
receive callbacks to manage events on the mapping,
.RE
.RS +4
.TP
.ie t \(bu
.el o
export kernel memory to applications,
.RE
.RS +4
.TP
.ie t \(bu
.el o
set up device contexts for the user mapping if the device requires context
switching,
.RE
.RS +4
.TP
.ie t \(bu
.el o
assign device access attributes to the user mapping, or
.RE
.RS +4
.TP
.ie t \(bu
.el o
change the maximum protection for the mapping.
.RE
.sp
.LP
.B devmap_setup()
must be called in the
.BR segmap "(9E) entry point to"
establish the mapping for the application.
.B ddi_devmap_segmap()
can be
called in, or be used as, the \fBsegmap\fR(9E) entry point. The differences
between
.B devmap_setup()
and
.B ddi_devmap_segmap()
are in the data
type used for
.I off
and
.IR len .
.sp
.LP
When setting up the mapping,
.B devmap_setup()
and
.B ddi_devmap_segmap()
call the
.BR devmap "(9E) entry point to validate"
the range to be mapped. The
.BR devmap (9E)
entry point also translates the
logical offset (as seen by the application) to the corresponding physical
offset within the device address space. If the driver does not provide its
own
.BR devmap "(9E) entry point,"
.B EINVAL
will be returned to the
.BR mmap (2)
system call.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 12n
.rt
Successful completion.
.RE

.sp
.ne 2
.mk
.na
.B Non-zero
.ad
.RS 12n
.rt
An error occurred.  The return value of
.B devmap_setup()
and
.B ddi_devmap_segmap()
should be used directly in the
.BR segmap (9E)
entry point.
.RE

.SH CONTEXT
.sp
.LP
.B devmap_setup()
and
.B ddi_devmap_segmap()
can be called from user
or kernel context only.
.SH SEE ALSO
.sp
.LP
.BR mmap (2),
.BR devmap (9E),
.BR segmap (9E),
.BR ddi_segmap (9F),
.BR ddi_segmap_setup (9F),
.BR cb_ops (9S)
.sp
.LP
.I Writing Device Drivers
