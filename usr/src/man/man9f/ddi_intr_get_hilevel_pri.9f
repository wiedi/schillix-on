'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_intr_get_hilevel_pri 9F "07 Apr 2005" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_intr_get_hilevel_pri \- get minimum priority level for a high-level
interrupt
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/conf.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>

\fBint\fR \fBddi_intr_get_hilevel_pri\fR(\fBvoid\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH DESCRIPTION
.sp
.LP
Upon a successful return, the
.B ddi_intr_get_hilevel_pri()
function
returns the minimum priority level for a high-level interrupt. The return
priority value can be used to compare to other priority values, such as
those returned from \fBddi_intr_get_pri\fR(9F), to determine if a given
interrupt priority is a high-level interrupt.
.sp
.LP
High-level interrupts must be handled without using system services that
manipulate thread or process states, because such interrupts are not blocked
by the scheduler.
.sp
.LP
In addition, high-level interrupt handlers must take care to do a minimum
of work because they cannot be preempted.
.sp
.LP
A typical high-level interrupt handler puts data into a circular buffer and
schedule a soft interrupt by calling
.BR ddi_intr_trigger_softint() .
The
circular buffer can be protected by using a mutex that is properly
initialized for the interrupt handler.
.sp
.LP
The
.B ddi_intr_get_hilevel_pri()
function can be used before calling
.B ddi_intr_add_handler()
to help determine which type of interrupt
handler can be used. Most device drivers are designed with the knowledge
that supported devices always generate low level interrupts. On some
machines, however, interrupts are high-level above the scheduler level and
on other machines they are not. Devices such as those those using SBus
interrupts or VME bus level 6 or 7 interrupts must use the
.B ddi_intr_get_hilevel_pri()
function to test the type of interrupt
handler that can be used.
.SH RETURN VALUES
.sp
.LP
The
.B ddi_intr_get_hilevel_pri()
function returns the priority value
for a high-level interrupt.
.SH CONTEXT
.sp
.LP
The
.B ddi_intr_get_hilevel_pri()
function can be called from either
user or kernel non-interrupt context.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR attributes (5),
.BR ddi_intr_add_handler (9F),
.BR ddi_intr_alloc (9F),
.BR ddi_intr_enable (9F),
.BR ddi_intr_get_pri (9F),
.BR ddi_intr_trigger_softint (9F),
.BR mutex (9F)
.sp
.LP
.I Writing Device Drivers
