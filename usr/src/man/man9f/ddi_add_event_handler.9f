'\" te
.\" Copyright (c) 2003, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_add_event_handler 9F "62 Nov 2003" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_add_event_handler \- add an NDI event service callback handler
.SH SYNOPSIS
.LP
.nf
#include <sys/dditypes.h>
#include <sys/sunddi.h>

\fBint\fR \fBddi_add_event_handler\fR(\fBdev_info_t *\fIdip\fR, \fBddi_eventcookie_t\fR \fIcookie\fR,
     \fBvoid (*\fIhandler\fR)(dev_info_t *, ddi_eventcookie_t, void *, void *),
     \fBvoid *\fIarg\fR, \fBddi_registration_id_t *\fIid\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.BI "dev_info_t *" dip
.ad
.sp .6
.RS 4n
Device node registering the callback.
.RE

.sp
.ne 2
.mk
.na
.B ddi_eventcookie_t
.I cookie
.ad
.sp .6
.RS 4n
Cookie returned from call to
.BR ddi_get_eventcookie (9F).
.RE

.sp
.ne 2
.mk
.na
\fBvoid (*\fIhandler\fB)(dev_info_t *, ddi_eventcookie_t, void *, void *)\fR
.ad
.sp .6
.RS 4n
Callback handler responsible for handling an NDI event service
notification.
.RE

.sp
.ne 2
.mk
.na
.BI "void *" arg
.ad
.sp .6
.RS 4n
Pointer to opaque data supplied by the caller. Typically, this would be a
pointer to the driver's
.B softstate
structure.
.RE

.sp
.ne 2
.mk
.na
.BI "ddi_registration_id_t *" id
.ad
.sp .6
.RS 4n
Pointer to registration ID where a unique registration id will be returned.
Registration ID must be saved and used when calling
.BR ddi_remove_event_handler (9F)
to unregister a callback.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B ddi_add_event_handler()
function adds a callback handler to be
invoked in the face of the event specifed by
.IR cookie .
The process of
adding a callback handler is also known as subscribing to an event. Upon
successful subscription, the handler will be invoked by the system when the
event occurs. The handler can be unregistered by using
.BR ddi_remove_event_handler (9F).
.sp
.LP
An instance of a driver can register multiple handlers for an event or a
single handler for multiple events. Callback order is not defined and should
assumed to be random.
.sp
.LP
The routine handler will be invoked with the following arguments:
.sp
.ne 2
.mk
.na
.BI "dev_info_t *" dip
.ad
.RS 28n
.rt
Device node requesting the notification.
.RE

.sp
.ne 2
.mk
.na
.B ddi_eventcookie_t
.I cookie
.ad
.RS 28n
.rt
Structure describing event that occurred.
.RE

.sp
.ne 2
.mk
.na
.BI "void *" arg
.ad
.RS 28n
.rt
Opaque data pointer provided, by the driver, during callback
registration.
.RE

.sp
.ne 2
.mk
.na
.BI "void *" impl_data
.ad
.RS 28n
.rt
Pointer to event specific data defined by the framework which invokes the
callback function.
.RE

.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 15n
.rt
Callback handler registered successfully.
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 15n
.rt
Failed to register callback handler. Possible reasons include lack of
resources or a bad cookie.
.RE

.SH CONTEXT
.sp
.LP
The
.B ddi_add_event_handler()
and
.B handler()
function can be
called from user and kernel contexts only.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
\fBATTRIBUTE TYPE\fR\fBATTRIBUTE VALUE\fR
_
Stability LevelCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR attributes (5),
.BR ddi_get_eventcookie (9F),
.BR ddi_remove_event_handler (9F)
.sp
.LP
.I Writing Device Drivers
.SH NOTES
.sp
.LP
Drivers must remove all registered callback handlers for a device instance
by calling
.BR ddi_remove_event_handler (9F)
before detach completes.
