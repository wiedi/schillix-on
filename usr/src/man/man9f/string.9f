'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH string 9F "27 Feb 2009" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
string, strcasecmp, strncasecmp, strncat, strlcat, strchr, strrchr, strcmp,
strncmp, strcpy, strncpy, strlcpy, strfree, strspn, strdup, ddi_strdup,
strlen, strnlen \- string operations
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>

\fBint\fR \fBstrcasecmp\fR(\fBconst char *\fIs1\fR, \fBconst char *\fIs2\fR);
.fi

.LP
.nf
\fBint\fR \fBstrncasecmp\fR(\fBconst char *\fIs1\fR, \fBconst char *\fIs2\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBchar *\fBstrncat\fR(\fBchar *\fR \fIs1\fR, \fBconst char *\fR \fIs2\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBstrlcat\fR(\fBchar *\fIdst\fR, \fBconst char *\fIsrc\fR, \fBsize_t\fR \fIdstsize\fR);
.fi

.LP
.nf
\fBchar *\fBstrchr\fR(\fBconst char *\fIstr\fR, \fBint\fR \fIchr\fR);
.fi

.LP
.nf
\fBchar *\fBstrrchr\fR(\fBconst char *\fIstr\fR, \fBint\fR \fIchr\fR);
.fi

.LP
.nf
\fBint\fR \fBstrcmp\fR(\fBconst char *\fIs1\fR, \fBconst char *\fIs2\fR);
.fi

.LP
.nf
\fBint\fR \fBstrncmp\fR(\fBconst char *\fIs1\fR, \fBconst char *\fIs2\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBchar *\fBstrcpy\fR(\fBchar *\fR \fIdst\fR, \fBconst char *\fR \fIsrc\fR);
.fi

.LP
.nf
\fBchar *\fBstrncpy\fR(\fBchar *\fR \fIdst\fR, \fBconst char *\fR \fIsrc\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBstrlcpy\fR(\fBchar *\fIdst\fR, \fBconst char *\fIsrc\fR, \fBsize_t\fR \fIdstsize\fR);
.fi

.LP
.nf
\fBvoid\fR \fBstrfree\fR(\fBchar *\fIs\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBstrspn\fR(\fBconst char *\fIs1\fR, \fBconst char *\fIs2\fR);
.fi

.LP
.nf
\fBchar *\fBstrdup\fR(\fBconst char *\fIs1\fR);
.fi

.LP
.nf
\fBchar *\fBddi_strdup\fR(\fBconst char *\fIs1\fR, \fBint\fR \fIflag\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBstrlen\fR(\fBconst char *\fIs\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBstrnlen\fR(\fBconst char *\fIs\fR, \fBsize_t\fR \fIn\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH DESCRIPTION
.sp
.LP
The arguments
.IR s ,
.IR s1 ,
and
.I s2
point to strings (arrays of
characters terminated by a null character). The
.BR strcat() ,
.BR strncat() ,
.BR strlcat() ,
.BR strcpy() ,
.BR strncpy() ,
.BR strlcpy() ,
and \fBstrfree()\fR functions all alter their first
argument. Additionally, the
.B strcpy()
function does not check for
overflow of the array.
.SS "\fBstrcasecmp()\fR, \fBstrncasecmp()\fR"
.sp
.LP
The
.B strcasecmp()
and
.B strncasecmp()
functions are
case-insensitive versions of
.B strcmp()
and
.BR strncmp()
respectively, described below.  They assume the
.B ASCII
character set and
ignore differences in case when comparing lower and upper case characters.
.SS "\fBstrncat()\fR, \fBstrlcat()\fR"
.sp
.LP
The
.B strncat()
function appends at most
.I n
characters of string
.IR s2 ,
including the terminating null character, to the end of string
.IR s1 .
It returns a pointer to the null-terminated result. The initial
character of
.I s2
overrides the null character at the end of
.IR s1 .
If copying takes place between objects that overlap, the behavior of
\fBstrncat()\fRand \fBstrlcat()\fR is undefined.
.sp
.LP
The
.B strlcat()
function appends  at most
(\fIdstsize\fR-\fBstrlen\fR(\fIdst\fR)-1) characters of \fIsrc\fR to
\fIdst\fR (\fIdstsize\fR being the  size of the  string buffer
.IR dst ).
If
the string pointed to by
.I dst
contains a null-terminated string that
fits into
.I dstsize
bytes when
.B strlcat()
is called, the string
pointed to by
.I dst
will be a null-terminated string that fits in
\fIdstsize\fR bytes (including the terminating null character) when it
completes, and the initial character of
.I src
will override the null
character at  the end of
.IR dst .
If the string pointed to by
.I dst
is
longer than
.I dstsize
bytes when
.B strlcat()
is called, the string
pointed to by
.I dst
will not be changed. The function returns
\fBmin\fR{\fIdstsize\fR,\fBstrlen\fR(\fIdst\fR)}+\fBstrlen\fR(\fIsrc\fR).
Buffer overflow can be checked as follows:
.sp
.in +2
.nf
if (strlcat(dst, src, dstsize) >= dstsize)
        return \(mi1;
.fi
.in -2

.SS "\fBstrchr()\fR, \fBstrrchr()\fR"
.sp
.LP
The
.B strchr()
function returns a pointer to the first occurrence of
\fIc\fR (converted to a
.BR char )
in string
.IR s ,
or a null pointer if
\fIc\fR does not occur in the string. The \fBstrrchr()\fR function returns a
pointer to the last occurrence of
.IR c .
The null character terminating a
string is considered to be part of the string.
.SS "\fBstrcmp()\fR, \fBstrncmp()\fR"
.sp
.LP
The
.B strcmp()
function compares two strings byte-by-byte, according to
the ordering of your machine's character set.  The function returns an
integer greater than, equal to, or less than 0, if  the string pointed to by
\fIs1\fR is greater than, equal to, or less than the string pointed to by
\fIs2\fR respectively. The sign of a non-zero return value is determined  by
the sign of the difference between the values of the first pair of bytes that
differ in the strings being compared. The
.B strncmp()
function makes the
same comparison but looks at a maximum of
.I n
bytes. Bytes following a
null byte are not compared.
.SS "\fBstrcpy()\fR, \fBstrncpy()\fR, \fBstrlcpy()\fR"
.sp
.LP
The
.B strcpy()
function copies string
.I s2
to
.IR s1 ,
including
the terminating null character, stopping after the null character has been
copied. The
.B strncpy()
function copies exactly
.I n
bytes, truncating
\fIs2\fR or adding null characters to \fIs1\fR if necessary. The result will
not be null-terminated if the length of
.I s2
is
.I n
or more. Each
function returns
.IR s1 .
If copying takes place between objects that
overlap, the behavior of
.BR strcpy() ,
.BR strncpy() ,
and
.BR strlcpy()
is undefined.
.sp
.LP
The
.B strlcpy()
function copies  at most \fIdstsize\fR\(mi1 characters
(\fIdstsize\fR being the  size of the  string buffer
.IR dst )
from
\fIsrc\fR to
.IR dst ,
truncating
.I src
if necessary.  The result is
always null-terminated. The function returns \fBstrlen\fR(\fIsrc\fR). Buffer
overflow can be checked as follows:
.sp
.in +2
.nf
if (strlcpy(dst, src, dstsize) >= dstsize)
        return \(mi1;
.fi
.in -2

.SS "\fBstrfree()\fR"
.sp
.LP
The \fBstrfree()\fR function frees the memory associated with the string
pointed to by
.IR s .
This memory pointed to by
.I s
must be of size
\fBstrlen\fR(\fIs\fR)+1, and must have been allocated (either directly or
indirectly) by \fBkmem_alloc\fR(9F) or \fBkmem_zalloc\fR(9F).
.SS "\fBstrspn()\fR"
.sp
.LP
The
.B strspn()
function returns the length of the initial segment of
string
.I s1
that consists entirely of characters from string
.IR s2 .
.SS "\fBstrdup()\fR, \fBddi_strdup()\fR"
.sp
.LP
The
.B ddi_strdup()
function returns a pointer to a new string that is a
duplicate of the string pointed to by
.IR s1 .
The returned pointer can be
passed to \fBstrfree()\fR or \fBkmem_free\fR(9F). The space for the new
string is obtained using
.BR kmem_alloc() .
flag can be either
\fBKM_SLEEP\fR or
.BR KM_NOSLEEP ,
and determines whether the caller can
sleep for memory.
.B KM_SLEEP
allocations may sleep but are guaranteed to
succeed.
.B KM_NOSLEEP
allocations are guaranteed not to sleep but may
fail (return
.IR NULL )
if no memory is currently available.
.sp
.LP
The
.B strdup()
function behaves the same as the
.B ddi_strdup()
when
called with the
.B KM_SLEEP
flag. This means that
.B strdup()
can sleep
until memory is available and will always succeed.
.SS "\fBstrlen()\fR, \fBstrnlen()\fR"
.sp
.LP
The
.B strlen()
function returns the number of bytes in
.IR s ,
not
including the terminating null character.
.sp
.LP
The
.B strnlen()
function returns the smaller of
.I n
or the number of
bytes in
.IR s ,
not including the terminating null character. The
\fBstrnlen()\fR function never examines more than \fIn\fR bytes of the string
pointed to by
.IR s .
.SH CONTEXT
.sp
.LP
The
.B strdup()
and
.B ddi_strdup()
functions can be called from user
or kernel context.
.sp
.LP
The
.B ddi_strdup()
function can be called from interrupt context only if
the
.B KM_NOSLEEP
flag is set.
.sp
.LP
All the other string manipulation functions can be called from user,
interrupt, or kernel context.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR string (3C),
.BR attributes (5),
.BR bcopy (9F),
.BR ddi_copyin (9F),
.BR kmem_alloc (9F)
.sp
.LP
.I Writing Device Drivers
.SH NOTES
.sp
.LP
If copying takes place between objects that overlap, the behavior of
.BR strlcat() ,
.BR strncat() ,
.BR strcpy() ,
.BR strlcpy() ,
and
\fBstrncpy()\fR is undefined.
