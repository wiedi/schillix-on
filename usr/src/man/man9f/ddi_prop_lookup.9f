'\" te
.\" Copyright (c) 2001, Sun Microsystems, Inc., All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_prop_lookup 9F "11 Apr 2001" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_prop_lookup, ddi_prop_lookup_int_array, ddi_prop_lookup_int64_array,
ddi_prop_lookup_string_array, ddi_prop_lookup_string,
ddi_prop_lookup_byte_array, ddi_prop_free \- look up property information
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint\fR \fBddi_prop_lookup_int_array\fR(\fBdev_t\fR \fImatch_dev\fR, \fBdev_info_t *\fIdip\fR,
     \fBuint_t\fR \fIflags\fR, \fBchar *\fIname\fR, \fBint **\fIdatap\fR, \fBuint_t *\fInelementsp\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_prop_lookup_int64_array\fR(\fBdev_t\fR \fImatch_dev\fR, \fBdev_info_t *\fIdip\fR,
     \fBuint_t\fR \fIflags\fR, \fBchar *\fIname\fR, \fBint64_t **\fIdatap\fR, \fBuint_t *\fInelementsp\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_prop_lookup_string_array\fR(\fBdev_t\fR \fImatch_dev\fR, \fBdev_info_t *\fIdip\fR,
     \fBuint_t\fR \fIflags\fR, \fBchar *\fIname\fR, \fBchar ***\fIdatap\fR, \fBuint_t *\fInelementsp\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_prop_lookup_string\fR(\fBdev_t\fR \fImatch_dev\fR, \fBdev_info_t *\fIdip\fR, \fBuint_t\fR \fIflags\fR,
     \fBchar *\fIname\fR, \fBchar **\fIdatap\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_prop_lookup_byte_array\fR(\fBdev_t\fR \fImatch_dev\fR, \fBdev_info_t *\fIdip\fR,
     \fBuint_t\fR \fIflags\fR, \fBchar *\fIname\fR, \fBuchar_t **\fIdatap\fR, \fBuint_t *\fInelementsp\fR);
.fi

.LP
.nf
\fBvoid\fR \fBddi_prop_free\fR(\fBvoid *\fIdata\fR);
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I match_dev
.ad
.RS 14n
.rt
Device number associated with property or
.BR DDI_DEV_T_ANY.
.RE

.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 14n
.rt
Pointer to the device info node of device whose property list should be
searched.
.RE

.sp
.ne 2
.mk
.na
.I flags
.ad
.RS 14n
.rt
Possible flag values are some combination of:
.sp
.ne 2
.mk
.na
.B DDI_PROP_DONTPASS
.ad
.RS 21n
.rt
Do not pass request to parent device information node if the property is
not found.
.RE

.sp
.ne 2
.mk
.na
.B DDI_PROP_NOTPROM
.ad
.RS 21n
.rt
Do not look at
.B PROM
properties (ignored on platforms that do not
support
.B PROM
properties).
.RE

.RE

.sp
.ne 2
.mk
.na
.I name
.ad
.RS 14n
.rt
String containing the name of the property.
.RE

.sp
.ne 2
.mk
.na
.I nelementsp
.ad
.RS 14n
.rt
The address of an unsigned integer which, upon successful return, will
contain the number of elements accounted for in the memory pointed at by
.IR datap .
The elements are either integers, strings or bytes depending on
the interface used.
.RE

.sp
.ne 2
.mk
.na
.I datap
.ad
.RS 14n
.rt
.sp
.ne 2
.mk
.na
.B ddi_prop_lookup_int_array()
.ad
.sp .6
.RS 4n
The address of a pointer to an array of integers which, upon successful
return, will point to memory containing the integer array property value.
.RE

.sp
.ne 2
.mk
.na
.B ddi_prop_lookup_int64_array()
.ad
.sp .6
.RS 4n
The address of a pointer to an array of 64-bit integers which, upon
successful return, will point to memory containing the integer array
property value.
.RE

.sp
.ne 2
.mk
.na
.B ddi_prop_lookup_string_array()
.ad
.sp .6
.RS 4n
The address of a pointer to an array of strings which, upon successful
return, will point to memory containing the array of strings. The array of
strings is formatted as an array of pointers to
.B NULL
terminated
strings, much like the
.I argv
argument to
.BR execve (2).
.RE

.sp
.ne 2
.mk
.na
.B ddi_prop_lookup_string()
.ad
.sp .6
.RS 4n
The address of a pointer to a string which, upon successful return, will
point to memory containing the
.B NULL
terminated string value of the
property.
.RE

.sp
.ne 2
.mk
.na
.B ddi_prop_lookup_byte_array()
.ad
.sp .6
.RS 4n
The address of pointer to an array of bytes which, upon successful return,
will point to memory containing the byte array value of the property.
.RE

.RE

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH DESCRIPTION
.sp
.LP
The property look up routines search for and, if found, return the value of
a given property. Properties are searched for based on the
.IR dip ,
.IR name ,
.IR match_dev ,
and the type of the data (integer, string, or
byte). The property search order is as follows:
.RS +4
.TP
1.
Search software properties created by the driver.
.RE
.RS +4
.TP
2.
Search the software properties created by the system (or nexus nodes in the
device info tree).
.RE
.RS +4
.TP
3.
Search the driver global properties list.
.RE
.RS +4
.TP
4.
If
.B DDI_PROP_NOTPROM
is not set, search the
.B PROM
properties (if
they exist).
.RE
.RS +4
.TP
5.
If
.B DDI_PROP_DONTPASS
is not set, pass this request to the parent
device information node.
.RE
.RS +4
.TP
6.
Return
.BR DDI_PROP_NOT_FOUND .
.RE
.sp
.LP
Usually, the
.I match_dev
argument should be set to the actual device
number that this property is associated with. However, if the
.I match_dev
argument is
.BR DDI_DEV_T_ANY ,
the property look up
routines will match the request regardless of the actual
.I match_dev
the
property was created with. If a property was created with \fImatch_dev\fR
set to
.BR DDI_DEV_T_NONE ,
then the only way to look up this property is
with a
.I match_dev
set to
.BR DDI_DEV_T_ANY .
.B PROM
properties are
always created with
.I match_dev
set to
.BR DDI_DEV_T_NONE .
.sp
.LP
.I name
must always be set to the name of the property being looked
up.
.sp
.LP
For the routines
.BR ddi_prop_lookup_int_array() ,
.BR ddi_prop_lookup_int64_array() ,
.BR ddi_prop_lookup_string_array() ,
.BR ddi_prop_lookup_string() ,
and
.BR ddi_prop_lookup_byte_array() ,
.I datap
is the address of a pointer which, upon successful return, will
point to memory containing the value of the property. In each case
.I *datap
points to a different type of property value. See the
individual descriptions of the routines below for details on the different
return values.
.I nelementsp
is the address of an unsigned integer which,
upon successful return, will contain the number of integer, string or byte
elements accounted for in the memory pointed at by
.IR *datap .
.sp
.LP
All of the property look up routines may block to allocate memory needed to
hold the value of the property.
.sp
.LP
When a driver has obtained a property with any look up routine and is
finished with that property, it must be freed by calling
.BR ddi_prop_free() .
.B ddi_prop_free()
must be called with the address
of the allocated property. For instance, if one called
.B ddi_prop_lookup_int_array()
with
.I datap
set to the address of a
pointer to an integer,
.IR &my_int_ptr ,
then the companion free call would
be \fBddi_prop_free(\fImy_int_ptr\fB)\fR.
.sp
.ne 2
.mk
.na
.B ddi_prop_lookup_int_array()
.ad
.sp .6
.RS 4n
This routine searches for and returns an array of integer property values.
An array of integers is defined to
.I *nelementsp
number of 4 byte long
integer elements.
.I datap
should be set to the address of a pointer to
an array of integers which, upon successful return, will point to memory
containing the integer array value of the property.
.RE

.sp
.ne 2
.mk
.na
.B ddi_prop_lookup_int64_array()
.ad
.sp .6
.RS 4n
This routine searches for and returns an array of 64-bit integer property
values. The array is defined to be *\fInelementsp\fR number of \fBint64_t\fR
elements.
.I datap
should be set to the address of a pointer to an array
of \fBint64_t\fR's which, upon successful return, will point to memory
containing the integer array value of the property. This routine will not
search the PROM for 64-bit property values.
.RE

.sp
.ne 2
.mk
.na
.B ddi_prop_lookup_string_array()
.ad
.sp .6
.RS 4n
This routine searches for and returns a property that is an array of
strings.
.I datap
should be set to address of a pointer to an array of
strings which, upon successful return, will point to memory containing the
array of strings. The array of strings is formatted as an array of pointers
to null-terminated strings, much like the
.I argv
argument to
.BR execve (2).
.RE

.sp
.ne 2
.mk
.na
.B ddi_prop_lookup_string()
.ad
.sp .6
.RS 4n
This routine searches for and returns a property that is a null-terminated
string.
.I datap
should be set to the address of a pointer to string
which, upon successful return, will point to memory containing the string
value of the property.
.RE

.sp
.ne 2
.mk
.na
.B ddi_prop_lookup_byte_array()
.ad
.sp .6
.RS 4n
This routine searches for and returns a property that is an array of bytes.
.I datap
should be set to the address of a pointer to an array of bytes
which, upon successful return, will point to memory containing the byte
array value of the property.
.RE

.sp
.ne 2
.mk
.na
.B ddi_prop_free()
.ad
.sp .6
.RS 4n
Frees the resources associated with a property previously allocated using
.BR ddi_prop_lookup_int_array() ,
.BR ddi_prop_lookup_int64_array() ,
.BR ddi_prop_lookup_string_array() ,
.BR ddi_prop_lookup_string() ,
or
.BR ddi_prop_lookup_byte_array() .
.RE

.SH RETURN VALUES
.sp
.LP
The functions
.BR ddi_prop_lookup_int_array() ,
.BR ddi_prop_lookup_int64_array() ,
.BR ddi_prop_lookup_string_array() ,
.BR ddi_prop_lookup_string() ,
and
.BR ddi_prop_lookup_byte_array()
return the following values:
.sp
.ne 2
.mk
.na
.B DDI_PROP_SUCCESS
.ad
.RS 26n
.rt
Upon success.
.RE

.sp
.ne 2
.mk
.na
.B DDI_PROP_INVAL_ARG
.ad
.RS 26n
.rt
If an attempt is made to look up a property with
.I match_dev
equal to
.BR DDI_DEV_T_NONE ,
.I name
is
.B NULL
or
.I name
is the null
string.
.RE

.sp
.ne 2
.mk
.na
.B DDI_PROP_NOT_FOUND
.ad
.RS 26n
.rt
Property not found.
.RE

.sp
.ne 2
.mk
.na
.B DDI_PROP_UNDEFINED
.ad
.RS 26n
.rt
Property explicitly not defined (see \fBddi_prop_undefine\fR(9F)).
.RE

.sp
.ne 2
.mk
.na
.B DDI_PROP_CANNOT_DECODE
.ad
.RS 26n
.rt
The value of the property cannot be decoded.
.RE

.SH CONTEXT
.sp
.LP
These functions can be called from user or kernel context.
.SH EXAMPLES
.LP
.B Example 1
Using
.BR ddi_prop_lookup_int_array()
.sp
.LP
The following example demonstrates the use of
.BR ddi_prop_lookup_int_array() .

.sp
.in +2
.nf

int	*options;
int	noptions;

/*
 * Get the data associated with the integer "options" property
 * array, along with the number of option integers
 */
	if (ddi_prop_lookup_int_array(DDI_DEV_T_ANY, xx_dip, 0,
     "options", &options, &noptions) == DDI_PROP_SUCCESS) {
     /*
     * Do "our thing" with the options data from the property
     */
     xx_process_options(options, noptions);

     /*
      * Free the memory allocated for the property data
      */
     ddi_prop_free(options);
}
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR execve (2),
.BR ddi_prop_exists (9F),
.BR ddi_prop_get_int (9F),
.BR ddi_prop_remove (9F),
.BR ddi_prop_undefine (9F),
.BR ddi_prop_update (9F)
.sp
.LP
.I Writing Device Drivers
