'\" te
.\" Copyright (c) 1994, Sun Microsystems, Inc., All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH kstat_queue 9F "4 Apr 1994" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
kstat_queue, kstat_waitq_enter, kstat_waitq_exit, kstat_runq_enter,
kstat_runq_exit, kstat_waitq_to_runq, kstat_runq_back_to_waitq \- update I/O
kstat statistics
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/kstat.h>



\fBvoid\fR \fBkstat_waitq_enter\fR(\fBkstat_io_t *\fIkiop\fR);
.fi

.LP
.nf
\fBvoid\fR \fBkstat_waitq_exit\fR(\fBkstat_io_t *\fIkiop\fR);
.fi

.LP
.nf
\fBvoid\fR \fBkstat_runq_enter\fR(\fBkstat_io_t *\fIkiop\fR);
.fi

.LP
.nf
\fBvoid\fR \fBkstat_runq_exit\fR(\fBkstat_io_t *\fIkiop\fR);
.fi

.LP
.nf
\fBvoid\fR \fBkstat_waitq_to_runq\fR(\fBkstat_io_t *\fIkiop\fR);
.fi

.LP
.nf
\fBvoid\fR \fBkstat_runq_back_to_waitq\fR(\fBkstat_io_t *\fIkiop\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I kiop
.ad
.RS 9n
.rt
Pointer to a
.BR kstat_io "(9S) structure."
.RE

.SH DESCRIPTION
.sp
.LP
A large number of \fBI/O\fR subsystems have at least two basic "lists" (or
queues) of transactions they manage: one for transactions that have been
accepted for processing but for which processing has yet to begin, and one
for transactions which are actively being processed (but not done). For this
reason, two cumulative time statistics are kept: wait (pre-service) time,
and run (service) time.
.sp
.LP
The
.B kstat_queue()
family of functions manage these times based on the
transitions between the driver wait queue and run queue.
.sp
.ne 2
.mk
.na
.B kstat_waitq_enter()
.ad
.RS 30n
.rt
.B kstat_waitq_enter()
should be called when a request arrives and is
placed into a pre-service state (such as just prior to calling
.BR disksort (9F)).
.RE

.sp
.ne 2
.mk
.na
.B kstat_waitq_exit()
.ad
.RS 30n
.rt
.B kstat_waitq_exit()
should be used when a request is removed from its
.RB "pre-service state. (such as just prior to calling the driver's" " start"
routine).
.RE

.sp
.ne 2
.mk
.na
.B kstat_runq_enter()
.ad
.RS 30n
.rt
.B kstat_runq_enter()
is also called when a request is placed in its
service state (just prior to calling the driver's start routine, but after
.BR kstat_waitq_exit() ).
.RE

.sp
.ne 2
.mk
.na
.B kstat_runq_exit()
.ad
.RS 30n
.rt
.B kstat_runq_exit()
is used when a request is removed from its service
state (just prior to calling
.BR biodone (9F)).
.RE

.sp
.ne 2
.mk
.na
.B kstat_waitq_to_runq()
.ad
.RS 30n
.rt
.B kstat_waitq_to_runq()
transitions a request from the wait queue to
the run queue. This is useful wherever the driver would have normally done a
.B kstat_waitq_exit()
followed by a call to
.BR kstat_runq_enter() .
.RE

.sp
.ne 2
.mk
.na
.B kstat_runq_back_to_waitq()
.ad
.RS 30n
.rt
.B kstat_runq_back_to_waitq()
transitions a request from the run queue
back to the wait queue. This may be necessary in some cases (write
throttling is an example).
.RE

.SH RETURN VALUES
.sp
.LP
None.
.SH CONTEXT
.sp
.LP
.B kstat_create()
can be called from user or kernel context.
.SH WARNINGS
.sp
.LP
These transitions must be protected by holding the
.BR kstat 's
.BR ks_lock ,
and must be completely accurate (all transitions are
recorded). Forgetting a transition may, for example, make an idle disk
appear 100% busy.
.SH SEE ALSO
.sp
.LP
.BR biodone (9F),
.BR disksort (9F),
.BR kstat_create (9F),
.BR kstat_delete (9F),
.BR kstat_named_init (9F),
.BR kstat (9S),
.BR kstat_io (9S)
.sp
.LP
.I Writing Device Drivers
