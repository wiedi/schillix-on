'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH csx_GetStatus 9F "19 Jul 1996" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
csx_GetStatus \- return the current status of a PC Card and its socket
.SH SYNOPSIS
.LP
.nf
#include <sys/pccard.h>



\fBint32_t\fR \fBcsx_GetStatus\fR(\fBclient_handle_t\fR \fIch\fR, \fBget_status_t *\fIgs\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris
.B DDI
Specific (Solaris
.B DDI)
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I ch
.ad
.RS 7n
.rt
Client handle returned from
.BR csx_RegisterClient (9F).
.RE

.sp
.ne 2
.mk
.na
.I gs
.ad
.RS 7n
.rt
Pointer to a
.B get_status_t
structure.
.RE

.SH DESCRIPTION
.sp
.LP
This function returns the current status of a
.B PC
Card and its
socket.
.SH STRUCTURE MEMBERS
.sp
.LP
The structure members of
.B get_status_t
are:
.sp
.in +2
.nf
uint32_t     Socket;          /* socket number*/
uint32_t     CardState;       /* "live" card status for this client*/
uint32_t     SocketState;     /* latched socket values */
uint32_t     raw_CardState;   /* raw live card status */
.fi
.in -2

.sp
.LP
The fields are defined as follows:
.sp
.ne 2
.mk
.na
.B Socket
.ad
.RS 18n
.rt
Not used in Solaris, but for portability with other Card Services
implementations, it should be set to the logical socket number.
.RE

.sp
.ne 2
.mk
.na
.B CardState
.ad
.RS 18n
.rt
The
.B CardState
field is the bit-mapped output data returned from Card
Services. The bits identify what Card Services thinks the current state of
the installed
.B PC
Card is. The bits are:
.sp
.ne 2
.mk
.na
.B CS_STATUS_WRITE_PROTECTED
.ad
.sp .6
.RS 4n
Card is write protected
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_CARD_LOCKED
.ad
.sp .6
.RS 4n
Card is locked
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_EJECTION_REQUEST
.ad
.sp .6
.RS 4n
Ejection request in progress
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_INSERTION_REQUEST
.ad
.sp .6
.RS 4n
Insertion request in progress
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_BATTERY_DEAD
.ad
.sp .6
.RS 4n
Card battery is dead
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_BATTERY_DEAD
.ad
.sp .6
.RS 4n
Card battery is dead (\fBBVD1\fR)
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_BATTERY_LOW
.ad
.sp .6
.RS 4n
Card battery is low (\fBBVD2\fR)
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_CARD_READY
.ad
.sp .6
.RS 4n
Card is READY
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_CARD_INSERTED
.ad
.sp .6
.RS 4n
Card is inserted
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_REQ_ATTN
.ad
.sp .6
.RS 4n
Extended status attention request
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_RES_EVT1
.ad
.sp .6
.RS 4n
Extended status reserved event status
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_RES_EVT2
.ad
.sp .6
.RS 4n
Extended status reserved event status
.RE

.sp
.ne 2
.mk
.na
.B  CS_STATUS_RES_EVT3
.ad
.sp .6
.RS 4n
Extended status reserved event status
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_VCC_50
.ad
.sp .6
.RS 4n
5.0 Volts Vcc Indicated
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_VCC_33
.ad
.sp .6
.RS 4n
3.3 Volts Vcc Indicated
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_VCC_XX
.ad
.sp .6
.RS 4n
X.X Volts Vcc Indicated
.RE

The state of the
.B CS_STATUS_CARD_INSERTED
bit indicates whether the
.B PC
Card associated with this driver instance, not just any card, is
inserted in the socket. If an
.B I/O
card is installed in the specified
socket, card state is returned from the
.B PRR
(Pin Replacement Register)
and the
.B ESR
(Extended Status Register) (if present). If certain state
bits are not present in the
.B PRR
or
.BR ESR ,
a simulated state bit
value is returned as defined below:
.sp
.ne 2
.mk
.na
.B CS_STATUS_WRITE_PROTECTED
.ad
.RS 29n
.rt
Not write protected
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_BATTERY_DEAD
.ad
.RS 29n
.rt
Power good
.RE

.sp
.ne 2
.mk
.na
.B PCS_STATUS_BATTERY_LOW
.ad
.RS 29n
.rt
Power good
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_CARD_READY
.ad
.RS 29n
.rt
Ready
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_REQ_ATTN
.ad
.RS 29n
.rt
Not set
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_RES_EVT1
.ad
.RS 29n
.rt
Not set
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_RES_EVT2
.ad
.RS 29n
.rt
Not set
.RE

.sp
.ne 2
.mk
.na
.B CS_STATUS_RES_EVT3
.ad
.RS 29n
.rt
Not set
.RE

.RE

.sp
.ne 2
.mk
.na
.B SocketState
.ad
.RS 18n
.rt
The
.B SocketState
field is a bit-map of the current card and socket
state. The bits are:
.sp
.ne 2
.mk
.na
.B CS_SOCK_STATUS_WRITE_PROTECT_CHANGE
.ad
.sp .6
.RS 4n
Write Protect
.RE

.sp
.ne 2
.mk
.na
.B ECS_SOCK_STATUS_CARD_LOCK_CHANGE
.ad
.sp .6
.RS 4n
Card Lock Change
.RE

.sp
.ne 2
.mk
.na
.B CS_SOCK_STATUS_EJECTION_PENDING
.ad
.sp .6
.RS 4n
Ejection Request
.RE

.sp
.ne 2
.mk
.na
.B CS_SOCK_STATUS_INSERTION_PENDING
.ad
.sp .6
.RS 4n
Insertion Request
.RE

.sp
.ne 2
.mk
.na
.B CS_SOCK_STATUS_BATTERY_DEAD_CHANGE
.ad
.sp .6
.RS 4n
Battery Dead
.RE

.sp
.ne 2
.mk
.na
.B CS_SOCK_STATUS_BATTERY_LOW_CHANGE
.ad
.sp .6
.RS 4n
Battery Low
.RE

.sp
.ne 2
.mk
.na
.B CS_SOCK_STATUS_CARD_READY_CHANGE
.ad
.sp .6
.RS 4n
Ready Change
.RE

.sp
.ne 2
.mk
.na
.B CS_SOCK_STATUS_CARD_INSERTION_CHANGE
.ad
.sp .6
.RS 4n
Card is inserted
.sp
 The state reported in the SocketState field may be different from the state reported in the CardState field. Clients should normally depend only on the state reported in the CardState field.
.sp
The state reported in the
.B SocketState
field may be different from the
state reported in the
.B CardState
field. Clients should normally depend
only on the state reported in the
.B CardState
field.
.RE

.RE

.sp
.ne 2
.mk
.na
.B raw_CardState
.ad
.RS 18n
.rt
The
.B raw_CardState
field is a Solaris-specific extension that allows
the client to determine if any card is inserted in the socket. The bit
definitions in the
.B raw_CardState
field are identical to those in the
.B CardState
field with the exception that the
.B CS_STATUS_CARD_INSERTED
bit in the
.B raw_CardState
field is set
whenever any card is inserted into the socket.
.RE

.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B CS_SUCCESS
.ad
.RS 28n
.rt
Successful operation.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_HANDLE
.ad
.RS 28n
.rt
Client handle is invalid.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_SOCKET
.ad
.RS 28n
.rt
Error getting socket state.
.RE

.sp
.ne 2
.mk
.na
.B CS_UNSUPPORTED_FUNCTION
.ad
.RS 28n
.rt
No
.B PCMCIA
hardware installed.
.RE

.sp
.LP
.B CS_NO_CARD
will not be returned if there is no
.B PC
Card present
in the socket.
.SH CONTEXT
.sp
.LP
This function may be called from user or kernel context.
.SH SEE ALSO
.sp
.LP
.BR csx_RegisterClient (9F)
.sp
.LP
.I PC Card 95 Standard, PCMCIA/JEIDA
