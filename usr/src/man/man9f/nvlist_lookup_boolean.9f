'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH nvlist_lookup_boolean 9F "20 May 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
nvlist_lookup_boolean, nvlist_lookup_boolean_value, nvlist_lookup_byte,
nvlist_lookup_int8, nvlist_lookup_int16, nvlist_lookup_int32,
nvlist_lookup_int64, nvlist_lookup_uint8, nvlist_lookup_uint16,
nvlist_lookup_uint32, nvlist_lookup_uint64, nvlist_lookup_string,
nvlist_lookup_nvlist, nvlist_lookup_boolean_array, nvlist_lookup_byte_array,
nvlist_lookup_int8_array, nvlist_lookup_int16_array,
nvlist_lookup_int32_array, nvlist_lookup_int64_array,
nvlist_lookup_uint8_array, nvlist_lookup_uint16_array,
nvlist_lookup_uint32_array, nvlist_lookup_uint64_array,
nvlist_lookup_string_array, nvlist_lookup_nvlist_array, nvlist_lookup_pairs
\- match name and type indicated by the interface name and retrieve data
value
.SH SYNOPSIS
.LP
.nf
#include <sys/nvpair.h>

\fBint\fR \fBnvlist_lookup_boolean\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_boolean_value\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBboolean_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_byte\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuchar_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_int8\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBint8_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_uint8\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuint8_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_int16\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBint16_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_uint16\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuint16_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_int32\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBint32_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_uint32\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuint32_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_int64\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBint64_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_uint64\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuint64_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_string\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBchar **\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_nvlist\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBnvlist_t **\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_boolean_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBboolean_t **\fIval\fR, \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_byte_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuchar_t **\fIval\fR, \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_int8_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBint8_t **\fIval\fR, \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_uint8_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuint8_t **\fIval\fR, \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_int16_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBint16_t **\fIval\fR, \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_uint16_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuint16_t **\fIval\fR, \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_int32_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBint32_t **\fIval\fR, \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_uint32_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuint32_t **\fIval\fR, \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_int64_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBint64_t **\fIval\fR, \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_uint64_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuint64_t **\fIval\fR, \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_string_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBchar  ***\fIval\fR, \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_nvlist_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBnvlist_t ***\fIval\fR, \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_lookup_pairs\fR(\fBnvlist_t *\fInvl\fR, \fBint\fR \fIflag, .\|.\|.\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I nvl
.ad
.RS 9n
.rt
The list of name-value pairs
.RB ( nvlist_t )
to be processed.
.RE

.sp
.ne 2
.mk
.na
.I name
.ad
.RS 9n
.rt
Name of the name-value pair
.RB ( nvpair )
to search.
.RE

.sp
.ne 2
.mk
.na
.I nelem
.ad
.RS 9n
.rt
Address to store the number of elements in value.
.RE

.sp
.ne 2
.mk
.na
.I val
.ad
.RS 9n
.rt
Address to store the value or starting address of the array value.
.RE

.sp
.ne 2
.mk
.na
.I flag
.ad
.RS 9n
.rt
Specify bit fields defining lookup behavior:
.sp
.ne 2
.mk
.na
.B NV_FLAG_NOENTOK
.ad
.RS 19n
.rt
The retrival function will not fail if no matching name-value pair is
found.
.RE

.RE

.SH DESCRIPTION
.sp
.LP
These functions find the
.B nvpair
that matches the name and type as
indicated by the interface name. If one is found,
.I nelem
and
.IR val
are modified to contain the number of elements in value and the starting
address of data, respectively.
.sp
.LP
These interfaces work for
.B nvlist_t
allocated with
.B NV_UNIQUE_NAME
or
.B NV_UNIQUE_NAME_TYPE
specified in
.BR nvlist_alloc() .
See
.BR nvlist_alloc (9F).
If this is not the case,
the interface will return
.B ENOTSUP
because the list potentially
contains multiple
.BR nvpair "s with the same name and type."
.sp
.LP
Multiple threads can simultaneously read the same
.B nvlist_t
but only
one thread should actively change a given
.B nvlist_t
at a time. The
caller is responsible for the synchronization.
.sp
.LP
All memory required for storing the array elements, including string
values, are managed by the library. References to such data remain valid
until
.B nvlist_free()
is called on
.IR nvl .
.sp
.LP
The
.B nvlist_lookup_pairs()
function retrieves a set of
.BR nvpair s.
The arguments are a null-terminated list of pairs (data type
.BR DATA_TYPE_BOOLEAN ),
triples (non-array data types) or quads (array
data types). As shown below, the interpretation of the arguments depends on
the value of
.IR type .
See
.BR nvpair_type (9F).
.sp
.ne 2
.mk
.na
.I name
.ad
.RS 9n
.rt
Name of the name-value pair to search.
.RE

.sp
.ne 2
.mk
.na
.I type
.ad
.RS 9n
.rt
Data type.
.RE

.sp
.ne 2
.mk
.na
.I val
.ad
.RS 9n
.rt
Address to store the starting address of the value. When using data type
.BR DATA_TYPE_BOOLEAN ,
the
.I val
argument is ignored.
.RE

.sp
.ne 2
.mk
.na
.I nelem
.ad
.RS 9n
.rt
Address to store the number of elements in value. Non-array data types have
only one argument and
.I nelem
is ignored.
.RE

.sp
.LP
The argument order is
.IR name ,
\fItype\fR, [\fIval\fR], [\fInelem\fR].
.sp
.LP
When using
.B NV_FLAG_NOENTOK
and no matching name-value pair is found,
the memory pointed to by
.I val
and
.I nelem
is not touched.
.sp
.LP
These functions return
.B 0
on success and an error value on failure.
.SH ERRORS
.sp
.LP
These functions fail under the following conditions.
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 11n
.rt
Success
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 11n
.rt
Invalid argument
.RE

.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 11n
.rt
No matching name-value pair found
.RE

.sp
.ne 2
.mk
.na
.B ENOTSUP
.ad
.RS 11n
.rt
Encode/decode method not supported
.RE

.SH CONTEXT
.sp
.LP
These functions can be called from user, interrupt, or kernel context.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR nvlist_alloc (9F),
.BR nvpair_type (9F)
.sp
.LP
.I Writing Device Drivers
.sp
.LP
.I STREAMS Programming Guide
