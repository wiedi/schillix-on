'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH nvlist_alloc 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
nvlist_alloc, nvlist_free, nvlist_size, nvlist_pack, nvlist_unpack,
nvlist_dup, nv_alloc_init, nv_alloc_fini, nvlist_xalloc, nvlist_xpack,
nvlist_xunpack, nvlist_xdup, nvlist_merge \- Manage a name-value pair list
.SH SYNOPSIS
.LP
.nf
#include <sys/nvpair.h>

List Manipulation:

\fBint\fR \fBnvlist_alloc\fR(\fBnvlist_t **\fInvlp\fR, \fBuint_t\fR \fInvflag\fR,
     \fBint\fR \fIkmflag\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_xalloc\fR(\fBnvlist_t **\fInvlp\fR, \fBuint_t\fR \fInvflag\fR, \fBnv_alloc_t *\fInva\fR);
.fi

.LP
.nf
\fBvoid\fR \fBnvlist_free\fR(\fBnvlist_t *\fInvl\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_size\fR(\fBnvlist_t *\fInvl\fR, \fBsize_t *\fIsize\fR, \fBint\fR \fIencoding\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_pack\fR(\fBnvlist_t *\fInvl\fR, \fBchar **\fIbufp\fR, \fBsize_t *\fIbuflen\fR, \fBint\fR \fIencoding\fR,
     \fBint\fR \fIflag\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_xpack\fR(\fBnvlist_t *\fInvl\fR, \fBchar **\fIbufp\fR, \fBsize_t *\fIbuflen\fR, \fBint\fR \fIencoding\fR,
     \fBnv_alloc_t *\fInva\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_unpack\fR(\fBchar *\fIbuf\fR, \fBsize_t\fR \fIbuflen\fR, \fBnvlist_t **\fInvlp\fR, \fBint\fR \fIflag\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_xunpack\fR(\fBchar *\fIbuf\fR, \fBsize_t\fR \fIbuflen\fR, \fBnvlist_t **\fInvlp\fR,
     \fBnv_alloc_t *\fInva\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_dup\fR(\fBnvlist_t *\fInvl\fR, \fBnvlist_t **\fInvlp\fR, \fBint\fR \fIflag\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_xdup\fR(\fBnvlist_t *\fInvl\fR, \fBnvlist_t **\fInvlp\fR, \fBnv_alloc_t *\fInva\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_merge\fR(\fBnvlist_t *\fIdst\fR, \fBnvlist_t *\fInvl\fR, \fBint\fR \fIflag\fR);
.fi

.LP
.nf
Pluggable Allocator Configuration:

\fBnv_alloc_t *\fBnvlist_lookup_nv_alloc\fR(\fBnvlist_t *);\fR
.fi

.LP
.nf
\fBint\fR \fBnv_alloc_init\fR(\fBnv_alloc_t *\fInva\fR,
     \fBconst nv_alloc_ops_t *\fR \fInvo,\fR/* args */ .\|.\|.);
.fi

.LP
.nf
\fBvoid\fR  \fBnv_alloc_reset\fR(\fBnv_alloc_t  *\fInva\fR);
.fi

.LP
.nf
\fBvoid\fR  \fBnv_alloc_fini\fR(\fBnv_alloc_t *\fInva\fR);
.fi

.LP
.nf
Pluggable Allocation Initialization with Fixed Allocator:

\fBint\fR \fBnv_alloc_init\fR(\fBnv_alloc_t *\fInva\fR,
     \fBnv_fixed_ops\fR, \fBvoid *\fR \fIbufptr\fR,  \fBsize_t\fR sz);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I nvlp
.ad
.RS 12n
.rt
Address of a pointer to list of name-value pairs
.RB ( nvlist_t ).
.RE

.sp
.ne 2
.mk
.na
.I nvflag
.ad
.RS 12n
.rt
Specify bit fields defining
.B nvlist_t
properties:
.sp
.ne 2
.mk
.na
.B NV_UNIQUE_NAME
.ad
.RS 23n
.rt
.B nvpair
names are unique.
.RE

.sp
.ne 2
.mk
.na
.B NV_UNIQUE_NAME_TYPE
.ad
.RS 23n
.rt
Name-data type combination is unique
.RE

.RE

.sp
.ne 2
.mk
.na
.I kmflag
.ad
.RS 12n
.rt
Kernel memory allocation policy, either
.B KM_SLEEP
or
.BR KM_NOSLEEP .
.RE

.sp
.ne 2
.mk
.na
.I nvl
.ad
.RS 12n
.rt
.B nvlist_t
to be processed.
.RE

.sp
.ne 2
.mk
.na
.I dst
.ad
.RS 12n
.rt
Destination
.BR nvlist_t .
.RE

.sp
.ne 2
.mk
.na
.I size
.ad
.RS 12n
.rt
Pointer to buffer to contain the encoded size.
.RE

.sp
.ne 2
.mk
.na
.I bufp
.ad
.RS 12n
.rt
Address of buffer to pack
.B nvlist
into. Must be 8-byte aligned. If
NULL, library will allocate memory.
.RE

.sp
.ne 2
.mk
.na
.I buf
.ad
.RS 12n
.rt
Buffer containing packed
.BR nvlist_t .
.RE

.sp
.ne 2
.mk
.na
.I buflen
.ad
.RS 12n
.rt
Size of buffer \fIbufp\fR or \fIbuf\fR points to.
.RE

.sp
.ne 2
.mk
.na
.I encoding
.ad
.RS 12n
.rt
Encoding method for packing.
.RE

.sp
.ne 2
.mk
.na
.I nvo
.ad
.RS 12n
.rt
Pluggable allocator operations pointer (nv_alloc_ops_t).
.RE

.sp
.ne 2
.mk
.na
.I nva
.ad
.RS 12n
.rt
Points to a nv_alloc_t structure to be used for the specified
.BR nvlist_t .
.RE

.SH DESCRIPTION
.sp
.LP
List Manipulation:
.sp
.LP
The
.B nvlist_alloc()
function allocates a new name-value pair list and
updates
.I nvlp
to point to the handle. The argument \fInvflag\fR
specifies
.B nvlist_t
properties to remain persistent across packing,
unpacking, and duplication.
.sp
.LP
If
.B NV_UNIQUE_NAME
is specified for nvflag, existing nvpairs with
matching names are removed before the new nvpair is added. If
.B NV_UNIQUE_NAME_TYPE
is specified for nvflag, existing nvpairs with
matching names and data types are removed before the new nvpair is added.
See \fBnvlist_add_byte\fR(9F) for more details.
.sp
.LP
The
.B nvlist_xalloc()
function differs from
.B nvlist_alloc()
in
that
.B nvlist_xalloc()
can use a different allocator, as described in
the Pluggable Allocators section.
.sp
.LP
The
.B nvlist_free()
function frees a name-value pair list.
.sp
.LP
The
.B nvlist_size()
function returns the minimum size of a contiguous
buffer large enough to pack
.IR nvl .
The
.I encoding
parameter
specifies the method of encoding when packing
.IR nvl .
Supported encoding
methods are:
.sp
.ne 2
.mk
.na
.B NV_ENCODE_NATIVE
.ad
.RS 20n
.rt
Straight
.B bcopy()
as described in
.BR bcopy (9F).
.RE

.sp
.ne 2
.mk
.na
.B NV_ENCODE_XDR
.ad
.RS 20n
.rt
Use XDR encoding, suitable for sending to another host.
.RE

.sp
.LP
The
.B nvlist_pack()
function packs
.I nvl
into contiguous memory
starting at *\fIbufp\fR. The \fIencoding\fR parameter specifies the method
of encoding (see above).
.RS +4
.TP
.ie t \(bu
.el o
If *\fIbufp\fR is not NULL, *\fIbufp\fR is expected to be a
caller-allocated buffer of size *\fIbuflen\fR. The \fIkmflag\fR argument is
ignored.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If *\fIbufp\fR is NULL, the library allocates memory and updates
*\fIbufp\fR to point to the memory and updates *\fIbuflen\fR to contain the
size of the allocated memory. The value of
.I kmflag
indicates the memory
allocation policy
.RE
.sp
.LP
The
.B nvlist_xpack()
function differs from
.B nvlist_pack()
in that
.B nvlist_xpack()
can use a different allocator.
.sp
.LP
The
.B nvlist_unpack()
function takes a buffer with a packed
.B nvlist_t
and unpacks it into a searchable
.BR nvlist_t .
The library
allocates memory for
.BR nvlist_t .
The caller is responsible for freeing
the memory by calling
.BR nvlist_free() .
.sp
.LP
The
.B nvlist_xunpack()
function differs from
.B nvlist_unpack()
in
that
.B nvlist_xunpack()
can use a different allocator.
.sp
.LP
The
.B nvlist_dup()
function makes a copy of
.I nvl
and updates
.I nvlp
to point to the copy.
.sp
.LP
The
.B nvlist_xdup()
function differs from
.B nvlist_dup()
in that
.B nvlist_xdup()
can use a different allocator.
.sp
.LP
The
.B nvlist_merge()
function adds copies of all name-value pairs from
.B nvlist_t
.I nvl
to
.BR "nvlist_t dst" .
Name-value pairs in dst are
replaced with name-value pairs from
.B nvl
which have identical names (if
dst has the type
.BR NV_UNIQUE_NAME ),
or identical names and types (if dst
has the type
.BR NV_UNIQUE_NAME_TYPE ).
.sp
.LP
The
.B nvlist_lookup_nv_alloc()
function retrieves the pointer to the
allocator used when manipulating a name-value pair list.
.SS "PLUGGABLE ALLOCATORS"
.sp
.LP
Using Pluggable Allocators:
.sp
.LP
The
.BR nv_alloc_init() ,
.B nv_alloc_reset()
and \fBnv_alloc_fini()\fR
functions provide an interface that specifies the allocator to be used when
manipulating a name-value pair list.
.sp
.LP
The
.B nv_alloc_init()
determines allocator properties and puts them
into the
.I nva
argument. You need to specify the
.I nv_arg
argument,
the
.I nvo
argument and an optional variable argument list.  The optional
arguments are passed to the (*\fBnv_ao_init()\fR) function.
.sp
.LP
The
.I nva
argument must be passed to
.BR nvlist_xalloc() ,
.BR nvlist_xpack() ,
.B nvlist_xunpack()
and
.BR nvlist_xdup() .
.sp
.LP
The
.B nv_alloc_reset()
function resets the allocator properties to the
data specified by
.BR nv_alloc_init() .
When no (*\fBnv_ao_reset()\fR)
function is specified,
.B nv_alloc_reset()
is without effect.
.sp
.LP
The
.B nv_alloc_fini()
destroys the allocator properties determined by
.BR nv_alloc_init() .
When a (*\fBnv_ao_fini()\fR) routine is specified, it
is called from
.BR nv_alloc_fini() .
.sp
.LP
The disposition of the allocated objects and the memory used to store them
is left to the allocator implementation.
.sp
.LP
The `nv_alloc_sleep' and `nv_alloc_nosleep' nv_alloc_t pointers may be used
with nvlist_xalloc to mimic the behavior of nvlist_alloc with KM_SLEEP and
KM_NOSLEEP, respectively.
.sp
.in +2
.nf
o  nv_alloc_nosleep
o  nv_alloc_sleep
.fi
.in -2

.sp
.LP
The nvpair framework provides a fixed-buffer allocator, accessible via
nv_fixed_ops.
.sp
.in +2
.nf
o  nv_fixed_ops
.fi
.in -2

.sp
.LP
Given a buffer size and address, the fixed-buffer allocator allows for the
creation of nvlists in contexts where malloc or kmem_alloc services may not
be available. The fixed-buffer allocator is designed primarily to support
the creation of nvlists.
.sp
.LP
Memory freed using
.BR nvlist_free() ,
pair-removal, or similar routines
is not reclaimed.
.sp
.LP
When used to initialize the fixed-buffer allocator, nv_alloc_init should be
called as follows:
.sp
.in +2
.nf
int nv_alloc_init(nv_alloc_t *nva, const nv_alloc_ops_t *nvo,
    void *bufptr, size_t sz);
.fi
.in -2

.sp
.LP
When invoked on a fixed-buffer, the
.B nv_alloc_reset()
function resets
the fixed buffer and prepares it for re-use. The framework consumer is
responsible for freeing the buffer passed to
.BR nv_alloc_init() .
.SS "CREATING PLUGGABLE ALLOCATORS"
.sp
.LP
Any producer of name-value pairs may possibily specify his own allocator
routines. You must provide the following pluggable allocator operations in
the allocator implementation.
.sp
.in +2
.nf
int (*nv_ao_init)(nv_alloc_t *nva, va_list nv_valist);
void (*nv_ao_fini)(nv_alloc_t *nva);
void *(*nv_ao_alloc)(nv_alloc_t *nva, size_t sz);
void (*nv_ao_reset)(nv_alloc_t *nva);
void (*nv_ao_free)(nv_alloc_t *nva, void *buf, size_t sz);
.fi
.in -2

.sp
.LP
The
.I nva
argument of the allocator implementation is always the first
argument.
.sp
.LP
The optional (*\fBnv_ao_init()\fR ) function is responsible for filling the
data specified by
.B nv_alloc_init()
into the
.B nva_arg()
argument.
The (*\fBnv_ao_init()\fR) function is called only when \fBnv_alloc_init()\fR
is executed.
.sp
.LP
The optional (*\fBnv_ao_fini()\fR) function is responsible for the cleanup
of the allocator implementation. It is called by
.BR nv_alloc_fini() .
.sp
.LP
The required (*\fBnv_ao_alloc()\fR) function is used in the nvpair
allocation framework for memory allocation. The sz argument specifies the
size of the requested buffer.
.sp
.LP
The optional (*\fBnv_ao_reset()\fR) function is responsible for resetting
the nva_arg argument to the data specified by
.BR nv_alloc_init() .
.sp
.LP
The required (*\fBnv_ao_free()\fR) function is used in the nvpair allocator
framework for memory de-allocation. The argument buf is a pointer to a block
previously allocated by (*\fBnv_ao_alloc()\fR) function. The size argument
sz must exactly match the original allocation.
.sp
.LP
The disposition of the allocated objects and the memory used to store them
is left to the allocator implementation.
.SH RETURN VALUES
.sp
.LP
For
.BR nvlist_alloc() ,
.BR nvlist_dup() ,
.BR nvlist_xalloc() ,
and
.BR nvlist_xdup() :
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 10n
.rt
success
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
invalid argument
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
insufficient memory
.RE

.sp
.LP
For
.BR nvlist_pack() ,
.BR nvlist_unpack() ,
.BR nvlist_xpack() ,
and
.BR nvlist_xunpack() :
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 11n
.rt
success
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 11n
.rt
invalid argument
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 11n
.rt
insufficient memory
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 11n
.rt
encode/decode error
.RE

.sp
.ne 2
.mk
.na
.B ENOTSUP
.ad
.RS 11n
.rt
encode/decode method not supported
.RE

.sp
.LP
For
.BR nvlist_size() :
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 10n
.rt
success
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
invalid argument
.RE

.sp
.LP
For
.BR nvlist_lookup_nv_alloc() :
.sp
.LP
pointer to the allocator
.SH USAGE
.sp
.LP
The fixed-buffer allocator is very simple allocator. It uses a
pre-allocated buffer for memory allocations and it can be used in interrupt
context. You are responsible for allocation and de-allocation for the
pre-allocated buffer.
.SH EXAMPLES
.sp
.in +2
.nf
  /*
   * using the fixed-buffer allocator.
   */
   #include <sys/nvpair.h>

  /* initialize the nvpair allocator framework */
  static nv_alloc_t *
  init(char *buf, size_t size)
  {
       nv_alloc_t *nvap;

       if ((nvap = kmem_alloc(sizeof(nv_alloc_t), KM_SLEEP)) == NULL)
           return (NULL);

       if (nv_alloc_init(nvap, nv_fixed_ops, buf, size) == 0)
           return (nvap);

       return (NULL);
   }

   static void
   fini(nv_alloc_t *nvap)
   {
         nv_alloc_fini(nvap);
         kmem_free(nvap, sizeof(nv_alloc_t));
   }
    static int
    interrupt_context(nv_alloc_t *nva)
    {
       nvlist_t *nvl;
       int error;

       if ((error = nvlist_xalloc(&nvl, NV_UNIQUE_NAME, nva)) != 0)
            return (-1);

       if ((error = nvlist_add_int32(nvl, "name", 1234)) == 0)
            error = send_nvl(nvl);

       nvlist_free(nvl);
       return (error);
      }
.fi
.in -2

.SH CONTEXT
.sp
.LP
The
.BR nvlist_alloc() ,
.BR nvlist_pack() ,
.BR nvlist_unpack() ,
and
.B nvlist_dup()
functions can be called from interrupt context only if
the
.B KM_NOSLEEP
flag is set. They can be called from user context with
any valid flag.
.sp
.LP
The
.BR nvlist_xalloc() ,
.BR nvlist_xpack() ,
.BR nvlist_xunpack() ,
and
.B nvlist_xdup()
functions can be called from interrupt context only
if (1) the default allocator is used and the
.B KM_NOSLEEP
flag is set or
(2) the specified allocator did not sleep for free memory (for example, it
uses a pre-allocated buffer for memory allocations).
.sp
.LP
These functions can be called from user or kernel context with any valid
flag.
