'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH nvlist_add_boolean 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
nvlist_add_boolean, nvlist_add_boolean_value, nvlist_add_byte,
nvlist_add_int8, nvlist_add_uint8, nvlist_add_int16, nvlist_add_uint16,
nvlist_add_int32, nvlist_add_uint32, nvlist_add_int64, nvlist_add_uint64,
nvlist_add_string, nvlist_add_nvlist, nvlist_add_nvpair,
nvlist_add_boolean_array, nvlist_add_int8_array, nvlist_add_uint8_array,
nvlist_add_nvlist_array, nvlist_add_byte_array, nvlist_add_int16_array,
nvlist_add_uint16_array, nvlist_add_int32_array, nvlist_add_uint32_array,
nvlist_add_int64_array, nvlist_add_uint64_array, nvlist_add_string_array,
nvlist_t \- value pair functions
.SH SYNOPSIS
.LP
.nf
#include <sys/nvpair.h>

\fBint\fR \fBnvlist_add_boolean\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_boolean_value\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
      \fBboolean_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_byte\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR, \fBuchar_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int8\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR, \fBint8_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint8\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR, \fBuint8_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int16\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR, \fBint16_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint16\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR, \fBuint16_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int32\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR, \fBint32_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint32\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR, \fBuint32_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int64\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR, \fBint64_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint64\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR, \fBuint64_t\fR \fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_string\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR, \fBchar *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_nvlist\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR, \fBnvlist_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_nvpair\fR(\fBnvlist_t *\fInvl\fR, \fBnvpair_t *\fInvp\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_boolean_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBboolean_t *\fIval\fR, \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_byte_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR, \fBuchar_t *\fIval\fR,
     \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int8_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR, \fBint8_t *\fIval\fR,
     \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint8_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBuint8_t *\fIval\fR uint_t nelem);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int16_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR, \fBint16_t *\fIval\fR,
     \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint16_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR, \fBuint16_t *\fIval\fR,
     \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int32_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR, \fBint32_t *\fIval\fR,
     \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint32_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR, \fBuint32_t *\fIval\fR,
     \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_int64_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR, \fBint64_t *\fIval\fR,
     \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_uint64_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR, \fBuint64_t *\fIval\fR,
     \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_string_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBconst *char *\fIval\fR, \fBuint_t\fR \fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvlist_add_nvlist_array\fR(\fBnvlist_t *\fInvl\fR, \fBconst char *\fIname\fR,
     \fBnvlist_t **\fIval\fR, \fBuint_t\fR \fInelem\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I nvl
.ad
.RS 9n
.rt
The
.B nvlist_t
to be processed.
.RE

.sp
.ne 2
.mk
.na
.I nvp
.ad
.RS 9n
.rt
The
.B nvpair_t
(name-value pair) to be processed.
.RE

.sp
.ne 2
.mk
.na
.I name
.ad
.RS 9n
.rt
Name of the name-value pair
.RB ( nvpair ).
.RE

.sp
.ne 2
.mk
.na
.I nelem
.ad
.RS 9n
.rt
Number of elements in value (that is, array size).
.RE

.sp
.ne 2
.mk
.na
.I val
.ad
.RS 9n
.rt
Value or starting address of the array value.
.RE

.SH DESCRIPTION
.sp
.LP
These functions add a new name-value pair to an
.BR nvlist_t .
The memory
allocation policy follows that specified in
.BR nvlist_alloc() ,
.BR nvlist_unpack() ,
or
.BR nvlist_dup() .
See
.BR nvlist_alloc (9F).
The uniqueness of
.B nvpair
name and data types follows the \fInvflag\fR
argument specified in
.BR nvlist_alloc() .
.sp
.LP
If
.B NV_UNIQUE_NAME
was specified for
.IR nvflag ,
existing
\fBnvpair\fRs with matching names are removed before the new \fBnvpair\fR is
added.
.sp
.LP
If
.B NV_UNIQUE_NAME_TYPE
was specified for
.IR nvflag ,
existing
\fBnvpair\fRs with matching names and data types are removed before the new
.B nvpair
is added.
.sp
.LP
If neither was specified for
.IR nvflag ,
the new
.B nvpair
is
unconditionally added at the end of the list. The library preserves the
order of the name-value pairs across packing, unpacking, and duplication.
.sp
.LP
Multiple threads can simultaneously read the same nvlist_t, but only one
thread may actively change a given nvlist_t at a time. The caller is
responsible for the synchronization.
.sp
.LP
The
.B nvlist_add_boolean()
function is deprecated and the
.B nvlist_add_boolean_value()
function is used instead.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 10n
.rt
success
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
invalid argument
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
insufficient memory
.RE

.SH CONTEXT
.sp
.LP
These functions can be called from interrupt context only if (1) the
default allocator is used and the
.B KM_NOSLEEP
flag is set, or (2) the
specified allocator did not sleep for free memory (for example, if it uses a
pre-allocated buffer for memory allocations).
.sp
.LP
See \fBnvlist_alloc\fR(9F) for a description of pluggable allocators and
KM_NOSLEEP. These functions can be called from user or kernel context in all
cases.
