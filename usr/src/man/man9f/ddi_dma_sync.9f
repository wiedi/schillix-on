'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_dma_sync 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_dma_sync \- synchronize CPU and I/O views of memory
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>

\fBint\fR \fBddi_dma_sync\fR(\fBddi_dma_handle_t\fR \fIhandle\fR, \fBoff_t\fR \fIoffset\fR,
     \fBsize_t\fR \fIlength\fR, \fBuint_t\fR \fItype\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I handle
.ad
.RS 10n
.rt
The
.I handle
filled in by a call to
.BR ddi_dma_alloc_handle (9F).
.RE

.sp
.ne 2
.mk
.na
.I offset
.ad
.RS 10n
.rt
The offset into the object described by the
.IR handle .
.RE

.sp
.ne 2
.mk
.na
.I length
.ad
.RS 10n
.rt
The length, in bytes, of the area to synchronize. When
.I length
is
zero, the entire range starting from
.I offset
to the end of the object
has the requested operation applied to it.
.RE

.sp
.ne 2
.mk
.na
.I type
.ad
.RS 10n
.rt
Indicates the caller's desire about what view of the memory object to
synchronize. The possible values are
.BR DDI_DMA_SYNC_FORDEV ,
.B DDI_DMA_SYNC_FORCPU
and
.BR DDI_DMA_SYNC_FORKERNEL .
.RE

.SH DESCRIPTION
.sp
.LP
The
.B ddi_dma_sync()
function is used to selectively synchronize either
a
.B DMA
device's or a \fBCPU\fR's view of a memory object that has
.B DMA
resources allocated for I/O . This may involve operations such as
flushes of
.B CPU
or I/O caches, as well as other more complex operations
such as stalling until hardware write buffers have drained.
.sp
.LP
This function need only be called under certain circumstances. When
resources are allocated for
.B DMA
using
.B ddi_dma_addr_bind_handle()
or
.BR ddi_dma_buf_bind_handle() ,
an
implicit
.B ddi_dma_sync()
is done. When
.B DMA
resources are
deallocated using
.BR ddi_dma_unbind_handle "(9F), an implicit"
.B ddi_dma_sync()
is done. However, at any time between
.B DMA
resource allocation and deallocation, if the memory object has been modified
by either the
.B DMA
device or a
.B CPU
and you wish to ensure that
the change is noticed by the party that did
.B not
do the modifying, a
call to
.B ddi_dma_sync()
is required. This is true independent of any
attributes of the memory object including, but not limited to, whether or
not the memory was allocated for consistent mode I/O (see
.BR ddi_dma_mem_alloc (9F))
or whether or not
.B DMA
resources have
been allocated for consistent mode I/O (see
.BR ddi_dma_addr_bind_handle (9F)
or
.BR ddi_dma_buf_bind_handle (9F)).
.sp
.LP
If a consistent view of the memory object must be ensured between the time
.B DMA
resources are allocated for the object and the time they are
deallocated, you
.B must
call
.B ddi_dma_sync()
to ensure that either
a
.B CPU
or a
.B DMA
device has such a consistent view.
.sp
.LP
What to set
.B type
to depends on the view you are trying to ensure
consistency for. If the memory object is modified by a
.BR CPU ,
and the
object is going to be
.B read
by the
.B DMA
engine of the device, use
.BR DDI_DMA_SYNC_FORDEV .
This ensures that the device's
.B DMA
engine
sees any changes that a
.B CPU
has made to the memory object. If the
.B DMA
engine for the device has
.B written
to the memory object, and
you are going to
.B read
(with a
.BR CPU )
the object (using an extant
virtual address mapping that you have to the memory object), use
.BR DDI_DMA_SYNC_FORCPU .
This ensures that a \fBCPU\fR's view of the
memory object includes any changes made to the object by the device's
.B DMA
engine. If you are only interested in the kernel's view
(kernel-space part of the \fBCPU\fR's view) you may use
.BR DDI_DMA_SYNC_FORKERNEL .
This gives a hint to the system\(emthat is, if
it is more economical to synchronize the kernel's view only, then do so;
otherwise, synchronize for
.BR CPU .
.SH RETURN VALUES
.sp
.LP
The
.B ddi_dma_sync()
function returns:
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 15n
.rt
Caches are successfully flushed.
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 15n
.rt
The address range to be flushed is out of the address range established by
.BR ddi_dma_addr_bind_handle (9F)
or
.BR ddi_dma_buf_bind_handle (9F).
.RE

.SH CONTEXT
.sp
.LP
The
.B ddi_dma_sync()
function can be called from user, interrupt, or
kernel context.
.SH SEE ALSO
.sp
.LP
.BR ddi_dma_addr_bind_handle (9F),
.BR ddi_dma_alloc_handle (9F),
.BR ddi_dma_buf_bind_handle (9F),
.BR ddi_dma_mem_alloc (9F),
.BR ddi_dma_unbind_handle (9F)
.sp
.LP
.I Writing Device Drivers
