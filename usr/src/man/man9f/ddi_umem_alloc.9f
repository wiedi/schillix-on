'\" te
.\" Copyright (c) 2003, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_umem_alloc 9F "19 Mar 2002" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_umem_alloc, ddi_umem_free \- allocate and free page-aligned kernel
memory
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/sunddi.h>

\fBvoid *\fBddi_umem_alloc\fR(\fBsize_t\fR \fIsize\fR, \fBint\fR \fIflag\fR,
     \fBddi_umem_cookie_t *\fIcookiep\fR);
.fi

.LP
.nf
\fBvoid\fR \fBddi_umem_free\fR(\fBddi_umem_cookie_t\fR \fIcookie\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.SS "ddi_umem_alloc()"
.sp
.ne 2
.mk
.na
.I size
.ad
.RS 11n
.rt
Number of bytes to allocate.
.RE

.sp
.ne 2
.mk
.na
.I flag
.ad
.RS 11n
.rt
Used to determine the sleep and pageable conditions.
.sp
Possible sleep flags are
.BR DDI_UMEM_SLEEP ,
which allows sleeping until
memory is available, and
.BR DDI_UMEM_NOSLEEP ,
which returns
.BR NULL
immediately if memory is not available.
.sp
The default condition is to allocate locked memory; this can be changed to
allocate pageable memory using the
.B DDI_UMEM_PAGEABLE
flag.
.RE

.sp
.ne 2
.mk
.na
.I cookiep
.ad
.RS 11n
.rt
Pointer to a kernel memory cookie.
.RE

.SS "ddi_umem_free()"
.sp
.ne 2
.mk
.na
.I cookie
.ad
.RS 10n
.rt
A kernel memory cookie allocated in
.BR ddi_umem_alloc() .
.RE

.SH DESCRIPTION
.sp
.LP
.B ddi_umem_alloc()
allocates page-aligned kernel memory and returns a
pointer to the allocated memory. The number of bytes allocated is a multiple
of the system page size (roundup of
.IR size ).
The allocated memory can be
used in the kernel and can be exported to user space. See
.BR devmap (9E)
and
.BR devmap_umem_setup (9F)
for further information.
.sp
.LP
.I flag
determines whether the caller can sleep for memory and whether
the allocated memory is locked or not.
.B DDI_UMEM_SLEEP
allocations may
sleep but are guaranteed to succeed.
.B DDI_UMEM_NOSLEEP
allocations do
not sleep but may fail (return
.IR NULL )
if memory is currently
unavailable. If
.B DDI_UMEM_PAGEABLE
is set, pageable memory will be
allocated. These pages can be swapped out to secondary memory devices. The
initial contents of memory allocated using
.B ddi_umem_alloc()
is
zero-filled.
.sp
.LP
.I *cookiep
is a pointer to the kernel memory cookie that describes the
kernel memory being allocated. A typical use of
.I cookiep
is in
.BR devmap_umem_setup (9F)
when the drivers want to export the kernel
memory to a user application.
.sp
.LP
To free the allocated memory, a driver calls
.B ddi_umem_free()
with the
cookie obtained from
.BR ddi_umem_alloc() .
.B ddi_umem_free()
releases
the entire buffer.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B Non-null
.ad
.RS 12n
.rt
Successful completion.
.B ddi_umem_alloc()
returns a pointer to the
allocated memory.
.RE

.sp
.ne 2
.mk
.na
.B NULL
.ad
.RS 12n
.rt
Memory cannot be allocated by
.B ddi_umem_alloc()
because
.B DDI_UMEM_NOSLEEP
is set and the system is out of resources.
.RE

.SH CONTEXT
.sp
.LP
.B ddi_umem_alloc()
can be called from any context if
.I flag
is set
to
.B DDI_UMEM_NOSLEEP.
If
.B DDI_UMEM_SLEEP
is set,
.B ddi_umem_alloc()
can be called from user and kernel context only.
.B ddi_umem_free()
can be called from any context.
.SH SEE ALSO
.sp
.LP
.BR devmap (9E),
.BR condvar (9F),
.BR devmap_umem_setup (9F),
.BR kmem_alloc (9F),
.BR mutex (9F),
.BR rwlock (9F),
.BR semaphore (9F)

.sp
.LP
.I Writing Device Drivers
.SH WARNINGS
.sp
.LP
Setting the
.B DDI_UMEM_PAGEABLE
flag in
.B ddi_umem_alloc()
will
result in an allocation of pageable memory. Because these pages can be
swapped out to secondary memory devices, drivers should use this flag with
care. This memory must not be used for the following purposes:
.RS +4
.TP
.ie t \(bu
.el o
For synchronization objects such as locks and condition variables. See
.BR mutex (9F),
.BR semaphore (9F),
.BR rwlock (9F),
and
.BR condvar (9F).
.RE
.RS +4
.TP
.ie t \(bu
.el o
For driver interrupt routines.
.RE
.sp
.LP
Memory allocated using
.B ddi_umem_alloc()
without setting
.B DDI_UMEM_PAGEABLE
flag cannot be paged. Available memory is therefore
limited by the total physical memory on the system. It is also limited by
the available kernel virtual address space, which is often the more
restrictive constraint on large-memory configurations.
.sp
.LP
Excessive use of kernel memory is likely to effect overall system
performance. Over-commitment of kernel memory may cause unpredictable
consequences.
.sp
.LP
Misuse of the kernel memory allocator, such as writing past the end of a
buffer, using a buffer after freeing it, freeing a buffer twice, or freeing
an invalid pointer, will cause the system to corrupt data or panic.
.sp
.LP
Do not call
.B ddi_umem_alloc()
within
.B DDI_SUSPEND
and
.B DDI_RESUME
operations. Memory acquired at these times is not reliable.
In some cases, such a call can cause a system to hang.
.SH NOTES
.sp
.LP
\fBddi_umem_alloc(0,\fR \fIflag\fR, \fIcookiep\fB)\fR always returns
.B NULL. ddi_umem_free(NULL)
has no effects on system.
