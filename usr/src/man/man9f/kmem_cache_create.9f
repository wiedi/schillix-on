'\" te
.\" Copyright (c) 2002, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH kmem_cache_create 9F "24 Jun 2008" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
kmem_cache_create, kmem_cache_alloc, kmem_cache_free, kmem_cache_destroy,
kmem_cache_set_move \- kernel memory cache allocator operations
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/kmem.h>

\fBkmem_cache_t *\fBkmem_cache_create\fR(\fBchar *\fIname\fR, \fBsize_t\fR \fIbufsize\fR,
     \fBsize_t\fR \fIalign\fR, \fBint\fR (*\fIconstructor\fR)(void *, void *, int),
     \fBvoid\fR (*\fIdestructor\fR)(void *, void *), \fBvoid\fR (*\fIreclaim\fR)(void *),
     \fBvoid\fR *\fIprivate\fR, \fBvoid\fR *\fIvmp\fR, \fBint\fR \fIcflags\fR);
.fi

.LP
.nf
\fBvoid\fR \fBkmem_cache_destroy\fR(\fBkmem_cache_t\fR *\fIcp\fR);
.fi

.LP
.nf
\fBvoid *\fBkmem_cache_alloc\fR(\fBkmem_cache_t\fR *\fIcp\fR, \fBint\fR \fIkmflag\fR);
.fi

.LP
.nf
\fBvoid\fR \fBkmem_cache_free\fR(\fBkmem_cache_t\fR *\fIcp\fR, \fBvoid\fR *\fIobj\fR);
.fi

.LP
.nf
\fBvoid\fR \fBkmem_cache_set_move\fR(\fBkmem_cache_t\fR *\fIcp\fR, \fBkmem_cbrc_t\fR (*\fImove\fR)(\fBvoid\fR *,
     \fBvoid\fR *, \fBsize_t\fR *, \fBvoid\fR *));
.fi

.LP
.nf
 [Synopsis for callback functions:]
.fi

.LP
.nf
\fBint\fR (*\fIconstructor\fR)(\fBvoid\fR *\fIbuf\fR, \fBvoid\fR *\fIuser_arg\fR, \fBint\fR \fIkmflags\fR);
.fi

.LP
.nf
\fBvoid\fR (*\fIdestructor\fR)(\fBvoid\fR *\fIbuf\fR, \fBvoid\fR *\fIuser_arg\fR);
.fi

.LP
.nf
\fBkmem_cbrc_t\fR (*\fImove\fR)(\fBvoid\fR *\fIold\fR, \fBvoid\fR *\fInew\fR, \fBsize_t\fR \fIbufsize\fR,
     \fBvoid\fR *\fIuser_arg\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH PARAMETERS
.sp
.LP
The parameters for the
.B kmem_cache_*
functions are as follows:
.sp
.ne 2
.mk
.na
.I name
.ad
.RS 15n
.rt
Descriptive name of a \fBkstat\fR(9S) structure of class
.BR kmem_cache .
Names longer than 31 characters are truncated.
.RE

.sp
.ne 2
.mk
.na
\fIbufsize\fR
.ad
.RS 15n
.rt
Size of the objects it manages.
.RE

.sp
.ne 2
.mk
.na
.I align
.ad
.RS 15n
.rt
Required object alignment.
.RE

.sp
.ne 2
.mk
.na
.I constructor
.ad
.RS 15n
.rt
Pointer to an object constructor function. Parameters are defined below.
.RE

.sp
.ne 2
.mk
.na
.I destructor
.ad
.RS 15n
.rt
Pointer to an object destructor function. Parameters are defined below.
.RE

.sp
.ne 2
.mk
.na
.I reclaim
.ad
.RS 15n
.rt
Drivers should pass
.BR NULL .
.RE

.sp
.ne 2
.mk
.na
.I private
.ad
.RS 15n
.rt
Pass-through argument for constructor/destructor.
.RE

.sp
.ne 2
.mk
.na
.I vmp
.ad
.RS 15n
.rt
Drivers should pass
.BR NULL .
.RE

.sp
.ne 2
.mk
.na
\fIcflags\fR
.ad
.RS 15n
.rt
Drivers must pass 0.
.RE

.sp
.ne 2
.mk
.na
\fIkmflag\fR
.ad
.RS 15n
.rt
Possible flags are:
.sp
.ne 2
.mk
.na
.B KM_SLEEP
.ad
.RS 15n
.rt
Allow sleeping (blocking) until memory is available.
.RE

.sp
.ne 2
.mk
.na
.B KM_NOSLEEP
.ad
.RS 15n
.rt
Return NULL immediately if memory is not available.
.RE

.sp
.ne 2
.mk
.na
.B KM_PUSHPAGE
.ad
.RS 15n
.rt
Allow the allocation to use reserved memory.
.RE

.RE

.sp
.ne 2
.mk
.na
.I obj
.ad
.RS 15n
.rt
Pointer to the object allocated by
.BR kmem_cache_alloc() .
.RE

.sp
.ne 2
.mk
.na
.I move
.ad
.RS 15n
.rt
Pointer to an object relocation function. Parameters are defined below.
.RE

.sp
.LP
The parameters for the callback constructor function are as follows:
.sp
.ne 2
.mk
.na
\fBvoid *\fIbuf\fR
.ad
.RS 18n
.rt
Pointer to the object to be constructed.
.RE

.sp
.ne 2
.mk
.na
.BI "void *" user_arg
.ad
.RS 18n
.rt
The
.I private
parameter from the call to
.BR kmem_cache_create() ;
it
is typically a pointer to the soft-state structure.
.RE

.sp
.ne 2
.mk
.na
\fBint \fIkmflags\fR
.ad
.RS 18n
.rt
Propagated \fIkmflag\fR values.
.RE

.sp
.LP
The parameters for the callback destructor function are as follows:
.sp
.ne 2
.mk
.na
\fBvoid *\fIbuf\fR
.ad
.RS 18n
.rt
Pointer to the object to be deconstructed.
.RE

.sp
.ne 2
.mk
.na
.BI "void *" user_arg
.ad
.RS 18n
.rt
The
.I private
parameter from the call to
.BR kmem_cache_create() ;
it
is typically a pointer to the soft-state structure.
.RE

.sp
.LP
The parameters for the callback
.B move()
function are as follows:
.sp
.ne 2
.mk
.na
.BI "void *" old
.ad
.RS 18n
.rt
Pointer to the object to be moved.
.RE

.sp
.ne 2
.mk
.na
.BI "void *" new
.ad
.RS 18n
.rt
Pointer to the object that serves as the copy destination for the contents
of the old parameter.
.RE

.sp
.ne 2
.mk
.na
\fBsize_t \fIbufsize\fR
.ad
.RS 18n
.rt
Size of the object to be moved.
.RE

.sp
.ne 2
.mk
.na
.BI "void *" user_arg
.ad
.RS 18n
.rt
The private parameter from the call to
.BR kmem_cache_create() ;
it is
typically a pointer to the \fBsoft-state\fR structure.
.RE

.SH DESCRIPTION
.sp
.LP
In many cases, the cost of initializing and destroying an object exceeds
the cost of allocating and freeing memory for it. The functions described
here address this condition.
.sp
.LP
Object caching is a technique for dealing with objects that are:
.RS +4
.TP
.ie t \(bu
.el o
frequently allocated and freed, and
.RE
.RS +4
.TP
.ie t \(bu
.el o
have setup and initialization costs.
.RE
.sp
.LP
The idea is to allow the allocator and its clients to cooperate to preserve
the invariant portion of an object's initial state, or constructed state,
between uses, so it does not have to be destroyed and re-created every time
the object is used. For example, an object containing a mutex only needs to
have
.B mutex_init()
applied once, the first time the object is
allocated. The object can then be freed and reallocated many times without
incurring the expense of
.B mutex_destroy()
and
.B mutex_init()
each
time. An object's embedded locks, condition variables, reference counts,
lists of other objects, and read-only data all generally qualify as
constructed state. The essential requirement is that the client must free
the object (using
.BR kmem_cache_free() )
in its constructed state. The
allocator cannot enforce this, so programming errors will lead to
hard-to-find bugs.
.sp
.LP
A driver should call
.B kmem_cache_create()
at the time of
\fB_fini\fR(9E) or \fBattach\fR(9E), and call the corresponding
\fBkmem_cache_destroy()\fR at the time of \fB_fini\fR(9E) or
.BR detach (9E).
.sp
.LP
\fBkmem_cache_create()\fR creates a cache of objects, each of size
\fIbufsize\fR bytes, aligned on an \fIalign\fR boundary. Drivers not
requiring a specific alignment can pass 0.
.I name
identifies the cache
for statistics and debugging.
.I constructor
and
.I destructor
convert
plain memory into objects and back again;
.I constructor
can fail if it
needs to allocate memory but cannot.
.I private
is a parameter passed to
the constructor and destructor callbacks to support parameterized caches
(for example, a pointer to an instance of the driver's soft-state
structure). To facilitate debugging,
.B kmem_cache_create()
creates a
.BR kstat (9S)
structure of class
.B kmem_cache
and name
.IR name .
It
returns an opaque pointer to the object cache.
.sp
.LP
\fBkmem_cache_alloc()\fR gets an object from the cache. The object will be
in its constructed state. \fIkmflag\fR has either
.B KM_SLEEP
or
\fBKM_NOSLEEP\fR set, indicating whether it is acceptable to wait for memory
if none is currently available.
.sp
.LP
A small pool of reserved memory is available to allow the system to
progress toward the goal of freeing additional memory while in a low memory
situation. The
.B KM_PUSHPAGE
flag enables use of this reserved memory
pool on an allocation. This flag can be used by drivers that implement
.BR strategy (9E)
on memory allocations associated with a single I/O
operation. The driver guarantees that the I/O operation will complete (or
timeout) and, on completion, that the memory will be returned. The
\fBKM_PUSHPAGE\fR flag should be used only in \fBkmem_cache_alloc()\fR
calls. All allocations from a given cache should be consistent in their use
of the flag. A driver that adheres to these restrictions can guarantee
progress in a low memory situation without resorting to complex private
allocation and queuing schemes. If
.B KM_PUSHPAGE
is specified,
\fBKM_SLEEP\fR can also be used without causing deadlock.
.sp
.LP
\fBkmem_cache_free()\fR returns an object to the cache. The object must be
in its constructed state.
.sp
.LP
\fBkmem_cache_destroy()\fR destroys the cache and releases all associated
resources. All allocated objects must have been previously freed.
.sp
.LP
\fBkmem_cache_set_move()\fR registers a function that the allocator may
call to move objects from sparsely allocated pages of memory so that the
system can reclaim pages that are tied up by the client. Since caching
objects of the same size and type already makes severe memory fragmentation
unlikely, there is generally no need to register such a function. The idea
is to make it possible to limit worst-case fragmentation in caches that
exhibit a tendency to become highly fragmented. Only clients that allocate a
mix of long- and short-lived objects from the same cache are prone to
exhibit this tendency, making them candidates for a
.B move()
callback.
.sp
.LP
The
.B move()
callback supplies the client with two addresses: the
allocated object that the allocator wants to move and a buffer selected by
the allocator for the client to use as the copy destination. The new
parameter is an allocated, constructed object ready to receive the contents
of the old parameter. The \fIbufsize\fR parameter supplies the size of the
object, in case a single move function handles multiple caches whose objects
differ only in size. Finally, the private parameter passed to the
constructor and destructor is also passed to the
.B move()
callback.
.sp
.LP
Only the client knows about its own data and when it is a good time to move
it. The client cooperates with the allocator to return unused memory to the
system, and the allocator accepts this help at the client's convenience.
When asked to move an object, the client can respond with any of the
following:
.sp
.in +2
.nf
typedef enum kmem_cbrc {
             KMEM_CBRC_YES,
             KMEM_CBRC_NO,
             KMEM_CBRC_LATER,
             KMEM_CBRC_DONT_NEED,
             KMEM_CBRC_DONT_KNOW
} kmem_cbrc_t;
.fi
.in -2
.sp

.sp
.LP
The client must not explicitly free either of the objects passed to the
\fBmove()\fR callback, since the allocator wants to free them directly to
the slab layer (bypassing the per-CPU magazine layer). The response tells
the allocator which of the two object parameters to free:
.sp
.ne 2
.mk
.na
.B KMEM_CBRC_YES
.ad
.RS 23n
.rt
The client moved the object; the allocator frees the old parameter.
.RE

.sp
.ne 2
.mk
.na
.B KMEM_CBRC_NO
.ad
.RS 23n
.rt
The client refused to move the object; the allocator frees the new
parameter (the unused copy destination).
.RE

.sp
.ne 2
.mk
.na
.B KMEM_CBRC_LATER
.ad
.RS 23n
.rt
The client is using the object and cannot move it now; the allocator frees
the new parameter (the unused copy destination). The client should use
\fBKMEM_CBRC_LATER\fR instead of \fBKMEM_CBRC_NO\fR if the object is likely
to become movable soon.
.RE

.sp
.ne 2
.mk
.na
.B KMEM_CBRC_DONT_NEED
.ad
.RS 23n
.rt
The client no longer needs the object; the allocator frees both the old and
new parameters. This response is the client's opportunity to be a model
citizen and give back as much as it can.
.RE

.sp
.ne 2
.mk
.na
.B KMEM_CBRC_DONT_KNOW
.ad
.RS 23n
.rt
The client does not know about the object because:
.sp
.ne 2
.mk
.na
.B a)
.ad
.RS 6n
.rt
the client has just allocated the object and has not yet put it wherever it
expects to find known objects
.RE

.sp
.ne 2
.mk
.na
.B b)
.ad
.RS 6n
.rt
the client has removed the object from wherever it expects to find known
objects and is about to free the object
.RE

.sp
.ne 2
.mk
.na
.B c)
.ad
.RS 6n
.rt
the client has freed the object
.RE

In all of these cases above, the allocator frees the new parameter (the
unused copy destination) and searches for the old parameter in the magazine
layer. If the object is found, it is removed from the magazine layer and
freed to the slab layer so that it will no longer tie up an entire page of
memory.
.RE

.sp
.LP
Any object passed to the
.B move()
callback is guaranteed to have been
touched only by the allocator or by the client. Because memory patterns
applied by the allocator always set at least one of the two lowest order
bits, the bottom two bits of any pointer member (other than
.B "char *"
or
.BR "short *" ,
which may not be 8-byte aligned on all platforms) are
available to the client for marking cached objects that the client is about
to free. This way, the client can recognize known objects in the
\fBmove()\fR callback by the unmarked (valid) pointer value.
.sp
.LP
If the client refuses to move an object with either
.B KMEM_CBRC_NO
or
.BR KMEM_CBRC_LATER ,
and that object later becomes movable, the client can
notify the allocator by calling
.BR kmem_cache_move_notify() .
Alternatively, the client can simply wait for the allocator to call back
again with the same object address. Responding
.B KMEM_CRBC_NO
even once
or responding
.B KMEM_CRBC_LATER
too many times for the same object makes
the allocator less likely to call back again for that object.
.LP
.nf
[Synopsis for notification function:]
.fi

.LP
.nf
\fBvoid\fR \fBkmem_cache_move_notify\fR(\fBkmem_cache_t\fR *\fIcp\fR, \fBvoid\fR *\fIobj\fR);
.fi

.sp
.LP
The parameters for the \fBnotification\fR function are as follows:
.sp
.ne 2
.mk
.na
.I cp
.ad
.RS 7n
.rt
Pointer to the object cache.
.RE

.sp
.ne 2
.mk
.na
.I obj
.ad
.RS 7n
.rt
Pointer to the object that has become movable since an earlier refusal to
move it.
.RE

.SH CONTEXT
.sp
.LP
Constructors can be invoked during any call to
.BR kmem_cache_alloc() ,
and will run in that context. Similarly, destructors can be invoked during
any call to
.BR kmem_cache_free() ,
and can also be invoked during
.BR kmem_cache_destroy() .
Therefore, the functions that a constructor or
destructor invokes must be appropriate in that context. Furthermore, the
allocator may also call the constructor and destructor on objects still
under its control without client involvement.
.sp
.LP
\fBkmem_cache_create()\fR and \fBkmem_cache_destroy()\fR must not be called
from interrupt context.
.B kmem_cache_create()
can also block for
available memory.
.sp
.LP
\fBkmem_cache_alloc()\fR can be called from interrupt context only if the
\fBKM_NOSLEEP\fR flag is set. It can be called from user or kernel context
with any valid flag.
.sp
.LP
\fBkmem_cache_free()\fR can be called from user, kernel, or interrupt
context.
.sp
.LP
\fBkmem_cache_set_move()\fR is called from the same context as
.BR kmem_cache_create() ,
immediately after
.B kmem_cache_create()
and
before allocating any objects from the cache.
.sp
.LP
The registered
.B move()
callback is always invoked in the same global
callback thread dedicated for move requests, guaranteeing that no matter how
many clients register a
.B move()
function, the allocator never tries to
move more than one object at a time. Neither the allocator nor the client
can be assumed to know the object's whereabouts at the time of the
callback.
.SH EXAMPLES
.LP
\fBExample 1\fR Object Caching
.sp
.LP
Consider the following data structure:

.sp
.in +2
.nf
struct foo {
    kmutex_t foo_lock;
    kcondvar_t foo_cv;
    struct bar *foo_barlist;
    int foo_refcnt;
    };
.fi
.in -2

.sp
.LP
Assume that a \fBfoo\fR structure cannot be freed until there are no
outstanding references to it (\fBfoo_refcnt == 0\fR) and all of its pending
\fBbar\fR events (whatever they are) have completed (\fBfoo_barlist ==
NULL\fR). The life cycle of a dynamically allocated \fBfoo\fR would be
something like this:

.sp
.in +2
.nf
foo = kmem_alloc(sizeof (struct foo), KM_SLEEP);
mutex_init(&foo->foo_lock, .\|.\|.);
cv_init(&foo->foo_cv, .\|.\|.);
foo->foo_refcnt = 0;
foo->foo_barlist = NULL;
    use foo;
ASSERT(foo->foo_barlist == NULL);
ASSERT(foo->foo_refcnt == 0);
cv_destroy(&foo->foo_cv);
mutex_destroy(&foo->foo_lock);
kmem_free(foo);
.fi
.in -2

.sp
.LP
Notice that between each use of a \fBfoo\fR object we perform a sequence of
operations that constitutes nothing but expensive overhead. All of this
overhead (that is, everything other than \fBuse foo\fR above) can be
eliminated by object caching.

.sp
.in +2
.nf
int
foo_constructor(void *buf, void *arg, int tags)
{
    struct foo *foo = buf;
    mutex_init(&foo->foo_lock, .\|.\|.);
    cv_init(&foo->foo_cv, .\|.\|.);
    foo->foo_refcnt = 0;
    foo->foo_barlist = NULL;
    return (0);
}

void
foo_destructor(void *buf, void *arg)
{
    struct foo *foo = buf;
    ASSERT(foo->foo_barlist == NULL);
    ASSERT(foo->foo_refcnt == 0);
    cv_destroy(&foo->foo_cv);
    mutex_destroy(&foo->foo_lock);
}

user_arg = ddi_get_soft_state(foo_softc, instance);
(void) snprintf(buf, KSTAT_STRLEN, "foo%d_cache",
        ddi_get_instance(dip));
foo_cache = kmem_cache_create(buf,
        sizeof (struct foo), 0,
        foo_constructor, foo_destructor,
        NULL, user_arg, 0);
.fi
.in -2

.sp
.LP
To allocate, use, and free a \fBfoo\fR object:

.sp
.in +2
.nf
foo = kmem_cache_alloc(foo_cache, KM_SLEEP);
    use foo;
kmem_cache_free(foo_cache, foo);
.fi
.in -2

.sp
.LP
This makes \fBfoo\fR allocation fast, because the allocator will usually do
nothing more than fetch an already-constructed \fBfoo\fR from the cache.
\fBfoo_constructor\fR and \fBfoo_destructor\fR will be invoked only to
populate and drain the cache, respectively.

.LP
\fBExample 2\fR Registering a Move Callback
.sp
.LP
To register a
.B move()
callback:

.sp
.in +2
.nf
object_cache = kmem_cache_create(.\|.\|.);
kmem_cache_set_move(object_cache, object_move);
.fi
.in -2

.SH RETURN VALUES
.sp
.LP
If successful, the constructor function must return
.BR 0 .
If KM_NOSLEEP
is set and memory cannot be allocated without sleeping, the constructor must
return -\fB1\fR.
.sp
.LP
\fBkmem_cache_create()\fR returns a pointer to the allocated cache.
.sp
.LP
If successful,
.B kmem_cache_alloc()
returns a pointer to the allocated
object. If
.B KM_NOSLEEP
is set and memory cannot be allocated without
sleeping,
.B kmem_cache_alloc()
returns
.BR NULL .
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR condvar (9F),
.BR kmem_alloc (9F),
.BR mutex (9F),
.BR kstat (9S)
.sp
.LP
.I Writing Device Drivers
.sp
.LP
.IR "The Slab Allocator: An Object-Caching Kernel Memory Allocator" ,
Bonwick, J.; USENIX Summer 1994 Technical Conference (1994).
.sp
.LP
\fIMagazines and vmem: Extending the Slab Allocator to Many CPUs and
Arbitrary Resources\fR, Bonwick, J. and Adams, J.; USENIX 2001 Technical
Conference (2001).
.SH NOTES
.sp
.LP
The constructor must be immediately reversible by the destructor, since the
allocator may call the constructor and destructor on objects still under its
control at any time without client involvement.
.sp
.LP
The constructor must respect the \fIkmflags\fR argument by forwarding it to
allocations made inside the
.IR constructor ,
and must not ASSERT anything
about the given flags.
.sp
.LP
The user argument forwarded to the constructor must be fully operational
before it is passed to
.BR kmem_cache_create() .
