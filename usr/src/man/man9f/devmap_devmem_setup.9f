'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH devmap_devmem_setup 9F "05 Jun 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
devmap_devmem_setup, devmap_umem_setup \- set driver memory mapping
parameters
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint\fR \fBdevmap_devmem_setup\fR(\fBdevmap_cookie_t\fR \fIdhp\fR, \fBdev_info_t *\fIdip\fR,
     \fBstruct devmap_callback_ctl *\fIcallbackops\fR, \fBuint_t\fR \fIrnumber\fR,
     \fBoffset_t\fR \fIroff\fR,  \fBsize_t\fR \fIlen\fR, \fBuint_t\fR \fImaxprot\fR,
     \fBuint_t\fR \fIflags\fR, \fBddi_device_acc_attr_t *\fIaccattrp\fR);
.fi

.LP
.nf
\fBint\fR \fBdevmap_umem_setup\fR(\fBdevmap_cookie_t\fR \fIdhp\fR, \fBdev_info_t *\fIdip\fR,
     \fBstruct devmap_callback_ctl *\fIcallbackops\fR, \fBddi_umem_cookie_t\fR \fIcookie\fR,
     \fBoffset_t\fR \fIkoff\fR, \fBsize_t\fR \fIlen\fR, \fBuint_t\fR \fImaxprot\fR, \fBuint_t\fR \fIflags\fR,
     \fBddi_device_acc_attr_t *\fIaccattrp\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.LP
\fBdevmap_devmem_setup()\fR parameters:
.sp
.ne 2
.mk
.na
.I dhp
.ad
.RS 15n
.rt
An opaque mapping handle that the system uses to describe the mapping.
.RE

.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 15n
.rt
Pointer to the device's \fBdev_info\fR structure.
.RE

.sp
.ne 2
.mk
.na
.I callbackops
.ad
.RS 15n
.rt
Pointer to a
.BR devmap_callback_ctl "(9S) structure. The structure"
contains pointers to device driver-supplied functions that manage events on
the device mapping. The framework will copy the structure to the system
private memory.
.RE

.sp
.ne 2
.mk
.na
.I rnumber
.ad
.RS 15n
.rt
Index number to the register address space set.
.RE

.sp
.ne 2
.mk
.na
\fIroff\fR
.ad
.RS 15n
.rt
Offset into the register address space.
.RE

.sp
.ne 2
.mk
.na
.I len
.ad
.RS 15n
.rt
Length (in bytes) of the mapping to be mapped.
.RE

.sp
.ne 2
.mk
.na
.I maxprot
.ad
.RS 15n
.rt
Maximum protection flag possible for attempted mapping. Some combinations
of possible settings are:
.sp
.ne 2
.mk
.na
.B PROT_READ
.ad
.RS 14n
.rt
Read access is allowed.
.RE

.sp
.ne 2
.mk
.na
.B PROT_WRITE
.ad
.RS 14n
.rt
Write access is allowed.
.RE

.sp
.ne 2
.mk
.na
.B PROT_EXEC
.ad
.RS 14n
.rt
Execute access is allowed.
.RE

.sp
.ne 2
.mk
.na
.B PROT_USER
.ad
.RS 14n
.rt
User-level access is allowed. The mapping is done as a result of a
.BR mmap (2)
system call.
.RE

.sp
.ne 2
.mk
.na
.B PROT_ALL
.ad
.RS 14n
.rt
All access is allowed.
.RE

.RE

.sp
.ne 2
.mk
.na
\fIflags\fR
.ad
.RS 15n
.rt
Used to determine the cache attribute.
.sp
Possible values of the cache attribute are:
.sp
.ne 2
.mk
.na
.B IOMEM_DATA_CACHED
.ad
.RS 28n
.rt
The CPU can cache the data it fetches and push it to memory at a later
time. This is the default attribute that is used if no cache attributes are
specified.
.RE

.sp
.ne 2
.mk
.na
.B IOMEM_DATA_UC_WR_COMBINE
.ad
.RS 28n
.rt
The CPU never caches the data, but writes can occur out of order or can be
combined. Reordering is implied.
.sp
If
.B IOMEM_DATA_UC_WR_COMBINE
is specified but not supported,
\fBIOMEM_DATA_UNCACHED\fR is used instead.
.RE

.sp
.ne 2
.mk
.na
.B IOMEM_DATA_UNCACHED
.ad
.RS 28n
.rt
The CPU never caches data, but has uncacheable access to memory. Strict
ordering is implied.
.RE

The cache attributes are mutually exclusive. Any combination of the values
leads to a failure. On the SPARC architecture, only \fBIOMEM_DATA_CACHED\fR
is meaningful. Others lead to a failure.
.RE

.sp
.ne 2
.mk
.na
.I accattrp
.ad
.RS 15n
.rt
Pointer to a
.B ddi_device_acc_attr()
structure of the device. See
.BR ddi_device_acc_attr (9S).
The value in
.B devacc_attr_dataorder
is
ignored in the current release. The value in \fBdevacc_attr_endian_flags\fR
is meaningful on the SPARC architecture only.
.RE

.sp
.LP
\fBdevmap_umem_setup()\fR parameters:
.sp
.ne 2
.mk
.na
.I dhp
.ad
.RS 15n
.rt
An opaque data structure that the system uses to describe the mapping.
.RE

.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 15n
.rt
Pointer to the device's \fBdev_info\fR structure.
.RE

.sp
.ne 2
.mk
.na
.I callbackops
.ad
.RS 15n
.rt
Pointer to a
.BR devmap_callback_ctl "(9S) structure. The structure"
contains pointers to device driver-supplied functions that manage events on
the device mapping.
.RE

.sp
.ne 2
.mk
.na
.I cookie
.ad
.RS 15n
.rt
A kernel memory
.I cookie
(see
.BR ddi_umem_alloc (9F)).
.RE

.sp
.ne 2
.mk
.na
\fIkoff\fR
.ad
.RS 15n
.rt
Offset into the kernel memory defined by
.IR cookie .
.RE

.sp
.ne 2
.mk
.na
.I len
.ad
.RS 15n
.rt
Length (in bytes) of the mapping to be mapped.
.RE

.sp
.ne 2
.mk
.na
.I maxprot
.ad
.RS 15n
.rt
Maximum protection flag possible for attempted mapping. Some combinations
of possible settings are:
.sp
.ne 2
.mk
.na
.B PROT_READ
.ad
.RS 14n
.rt
Read access is allowed.
.RE

.sp
.ne 2
.mk
.na
.B PROT_WRITE
.ad
.RS 14n
.rt
Write access is allowed.
.RE

.sp
.ne 2
.mk
.na
.B PROT_EXEC
.ad
.RS 14n
.rt
Execute access is allowed.
.RE

.sp
.ne 2
.mk
.na
.B PROT_USER
.ad
.RS 14n
.rt
User-level access is allowed (the mapping is being done as a result of a
.BR mmap (2)
system call).
.RE

.sp
.ne 2
.mk
.na
.B PROT_ALL
.ad
.RS 14n
.rt
All access is allowed.
.RE

.RE

.sp
.ne 2
.mk
.na
\fIflags\fR
.ad
.RS 15n
.rt
Must be set to
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
.I accattrp
.ad
.RS 15n
.rt
Pointer to a
.BR ddi_device_acc_attr "(9S) structure. Ignored in the"
current release. Reserved for future use.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B devmap_devmem_setup()
and
.B devmap_umem_setup()
functions are
used in the \fBdevmap\fR(9E) entry point to pass mapping parameters from the
driver to the system.
.sp
.LP
The
.I dhp
argument specifies a device mapping handle that the system
uses to store all mapping parameters of a physical contiguous memory. The
system copies the data pointed to by
.I callbackops
to a system private
memory. This allows the driver to free the data after returning from either
\fBdevmap_devmem_setup()\fR or
.BR devmap_umem_setup() .
The driver is
notified of user events on the mappings via the entry points defined by
.BR devmap_callback_ctl (9S).
The driver is notified of the following user
events:
.sp
.ne 2
.mk
.na
.B Mapping Setup
.ad
.RS 17n
.rt
User has called
.BR mmap (2)
to create a mapping to the device memory.
.RE

.sp
.ne 2
.mk
.na
.B Access
.ad
.RS 17n
.rt
User has accessed an address in the mapping that has no translations.
.RE

.sp
.ne 2
.mk
.na
.B Duplication
.ad
.RS 17n
.rt
User has duplicated the mapping. Mappings are duplicated when the process
calls
.BR fork (2).
.RE

.sp
.ne 2
.mk
.na
.B Unmapping
.ad
.RS 17n
.rt
User has called
.BR munmap (2)
on the mapping or is exiting,
.BR exit (2).
.RE

.sp
.LP
See
.BR devmap_map (9E),
.BR devmap_access (9E),
.BR devmap_dup (9E),
and \fBdevmap_unmap\fR(9E) for details on these entry points.
.sp
.LP
By specifying a valid
.I callbackops
to the system, device drivers can
manage events on a device mapping. For example, the
.BR devmap_access (9E)
entry point allows the drivers to perform context switching by unloading the
mappings of other processes and to load the mapping of the calling process.
Device drivers may specify
.I NULL
to
.I callbackops
which means the
drivers do not want to be notified by the system.
.sp
.LP
The maximum protection allowed for the mapping is specified in
.IR maxprot .
\fIaccattrp\fR defines the device access attributes. See
.BR ddi_device_acc_attr (9S)
for more details.
.sp
.LP
\fBdevmap_devmem_setup()\fR is used for device memory to map in the
register set given by
.I rnumber
and the offset into the register address
space given by
.IR roff .
The system uses
.I rnumber
and
.I roff
to
go up the device tree to get the physical address that corresponds to
\fIroff\fR. The range to be affected is defined by \fIlen\fR and \fIroff\fR.
The range from \fIroff\fR to \fIroff +\fR
.I len
must be a physical
contiguous memory and page aligned.
.sp
.LP
Drivers use
.B devmap_umem_setup()
for kernel memory to map in the
kernel memory described by
.I cookie
and the offset into the kernel
memory space given by
.IR koff .
\fIcookie\fR is a kernel memory pointer
obtained from \fBddi_umem_alloc\fR(9F). If \fIcookie\fR is \fINULL,\fR
\fBdevmap_umem_setup()\fR returns \fB-1.\fR The range to be affected is
defined by
.I len
and
.IR koff .
The range from \fIkoff\fR to \fIkoff\fR
\fI+ len\fR must be within the limits of the kernel memory described
by \fIkoff +\fR
.I len
and must be page aligned.
.sp
.LP
Drivers use
.B devmap_umem_setup()
to export the kernel memory allocated
by
.BR ddi_umem_alloc "(9F) to user space. The system selects a user virtual"
address that is aligned with the kernel virtual address being mapped to
avoid cache incoherence if the mapping is not
.BR MAP_FIXED.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 6n
.rt
Successful completion.
.RE

.sp
.ne 2
.mk
.na
.B -1
.ad
.RS 6n
.rt
An error occurred.
.RE

.SH CONTEXT
.sp
.LP
\fBdevmap_devmem_setup()\fR and \fBdevmap_umem_setup()\fR can be called
from user, kernel, and interrupt context.
.SH SEE ALSO
.sp
.LP
.BR exit (2),
.BR fork (2),
.BR mmap (2),
.BR munmap (2),
.BR devmap (9E),
.BR ddi_umem_alloc (9F),
.BR ddi_device_acc_attr (9S),
.BR devmap_callback_ctl (9S)
.sp
.LP
.I Writing Device Drivers
