'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH priv_getbyname 9F "11 Mar 2004" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
priv_getbyname \- map a privilege name to a number
.SH SYNOPSIS
.LP
.nf
#include <sys/cred.h>



\fBint\fR \fBpriv_getbyname\fR(\fBconst char  *\fIpriv\fR, \fBint\fR \fIflags\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I priv
.ad
.RS 9n
.rt
name of the privilege
.RE

.sp
.ne 2
.mk
.na
.I flags
.ad
.RS 9n
.rt
flags, must be zero or \fBPRIV_ALLOC\fR
.RE

.SH DESCRIPTION
.sp
.LP
The
.B priv_getbyname()
function maps a privilege name to a privilege
number for use with the
.B priv_*()
kernel interfaces.
.sp
.LP
If
.B PRIV_ALLOC
is passed as a flag parameter, an attempt is made to
allocate a privilege if it is not yet defined. The newly allocated privilege
number is returned.
.sp
.LP
Privilege names can be specified with an optional
.B priv_
prefix, which
is stripped.
.sp
.LP
Privilege names are case insensitive but allocated privileges preserve
case.
.sp
.LP
Allocated privileges can be at most
.B {PRIVNAME_MAX}
characters long
and can contain only alphanumeric characters and the underscore character.
.SH RETURN VALUES
.sp
.LP
This function returns the privilege number, which is greater than or equal
to 0, if it succeeds. It returns a negative error number if an error
occurs.
.SH ERRORS
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 16n
.rt
This might be caused by any of the following
.RS +4
.TP
.ie t \(bu
.el o
The
.I flags
parameter is invalid.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The specified privilege does not exist.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The
.I priv
parameter contains invalid characters.
.RE
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 16n
.rt
There is no room to allocate another privilege.
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
An attempt was made to allocate a privilege that was longer than
.B {PRIVNAME_MAX}
characters.
.RE

.SH CONTEXT
.sp
.LP
This functions can be called from user and kernel contexts.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
\fBATTRIBUTE TYPE\fR\fBATTRIBUTE VALUE\fR
_
ArchitectureAll
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR attributes (5),
.BR privileges (5)
.sp
.LP
.I Writing Device Drivers
