'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc., All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH kiconvstr 9F "16 Oct 2007" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
kiconvstr \- string-based code conversion function
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/errno.h>
#include <sys/sunddi.h>



\fBsize_t\fR \fBkiconvstr\fR(\fBconst char *\fItocode\fR, \fBconst char *\fIfromcode\fR, \fBchar *\fIinarray\fR,
     \fBsize_t *\fIinlen\fR, \fBchar *\fIoutarray\fR, \fBsize_t *\fIoutlen\fR, \fBint\fR \fIflag\fR, \fBint *\fIerrno\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.LP
The parameters for the
.B kiconvstr
function are as follows:
.sp
.ne 2
.mk
.na
.I tocode
.ad
.RS 12n
.rt
Points to a target codeset name string. Supported names are specified at
.BR kiconv_open() .
.RE

.sp
.ne 2
.mk
.na
.I fromcode
.ad
.RS 12n
.rt
Points to a source codeset name string. Supported names are specified at
.BR kiconv_open() .
.RE

.sp
.ne 2
.mk
.na
.I inarray
.ad
.RS 12n
.rt
Points to a byte array containing a sequence of character bytes in
.I fromcode
codeset to be converted.
.RE

.sp
.ne 2
.mk
.na
.I inlen
.ad
.RS 12n
.rt
As an input parameter, the number of bytes to be converted in
.IR inarray .
As an output parameter, the number of bytes in \fIinarray\fR
still not converted after the conversion.
.RE

.sp
.ne 2
.mk
.na
.I outarray
.ad
.RS 12n
.rt
Points to a byte array where converted character bytes in
.IR tocode
codeset can be saved.
.RE

.sp
.ne 2
.mk
.na
.I outlen
.ad
.RS 12n
.rt
As an input parameter, the number of available bytes at \fIoutarray\fR
where converted character bytes can be saved. As an output parameter, the
number of bytes still available at
.I outarray
after the conversion.
.RE

.sp
.ne 2
.mk
.na
.I flag
.ad
.RS 12n
.rt
Indicates possible conversion options constructed by a bitwise-inclusive-OR
of the following values:
.sp
.ne 2
.mk
.na
.B KICONV_IGNORE_NULL
.ad
.sp .6
.RS 4n
Normally,
.B kiconvstr()
stops the conversion if it encounters
.B NULL
byte even if the current
.I inlen
is pointing to a value
larger than zero.
.sp
If this option is set, a
.B NULL
byte does not stop the conversion and
the conversion continues until the number of
.I inarray
bytes pointed by
.I inlen
are all consumed for conversion or an error happened.
.RE

.sp
.ne 2
.mk
.na
.B KICONV_REPLACE_INVALID
.ad
.sp .6
.RS 4n
Normally,
.B kiconvstr()
stops the conversion if it encounters illegal
or incomplete characters with corresponding
.I errno
values.
.sp
If this option is set,
.B kiconvstr()
does not stop the conversion and
instead treats such characters as non-identical conversion cases.
.RE

.RE

.sp
.ne 2
.mk
.na
.I errno
.ad
.RS 12n
.rt
Indicates the error when conversion is not completed or failed. The
following are possible values:
.sp
.ne 2
.mk
.na
.B EILSEQ
.ad
.RS 13n
.rt
The input conversion was stopped due to an input byte that does not belong
to the input codeset.
.RE

.sp
.ne 2
.mk
.na
.B E2BIG
.ad
.RS 13n
.rt
The input conversion was stopped due to lack of space in the output
array.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 13n
.rt
The input conversion was stopped due to an incomplete character or shift
sequence at the end of the input array.
.RE

.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 13n
.rt
The requested conversion is not supported.
.RE

.RE

.SH DESCRIPTION
.sp
.LP
The
.B kiconvstr()
function converts the sequence of characters from one
.BR codeset ,
in the array specified by
.IR inarray ,
into a sequence of
corresponding characters in another
.BR codeset ,
in the array specified by
.IR outarray .
The
.B codesets
are those specified in
.I fromcode
and
.I tocode
parameters. The
.I inarray
parameter points to a character
byte array to the first character in the input array and
.IR inlen
indicates the number of bytes to the end of the array to be converted. The
.I outarray
parameter points to a character byte array to the first
available byte in the output array and
.I outlen
indicates the number of
the available bytes to the end of the array. Unless \fBKICONV_IGNORE_NULL\fR
is specified at flag,
.B kiconvstr()
function normally stops when it
encounters
.B NULL
byte from the input array regardless of the current
.I inlen
value.
.sp
.LP
If
.B KICONV_REPLACE_INVALID
is not specified at flag and if a sequence
of input bytes does not form a valid character in the specified codeset,
conversion stops after the previous successfully converted character. If
.B KICONV_REPLACE_INVALID
is not specified in
.I flag
and if the input
array ends with an incomplete character or shift sequence, conversion stops
after the previous successfully converted bytes. If the output array is not
large enough to hold the entire converted input, conversion stops just prior
to the input bytes that would cause the output array to overflow. The value
pointed to by
.I inlen
is decremented to reflect the number of bytes
.RI "still not converted in the input array. The value pointed to by" " outlen"
is decremented to reflect the number of bytes still available in the output
array.
.sp
.LP
If
.B kiconvstr()
encounters a character in the input array that is
legal, but for which an identical character does not exist in the target
.BR codeset ,
.B kiconvstr()
performs an implementation-defined
conversion (that is, a non-identical conversion) on this character.
.sp
.LP
If
.B KICONV_REPLACE_INVALID
is specified in
.I flag
and if
.B kiconvstr()
encounters illegal or incomplete characters in the input
array, instead of stopping the conversion,
.B kiconvstr()
treats such
characters as if they are non-identical characters and does non-identical
conversions on such character bytes.
.SH RETURN VALUES
.sp
.LP
The
.B kiconvstr()
function updates the values pointed to by the
.I inlen
and
.I outlen
parameters to reflect the extent of the
conversion and returns the number of non-identical conversions performed. If
the entire string in the input array is converted, the value pointed to by
.I inlen
is 0. If the input conversion is stopped due to any conditions
mentioned above, the value pointed to by
.I inlen
is non-zero and
.I errno
is set to indicate the condition. If an error occurs,
.B kiconvstr()
returns (\fBsize_t\fR)-1 and sets
.I errno
to indicate
the error.
.SH CONTEXT
.sp
.LP
.B kiconvstr()
can be called from user or interrupt context.
.SH EXAMPLES
.LP
.B Example 1
Performing a Code Conversion
.sp
.LP
The following example converts a \fBNULL\fR-terminated \fBISO8859-2\fR
pathname string to a
.B UTF-8
string and treats illegal and incomplete
characters as non-identical conversion cases. The conversion does not stop
even if it encounters a
.B NULL
byte from the input array.

.sp
.in +2
.nf
#include <sys/types.h>
#include <sys/errno.h>
#include <sys/sunddi.h>

        :

size_t ret;
char ib[MAXPATHLEN];
char ob[MAXPATHLEN];
size_t il, ol;
int err;

        :

/*
 * We got the pathname from somewhere.
 *
 * Calculate the length of input string including the terminating
 * NULL byte and prepare other parameters for the conversion.
 */
(void) strlcpy(ib, pathname, MAXPATHLEN);
il = strlen(ib) + 1;
ol = MAXPATHLEN;

/*
 * Do the conversion. If the ret > 0, that's the number of
 * non-identical character conversions happened during the conversion.
 * Regardless of whether we have conversion failure or not,
 * outarray could contain some converted characters.
 */
ret = kiconvstr("UTF-8", "ISO-8859-2", ib, &il, ob, &ol,
                (KICONV_IGNORE_NULL|KICONV_REPLACE_INVALID), &err);
if (ret == (size_t)-1) {
        /* Code conversion not supported? */
        if (err == EBADF)
                return (-1);

        /* Output array too small? */
        if (err == E2BIG)
                return (-2);

        /* Unknown error which isn't possible BTW. */
        return (-3);
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR iconv (3C),
.BR iconv_close (3C),
.BR iconv_open (3C),
.BR u8_strcmp (3C),
.BR u8_textprep_str (3C),
.BR u8_validate (3C),
.BR uconv_u16tou32 (3C),
.BR uconv_u16tou8 (3C),
.BR uconv_u32tou16 (3C),
.BR uconv_u32tou8 (3C),
.BR uconv_u8tou16 (3C),
.BR uconv_u8tou32 (3C),
.BR attributes (5),
.BR kiconv (9F),
.BR kiconv_close (9F),
.BR kiconv_open (9F),
.BR u8_strcmp (9F),
.BR u8_textprep_str (9F),
.BR u8_validate (9F),
.BR uconv_u16tou32 (9F),
.BR uconv_u16tou8 (9F),
.BR uconv_u32tou16 (9F),
.BR uconv_u32tou8 (9F),
.BR uconv_u8tou16 (9F),
.BR uconv_u8tou32 (9F)
.sp
.LP
The Unicode Standard:
.sp
.LP
http://www.unicode.org/standard/standard.html
