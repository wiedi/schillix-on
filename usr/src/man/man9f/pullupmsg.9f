'\" te
.\" Copyright 1989 AT&T
.\" Copyright (c) 2006, Sun Microsystems, Inc.,  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH pullupmsg 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
pullupmsg \- concatenate bytes in a message
.SH SYNOPSIS
.LP
.nf
#include <sys/stream.h>



\fBint\fR \fBpullupmsg\fR(\fBmblk_t *\fImp\fR, \fBssize_t\fR \fIlen\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Architecture independent level 1 (DDI/DKI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I mp
.ad
.RS 7n
.rt
Pointer to the message whose blocks are to be concatenated.
.B mblk_t
is
an instance of the
.BR msgb "(9S) structure."
.RE

.sp
.ne 2
.mk
.na
.I len
.ad
.RS 7n
.rt
Number of bytes to concatenate.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B pullupmsg()
function tries to combine multiple data blocks into a
single block.
.B pullupmsg()
concatenates and aligns the first
.IR len
data bytes of the message pointed to by
.IR mp .
If
.I len
equals
.BR -1 ,
all data are concatenated. If
.I len
bytes of the same message
type cannot be found,
.B pullupmsg()
fails and returns
.BR 0 .
.SH RETURN VALUES
.sp
.LP
On success,
.B 1
is returned; on failure,
.B 0
is returned.
.SH CONTEXT
.sp
.LP
The
.B pullupmsg()
function can be called from user, interrupt, or
kernel context.
.SH EXAMPLES
.LP
.B Example 1
Using
.BR pullupmsg()
.sp
.LP
This is a driver write \fBsrv\fR(9E) (service) routine for a device that
does not support scatter/gather
.BR DMA .
For all
.B M_DATA
messages,
the data will be transferred to the device with
.BR DMA .
First, try to
pull up the message into one message block with the
.BR pullupmsg()
function (line 12). If successful, the transfer can be accomplished in one
.B DMA
job. Otherwise, it must be done one message block at a time (lines
19-22). After the data has been transferred to the device, free the message
and continue processing messages on the queue.

.sp
.in +2
.nf

 1 xxxwsrv(q)
 2    queue_t *q;
 3 {
 4	    mblk_t *mp;
 5	    mblk_t *tmp;
 6	    caddr_t dma_addr;
 7     ssize_t dma_len;
 8
 9	    while ((mp = getq(q)) != NULL) {
10	            switch (mp->b_datap->db_type) {
11             case M_DATA:
12	                   if (pullupmsg(mp, -1)) {
13                            dma_addr = vtop(mp->b_rptr);
14	                           dma_len = mp->b_wptr - mp->b_rptr;
15	                           xxx_do_dma(dma_addr, dma_len);
16	                           freemsg(mp);
17	                           break;
18	                   }
19	                   for (tmp = mp; tmp; tmp = tmp->b_cont) {
20                            dma_addr = vtop(tmp->b_rptr);
21                            dma_len = tmp->b_wptr - tmp->b_rptr;
22                            xxx_do_dma(dma_addr, dma_len);
23                    }
24	                   freemsg(mp);
25	                   break;
     	 . . .
26		        }
27	    }
28 }
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR srv (9E),
.BR allocb (9F),
.BR msgpullup (9F),
.BR msgb (9S)
.sp
.LP
.I Writing Device Drivers
.sp
.LP
.I STREAMS Programming Guide
.SH NOTES
.sp
.LP
The
.B pullupmsg()
function is not included in the
.B DKI
and will be
removed from the system in a future release. Device driver writers are
strongly encouraged to use \fBmsgpullup\fR(9F) instead of
.BR pullupmsg() .
