'\" te
.\" Copyright 1989 AT&T
.\" Copyright (c) 2006, Sun Microsystems, Inc.,  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH kmem_alloc 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
kmem_alloc, kmem_zalloc, kmem_free \- allocate kernel memory
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/kmem.h>



\fBvoid *\fBkmem_alloc\fR(\fBsize_t\fR \fIsize\fR, \fBint\fR \fIflag\fR);
.fi

.LP
.nf
\fBvoid *\fBkmem_zalloc\fR(\fBsize_t\fR \fIsize\fR, \fBint\fR \fIflag\fR);
.fi

.LP
.nf
\fBvoid\fR \fBkmem_free\fR(\fBvoid*\fIbuf\fR, \fBsize_t\fR \fIsize\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Architecture independent level 1 (DDI/DKI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I size
.ad
.RS 8n
.rt
Number of bytes to allocate.
.RE

.sp
.ne 2
.mk
.na
.I flag
.ad
.RS 8n
.rt
Determines whether caller can sleep for memory. Possible flags are
.B KM_SLEEP
to allow sleeping until memory is available, or
.B KM_NOSLEEP
to return
.I NULL
immediately if memory is not
available.
.RE

.sp
.ne 2
.mk
.na
.I buf
.ad
.RS 8n
.rt
Pointer to allocated memory.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B kmem_alloc()
function allocates
.I size
bytes of kernel memory
and returns a pointer to the allocated memory. The allocated memory is at
least double-word aligned, so it can hold any C data structure. No greater
alignment can be assumed.
.I flag
determines whether the caller can sleep
for memory.
.B KM_SLEEP
allocations may sleep but are guaranteed to
succeed.
.B KM_NOSLEEP
allocations are guaranteed not to sleep but may
fail (return
.IR NULL )
if no memory is currently available. The initial
contents of memory allocated using
.B kmem_alloc()
are random garbage.
.sp
.LP
The
.B kmem_zalloc()
function is like
.B kmem_alloc()
but returns
zero-filled memory.
.sp
.LP
The
.B kmem_free()
function frees previously allocated kernel memory.
The buffer address and size must exactly match the original allocation.
Memory cannot be returned piecemeal.
.SH RETURN VALUES
.sp
.LP
If successful,
.B kmem_alloc()
and
.B kmem_zalloc()
return a pointer
to the allocated memory. If
.B KM_NOSLEEP
is set and memory cannot be
allocated without sleeping,
.B kmem_alloc()
and
.BR kmem_zalloc()
return
.IR NULL .
.SH CONTEXT
.sp
.LP
The
.B kmem_alloc()
and
.B kmem_zalloc()
functions can be called from
interrupt context only if the
.B KM_NOSLEEP
flag is set. They can be
called from user context with any valid
.IR flag .
The
.B kmem_free()
function can be called from from user, interrupt, or kernel context.
.SH SEE ALSO
.sp
.LP
.BR copyout (9F),
.BR freerbuf (9F),
.BR getrbuf (9F)
.sp
.LP
.I Writing Device Drivers
.SH WARNINGS
.sp
.LP
Memory allocated using
.B kmem_alloc()
is not paged. Available memory is
therefore limited by the total physical memory on the system. It is also
limited by the available kernel virtual address space, which is often the
more restrictive constraint on large-memory configurations.
.sp
.LP
Excessive use of kernel memory is likely to affect overall system
performance. Overcommitment of kernel memory will cause the system to hang
or panic.
.sp
.LP
Misuse of the kernel memory allocator, such as writing past the end of a
buffer, using a buffer after freeing it, freeing a buffer twice, or freeing
a null or invalid pointer, will corrupt the kernel heap and may cause the
system to corrupt data or panic.
.sp
.LP
The initial contents of memory allocated using
.B kmem_alloc()
are
random garbage. This random garbage may include secure kernel data.
Therefore, uninitialized kernel memory should be handled carefully. For
example, never
.BR copyout (9F)
a potentially uninitialized buffer.
.SH NOTES
.sp
.LP
.BR kmem_alloc(0 ,
.IB flag )
always returns \fINULL\fR.
.B kmem_free(NULL, 0)
is legal.
