'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc.,  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH va_arg 9F "22 Mar 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
va_arg, va_start, va_copy, va_end \- handle variable argument list
.SH SYNOPSIS
.LP
.nf
#include <sys/varargs.h>



\fBvoid\fR \fBva_start\fR(\fBva_list\fR \fIpvar\fR, \fIname\fR);
.fi

.LP
.nf
\fB(type *)\fR \fBva_arg\fR(\fBva_list\fR \fIpvar\fR, \fItype\fR);
.fi

.LP
.nf
\fBvoid\fR \fBva_copy\fR(\fBva_list\fR \fIdest\fR, \fBva_list\fR \fIsrc\fR);
.fi

.LP
.nf
\fBvoid\fR \fBva_end\fR(\fBva_list\fR \fIpvar\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.SS "\fBva_start()\fR"
.sp
.ne 2
.mk
.na
.I pvar
.ad
.RS 8n
.rt
Pointer to variable argument list.
.RE

.sp
.ne 2
.mk
.na
.I name
.ad
.RS 8n
.rt
Identifier of rightmost parameter in the function definition.
.RE

.SS "\fBva_arg()\fR"
.sp
.ne 2
.mk
.na
.I pvar
.ad
.RS 8n
.rt
Pointer to variable argument list.
.RE

.sp
.ne 2
.mk
.na
.I type
.ad
.RS 8n
.rt
Type name of the next argument to be returned.
.RE

.SS "\fBva_copy()\fR"
.sp
.ne 2
.mk
.na
.I dest
.ad
.RS 8n
.rt
Destination variable argument list.
.RE

.sp
.ne 2
.mk
.na
.I src
.ad
.RS 8n
.rt
Source variable argument list.
.RE

.SS "\fBva_end()\fR"
.sp
.ne 2
.mk
.na
.I pvar
.ad
.RS 8n
.rt
Pointer to variable argument list.
.RE

.SH DESCRIPTION
.sp
.LP
This set of macros allows portable procedures that accept variable argument
lists to be written. Routines that have variable argument lists but do not
use the
.B varargs
macros are inherently non-portable, as different
machines use different argument-passing conventions. Routines that accept a
variable argument list can use these macros to traverse the list.
.sp
.LP
.B va_list
is the type defined for the variable used to traverse the
list of arguments.
.sp
.LP
.B va_start()
is called to initialize
.I pvar
to the beginning of the
variable argument list.
.B va_start()
must be invoked before any access
to the unnamed arguments. The parameter
.I name
is the identifier of the
rightmost parameter in the variable parameter list in the function
definition (the one just before the "\fB, .\|.\|.\|\fR"). If this parameter
is declared with the
.B register
storage class or with a function or
array type, or with a type that is not compatible with the type that results
after application of the default argument promotions, the behavior is
undefined.
.sp
.LP
.B va_arg()
expands to an expression that has the type and value of the
next argument in the call. The parameter
.I pvar
must be initialized by
.BR va_start() .
Each invocation of
.B va_arg()
modifies
.I pvar
so
that the values of successive arguments are returned in turn. The parameter
.I type
is the type name of the next argument to be returned. The type
name must be specified in such a way that the type of pointer to an object
that has the specified type can be obtained by postfixing a
.B *
to
.IR type .
If there is no actual next argument, or if\fBtype\fR is not
compatible with the type of the actual next argument (as promoted according
to the default argument promotions), the behavior is undefined.
.sp
.LP
The
.B va_copy()
macro saves the state represented by the
\fBva_list\fIsrc\fR in the \fBva_list\fR
.IR dest .
The \fBva_list\fR
passed as
.I dest
should not be initialized by a previous call to
.B va_start()
It then must be passed to
.B va_end()
before being
reused as a parameter to
.B va_start()
or as the
.I dest
parameter of
a subsequent call to
.BR va_copy() .
The behavior is undefined if any of
these restrictions are not met.
.sp
.LP
The
.B va_end()
macro is used to clean up. It invalidates
.I pvar
for
use (unless
.B va_start()
is invoked again).
.sp
.LP
Multiple traversals, each bracketed by a call to
.B va_start()
and
.BR va_end() ,
are possible.
.SH EXAMPLES
.LP
.B Example 1
Creating a Variable Length Command
.sp
.LP
The following example uses these routines to create a variable length
command. This might be useful for a device that provides for a
variable-length command set.
.B ncmdbytes
is the number of bytes in the
command. The new command is written to
.BR cmdp .

.sp
.in +2
.nf
static void
xx_write_cmd(uchar_t *cmdp, int ncmdbytes, .\|.\|.)
{
        va_list	ap;
        int	i;

	       /*
         * Write variable-length command to destination
	        */
         va_start(ap, ncmdbytes);
         for (i = 0; i < ncmdbytes; i++) {
                  *cmdp++ = va_arg(ap, uchar_t);
	        }
         va_end(ap);
}
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR vcmn_err (9F),
.BR vsprintf (9F)
.SH NOTES
.sp
.LP
It is up to the calling routine to specify in some manner how many
arguments there are, since it is not always possible to determine the number
of arguments from the stack frame.
.sp
.LP
Specifying a second argument of
.B char
or
.B short
to
.BR va_arg
makes your code non-portable, because arguments seen by the called function
are not
.B char
or
.BR short .
C converts
.B char
and
.BR short
arguments to
.B int
before passing them to a function.
