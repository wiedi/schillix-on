'\" te
.\" Copyright (c) 1994, Sun Microsystems, Inc.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_dma_nextcookie 9F "26 Sep 1994" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_dma_nextcookie \- retrieve subsequent DMA cookie
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBvoid\fR \fBddi_dma_nextcookie\fR(\fBddi_dma_handle_t\fR \fIhandle\fR,
     \fBddi_dma_cookie_t *\fIcookiep\fR);
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I handle
.ad
.RS 11n
.rt
The handle previously allocated by a call to
.BR ddi_dma_alloc_handle (9F).
.RE

.sp
.ne 2
.mk
.na
.I cookiep
.ad
.RS 11n
.rt
A pointer to a
.BR ddi_dma_cookie "(9S) structure."
.RE

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH DESCRIPTION
.sp
.LP
.B ddi_dma_nextcookie()
retrieves subsequent
.B DMA
cookies for a
.B DMA
object.
.B ddi_dma_nextcookie()
fills in the
.BR ddi_dma_cookie (9S)
structure pointed to by
.IR cookiep .
The
.BR ddi_dma_cookie (9S)
structure must be allocated prior to calling
.BR ddi_dma_nextcookie() .
.sp
.LP
The
.B DMA
cookie count returned by
.BR ddi_dma_buf_bind_handle (9F),
.BR ddi_dma_addr_bind_handle (9F),
or
.BR ddi_dma_getwin "(9F) indicates"
the number of
.B DMA
cookies a
.B DMA
object consists of. If the
resulting cookie count,
.IR N ,
is larger than 1,
.B ddi_dma_nextcookie()
must be called
.IR N "-1 times to retrieve all"
.B DMA
cookies.
.SH CONTEXT
.sp
.LP
.B ddi_dma_nextcookie()
can be called from user, kernel, or interrupt
context.
.SH EXAMPLES
.LP
.B Example 1
Process a scatter-gather list of I/O requests.
.sp
.LP
This example demonstrates the use of
.B ddi_dma_nextcookie()
to process
a scatter-gather list of I/O requests.

.sp
.in +2
.nf
/* setup scatter-gather list with multiple DMA cookies */
ddi_dma_cookie_t  dmacookie;
uint_t            ccount;
\&...

status = ddi_dma_buf_bind_handle(handle, bp, DDI_DMA_READ,
	NULL, NULL, &dmacookie, &ccount);

if (status == DDI_DMA_MAPPED) {

	/* program DMA engine with first cookie */

	while (--ccount > 0) {
		ddi_dma_nextcookie(handle, &dmacookie);
		/* program DMA engine with next cookie */
	}
}
\&...
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR ddi_dma_addr_bind_handle (9F),
.BR ddi_dma_alloc_handle (9F),
.BR ddi_dma_buf_bind_handle (9F),
.BR ddi_dma_unbind_handle (9F),
.BR ddi_dma_cookie (9S)
.sp
.LP
.I Writing Device Drivers
