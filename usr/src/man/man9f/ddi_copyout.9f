'\" te
.\" Copyright 1989 AT&T  Copyright (c) 2000, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_copyout 9F "19 Apr 2000" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_copyout \- copy data from a driver
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint\fR \fBddi_copyout\fR(\fBconst void *\fIdriverbuf\fR, \fBvoid *\fIbuf\fR, \fBsize_t\fR \fIcn\fR, \fBint\fR \fIflags\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I driverbuf
.ad
.RS 13n
.rt
Source address in the driver from which the data is transferred.
.RE

.sp
.ne 2
.mk
.na
.I buf
.ad
.RS 13n
.rt
Destination address to which the data is transferred.
.RE

.sp
.ne 2
.mk
.na
.I cn
.ad
.RS 13n
.rt
Number of bytes to copy.
.RE

.sp
.ne 2
.mk
.na
.I flags
.ad
.RS 13n
.rt
Set of flag bits that provide address space information about
.IR buf .
.RE

.SH DESCRIPTION
.sp
.LP
This routine is designed for use in driver
.BR ioctl (9E)
routines for
drivers that support layered ioctls.
.B ddi_copyout()
copies data from a
driver buffer to a destination address,
.IR buf .
.sp
.LP
The
.I flags
argument determines the address space information about
.IR buf .
If the
.B FKIOCTL
flag is set, this indicates that
.I buf
is a kernel address, and
.B ddi_copyout()
behaves like
.BR bcopy (9F).
Otherwise,
.I buf
is interpreted as a user buffer address, and
.B ddi_copyout()
behaves like
.BR copyout (9F).
.sp
.LP
Addresses that are word-aligned are moved most efficiently.  However, the
driver developer is not obliged to ensure alignment.  This function
automatically finds the most efficient move algorithm according to address
alignment.
.SH RETURN VALUES
.sp
.LP
Under normal conditions,
.B 0
is returned to indicate a successful copy.
Otherwise, \(mi\fB1\fR is returned if one of the following occurs:
.RS +4
.TP
.ie t \(bu
.el o
Paging fault; the driver tried to access a page of memory for which it did
not have read or write access.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Invalid user address, such as a user area or stack area.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Invalid address that would have resulted in data being copied into the user
block.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Hardware fault; a hardware error prevented access to the specified user
memory. For example, an uncorrectable parity or
.B ECC
error occurred.
.RE
.sp
.LP
If \(mi\fB1\fR is returned to the caller, driver entry point routines
should return
.BR EFAULT .
.SH CONTEXT
.sp
.LP
.B ddi_copyout()
can be called from user or kernel context only.
.SH EXAMPLES
.LP
.B Example 1 ddi_copyout()
example
.sp
.LP
A driver
.BR ioctl "(9E) routine (line 12) can be used to get or set device"
attributes or registers. In the
.B XX_GETREGS
condition (line 25), the
driver copies the current device register values to another data area.  If
the specified argument contains an invalid address, an error code is
returned.

.sp
.in +2
.nf
1  struct device  {        /* layout of physical device registers  */
 2     int      control;    /* physical device control word  */
 3     int      status;     /* physical device status word   */
 4     short    recv_char;  /* receive character from device */
 5     short    xmit_char;  /* transmit character to device  */
 6  };

 7  struct device_state {
 8     volatile struct device *regsp;   /* pointer to device registers */
 9     kmutex_t reg_mutex;              /* protect device registers */
       . . .
10  };

11  static void *statep; /* for soft state routines */

12  xxioctl(dev_t dev, int cmd, int arg, int mode,
13      cred_t *cred_p, int *rval_p)
14  {
15      struct device_state *sp;
16      volatile struct device *rp;
17      struct device reg_buf;     /* temporary buffer for registers */
18      int instance;

19      instance = getminor(dev);
20      sp = ddi_get_soft_state(statep, instance);
21      if (sp == NULL)
22          return (ENXIO);
23      rp = sp->regsp;
        . . .
24      switch (cmd)  {

25      case XX_GETREGS:   /* copy registers to arg */
26            mutex_enter(&sp->reg_mutex);
27            /*
28             * Copy data from device registers to
29             * temporary device register buffer
30             * e.g. reg_buf.control = rp->control;
31             */
32            mutex_exit(&sp->reg_mutex);
33            if (ddi_copyout(&reg_buf, arg,
34                sizeof (struct device), mode) != 0) {
35                    return (EFAULT);
36            }

37            break;
38      }
39  }
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR ioctl (9E),
.BR bcopy (9F),
.BR copyin (9F),
.BR copyout (9F),
.BR ddi_copyin (9F),
.BR uiomove (9F)
.sp
.LP
.I Writing Device Drivers
.SH NOTES
.sp
.LP
The value of the
.I flags
argument to
.B ddi_copyout()
should be
passed through directly from the
.I mode
argument of
.BR ioctl()
untranslated.
.sp
.LP
Driver defined locks should not be held across calls to this function.
.sp
.LP
.B ddi_copyout()
should not be used from a streams driver. See
.B M_COPYIN
and
.B M_COPYOUT
in
.IR "STREAMS Programming Guide" .
