'\" te
.\" Copyright (c) 2003, Sun Microsystems, Inc.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH gld 9F "28 Aug 2003" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
gld, gld_mac_alloc, gld_mac_free, gld_register, gld_unregister, gld_recv,
gld_sched, gld_intr \- Generic LAN Driver service routines
.SH SYNOPSIS
.LP
.nf
#include <sys/gld.h>

\fBgld_mac_info_t *\fBgld_mac_alloc\fR(\fBdev_info_t *\fIdip\fR);
.fi

.LP
.nf
\fBvoid\fR \fBgld_mac_free\fR(\fBgld_mac_info_t *\fImacinfo\fR);
.fi

.LP
.nf
\fBint\fR \fBgld_register\fR(\fBdev_info_t *\fIdip\fR, \fBchar *\fIname\fR, \fBgld_mac_info_t *\fImacinfo\fR);
.fi

.LP
.nf
\fBint\fR \fBgld_unregister\fR(\fBgld_mac_info_t *\fImacinfo\fR);
.fi

.LP
.nf
\fBvoid\fR \fBgld_recv\fR(\fBgld_mac_info_t *\fImacinfo\fR, \fBmblk_t *\fImp\fR);
.fi

.LP
.nf
\fBvoid\fR \fBgld_sched\fR(\fBgld_mac_info_t *\fImacinfo\fR);
.fi

.LP
.nf
\fBuint_t\fR \fBgld_intr\fR(\fBcaddr_t);\fR
.fi

.LP
.nf
\fBvoid\fR \fBgld_linkstate\fR(\fBgld_mac_info_t *\fImacinfo\fR, \fBint32_t\fR \fInewstate\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris architecture specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I macinfo
.ad
.RS 13n
.rt
Pointer to a \fBgld_mac_info\fR(9S) structure.
.RE

.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 13n
.rt
Pointer to
.B dev_info
structure.
.RE

.sp
.ne 2
.mk
.na
.I name
.ad
.RS 13n
.rt
Device interface name.
.RE

.sp
.ne 2
.mk
.na
.I mp
.ad
.RS 13n
.rt
Pointer to a message block containing a received packet.
.RE

.sp
.ne 2
.mk
.na
.I newstate
.ad
.RS 13n
.rt
Media link state.
.RE

.SH DESCRIPTION
.sp
.LP
\fBgld_mac_alloc\fR(\|) allocates a new \fBgld_mac_info\fR(9S) structure
and returns a pointer to it. Some of the GLD-private elements of the
structure may be initialized before
.BR gld_mac_alloc (\|)
returns; all
other elements are initialized to zero. The device driver must initialize
some structure members, as described in \fBgld_mac_info\fR(9S), before
passing the mac_info pointer to \fBgld_register\fR(\|).
.sp
.LP
\fBgld_mac_free\fR(\|) frees a \fBgld_mac_info\fR(9S) structure previously
allocated by \fBgld_mac_alloc\fR(\|).
.sp
.LP
\fBgld_register\fR(\|) is called from the device driver's
.BR attach (9E)
routine, and is used to link the GLD-based device driver with the GLD
framework. Before calling
.BR gld_register (\|)
the device driver's
.BR attach (9E)
routine must first use
.BR gld_mac_alloc (\|)
to allocate
a \fBgld_mac_info\fR(9S) structure, and initialize several of its structure
elements. See \fBgld_mac_info\fR(9S) for more information. A successful call
to
.BR gld_register (\|)
performs the following actions:
.RS +4
.TP
.ie t \(bu
.el o
links the device-specific driver with the GLD system;
.RE
.RS +4
.TP
.ie t \(bu
.el o
sets the device-specific driver's private data pointer (using
.BR ddi_set_driver_private (9F))
to point to the
.B macinfo
structure;
.RE
.RS +4
.TP
.ie t \(bu
.el o
creates the minor device node.
.RE
.sp
.LP
The device interface name passed to
.BR gld_register (\|)
must exactly
match the name of the driver module as it exists in the filesystem.
.sp
.LP
The driver's \fBattach\fR(9E) routine should return \fBDDI_SUCCESS\fR if
\fBgld_register\fR(\|) succeeds. If \fBgld_register\fR(\|) returns
.BR DDI_FAILURE ,
the
.BR attach "(9E) routine should deallocate any"
resources it allocated before calling
.BR gld_register (\|)
and then also
return
.BR DDI_FAILURE .
.sp
.LP
\fBgld_unregister\fR(\|) is called by the device driver's
.BR detach (9E)
function, and if successful, performs the following tasks:
.RS +4
.TP
.ie t \(bu
.el o
ensures the device's interrupts are stopped, calling the driver's
\fBgldm_stop\fR(\|) routine if necessary;
.RE
.RS +4
.TP
.ie t \(bu
.el o
removes the minor device node;
.RE
.RS +4
.TP
.ie t \(bu
.el o
unlinks the device-specific driver from the GLD system.
.RE
.sp
.LP
If
.BR gld_unregister (\|)
returns
.BR DDI_SUCCESS ,
the
.BR detach (9E)
routine should deallocate any data structures allocated in the
.BR attach (9E)
routine, using \fBgld_mac_free\fR(\|) to deallocate the
.B macinfo
structure, and return
.BR DDI_SUCCESS .
If
\fBgld_unregister\fR(\|) returns
.BR DDI_FAILURE ,
the driver's
.BR detach (9E)
routine must leave the device operational and return
.BR DDI_FAILURE .
.sp
.LP
\fBgld_recv\fR(\|) is called by the driver's interrupt handler to pass a
received packet upstream. The driver must construct and pass a STREAMS
.B M_DATA
message containing the raw packet. \fBgld_recv\fR(\|)
determines which STREAMS queues, if any, should receive a copy of the
packet, duplicating it if necessary. It then formats a \fBDL_UNITDATA_IND\fR
message, if required, and passes the data up all appropriate streams.
.sp
.LP
The driver should avoid holding mutex or other locks during the call to
\fBgld_recv\fR(\|). In particular, locks that could be taken by a transmit
thread may not be held during a call to
.BR gld_recv (\|):
the interrupt
thread that calls
.BR gld_recv (\|)
may in some cases carry out processing
that includes sending an outgoing packet, resulting in a call to the
driver's
.BR gldm_send (\|)
routine. If the
.BR gldm_send (\|)
routine
were to try to acquire a mutex being held by the
.BR gldm_intr (\|)
routine
at the time it calls
.BR gld_recv (\|),
this could result in a panic due to
recursive mutex entry.
.sp
.LP
\fBgld_sched\fR(\|) is called by the device driver to reschedule stalled
outbound packets. Whenever the driver's
.BR gldm_send (\|)
routine has
returned
.BR GLD_NORESOURCES ,
the driver must later call
\fBgld_sched\fR(\|) to inform the GLD framework that it should retry the
packets that previously could not be sent.
.BR gld_sched (\|)
should be
called as soon as possible after resources are again available, to ensure
that GLD resumes passing outbound packets to the driver's
\fBgldm_send\fR(\|) routine in a timely way. (If the driver's
\fBgldm_stop\fR(\|) routine is called, the driver is absolved from this
obligation until it later again returns
.B GLD_NORESOURCES
from its
\fBgldm_send\fR(\|) routine; however, extra calls to \fBgld_sched\fR(\|)
will not cause incorrect operation.)
.sp
.LP
\fBgld_intr\fR(\|) is GLD's main interrupt handler. Normally it is
specified as the interrupt routine in the device driver's call to
.BR ddi_add_intr (9F).
The argument to the interrupt handler (specified as
.I int_handler_arg
in the call to
.BR ddi_add_intr "(9F)) must be a"
pointer to the \fBgld_mac_info\fR(9S) structure. \fBgld_intr\fR(\|) will,
when appropriate, call the device driver's
.BR gldm_intr (\|)
function,
passing that pointer to the \fBgld_mac_info\fR(9S) structure. However, if
the driver uses a high-level interrupt, it must provide its own high-level
interrupt handler, and trigger a soft interrupt from within that. In this
case,
.BR gld_intr (\|)
may be specified as the soft interrupt handler in
the call to \fBddi_add_softintr\fR(\|).
.sp
.LP
.B gld_linkstate()
is called by the device driver to notify GLD of
changes in the media link state. The newstate argument should be set to one
of the following:
.sp
.ne 2
.mk
.na
.B GLD_LINKSTATE_DOWN
.ad
.RS 26n
.rt
The media link is unavailable.
.RE

.sp
.ne 2
.mk
.na
.B GLD_LINKSTATE_UP
.ad
.RS 26n
.rt
The media link is unavailable.
.RE

.sp
.ne 2
.mk
.na
.B GLD_LINKSTATE_UNKNOWN
.ad
.RS 26n
.rt
The status of the media link is unknown.
.RE

.sp
.LP
If a driver calls
.BR gld_linkstate() ,
it must also set the
GLD_CAP_LINKSTATE bit  in the  gldm_capabilties field of the
.BR gld_mac_info (9S)
structure.
.SH RETURN VALUES
.sp
.LP
\fBgld_mac_alloc\fR(\|) returns a pointer to a new \fBgld_mac_info\fR(9S)
structure.
.sp
.LP
\fBgld_register\fR(\|) and \fBgld_unregister\fR(\|) return:
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 16n
.rt
on success.
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 16n
.rt
on failure.
.RE

.sp
.LP
\fBgld_intr\fR(\|) returns a value appropriate for an interrupt handler.
.SH SEE ALSO
.sp
.LP
.BR gld (7D),
.BR gld (9E),
.BR gld_mac_info (9S),
.BR gld_stats (9S),
.BR dlpi (7P),
.BR attach (9E),
.BR ddi_add_intr (9F).
.sp
.LP
.I Writing Device Drivers
