'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_intr_alloc 9F "23 Apr 2008" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_intr_alloc, ddi_intr_free \- allocate or free interrupts for a given
interrupt type
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/conf.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>

\fBint\fR \fBddi_intr_alloc\fR(\fBdev_info_t *\fIdip\fR, \fBddi_intr_handle_t *\fIh_array\fR, \fBint\fR \fItype\fR,
     \fBint\fR \fIinum\fR, \fBint\fR \fIcount\fR, \fBint *\fIactualp\fR, \fBint\fR \fIbehavior\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_intr_free\fR(\fBddi_intr_handle_t\fR \fIh\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.LP
.B ddi_intr_alloc()
.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 12n
.rt
Pointer to the
.B dev_info
structure
.RE

.sp
.ne 2
.mk
.na
.I h_array
.ad
.RS 12n
.rt
Pointer to an array of DDI interrupt handles
.RE

.sp
.ne 2
.mk
.na
.I type
.ad
.RS 12n
.rt
Interrupt type
.RE

.sp
.ne 2
.mk
.na
.I inum
.ad
.RS 12n
.rt
Interrupt number
.RE

.sp
.ne 2
.mk
.na
.I count
.ad
.RS 12n
.rt
Number of interrupts requested. The
.I count
should not exceed the total
number of interrupts supported by the device, as returned by a call to
.BR ddi_intr_get_nintrs (9F).
.RE

.sp
.ne 2
.mk
.na
.I actualp
.ad
.RS 12n
.rt
Pointer to the number of interrupts actually allocated
.RE

.sp
.ne 2
.mk
.na
.I behavior
.ad
.RS 12n
.rt
Flag to determine the allocation algorithm
.RE

.sp
.LP
.B ddi_intr_free()
.sp
.ne 2
.mk
.na
.I h
.ad
.RS 5n
.rt
DDI interrupt handle
.RE

.SH DESCRIPTION
.sp
.LP
The
.B ddi_intr_alloc()
function allocates interrupts of the interrupt
type given by the
.I type
argument beginning at the interrupt number
.IR inum .
If
.B ddi_intr_alloc()
allocates any interrupts, it returns
the actual number of interrupts allocated in the integer pointed to by the
.I actualp
argument and returns the number of interrupt handles in the
interrupt handle array pointed to by the
.I h_array
argument.
.sp
.LP
Specific interrupts are always specified by the combination of interrupt
.I type
and
.IR inum .
For legacy devices,
.I inum
refers to the nth
interrupt, typically as defined by the devices
.B interrupts
property.
For PCI fixed interrupts,
.I inum
refers to the interrupt number. The
.I inum
is the relative interrupt vector number, from
.B 0
to
.BR 31
for MSI, from
.B 0
to
.B 2047
for MSI-X. The first interrupt vector is
.BR 0 .
The last relative vector is
.B 31
for MSI or
.B 2047
for
MSI-X.
.sp
.LP
The
.I h_array
.RI "must be pre-allocated by the caller as a" " count"
sized array of ddi_intr_handle_t's.
.sp
.LP
If MSI interrupts are being allocated, the
.I count
argument passed
should be a number between
.B 1
and
.BR 32 ,
specified as a power of
two. If
.I count
is not specified as a power of two, the error
.B DDI_EINVAL
is returned.
.sp
.LP
The behavior flag controls the interrupt allocation algorithm. It takes one
of two input values:
.B DDI_INTR_ALLOC_NORMAL
or
.BR DDI_INTR_ALLOC_STRICT .
If the
.I count
value used is greater than
.BR NINTRs ,
then the call fails with
.B DDI_EINVAL
unconditionally.
When set to
.BR DDI_INTR_ALLOC_STRICT ,
the call succeeds if and only if
.I count
interrupts are allocated. Otherwise, the call fails, and the
number of available interrupts is returned in
.IR actualp .
When set to
.BR DDI_INTR_ALLOC_NORMAL ,
the call succeeds if at least one interrupt is
allocated, and the number of allocated interrupts is returned in actualp.
.sp
.LP
The handle for each allocated interrupt, if any, is returned in the array
of handles given by the
.I h_array
argument.
.sp
.LP
The
.B ddi_intr_free()
function releases the system resources and
interrupt vectors associated with the ddi_intr_handle_t
.IR h ,
including
any resources associated with the handle
.I h
itself. Once freed, the
handle
.I h
should not be used in any further calls.
.sp
.LP
The
.B ddi_intr_free()
function should be called once for each handle in
the handle array.
.SH RETURN VALUES
.sp
.LP
The
.B ddi_intr_alloc()
and
.B ddi_intr_free()
functions return:
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 21n
.rt
On success.
.RE

.sp
.ne 2
.mk
.na
.B DDI_EAGAIN
.ad
.RS 21n
.rt
Not enough interrupt resources.
.RE

.sp
.ne 2
.mk
.na
.B DDI_EINVAL
.ad
.RS 21n
.rt
On encountering invalid input parameters.
.RE

.sp
.ne 2
.mk
.na
.B DDI_INTR_NOTFOUND
.ad
.RS 21n
.rt
On failure to find the interrupt.
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 21n
.rt
On any implementation specific failure.
.RE

.SH CONTEXT
.sp
.LP
The
.B ddi_intr_alloc()
and
.B ddi_intr_free()
functions can be
called from kernel non-interrupt context.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR attributes (5),
.BR ddi_intr_add_handler (9F),
.BR ddi_intr_block_enable (9F),
.BR ddi_intr_disable (9F),
.BR ddi_intr_enable (9F),
.BR ddi_intr_get_cap (9F),
.BR ddi_intr_get_nintrs (9F),
.BR ddi_intr_get_pri (9F),
.BR ddi_intr_get_supported_types (9F),
.BR ddi_intr_remove_handler (9F)
.sp
.LP
.I Writing Device Drivers
.SH NOTES
.sp
.LP
Consumers of these interfaces should verify that the return value is not
equal to
.BR DDI_SUCCESS .
Incomplete checking for failure codes could
result in inconsistent behavior among platforms.
.sp
.LP
If a device driver that uses
.B MSI
and
.B MSI-X
interrupts resets
the device, the device might reset its configuration space modifications.
Such a reset could cause a device driver to lose any
.B MSI
and
.B MSI-X
interrupt usage settings that have been applied.
