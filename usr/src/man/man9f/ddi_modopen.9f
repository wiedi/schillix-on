'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc., All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_modopen 9F "17 March 2008" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_modopen, ddi_modsym, ddi_modclose \- dynamically-loaded kernel module
functions
.SH SYNOPSIS
.LP
.nf
#include <sys/modctl.h>

\fBddi_modhandle_t\fR \fBddi_modopen\fR(\fBconst char\fI*modname\fR, \fBint\fR \fImode\fR,
     \fBint\fR \fI*errnop\fR);
.fi

.LP
.nf
\fBvoid\fR \fB*ddi_modsym\fR(\fBddi_modhandle_t\fR \fIhandle\fR, \fBconst char\fR \fI*symname\fR,
     \fBint\fR \fI*errnop\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_modclose\fR(\fBddi_modhandle_t\fR \fIhandle\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I modname
.ad
.RS 11n
.rt
The name of the dynamically-loaded kernel module (file) to be opened. The
.I modname
string is of the form:
.sp
.in +2
.nf
"[\fInamespace\fR/[\fIdirspace\fR/]]\fImodulename\fR"
.fi
.in -2
.sp

Each "\fInamespace\fR/" directory along the standard kernel
moddir/\fImodule-path\fR path (\fBsystem\fR(4)) is searched to locate the
module. If "\fInamespace\fR/" is not specified, "misc/" is assumed. If
"\fIdirspace\fR" is specified, then "\fInamespace\fR/" must be explicitly
provided.
.RE

.sp
.ne 2
.mk
.na
.I mode
.ad
.RS 11n
.rt
Currently,
.BR KRTLD_MODE_FIRST .
.RE

.sp
.ne 2
.mk
.na
.I errnop
.ad
.RS 11n
.rt
Pointer to
.B errno
returned on error, if
.B NULL
then no additional
error information is available.
.RE

.sp
.ne 2
.mk
.na
.I handle
.ad
.RS 11n
.rt
Opaque handle returned from
.BR ddi_modopen() ,
invalidated by
.BR ddi_modclose() .
.RE

.sp
.ne 2
.mk
.na
.I symname
.ad
.RS 11n
.rt
Symbol's name as a character string.
.RE

.SH DESCRIPTION
.sp
.LP
The function prototypes for
.BR ddi_modopen() ,
.BR ddi_modsym() ,
and
.B ddi_modclose()
are modeled after the userland
.BR libdl (3LIB),
.BR dlopen (3C),
.BR dlsym (3C)
, and\fBdlclose\fR(3C) interfaces, however
not all userland features are available and the kernel symbol resolution is
different. The \fBdlerror\fR(3C) interface is not appropriate for the kernel
environment, so the new
.I errnop
return argument was added for
.B ddi_modopen()
and
.BR ddi_modsym() .
.sp
.LP
The \fBddi_modopen()\fRfunction makes a dynamically-loaded kernel module
named by "modname" available to a running kernel. \fBddi_modopen()\fR
returns a handle that the caller can use on subsequent calls to
.B ddi_modsym()
and
.BR ddi_modclose() .
The value of this handle should
not be interpreted in any way by the caller.
.sp
.LP
The
.B ddi_modopen()
interface works best as a dynamic component/object
plug-in mechanism when targeting kernel "misc" modules that contain a single
"struct modlmisc" module linkage, however non-"misc" modules and modules
with multiple linkage structures can also be targeted.
.sp
.LP
There are two different symbol resolution search orders associated with the
.B ddi_modopen()
function: one search order to resolve symbols during the
load of the targeted module, another search order o resolve
.B ddi_modsym()
calls against the handle returned by
.BR ddi_modopen() .
To resolve symbols during module load, the standard kernel module load
search order is used; to resolve symbols during module "A" load, the order
is as follows:
.sp
.in +2
.nf
A -> A's _depends_on -> unix -> unix's _depends_on
.fi
.in -2
.sp

.sp
.LP
A single-level, left-to-right search in \fB_depends_on\fR (or the "ld -N"
alternative) modules occurs. For
.B UNIX
on
.BR Sparc ,
\fB_depends_on\fR is similar to "genunix misc/platmod
cpu/SUNW,UltraSPARC-III+ dtracestubs" for \fBIntel\fR, it is "genunix
dtracestubs". The \fBddi_modsym()\fR search is limited to the module
directly associated with the handle.
.sp
.LP
The
.B ddi_modopen()
function increments the reference count on the
named kernel module. Upon the first load of a module, the\fB_init\fR(9E)
initialization code in the module is called;
.B ddi_modopen()
does not
return until
.B _init
completes.
.sp
.LP
The
.B ddi_modsym()
function allows a caller to obtain the address of a
symbol that is defined within a module. The
.I handle
argument is a valid
.B ddi_modhandle_t
as returned by
.BR ddi_modopen() ,
the
.IR symname
argument is the symbol's name as a character string. The special handle
values supported by ddi_modsym(3C) are not supported.
.sp
.LP
The
.B ddi_modclose()
function decrements the reference count of the
kernel module associated with the specified handle. After the
.B ddi_modclose()
function is called, all
.B ddi_modsym()
resolutions
.RI "obtained (either directly or indirectly) using the now closed" " handle"
are invalid; further use of these resolutions can cause undefined behavior
(that is, may lead to a panic). When the last
.B ddi_modclose()
of a
module occurs, and there are no further references to the module, the module
\fB_fini\fR(9E)entry point may be called. If \fB_fini\fR returns success
then the module may be unloaded.
.SH RETURN VALUES
.sp
.LP
The
.B ddi_modopen()
function returns a handle to the dynamically-loaded
kernel module. The
.B ddi_modopen()
function returns
.B NULL
if the
module cannot be found, the object cannot be relocated, or an error occurs
during the process of resolving and relocating its symbolic references.
.sp
.LP
The
.B ddi_modsym()
function returns
.B NULL
if the
.IR symname
symbol cannot be found directly within the module associated with the
.IR handle .
.sp
.LP
If the
.I handle
was not referenced,
.B ddi_modclose()
returns 0. If
the
.I handle
is invalid,
.B ddi_modclose()
may return a non-zero
value.
.sp
.LP
When either
.B ddi_modopen()
or
.B ddi_modsym()
return
.BR NULL ,
additional
.I errno
information related to the failure is returned in
.I *errnop
if it is not
.BR NULL .
.SH CONTEXT
.sp
.LP
.B ddi_modopen()
can be called from user context only.
.SH EXAMPLES
.LP
.B Example 1
Coding a Dynamically Loaded Kernel Module
.sp
.LP
The following example shows code to dynamically load and call a
"\fBtest\fR" interface in a module called "\fBdltest\fR". The "\fBtest\fR"
interface then adds one to its integer argument.

.sp
.in +2
.nf
ddi_modhandle_t modh;
int             (*test)(int);
int             i = 0;
int             errno;
---%<---
/* dynamically load "dltest" kernel 'misc' module */
modh = ddi_modopen("dltest", KRTLD_MODE_FIRST, &errno);
if (modh == NULL)
         goto fail;      /* failed to open dltest module */

test = (int (*)())ddi_modsym(modh, "test", &errno);
if (test == NULL) {
        (void) ddi_modclose(modh);
        goto fail;      /* failed to find "test" interface */
}

/* invoke test interface and verify result */
i = (*test)(0);
ASSERT(i == 1);

(void) ddi_modclose(modh);
---%<---
.fi
.in -2

.sp
.LP
The implementation of the "dltest" "misc" module is as follows:

.sp
.in +2
.nf
#include <sys/modctl.h>
static dltest_add = 0;

/* define the module linkage */
static struct modlmisc          modlmisc = {&mod_miscops, "dltest"};
static struct modlinkage        modlinkage = {
        MODREV_1, (void *)&modmisc, NULL
};
int
_init(void)
{
        int     i;

        dltest_add = 1;                 /* initialization */
        if ((i = mod_install(&modlinkage)) != 0)
                dltest_add = -1;        /* un-initialization */
        return (i);
}
int
_fini()
{
        int     i;

        if ((i = mod_remove(&modlinkage)) == 0)
                        dltest_add = -1;        /* un-initialization */
        return (i);
}
int
_info(struct modinfo *modinfop)
{
        return (mod_info(&modlinkage, modinfop));
}

/* "test" interface */
int
test(int i)
{
        return (i + dltest_add);
}
.fi
.in -2

.LP
.B Example 2
Dynamically Accessing a Kernel Module within a Drive
.sp
.LP
The following example shows driver code to dynamically load into the kernel
a module constructed via the
.BR elfwrap (1)
utility and containing
firmware intended for download to a device. The "\fBstart\fR" and
"\fBend\fR" pointers provide the addresses of the beginning of the data and
first byte beyond the data.

.sp
.in +2
.nf
ddi_modhandle_t modp;
char *data_startp, *data_endp;
size_t nbytes;
int rv;

modp = ddi_modopen("firmware-rev1.2a", KRTLD_MODE_FIRST, &rv);
data_startp = (char *)ddi_modsym(modp, "fw-rev1.2a_start", &rv);
data_endp = (char *)ddi_modsym(modp, "fw-rev1.2a_end", &rv);
nbytes = data_endp - data_startp;
rv = ddi_modclose(modp);
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR dlclose (3C),
.BR dlopen (3C),
.BR dlsym (3C),
.BR libdl (3LIB),
.BR boot (1M),
.BR elfwrap (1),
.BR modload (1M),
.BR system (4),
.BR _fini (9E),
.BR _info (9E),
.BR _init (9E)
.sp
.LP
.I Writing Device Drivers
.SH WARNINGS
.sp
.LP
A \fBsystem\fR(4)forceload must be established for modules targeted by
\fBddi_modopen()\fR by code involved in the mount of root on "bootdev"
during machine
.BR boot (1M).
