'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH nvpair_value_byte 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
nvpair_value_byte, nvpair_value_nvlist, nvpair_value_int8,
nvpair_value_int16, nvpair_value_int32, nvpair_value_int64,
nvpair_value_uint8, nvpair_value_uint16, nvpair_value_uint32,
nvpair_value_uint64, nvpair_value_string, nvpair_value_boolean_array,
nvpair_value_byte_array, nvpair_value_nvlist_array, nvpair_value_int8_array,
nvpair_value_int16_array, nvpair_value_int32_array,
nvpair_value_int64_array, nvpair_value_uint8_array,
nvpair_value_uint16_array, nvpair_value_uint32_array,
nvpair_value_uint64_array, nvpair_value_string_array \- retrieve value from
a name-value pair
.SH SYNOPSIS
.LP
.nf
#include <sys/nvpair.h>

\fBint\fR \fBnvpair_value_boolean_value\fR(\fBnvpair_t *\fInvpair\fR, \fBboolean_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_byte\fR(\fBnvpair_t *\fInvpair\fR, \fBuchar_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_int8\fR(\fBnvpair_t *\fInvpair\fR, \fBint8_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_uint8\fR(\fBnvpair_t *\fInvpair\fR, \fBuint8_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_int16\fR(\fBnvpair_t *\fInvpair\fR, \fBint16_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_uint16\fR(\fBnvpair_t *\fInvpair\fR, \fBuint16_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_int32\fR(\fBnvpair_t *\fInvpair\fR, \fBint32_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_uint32\fR(\fBnvpair_t *\fInvpair\fR, \fBuint32_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_int64\fR(\fBnvpair_t *\fInvpair\fR, \fBint64_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_uint64\fR(\fBnvpair_t *\fInvpair\fR, \fBuint64_t *\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_string\fR(\fBnvpair_t *\fInvpair\fR, \fBchar **\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_nvlist\fR(\fBnvpair_t *\fInvpair\fR, \fBnvlist_t **\fIval\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_boolean_array\fR(\fBnvpair_t *\fInvpair\fR, \fBboolean_t **\fIval\fR,
     \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_byte_array\fR(\fBnvpair_t *\fInvpair\fR, \fBuchar_t **\fIval\fR,
     \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_int8_array\fR(\fBnvpair_t *\fInvpair\fR, \fBint8_t **\fIval\fR,
     \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_uint8_array\fR(\fBnvpair_t *\fInvpair\fR, \fBuint8_t **\fIval\fR,
     \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_int16_array\fR(\fBnvpair_t *\fInvpair\fR, \fBint16_t **\fIval\fR,
     \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_uint16_array\fR(\fBnvpair_t *\fInvpair\fR, \fBuint16_t **\fIval\fR,
     \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_int32_array\fR(\fBnvpair_t *\fInvpair\fR, \fBint32_t **\fIval\fR,
     \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_uint32_array\fR(\fBnvpair_t *\fInvpair\fR, \fBuint32_t **\fIval\fR,
     \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_int64_array\fR(\fBnvpair_t *\fInvpair\fR, \fBint64_t **\fIval\fR,
     \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_uint64_array\fR(\fBnvpair_t *\fInvpair\fR, \fBuint64_t **\fIval\fR,
     \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_string_array\fR(\fBnvpair_t *\fInvpair\fR, \fBchar ***\fIval\fR,
     \fBuint_t *\fInelem\fR);
.fi

.LP
.nf
\fBint\fR \fBnvpair_value_nvlist_array\fR(\fBnvpair_t *\fInvpair\fR, \fBnvlist_t ***\fIval\fR,
     \fBuint_t *\fInelem\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I nvpair
.ad
.RS 10n
.rt
Name-value pair (\fBnvpair\fR) to be processed.
.RE

.sp
.ne 2
.mk
.na
.I nelem
.ad
.RS 10n
.rt
Address to store the number of elements in value.
.RE

.sp
.ne 2
.mk
.na
.I val
.ad
.RS 10n
.rt
Address to store the value or starting address of array value.
.RE

.SH DESCRIPTION
.sp
.LP
These functions retrieve the value of
.IR nvpair .
The data type of
.I nvpair
must match the function name for the call to be successful.
.sp
.LP
There is no
.BR nvpair_value_boolean() ;
the existence of the name implies
the value is true.
.sp
.LP
For array data types, including string, the memory containing the data is
managed by the library and references to the value remains valid until
.B nvlist_free()
is called on the
.B nvlist_t
from which
.IR nvpair
is obtained. See \fBnvlist_free\fR(9F)
.sp
.LP
The value of an nvpair may not be retrieved after the nvpair having been
removed from or replaced in an nvlist. Replacement can happen during pair
addition on nvlists created with NV_UNIQUE_NAME_TYPE and NV_UNIQUE_NAME. See
.B nvlist_alloc(9F)
for more details.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 10n
.rt
Success
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
Either one of the arguments is
.I NULL
or type of
.I nvpair
does not
match the interface name.
.RE

.SH CONTEXT
.sp
.LP
These functions can be called from user, interrupt, or kernel context.
