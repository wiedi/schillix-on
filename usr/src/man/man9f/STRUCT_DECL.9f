'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH STRUCT_DECL 9F "20 May 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
STRUCT_DECL, SIZEOF_PTR, SIZEOF_STRUCT, STRUCT_BUF, STRUCT_FADDR,
STRUCT_FGET, STRUCT_FGETP, STRUCT_FSET, STRUCT_FSETP, STRUCT_HANDLE,
STRUCT_INIT, STRUCT_SIZE, STRUCT_SET_HANDLE \- 32-bit application data
access macros
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBSTRUCT_DECL\fR(\fIstructname\fR, \fR \fIhandle\fR);
.fi

.LP
.nf
\fBSTRUCT_HANDLE\fR(\fIstructname\fR, \fIhandle\fR);
.fi

.LP
.nf
\fBvoid\fR \fBSTRUCT_INIT\fR(\fIhandle\fR, \fBmodel_t\fR \fIumodel\fR);
.fi

.LP
.nf
\fBvoid\fR \fBSTRUCT_SET_HANDLE\fR(\fIhandle\fR, \fBmodel_t\fR \fIumodel\fR, \fBvoid\fR \fI*addr\fR);
.fi

.LP
.nf
\fBSTRUCT_FGET\fR(\fIhandle\fR, \fIfield\fR);
.fi

.LP
.nf
\fBSTRUCT_FGETP\fR(\fIhandle\fR, \fIfield\fR);
.fi

.LP
.nf
\fBSTRUCT_FSET\fR(\fIhandle\fR, \fIfield\fR, \fIval\fR);
.fi

.LP
.nf
\fBSTRUCT_FSETP\fR(\fIhandle\fR, \fIfield\fR, \fIval\fR);
.fi

.LP
.nf
\fB<typeof field> *\fBSTRUCT_FADDR\fR(\fIhandle\fR, \fIfield\fR);
.fi

.LP
.nf
\fBstruct structname *\fBSTRUCT_BUF\fR(\fIhandle\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBSIZEOF_STRUCT\fR(\fIstructname\fR, \fIumodel\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBSIZEOF_PTR\fR(\fIumodel\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBSTRUCT_SIZE\fR(\fIhandle\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.LP
The macros take the following parameters:
.sp
.ne 2
.mk
.na
.I structname
.ad
.RS 14n
.rt
The structure name that appears \fBafter\fR the \fBC\fR keyword struct of
the native form.
.RE

.sp
.ne 2
.mk
.na
.I umodel
.ad
.RS 14n
.rt
 A bit field that contains either the
.B ILP32
model bit
.RB ( DATAMODEL_ILP32 ),
or the
.B LP64
model bit
.RB ( DATAMODEL_LP64 ).
In an \fBioctl\fR(9E), these bits are present in the flag parameter. In a \fBdevmap\fR(9E), the bits are present in the model parameter \fBmmap\fR(9E). The \fBddi_mmap_get_model\fR(9F) can be called to get the data model of the current thread.
.RE

.sp
.ne 2
.mk
.na
.I handle
.ad
.RS 14n
.rt
The variable name used to refer to a particular instance of a structure
which is handled by these macros.
.RE

.sp
.ne 2
.mk
.na
\fIfield\fR
.ad
.RS 14n
.rt
The field name within the structure that can contain substructures. If the
structures contain substructures, unions, or arrays, the \fIfield\fR can be
whatever complex expression would naturally follow the first . or ->.
.RE

.SH DESCRIPTION
.sp
.LP
The above macros allow a device driver to access data consumed from a
32-bit application regardless whether the driver was compiled to the ILP32
or LP64 data model. These macros effectively hide the difference between the
data model of the user application and the driver.
.sp
.LP
The macros can be broken up into two main categories described in the
following sections.
.SS "Declaration and Initialization Macros"
.sp
.LP
The macros
.B STRUCT_DECL()
and
.B STRUCT_HANDLE()
declare structure
handles on the stack, whereas the macros
.B STRUCT_INIT()
and
\fBSTRUCT_SET_HANDLE()\fR initialize the structure handles to point to an
instance of the native form structure.
.sp
.LP
The macros
.B STRUCT_HANDLE()
and
.B STRUCT_SET_HANDLE()
are used to
declare and initialize a structure handle to an existing data structure, for
example, ioctls within a STREAMS module.
.sp
.LP
The macros
.B STRUCT_DECL()
and
.BR STRUCT_INIT() ,
on the other hand,
are used in modules which declare and initialize a structure handle to a
data structure allocated by
.BR STRUCT_DECL() ,
that is, any standard
character or block device driver
.BR ioctl "(9E) routine that needs to copy"
in data from a user-mode program.
.sp
.ne 2
.mk
.na
.B STRUCT_DECL(structname, handle)
.ad
.sp .6
.RS 4n
Declares a structure handle for a struct and allocates an instance of its
native form on the stack. It is assumed that the native form is larger than
or equal to the ILP32 form.
.I handle
is a variable name and is declared
as a variable by this macro.
.RE

.sp
.ne 2
.mk
.na
.B void STRUCT_INIT(handle, model_t umodel)
.ad
.sp .6
.RS 4n
Initializes
.I handle
to point to the instance allocated by
.BR STRUCT_DECL() .
It also sets data model for
.I handle
to
\fIumodel\fR and it must be called before any access is made through the
macros that operate on these structures. When used in an \fBioctl\fR(9E)
routine,
.I umodel
is the flag parameter. In a
.BR devmap (9E)
routine,
\fIumodel\fR is the model parameter. In a \fBmmap\fR(9E) routine,
\fIumodel\fR is the return value of \fBddi_mmap_get_model\fR(9F). This macro
is intended only for handles created with
.BR STRUCT_DECL() .
.RE

.sp
.ne 2
.mk
.na
.B STRUCT_HANDLE(structname, handle)
.ad
.sp .6
.RS 4n
Declares a structure handle
.I handle
but, unlike
.BR STRUCT_DECL() ,
it does not allocate an instance of "struct".
.RE

.sp
.ne 2
.mk
.na
.B "void STRUCT_SET_HANDLE(handle, model_t umodel, void *addr)
.ad
.sp .6
.RS 4n
Initializes handle to point to the native form instance at
.IR addr .
It
also sets the data model for
.I handle
to
.IR umodel .
This is intended
for handles created with
.BR STRUCT_HANDLE() .
Fields cannot be referenced
via the
.I handle
until this macro has been invoked. Typically,
\fIaddr\fR is the address of the native form structure containing the
user-mode programs data. When used in an \fBioctl\fR(9E),
.I umodel
is
the flag parameter. In a
.BR devmap (9E)
routine,
.I umodel
is the model
parameter. In an \fBmmap\fR(9E) routine, \fIumodel\fR is the return value of
.BR ddi_mmap_get_model (9F).
.RE

.SS "Operation Macros"
.sp
.ne 2
.mk
.na
.B size_t STRUCT_SIZE(handle)
.ad
.sp .6
.RS 4n
Returns size of the structure referred to by
.IR handle ,
depending on the
data model associated with
.IR handle .
If the data model stored by
\fBSTRUCT_INIT()\fR or \fBSTRUCT_SET_HANDLE()\fR is \fBDATAMODEL_ILP32\fR,
the size of the
.B ILP32
form is returned. Otherwise, the size of the
native form is returned.
.RE

.sp
.ne 2
.mk
.na
\fBSTRUCT_FGET(handle, field)\fR
.ad
.sp .6
.RS 4n
Returns the contents of \fIfield\fR in the structure described by
\fIhandle\fR according to the data model associated with \fIhandle\fR.
.RE

.sp
.ne 2
.mk
.na
\fBSTRUCT_FGETP(handle, field)\fR
.ad
.sp .6
.RS 4n
This is the same as
.B STRUCT_FGET()
except that the \fIfield\fR in
question is a pointer of some kind. This macro casts caddr32_t to a (void *)
when it is accessed. Failure to use this macro for a pointer leads to
compiler warnings or failures.
.RE

.sp
.ne 2
.mk
.na
\fBSTRUCT_FSET(handle, field, val)\fR
.ad
.sp .6
.RS 4n
Assigns
.I val
to the (non-pointer) in the structure described by
.IR handle .
It should not be used within another expression, but only as a
statement.
.RE

.sp
.ne 2
.mk
.na
\fBSTRUCT_FSETP(handle, field, val)\fR
.ad
.sp .6
.RS 4n
This is the equivalent of STRUCT_FGETP() for STRUCT_FGET(), with the same
exceptions. Like STRUCT_FSET, STRUCT_FSETP should not be used within another
expression, but only as a statement.
.RE

.sp
.ne 2
.mk
.na
.B struct structname *STRUCT_BUF(handle)
.ad
.sp .6
.RS 4n
Returns a pointer to the native mode instance of the structure described by
.IR handle .
.RE

.SS "Macros Not Using Handles"
.sp
.ne 2
.mk
.na
.B size_t SIZEOF_STRUCT(structname, umodel)
.ad
.sp .6
.RS 4n
Returns size of
.I structname
based on
.IR umodel .
.RE

.sp
.ne 2
.mk
.na
.B size_t SIZEOF_PTR(umodel)
.ad
.sp .6
.RS 4n
Returns the size of a pointer based on
.IR umodel .
.RE

.SH EXAMPLES
.LP
\fBExample 1\fR Copying a Structure
.sp
.LP
The following example uses an
.BR ioctl "(9E) on a regular character device"
that copies a data structure that looks like this into the kernel:

.sp
.in +2
.nf
struct opdata {
    size_t  size;
    uint_t  flag;
};
.fi
.in -2

.LP
\fBExample 2\fR Defining a Structure
.sp
.LP
This data structure definition describes what the
.BR ioctl "(9E) would"
look like in a 32-bit application using fixed width types.

.sp
.in +2
.nf
#if defined(_MULTI_DATAMODEL)
struct opdata32 {
    size32_t    size;
    uint32_t    flag;
};
#endif
.fi
.in -2

.LP
\fBExample 3\fR Using \fBSTRUCT_DECL()\fR and \fBSTRUCT_INIT()\fR
.sp
.LP
Note: This example uses the
.B STRUCT_DECL()
and
.BR STRUCT_INIT()
macros to declare and initialize the structure handle.

.sp
.in +2
.nf
int
xxioctl(dev_t dev, int cmd, intptr_t arg, int mode,
    cred_t *cr, int *rval_p);
{
    STRUCT_DECL(opdata, op);

    if (cmd != OPONE)
        return (ENOTTY);

    STRUCT_INIT(op, mode);

    if (copyin((void *)data,
        STRUCT_BUF(op), STRUCT_SIZE(op)))
        return (EFAULT);

    if (STRUCT_FGET(op, flag) != FACTIVE ||
        STRUCT_FGET(op, size) > sizeof (device_state))
        return (EINVAL);
    xxdowork(device_state, STRUCT_FGET(op, size));
    return (0);
}
.fi
.in -2

.sp
.LP
This piece of code is an excerpt from a STREAMS module that handles
.BR ioctl (9E)
data (M_IOCDATA) messages and uses the data structure
defined above. This code has been written to run in the ILP32 environment
only.

.LP
\fBExample 4\fR Using \fBSTRUCT_HANDLE()\fR and \fBSTRUCT_SET_HANDLE()\fR
.sp
.LP
The next example illustrates the use of the
.B STRUCT_HANDLE()
and
\fBSTRUCT_SET_HANDLE()\fR macros which declare and initialize the structure
handle to point to an already existing instance of the structure.

.sp
.LP
The above code example can be converted to run in the LP64 environment
using the
.B STRUCT_HANDLE()
and
.B STRUCT_SET_HANDLE()
as follows:

.sp
.in +2
.nf
struct strbuf {
int maxlen;     /* no. of bytes in buffer */
int len;        /* no. of bytes returned */
caddr_t buf;        /* pointer to data */
};
.fi
.in -2

.sp
.in +2
.nf
static void
wput_iocdata(queue_t *q, mblk_t *msgp)
{
        struct copyresp *cp = (struct copyresp *)msgp->b_rptr;
        STRUCT_HANDLE(strbuf, sb);

        if (msgp->b_cont->b_cont != NULL) {
                msgp->b_cont = msgpullup(msgp->b_cont, -1);
                if (msgp->b_cont == NULL) {
                        miocnak(q, msgp, 0, ENOSR);
                        return;
                }
        }
        STRUCT_SET_HANDLE(sb, cp->cp_flag, (void *)msgp->b_cont->b_rptr);
        if (STRUCT_FGET(sb, maxlen) < (int)sizeof (ipa_t)) {
                miocnak(q, msgp, 0, ENOSR);
                return;
        }
        ...
        miocack(q, msgp, 0, 0);
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
.TE

.SH SEE ALSO
.sp
.LP
.BR devmap (9E),
.BR ioctl (9E),
\fBmmap\fR(9E),\fBddi_mmap_get_model\fR(9F)
.sp
.LP
.I Writing Device Drivers
.sp
.LP
.I STREAMS Programming Guide
