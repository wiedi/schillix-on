'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH csx_CS_DDI_Info 9F "19 Jul 1996" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
csx_CS_DDI_Info \- obtain DDI information
.SH SYNOPSIS
.LP
.nf
#include <sys/pccard.h>



\fBint32_t\fR \fBcsx_CS_DDI_Info\fR(\fBcs_ddi_info_t *\fIcdi\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris
.B DDI
Specific (Solaris
.B DDI)
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I cdi
.ad
.RS 8n
.rt
Pointer to a
.B cs_ddi_info_t
structure.
.RE

.SH DESCRIPTION
.sp
.LP
This function is a Solaris-specific extension that is used by clients that
need to provide the
.I xx_getinfo
driver entry point (see
.BR getinfo (9E)).
It provides a method for clients to obtain \fBDDI
\fRinformation based on their socket number and client driver name.
.SH STRUCTURE MEMBERS
.sp
.LP
The structure members of
.B cs_ddi_info_t
are:
.sp
.in +2
.nf
uint32_t     Socket;        /* socket number */
char*        driver_name;   /* unique driver name */
dev_info_t   *dip;          /* dip */
int32_t      instance;      /* instance */
.fi
.in -2

.sp
.LP
The fields are defined as follows:
.sp
.ne 2
.mk
.na
.B Socket
.ad
.RS 16n
.rt
This field must be set to the physical socket number that the client is
interested in getting information about.
.RE

.sp
.ne 2
.mk
.na
.B driver_name
.ad
.RS 16n
.rt
This field must be set to a string containing the name of the client driver
to get information about.
.RE

.sp
.LP
If \fBcsx_CS_DDI_Info()\fR is used in a client's \fIxx_getinfo\fR function,
then the client will typically extract the
.B Socket
value from the
\fB*\fIarg\fR argument and it \fImust\fR set the \fBdriver_name\fR field
to the same string used with
.BR csx_RegisterClient (9F).
.sp
.LP
If the
.B driver_name
is found on the
.BR Socket ,
the
.B csx_CS_DDI_Info()
function returns both the
.B dev_info
pointer and
the
.B instance
fields for the requested driver instance.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B CS_SUCCESS
.ad
.RS 28n
.rt
Successful operation.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_SOCKET
.ad
.RS 28n
.rt
Client not found on
.BR Socket .
.RE

.sp
.ne 2
.mk
.na
.B CS_UNSUPPORTED_FUNCTION
.ad
.RS 28n
.rt
No
.B PCMCIA
hardware installed.
.RE

.SH CONTEXT
.sp
.LP
This function may be called from user or kernel context.
.SH EXAMPLES
.LP
.B Example 1
: Using csx_CS_DDI_Info
.sp
.LP
The following example shows how a client might call the
.B csx_CS_DDI_Info()
in the client's
.I xx_getinfo
function to return
the dip or the instance number:

.sp
.in +2
.nf
static int
pcepp_getinfo(dev_info_t *dip, ddi_info_cmd_t cmd, void *arg,
	                                                void **result)
{
	   int                          error = DDI_SUCCESS;
	   pcepp_state_t                *pps;
	   cs_ddi_info_t                cs_ddi_info;

   switch (cmd) {

	   case DDI_INFO_DEVT2DEVINFO:
          cs_ddi_info.Socket = getminor((dev_t)arg) & 0x3f;
          cs_ddi_info.driver_name = pcepp_name;
          if (csx_CS_DDI_Info(&cs_ddi_info) != CS_SUCCESS)
                   return (DDI_FAILURE);
          if (!(pps = ddi_get_soft_state(pcepp_soft_state_p,
                        cs_ddi_info.instance))) {
                    *result = NULL;
          } else {
                    *result = pps->dip;
          }
          break;

	   case DDI_INFO_DEVT2INSTANCE:
          cs_ddi_info.Socket = getminor((dev_t)arg) & 0x3f;
          cs_ddi_info.driver_name = pcepp_name;
          if (csx_CS_DDI_Info(&cs_ddi_info) != CS_SUCCESS)
	                    return (DDI_FAILURE);
          *result = (void *)cs_ddi_info.instance;
          break;

	   default:
          error = DDI_FAILURE;
          break;

   }

	   return (error);
}
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR getinfo (9E),
.BR csx_RegisterClient (9F),
.BR ddi_get_instance (9F)

.sp
.LP
.I PC Card 95 Standard, PCMCIA/JEIDA
