'\" te
.\" Copyright 1989 AT&T
.\" Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH uiomove 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
uiomove \- copy kernel data using uio structure
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/uio.h>



\fBint\fR \fBuiomove\fR(\fBcaddr_t\fR \fIaddress\fR, \fBsize_t\fR \fInbytes\fR, \fBenum uio_rw\fR \fIrwflag\fR,
     \fBuio_t *\fIuio_p\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Architecture independent level 1 (DDI/DKI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I address
.ad
.RS 11n
.rt
Source/destination kernel address of the copy.
.RE

.sp
.ne 2
.mk
.na
.I nbytes
.ad
.RS 11n
.rt
Number of bytes to copy.
.RE

.sp
.ne 2
.mk
.na
.I rwflag
.ad
.RS 11n
.rt
.RB "Flag indicating read or write operation. Possible values are" " UIO_READ"
and
.BR UIO_WRITE .
.RE

.sp
.ne 2
.mk
.na
.I uio_p
.ad
.RS 11n
.rt
Pointer to the
.B uio
structure for the copy.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B uiomove()
function copies
.I nbytes
of data to or from the
space defined by the
.B uio
structure (described in
.BR uio (9S))
and
the driver.
.sp
.LP
The
.B uio_segflg
member of the
.BR uio (9S)
structure determines the
type of space to or from which the transfer is being made. If it is set to
.BR UIO_SYSSPACE ,
the data transfer is between addresses in the kernel. If
it is set to
.BR UIO_USERSPACE ,
the transfer is between a user program and
kernel space.
.sp
.LP
.I rwflag
indicates the direction of the transfer. If
.B UIO_READ
is
set, the data will be transferred from
.I address
to the buffer(s)
described by
.IR uio_p .
If
.B UIO_WRITE
is set, the data will be
transferred from the buffer(s) described by
.I uio_p
to
.IR address .
.sp
.LP
In addition to moving the data,
.B uiomove()
adds the number of bytes
moved to the
.B iov_base
member of the
.BR iovec "(9S) structure,"
decreases the
.B iov_len
member, increases the
.B uio_offset
member of
the
.BR uio "(9S) structure, and decreases the"
.B uio_resid
member.
.sp
.LP
This function automatically handles page faults.
.I nbytes
does not have
to be word-aligned.
.SH RETURN VALUES
.sp
.LP
The
.B uiomove()
function returns
.B 0
upon success or
.BR EFAULT
on failure.
.SH CONTEXT
.sp
.LP
User context only, if
.B uio_segflg
is set to
.BR UIO_USERSPACE .
User,
interrupt, or kernel context, if
.B uio_segflg
is set to
.BR UIO_SYSSPACE .
.SH SEE ALSO
.sp
.LP
.BR ureadc (9F),
.BR uwritec (9F),
.BR iovec (9S),
.BR uio (9S)
.sp
.LP
.I Writing Device Drivers
.SH WARNINGS
.sp
.LP
If
.B uio_segflg
is set to
.B UIO_SYSSPACE
and
.I address
is
selected from user space, the system may panic.
