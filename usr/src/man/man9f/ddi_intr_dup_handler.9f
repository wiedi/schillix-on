'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_intr_dup_handler 9F "09 May 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_intr_dup_handler \- reuse interrupt handler and arguments for MSI-X
interrupts
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/conf.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>

\fBint\fR \fBddi_intr_dup_handler\fR(\fBddi_intr_handle_t\fR \fIprimary\fR, \fBint\fR \fIvector\fR,
     \fBddi_intr_handle_t *\fInew\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I primary
.ad
.RS 11n
.rt
Original DDI interrupt handle
.RE

.sp
.ne 2
.mk
.na
.I vector
.ad
.RS 11n
.rt
Interrupt number to duplicate
.RE

.sp
.ne 2
.mk
.na
.I new
.ad
.RS 11n
.rt
Pointer to new DDI interrupt handle
.RE

.SH DESCRIPTION
.sp
.LP
The
.B ddi_intr_dup_handler()
function is a feature for MSI-X interrupts
that allows an unallocated interrupt vector of a device to use a previously
initialized or added primary MSI-X interrupt vector in order to share the
same vector address, vector data, interrupt handler, and handler arguments.
This feature allows a driver to alias the resources provided by the Solaris
Operating System to the unallocated interrupt vectors on an associated
device. For example, if 2 MSI-X interrupts were allocated to a driver and 32
interrupts were supported on the device, the driver could alias the 2
interrupts it received to the 30 remaining on the device.
.sp
.LP
The
.B ddi_intr_dup_handler()
function must be called after the primary
interrupt handle has been added to the system or enabled by
.BR ddi_intr_add_handler (9F)
and
.BR ddi_intr_enable "(9F) calls,"
respectively. If successful, the function returns the new interrupt handle
for a given vector in the
.I new
argument passed to the function. The new
interrupt handle must not have been previously allocated with
.BR ddi_intr_alloc (9F).
Otherwise, the
.B ddi_intr_dup_handler()
call
will fail.
.sp
.LP
The only supported calls on
.I dup-ed
interrupt handles are
.BR ddi_intr_set_mask (9F),
.BR ddi_intr_clr_mask (9F),
.BR ddi_intr_get_pending (9F),
.BR ddi_intr_enable (9F),
.BR ddi_intr_disable (9F),
and
.BR ddi_intr_free (9F).
.sp
.LP
A call to
.B ddi_intr_dup_handler()
does not imply that the interrupt
source is automatically enabled. Initially, the dup-ed handle is in the
disabled state and must be enabled before it can be used by calling
.BR ddi_intr_enable() .
Likewise,
.B ddi_intr_disable()
must be called
to disable the enabled dup-ed interrupt source.
.sp
.LP
A dup-ed interrupt is removed by calling
.B ddi_intr_free()
after it has
been disabled. The
.BR ddi_intr_remove_handler (9F)
call is not required
for a dup-ed handle.
.sp
.LP
Before removing the original MSI-X interrupt handler, all dup-ed interrupt
handlers associated with this MSI-X interrupt must have been disabled and
freed. Otherwise, calls to
.B ddi_intr_remove_handler()
will fail with
.BR DDI_FAILURE .
.sp
.LP
See the EXAMPLES section for code that illustrates the use of the
.B ddi_intr_dup_handler()
function.
.SH RETURN VALUES
.sp
.LP
The
.B ddi_intr_dup_handler()
function returns:
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 15n
.rt
On success.
.sp
Note that the interface should be verified to ensure that the return value
is not equal to
.BR DDI_SUCCESS .
Incomplete checking for failure codes
could result in inconsistent behavior among platforms.
.RE

.sp
.ne 2
.mk
.na
.B DDI_EINVAL
.ad
.RS 15n
.rt
On encountering invalid input parameters.
.B DDI_EINVAL
is also returned
if a dup is attempted from a dup-ed interrupt or if the hardware device is
found not to support MSI-X interrupts.
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 15n
.rt
On any implementation specific failure.
.RE

.SH EXAMPLES
.LP
.B Example 1
Using the
.B ddi_intr_dup_handler()
function
.sp
.in +2
.nf
int
add_msix_interrupts(intr_state_t *state)
{
  int x, y;

  /*
   * For this example, assume the device supports multiple
   * interrupt vectors, but only request to be allocated
   * 1 MSI-X to use and then dup the rest.
   */
  if (ddi_intr_get_nintrs(state->dip, DDI_INTR_TYPE_MSIX,
     &state->intr_count) != DDI_SUCCESS) {
          cmn_err(CE_WARN, "Failed to retrieve the MSI-X interrupt count");
          return (DDI_FAILURE);
  }

  state->intr_size = state->intr_count * sizeof (ddi_intr_handle_t);
  state->intr_htable = kmem_zalloc(state->intr_size, KM_SLEEP);

  /* Allocate one MSI-X interrupt handle */
  if (ddi_intr_alloc(state->dip, state->intr_htable,
      DDI_INTR_TYPE_MSIX, state->inum, 1, &state->actual,
      DDI_INTR_ALLOC_STRICT) != DDI_SUCCESS) {
          cmn_err(CE_WARN, "Failed to allocate MSI-X interrupt");
          kmem_free(state->intr_htable, state->intr_size);
          return (DDI_FAILURE);
  }

  /* Get the count of how many MSI-X interrupts we dup */
  state->dup_cnt = state->intr_count - state->actual;

  if (ddi_intr_get_pri(state->intr_htable[0],
      &state->intr_pri) != DDI_SUCCESS) {
          cmn_err(CE_WARN, "Failed to get interrupt priority");
          goto error1;
  }

  /* Make sure the MSI-X priority is below 'high level' */
  if (state->intr_pri >= ddi_intr_get_hilevel_pri()) {
         cmn_err(CE_WARN, "Interrupt PRI is too high");
          goto error1;
  }

  /*
   * Add the handler for the interrupt
   */
  if (ddi_intr_add_handler(state->intr_htable[0],
      (ddi_intr_handler_t *)intr_isr, (caddr_t)state,
      NULL) != DDI_SUCCESS) {
          cmn_err(CE_WARN, "Failed to add interrupt handler");
          goto error1;
  }

  /* Enable the main MSI-X handle first */
  if (ddi_intr_enable(state->intr_htable[0]) != DDI_SUCCESS) {
          cmn_err(CE_WARN, "Failed to enable interrupt");
          goto error2;
  }

  /*
   * Create and enable dups of the original MSI-X handler, note
   * that the inum we are using starts at 0.
   */
  for (x = 1; x < state->dup_cnt; x++) {
      if (ddi_intr_dup_handler(state->intr_htable[0],
          state->inum + x, &state->intr_htable[x]) != DDI_SUCCESS) {
              for (y = x - 1; y > 0; y--) {
                  (void) ddi_intr_disable(state->intr_htable[y]);
                  (void) ddi_intr_free(state->intr_htable[y]);
              }

          goto error2;
      }
      if (ddi_intr_enable(state->intr_htable[x]) != DDI_SUCCESS) {
          for (y = x; y > 0; y--) {
              (void) ddi_intr_disable(state->intr_htable[y]);
              (void) ddi_intr_free(state->intr_htable[y]);
          }

          goto error2;
      }
  }

  return (DDI_SUCCESS);

error2:
    (void) ddi_intr_remove_handler(state->intr_htable[0]);
error1:
    (void) ddi_intr_free(state->intr_htable[0]);

    kmem_free(state->intr_htable, state->intr_size);
    return (DDI_FAILURE);
}

void
remove_msix_interrupts(intr_state_t *state)
{
    int x;

    /*
     * Disable all the handles and free the dup-ed handles
     * before we can remove the main MSI-X interrupt handle.
     */
    for (x = 1; x < state->dup_cnt; x++) {
        (void) ddi_intr_disable(state->intr_htable[x]);
        (void) ddi_intr_free(state->intr_htable[x]);
    }

    /*
     * We can remove and free the main MSI-X handler now
     * that all the dups have been freed.
     */
    (void) ddi_intr_disable(state->intr_htable[0]);
    (void) ddi_intr_remove_handler(state->intr_htable[0]);
    (void) ddi_intr_free(state->intr_htable[0]);

    kmem_free(state->intr_htable, state->intr_size);
}
.fi
.in -2

.SH CONTEXT
.sp
.LP
The
.B ddi_intr_dup_handler()
function can be called from kernel
non-interrupt context.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR attributes (5),
.BR ddi_intr_add_handler (9F),
.BR ddi_intr_alloc (9F),
.BR ddi_intr_clr_mask (9F),
.BR ddi_intr_disable (9F),
.BR ddi_intr_enable (9F),
.BR ddi_intr_free (9F),
.BR ddi_intr_get_pending (9F),
.BR ddi_intr_get_supported_types (9F),
.BR ddi_intr_set_mask (9F)
.sp
.LP
.I Writing Device Drivers
