'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH csx_GetTupleData 9F "20 Dec 1996" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
csx_GetTupleData \- return the data portion of a tuple
.SH SYNOPSIS
.LP
.nf
#include <sys/pccard.h>



\fBint32_t\fR \fBcsx_GetTupleData\fR(\fBclient_handle_t\fR \fIch\fR, \fBtuple_t *\fItu\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris
.B DDI
Specific (Solaris
.B DDI)
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I ch
.ad
.RS 6n
.rt
Client handle returned from
.BR csx_RegisterClient (9F).
.RE

.sp
.ne 2
.mk
.na
.I tu
.ad
.RS 6n
.rt
Pointer to a
.B tuple_t
structure.
.RE

.SH DESCRIPTION
.sp
.LP
This function returns the data portion of a tuple, as returned by the
.BR csx_GetFirstTuple (9F)
and
.BR csx_GetNextTuple (9F)
functions.
.SH STRUCTURE MEMBERS
.sp
.LP
The structure members of
.B tuple_t
are:
.sp
.LP
The fields are defined as follows:
.sp
.in +2
.nf
uint32_t  Socket;                           /* socket number */
uint32_t  Attributes;                       /* tuple attributes*/
cisdata_t DesiredTuple;                     /* tuple to search for*/
cisdata_t TupleOffset;                      /* tuple data offset*/
cisdata_t TupleDataMax;                     /* max tuple data size*/
cisdata_t TupleDataLen;                     /* actual tuple data length*/
cisdata_t TupleData[CIS_MAX_TUPLE_DATA_LEN];/* tuple body data buffer*/
cisdata_t TupleCode;                        /* tuple type code*/
cisdata_t TupleLink;                        /* tuple link */
.fi
.in -2

.sp
.ne 2
.mk
.na
.B Socket
.ad
.RS 16n
.rt
Not used in Solaris, but for portability with other Card Services
implementations, it should be set to the logical socket number.
.RE

.sp
.ne 2
.mk
.na
.B Attributes
.ad
.RS 16n
.rt
Initialized by
.BR csx_GetFirstTuple "(9F) or"
.BR csx_GetNextTuple (9F);
the client must not modify the value in this field.
.RE

.sp
.ne 2
.mk
.na
.B DesiredTuple
.ad
.RS 16n
.rt
Initialized by
.BR csx_GetFirstTuple "(9F) or"
.BR csx_GetNextTuple (9F);
the client must not modify the value in this field.
.RE

.sp
.ne 2
.mk
.na
.B TupleOffset
.ad
.RS 16n
.rt
This field allows partial tuple information to be retrieved, starting
anywhere within the tuple.
.RE

.sp
.ne 2
.mk
.na
.B TupleDataMax
.ad
.RS 16n
.rt
This field is the size of the tuple data buffer that Card Services uses to
return raw tuple data from
.BR csx_GetTupleData .
It can be larger than the
number of bytes in the tuple data body. Card Services ignores any value
placed here by the client.
.RE

.sp
.ne 2
.mk
.na
.B TupleDataLen
.ad
.RS 16n
.rt
This field is the actual size of the tuple data body. It represents the
number of tuple data body bytes returned.
.RE

.sp
.ne 2
.mk
.na
.B TupleData
.ad
.RS 16n
.rt
This field is an array of bytes containing the raw tuple data body
contents.
.RE

.sp
.ne 2
.mk
.na
.B TupleCode
.ad
.RS 16n
.rt
Initialized by
.BR csx_GetFirstTuple "(9F) or"
.BR csx_GetNextTuple (9F);
the client must not modify the value in this field.
.RE

.sp
.ne 2
.mk
.na
.B TupleLink
.ad
.RS 16n
.rt
Initialized by
.BR csx_GetFirstTuple "(9F) or"
.BR csx_GetNextTuple (9F);
the client must not modify the value in this field.
.RE

.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B CS_SUCCESS
.ad
.RS 27n
.rt
Successful operation.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_HANDLE
.ad
.RS 27n
.rt
Client handle is invalid.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_ARGS
.ad
.RS 27n
.rt
Data from prior
.BR csx_GetFirstTuple "(9F) or"
.BR csx_GetNextTuple (9F)
is corrupt.
.RE

.sp
.ne 2
.mk
.na
.B CS_NO_CARD
.ad
.RS 27n
.rt
No
.B PC
Card in socket.
.RE

.sp
.ne 2
.mk
.na
.B CS_NO_CIS
.ad
.RS 27n
.rt
No Card Information Structure (CIS) on
.B PC
Card.
.RE

.sp
.ne 2
.mk
.na
.B CS_NO_MORE_ITEMS
.ad
.RS 27n
.rt
Card Services was not able to read the tuple from the
.B PC
Card.
.RE

.sp
.ne 2
.mk
.na
.B CS_UNSUPPORTED_FUNCTION
.ad
.RS 27n
.rt
No
.B PCMCIA
hardware installed.
.RE

.SH CONTEXT
.sp
.LP
This function may be called from user or kernel context.
.SH SEE ALSO
.sp
.LP
.BR csx_GetFirstTuple (9F),
.BR csx_ParseTuple (9F),
.BR csx_RegisterClient (9F),
.BR csx_ValidateCIS (9F),
.BR tuple (9S)
.sp
.LP
.I PC Card 95 Standard, PCMCIA/JEIDA
