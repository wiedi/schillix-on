'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc., All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH memchr 9F "16 Jan 2014" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
memchr, memcmp, memcpy, memmove, memset \- Memory operations
.SH SYNOPSIS
.LP
.nf
#include <sys/sunddi.h>



\fBvoid *\fBmemchr\fR(\fBconst void *\fIs\fR, \fBint\fR \fIc\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBint\fR \fBmemcmp\fR(\fBconst void *\fIs1\fR, \fBconst void *\fIs2\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBvoid *\fBmemcpy\fR(\fBvoid *restrict\fR \fIs1\fR, \fBconst void *restrict\fR \fIs2\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBvoid *\fBmemmove\fR(\fBvoid *\fIs1\fR, \fBconst void *\fIs2\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBvoid *\fBmemset\fR(\fBvoid *\fIs\fR, \fBint\fR \fIc\fR, \fBsize_t\fR \fIn\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I dst
.ad
.RS 10n
.rt
Pointers to character strings.
.RE

.sp
.ne 2
.mk
.na
.I n
.ad
.RS 10n
.rt
Count of characters to be copied.
.RE

.sp
.ne 2
.mk
.na
.IR s1 ,
.I s2
.ad
.RS 10n
.rt
Pointers to character strings.
.RE

.SH DESCRIPTION
.sp
.LP
These functions operate as efficiently as possible on memory areas (arrays
of bytes bounded by a count, not terminated by a null character). They do
not check for the overflow of any receiving memory area.
.sp
.LP
The
.B memchr()
function returns a pointer to the first occurrence of
.I c
(converted to an
.BR "unsigned char" )
in the first
.I n
bytes
(each interpreted as an
.BR "unsigned char" )
of memory area
.IR s ,
or a
null pointer if
.I c
does not occur.
.sp
.LP
The
.B memcmp()
function compares its arguments, looking at the first
.I n
bytes (each interpreted as an
.BR "unsigned char" ),
and returns an
integer less than, equal to, or greater than 0, according as
.I s1
is
lexicographically less than, equal to, or greater than
.I s2
when taken
to be unsigned characters.
.sp
.LP
The
.B memcpy()
function copies
.I n
bytes from memory area
.IR s2
to
.IR s1 .
It returns
.IR s1 .
If copying takes place between objects
that overlap, the behavior is undefined.
.sp
.LP
The
.B memmove()
function copies
.I n
bytes from memory area
.IR s2
to memory area
.IR s1 .
Copying between objects that overlap will take
place correctly. It returns
.IR s1 .
.sp
.LP
The
.B memset()
function sets the first
.I n
bytes in memory area
.I s
to the value of
.I c
(converted to an
.BR "unsigned char" ).
It
returns
.IR s .
.SH USAGE
.sp
.LP
Using
.B memcpy()
might be faster than using
.B memmove()
if the
application knows that the objects being copied do not overlap.
.SH CONTEXT
.sp
.LP
These functions can be called from user, interrupt, or kernel context.
.SH SEE ALSO
.sp
.LP
.BR bcopy (9F),
.BR ddi_copyin (9F),
.BR strcpy (9F)
.sp
.LP
.I Writing Device Drivers
