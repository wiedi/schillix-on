'\" te
.\" Copyright 1989 AT&T
.\" Copyright (c) 2006, Sun Microsystems, Inc.,  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH putctl 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
putctl \- send a control message to a queue
.SH SYNOPSIS
.LP
.nf
#include <sys/stream.h>



\fBint\fR \fBputctl\fR(\fBqueue_t *\fIq\fR, \fBint\fR \fItype\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Architecture independent level 1 (DDI/DKI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I q
.ad
.RS 8n
.rt
Queue to which the message is to be sent.
.RE

.sp
.ne 2
.mk
.na
.I type
.ad
.RS 8n
.rt
Message type (must be control, not data type).
.RE

.SH DESCRIPTION
.sp
.LP
The
.B putctl()
function tests the
.I type
argument to make sure a
data type has not been specified, and then attempts to allocate a message
block.
.B putctl()
fails if
.I type
is
.BR M_DATA ,
.BR M_PROTO ,
or
.BR M_PCPROTO ,
or if a message block cannot be allocated. If successful,
.B putctl()
calls the \fBput\fR(9E) routine of the queue pointed to by
.I q
with the newly allocated and initialized messages.
.SH RETURN VALUES
.sp
.LP
On success,
.B 1
is returned. If
.I type
is a data type, or if a
message block cannot be allocated,
.B 0
is returned.
.SH CONTEXT
.sp
.LP
The
.B putctl()
function can be called from user, interrupt, or kernel
context.
.SH EXAMPLES
.LP
.B Example 1
Using
.BR putctl()
.sp
.LP
The
.B send_ctl()
routine is used to pass control messages downstream.
.B M_BREAK
messages are handled with
.B putctl()
(line 11).
.BR putctl1 (9F)
(line 16) is used for
.B M_DELAY
messages, so that
.I parm
can be used to specify the length of the delay. In either case,
if a message block cannot be allocated a variable recording the number of
allocation failures is incremented (lines 12, 17). If an invalid message
type is detected,
.BR cmn_err (9F)
panics the system (line 21).

.sp
.in +2
.nf
1  void
 2  send_ctl(wrq, type, parm)
 3      queue_t *wrq;
 4      uchar_t type;
 5      uchar_t parm;
 6  {
 7	      extern int num_alloc_fail;
 8
 9       switch (type) {
10	      case M_BREAK:
11             if (!putctl(wrq->q_next, M_BREAK))
12                      num_alloc_fail++;
13	            break;
14
15       case M_DELAY:
16             if (!putctl1(wrq->q_next, M_DELAY, parm))
17                      num_alloc_fail++;
18             break;
19
20       default:
21             cmn_err(CE_PANIC, "send_ctl: bad message type passed");
22	            break;
23	      }
24  }
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR put (9E),
.BR cmn_err (9F),
.BR datamsg (9F),
.BR putctl1 (9F),
.BR putnextctl (9F)
.sp
.LP
.I Writing Device Drivers
.sp
.LP
.I STREAMS Programming Guide
