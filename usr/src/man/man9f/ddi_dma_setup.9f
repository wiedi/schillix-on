'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_dma_setup 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_dma_setup \- setup DMA resources
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint\fR \fBddi_dma_setup\fR(\fBdev_info_t *\fIdip\fR, \fBddi_dma_req_t *\fIdmareqp\fR,
     \fBddi_dma_handle_t *\fIhandlep\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
This interface is obsolete. The functions
.BR ddi_dma_addr_bind_handle (9F),
.BR ddi_dma_alloc_handle (9F),
\fBddi_dma_buf_bind_handle\fR(9F), \fBddi_dma_free_handle\fR(9F), and
.BR ddi_dma_unbind_handle (9F)
should be used instead.
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 11n
.rt
A pointer to the device's \fBdev_info\fR structure.
.RE

.sp
.ne 2
.mk
.na
.I dmareqp
.ad
.RS 11n
.rt
A pointer to a
.B DMA
request structure (see
.BR ddi_dma_req (9S)).
.RE

.sp
.ne 2
.mk
.na
.I handlep
.ad
.RS 11n
.rt
A pointer to a
.B DMA
handle to be filled in. See below for a discussion
of a handle. If
.I handlep
is
.IR NULL ,
the call to
\fBddi_dma_setup()\fR is considered an advisory call, in which case no
resources are allocated, but a value indicating the legality and the
feasibility of the request is returned.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B ddi_dma_setup()
function allocates resources for a memory object
such that a device can perform
.B DMA
to or from that object.
.sp
.LP
A call to
.B ddi_dma_setup()
informs the system that device referred to
by
.I dip
wishes to perform
.B DMA
to or from a memory object. The
memory object, the device's
.B DMA
capabilities, the device driver's
policy on whether to wait for resources, are all specified in the
\fBddi_dma_req\fR structure pointed to by
.IR dmareqp .
.sp
.LP
A successful call to
.B ddi_dma_setup()
fills in the value pointed to by
.IR handlep .
This is an opaque object called a
.B DMA
handle. This
handle is then used in subsequent
.B DMA
calls, until
\fBddi_dma_free\fR(9F) is called.
.sp
.LP
Again a
.B DMA
handle is opaque\(emdrivers may
.B not
attempt to
interpret its value. When a driver wants to enable its
.B DMA
engine, it
must retrieve the appropriate address to supply to its
.B DMA
engine
using a call to
.BR ddi_dma_htoc "(9F), which takes a pointer to a"
\fBDMA\fR handle and returns the appropriate \fBDMA\fR address.
.sp
.LP
When
.B DMA
transfer completes, the driver should free up the allocated
\fBDMA\fR resources by calling \fBddi_dma_free()\fR
.SH RETURN VALUES
.sp
.LP
The
.B ddi_dma_setup()
function returns:
.sp
.ne 2
.mk
.na
.B DDI_DMA_MAPPED
.ad
.RS 23n
.rt
Successfully allocated resources for the object. In the case of an
\fBadvisory\fR call, this indicates that the request is legal.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_PARTIAL_MAP
.ad
.RS 23n
.rt
Successfully allocated resources for a
.B part
of the object. This is
acceptable when partial transfers are allowed using a flag setting in the
\fBddi_dma_req\fR structure (see \fBddi_dma_req\fR(9S) and
.BR ddi_dma_movwin (9F)).
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_NORESOURCES
.ad
.RS 23n
.rt
When no resources are available.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_NOMAPPING
.ad
.RS 23n
.rt
The object cannot be reached by the device requesting the resources.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_TOOBIG
.ad
.RS 23n
.rt
The object is too big and exceeds the available resources. The maximum size
varies depending on machine and configuration.
.RE

.SH CONTEXT
.sp
.LP
The
.B ddi_dma_setup()
function can be called from user, interrupt, or
kernel context, except when the \fBdmar_fp\fR member of the
\fBddi_dma_req\fR structure pointed to by \fIdmareqp\fR is set to
.BR DDI_DMA_SLEEP ,
in which case it cannot be called from interrupt
context.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
\fBATTRIBUTE TYPE\fR\fBATTRIBUTE VALUE\fR
_
Stability LevelObsolete
.TE

.SH SEE ALSO
.sp
.LP
.BR attributes (5),
.BR ddi_dma_addr_bind_handle (9F),
.BR ddi_dma_alloc_handle (9F),
.BR ddi_dma_buf_bind_handle (9F),
\fBddi_dma_free_handle\fR(9F), \fBddi_dma_unbind_handle\fR(9F)\fBddi_dma_addr_setup\fR(9F),
\fBddi_dma_buf_setup\fR(9F), \fBddi_dma_free\fR(9F),
.BR ddi_dma_htoc (9F),
.BR ddi_dma_movwin (9F),
.BR ddi_dma_sync (9F),
.BR ddi_dma_req (9S)
.sp
.LP
.I Writing Device Drivers
.SH NOTES
.sp
.LP
The construction of the
.B ddi_dma_req
structure is complicated. Use of
the provided interface functions such as \fBddi_dma_buf_setup\fR(9F)
simplifies this task.
