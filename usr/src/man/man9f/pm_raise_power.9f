'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH pm_raise_power 9F "22 March 2005" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
pm_raise_power, pm_lower_power \- Raise or lower power of components
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>

\fBint\fR \fBpm_raise_power\fR(\fBdev_info_t *\fIdip,\fR int \fIcomponent\fR, int \fIlevel\fR);
.fi

.LP
.nf
\fBint\fR \fBpm_lower_power\fR(\fBdev_info_t *\fIdip,\fR int \fIcomponent\fR, int \fIlevel\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH PARAMETERS
.SS "pm_raise_power"
.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 13n
.rt
Pointer to the device's
.B dev_info
structure
.RE

.sp
.ne 2
.mk
.na
.I component
.ad
.RS 13n
.rt
The number of the
.I component
for which a power level change is desired
.RE

.sp
.ne 2
.mk
.na
.I level
.ad
.RS 13n
.rt
The power level to which the indicated
.I component
will be raised
.RE

.SS "pm_lower_power"
.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 13n
.rt
Pointer to the device's
.B dev_info
structure
.RE

.sp
.ne 2
.mk
.na
.I component
.ad
.RS 13n
.rt
Number of the
.I component
for which a power level change is desired
.RE

.sp
.ne 2
.mk
.na
.I level
.ad
.RS 13n
.rt
Power level to which the indicated
.I component
will be lowered
.RE

.SH DESCRIPTION
.sp
.LP
The \fBpm_raise_power\fR(9F) function requests the Power Management framework
to raise the power level of
.I component
of
.I dip
to at least \fIlevel.
\fR 
.sp
.LP
The state of the device should be examined before each physical access. The
.BR pm_raise_power (9F)
function should be called to set a
.I component
to
the required power level if the operation to be performed requires the
.I component
to be at a power level higher than its current power level.
.sp
.LP
When
.BR pm_raise_power "(9F) returns with success, the"
.I component
is
guaranteed to be at least at the requested power level. All devices that depend
on this will be at their full power level. Since the actual device power level
may be higher than requested by the driver, the driver should not make any
assumption about the absolute power level on successful return from
.BR pm_raise_power (9F).
.sp
.LP
The \fBpm_raise_power\fR(9F) function may cause re-entry of the driver
.BR power (9E)
to raise the power level. Deadlock may result if the driver
locks are held across the call to
.BR pm_raise_power (9F).
.sp
.LP
The \fBpm_lower_power\fR(9F) function requests the Power Management framework
to lower the power level of
.I component
of
.I dip
to at most
.IR level .
.sp
.LP
Normally, transitions to lower power levels are initiated by the Power
Management framework based on
.I component
idleness. However, when
detaching, the driver should also initiate reduced power levels by setting the
power level of all device components to their lowest levels. The
.BR pm_lower_power (9F)
function is intended for this use only, and will
return
.B DDI_FAILURE
if the driver is not detaching at the time of the
call.
.sp
.LP
If automatic Power Management is disabled (see
.BR dtpower (1M)
and
.BR power.conf (4)),
.BR pm_lower_power (9F)
returns
.BR DDI_SUCCESS
without changing the power level of the component. Otherwise, when
.BR pm_lower_power (9F)
returns with success, the
.I component
is
guaranteed to be at most at the requested power level. Since the actual device
power level may be lower than requested by the driver, the driver should not
make any assumption about the absolute power level on successful return from
.BR pm_lower_power (9F).
.sp
.LP
The \fBpm_lower_power\fR(9F) function may cause re-entry of the driver
.BR power (9E)
to lower the power level. Deadlock may result if the driver
locks are held across the call to
.BR pm_lower_power (9F).
.LP
Note -
.sp
.RS 2
If these functions are called as a result of entry into the driver's
.BR attach (9E),
.BR detach (9E)
or
.BR power "(9E) entry point, these"
functions must be called from the same thread which entered
.BR attach (9E),
.BR detach (9E)
or
.BR power (9E).
.RE
.SH RETURN VALUES
.sp
.LP
The \fBpm_raise_power\fR(9F) function returns:
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 15n
.rt
.I Component
is now at the requested power level or higher.
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 15n
.rt
.I Component
or
.I level
is out of range, or the framework was unable to
raise the power level of the component to the requested level.
.RE

.sp
.LP
The \fBpm_lower_power\fR(9F) function returns:
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 15n
.rt
.I  Component
is now at the requested power level or lower, or automatic
Power Management is disabled.
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 15n
.rt
.I  Component
or
.I level
is out of range, or the framework was unable
to lower the power level of the component to the requested level, or the device
is not detaching.
.RE

.SH EXAMPLES
.sp
.LP
A hypothetical disk driver might include this code to handle
.BR pm_raise_power (9F):
.sp
.in +2
.nf
static int
xxdisk_strategy(struct buf *bp)
{

 ...

       /*
        * At this point we have determined that we need to raise the
        * power level of the device. Since we have to drop the
        * mutex, we need to take care of case where framework is
        * lowering power at the same time we are raising power.
        * We resolve this by marking the device busy and failing
        * lower power in power() entry point when device is busy.
        */

        ASSERT(mutex_owned(xsp->lock));
        if (xsp->pm_busycnt < 1) {
       /*
		   * Component is not already marked busy
		   */
         if (pm_busy_component(xsp->dip,
		        XXDISK_COMPONENT) != DDI_SUCCESS) {
			       bioerror(bp,EIO);
			       biodone(bp);
			       return (0);
		           }
		           xsp->pm_busycnt++;
        }
        mutex_exit(xsp->lock);
        if (pm_raise_power(xsp->dip,
	          XXDISK_COMPONENT, XXPOWER_SPUN_UP) != DDI_SUCCESS) {
		          bioerror(bp,EIO);
		          biodone(bp);
		          return (0);
        }
	      mutex_enter(xsp->lock);

	      ....

}


xxdisk_power(dev_info *dip, int comp, int level)
{

\&...

       /*
        * We fail the power() entry point if the device is busy and
        * request is to lower the power level.

*/

        ASSERT(mutex_owned( xsp->lock));
        if (xsp->pm_busycnt >= 1) {
		       if (level < xsp->cur_level) {
                        mutex_exit( xsp->lock);
                        return (DDI_FAILURE);
                }
        }

\&...

}
.fi
.in -2

.SH CONTEXT
.sp
.LP
These functions can be called from user or kernel context.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attribute:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface stabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR power.conf (4),
.BR pm (7D),
.BR attach (9E),
.BR detach (9E),
.BR power (9E),
.BR pm_busy_component (9F),
.BR pm_idle_component (9F),
.BR pm (9P),
.BR pm-components (9P)
.sp
.LP
.I Writing Device Drivers
