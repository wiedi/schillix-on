'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH semaphore 9F "7 May 1997" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
semaphore, sema_init, sema_destroy, sema_p, sema_p_sig, sema_v, sema_tryp
\- semaphore functions
.SH SYNOPSIS
.LP
.nf
#include <sys/ksynch.h>



\fBvoid\fR \fBsema_init\fR(\fBksema_t *\fIsp\fR, \fBuint_t\fR \fIval\fR, \fBchar *\fIname\fR, \fBksema_type_t\fR \fItype\fR,
      \fBvoid *\fIarg\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsema_destroy\fR(\fBksema_t *\fIsp\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsema_p\fR(\fBksema_t *\fIsp\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsema_v\fR(\fBksema_t *\fIsp\fR);
.fi

.LP
.nf
\fBint\fR \fBsema_p_sig\fR(\fBksema_t *\fIsp\fR);
.fi

.LP
.nf
\fBint\fR \fBsema_tryp\fR(\fBksema_t *\fIsp\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris
.B DDI
specific (Solaris
.BR DDI ).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I sp
.ad
.RS 8n
.rt
A pointer to a semaphore, type
.BR ksema_t .
.RE

.sp
.ne 2
.mk
.na
.I val
.ad
.RS 8n
.rt
Initial value for semaphore.
.RE

.sp
.ne 2
.mk
.na
.I name
.ad
.RS 8n
.rt
Descriptive string. This is obsolete and should be
.IR NULL .
(Non-\fINULL\fR strings are legal, but they are a waste of kernel memory.)
.RE

.sp
.ne 2
.mk
.na
.I type
.ad
.RS 8n
.rt
Variant type of the semaphore. Currently, only
.B SEMA_DRIVER
is
supported.
.RE

.sp
.ne 2
.mk
.na
.I arg
.ad
.RS 8n
.rt
Type-specific argument; should be
.IR NULL .
.RE

.SH DESCRIPTION
.sp
.LP
These functions implement counting semaphores as described by Dijkstra. A
semaphore has a value which is atomically decremented by
.B sema_p()
and
atomically incremented by
.BR sema_v() .
The value must always be greater
than or equal to zero. If
.B sema_p()
is called and the value is zero,
the calling thread is blocked until another thread performs a
.BR sema_v()
operation on the semaphore.
.sp
.LP
Semaphores are initialized by calling
.BR sema_init() .
The argument,
.BR val ,
gives the initial value for the semaphore. The semaphore storage
is provided by the caller but more may be dynamically allocated, if
necessary, by
.BR sema_init() .
.RB "For this reason," " sema_destroy()"
should be called before deallocating the storage containing the semaphore.
.sp
.LP
The
.B sema_p_sig()
function decrements the semaphore, as does
.BR sema_p() .
However, if the semaphore value is zero, \fBsema_p_sig()\fR
will return without decrementing the value if a signal (that is, from
.BR kill (2))
is pending for the thread.
.sp
.LP
The
.B sema_tryp()
function will decrement the semaphore value only if
it is greater than zero, and will not block.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 5n
.rt
\fBsema_tryp()\fR could not decrement the semaphore value because it was
zero.
.RE

.sp
.ne 2
.mk
.na
.B 1
.ad
.RS 5n
.rt
\fBsema_p_sig()\fR was not able to decrement the semaphore value and
detected a pending signal.
.RE

.SH CONTEXT
.sp
.LP
These functions can be called from user, interrupt, or kernel context,
except for
.B sema_init()
and
.BR sema_destroy() ,
which can be called
from user or kernel context only. None of these functions can be called from
a high-level interrupt context. In most cases,
.B sema_v()
and
\fBsema_p()\fR should not be called from any interrupt context.
.sp
.LP
If
.B sema_p()
is used from interrupt context, lower-priority interrupts
will not be serviced during the wait. This means that if the thread that
will eventually perform the
.B sema_v()
becomes blocked on anything that
requires the lower-priority interrupt, the system will hang.
.sp
.LP
For example, the thread that will perform the
.B sema_v()
may need to
first allocate memory. This memory allocation may require waiting for paging
\fBI/O\fR to complete, which may require a lower-priority disk or network
interrupt to be serviced. In general, situations like this are hard to
predict, so it is advisable to avoid waiting on semaphores or condition
variables in an interrupt context.
.SH SEE ALSO
.sp
.LP
.BR kill (2),
.BR condvar (9F),
.BR mutex (9F)
.sp
.LP
.I Writing Device Drivers
