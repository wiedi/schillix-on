'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_intr_add_handler 9F "22 Apr 2005" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_intr_add_handler, ddi_intr_remove_handler \- add or remove interrupt
handler
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/conf.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint\fR \fBddi_intr_add_handler\fR(\fBddi_intr_handle_t *\fIh\fR,
     \fBddi_intr_handler_t\fR \fIinthandler\fR, \fBvoid *\fIarg1\fR,
      \fBvoid *\fIarg2\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_intr_remove_handler\fR(\fBddi_intr_handle_t\fR \fIh\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.LP
.B ddi_intr_add_handler()
.sp
.ne 2
.mk
.na
.I h
.ad
.RS 14n
.rt
Pointer to the DDI interrupt handle
.RE

.sp
.ne 2
.mk
.na
.I inthandler
.ad
.RS 14n
.rt
Pointer to interrupt handler
.RE

.sp
.ne 2
.mk
.na
.I arg1
.ad
.RS 14n
.rt
First argument for the interrupt handler
.RE

.sp
.ne 2
.mk
.na
.I arg2
.ad
.RS 14n
.rt
Second, optional, argument for the interrupt handler
.RE

.sp
.LP
.B ddi_intr_remove_handler()
.sp
.ne 2
.mk
.na
.I h
.ad
.RS 5n
.rt
DDI interrupt handle
.RE

.SH DESCRIPTION
.sp
.LP
The
.B ddi_intr_add_handler()
function adds an interrupt handler given
by the
.I inthandler
argument to the system with the handler arguments
\fIarg1\fR and \fIarg2\fR for the previously allocated interrupt handle
specified by the
.I h
pointer. The arguments
.I arg1
and
.IR arg2
are passed as the first and second arguments, respectively, to the interrupt
handler
.IR inthandler .
See
.B <sys/ddi_intr.h>
for the definition of
the interrupt handler.
.sp
.LP
The routine
.I inthandler
with the arguments
.I arg1
and
.IR arg2
is called upon receipt of the appropriate interrupt. The interrupt handler
should return
.B DDI_INTR_CLAIMED
if the interrupt is claimed and
\fBDDI_INTR_UNCLAIMED\fR otherwise.
.sp
.LP
The
.B ddi_intr_add_handler()
function must be called after
.BR ddi_intr_alloc() ,
but before
.B ddi_intr_enable()
is called. The
interrupt must be enabled through
.B ddi_intr_enable()
or
\fBddi_intr_block_enable()\fR before it can be used.
.sp
.LP
The
.B ddi_intr_remove_handler()
function removes the handler
association, added previously with
.BR ddi_intr_add_handler() ,
for the
interrupt identified by the interrupt handle
.I h
argument. Unloadable
drivers should call this routine during their
.BR detach "(9E) routine to"
remove the interrupt handler from the system.
.sp
.LP
The
.B ddi_intr_remove_handler()
function is used to disassociate the
handler after the interrupt is disabled to remove
.B dup-ed
interrupt
handles. See \fBddi_intr_dup_handler\fR(9F) for
.B dup-ed
interrupt
handles. If a handler is duplicated with the \fBddi_intr_dup_handler()\fR
function, all added and duplicated instances of the handler must be removed
with
.B ddi_intr_remove_handler()
in order for the handler to be
completely removed.
.SH RETURN VALUES
.sp
.LP
The
.B ddi_intr_add_handler()
and
.BR ddi_intr_remove_handler()
functions return:
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 15n
.rt
On success.
.RE

.sp
.ne 2
.mk
.na
.B DDI_EINVAL
.ad
.RS 15n
.rt
On encountering invalid input parameters.
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 15n
.rt
On any implementation specific failure.
.RE

.SH CONTEXT
.sp
.LP
The
.B ddi_intr_add_handler()
and
.BR ddi_intr_remove_handler()
functions can be called from kernel non-interrupt context.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR attributes (5),
.BR attach (9E),
.BR detach (9E),
.BR ddi_intr_alloc (9F),
.BR ddi_intr_block_enable (9F),
.BR ddi_intr_disable (9F),
.BR ddi_intr_dup_handler (9F),
.BR ddi_intr_enable (9F),
\fBddi_intr_free\fR(9F),
.BR ddi_intr_get_supported_types (9F),
.BR mutex (9F),
.BR mutex_init (9F),
.BR rw_init (9F),
.BR rwlock (9F)
.sp
.LP
.I Writing Device Drivers
.SH NOTES
.sp
.LP
Consumers of these interfaces should verify that the return value is not
equal to
.BR DDI_SUCCESS .
Incomplete checking for failure codes could
result in inconsistent behavior among platforms.
.sp
.LP
If a device driver that uses
.B MSI
and
.B MSI-X
interrupts resets
the device, the device might reset its configuration space modifications.
Such a reset could cause a device driver to lose any
.B MSI
and
\fBMSI-X\fR interrupt usage settings that have been applied.
.sp
.LP
The second argument,
.IR arg2 ,
is optional. Device drivers are free to
use the two arguments however they see fit. There is no officially
recommended model or restrictions. For example, an interrupt handler may
wish to use the first argument as the pointer to its softstate and the
second argument as the value of the MSI vector.
