'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH csx_RequestIO 9F "19 Jul 1996" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
csx_RequestIO, csx_ReleaseIO \- request or release I/O resources for the
client
.SH SYNOPSIS
.LP
.nf
#include <sys/pccard.h>



\fBint32_t\fR \fBcsx_RequestIO\fR(\fBclient_handle_t\fR \fIch\fR, \fBio_req_t *\fIir\fR);
.fi

.LP
.nf
\fBint32_t\fR \fBcsx_ReleaseIO\fR(\fBclient_handle_t\fR \fIch\fR, \fBio_req_t *\fIir\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris
.B DDI
Specific (Solaris
.BR DDI )
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I ch
.ad
.RS 6n
.rt
Client handle returned from
.BR csx_RegisterClient (9F).
.RE

.sp
.ne 2
.mk
.na
.I ir
.ad
.RS 6n
.rt
Pointer to an
.B io_req_t
structure.
.RE

.SH DESCRIPTION
.sp
.LP
The functions
.B csx_RequestIO()
and
.B csx_ReleaseIO()
request or
release, respectively,
.B I/O
resources for the client.
.sp
.LP
If a client requires
.B I/O
resources,
.B csx_RequestIO()
must be
called to request
.B I/O
resources from Card Services; then
.BR csx_RequestConfiguration (9F)
must be used to establish the
configuration.
.B csx_RequestIO()
can be called multiple times until a
successful set of
.B I/O
resources is found.
.BR csx_RequestConfiguration (9F)
only uses the last configuration
specified.
.sp
.LP
.B csx_RequestIO()
fails if it has already been called without a
corresponding
.BR csx_ReleaseIO() .
.sp
.LP
.B csx_ReleaseIO()
releases previously requested
.B I/O
resources.
The Card Services window resource list is adjusted by this function.
Depending on the adapter hardware, the
.B I/O
window might also be
disabled.
.SH STRUCTURE MEMBERS
.sp
.LP
The structure members of
.B io_req_t
are:
.sp
.in +2
.nf
uint32_t      Socket;            /* socket number*/

uint32_t      Baseport1.base;    /* IO range base port address */
acc_handle_t  Baseport1.handle;  /* IO range base address
                                  /*   or port num */
uint32_t      NumPorts1;         /* first IO range number contiguous
                                  /*   ports */
uint32_t      Attributes1;       /* first IO range attributes */

uint32_t      Baseport2.base;    /* IO range base port address */
acc_handle_t  Baseport2.handle;  /* IO range base address or port num */
uint32_t      NumPorts2;         /* second IO range number contiguous
                                  /*   ports */
uint32_t      Attributes2;       /* second IO range attributes */

uint32_t      IOAddrLines;       /* number of IO address lines decoded */
.fi
.in -2

.sp
.LP
The fields are defined as follows:
.sp
.ne 2
.mk
.na
.B Socket
.ad
.RS 20n
.rt
Not used in Solaris, but for portability with other Card Services
implementations, it should be set to the logical socket number.
.RE

.sp
.ne 2
.mk
.na
.B BasePort1.base
.ad
.br
.na
.B BasePort1.handle
.ad
.br
.na
.B BasePort2.base
.ad
.br
.na
.B BasePort2.handle
.ad
.RS 20n
.rt
Two
.B I/O
address ranges can be requested by
.BR csx_RequestIO() .
Each
.B I/O
address range is specified by the
.BR BasePort ,
.BR NumPorts ,
and
.B Attributes
fields. If only a single \fBI/O\fR
range is being requested, the
.B NumPorts2
field must be reset to
.BR 0 .
.sp
When calling
.BR csx_RequestIO() ,
the
.B BasePort.base
field specifies
the first port address requested. Upon successful return from
.BR csx_RequestIO() ,
the
.B BasePort.handle
field contains an access
handle, corresponding to the first byte of the allocated
.B I/O
window,
which the client must use when accessing the
.B PC
Card's
.B I/O
space
via the common access functions. A client
.I "must not"
make any
assumptions as to the format of the returned
.B BasePort.handle
field
value.
.sp
If the
.B BasePort.base
field is set to
.BR 0 ,
Card Services returns
an
.B I/O
resource based on the available
.B I/O
resources and the
number of contiguous ports requested. When
.B BasePort.base
is
.BR 0 ,
.RB "Card Services aligns the returned resource in the host system's" " I/O"
address space on a boundary that is a multiple of the number of contiguous
ports requested, rounded up to the nearest power of two. For example, if a
client requests two
.B I/O
ports, the resource returned will be a
multiple of two. If a client requests five contiguous
.B I/O
ports, the
resource returned will be a multiple of eight.
.sp
If multiple ranges are being requested, at least one of the
.B BasePort.base
fields must be non-zero.
.RE

.sp
.ne 2
.mk
.na
.B NumPorts
.ad
.RS 20n
.rt
This field is the number of contiguous ports being requested.
.RE

.sp
.ne 2
.mk
.na
.B Attributes
.ad
.RS 20n
.rt
This field is bit-mapped. The following bits are defined:
.sp
.ne 2
.mk
.na
.B IO_DATA_WIDTH_8
.ad
.RS 27n
.rt
.B I/O
resource uses 8-bit data path.
.RE

.sp
.ne 2
.mk
.na
.B IO_DATA_WIDTH_16
.ad
.RS 27n
.rt
.B I/O
resource uses 16-bit data path.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_NEVER_SWAP
.ad
.RS 27n
.rt
Host endian byte ordering.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_BIG_ENDIAN
.ad
.RS 27n
.rt
Big endian byte ordering
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_LITTLE_ENDIAN
.ad
.RS 27n
.rt
Little endian byte ordering.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_STRICT_ORDER
.ad
.RS 27n
.rt
Program ordering references.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_UNORDERED_OK
.ad
.RS 27n
.rt
May re-order references.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_MERGING_OK
.ad
.RS 27n
.rt
Merge stores to consecutive locations.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_LOADCACHING_OK
.ad
.RS 27n
.rt
May cache load operations.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_STORECACHING_OK
.ad
.RS 27n
.rt
May cache store operations.
.RE

For some combinations of host system busses and adapter hardware, the width
of an
.B I/O
resource can not be set via
.BR RequestIO() ;
on those
systems, the host bus cycle access type determines the
.B I/O
resource
data path width on a per-cycle basis.
.sp
.B WIN_ACC_BIG_ENDIAN
and
.B "WIN_ACC_LITTLE ENDIAN"
describe the
endian characteristics of the device as big endian or little endian,
respectively. Even though most of the devices will have the same endian
characteristics as their busses, there are examples of devices with an
.B I/O
processor that has opposite endian characteristics of the busses.
When
.B WIN_ACC_BIG_ENDIAN
or
.B "WIN_ACC_LITTLE ENDIAN"
is set,
byte swapping will automatically be performed by the system if the host
machine and the device data formats have opposite endian characteristics.
The implementation may take advantage of hardware platform byte swapping
capabilities.
.sp
When
.B WIN_ACC_NEVER_SWAP
is specified, byte swapping will not be
invoked in the data access functions. The ability to specify the order in
which the
.B CPU
will reference data is provided by the following
.B Attributes
bits. Only one of the following bits may be specified:
.sp
.ne 2
.mk
.na
.B WIN_ACC_STRICT_ORDER
.ad
.sp .6
.RS 4n
The data references must be issued by a
.B CPU
in program order. Strict
ordering is the default behavior.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_UNORDERED_OK
.ad
.sp .6
.RS 4n
The
.B CPU
may re-order the data references. This includes all kinds of
re-ordering (that is, a load followed by a store may be replaced by a store
followed by a load).
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_MERGING_OK
.ad
.sp .6
.RS 4n
The
.B CPU
may merge individual stores to consecutive locations. For
example, the
.B CPU
may turn two consecutive byte stores into one
halfword store. It may also batch individual loads. For example, the
.B CPU
may turn two consecutive byte loads into one halfword load.
.B IO_MERGING_OK_ACC
also implies re-ordering.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_LOADCACHING_OK
.ad
.sp .6
.RS 4n
The
.B CPU
may cache the data it fetches and reuse it until another
store occurs. The default behavior is to fetch new data on every load.
.B WIN_ACC_LOADCACHING_OK
also implies merging and re-ordering.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_STORECACHING_OK
.ad
.sp .6
.RS 4n
The
.B CPU
may keep the data in the cache and push it to the device
(perhaps with other data) at a later time. The default behavior is to push
the data right away.
.B WIN_ACC_STORECACHING_OK
also implies load
caching, merging, and re-ordering.
.RE

These values are advisory, not mandatory. For example, data can be ordered
without being merged or cached, even though a driver requests unordered,
merged and cached together. All other bits in the
.B Attributes
field
must be set to
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
.B IOAddrLines
.ad
.RS 20n
.rt
This field is the number of
.B I/O
address lines decoded by the
.BR PC
Card in the specified socket.
.RE

.sp
.LP
On some systems, multiple calls to
.B csx_RequestIO()
with different
.BR BasePort ,
.BR NumPorts ,
and/or
.B IOAddrLines
values will have to
be made to find an acceptable combination of parameters that can be used by
Card Services to allocate
.B I/O
resources for the client. (See
.BR NOTES ).
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B CS_SUCCESS
.ad
.RS 27n
.rt
Successful operation.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_ATTRIBUTE
.ad
.RS 27n
.rt
Invalid
.B Attributes
specified.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_BASE
.ad
.RS 27n
.rt
.B BasePort
value is invalid.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_HANDLE
.ad
.RS 27n
.rt
Client handle is invalid.
.RE

.sp
.ne 2
.mk
.na
.B CS_CONFIGURATION_LOCKED
.ad
.RS 27n
.rt
.BR csx_RequestConfiguration (9F)
has already been done.
.RE

.sp
.ne 2
.mk
.na
.B CS_IN_USE
.ad
.RS 27n
.rt
.B csx_RequestIO()
has already been done without a corresponding
.BR csx_ReleaseIO() .
.RE

.sp
.ne 2
.mk
.na
.B CS_NO_CARD
.ad
.RS 27n
.rt
No
.B PC
Card in socket.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_WINDOW
.ad
.RS 27n
.rt
Unable to allocate
.B I/O
resources.
.RE

.sp
.ne 2
.mk
.na
.B CS_OUT_OF_RESOURCE
.ad
.RS 27n
.rt
Unable to allocate
.B I/O
resources.
.RE

.sp
.ne 2
.mk
.na
.B CS_UNSUPPORTED_FUNCTION
.ad
.RS 27n
.rt
No
.B PCMCIA
hardware installed.
.RE

.SH CONTEXT
.sp
.LP
These functions may be called from user or kernel context.
.SH SEE ALSO
.sp
.LP
.BR csx_RegisterClient (9F),
.BR csx_RequestConfiguration (9F)
.sp
.LP
.IR "PC Card 95 Standard" ,
PCMCIA/JEIDA
.SH NOTES
.sp
.LP
It is important for clients to try to use the minimum amount of
.BR I/O
resources necessary. One way to do this is for the client to parse the
.B CIS
of the
.B PC
Card and call
.B csx_RequestIO()
first with any
.B IOAddrLines
values that are
.B 0
or that specify a minimum number
of address lines necessary to decode the
.B I/O
space on the
.BR PC
Card. Also, if no convenient minimum number of address lines can be used to
decode the
.B I/O
space on the
.B PC
Card, it is important to try to
avoid system conflicts with well-known architectural hardware features.
