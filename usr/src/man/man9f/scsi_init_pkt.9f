'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc.,  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH scsi_init_pkt 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
scsi_init_pkt \- prepare a complete SCSI packet
.SH SYNOPSIS
.LP
.nf
#include <sys/scsi/scsi.h>



\fBstruct scsi_pkt *\fBscsi_init_pkt\fR(\fBstruct scsi_address *\fIap\fR,
     \fBstruct scsi_pkt *\fIpktp\fR, \fBstruct buf *\fIbp\fR, \fBint\fR \fIcmdlen\fR, \fBint\fR \fIstatuslen\fR,
     \fBint\fR \fIprivatelen\fR, \fBint\fR \fIflags\fR, \fBint\fR \fB(*\fRcallback\fB)(caddr_t)\fR, \fBcaddr_t\fR \fIarg\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I ap
.ad
.sp .6
.RS 4n
Pointer to a
.BR scsi_address "(9S) structure."
.RE

.sp
.ne 2
.mk
.na
.I pktp
.ad
.sp .6
.RS 4n
A pointer to a
.BR scsi_pkt "(9S) structure."
.RE

.sp
.ne 2
.mk
.na
.I bp
.ad
.sp .6
.RS 4n
Pointer to a \fBbuf\fR(9S) structure.
.RE

.sp
.ne 2
.mk
.na
.I cmdlen
.ad
.sp .6
.RS 4n
The required length for the
.B SCSI
command descriptor block (\fBCDB\fR)
in bytes.
.RE

.sp
.ne 2
.mk
.na
.I statuslen
.ad
.sp .6
.RS 4n
The required length for the
.B SCSI
status completion block (\fBSCB\fR)
in bytes. Valid values are:
.sp
.ne 2
.mk
.na
.B 0
.ad
.sp .6
.RS 4n
No status back.
.RE

.sp
.ne 2
.mk
.na
.B 1
.ad
.sp .6
.RS 4n
Return SCSI status byte.
.RE

.sp
.ne 2
.mk
.na
\fBsizeof(scsi_arq_status)\fR
.ad
.sp .6
.RS 4n
Return status information in a
.B scsi_arq_status
structure. This will
include up to 20 bytes of sense data. Please refer to
.BR scsi_arq_status (9S)
for more information.
.sp
For extra sense packets (\fBPKT_XARQ\fR flag asserted), set \fIstatuslen\fR
to be a greater number like, (\fIN\fR + \fBsizeof(struct
scsi_arq_status)\fR) where \fIN\fR is the number of extra bytes beyond the
default 20. For example, \fIN\fR=1 requests 21 bytes of sense, \fIN\fR=235
asks for 255 bytes.
.RE

.RE

.sp
.ne 2
.mk
.na
.I privatelen
.ad
.sp .6
.RS 4n
The required length for the
.I pkt_private
area.
.RE

.sp
.ne 2
.mk
.na
\fIflags\fR
.ad
.sp .6
.RS 4n
Flags modifier.
.RE

.sp
.ne 2
.mk
.na
.I callback
.ad
.sp .6
.RS 4n
A pointer to a callback function,
.BR NULL_FUNC ,
or
.BR SLEEP_FUNC .
.RE

.sp
.ne 2
.mk
.na
.I arg
.ad
.sp .6
.RS 4n
The
.I callback
function argument.
.RE

.SH DESCRIPTION
.sp
.LP
Target drivers use
.B scsi_init_pkt()
to request the transport layer to
allocate and initialize a packet for a
.B SCSI
command which possibly
includes a data transfer. If
.I pktp
is
.I NULL,
a new
.BR scsi_pkt (9S)
is allocated using the
.B HBA
driver's packet
allocator. The
.I bp
is a pointer to a \fBbuf\fR(9S) structure. If
\fIbp\fR is non-\fINULL\fR and contains a valid byte count, the
\fBbuf\fR(9S) structure is also set up for \fBDMA\fR transfer using the
\fBHBA\fR driver \fBDMA\fR resources allocator. When \fIbp\fR is allocated
by \fBscsi_alloc_consistent_buf\fR(9F), the
.B PKT_CONSISTENT
bit must be
set in the \fIflags\fR argument to ensure proper operation. If
\fIprivatelen\fR is non-zero then additional space is allocated for the
\fIpkt_private\fR area of the \fBscsi_pkt\fR(9S). On return
\fIpkt_private\fR points to this additional space. Otherwise
\fIpkt_private\fR is a pointer that is typically used to store the \fIbp\fR
during execution of the command. In this case
.I pkt_private
is
\fINULL\fR on return.
.sp
.LP
The \fIflags\fR argument is a set of bit flags. Possible bits include:
.sp
.ne 2
.mk
.na
.B PKT_CONSISTENT
.ad
.sp .6
.RS 4n
This must be set if the
.B DMA
buffer was allocated using
\fBscsi_alloc_consistent_buf\fR(9F). In this case, the \fBHBA\fR driver will
guarantee that the data transfer is properly synchronized before performing
the target driver's command completion callback.
.RE

.sp
.ne 2
.mk
.na
.B PKT_DMA_PARTIAL
.ad
.sp .6
.RS 4n
This may be set if the driver can accept a partial
.B DMA
mapping. If
set,
.B scsi_init_pkt()
will allocate
.B DMA
resources with the
\fBDDI_DMA_PARTIAL\fR bit set in the \fBdmar_flag\fR element of the
.BR ddi_dma_req (9S)
structure. The
.B pkt_resid
field of the
.BR scsi_pkt (9S)
structure may be returned with a non-zero value, which
indicates the number of bytes for which
.B scsi_init_pkt()
was unable to
allocate DMA resources. In this case, a subsequent call to
\fBscsi_init_pkt()\fR may be made for the same \fIpktp\fR and \fIbp\fR to
adjust the DMA resources to the next portion of the transfer. This sequence
should be repeated until the
.B pkt_resid
field is returned with a zero
value, which indicates that with transport of this final portion the entire
original request will have been satisfied.
.RE

.sp
.ne 2
.mk
.na
.B PKT_XARQ
.ad
.sp .6
.RS 4n
Setting this flag requests that the
.B HBA
return  extra sense data for
this \fBscsi_pkt\fR(9S). The default  auto request sense mechanism returns
up to  20 bytes. More than 20 bytes of sense data can be requested by
setting this flag and setting the
.I statuslen
correctly. Set the
\fIstatuslen\fR to be the \fBsizeof(struct scsi_arq_status)\fR plus the
number of sense bytes needed beyond 20. For example, set statuslen to be
\fB(sizeof(struct scsi_arq_status) + 5)\fR for 25 bytes of sense.
.RE

.sp
.LP
When calling
.B scsi_init_pkt()
.RB "to move already-allocated" " DMA"
resources, the
.IR cmdlen ,
.IR statuslen ,
and
.I privatelen
fields
are ignored.
.sp
.LP
The last argument
.I arg
is supplied to the
.I callback
function when
it is invoked.
.sp
.LP
\fIcallback\fR indicates what the allocator routines should do when
resources are not available:
.sp
.ne 2
.mk
.na
.B NULL_FUNC
.ad
.RS 16n
.rt
Do not wait for resources. Return a
.I NULL
pointer.
.RE

.sp
.ne 2
.mk
.na
.B SLEEP_FUNC
.ad
.RS 16n
.rt
Wait indefinitely for resources.
.RE

.sp
.ne 2
.mk
.na
.B Other Values
.ad
.RS 16n
.rt
\fIcallback\fR points to a function which is called when resources may have
become available.
.I callback
must return either
.B 0
(indicating that
it attempted to allocate resources but again failed to do so), in which case
it is put back on a list to be called again later, or
.B 1
indicating
either success in allocating resources or indicating that it no longer cares
for a retry.
.RE

.sp
.LP
When allocating
.B DMA
resources,
.B scsi_init_pkt()
returns the
\fBscsi_pkt\fR field \fBpkt_resid\fR as the number of residual bytes for
which the system was unable to allocate
.B DMA
resources.  A
\fBpkt_resid\fR of \fB0\fR means that all necessary \fBDMA\fR resources were
allocated.
.SH RETURN VALUES
.sp
.LP
The
.B scsi_init_pkt()
function returns
.I NULL
if the packet or
\fBDMA\fR resources could not be allocated. Otherwise, it returns a pointer
to an initialized \fBscsi_pkt\fR(9S). If
.I pktp
was not
.I NULL
the
return value will be
.I pktp
on successful initialization of the
packet.
.SH CONTEXT
.sp
.LP
If
.I callback
is
.BR SLEEP_FUNC ,
then this routine can be called only
from user-level code. Otherwise, it can be called from user, interrupt, or
kernel context. The
.I callback
function may not block or call routines
that block.
.SH EXAMPLES
.LP
\fBExample 1\fR Allocating a Packet Without \fBDMA\fR Resources Attached
.sp
.LP
To allocate a packet without
.B DMA
resources attached, use:

.sp
.in +2
.nf
pkt = scsi_init_pkt(&devp->sd_address, NULL, NULL, CDB_GROUP1,
        1, sizeof (struct my_pkt_private *), 0,
        sd_runout, sd_unit);
.fi
.in -2

.LP
\fBExample 2\fR Allocating a Packet With \fBDMA\fR Resources Attached
.sp
.LP
To allocate a packet with
.B DMA
resources attached use:

.sp
.in +2
.nf
pkt = scsi_init_pkt(&devp->sd_address, NULL, bp, CDB_GROUP1,
        sizeof(struct scsi_arq_status), 0, 0, NULL_FUNC, NULL);
.fi
.in -2

.LP
\fBExample 3\fR Attaching \fBDMA\fR Resources to a Preallocated Packet
.sp
.LP
To attach
.B DMA
resources to a preallocated packet, use:

.sp
.in +2
.nf
pkt = scsi_init_pkt(&devp->sd_address, old_pkt, bp, 0,
        0, 0, 0, sd_runout, (caddr_t) sd_unit);
.fi
.in -2

.LP
\fBExample 4\fR Allocating a Packet with Consistent \fBDMA\fR Resources
Attached
.sp
.LP
Since the packet is already allocated, the
.IR cmdlen ,
.I statuslen
and
.I privatelen
are
.BR 0 .
To allocate a packet with consistent
\fBDMA\fR resources attached, use:

.sp
.in +2
.nf
bp = scsi_alloc_consistent_buf(&devp->sd_address, NULL,
	       SENSE_LENGTH, B_READ, SLEEP_FUNC, NULL);
	pkt = scsi_init_pkt(&devp->sd_address, NULL, bp, CDB_GROUP0,
        sizeof(struct scsi_arq_status), sizeof (struct my_pkt_private *),
        PKT_CONSISTENT, SLEEP_FUNC, NULL);
.fi
.in -2

.LP
\fBExample 5\fR Allocating a Packet with Partial \fBDMA\fR Resources
Attached
.sp
.LP
To allocate a packet with partial
.B DMA
resources attached, use:

.sp
.in +2
.nf
my_pkt = scsi_init_pkt(&devp->sd_address, NULL, bp, CDB_GROUP0,
          1, sizeof (struct buf *), PKT_DMA_PARTIAL,
          SLEEP_FUNC, NULL);
.fi
.in -2

.SH SEE ALSO
.sp
.LP
\fBscsi_alloc_consistent_buf\fR(9F), \fBscsi_destroy_pkt\fR(9F),
.BR scsi_dmaget (9F),
.BR scsi_pktalloc (9F),
\fBbuf\fR(9S),
.BR ddi_dma_req (9S),
.BR scsi_address (9S),
.BR scsi_pkt (9S)
.sp
.LP
.I Writing Device Drivers
.SH NOTES
.sp
.LP
If a
.B DMA
allocation request fails with
.BR DDI_DMA_NOMAPPING ,
the
\fBB_ERROR\fR flag will be set in
.IR bp ,
and the
.B b_error
field will
be set to
.BR EFAULT .
.sp
.LP
If a
.B DMA
allocation request fails with
.BR DDI_DMA_TOOBIG ,
the
\fBB_ERROR\fR flag will be set in
.IR bp ,
and the
.B b_error
field will
be set to
.BR EINVAL .
