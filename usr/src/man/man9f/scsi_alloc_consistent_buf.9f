'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH scsi_alloc_consistent_buf 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
scsi_alloc_consistent_buf \- allocate an I/O buffer for SCSI DMA
.SH SYNOPSIS
.LP
.nf
#include <sys/scsi/scsi.h>



\fBstruct buf *\fBscsi_alloc_consistent_buf\fR(\fBstructscsi_address*\fIap\fR,
     \fBstruct buf *\fIbp\fR, \fBsize_t\fR \fIdatalen\fR, \fBuint_t\fR \fIbflags\fR,
     \fBint (*\fIcallback\fR)(caddr_t), \fBcaddr_t\fR \fIarg\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I ap
.ad
.RS 12n
.rt
Pointer to the
.BR scsi_address "(9S) structure."
.RE

.sp
.ne 2
.mk
.na
.I bp
.ad
.RS 12n
.rt
Pointer to the
.BR buf (9S)
structure.
.RE

.sp
.ne 2
.mk
.na
.I datalen
.ad
.RS 12n
.rt
Number of bytes for the data buffer.
.RE

.sp
.ne 2
.mk
.na
.I bflags
.ad
.RS 12n
.rt
Flags setting for the allocated buffer header. This should either be
.B B_READ
or
.BR B_WRITE .
.RE

.sp
.ne 2
.mk
.na
.I callback
.ad
.RS 12n
.rt
A pointer to a callback function,
.B NULL_FUNC
or
.BR SLEEP_FUNC .
.RE

.sp
.ne 2
.mk
.na
.I arg
.ad
.RS 12n
.rt
The callback function argument.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B scsi_alloc_consistent_buf()
function returns allocates a buffer
header and the associated data buffer for direct memory access (DMA)
transfer. This buffer is allocated from the
.B iobp
space, which is
considered consistent memory. For more details, see
.BR ddi_dma_mem_alloc (9F)
and
.BR ddi_dma_sync (9F).
.sp
.LP
For buffers allocated via
.BR scsi_alloc_consistent_buf() ,
and marked
with the
.B PKT_CONSISTENT
flag via
.BR scsi_init_pkt "(9F), the HBA"
driver must ensure that the data transfer for the command is correctly
synchronized before the target driver's command completion callback is
performed.
.sp
.LP
If
.I bp
is
.IR NULL ,
a new buffer header will be allocated using
.BR getrbuf (9F).
In addition, if
.I datalen
is non-zero, a new buffer
will be allocated using
.BR ddi_dma_mem_alloc (9F).
.sp
.LP
.I callback
indicates what the allocator routines should do when direct
memory access
.B (DMA)
resources are not available; the valid values
are:
.sp
.ne 2
.mk
.na
.B NULL_FUNC
.ad
.RS 16n
.rt
Do not wait for resources. Return a
.I NULL
pointer.
.RE

.sp
.ne 2
.mk
.na
.B SLEEP_FUNC
.ad
.RS 16n
.rt
Wait indefinitely for resources.
.RE

.sp
.ne 2
.mk
.na
.B Other Values
.ad
.RS 16n
.rt
.I callback
points to a function that is called when resources may
become available.
.I callback
must return either
.B 0
(indicating that
it attempted to allocate resources but failed to do so), in which case it is
put back on a list to be called again later, or
.B 1
indicating either
success in allocating resources or indicating that it no longer cares for a
retry. The last argument
.I arg
is supplied to the
.IR callback
function when it is invoked.
.RE

.SH RETURN VALUES
.sp
.LP
The
.B scsi_alloc_consistent_buf()
function returns a pointer to a
.BR buf (9S)
structure on success. It returns
.B NULL
if resources are
not available even if
.I waitfunc
was not
.BR SLEEP_FUNC .
.SH CONTEXT
.sp
.LP
If
.I callback
is
.BR SLEEP_FUNC ,
then this routine may be called only
from user-level code. Otherwise, it may be called fromuser, interrupt, or
kernel context. The
.I callback
function may not block or call routines
that block.
.SH EXAMPLES
.LP
.B Example 1
Allocate a request sense packet with consistent DMA
resources attached.
.sp
.in +2
.nf
   bp = scsi_alloc_consistent_buf(&devp->sd_address, NULL,
         SENSE_LENGTH, B_READ, SLEEP_FUNC, NULL);
    rqpkt = scsi_init_pkt(&devp->sd_address,
         NULL, bp, CDB_GROUP0, 1, 0,
         PKT_CONSISTENT, SLEEP_FUNC, NULL);
.fi
.in -2

.LP
.B Example 2
Allocate an inquiry packet with consistent DMA resources
attached.
.sp
.in +2
.nf
    bp = scsi_alloc_consistent_buf(&devp->sd_address, NULL,
         SUN_INQSIZE, B_READ, canwait, NULL);
    if (bp) {
    	pkt = scsi_init_pkt(&devp->sd_address, NULL, bp,
        	CDB_GROUP0, 1, PP_LEN, PKT_CONSISTENT,
		canwait, NULL);
    }
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR ddi_dma_mem_alloc (9F),
.BR ddi_dma_sync (9F),
.BR getrbuf (9F),
.BR scsi_destroy_pkt (9F),
.BR scsi_init_pkt (9F),
.BR scsi_free_consistent_buf (9F),
.BR buf (9S),
.BR scsi_address (9S)
.sp
.LP
.I Writing Device Drivers
