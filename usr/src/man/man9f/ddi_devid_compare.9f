'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_devid_compare 9F "21 May 2009" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_devid_compare, ddi_devid_free, ddi_devid_init, ddi_devid_register,
ddi_devid_sizeof, ddi_devid_str_decode, ddi_devid_str_encode,
ddi_devid_str_free, ddi_devid_get, ddi_devid_unregister, ddi_devid_valid \-
kernel interfaces for device ids
.SH SYNOPSIS
.LP
.nf
\fBint\fR \fBddi_devid_compare\fR(\fBddi_devid_t\fR \fIdevid1\fR, \fBddi_devid_t\fR \fIdevid2\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBddi_devid_sizeof\fR(\fBddi_devid_t\fR \fIdevid\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_devid_init\fR(\fBdev_info_t *\fIdip\fR, \fBushort_t\fR \fIdevid_type\fR,
     \fBushort_t\fR \fInbytes\fR, \fBvoid *\fIid\fR, \fBddi_devid_t *\fIretdevid\fR);
.fi

.LP
.nf
\fBvoid\fR \fBddi_devid_free\fR(\fBddi_devid_t\fR \fIdevid\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_devid_register\fR(\fBdev_info_t *\fIdip\fR, \fBddi_devid_t\fR \fIdevid\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_devid_str_decode\fR(\fBchar *\fIdevidstr\fR, \fBddi_devid_t *\fIretdevid\fR,
     \fBchar **\fIretminor_name\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_devid_str_encode\fR(\fBddi_devid_t\fR \fIdevid\fR, \fBchar *\fIminor_name\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_devid_str_free\fR(\fBchar *\fIdevidstr\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_devid_get\fR(\fBdev_info_t *\fIdip\fR, \fBddi_devid_t *\fIretdevid\fR);
.fi

.LP
.nf
\fBvoid\fR \fBddi_devid_unregister\fR(\fBdev_info_t *\fIdip\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_devid_valid\fR(\fBddi_devid_t\fR \fIdevid\fR);
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I devid
.ad
.RS 14n
.rt
The device id address.
.RE

.sp
.ne 2
.mk
.na
.I devidstr
.ad
.RS 14n
.rt
The
.I devid
and
.I minor_name
represented as a string.
.RE

.sp
.ne 2
.mk
.na
.I devid1
.ad
.RS 14n
.rt
The first of two device id addresses to be compared calling
.BR ddi_devid_compare() .
.RE

.sp
.ne 2
.mk
.na
.I devid2
.ad
.RS 14n
.rt
The second of two device id addresses to be compared calling
.BR ddi_devid_compare() .
.RE

.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 14n
.rt
A \fBdev_info\fR pointer, which identifies the device.
.RE

.sp
.ne 2
.mk
.na
.I devid_type
.ad
.RS 14n
.rt
The following device id types may be accepted by the
.BR ddi_devid_init()
function:
.sp
.ne 2
.mk
.na
.B DEVID_SCSI3_WWN
.ad
.RS 21n
.rt
World Wide Name associated with SCSI-3 devices.
.RE

.sp
.ne 2
.mk
.na
.B DEVID_SCSI_SERIAL
.ad
.RS 21n
.rt
Vendor
.BR ID "and serial number associated with a SCSI device. Note: This"
may only be used if known to be unique; otherwise a fabricated device id
must be used.
.RE

.sp
.ne 2
.mk
.na
.B DEVID_ENCAP
.ad
.RS 21n
.rt
Device
.B ID
of another device. This is for layered device driver
usage.
.RE

.sp
.ne 2
.mk
.na
.B DEVID_FAB
.ad
.RS 21n
.rt
Fabricated device
.BR ID .
.RE

.RE

.sp
.ne 2
.mk
.na
.I minor_name
.ad
.RS 17n
.rt
The minor name to be encoded.
.RE

.sp
.ne 2
.mk
.na
.I nbytes
.ad
.RS 17n
.rt
The length in bytes of device
.BR ID .
.RE

.sp
.ne 2
.mk
.na
.I retdevid
.ad
.RS 17n
.rt
The return address of the device
.BR ID .
.RE

.sp
.ne 2
.mk
.na
.I retminor_name
.ad
.RS 17n
.rt
The return address of a minor name. Free string with
\fBddi_devid_str_free()\fR.
.RE

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH DESCRIPTION
.sp
.LP
The following routines are used to provide unique identifiers, device
\fBID\fRs, for devices. Specifically, kernel modules use these interfaces to
identify and locate devices, independent of the device's physical connection
or its logical device name or number.
.sp
.LP
\fBddi_devid_compare()\fR compares two device \fBID\fRs byte-by-byte and
determines both equality and sort order.
.sp
.LP
\fBddi_devid_sizeof()\fR returns the number of bytes allocated for the
passed in device
.BR ID
.RI ( devid ).
.sp
.LP
\fBddi_devid_init()\fR allocates memory and initializes the opaque device
\fBID\fR structure. This function does not store the
.IR devid .
If the
device id is not derived from the device's firmware, it is the driver's
responsibility to store the
.I devid
on some reliable store. When a
\fIdevid_type\fR of either \fBDEVID_SCSI3_WWN, DEVID_SCSI_SERIAL\fR,
or
.B DEVID_ENCAP
is accepted, an array of bytes (\fIid\fR) must be
passed in
.RI ( nbytes ).
.sp
.LP
When the
.I devid_type
\fBDEVID_FAB\fR is used, the array of bytes
(\fIid\fR) must be \fBNULL\fR and the length (\fInbytes\fR) must be zero.
The fabricated device ids,
.B DEVID_FAB
will be initialized with the
machine's host id and a timestamp.
.sp
.LP
Drivers must free the memory allocated by this function, using the
\fBddi_devid_free()\fR function.
.sp
.LP
\fBddi_devid_free()\fR frees the memory allocated for the returned
\fIdevid\fR by the \fBddi_devid_init()\fR and \fBdevid_str_decode()\fR
functions.
.sp
.LP
\fBddi_devid_register()\fR registers the device \fBID\fR address
(\fIdevid\fR) with the \fBDDI\fR framework, associating it with the
\fBdev_info\fR passed in
.RI ( dip ).
The drivers must register device
\fBID\fRs at attach time. See \fBattach\fR(9E).
.sp
.LP
\fBddi_devid_unregister()\fR removes the device \fBID\fR address from the
\fBdev_info\fR passed in
.RI ( dip ).
Drivers must use this function to
unregister the device
.B ID
when devices are being detached. This
function does not free the space allocated for the device
.BR ID .
The
driver must free the space allocated for the device
.BR ID ,
using the
\fBddi_devid_free()\fR function. See \fBdetach\fR(9E).
.sp
.LP
\fBddi_devid_valid()\fR validates the device \fBID\fR (\fIdevid\fR) passed
in. The driver must use this function to validate any fabricated device
\fBID\fR that has been stored on a device.
.sp
.LP
The
.B ddi_devid_get()
function returns a pointer to the device ID
structure through
.I retdevid
if there is already a registered device ID
associated with the \fBdev_info\fR node. A driver can use this interface to
check and get the device ID associated with the \fBdev_info\fR node. It
returns
.B DDI_FAILURE
if no device ID is registered for the node.
.sp
.LP
The
.B ddi_devid_get()
function allocates memory for the opaque device
ID structure and initializes it with the associated device ID and returns
the pointer to it. The driver must free the memory allocated by this
function using the \fBddi_devid_free()\fR function.
.sp
.LP
The
.B ddi_devid_str_encode()
function encodes a
.I devid
and
minor_name into a null-terminated ASCII string, returning a pointer to that
string. If both a
.I devid
and a
.I minor_name
are non-null, then a
slash (\fB/\fR) is used to separate the \fIdevid\fR from the
\fIminor_name\fR in the encoded string. If \fIminor_name\fR is null, then
only the
.I devid
is encoded. If the
.I devid
is null, then the
special string
.B id0
is returned. Note that you cannot compare the
returned string against another string with
.B strcmp()
to determine
\fIdevid\fR equality. The returned string must be freed by calling
\fBdevid_str_free()\fR.
.sp
.LP
The
.B ddi_devid_str_decode()
function takes a string previously
produced by the
.BR devid_str_encode "(3DEVID) or"
\fBddi_devid_str_encode()\fR function and decodes the contained device ID
and minor_name, allocating and returning pointers to the extracted parts
through the
.I retdevid
and
.I retminor_name
arguments. If the special
.I devidstr
.B id0
was specified then the returned device ID and minor
name will both be null. A non-null returned
.I devid
must be freed by the
caller through the \fBddi_devid_free()\fR function. A non-null returned
minor name must be freed by calling \fBddi_devid_str_free()\fR.
.sp
.LP
The \fBddi_devid_str_free()\fR function is used to free all strings
returned by the
.B ddi_devid
functions (the \fBddi_devid_str_encode()\fR
function return value and the returned
.I retminor_name
argument).
.SH RETURN VALUES
.sp
.LP
\fBddi_devid_init()\fR returns the following values:
.sp
.ne 2
.mk
.na
\fR
.ad
.RS 5n
.rt
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 15n
.rt
Success.
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 15n
.rt
Out of memory. An invalid
.I devid_type
was passed in.
.RE

.RE

.sp
.LP
\fBddi_devid_valid()\fR returns the following values:
.sp
.ne 2
.mk
.na
\fR
.ad
.RS 5n
.rt
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 15n
.rt
Valid device
.BR ID .
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 15n
.rt
Invalid device
.BR ID .
.RE

.RE

.sp
.LP
\fBddi_devid_register()\fR returns the following values:
.sp
.ne 2
.mk
.na
\fR
.ad
.RS 5n
.rt
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 15n
.rt
Success.
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 15n
.rt
Failure. The device
.B ID
is already registered or the device
.BR ID
is invalid.
.RE

.RE

.sp
.LP
\fBddi_devid_valid()\fR returns the following values:
.sp
.ne 2
.mk
.na
\fR
.ad
.RS 5n
.rt
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 15n
.rt
Valid device
.BR ID .
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 15n
.rt
Invalid device
.BR ID .
.RE

.RE

.sp
.LP
\fBddi_devid_get()\fR returns the following values:
.sp
.ne 2
.mk
.na
\fR
.ad
.RS 5n
.rt
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 15n
.rt
Device
.B ID
is present and a pointer to it is returned in
.IR retdevid .
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 15n
.rt
No device
.B ID
is defined for this \fBdev_info\fR node.
.RE

.RE

.sp
.LP
\fBddi_devid_compare()\fR returns the following values:
.sp
.ne 2
.mk
.na
\fR
.ad
.RS 5n
.rt
.sp
.ne 2
.mk
.na
\fB\(mi1\fR
.ad
.RS 9n
.rt
The first device ID is less than the second device ID.
.RE

.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 9n
.rt
The first device ID is equal to the second device ID.
.RE

.sp
.ne 2
.mk
.na
.B 1
.ad
.RS 9n
.rt
The first device ID is greater than the second device ID.
.RE

.RE

.sp
.LP
\fBddi_devid_sizeof()\fR returns the size of the \fIdevid\fR in bytes. If
called with a null, then the number of bytes that must be allocated and
initialized to determine the size of a complete device ID is returned.
.sp
.LP
\fBddi_devid_str_encode()\fR returns a value of null to indicate failure.
Failure can be caused by attempting to encode an invalid
.IR devid .
If the
return value is non-null then the caller must free the returned string by
using the \fBdevid_str_free()\fR function.
.sp
.LP
\fBddi_devid_str_decode()\fR returns the following values:
.sp
.ne 2
.mk
.na
\fR
.ad
.RS 5n
.rt
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 15n
.rt
Success.
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 15n
.rt
Failure; the
.I devidstr
string was not valid.
.RE

.RE

.SH CONTEXT
.sp
.LP
These functions can be called from a user or kernel context.
.SH SEE ALSO
.sp
.LP
.BR devid_get (3DEVID),
, \fBlibdevid\fR(3LIB), \fBattributes\fR(5),
.BR attach (9E),
.BR detach (9E),
\fBkmem_free\fR(9F)
.sp
.LP
.I Writing Device Drivers
