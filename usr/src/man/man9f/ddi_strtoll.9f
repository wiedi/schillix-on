'\" te
.\" Copyright (c) 2001, The IEEE and The Open Group. All Rights Reserved.
.\" Portions Copyright (c) 2009, Sun Microsystems Inc. All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_strtoll 9F "25 Feb 2009" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_strtoll, ddi_strtoull \- string conversion functions
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>

\fBint\fR \fBddi_strtoll\fR(\fBconst char *\fIstr\fR, \fBchar **\fIendptr\fR, \fBint\fR \fIbase\fR,
     \fBlonglong_t *\fIresult\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_strtoull\fR(\fBconst char *\fIstr\fR, \fBchar **\fIendptr\fR, \fBint\fR \fIbase\fR,
     \fBu_longlong_t *\fIresult\fR);
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I str
.ad
.RS 10n
.rt
pointer to a character string to be converted
.RE

.sp
.ne 2
.mk
.na
.I endptr
.ad
.RS 10n
.rt
post-conversion final string of unrecognized characters
.RE

.sp
.ne 2
.mk
.na
.I base
.ad
.RS 10n
.rt
radix used for conversion
.RE

.sp
.ne 2
.mk
.na
.I result
.ad
.RS 10n
.rt
pointer to variable which contains the converted value
.RE

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH DESCRIPTION
.sp
.LP
The
.B ddi_strtoll()
function converts the initial portion of the string
pointed to by
.I str
to a type
.B longlong_t
representation and stores
the converted value in
.IR result .
.sp
.LP
The
.B ddi_strtoull()
function converts the initial portion of the
string pointed to by
.I str
to a type
.B u_longlong_t
representation
and stores the converted value in
.IR result .
.sp
.LP
These functions first decomposes the input string into three parts:
.RS +4
.TP
1.
An initial (possibly empty) sequence of white-space characters (" ", "\et",
"\en", "\er", "\ef")
.RE
.RS +4
.TP
2.
A subject sequence interpreted as an integer represented in some radix
determined by the value of base
.RE
.RS +4
.TP
3.
A final string of one or more unrecognized characters, including the
terminating null byte of the input string.
.RE
.sp
.LP
The
.B ddi_strtoll()
function then attempts to convert the subject
.RB "sequence to an integer and returns the result. The" " ddi_strtoull()"
function attempts to convert the subject sequence to an unsigned integer and
returns the result.
.sp
.LP
If the value of base is 0, the expected form of the subject sequence is
that of a decimal constant, octal constant or hexadecimal constant, any of
which may be preceded by a plus ("+") or minus ("-") sign. A decimal
constant begins with a non-zero digit, and consists of a sequence of decimal
digits. An octal constant consists of the prefix 0 optionally followed by a
sequence of the digits 0 to 7 only. A hexadecimal constant consists of the
prefix 0x or 0X followed by a sequence of the decimal digits and letters a
(or A) to f (or F) with values 10 to 15 respectively.
.sp
.LP
If the value of base is between 2 and 36, the expected form of the subject
sequence is a sequence of letters and digits representing an integer with
the radix specified by base, optionally preceded by a plus or minus sign.
The letters from a (or A) to z (or Z) inclusive are ascribed the values 10
to 35 and only letters whose ascribed values are less than that of base are
permitted. If the value of base is 16, the characters 0x or 0X may
optionally precede the sequence of letters and digits, following the sign if
present.
.sp
.LP
The subject sequence is defined as the longest initial subsequence of the
input string, starting with the first non-white-space character that is of
the expected form. The subject sequence contains no characters if the input
string is empty or consists entirely of white-space characters, or if the
first non-white-space character is other than a sign or a permissible letter
or digit.
.sp
.LP
If the subject sequence has the expected form and the value of base is 0,
the sequence of characters starting with the first digit is interpreted as
an integer constant. If the subject sequence has the expected form and the
value of base is between 2 and 36, it is used as the base for conversion,
ascribing to each letter its value as given above. If the subject sequence
begins with a minus sign, the value resulting from the conversion is
negated. A pointer to the final string is stored in the object pointed to by
.IR endptr ,
provided that
.I endptr
is not a null pointer.
.sp
.LP
If the subject sequence is empty or does not have the expected form, no
conversion is performed and the value of
.I str
is stored in the object
pointed to by
.IR endptr ,
provided that
.I endptr
is not a null
pointer.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, these functions return 0 and store the
converted value in
.IR result .
If no conversion is performed due to an
invalid base, these functions return
.B EINVAL
and the variable pointed
by
.I result
is not changed.
.SH CONTEXT
.sp
.LP
These functions may be called from user, kernel or interrupt context.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.I Writing Device Drivers
