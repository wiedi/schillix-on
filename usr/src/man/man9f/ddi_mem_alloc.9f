'\" te
.\" Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_mem_alloc 9F "04 Apr 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_mem_alloc, ddi_mem_free \- allocate and free sequentially accessed
memory
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>

\fBint\fR \fBddi_mem_alloc\fR(\fBdev_info_t *\fIdip\fR, \fBddi_dma_lim_t *\fIlimits\fR,
     \fBuint_t\fR \fIlength\fR, \fBuint_t\fR \fIflags\fR, \fBcaddr_t *\fIkaddrp\fR,
     \fBuint_t *\fIreal_length\fR);
.fi

.LP
.nf
\fBvoid\fR \fBddi_mem_free\fR(\fBcaddr_t\fR \fIkaddr\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
These interfaces are obsolete.
.BR ddi_dma_mem_alloc (9F)
and
.BR ddi_dma_mem_free (9F)
should be used instead.
.SH PARAMETERS
.SS "\fBddi_mem_alloc()\fR"
.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 15n
.rt
A pointer to the device's
.B dev_info
structure.
.RE

.sp
.ne 2
.mk
.na
.I limits
.ad
.RS 15n
.rt
A pointer to a
.B DMA
limits structure for this device (see
.BR ddi_dma_lim_sparc (9S)
or \fBddi_dma_lim_x86\fR(9S)). If this pointer
is
.IR NULL ,
a default set of
.B DMA
limits is assumed.
.RE

.sp
.ne 2
.mk
.na
.I length
.ad
.RS 15n
.rt
The length in bytes of the desired allocation.
.RE

.sp
.ne 2
.mk
.na
.I flags
.ad
.RS 15n
.rt
The possible flags
.B 1
and
.B 0
are taken to mean, respectively,
wait until memory is available, or do not wait.
.RE

.sp
.ne 2
.mk
.na
.I kaddrp
.ad
.RS 15n
.rt
On a successful return, *\fIkaddrp\fR points to the allocated memory.
.RE

.sp
.ne 2
.mk
.na
.I real_length
.ad
.RS 15n
.rt
The length in bytes that was allocated. Alignment and padding requirements
may cause
.B ddi_mem_alloc()
to allocate more memory than requested in
.IR length .
.RE

.SS "\fBddi_mem_free()\fR"
.sp
.ne 2
.mk
.na
.I kaddr
.ad
.RS 9n
.rt
The memory returned from a successful call to
.BR ddi_mem_alloc() .
.RE

.SH DESCRIPTION
.sp
.LP
The
.B ddi_mem_alloc()
function allocates memory for
.B DMA
transfers
and should be used if the device is performing sequential, unidirectional,
block-sized and block-aligned transfers to or from memory. This type of
access is commonly known as
.B streaming
access. The allocation will obey
the alignment and padding constraints as specified by the
.IR limits
argument and other limits imposed by the system.
.sp
.LP
Note that you must still use
.B DMA
resource allocation functions (see
.BR ddi_dma_setup (9F))
to establish
.B DMA
resources for the memory
allocated using
.BR ddi_mem_alloc() .
.B ddi_mem_alloc()
returns the
actual size of the allocated memory object.  Because of padding and
alignment requirements, the actual size might be larger than the requested
size.
.BR ddi_dma_setup (9F)
requires the actual length.
.sp
.LP
In order to make the view of a memory object shared between a
.B CPU
and
a
.B DMA
device consistent, explicit synchronization steps using
.BR ddi_dma_sync (9F)
or \fBddi_dma_free\fR(9F) are required.
.sp
.LP
The
.B ddi_mem_free()
function frees up memory allocated by
.BR ddi_mem_alloc() .
.SH RETURN VALUES
.sp
.LP
The
.B ddi_mem_alloc()
function returns:
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 15n
.rt
Memory successfully allocated.
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 15n
.rt
Allocation failed.
.RE

.SH CONTEXT
.sp
.LP
The
.B ddi_mem_alloc()
function can be called from user, interrupt, or
kernel context, except when
.I flags
is set to
.BR 1 ,
in which case it
cannot be called from interrupt context.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Stability LevelObsolete
.TE

.SH SEE ALSO
.sp
.LP
.BR attributes (5),
.BR ddi_dma_free (9F),
.BR ddi_dma_mem_alloc (9F),
.BR ddi_dma_mem_free (9F),
.BR ddi_dma_setup (9F),
.BR ddi_dma_sync (9F),
.BR ddi_iopb_alloc (9F),
.BR ddi_dma_lim_sparc (9S),
.BR ddi_dma_lim_x86 (9S),
.BR ddi_dma_req (9S)
.sp
.LP
.I Writing Device Drivers
