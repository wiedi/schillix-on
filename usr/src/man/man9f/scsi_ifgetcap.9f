'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc., All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH scsi_ifgetcap 9F "16 Oct 2007" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
scsi_ifgetcap, scsi_ifsetcap \- get/set SCSI transport capability
.SH SYNOPSIS
.LP
.nf
#include <sys/scsi/scsi.h>



\fBint\fR \fBscsi_ifgetcap\fR(\fBstruct scsi_address *\fIap\fR, \fBchar *\fIcap\fR, \fBint\fR \fIwhom\fR);
.fi

.LP
.nf
\fBint\fR \fBscsi_ifsetcap\fR(\fBstruct scsi_address *\fIap\fR, \fBchar *\fIcap\fR, \fBint\fR \fIvalue\fR,
     \fBint\fR \fIwhom\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I ap
.ad
.RS 9n
.rt
Pointer to the
.B scsi_address
structure.
.RE

.sp
.ne 2
.mk
.na
.I cap
.ad
.RS 9n
.rt
Pointer to the string capability identifier.
.RE

.sp
.ne 2
.mk
.na
.I value
.ad
.RS 9n
.rt
Defines the new state of the capability.
.RE

.sp
.ne 2
.mk
.na
.I whom
.ad
.RS 9n
.rt
Determines if all targets or only the specified target is affected.
.RE

.SH DESCRIPTION
.sp
.LP
The \fBscsi_ifsetcap()\fR function is used by target drivers to set the
capabilities of the host adapter driver. The
.I cap
pointer is a
name-value pair identified by a null-terminated character string and the
integer value of the
.IR cap .
The current value of the capability can be
retrieved with the \fBscsi_ifgetcap()\fR function. If the
.I whom
value
is
.BR 0 ,
all target drivers are affected. Otherwise, the
\fBscsi_address\fR structure pointed to by \fIap\fR is the only target that
is affected.
.sp
.LP
The driver should confirm that \fBscsi_ifsetcap()\fR and
\fBscsi_ifsetcap()\fR functions are called with a \fIcap\fR that points to a
capability which is supported by the device.
.sp
.LP
The following capabilities have been defined:
.sp
.ne 2
.mk
.na
.B dma-max
.ad
.RS 24n
.rt
Maximum
.B dma
transfer size that is supported by the host adapter.
.RE

.sp
.ne 2
.mk
.na
.B dma-max-arch
.ad
.RS 24n
.rt
Maximum
.B dma
transfer size that is supported by system. Takes the host
adapter and system architecture into account. This is useful for target
drivers which do not support partial
.BR DMA "s on systems which do not have"
an
.BR IOMMU .
In this case, the
.B DMA
can also be limited by the host
adapters "scatter/gather" list constraints.
.sp
The "\fBdma-max-arch\fR" capability can not be set. It is implemented with
this command and does not rely on a \fBtran_getcap\fR(9E) response from the
HBA.
.RE

.sp
.ne 2
.mk
.na
.B msg-out
.ad
.RS 24n
.rt
.RB "Message out capability that is supported by the host adapter:" " 0"
disables,
.B 1
enables.
.RE

.sp
.ne 2
.mk
.na
.B disconnect
.ad
.RS 24n
.rt
.RB "Disconnect capability that is supported by the host adapter:" " 0"
disables,
.B 1
enables.
.RE

.sp
.ne 2
.mk
.na
.B synchronous
.ad
.RS 24n
.rt
Synchronous data transfer capability that is supported by the host adapter:
\fB0\fR disables, \fB1\fR enables.
.RE

.sp
.ne 2
.mk
.na
\fBwide-xfer\fR
.ad
.RS 24n
.rt
Wide transfer capability that is supported by the host adapter: \fB0\fR
disables,
.B 1
enables.
.RE

.sp
.ne 2
.mk
.na
.B parity
.ad
.RS 24n
.rt
.RB "Parity checking capability that is supported by host adapter:" " 0"
disables,
.B 1
enables.
.RE

.sp
.ne 2
.mk
.na
.B initiator-id
.ad
.RS 24n
.rt
Host bus address that is returned.
.RE

.sp
.ne 2
.mk
.na
.B untagged-qing
.ad
.RS 24n
.rt
Host adapter capability that supports internal queueing of commands without
tagged queueing:
.B 0
disables,
.B 1
enables.
.RE

.sp
.ne 2
.mk
.na
.B tagged-qing
.ad
.RS 24n
.rt
Host adapter capability that supports queuing:
.B 0
.RB disables, " 1"
enables.
.RE

.sp
.ne 2
.mk
.na
.B auto-rqsense
.ad
.RS 24n
.rt
Host adapter capability that supports auto request sense on check
conditions:
.B 0
disables,
.B 1
enables.
.RE

.sp
.ne 2
.mk
.na
.B sector-size
.ad
.RS 24n
.rt
Capability that is set by the target driver to inform the
.B HBA
of the
granularity, in bytes, of the
.B DMA
.RB "breakup. The" " HBA DMA"
limit structure is set to reflect the byte total of this setting. See
.BR ddi_dma_lim_sparc (9S)
or
.BR ddi_dma_lim_x86 "(9S). The"
\fBsector-size\fR should be set to the size of the physical disk sector. The
capability defaults to 512 bytes.
.RE

.sp
.ne 2
.mk
.na
.B total-sectors
.ad
.RS 24n
.rt
Capability that is set by the target driver to inform the
.B HBA
of the
total number of sectors on the device returned by the
.B SCSI
\fBget
capacity\fR command. This capability must be set before the target driver
``gets'' the
.B geometry
capability.
.RE

.sp
.ne 2
.mk
.na
.B geometry
.ad
.RS 24n
.rt
Capability that returns the
.B HBA
geometry of a target disk. The target
driver sets the
.B total-sectors
capability before ``getting'' the
geometry capability. The geometry is returned as a 32-bit value. The upper
16 bits represent the number of heads per cylinder. The lower 16 bits
represent the number of sectors per track. The geometry capability cannot be
``set''.
.sp
If geometry is not relevant or appropriate for the target disk,
\fBscsi_ifgetcap()\fR can return \fB-1\fR to indicate that the geometry is
not defined. For example, if the
.B HBA
BIOS supports Logical Block
Addressing for the target disk, \fBscsi_ifgetcap()\fR returns
.BR -1 .
Attempts to retreive the "virtual geometry" from the target driver, such as
the
.B DKIOCG_VIRTGEOM
ioctl, will fail. See \fBdkio\fR(7I) for more
information about
.BR DKIOCG_VIRTGEOM .
.RE

.sp
.ne 2
.mk
.na
\fBreset-notification\fR
.ad
.RS 24n
.rt
Host adapter capability that supports bus reset notification: \fB0\fR
disables,
.B 1
enables. See \fBscsi_reset_notify\fR(9F).
.RE

.sp
.ne 2
.mk
.na
.B linked-cmds
.ad
.RS 24n
.rt
Host adapter capability that supports linked commands:
.B 0
disables,
\fB1\fR enables.
.RE

.sp
.ne 2
.mk
.na
\fBqfull-retries\fR
.ad
.RS 24n
.rt
Capability that enables or disables
.B "QUEUE FULL"
handling. If
.BR 0 ,
the
.B HBA
will not retry a command when a
.BR QUEUE
\fBFULL\fR status is returned. If the value is greater than
.BR 0 ,
the
\fBHBA\fR driver retries the command a specified number of times at an
interval determined by the
.BR qfull-retry-interval .
The range for
\fBqfull-retries\fR is
.BR 0-255 .
.RE

.sp
.ne 2
.mk
.na
\fBqfull-retry-interval\fR
.ad
.RS 24n
.rt
Capability that sets the retry interval in milliseconds (\fBms\fR) for
commands completed with a
.B "QUEUE FULL"
status. The range for
\fBqfull-retry-intervals\fR is
.BR "0-1000 ms" .
.RE

.sp
.ne 2
.mk
.na
.B lun-reset
.ad
.RS 24n
.rt
Capability that is created with a value of zero by
.B HBA
drivers that
support the
.B RESET_LUN
flag in the \fBtran_reset\fR(9E) function. If it
exists, the
.B lun-reset
value can be set to
.B 1
by target drivers to
allow the use of
.B "LOGICAL UNIT RESET"
on a specific target instance. If
\fBlun-reset\fR does not exist or has a value of zero,
.BR scsi_reset (9F)
is prevented from passing the
.B RESET_LUN
flag to
.BR tran_reset()
function of the
.B HBA
driver. If
.B lun-reset
exists and has a value
of
.BR 1 ,
the
.B tran_reset()
function of the
.B HBA
driver can be
called with the
.B RESET_LUN
flag.
.RE

.sp
.ne 2
.mk
.na
.B interconnect-type
.ad
.RS 24n
.rt
Capability held in the
.B tran_interconnect_type
element of struct
\fBscsi_hba_tran\fR that indicates the \fBHBA\fR transport interconnect type
\&. The integer value of the interconnect type of the transport is defined
in the
.B services.h
header file.
.RE

.sp
.ne 2
.mk
.na
.B max-cdb-length
.ad
.RS 24n
.rt
Host adapter capability of the maximum supported
.B CDB
(Command
Descriptor Block) length. The target driver asks for the capability at
attach time. If the
.B HBA
driver supports the capability, the maximum
length of the
.B CDB
is returned in bytes. The target driver can then use
that value to determine which
.B CDB
is used for the
.BR HBA .
.sp
If the
.B HBA
driver does not support the
.BR max-cdb-length
capability, the default value of the target driver is used for the \fBCDB\fR
determination.
.RE

.SH RETURN VALUES
.sp
.LP
The \fBscsi_ifsetcap()\fR function returns:
.sp
.ne 2
.mk
.na
.B 1
.ad
.RS 9n
.rt
If the capability was successfully set to the new value.
.RE

.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 9n
.rt
If the capability is not variable.
.RE

.sp
.ne 2
.mk
.na
\fB\(mi1\fR
.ad
.RS 9n
.rt
If the capability was not defined, or setting the capability to a new value
failed.
.RE

.sp
.LP
The \fBscsi_ifgetcap()\fR function returns the current value of a
capability, or:
.sp
.ne 2
.mk
.na
\fB\(mi1\fR
.ad
.RS 9n
.rt
If the capability was not defined.
.RE

.SH EXAMPLES
.LP
\fBExample 1\fR Using \fBscsi_ifgetcap()\fR
.sp
.in +2
.nf
if (scsi_ifgetcap(&sd->sd_address, "auto-rqsense", 1) == 1) {
   un->un_arq_enabled = 1;
} else {
   un->un_arq_enabled =
       ((scsi_ifsetcap(&sd->sd_address, "auto-rqsense", 1, 1) == 1) ?
             1 : 0);
}

if (scsi_ifsetcap(&devp->sd_address, "tagged-qing", 1, 1) == 1) {
	  un->un_dp->options |= SD_QUEUEING;
	  un->un_throttle = MAX_THROTTLE;
} else if (scsi_ifgetcap(&devp->sd_address, "untagged-qing", 0) == 1) {
	  un->un_dp->options |= SD_QUEUEING;
	  un->un_throttle = 3;
} else {
	  un->un_dp->options &= ~SD_QUEUEING;
	  un->un_throttle = 1;
}
.fi
.in -2

.SH CONTEXT
.sp
.LP
These functions can be called from user, interrupt, or kernel context.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR tran_reset (9E),
.BR scsi_hba_lookup_capstr (9F),
.BR scsi_reset (9F),
.BR scsi_reset_notify (9F),
.BR ddi_dma_lim_sparc (9S),
.BR ddi_dma_lim_x86 (9S),
.BR scsi_address (9S),
.BR scsi_arq_status (9S)
.sp
.LP
.I Writing Device Drivers
