'\" te
.\" Copyright (c) 2006 Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH rwlock 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
rwlock, rw_init, rw_destroy, rw_enter, rw_exit, rw_tryenter, rw_downgrade,
rw_tryupgrade, rw_read_locked \- readers/writer lock functions
.SH SYNOPSIS
.LP
.nf
#include <sys/ksynch.h>



\fBvoid\fR \fBrw_init\fR(\fBkrwlock_t *\fIrwlp\fR, \fBchar *\fIname\fR, \fBkrw_type_t\fR \fItype\fR, \fBvoid *\fIarg\fR);
.fi

.LP
.nf
\fBvoid\fR \fBrw_destroy\fR(\fBkrwlock_t *\fIrwlp\fR);
.fi

.LP
.nf
\fBvoid\fR \fBrw_enter\fR(\fBkrwlock_t *\fIrwlp\fR, \fBkrw_t\fR \fIenter_type\fR);
.fi

.LP
.nf
\fBvoid\fR \fBrw_exit\fR(\fBkrwlock_t *\fIrwlp\fR);
.fi

.LP
.nf
\fBint\fR \fBrw_tryenter\fR(\fBkrwlock_t *\fIrwlp\fR, \fBkrw_t\fR \fIenter_type\fR);
.fi

.LP
.nf
\fBvoid\fR \fBrw_downgrade\fR(\fBkrwlock_t *\fIrwlp\fR);
.fi

.LP
.nf
\fBint\fR \fBrw_tryupgrade\fR(\fBkrwlock_t *\fIrwlp\fR);
.fi

.LP
.nf
\fBint\fR \fBrw_read_locked\fR(\fBkrwlock_t *\fIrwlp\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I rwlp
.ad
.RS 14n
.rt
Pointer to a
.B krwlock_t
readers/writer lock.
.RE

.sp
.ne 2
.mk
.na
.I name
.ad
.RS 14n
.rt
Descriptive string. This is obsolete and should be
.BR NULL .
(Non-null
strings are legal, but they're a waste of kernel memory.)
.RE

.sp
.ne 2
.mk
.na
.I type
.ad
.RS 14n
.rt
Type of readers/writer lock.
.RE

.sp
.ne 2
.mk
.na
.I arg
.ad
.RS 14n
.rt
Type-specific argument for initialization function.
.RE

.sp
.ne 2
.mk
.na
.I enter_type
.ad
.RS 14n
.rt
One of the values
.B RW_READER
or
.BR RW_WRITER ,
indicating whether the
lock is to be acquired non-exclusively (\fBRW_READER\fR) or exclusively
(\fBRW_WRITER\fR).
.RE

.SH DESCRIPTION
.sp
.LP
.RB "A multiple-readers, single-writer lock is represented by the" " krwlock_t"
data type. This type of lock will allow many threads to have simultaneous
read-only access to an object. Only one thread may have write access at any
one time. An object which is searched more frequently than it is changed is a
good candidate for a readers/writer lock.
.sp
.LP
Readers/writer locks are slightly more expensive than mutex locks, and the
advantage of multiple read access may not occur if the lock will only be held
for a short time.
.sp
.LP
The
.B rw_init()
function initializes a readers/writer lock. It is an
error to initialize a lock more than once. The
.I type
argument should be
set to
.BR RW_DRIVER .
If the lock is used by the interrupt handler, the
type-specific argument,
.IR arg ,
should be the interrupt priority returned
from \fBddi_intr_get_pri\fR(9F) or \fBddi_intr_get_softint_pri\fR(9F). Note
that arg should be the value of the interrupt priority cast by calling the
.B DDI_INTR_PRI
macro. If the lock is not used by any interrupt handler,
the argument should be
.IR NULL.
.sp
.LP
The
.B rw_destroy()
function releases any resources that might have been
allocated by
.BR rw_init() .
It should be called before freeing the memory
containing the lock. The lock must not be held by any thread when it is
destroyed.
.sp
.LP
The
.B rw_enter()
function acquires the lock, and blocks if necessary. If
.I enter_type
is
.BR RW_READER ,
the caller blocks if there is a writer
or a thread attempting to enter for writing. If
.I enter_type
is
.BR RW_WRITER ,
the caller blocks if any thread holds the lock.
.sp
.LP
NOTE: It is a programming error for any thread to acquire an rwlock it
already holds, even as a reader. Doing so can deadlock the system: if thread
R acquires the lock as a reader, then thread W tries to acquire the lock as a
writer, W will set write-wanted and block. When R tries to get its second
read hold on the lock, it will honor the write-wanted bit and block waiting
for W; but W cannot run until R drops the lock. Thus threads R and W
deadlock.
.sp
.LP
The
.B rw_exit()
function releases the lock and may wake up one or more
threads waiting on the lock.
.sp
.LP
The
.B rw_tryenter()
function attempts to enter the lock, like
.BR rw_enter() ,
but never blocks. It returns a non-zero value if the lock
was successfully entered, and zero otherwise.
.sp
.LP
A thread which holds the lock exclusively  (entered with
.BR RW_WRITER ),
may call
.B rw_downgrade()
to convert to holding the lock non-exclusively
(as if entered with
.BR RW_READER ).
One or more waiting readers may be
unblocked.
.sp
.LP
The
.B rw_tryupgrade()
function can be called by a thread which holds the
lock for reading to attempt to convert to holding it for writing. This
upgrade can only succeed if no other thread is holding the lock and no other
thread is blocked waiting to acquire the lock for writing.
.sp
.LP
The
.B rw_read_locked()
function returns non-zero if the calling thread
holds the lock for read, and zero if the caller holds the lock for write. The
caller must hold the lock. The system may panic if
.B rw_read_locked()
is
called for a lock that isn't held by the caller.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 12n
.rt
.B rw_tryenter()
could not obtain the lock without blocking.
.RE

.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 12n
.rt
.B rw_tryupgrade()
was unable to perform the upgrade because of other
threads holding or waiting to hold the lock.
.RE

.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 12n
.rt
.B rw_read_locked()
returns
.B 0
if the lock is held by the caller for
write.
.RE

.sp
.ne 2
.mk
.na
.B non-zero
.ad
.RS 12n
.rt
from
.B rw_read_locked()
if the lock is held by the caller for read.
.RE

.sp
.ne 2
.mk
.na
.B non-zero
.ad
.RS 12n
.rt
successful return from
.B rw_tryenter()
or
.BR rw_tryupgrade() .
.RE

.SH CONTEXT
.sp
.LP
These functions can be called from user, interrupt, or kernel context,
except for
.B rw_init()
and
.BR rw_destroy() ,
which can be called from
user context only.
.SH SEE ALSO
.sp
.LP
.BR condvar (9F),
.BR ddi_intr_alloc (9F),
.BR ddi_intr_add_handler (9F),
.BR ddi_intr_get_pri (9F),
.BR ddi_intr_get_softint_pri (9F),
.BR mutex (9F),
.BR semaphore (9F)
.sp
.LP
.I Writing Device Drivers
.SH NOTES
.sp
.LP
Compiling with
.B _LOCKTEST
or
.B _MPSTATS
defined no longer has any
effect. To gather lock statistics, see
.BR lockstat (1M).
