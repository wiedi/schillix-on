'\" te
.\" Copyright (c) 2003 Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_dma_addr_bind_handle 9F "26 Jul 1996" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_dma_addr_bind_handle \- binds an address to a DMA handle
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint\fR \fBddi_dma_addr_bind_handle\fR(\fBddi_dma_handle_t\fR \fIhandle\fR, \fBstruct as *\fIas\fR,
     \fBcaddr_t\fR \fIaddr\fR, \fBsize_t\fR \fIlen\fR, \fBuint_t\fR \fIflags\fR, \fBint (*\fIcallback\fR) (caddr_t) ,
     \fBcaddr_t\fR \fIarg\fR, \fBddi_dma_cookie_t *\fIcookiep\fR, \fBuint_t *\fIccountp\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I handle
.ad
.RS 13n
.rt
The
.B DMA
handle previously allocated by a call to
.BR ddi_dma_alloc_handle (9F).
.RE

.sp
.ne 2
.mk
.na
.I as
.ad
.RS 13n
.rt
A pointer to an address space structure. This parameter should be set to
.IR NULL ,
which implies kernel address space.
.RE

.sp
.ne 2
.mk
.na
.I addr
.ad
.RS 13n
.rt
Virtual address of the memory object.
.RE

.sp
.ne 2
.mk
.na
.I len
.ad
.RS 13n
.rt
Length of the memory object in bytes.
.RE

.sp
.ne 2
.mk
.na
.I flags
.ad
.RS 13n
.rt
Valid flags include:
.sp
.ne 2
.mk
.na
.B DDI_DMA_WRITE
.ad
.RS 23n
.rt
Transfer direction is from memory to I/O.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_READ
.ad
.RS 23n
.rt
Transfer direction is from I/O to memory.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_RDWR
.ad
.RS 23n
.rt
Both read and write.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_REDZONE
.ad
.RS 23n
.rt
Establish an
.B MMU
redzone at end of the object.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_PARTIAL
.ad
.RS 23n
.rt
Partial resource allocation.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_CONSISTENT
.ad
.RS 23n
.rt
Nonsequential, random, and small block transfers.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_STREAMING
.ad
.RS 23n
.rt
Sequential, unidirectional, block-sized, and block-aligned transfers.
.RE

.RE

.sp
.ne 2
.mk
.na
.I callback
.ad
.RS 13n
.rt
The address of a function to call back later if resources are not currently
available. The following special function addresses may also  be used.
.sp
.ne 2
.mk
.na
.B DDI_DMA_SLEEP
.ad
.RS 21n
.rt
Wait until resources are available.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_DONTWAIT
.ad
.RS 21n
.rt
Do not wait until resources are available and do not schedule a callback.
.RE

.RE

.sp
.ne 2
.mk
.na
.I arg
.ad
.RS 13n
.rt
Argument to be passed to the callback function,
.IR callback ,
if such a
function is specified.
.RE

.sp
.ne 2
.mk
.na
.I cookiep
.ad
.RS 13n
.rt
A pointer to the first
.BR ddi_dma_cookie "(9S) structure."
.RE

.sp
.ne 2
.mk
.na
.I ccountp
.ad
.RS 13n
.rt
Upon a successful return,
.I ccountp
points to a value representing the
number of cookies for this
.B DMA
object.
.RE

.SH DESCRIPTION
.sp
.LP
.B ddi_dma_addr_bind_handle()
allocates
.B DMA
resources for a memory
object such that a device can perform
.B DMA
to or from the object.
.B DMA
resources are allocated considering the device's
.B DMA
attributes as expressed by
.BR ddi_dma_attr "(9S) (see"
.BR ddi_dma_alloc_handle (9F)).
.sp
.LP
.B ddi_dma_addr_bind_handle()
fills in the first
.B DMA
cookie
pointed to by
.I cookiep
with the appropriate address, length, and bus
type. \fB*\fIccountp\fR is set to the number of \fBDMA\fR cookies
representing this
.B DMA
object. Subsequent
.B DMA
cookies must be
retrieved by calling \fBddi_dma_nextcookie\fR(9F) the number of times
specified by \fB*\fIcountp\fR-1.
.sp
.LP
When a
.B DMA
transfer completes, the driver frees up system \fBDMA\fR
resources by calling
.BR ddi_dma_unbind_handle (9F).
.sp
.LP
The
.I flags
argument contains information for mapping routines.
.sp
.ne 2
.mk
.na
.BR DDI_DMA_WRITE ,
.BR DDI_DMA_READ ,
.B DDI_DMA_RDWR
.ad
.sp .6
.RS 4n
These flags describe the intended direction of the
.B DMA
transfer.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_STREAMING
.ad
.sp .6
.RS 4n
This flag should be set if the device is doing sequential, unidirectional,
block-sized, and block-aligned transfers to or from memory.  The alignment
and padding constraints specified by the \fBminxfer\fR and \fBburstsizes\fR
fields in the
.B DMA
attribute structure,
.BR ddi_dma_attr (9S)
(see
.BR ddi_dma_alloc_handle (9F))
is used to allocate the most effective
hardware support for large transfers.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_CONSISTENT
.ad
.sp .6
.RS 4n
This flag should be set if  the device accesses memory randomly, or if
synchronization steps using \fBddi_dma_sync\fR(9F) need to be as efficient
as possible. I/O parameter blocks used for communication between a device
and a driver should be allocated using
.BR DDI_DMA_CONSISTENT .
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_REDZONE
.ad
.sp .6
.RS 4n
If this flag is set, the system attempts to  establish a protected red zone
after the object. The
.B DMA
resource allocation functions do not
guarantee the success of this request as some implementations may not have
the hardware ability to support a red zone.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_PARTIAL
.ad
.sp .6
.RS 4n
Setting this flag indicates the caller can accept resources for part of the
object. That is, if the size of the object exceeds the resources available,
only resources for a portion of the object are allocated. The system
indicates this condition by returning status
.BR DDI_DMA_PARTIAL_MAP .
At a
later point, the caller can use
.BR ddi_dma_getwin (9F)
to change the valid
portion of the object for which resources are allocated. If resources were
allocated for only part of the object, \fBddi_dma_addr_bind_handle()\fR
returns resources for the first
.BR DMA "window. Even when"
.B DDI_DMA_PARTIAL
is set, the system may decide to allocate resources
for the entire object (less overhead) in which case
.B DDI_DMA_MAPPED
is
returned.
.RE

.sp
.LP
The callback function
.I callback
indicates how a caller wants to handle
the possibility of resources not being available. If
.I callback
is set
to
.BR DDI_DMA_DONTWAIT ,
the caller does not care if the allocation fails,
and can handle an allocation failure appropriately. If
.I callback
is set
to
.BR DDI_DMA_SLEEP ,
the caller wishes to have the allocation routines
wait for resources to become available. If any other value is set and a
.B DMA
resource allocation fails, this value is assumed to be the address
of a function to be called when resources  become available. When the
specified function is called,
.I arg
is passed to it as an argument. The
specified callback function must  return either
.B DDI_DMA_CALLBACK_RUNOUT
or
.BR DDI_DMA_CALLBACK_DONE .
.B DDI_DMA_CALLBACK_RUNOUT
indicates that the callback function attempted
to allocate
.B DMA
resources but failed.  In this case, the callback
function is put back on a list to be called again later.
.B DDI_DMA_CALLBACK_DONE
indicates that either the allocation of
.B DMA
resources was successful or the driver no longer wishes to
retry.
.sp
.LP
The callback function is called in interrupt context. Therefore, only
system functions accessible from interrupt context are be available. The
callback function must take whatever steps are necessary to protect its
critical resources, data structures, queues, and so on.
.SH RETURN VALUES
.sp
.LP
.B ddi_dma_addr_bind_handle()
returns:
.sp
.ne 2
.mk
.na
.B DDI_DMA_MAPPED
.ad
.RS 24n
.rt
Successfully allocated resources for the entire object.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_PARTIAL_MAP
.ad
.RS 24n
.rt
Successfully allocated resources for a part of the object. This is
acceptable when partial transfers are permitted by setting the
.B DDI_DMA_PARTIAL
flag in \fIflags\fR.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_INUSE
.ad
.RS 24n
.rt
Another I/O transaction is using the
.B DMA
handle.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_NORESOURCES
.ad
.RS 24n
.rt
No resources are available at the present time.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_NOMAPPING
.ad
.RS 24n
.rt
The object cannot be reached by the device requesting the resources.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_TOOBIG
.ad
.RS 24n
.rt
The object is too big.  A request of this size can never be satisfied on
this particular system.  The maximum size varies depending on machine and
configuration.
.RE

.SH CONTEXT
.sp
.LP
.B ddi_dma_addr_bind_handle()
can be called from user, kernel, or
interrupt context, except when
.I callback
is set to
.BR DDI_DMA_SLEEP ,
in which case it can only be called from user or kernel
context.
.SH SEE ALSO
.sp
.LP
.BR ddi_dma_alloc_handle (9F),
.BR ddi_dma_free_handle (9F),
.BR ddi_dma_getwin (9F),
.BR ddi_dma_mem_alloc (9F),
.BR ddi_dma_mem_free (9F),
.BR ddi_dma_nextcookie (9F),
.BR ddi_dma_sync (9F),
.BR ddi_dma_unbind_handle (9F),
.BR ddi_umem_iosetup (9F),
.BR ddi_dma_attr (9S),
.BR ddi_dma_cookie (9S)
.sp
.LP
.I Writing Device Drivers
.SH NOTES
.sp
.LP
If the driver permits partial mapping with the
.B DDI_DMA_PARTIAL
flag,
the number of cookies in each window may exceed the size of the device's
scatter/gather list as specified in the
.B dma_attr_sgllen
field in the
.BR ddi_dma_attr (9S)
structure. In this case, each set of cookies
comprising a
.B DMA
window will satisfy the
.B DMA
attributes as
described in the
.BR ddi_dma_attr "(9S) structure in all aspects. The"
driver should set up its
.B DMA
engine and perform one transfer for each
set of cookies sufficient for its scatter/gather list, up to the number of
cookies for this window, before advancing to the next window using
.BR ddi_dma_getwin (9F).
