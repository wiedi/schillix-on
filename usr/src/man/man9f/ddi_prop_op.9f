'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_prop_op 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_prop_op, ddi_getprop, ddi_getlongprop, ddi_getlongprop_buf, ddi_getproplen
\- get property information for leaf device drivers
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint\fR \fBddi_prop_op\fR(\fBdev_t\fR \fIdev\fR, \fBdev_info_t *\fIdip\fR, \fBddi_prop_op_t\fR \fIprop_op\fR,
     \fBint\fR \fIflags\fR, \fBchar *\fIname\fR, \fBcaddr_t\fR \fIvaluep\fR, \fBint *\fIlengthp\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_getprop\fR(\fBdev_t\fR \fIdev\fR, \fBdev_info_t *\fIdip\fR, \fBint\fR \fIflags\fR, \fBchar *\fIname\fR,
      \fBint\fR \fIdefvalue\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_getlongprop\fR(\fBdev_t\fR \fIdev\fR, \fBdev_info_t *\fIdip\fR, \fBint\fR \fIflags\fR, \fBchar *\fIname\fR,
      \fBcaddr_t\fR \fIvaluep\fR, \fBint *\fIlengthp\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_getlongprop_buf\fR(\fBdev_t\fR \fIdev\fR, \fBdev_info_t *\fIdip\fR, \fBint\fR \fIflags\fR, \fBchar *\fIname\fR,
     \fBcaddr_t\fR \fIvaluep\fR, \fBint *\fIlengthp\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_getproplen\fR(\fBdev_t\fR \fIdev\fR, \fBdev_info_t *\fIdip\fR, \fBint\fR \fIflags\fR, \fBchar *\fIname\fR,
      \fBint *\fIlengthp\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI). The
.BR ddi_getlongprop() ,
.BR ddi_getlongprop_buf() ,
.BR ddi_getprop() ,
and
.BR ddi_getproplen()
functions are obsolete. Use \fBddi_prop_lookup\fR(9F) instead of
.BR ddi_getlongprop() ,
.BR ddi_getlongprop_buf() ,
and
.BR ddi_getproplen() .
Use
.BR ddi_prop_get_int (9F)
instead of
.B ddi_getprop()
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I dev
.ad
.RS 12n
.rt
Device number associated with property or
.B DDI_DEV_T_ANY
as the
.I wildcard
device number.
.RE

.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 12n
.rt
Pointer to a device info node.
.RE

.sp
.ne 2
.mk
.na
.I prop_op
.ad
.RS 12n
.rt
Property operator.
.RE

.sp
.ne 2
.mk
.na
.I flags
.ad
.RS 12n
.rt
Possible flag values are some combination of:
.sp
.ne 2
.mk
.na
.B DDI_PROP_DONTPASS
.ad
.RS 21n
.rt
do not pass request to parent device information node if property not found
.RE

.sp
.ne 2
.mk
.na
.B DDI_PROP_CANSLEEP
.ad
.RS 21n
.rt
the routine may sleep while allocating memory
.RE

.sp
.ne 2
.mk
.na
.B DDI_PROP_NOTPROM
.ad
.RS 21n
.rt
do not look at PROM properties (ignored on architectures that do not support
PROM properties)
.RE

.RE

.sp
.ne 2
.mk
.na
.I name
.ad
.RS 12n
.rt
String containing the name of the property.
.RE

.sp
.ne 2
.mk
.na
.I valuep
.ad
.RS 12n
.rt
If
.I prop_op
is
.BR PROP_LEN_AND_VAL_BUF ,
this should be a pointer to
the users buffer. If
.I prop_op
is
.B PROP_LEN_AND_VAL_ALLOC,
this should
be the
.I address
of a pointer.
.RE

.sp
.ne 2
.mk
.na
.I lengthp
.ad
.RS 12n
.rt
On exit,
.I *lengthp
will contain the property length. If
.I prop_op
is
.B PROP_LEN_AND_VAL_BUF
then before calling
.BR ddi_prop_op() ,
.I lengthp
should point to an
.B int
that contains the length of callers
buffer.
.RE

.sp
.ne 2
.mk
.na
.I defvalue
.ad
.RS 12n
.rt
The value that
.B ddi_getprop()
returns if the property is not found.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B ddi_prop_op()
function gets arbitrary-size properties for leaf
devices. The routine searches the device's property list. If it does not find
the property at the device level, it examines the
.I flags
argument, and if
.B DDI_PROP_DONTPASS
is set, then
.B ddi_prop_op()
returns
.B DDI_PROP_NOT_FOUND.
Otherwise, it passes the request to the next level of
the device info tree. If it does find the property, but the property has been
explicitly undefined, it returns
.B DDI_PROP_UNDEFINED.
Otherwise it returns
either the property length, or both the length and value of the property to the
caller via the
.I valuep
and
.I lengthp
pointers, depending on the value
of
.IR prop_op ,
as described below, and returns
.B DDI_PROP_SUCCESS.
If a
property cannot be found at all,
.B DDI_PROP_NOT_FOUND
is returned.
.sp
.LP
Usually, the
.I dev
argument should be set to the actual device number that
this property applies to.  However, if the
.I dev
argument is
.B DDI_DEV_T_ANY,
the
.IR "wildcard dev" ,
then
.B ddi_prop_op()
will
match the request based on
.I name
only (regardless of the actual \fIdev\fR
the property was created with). This property/dev match is done according to
the property search order which is to first search software properties created
by the driver in
.I "last-in, first-out"
(LIFO) order, next search software
properties created by the
.I system
in LIFO order, then search PROM
properties if they exist in the system architecture.
.sp
.LP
Property operations are specified by the
.I prop_op
argument. If
.I prop_op
is
.B PROP_LEN,
then
.B ddi_prop_op()
just sets the callers
length,
.I *lengthp,
to the property length and returns the value
.B DDI_PROP_SUCCESS
to the caller. The
.I valuep
argument is not used in
this case.  Property lengths are
.B 0
for boolean properties,
\fBsizeof\|(int)\fR for integer properties, and size in bytes for long
(variable size) properties.
.sp
.LP
If
.I prop_op
is
.B PROP_LEN_AND_VAL_BUF,
then
.I valuep
should be a
pointer to a user-supplied buffer whose length should be given in
.I *lengthp
by the caller.  If the requested property exists,
.B ddi_prop_op()
first sets
.I *lengthp
to the property length.  It then
examines the size of the buffer supplied by the caller, and if it is large
enough, copies the property value into that buffer, and returns
.B DDI_PROP_SUCCESS.
If the named property exists but the buffer supplied is
.RB "too small to hold it, it returns" " DDI_PROP_BUF_TOO_SMALL."
.sp
.LP
If
.I prop_op
is
.B PROP_LEN_AND_VAL_ALLOC,
and the property is found,
.B ddi_prop_op()
sets
.I *lengthp
to the property length. It then
attempts to allocate a buffer to return to the caller using the
.BR kmem_alloc (9F)
routine, so that memory can be later recycled using
.BR kmem_free (9F).
The driver is expected to call
.B kmem_free()
with the
returned address and size when it is done using the allocated buffer. If the
allocation is successful, it sets
.I *valuep
to point to the allocated
buffer, copies the property value into the buffer and returns
.B DDI_PROP_SUCCESS.
Otherwise, it returns
.B DDI_PROP_NO_MEMORY.
Note
that the
.I flags
argument may affect the behavior of memory allocation in
.BR ddi_prop_op() .
In particular, if
.B DDI_PROP_CANSLEEP
is set, then the
routine will wait until memory is available to copy the requested property.
.sp
.LP
The
.B ddi_getprop()
function returns boolean and integer-size properties.
It is a convenience wrapper for
.B ddi_prop_op()
with
.I prop_op
set to
.BR PROP_LEN_AND_VAL_BUF ,
and the buffer is provided by the wrapper. By
convention, this function returns a
.B 1
for boolean (zero-length)
properties.
.sp
.LP
The
.B ddi_getlongprop()
function returns arbitrary-size properties. It is
a convenience wrapper for
.B ddi_prop_op()
with
.I prop_op
set to
.B PROP_LEN_AND_VAL_ALLOC,
so that the routine will allocate space to hold
the buffer that will be returned to the caller via
.IR *valuep .
.sp
.LP
The
.B ddi_getlongprop_buf()
function returns arbitrary-size properties. It
is a convenience wrapper for
.B ddi_prop_op()
with
.I prop_op
set to
.B PROP_LEN_AND_VAL_BUF
so the user must supply a buffer.
.sp
.LP
The
.B ddi_getproplen()
function returns the length of a given property. It
is a convenience wrapper for
.B ddi_prop_op()
with
.I prop_op
set to
.BR PROP_LEN .
.SH RETURN VALUES
.sp
.LP
The
.BR ddi_prop_op() ,
.BR ddi_getlongprop() ,
.BR ddi_getlongprop_buf() ,
and
.B ddi_getproplen()
functions return:
.sp
.ne 2
.mk
.na
.B DDI_PROP_SUCCESS
.ad
.RS 26n
.rt
Property found and returned.
.RE

.sp
.ne 2
.mk
.na
.B DDI_PROP_NOT_FOUND
.ad
.RS 26n
.rt
Property not found.
.RE

.sp
.ne 2
.mk
.na
.B DDI_PROP_UNDEFINED
.ad
.RS 26n
.rt
Property already explicitly undefined.
.RE

.sp
.ne 2
.mk
.na
.B DDI_PROP_NO_MEMORY
.ad
.RS 26n
.rt
Property found, but unable to allocate memory.
.I lengthp
points to the
correct property length.
.RE

.sp
.ne 2
.mk
.na
.B DDI_PROP_BUF_TOO_SMALL
.ad
.RS 26n
.rt
Property found, but the supplied buffer is too small.
.I lengthp
points to
the correct property length.
.RE

.sp
.LP
The
.B ddi_getprop()
function returns:
.sp
.LP
The value of the property or the value passed into the routine as
.I defvalue
if the property is not found. By convention, the value of zero
length properties (boolean properties) are returned as the integer value 1.
.SH CONTEXT
.sp
.LP
These functions can be called from user, interrupt, or kernel context,
provided
.B DDI_PROP_CANSLEEP
is not set; if it is set, they cannot be
called from interrupt context.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.51i) |cw(2.99i)
lw(2.51i) |lw(2.99i)
.
\fBATTRIBUTE TYPE\fR\fBATTRIBUTE VALUE\fR
_
Stability LevelT{
\fBddi_getlongprop()\fR, \fBddi_getlongprop_buf()\fR, \fBddi_getprop()\fR, and \fBddi_getproplen()\fR functions are Obsolete
T}
.TE

.SH SEE ALSO
.sp
.LP
.BR attributes (5),
.BR ddi_prop_create (9F),
.BR ddi_prop_get_int (9F),
.BR ddi_prop_lookup (9F),
.BR kmem_alloc (9F),
.BR kmem_free (9F)
.sp
.LP
.I Writing Device Drivers
