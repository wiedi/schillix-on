'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc.
.\" All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH qtimeout 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
qtimeout \- execute a function after a specified length of time
.SH SYNOPSIS
.LP
.nf
#include <sys/stream.h>
#include <sys/ddi.h>


\fBtimeout_id_t\fR \fBqtimeout\fR(\fBqueue_t *\fIq\fR, \fBvoid\fR (\fI*func\fR)(\fIvoid *\fR),
     \fBvoid\fR \fI*arg\fR, \fBclock_t\fR \fIticks\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I q
.ad
.RS 9n
.rt
Pointer to
.B STREAMS
queue structure.
.RE

.sp
.ne 2
.mk
.na
.I func
.ad
.RS 9n
.rt
Kernel function to invoke when the time increment expires.
.RE

.sp
.ne 2
.mk
.na
.I arg
.ad
.RS 9n
.rt
Argument to the function.
.RE

.sp
.ne 2
.mk
.na
.I ticks
.ad
.RS 9n
.rt
Number of clock ticks to wait before the function is called. Use
.BR drv_usectohz (9F)
to convert microseconds to clock ticks.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B qtimeout()
function schedules the specified function \fIfunc\fR
to be called after a specified time interval.
.I func
is called with
.I arg
as a parameter. Control is immediately returned to the caller.
This is useful when an event is known to occur within a specific time frame,
or when you want to wait for I/O processes when an interrupt is not
available or might cause problems. The exact time interval over which the
timeout takes effect cannot be guaranteed, but the value given is a close
approximation.
.sp
.LP
The
.B qtimeout()
function is tailored to be used with the enhanced
.B STREAMS
framework interface which is based on the concept of
perimeters. (See
.BR mt-streams (9F).)
.B qtimeout()
schedules the
specified function to execute after entering the perimeters associated with
the queue passed in as the first parameter to
.BR qtimeout() .
All
outstanding timeouts and bufcalls must be cancelled (using, respectively,
.BR quntimeout (9F)
and \fBqunbufcall\fR(9F)) before a driver close routine
can block and before the close  routine calls \fBqprocsoff\fR(9F).
.sp
.LP
The \fBqprocson\fR(9F) function must be called before calling
.BR qtimeout() .
.SH RETURN VALUES
.sp
.LP
The
.B qtimeout()
function returns an opaque non-zero \fBtimeout\fR
identifier that can be passed to
.BR quntimeout "(9F) to cancel the request."
Note: No value is returned from the called function.
.SH CONTEXT
.sp
.LP
The
.B qtimeout()
function can be called from user, interrupt, or kernel
context.
.SH SEE ALSO
.sp
.LP
.BR drv_usectohz (9F),
.BR mt-streams (9F),
.BR qbufcall (9F),
.BR qprocson (9F),
.BR qunbufcall (9F),
.BR quntimeout (9F)
.sp
.LP
.I Writing Device Drivers
.sp
.LP
.I STREAMS Programming Guide
