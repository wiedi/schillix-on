'\" te
.\" Copyright (c) 1999, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH csx_RequestWindow 9F "19 Jul 1996" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
csx_RequestWindow, csx_ReleaseWindow \- request or release window
resources
.SH SYNOPSIS
.LP
.nf
#include <sys/pccard.h>



\fBint32_t\fR \fBcsx_RequestWindow\fR(\fBclient_handle_t\fR \fIch\fR, \fBwindow_handle_t *\fIwh\fR,
     \fBwin_req_t *\fIwr\fR);
.fi

.LP
.nf
\fBint32_t\fR \fBcsx_ReleaseWindow\fR(\fBwindow_handle_t\fR \fIwh\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris
.B DDI
Specific (Solaris
.B DDI)
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I ch
.ad
.RS 6n
.rt
Client handle returned from
.BR csx_RegisterClient (9F).
.RE

.sp
.ne 2
.mk
.na
.I wh
.ad
.RS 6n
.rt
Pointer to a
.B window_handle_t
structure.
.RE

.sp
.ne 2
.mk
.na
.I wr
.ad
.RS 6n
.rt
Pointer to a
.B win_req_t
structure.
.RE

.SH DESCRIPTION
.sp
.LP
The function
.B csx_RequestWindow()
requests a block of system address
space be assigned to a
.B PC
Card in a socket.
.sp
.LP
The function
.B csx_ReleaseWindow()
releases window resources which were
obtained by a call to
.BR csx_RequestWindow() .
No adapter or socket
hardware is modified by this function.
.sp
.LP
The \fBcsx_MapMemPage\fR(9F) and \fBcsx_ModifyWindow\fR(9F) functions use
the window handle returned by
.BR csx_RequestWindow() .
This window handle
must be freed by calling
.B csx_ReleaseWindow()
when the client is done
using this window.
.sp
.LP
The
.B PC
Card Attribute or Common Memory offset for this window is set
by
.BR csx_MapMemPage (9F).
.SH STRUCTURE MEMBERS
.sp
.LP
The structure members of
.B win_req_t
are:
.sp
.in +2
.nf
uint32_t      Socket;                  /* socket number */
uint32_t      Attributes;              /* window flags */
uint32_t      Base.base;               /* requested window */
                                        /*   base address */
acc_handle_t  Base.handle;             /* returned handle for
                                        /*   base of window */
uint32_t      Size;                    /* window size requested */
                                        /*   or granted */
uint32_t      win_params.AccessSpeed;  /* window access speed */
uint32_t      win_params.IOAddrLines;  /* IO address lines decoded */
uint32_t      ReqOffset;               /* required window offest */
.fi
.in -2

.sp
.LP
The fields are defined as follows:
.sp
.ne 2
.mk
.na
.B Socket
.ad
.RS 26n
.rt
Not used in Solaris, but for portability with other Card Services
implementations, it should be set to the logical socket number.
.RE

.sp
.ne 2
.mk
.na
.B Attributes
.ad
.RS 26n
.rt
This field is bit-mapped and is defined as follows:
.sp
.ne 2
.mk
.na
.B WIN_MEMORY_TYPE_IO
.ad
.sp .6
.RS 4n
Points to I/O space.
.RE

.sp
.ne 2
.mk
.na
.B WIN_MEMORY_TYPE_CM
.ad
.sp .6
.RS 4n
Points to common memory space.
.RE

.sp
.ne 2
.mk
.na
.B WIN_MEMORY_TYPE_AM
.ad
.sp .6
.RS 4n
These bits select which type of window is being requested. One of these
bits must be set.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ENABLE
.ad
.sp .6
.RS 4n
The client must set this bit to enable the window.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_BIG_ENDIAN
.ad
.sp .6
.RS 4n
Describes device as big-endian.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_LITTLE_ENDIAN
.ad
.sp .6
.RS 4n
These bits describe the endian characteristics of the device as big endian
or little endian, respectively. Even though most of the devices will have
the same endian characteristics as their busses, there are examples of
devices with an
.B I/O
processor that has opposite endian characteristics
of the busses. When either of these bits are set, byte swapping will
automatically be performed by the system if the host machine and the device
data formats have opposite endian characteristics. The implementation may
take advantage of hardware platform byte swapping capabilities.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_NEVER_SWAP
.ad
.sp .6
.RS 4n
When this is specified, byte swapping will not be invoked in the data
access functions.
.RE

The ability to specify the order in which the
.B CPU
will reference data
is provided by the following
.B Attributes
bits, only one of which may be
specified:
.sp
.ne 2
.mk
.na
.B WIN_ACC_STRICT_ORDER
.ad
.sp .6
.RS 4n
The data references must be issued by a
.B CPU
in program order. Strict
ordering is the default behavior.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_UNORDERED_OK
.ad
.sp .6
.RS 4n
The
.B CPU
may re-order the data references. This includes all kinds of
re-ordering (that is, a load followed by a store may be replaced by a store
followed by a load).
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_MERGING_OK
.ad
.sp .6
.RS 4n
The
.B CPU
may merge individual stores to consecutive locations. For
example, the
.B CPU
may turn two consecutive byte stores into one
halfword store. It may also batch individual loads. For example, the \fBCPU
\fRmay turn two consecutive byte loads into one halfword load. This bit also
implies re-ordering.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_LOADCACHING_OK
.ad
.sp .6
.RS 4n
The
.B CPU
may cache the data it fetches and reuse it until another
store occurs. The default behavior is to fetch new data on every load. This
bit also implies merging and re-ordering.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_STORECACHING_OK
.ad
.sp .6
.RS 4n
The
.B CPU
may keep the data in the cache and push it to the device
(perhaps with other data) at a later time. The default behavior is to push
the data right away. This bit also implies load caching, merging, and
re-ordering.
.RE

These values are advisory, not mandatory. For example, data can be ordered
without being merged or cached, even though a driver requests unordered,
merged and cached together.
.sp
All other bits in the
.B Attributes
field must be set to
.BR 0 .
.sp
On successful return from
.BR csx_RequestWindow() ,
.B WIN_OFFSET_SIZE
is set in the
.B Attributes
field when the client must specify card
offsets to \fBcsx_MapMemPage\fR(9F) that are a multiple of the window
size.
.RE

.sp
.ne 2
.mk
.na
.B Base.base
.ad
.RS 26n
.rt
This field must be set to
.B 0
on calling
.BR csx_RequestWindow() .
.RE

.sp
.ne 2
.mk
.na
.B Base.handle
.ad
.RS 26n
.rt
On successful return from
.BR csx_RequestWindow() ,
the
.BR Base.handle
field contains an access handle corresponding to the first byte of the
allocated memory window which the client must use when accessing the \fBPC
\fRCard's memory space via the common access functions. A client must
\fBnot\fR make any assumptions as to the format of the returned
\fBBase.handle\fR field value.
.RE

.sp
.ne 2
.mk
.na
.B Size
.ad
.RS 26n
.rt
On calling
.BR csx_RequestWindow() ,
the
.B Size
field is the size in
bytes of the memory window requested.
.B Size
may be zero to indicate
that Card Services should provide the smallest sized window available. On
successful return from
.BR csx_RequestWindow() ,
the
.B Size
field
contains the actual size of the window allocated.
.RE

.sp
.ne 2
.mk
.na
.B win_params.AccessSpeed
.ad
.RS 26n
.rt
This field specifies the access speed of the window if the client is
requesting a memory window. The
.B AccessSpeed
field bit definitions use
the format of the extended speed byte of the Device
.B ID
tuple. If the
mantissa is
.B 0
(noted as reserved in the \fBPC Card 95 Standard\fR),
the lower bits are a binary code representing a speed from the following
table:
.RE

.sp

.sp
.TS
tab() box;
lw(2.75i) |lw(2.75i)
lw(2.75i) |lw(2.75i)
.
\fBCode\fR\fBSpeed\fR
_
0(Reserved - do not use).
_
1250 nsec
_
2200 nsec
_
3150 nsec
_
4100 nse
_
5-7(Reserved\(emdo not use.)
.TE

.sp
.LP
To request a window that supports the
.B WAIT
signal,
.B OR-in
the
\fBWIN_USE_WAIT\fR bit to the \fBAccessSpeed\fR value before calling this
function.
.sp
.LP
It is recommended that clients use the \fBcsx_ConvertSpeed\fR(9F) function
to generate the appropriate
.B AccessSpeed
values rather than manually
perturbing the
.B AccessSpeed
field.
.sp
.ne 2
.mk
.na
.B win_params.IOAddrLines
.ad
.RS 26n
.rt
If the client is requesting an
.B I/O
.RB "window, the" " IOAddrLines"
field is the number of
.B I/O
address lines decoded by the
.B PC
Card
in the specified socket. Access to the
.B I/O
window is not enabled until
\fBcsx_RequestConfiguration\fR(9F) has been invoked successfully.
.RE

.sp
.ne 2
.mk
.na
\fBReqOffset\fR
.ad
.RS 26n
.rt
This field is a Solaris-specific extension that can be used by clients to
generate optimum window offsets passed to
.BR csx_MapMemPage (9F).
.RE

.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B CS_SUCCESS
.ad
.RS 27n
.rt
Successful operation.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_ATTRIBUTE
.ad
.RS 27n
.rt
\fBAttributes\fR are invalid.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_SPEED
.ad
.RS 27n
.rt
Speed is invalid.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_HANDLE
.ad
.RS 27n
.rt
Client handle is invalid.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_SIZE
.ad
.RS 27n
.rt
Window size is invalid.
.RE

.sp
.ne 2
.mk
.na
.B CS_NO_CARD
.ad
.RS 27n
.rt
No
.B PC
Card in socket.
.RE

.sp
.ne 2
.mk
.na
.B CS_OUT_OF_RESOURCE
.ad
.RS 27n
.rt
Unable to allocate window.
.RE

.sp
.ne 2
.mk
.na
.B CS_UNSUPPORTED_FUNCTION
.ad
.RS 27n
.rt
No
.B PCMCIA
hardware installed.
.RE

.SH CONTEXT
.sp
.LP
These functions may be called from user or kernel context.
.SH SEE ALSO
.sp
.LP
.BR csx_ConvertSpeed (9F),
.BR csx_MapMemPage (9F),
\fBcsx_ModifyWindow\fR(9F), \fBcsx_RegisterClient\fR(9F),
\fBcsx_RequestConfiguration\fR(9F) 
.sp
.LP
.I "PC Card"
.I "95 Standard,"
PCMCIA/JEIDA
