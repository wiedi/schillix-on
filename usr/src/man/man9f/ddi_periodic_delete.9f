'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_periodic_delete 9F "6 May 2009" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_periodic_delete \- cancel nanosecond periodic timeout requests
.SH SYNOPSIS
.LP
.nf
#include <sys/dditypes.h>
#include <sys/sunddi.h>

\fBvoid\fR \fBddi_periodic_delete\fR(\fBddi_periodic_t\fR \fIreq\fB);\fR
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I req
.ad
.RS 7n
.rt
.B ddi_periodic_t
opaque value returned by
.BR ddi_periodic_add (9F)
.RE

.SH DESCRIPTION
.sp
.LP
The
.B ddi_periodic_delete()
function cancels the
.BR ddi_periodic_add (9F)
request that was previously issued.
.sp
.LP
As with
.BR untimeout "(9F), calling"
.B ddi_periodic_delete()
against a
periodic
.I timeout
request which is either running on another CPU, or
has already been canceled causes no problems. Unlike
.BR untimeout (9F),
there are no restrictions on the lock which might be held across the call to
.BR ddi_periodic_delete() .
.SH CONTEXT
.sp
.LP
The
.B ddi_periodic_delete()
function may be called from user or kernel
context.
.SH EXAMPLES
.LP
.B Example 1
Cancelling a timeout request
.sp
.LP
In the following example, the device driver cancels the \fItimeout\fR
request by calling
.B ddi_periodic_delete()
against the request that was
previously issued.

.sp
.in +2
.nf
/*
* Stop the periodic timer
*/
static void
stop_periodic_timer(struct my_state *statep)
{
         ddi_periodic_delete(statep->periodic_id);
         delay(1); /* wait for one tick */
         mutex_destory(&statep->lock);
}

static void
start_periodic_timer(struct my_state *statep)
{
         hrtime_t interval = CHECK_INTERVAL;

         mutex_init(&statep->lock, NULL, MUTEX_DRIVER,
             (void *)DDI_IPL_0);

         /*
          * Register my_callback which is invoked periodically
          * in CHECK_INTERVAL in kernel context.
          */
         statep->periodic_id = ddi_periodic_add(my_periodic_func,
             statep, interval, DDI_IPL_0);
}

static void
my_periodic_func(void *arg)
{
           /*
            * This handler is invoked periodically.
            */
           struct my_state *statep = (struct my_state *)arg;

           mutex_enter(&statep->lock);
           if (load_unbalanced(statep)) {
               balance_tasks(statep);
           }
           mutex_exit(&statep->lock);
}
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR cv_timedwait (9F),
.BR ddi_intr_get_pri (9F),
.BR ddi_periodic_add (9F),
.BR delay (9F),
.BR drv_usectohz (9F),
.BR qtimeout (9F),
.BR quntimeout (9F),
.BR timeout (9F),
.BR untimeout (9F)
.SH NOTES
.sp
.LP
There might be a race between a callback invocation and
.BR ddi_periodic_delete() .
A device driver should take a responsibility
for this avoidance if needed by using the kernel synchronization such as a
mutex lock or calling
.BR delay "(9F) as in the example above."
