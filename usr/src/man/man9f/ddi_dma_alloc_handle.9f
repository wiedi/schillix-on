'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_dma_alloc_handle 9F "22 Sep 1996" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_dma_alloc_handle \- allocate DMA handle
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint\fR \fBddi_dma_alloc_handle\fR(\fBdev_info_t *\fIdip\fR, \fBddi_dma_attr_t *\fIattr\fR,
     \fBint  (*\fIcallback\fR) (caddr_t), \fBcaddr_t\fR \fIarg\fR, \fBddi_dma_handle_t *\fIhandlep\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 12n
.rt
Pointer to the device's
.B dev_info
structure.
.RE

.sp
.ne 2
.mk
.na
.I attr
.ad
.RS 12n
.rt
Pointer to a
.B DMA
attribute structure for this device (see
.BR ddi_dma_attr (9S)).
.RE

.sp
.ne 2
.mk
.na
.I callback
.ad
.RS 12n
.rt
The address of a function to call back later if resources aren't available
now. The following special function addresses may also be used.
.sp
.ne 2
.mk
.na
.B DDI_DMA_SLEEP
.ad
.RS 20n
.rt
Wait until resources are available.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_DONTWAIT
.ad
.RS 20n
.rt
Do not wait until resources are available and do not schedule a callback.
.RE

.RE

.sp
.ne 2
.mk
.na
.I arg
.ad
.RS 12n
.rt
Argument to be passed to a callback function, if such a function is
specified.
.RE

.sp
.ne 2
.mk
.na
.I handlep
.ad
.RS 12n
.rt
Pointer to the
.B DMA
handle to be initialized.
.RE

.SH DESCRIPTION
.sp
.LP
.B ddi_dma_alloc_handle()
allocates a new
.B DMA
handle. A
.B DMA
handle is an opaque object used as a reference to subsequently
allocated
.B DMA
resources.
.B ddi_dma_alloc_handle()
accepts as
parameters the device information referred to by
.I dip
and the device's
.B DMA
attributes described by a
.BR ddi_dma_attr "(9S) structure. A"
successful call to
.B ddi_dma_alloc_handle()
fills in the value pointed
to by
.IR handlep .
A
.B DMA
handle must only be used by the device
for which it was allocated and is only valid for one  I/O transaction at a
time.
.sp
.LP
The callback function,
.IR callback ,
indicates how a caller wants to
handle the possibility of resources not being available. If  \fIcallback\fR
is set to
.BR DDI_DMA_DONTWAIT ,
then the caller does not care if the
allocation fails, and can handle an allocation failure appropriately. If
.I callback
is set to
.BR DDI_DMA_SLEEP ,
then the caller wishes to
have the allocation routines wait for resources to become available. If any
other value is set, and a
.B DMA
resource allocation fails, this value is
assumed to be a function to call at a later time when resources may become
available. When the specified function is called, it is passed
.I arg
as
an argument. The specified callback function must return either
.B DDI_DMA_CALLBACK_RUNOUT
or
.BR DDI_DMA_CALLBACK_DONE .
.B DDI_DMA_CALLBACK_RUNOUT
indicates that the callback routine attempted
to allocate
.B DMA
resources but failed to do so, in which case the
callback function is put back on a list to be called again later.
.B DDI_DMA_CALLBACK_DONE
indicates either success at allocating
.BR DMA
resources or the driver no longer wishes to retry.
.sp
.LP
The callback function is called in interrupt context. Therefore, only
system functions that are accessible from interrupt context  is available.
The callback function must take whatever steps necessary to protect its
critical resources, data structures, queues, and so forth.
.sp
.LP
When a
.B DMA
handle is no longer needed, \fBddi_dma_free_handle\fR(9F)
must be called to free the handle.
.SH RETURN VALUES
.sp
.LP
.B ddi_dma_alloc_handle()
returns:
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 23n
.rt
Successfully allocated a new
.B DMA
handle.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_BADATTR
.ad
.RS 23n
.rt
The attributes specified in the
.BR ddi_dma_attr "(9S) structure make it"
impossible for the system to allocate potential
.B DMA
resources.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_NORESOURCES
.ad
.RS 23n
.rt
No resources are available.
.RE

.SH CONTEXT
.sp
.LP
.B ddi_dma_alloc_handle()
can be called from user, kernel, or interrupt
context, except when
.I callback
is set to
.BR DDI_DMA_SLEEP ,
in which
case it can be called from user or kernel context only.
.SH SEE ALSO
.sp
.LP
.BR ddi_dma_addr_bind_handle (9F),
.BR ddi_dma_buf_bind_handle (9F),
.BR ddi_dma_burstsizes (9F),
.BR ddi_dma_free_handle (9F),
.BR ddi_dma_unbind_handle (9F),
.BR ddi_dma_attr (9S)
.sp
.LP
.I Writing Device Drivers
