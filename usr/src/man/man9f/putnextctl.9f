'\" te
.\" Copyright 1989 AT&T
.\" Copyright (c) 2006, Sun Microsystems, Inc.,  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH putnextctl 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
putnextctl \- send a control message to a queue
.SH SYNOPSIS
.LP
.nf
#include <sys/stream.h>



\fBint\fR \fBputnextctl\fR(\fBqueue_t *\fIq\fR, \fBint\fR \fItype\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Architecture independent level 1 (DDI/DKI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I q
.ad
.RS 8n
.rt
Queue to which the message is to be sent.
.RE

.sp
.ne 2
.mk
.na
.I type
.ad
.RS 8n
.rt
Message type (must be control, not data type).
.RE

.SH DESCRIPTION
.sp
.LP
The
.B putnextctl()
function tests the
.I type
argument to make sure
a data type has not been specified, and then attempts to allocate a message
block.
.B putnextctl()
fails if
.I type
is
.BR M_DATA ,
.BR M_PROTO ,
or
.BR M_PCPROTO ,
or if a message block cannot be
allocated. If successful,
.B putnextctl()
calls the
.BR put (9E)
routine of the queue pointed to by
.I q
with the newly allocated and
initialized messages.
.sp
.LP
A call to \fBputnextctl(\fIq\fB,\fItype\fB)\fR is an atomic
equivalent of \fBputctl(\fIq\fB->q_next\fR,\fItype\fI).\fR The
STREAMS framework provides whatever mutual exclusion is necessary to insure
that dereferencing
.I q
through its
.B q_next
field and then invoking
.BR putctl (9F)
proceeds without interference from other threads.
.sp
.LP
The
.B putnextctl()
function should always be used in preference to
.BR putctl (9F)
.SH RETURN VALUES
.sp
.LP
On success,
.B 1
is returned. If
.I type
is a data type, or if a
message block cannot be allocated,
.B 0
is returned.
.SH CONTEXT
.sp
.LP
The
.B putnextctl()
function can be user, interrupt, or kernel
context.
.SH EXAMPLES
.sp
.LP
The
.B send_ctl
routine is used to pass control messages downstream.
.B M_BREAK
messages are handled with
.BR putnextctl (\|)
(line 8).
.BR putnextctl1 (9F)
(line 13) is used for
.B M_DELAY
messages,  so that
.I parm
can be used to specify the length of the delay. In either case,
if a message block cannot be allocated  a  variable recording the number of
allocation failures  is incremented (lines 9, 14). If an invalid message
type is detected,
.BR cmn_err (9F)
panics the system (line 18).
.sp
.in +2
.nf
1 void
 2 send_ctl(queue_t *wrq, uchar_t type, uchar_t parm)
 3 {
 4	        extern int num_alloc_fail;
 5
 6	        switch (type) {
 7         case M_BREAK:
 8                if (!putnextctl(wrq, M_BREAK))
 9	                        num_alloc_fail++;
10	               break;
11
12	        case M_DELAY:
13                if (!putnextctl1(wrq, M_DELAY, parm))
14	                        num_alloc_fail++;
15                break;
16
17         default:
18                cmn_err(CE_PANIC, "send_ctl: bad message type passed");
19	               break;
20	        }
21  }
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR put (9E),
.BR cmn_err (9F),
.BR datamsg (9F),
.BR putctl (9F),
.BR putnextctl1 (9F)
.sp
.LP
.I Writing Device Drivers
.sp
.LP
.I STREAMS Programming Guide
