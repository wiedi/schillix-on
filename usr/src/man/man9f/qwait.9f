'\" te
.\" Copyright (c) 2003, Sun Microsystems, Inc., All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH qwait 9F "15 Dec 2003" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
qwait, qwait_sig \- STREAMS wait routines
.SH SYNOPSIS
.LP
.nf
#include <sys/stream.h>
#include <sys/ddi.h>



\fBvoid\fR \fBqwait\fR(\fBqueue_t *\fIq\fR);
.fi

.LP
.nf
\fBint\fR \fBqwait_sig\fR(\fBqueue_t *\fIq\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I qp
.ad
.RS 6n
.rt
Pointer to the queue that is being opened or closed.
.RE

.SH DESCRIPTION
.sp
.LP
\fBqwait()\fR and \fBqwait_sig()\fR are used to wait for a message to
arrive to the
.BR put "(9E) or"
.BR srv (9E)
procedures.
.B qwait()
and
\fBqwait_sig()\fR can also be used to wait for \fBqbufcall\fR(9F) or
.BR qtimeout (9F)
callback procedures to execute. These routines can be
used in the
.BR open "(9E) and"
.BR close (9E)
procedures in a STREAMS
driver or module.
.sp
.LP
The thread that calls
.B close()
does not necessarily have the ability
to receive signals, particularly when called by
.BR exit (2).
In this case,
\fBqwait_sig()\fR behaves exactly as
.BR qwait() .
Driver writers may use
.BR ddi_can_receive_sig (9F)
to determine when this is the case, and, if
so, arrange some means to avoid blocking indefinitely (for example, by using
.BR qtimeout (9F).
.sp
.LP
\fBqwait()\fR and \fBqwait_sig()\fR atomically exit the inner and outer
perimeters associated with the queue, and wait for a thread to leave the
module's \fBput\fR(9E), \fBsrv\fR(9E), or \fBqbufcall\fR(9F) /
.BR qtimeout (9F)
callback procedures. Upon return they re-enter the inner
and outer perimeters.
.sp
.LP
This can be viewed as there being an implicit wakeup when a thread leaves a
.BR put (9E)
or \fBsrv\fR(9E) procedure or after a
.BR qtimeout (9F)
or
\fBqbufcall\fR(9F) callback procedure has been run in the same perimeter.
.sp
.LP
.BR qprocson (9F)
must be called before calling
.B qwait()
or
.BR qwait_sig() .
.sp
.LP
\fBqwait()\fR is not interrupted by a signal, whereas \fBqwait_sig()\fR is
interrupted by a signal.
.B qwait_sig()
normally returns non-zero, and
returns zero when the waiting was interrupted by a signal.
.sp
.LP
\fBqwait()\fR and \fBqwait_sig()\fR are similar to \fBcv_wait()\fR and
\fBcv_wait_sig()\fR except that the mutex is replaced by the inner and outer
perimeters and the signalling is implicit when a thread leaves the inner
perimeter. See
.BR condvar (9F).
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 5n
.rt
For
.BR qwait_sig() ,
indicates that the condition was not necessarily
signaled, and the function returned because a signal was pending.
.RE

.SH CONTEXT
.sp
.LP
These functions can only be called from an
.BR open "(9E) or"
.BR close (9E)
routine.
.SH EXAMPLES
.LP
\fBExample 1\fR Using \fBqwait()\fR
.sp
.LP
The open routine sends down a
.B T_INFO_REQ
message and waits for the
.BR T_INFO_ACK .
The arrival of the
.B T_INFO_ACK
is recorded by
resetting a flag in the unit structure
.RB ( WAIT_INFO_ACK ).
The example
assumes that the module is
.B D_MTQPAIR
or
.BR D_MTPERMOD .

.sp
.in +2
.nf
xxopen(qp, .\|.\|.)
       queue_t *qp;
{
	      struct xxdata *xx;
	       /* Allocate xxdata structure */
       qprocson(qp);
       /* Format T_INFO_ACK in mp */
       putnext(qp, mp);
       xx->xx_flags |= WAIT_INFO_ACK;
       while (xx->xx_flags & WAIT_INFO_ACK)
		            qwait(qp);
	      return (0);
}
xxrput(qp, mp)
       queue_t *qp;
       mblk_t *mp;
{
       struct xxdata *xx = (struct xxdata *)q->q_ptr;

	      ...

	      case T_INFO_ACK:
		            if (xx->xx_flags & WAIT_INFO_ACK) {
			              /* Record information from info ack */
			              xx->xx_flags &= ~WAIT_INFO_ACK;
			              freemsg(mp);
			              return;
		            }

	      ...
}
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR close (9E),
.BR open (9E),
.BR put (9E),
.BR srv (9E),
.BR condvar (9F),
.BR ddi_can_receive_sig (9F),
.BR mt-streams (9F),
.BR qbufcall (9F),
.BR qprocson (9F),
.BR qtimeout (9F)
.sp
.LP
.I STREAMS Programming Guide
.sp
.LP
.I Writing Device Drivers
