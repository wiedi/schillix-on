'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_intr_add_softint 9F "16 Oct 2005" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_intr_add_softint, ddi_intr_remove_softint, ddi_intr_trigger_softint,
ddi_intr_get_softint_pri, ddi_intr_set_softint_pri \- software interrupt
handling routines
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/conf.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint\fR \fBddi_intr_add_softint\fR(\fBdev_info_t *\fIdip\fR,
     \fBddi_softint_handle_t *\fIh\fR, \fBint\fR \fIsoft_pri\fR,
     \fBddi_intr_handler_t\fR \fIhandler\fR, \fBvoid *\fIarg1\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_intr_trigger_softint\fR(\fBddi_softint_handle_t\fR \fIh\fR,
      \fBvoid *\fIarg2\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_intr_remove_softint\fR(\fBddi_softint_handle_t\fR \fIh\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_intr_get_softint_pri\fR(\fBddi_softint_handle_t\fR \fIh\fR,
      \fBuint *\fIsoft_prip\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_intr_set_softint_pri\fR(\fBddi_softint_handle_t\fR \fIh\fR,
      \fBuint\fR \fIsoft_pri\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.LP
.B ddi_intr_add_softint()
.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 12n
.rt
Pointer to a
.B dev_info
structure
.RE

.sp
.ne 2
.mk
.na
.I h
.ad
.RS 12n
.rt
Pointer to the DDI soft interrupt handle
.RE

.sp
.ne 2
.mk
.na
.I soft_pri
.ad
.RS 12n
.rt
Priority to associate with a soft interrupt
.RE

.sp
.ne 2
.mk
.na
.I handler
.ad
.RS 12n
.rt
Pointer to soft interrupt handler
.RE

.sp
.ne 2
.mk
.na
.I arg1
.ad
.RS 12n
.rt
Argument for the soft interrupt handler
.RE

.sp
.LP
.B ddi_intr_trigger_softint()
.sp
.ne 2
.mk
.na
.I h
.ad
.RS 8n
.rt
DDI soft interrupt handle
.RE

.sp
.ne 2
.mk
.na
.I arg2
.ad
.RS 8n
.rt
Additional argument for the soft interrupt handler
.RE

.sp
.LP
.B ddi_intr_remove_softint()
.sp
.ne 2
.mk
.na
.I h
.ad
.RS 5n
.rt
DDI soft interrupt handle
.RE

.sp
.LP
.B ddi_intr_get_softint_pri()
.sp
.ne 2
.mk
.na
.I h
.ad
.RS 13n
.rt
DDI soft interrupt handle
.RE

.sp
.ne 2
.mk
.na
.I soft_prip
.ad
.RS 13n
.rt
Soft interrupt priority of the handle
.RE

.sp
.LP
.B ddi_intr_set_softint_pri()
.sp
.ne 2
.mk
.na
.I h
.ad
.RS 13n
.rt
DDI soft interrupt handle
.RE

.sp
.ne 2
.mk
.na
.I soft_prip
.ad
.RS 13n
.rt
Soft interrupt priority of the handle
.RE

.SH DESCRIPTION
.sp
.LP
The
.B ddi_intr_add_softint()
function adds the soft interrupt handler
given by the
.I handler
argument
.IR arg1 .
The
.I handler
runs at
the soft interrupt priority given by the
.I soft_pri
argument.
.sp
.LP
The value returned in the location pointed at by
.I h
is the soft
interrupt handle. This value is used in later calls to
.BR ddi_intr_remove_softint() ,
.B ddi_intr_trigger_softint()
and
.BR ddi_intr_set_softint_pri() .
.sp
.LP
The software priority argument
.I soft_pri
is a relative priority value
within the range of
.B DDI_INTR_SOFTPRI_MIN
and
.BR DDI_INTR_SOFTPRI_MAX .
If the driver does not know what priority to
use, the default \fIsoft_pri\fR value of \fBDDI_INTR_SOFTPRI_DEFAULT\fR
could be specified. The default value is the lowest possible soft interrupt
priority value.
.sp
.LP
The
.I soft_pri
argument contains the value needed to initialize the
lock associated with a soft interrupt. See
.BR mutex_init (9F)
and
.BR rw_init (9F).
The handler cannot be triggered until the lock is
initiatized.
.sp
.LP
The
.B ddi_intr_remove_softint()
function removes the handler for the
soft interrupt identified by the interrupt handle
.I h
argument. Once
removed, the soft interrupt can no longer be triggered, although any trigger
calls in progress can still be delivered to the handler.
.sp
.LP
Drivers must remove any soft interrupt handlers before allowing the system
to unload the driver. Otherwise, kernel resource leaks might occur.
.sp
.LP
The
.B ddi_intr_trigger_softint()
function triggers the soft interrupt
specified by the interrupt handler
.I h
argument. A driver may optionally
specify an additional argument
.I arg2
that is passed to the soft
interrupt handler. Subsequent
.B ddi_intr_trigger_softint()
events, along
with
.IR arg2 ,
will be dropped until the one pending is serviced and
returns the error code
.BR DDI_EPENDING .
.sp
.LP
The routine
.IR handler ,
with the
.I arg1
and
.I arg2
arguments, is
called upon the receipt of a software interrupt. These were registered
through a prior call to
.BR ddi_intr_add_softint() .
Software interrupt
handlers must not assume that they have work to do when they run. Like
hardware interrupt handlers, they may run because a soft interrupt has
occurred for some other reason. For example, another driver may have
triggered a soft interrupt at the same level. Before triggering the soft
interrupt, the driver must indicate to the soft interrupt handler that it
has work to do. This is usually done by setting a flag in the state
structure. The routine
.I handler
checks this flag, reached through
.I arg1
and
.IR arg2 ,
to determine if it should claim the interrupt and
do its work.
.sp
.LP
The interrupt handler must return
.B DDI_INTR_CLAIMED
if the interrupt
was claimed and
.B DDI_INTR_UNCLAIMED
otherwise.
.sp
.LP
The
.B ddi_intr_get_softint_pri()
function retrieves the soft interrupt
priority, a small integer value, associated with the soft interrupt handle.
The handle is defined by the
.I h
argument, and the priority returned is
in the value of the integer pointed to by the
.I soft_prip
argument.
.SH RETURN VALUES
.sp
.LP
The
.BR ddi_intr_add_softint() ,
.BR ddi_intr_remove_softint() ,
.BR ddi_intr_trigger_softint() ,
.BR ddi_intr_get_softint_pri() ,
.B ddi_intr_set_softint_pri()
functions return:
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 16n
.rt
On success.
.RE

.sp
.ne 2
.mk
.na
.B DDI_EAGAIN
.ad
.RS 16n
.rt
On encountering internal error regarding currently unavailable resources.
.RE

.sp
.ne 2
.mk
.na
.B DDI_EINVAL
.ad
.RS 16n
.rt
On encountering invalid input parameters.
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 16n
.rt
On any implementation specific failure.
.RE

.sp
.ne 2
.mk
.na
.B DDI_EPENDING
.ad
.RS 16n
.rt
On encountering a previously triggered softint event that is pending.
.RE

.SH CONTEXT
.sp
.LP
The
.BR ddi_intr_add_softint() ,
.BR ddi_intr_remove_softint() ,
.BR ddi_intr_trigger_softint() ,
.BR ddi_intr_get_softint_pri() ,
.B ddi_intr_set_softint_pri()
functions can be called from either user or
kernel non-interrupt context.
.SH EXAMPLES
.LP
.B Example 1
Device using high-level interrupts
.sp
.LP
In the following example, the device uses high-level interrupts. High-level
interrupts are those that interrupt at the level of the scheduler and above.
High-level interrupts must be handled without using system services that
manipulate thread or process states, because these interrupts are not
blocked by the scheduler. In addition, high-level interrupt handlers must
take care to do a minimum of work because they are not preemptable. See
.BR ddi_intr_get_hilevel_pri (9F).

.sp
.LP
In the example, the high-level interrupt routine minimally services the
device, and enqueues the data for later processing by the soft interrupt
handler. If the soft interrupt handler is not currently running, the
high-level interrupt routine triggers a soft interrupt so the soft interrupt
handler can process the data. Once running, the soft interrupt handler
processes all the enqueued data before returning.

.sp
.LP
The state structure contains two mutexes. The high-level mutex is used to
protect data shared between the high-level interrupt handler and the soft
interrupt handler. The low-level mutex is used to protect the rest of the
driver from the soft interrupt handler.

.sp
.in +2
.nf
struct xxstate {
  ...
  ddi_intr_handle_t       int_hdl;
  int                     high_pri;
  kmutex_t                high_mutex;
  ddi_softint_handle_t    soft_hdl;
  int                     low_soft_pri;
  kmutex_t                low_mutex;
  int                     softint_running;
  ...
};

struct xxstate *xsp;
static uint_t xxsoftint_handler(void *, void *);
static uint_t xxhighintr(void *, void *);
\&...
.fi
.in -2

.LP
.B Example 2
Sample
.B attach()
routine
.sp
.LP
The following code fragment would usually appear in the driver's
.BR attach (9E)
routine.
.BR ddi_intr_add_handler (9F)
is used to add the
high-level interrupt handler and
.B ddi_intr_add_softint()
is used to add
the low-level interrupt routine.

.sp
.in +2
.nf
static uint_t
xxattach(dev_info_t *dip, ddi_attach_cmd_t cmd)
{
   int             types;
   int             *actual;
   int             nintrs;
   struct xxstate  *xsp;
   ...

   (void) ddi_intr_get_supported_types(dip, &types);
   (void) ddi_intr_get_nintrs(dip< DDI_INTR_TYPE_FIXED, *nintrs);
   (void) ddi_intr_alloc(dip, &xsp->int_hdl, DDI_INTR_TYPE_FIXED,
       1, nintrs, *actual, 0);

   /* initialize high-level mutex */
   (void) ddi_intr_get_pri(xsp->int_hdl, &>high_pri);
   mutex_init(&xsp->high_mutex, NULL, MUTEX_DRIVER,
       DDI_INTR_PRI(xsp->high_pri));

   /* Ensure that this is a hi-level interrupt */
   if (ddi_intr_get_hilevel_pri(h) != DDI_SUCCESS) {
           /* cleanup */
           return (DDI_FAILURE); /* fail attach */
   }

   /* add high-level routine - xxhighintr() */
   if (ddi_intr_add_handler(xsp->int_hdl, xxhighintr,
       arg1, NULL) != DDI_SUCCESS) {
           /* cleanup */
           return (DDI_FAILURE); /* fail attach */
   }

   /* Enable high-level routine - xxhighintr() */
   if (ddi_intr_enable(xsp->int_hdl) != DDI_SUCCESS) {
           /* cleanup */
           return (DDI_FAILURE); /* fail attach */
   }

   /* Enable soft interrupts */
   xsp->low_soft_pri = DDI_INTR_SOFTPRI_MIN;
   if (ddi_intr_add_softint(dip, &xsp>soft_hdl,
       xsp->low_soft_pri, xxsoftint_handler, arg1) != DDI_SUCCESS) {
           /* clean up */
           return (DDI_FAILURE); /* fail attach */
   }

   /* initialize low-level mutex */
   mutex_init(&xsp->low_mutex, NULL, MUTEX_DRIVER,
       DDI_INTR_PRI(xsp->low_soft_pri));

   ...
}
.fi
.in -2

.LP
.B Example 3
High-level interrupt routine
.sp
.LP
The next code fragment represents the high-level interrupt routine. The
high-level interrupt routine minimally services the device and enqueues the
data for later processing by the soft interrupt routine. If the soft
interrupt routine is not already running, \fBddi_intr_trigger_softint()\fR
is called to start the routine. The soft interrupt routine will run until
there is no more data on the queue.

.sp
.in +2
.nf
static uint_t
xxhighintr(void *arg1, void *arg2)
{
   struct xxstate *xsp = (struct xxstate *)arg1;
   int need_softint;
   ...
   mutex_enter(&xsp->high_mutex);
   /*
   * Verify this device generated the interrupt
   * and disable the device interrupt.
   * Enqueue data for xxsoftint_handler() processing.
   */

   /* is xxsoftint_handler() already running ? */
   need_softint = (xsp->softint_running) ? 0 : 1;
   mutex_exit(&xsp->high_mutex);

   /* read-only access to xsp->id, no mutex needed */
   if (xsp->soft_hdl && need_softint)
           ddi_intr_trigger_softint(xsp->soft_hdl, arg2);
   ...
   return (DDI_INTR_CLAIMED);
}


static uint_t
xxsoftint_handler(void *arg1, void *arg2)
{
   struct xxstate *xsp = (struct xxstate *)arg1;
   ...
   mutex_enter(&xsp->low_mutex);
   mutex_enter(&xsp->high_mutex);

   /* verify there is work to do */
   if (work queue empty || xsp->softint_running )  {
           mutex_exit(&xsp->high_mutex);
           mutex_exit(&xsp->low_mutex);
           return (DDI_INTR_UNCLAIMED);
   }

   xsp->softint_running = 1;

   while ( data on queue )  {
           ASSERT(mutex_owned(&xsp->high_mutex));
           /* de-queue data */
           mutex_exit(&xsp->high_mutex);

           /* Process data on queue */
           mutex_enter(&xsp->high_mutex);
   }

   xsp->softint_running = 0;
   mutex_exit(&xsp->high_mutex);
   mutex_exit(&xsp->low_mutex);
   return (DDI_INTR_CLAIMED);
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
.TE

.SH SEE ALSO
.sp
.LP
.BR attributes (5),
.BR attach (9E),
.BR ddi_intr_alloc (9F),
.BR ddi_intr_free (9F),
.BR ddi_intr_get_hilevel_pri (9F),
.BR mutex_init (9F),
.BR rw_init (9F),
.BR rwlock (9F)
.sp
.LP
.I Writing Device Drivers
.SH NOTES
.sp
.LP
Consumers of these interfaces should verify that the return value is not
equal to
.BR DDI_SUCCESS .
Incomplete checking for failure codes could
result in inconsistent behavior among platforms.
.sp
.LP
The
.B ddi_intr_add_softint()
may not be used to add the same software
interrupt handler more than once. This is true even if a different value is
used for
.I arg1
in each of the calls to
.BR ddi_intr_add_softint() .
Instead, the argument passed to the interrupt handler should indicate what
service(s) the interrupt handler should perform. For example, the argument
could be a pointer to the soft state structure of the device that could
contain a
.B which_service
field that the handler examines. The driver
must set this field to the appropriate value before calling
.BR ddi_intr_trigger_softint() .
.sp
.LP
Every time a modifiable valid second argument,
.IR arg2 ,
is provided when
.B ddi_intr_trigger_softint()
is invoked, the DDI framework saves
.I arg2
internally and passes it to the interrupt handler
.IR handler .
.sp
.LP
A call to
.B ddi_intr_set_softint_pri()
could fail if a previously
scheduled soft interrupt trigger is still pending.
