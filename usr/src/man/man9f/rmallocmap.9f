'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH rmallocmap 9F "20 Nov 1996" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
rmallocmap, rmallocmap_wait, rmfreemap \- allocate and free resource maps
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBstruct map *\fBrmallocmap\fR(\fBsize_t\fR \fImapsize\fR);
.fi

.LP
.nf
\fBstruct map *\fBrmallocmap_wait\fR(\fBsize_t\fR \fImapsize\fR);
.fi

.LP
.nf
\fBvoid\fR \fBrmfreemap\fR(\fBstruct map *\fImp\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Architecture independent level 1
.RB ( DDI/DKI ).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I mapsize
.ad
.RS 12n
.rt
Number of entries for the map.
.RE

.sp
.ne 2
.mk
.na
.I mp
.ad
.RS 12n
.rt
A pointer to the map structure to be deallocated.
.RE

.SH DESCRIPTION
.sp
.LP
.B rmallocmap()
dynamically allocates a resource map structure. The
argument
.I mapsize
defines the total number of entries in the map.  In
particular, it is the total number of allocations that can be outstanding at
any one time.
.sp
.LP
.B rmallocmap()
initializes the map but does not associate it with the
actual resource. In order to associate  the map with the actual resource, a
call to
.BR rmfree (9F)
is used to make the entirety of the actual resource
available for allocation, starting from the first index into the resource.
Typically, the call to
.B rmallocmap()
is followed by a call to
.BR rmfree (9F),
passing the address of the map returned from
.BR rmallocmap() ,
the total size of the resource, and the first index into
the actual resource.
.sp
.LP
The resource map allocated by
.B rmallocmap()
can be used to describe an
arbitrary resource in whatever allocation units are appropriate, such as
blocks, pages, or data structures. This resource can then be managed by the
system by subsequent calls to
.BR rmalloc (9F),
.BR rmalloc_wait (9F),
and
.BR rmfree (9F).
.sp
.LP
.B rmallocmap_wait()
is similar to
.BR rmallocmap() ,
with the
exception that it will wait for space to become available if necessary.
.sp
.LP
.B rmfreemap()
deallocates a resource map structure previously allocated
by
.B rmallocmap()
or
.BR rmallocmap_wait() .
The argument
.I mp
is a
pointer to the map structure to be deallocated.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B rmallocmap()
and
.BR rmallocmap_wait()
return a pointer to the newly allocated map structure. Upon failure,
.B rmallocmap()
returns a
.B NULL
pointer.
.SH CONTEXT
.sp
.LP
.B rmallocmap()
and
.B rmfreemap()
can be called from user, kernel,
or interrupt context.
.sp
.LP
.B rmallocmap_wait()
can only be called from user or kernel context.
.SH SEE ALSO
.sp
.LP
.BR rmalloc (9F),
.BR rmalloc_wait (9F),
.BR rmfree (9F)
.sp
.LP
.I Writing Device Drivers
