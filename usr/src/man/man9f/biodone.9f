'\" te
.\" Copyright 1989 AT&T
.\" Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH biodone 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
biodone \- release buffer after buffer I/O transfer and notify blocked
threads
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/buf.h>



\fBvoid\fR \fBbiodone\fR(\fBstruct buf *\fIbp\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Architecture independent level 1 (DDI/DKI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I bp
.ad
.RS 6n
.rt
Pointer to a \fBbuf\fR(9S) structure.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B biodone()
function notifies blocked processes waiting for the\fB I/O\fR to complete, sets the \fBB_DONE\fR flag in the \fBb_flags\fR field of
the \fBbuf\fR(9S) structure, and releases the buffer if the
.B I/O
is
asynchronous.
.B biodone()
is called by either the driver interrupt or
.BR strategy (9E)
routines when a buffer
.B I/O
request is complete.
.sp
.LP
The
.B biodone()
function provides the capability to call a completion
routine if
.I bp
describes a kernel buffer. The address of the routine is
specified in the
.B b_iodone
field of the \fBbuf\fR(9S) structure. If
such a routine is specified,
.B biodone()
calls it and returns without
performing any other actions. Otherwise, it performs the steps above.
.SH CONTEXT
.sp
.LP
The
.B biodone()
function can be called from user, interrupt, or kernel
context.
.SH EXAMPLES
.sp
.LP
Generally, the first validation test performed by any block device
.BR strategy (9E)
routine is a check for an end-of-file (\fBEOF\fR)
condition. The \fBstrategy\fR(9E) routine is responsible for determining an
.B EOF
condition when the device is accessed directly. If a
.BR read (2)
request is made for one block beyond the limits of the device (line 10), it
will report an
.B EOF
condition.  Otherwise, if the request is outside
the limits of the device, the routine will report an error condition.  In
either case, report the
.B I/O
operation as complete (line 27).
.sp
.in +2
.nf
 1   #define RAMDNBLK	1000	/* Number of blocks in RAM disk */
 2   #define RAMDBSIZ	512	/* Number of bytes per block */
 3   char ramdblks[RAMDNBLK][RAMDBSIZ];	/* Array containing RAM disk */
 4
 5   static int
 6   ramdstrategy(struct buf *bp)
 7   {
 8      daddr_t blkno = bp->b_blkno;	/* get block number */
 9
10      if ((blkno < 0) || (blkno >= RAMDNBLK)) {
11            /*
12             * If requested block is outside RAM disk
13             * limits, test for EOF which could result
14             * from a direct (physio) request.
15             */
16            if ((blkno == RAMDNBLK) && (bp->b_flags & B_READ)) {
17             /*
18              * If read is for block beyond RAM disk
19              * limits, mark EOF condition.
20              */
21              bp->b_resid = bp->b_bcount;	/* compute return value */
22
23           } else {	/* I/O attempt is beyond */
24              bp->b_error = ENXIO;	/*    limits of RAM disk */
25              bp->b_flags |= B_ERROR;	/* return error */
26           }
27           biodone(bp);	/* mark I/O complete (B_DONE) */
28             /*
29              * Wake any processes awaiting this I/O
30              * or release buffer for asynchronous
31              * (B_ASYNC) request.
32              */
33           return (0);
34      }
           .\|.\|.\|
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR read (2),
.BR strategy (9E),
.BR biowait (9F),
.BR ddi_add_intr (9F),
.BR delay (9F),
.BR timeout (9F),
.BR untimeout (9F),
.BR buf (9S)
.sp
.LP
.I Writing Device Drivers
.SH WARNINGS
.sp
.LP
After calling
.BR biodone() ,
.I bp
is no longer available to be
referred to by the driver. If the driver makes any reference to \fIbp\fR
after calling
.BR biodone() ,
a panic may result.
.SH NOTES
.sp
.LP
Drivers that use the
.B b_iodone
field of the \fBbuf\fR(9S) structure to
specify a substitute completion routine should save the value of
.B b_iodone
before changing it, and then restore the old value before
calling
.B biodone()
to release the buffer.
