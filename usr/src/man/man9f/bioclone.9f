'\" te
.\" Copyright (c) 2009 Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH bioclone 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
bioclone \- clone another buffer
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>

\fBstruct buf *\fBbioclone\fR(\fBstruct buf\fR \fI*bp\fR, \fBoff_t\fR \fIoff\fR, \fBsize_t\fR \fIlen\fR, \fBdev_t\fR \fIdev\fR,
     \fBdaddr_t\fR \fIblkno\fR, \fBint (\fI*iodone\fR) (struct buf \fI*\fR), \fBstruct buf\fR \fI*bp_mem\fR,
     \fBint\fR \fIsleepflag\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I bp
.ad
.RS 13n
.rt
Pointer to the \fBbuf\fR(9S) structure describing the original \fBI/O\fR
request.
.RE

.sp
.ne 2
.mk
.na
\fIoff\fR
.ad
.RS 13n
.rt
Offset within original
.B I/O
request where new
.B I/O
request should
start.
.RE

.sp
.ne 2
.mk
.na
.I len
.ad
.RS 13n
.rt
Length of the
.B I/O
request.
.RE

.sp
.ne 2
.mk
.na
.I dev
.ad
.RS 13n
.rt
Device number.
.RE

.sp
.ne 2
.mk
.na
.I blkno
.ad
.RS 13n
.rt
Block number on device.
.RE

.sp
.ne 2
.mk
.na
.I iodone
.ad
.RS 13n
.rt
Specific
.BR biodone "(9F) routine."
.RE

.sp
.ne 2
.mk
.na
.I bp_mem
.ad
.RS 13n
.rt
Pointer to a buffer structure to be filled in or
.B NULL.
.RE

.sp
.ne 2
.mk
.na
\fIsleepflag\fR
.ad
.RS 13n
.rt
Determines whether caller can sleep for memory. Possible flags are
\fBKM_SLEEP\fR to allow sleeping until memory is available, or
\fBKM_NOSLEEP\fR to return \fINULL\fR immediately if memory is not
available.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B bioclone()
function returns an initialized buffer to perform
\fBI/O\fR to a portion of another buffer. The new buffer will be set up to
perform
.B I/O
to the range within the original
.B I/O
request
specified by the parameters \fIoff\fR and
.IR len .
An offset
.BR 0
starts the new
.B I/O
request at the same address as the original
request. \fIoff\fR + \fIlen\fR must not exceed \fIb_bcount,\fR the length of
the original request. The device number
.I dev
specifies the device to
which the buffer is to perform
.BR I/O .
\fIblkno\fR is the block number on
device. It will be assigned to the
.I b_blkno
field of the cloned buffer
structure.
.I iodone
lets the driver identify a specific
.BR biodone (9F)
routine to be called by the driver when the
.B I/O
is
complete.
.I bp_mem
determines from where the space for the buffer should
be allocated. If
.I bp_mem
is
.BR NULL ,
\fBbioclone()\fR will allocate
a new buffer using \fBgetrbuf\fR(9F). If \fIsleepflag\fR is set to
.BR KM_SLEEP ,
the driver may sleep until space is freed up. If
\fIsleepflag\fR is set to
.BR KM_NOSLEEP ,
the driver will not sleep. In
either case, a pointer to the allocated space is returned or
.I NULL
to
indicate that no space was available. After the transfer is completed, the
buffer has to be freed using \fBfreerbuf\fR(9F). If
.I bp_mem
is not
.IR NULL ,
it will be used as the space for the buffer structure. The
driver has to ensure that
.I bp_mem
is initialized properly either using
\fBgetrbuf\fR(9F) or \fBbioinit\fR(9F).
.sp
.LP
If the original buffer is mapped into the kernel virtual address space
using \fBbp_mapin\fR(9F) before calling
.BR bioclone() ,
a clone buffer
will share the kernel mapping of the original buffer. An additional
\fBbp_mapin()\fR to get a kernel mapping for the clone buffer is not
necessary.
.sp
.LP
The driver has to ensure that the original buffer is not freed while any of
the clone buffers is still performing
.BR I/O .
The
.BR biodone()
function has to be called on all clone buffers \fBbefore\fR it is called on
the original buffer.
.SH RETURN VALUES
.sp
.LP
The
.B bioclone()
function returns a pointer to the initialized buffer
header, or
.B NULL
if no space is available.
.SH CONTEXT
.sp
.LP
The
.B bioclone()
function can be called from user, interrup, or
interrupt context. Drivers must not allow
.B bioclone()
to sleep if
called from an interrupt routine.
.SH EXAMPLES
.LP
\fBExample 1\fR Using \fBbioclone()\fR for Disk Striping
.sp
.LP
A device driver can use
.B bioclone()
for disk striping. For each disk
in the stripe, a clone buffer is created which performs
.B I/O
to a
portion of the original buffer.

.sp
.in +2
.nf
static int
stripe_strategy(struct buf *bp)
{
       .\|.\|.
       bp_orig = bp;
       bp_1 = bioclone(bp_orig, 0, size_1, dev_1, blkno_1,
                       stripe_done, NULL, KM_SLEEP);
       fragment++;
       .\|.\|.
       bp_n = bioclone(bp_orig, offset_n, size_n, dev_n,
                     blkno_n, stripe_done, NULL, KM_SLEEP);
       fragment++;
       /* submit bp_1 .\|.\|. bp_n to device */
       xxstrategy(bp_x);
       return (0);
}

static uint_t
xxintr(caddr_t arg)
{
       .\|.\|.
       /*
       * get bp of completed subrequest. biodone(9F) will
       * call stripe_done()
       */
       biodone(bp);
       return (0);
}

static int
stripe_done(struct buf *bp)
{
       .\|.\|.
       freerbuf(bp);
       fragment--;
       if (fragment == 0) {
               /* get bp_orig */
               biodone(bp_orig);
       }
       return (0);
}
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR biodone (9F),
.BR bp_mapin (9F),
\fBfreerbuf\fR(9F),
\fBgetrbuf\fR(9F), \fBbuf\fR(9S)
.sp
.LP
.I Writing Device Drivers
