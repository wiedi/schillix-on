'\" te
.\" Copyright (c) 2000, Sun Microsystems, Inc.
.\"  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH csx_RequestIRQ 9F "19 Jul 1996" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
csx_RequestIRQ, csx_ReleaseIRQ \- request or release IRQ resource
.SH SYNOPSIS
.LP
.nf
#include <sys/pccard.h>



\fBint32_t\fR \fBcsx_RequestIRQ\fR(\fBclient_handle_t\fR \fIch\fR, \fBirq_req_t *\fIir\fR);
.fi

.LP
.nf
\fBint32_t\fR \fBcsx_ReleaseIRQ\fR(\fBclient_handle_t\fR \fIch\fR, \fBirq_req_t *\fIir\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris
.B DDI
Specific (Solaris
.BR DDI )
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I ch
.ad
.RS 7n
.rt
Client handle returned from
.BR csx_RegisterClient (9F).
.RE

.sp
.ne 2
.mk
.na
.I ir
.ad
.RS 7n
.rt
Pointer to an
.B irq_req_t
structure.
.RE

.SH DESCRIPTION
.sp
.LP
The function
.B csx_RequestIRQ()
requests an
.B IRQ
resource and
registers the client's
.B IRQ
handler with Card Services.
.sp
.LP
If a client requires an \fBIRQ\fR,\fBcsx_RequestIRQ()\fR must be called to
request an
.B IRQ
.RB "resource as well as to register the client's" " IRQ"
handler with Card Services. The client will not receive callbacks at the
.B IRQ
callback handler until \fBcsx_RequestConfiguration\fR(9F) or
.BR csx_ModifyConfiguration (9F)
has successfully returned when either of
these functions are called with the
.B CONF_ENABLE_IRQ_STEERING
bit
set.
.sp
.LP
The function
.B csx_ReleaseIRQ()
releases a previously requested
.B IRQ
resource.
.sp
.LP
The Card Services
.B IRQ
resource list is adjusted by
.BR csx_ReleaseIRQ() .
Depending on the adapter hardware, the host bus
.B IRQ
connection might also be disabled. Client
.B IRQ
handlers
always run above lock level and so should take care to perform only Solaris
operations that are appropriate for an above-lock-level
.B IRQ
handler.
.sp
.LP
.B csx_RequestIRQ()
fails if it has already been called without a
corresponding
.BR csx_ReleaseIRQ() .
.SH STRUCTURE MEMBERS
.sp
.LP
The structure members of
.B irq_req_t
are:
.sp
.in +2
.nf
uint32_t                Socket;          /* socket number */
uint32_t                Attributes;      /* IRQ attribute flags */
csfunction_t            *irq_handler;    /* IRQ handler */
void                    *irq_handler_arg; /* IRQ handler argument */
ddi_iblock_cookie_t     *iblk_cookie;    /* IRQ interrupt
                                         /*   block cookie */
ddi_idevice_cookie_t    *idev_cookie;    /* IRQ interrupt device
                                         /*   cookie */
.fi
.in -2

.sp
.LP
The fields are defined as follows:
.sp
.ne 2
.mk
.na
.B Socket
.ad
.RS 20n
.rt
Not used in Solaris, but for portability with other Card Services
implementations, it should be set to the logical socket number.
.RE

.sp
.ne 2
.mk
.na
.B Attributes
.ad
.RS 20n
.rt
This field is bit-mapped. It specifies details about the type of \fBIRQ\fR
desired by the client. The following bits are defined:
.sp
.ne 2
.mk
.na
.B IRQ_TYPE_EXCLUSIVE
.ad
.RS 22n
.rt
.B IRQ
is exclusive to this socket. This bit must be set. It indicates
that the system IRQ is dedicated to this PC Card.
.RE

.RE

.sp
.ne 2
.mk
.na
.B irq_handler
.ad
.RS 20n
.rt
The client
.B IRQ
callback handler entry point is passed in the
.B irq_handler
field.
.RE

.sp
.ne 2
.mk
.na
.B irq_handler_arg
.ad
.RS 20n
.rt
The client can use the
.B irq_handler_arg
field to pass client-specific
data to the client
.B IRQ
callback handler.
.RE

.sp
.ne 2
.mk
.na
.B iblk_cookie
.ad
.br
.na
.B idev_cookie
.ad
.RS 20n
.rt
These fields must be used by the client to set up mutexes that are used in
the client's
.B IRQ
callback handler.
.RE

.sp
.LP
For a specific
.B csx_ReleaseIRQ()
call, the values in the
.B irq_req_t
structure must be the same as those returned from the
previous
.B csx_RequestIRQ()
call; otherwise,
.B CS_BAD_ARGS
is
returned and no changes are made to Card Services resources or the socket
and adapter hardware.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B CS_SUCCESS
.ad
.RS 28n
.rt
Successful operation.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_ARGS
.ad
.RS 28n
.rt
.B IRQ
description does not match allocation.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_ATTRIBUTE
.ad
.RS 28n
.rt
.B IRQ_TYPE_EXCLUSIVE
not set, or an unsupported or reserved bit is
set.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_HANDLE
.ad
.RS 28n
.rt
Client handle is invalid or \fBcsx_RequestConfiguration\fR(9F) not done.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_IRQ
.ad
.RS 28n
.rt
Unable to allocate
.B IRQ
resources.
.RE

.sp
.ne 2
.mk
.na
.B CS_IN_USE
.ad
.RS 28n
.rt
.B csx_RequestIRQ()
already done or a previous
.BR csx_RequestIRQ()
has not been done for a corresponding
.BR csx_ReleaseIRQ() .
.RE

.sp
.ne 2
.mk
.na
.B CS_CONFIGURATION_LOCKED
.ad
.RS 28n
.rt
.BR csx_RequestConfiguration (9F)
already done or
.BR csx_ReleaseConfiguration (9F)
has not been done.
.RE

.sp
.ne 2
.mk
.na
.B CS_NO_CARD
.ad
.RS 28n
.rt
No
.B PC
Card in socket.
.RE

.sp
.ne 2
.mk
.na
.B CS_UNSUPPORTED_FUNCTION
.ad
.RS 28n
.rt
No
.B PCMCIA
hardware installed.
.RE

.SH CONTEXT
.sp
.LP
These functions may be called from user or kernel context.
.SH SEE ALSO
.sp
.LP
.BR csx_ReleaseConfiguration (9F),
.BR csx_RequestConfiguration (9F)
.sp
.LP
.IR "PC Card Card 95 Standard" ,
PCMCIA/JEIDA
