'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc., All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH usb_get_dev_data 9F "5 Jan 2004" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
usb_get_dev_data, usb_free_dev_data, usb_free_descr_tree,
usb_print_descr_tree \- Retrieve device configuration information
.SH SYNOPSIS
.LP
.nf
#include <sys/usb/usba.h>



\fBint\fR \fBusb_get_dev_data\fR(\fBdev_info_t *\fIdip\fR, \fBusb_client_dev_data_t **\fIdev_data\fR,
     \fBusb_reg_parse_lvl_t\fR \fIparse_level\fR, \fBusb_flags_t\fR \fIflags\fR);
.fi

.LP
.nf
\fBvoid\fR \fBusb_free_dev_data\fR(\fBdev_info_t *\fIdip\fR, \fBusb_client_dev_data_t *\fIdev_data\fR);
.fi

.LP
.nf
\fBvoid\fR \fBusb_free_descr_tree\fR(\fBdev_info_t *\fIdip\fR, \fBusb_client_dev_data_t *\fIdev_data\fR);
.fi

.LP
.nf
\fBint\fR \fBusb_print_descr_tree\fR(\fBdev_info_t *\fIdip\fR, \fBusb_client_dev_data_t *\fIdev_data\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH PARAMETERS
.sp
.LP
For
.BR usb_get_dev_data() :
.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 15n
.rt
Pointer to device's dev_info structure.
.RE

.sp
.ne 2
.mk
.na
.I dev_data
.ad
.RS 15n
.rt
Address in which pointer to info is returned.
.RE

.sp
.ne 2
.mk
.na
.I parse_level
.ad
.RS 15n
.rt
Portion of device represented in the tree of parsed descriptors. See below
for possible usb_reg_parse_lvl_t values and explanations.
.RE

.sp
.ne 2
.mk
.na
.I flags
.ad
.RS 15n
.rt
Not used.
.RE

.sp
.LP
For
.BR usb_free_dev_data() :
.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 12n
.rt
Pointer to device's dev_info structure.
.RE

.sp
.ne 2
.mk
.na
.I dev_data
.ad
.RS 12n
.rt
Pointer to usb_client_dev_data_t to be freed.
.RE

.sp
.LP
For
.BR usb_free_descr_tree() :
.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 12n
.rt
Pointer to device's dev_info structure.
.RE

.sp
.ne 2
.mk
.na
.I dev_data
.ad
.RS 12n
.rt
Pointer to usb_client_dev_data_t containing the descriptor tree to free.
.RE

.sp
.LP
For
.BR usb_print_descr_tree() :
.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 12n
.rt
Pointer to device's dev_info structure.
.RE

.sp
.ne 2
.mk
.na
.I dev_data
.ad
.RS 12n
.rt
Pointer to usb_client_dev_data_t containing the descriptor tree to display
on-screen.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B usb_get_dev_data()
function interrogates a device and returns its
configuration information in a usb_client_dev_data_t structure. Most USBA
functions require information which comes from a usb_client_dev_data_t, and
all other functions in this man page operate on this structure. Please see
.B usb_client_dev_data(9S)
for a full content description. Pass the
usb_client_dev_data_t structure to
.BR usb_client_detach "(9F) to completely"
deallocate it.
.sp
.LP
A descriptor tree is included in the information returned. The
usb_reg_parse_lvl_t type represents the extent of the device to be
represented by the returned tree (2nd arg to usb_get_dev_data) or what is
actually represented in the returned tree (dev_parse_level field of the
returned usb_client_dev_data_t). It has the following possible values:
.sp
.ne 2
.mk
.na
.B USB_PARSE_LVL_NONE
.ad
.RS 22n
.rt
Build no tree. dev_n_cfg  returns 0, dev_cfg and dev_curr_cfg  are returned
NULL, and  the dev_curr_xxx fields are invalid.
.RE

.sp
.ne 2
.mk
.na
.B USB_PARSE_LVL_IF
.ad
.RS 22n
.rt
If configuration number and interface properties are set (as when different
interfaces are viewed by the OS as different device instances), parse
configured interface only. If an OS device instance is set up to represent
an entire physical device, USB_PARSE_LVL_IF works like USB_PARSE_LVL_ALL.
.RE

.sp
.ne 2
.mk
.na
.B USB_PARSE_LVL_CFG
.ad
.RS 22n
.rt
Parse entire configuration of configured interface only. Behaves similarly
to USB_PARSE_LVL_IF, except that entire configuration is returned.
.RE

.sp
.ne 2
.mk
.na
.B USB_PARSE_LVL_ALL
.ad
.RS 22n
.rt
Parse entire device (all configurations), even when driver is bound to a
single interface of a single configuration.
.RE

.sp
.LP
.RB "The " usb_free_dev_data() " function undoes what " usb_get_dev_data() 
set up.  It releases memory for all strings, descriptors, and trees set up
by
.BR usb_get_dev_data() .
.sp
.LP
The
.B usb_free_descr_tree()
function frees the descriptor tree of its
usb_client_dev_data_t argument, while leaving the rest of the information
intact. The intent is for drivers to free memory after copying needed
descriptor information from the tree. Upon return, the following
usb_client_dev_data_t fields  are modified as follows: dev_cfg is NULL,
dev_n_cfg is zero and dev_parse_level  is USB_PARSE_LVL_NONE. Additionally,
dev_curr_cfg is NULL and dev_curr_if is invalid.
.sp
.LP
The
.B usb_print_descr_tree()
function is an easy-to-use diagnostic aid
which dumps the descriptor tree to the screen when the system is verbose
booted
.RB ( "boot -v" ).
Output is spaced with blank lines for
readability and provides you with an on-screen look at what a device has to
offer.
.SH RETURN VALUES
.sp
.LP
For
.BR usb_get_dev_data() :
.sp
.ne 2
.mk
.na
.B USB_SUCCESS
.ad
.RS 23n
.rt
Registration is successful.
.RE

.sp
.ne 2
.mk
.na
.B USB_INVALID_ARGS
.ad
.RS 23n
.rt
.I dip
or
.I dev_data
is
.BR NULL .
.I parse_level
is invalid.
.RE

.sp
.ne 2
.mk
.na
.B USB_INVALID_CONTEXT
.ad
.RS 23n
.rt
Called from interrupt context.
.RE

.sp
.ne 2
.mk
.na
.B USB_INVALID_VERSION
.ad
.RS 23n
.rt
.BR usb_client_attach (9F)
was not called first.
.RE

.sp
.ne 2
.mk
.na
.B USB_FAILURE
.ad
.RS 23n
.rt
Bad descriptor info or other internal error.
.RE

.sp
.LP
For
.BR usb_free_dev_data() :
None
.sp
.LP
For
.BR usb_free_descr_tree() :
None, but no operation occurs if
.I dip
and/or
.I dev_data
are NULL.
.sp
.LP
For
.BR usb_print_descr_tree() :
.sp
.ne 2
.mk
.na
.B USB_SUCCESS
.ad
.RS 23n
.rt
Descriptor tree dump is successful.
.RE

.sp
.ne 2
.mk
.na
.B USB_INVALID_ARGS
.ad
.RS 23n
.rt
.I dev_data
or
.I dip
are NULL.
.RE

.sp
.ne 2
.mk
.na
.B USB_INVALID_CONTEXT
.ad
.RS 23n
.rt
Called from interrupt context.
.RE

.sp
.ne 2
.mk
.na
.B USB_FAILURE
.ad
.RS 23n
.rt
Other error.
.RE

.SH CONTEXT
.sp
.LP
The
.B usb_get_dev_data()
and
.B usb_print_descr_tree()
functions may
be called from user or kernel context.
.sp
.LP
The
.BR usb_free_dev_data() " and "
.B usb_free_descr_tree()
functions may
be called from user, kernel or interrupt context.
.SH EXAMPLES
.sp
.in +2
.nf
In this example, assume a device has the configuration shown
below, and the endpoint of config 2, iface 1, alt 1
which supports intr IN transfers needs to be found.
Config 2, iface 1 is the "default" config/iface for the
current OS device node.

      config 1
          iface 0
              endpt 0
      config 2
          iface 0
          iface 1
              alt 0
                  endpt 0
                      cv 0
              alt 1
                  endpt 0
                  endpt 1
                      cv 0
                  endpt 2
              alt 2
                  endpt 0
                      cv 0

      usb_client_dev_data_t *dev_data;
      usb_ep_descr_t ep_descr;
      usb_ep_data_t *ep_tree_node;
      uint8_t interface = 1;
      uint8_t alternate = 1;
      uint8_t first_ep_number = 0;

      /*
       * We want default config/iface, so specify USB__PARSE_LVL_IF.
       * Default config will be returned as dev_cfg[0].
      /
        if (usb_get_dev_data(dip, &dev_data,
          USB_PARSE_LVL_IF, 0) != USB_SUCCESS) {
              cmn_err (CE_WARN,
                  "%s%d: Couldn't get USB configuration descr tree",
                  ddi_driver_name(dip), ddi_get_instance(dip));

              return (USB_FAILURE);
      }

      ep_tree_node = usb_lookup_ep_data(dip, dev_data, interface,
           alternate, first_ep_number, USB_EP_ATTR_INTR, USB_EP_DIR_IN);
      if (ep_tree_node != NULL) {
          ep_descr = ep_tree_node->ep_descr;
      } else {
              cmn_r (CE_WARN,
                  "%s%d: Device is missing intr-IN endpoint",
                  ddi_driver_name(dip), ddi_get_instance(dip));

              usb_free_descr_tree(dip, &dev_data);

              return (USB_FAILURE);
      }

.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
ArchitecturePCI-based systems
_
Interface stabilityCommitted
_
AvailabilitySUNWusb
.TE

.SH SEE ALSO
.sp
.LP
.BR attributes (5),
.BR usb_client_attach (9F),
.BR usb_get_alt_if (9F),
.BR usb_get_cfg (9F),
.BR usb_get_string_descr (9F),
.BR usb_lookup_ep_data (9F),
.BR usb_parse_data (9F),
.BR usb_pipe_open (9F),
.BR usb_cfg_descr (9S),
.BR usb_client_dev_data(9S) ,
.BR usb_ep_descr (9S),
.BR usb_if_descr (9S),
.BR usb_string_descr (9S)
