'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH csx_RequestConfiguration 9F "19 Jul 1996" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
csx_RequestConfiguration \- configure the PC Card and socket
.SH SYNOPSIS
.LP
.nf
#include <sys/pccard.h>



\fBint32_t\fR \fBcsx_RequestConfiguration\fR(\fBclient_handle_t\fR \fIch\fR, \fBconfig_req_t *\fIcr\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris
.B DDI
Specific (Solaris
.BR DDI )
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I ch
.ad
.RS 6n
.rt
Client handle returned from
.BR csx_RegisterClient (9F).
.RE

.sp
.ne 2
.mk
.na
.I cr
.ad
.RS 6n
.rt
Pointer to a
.B config_req_t
structure.
.RE

.SH DESCRIPTION
.sp
.LP
This function configures the
.B PC
Card and socket. It must be used by
clients that require
.B I/O
or
.B IRQ
resources for their
.BR PC
Card.
.sp
.LP
.BR csx_RequestIO (9F)
and \fBcsx_RequestIRQ\fR(9F) must be used before
calling this function to specify the
.B I/O
and
.B IRQ
requirements
for the
.B PC
Card and socket if necessary.
.B csx_RequestConfiguration()
establishes the configuration in the socket
adapter and
.B PC
Card, and it programs the Base and Limit registers of
multi-function
.B PC
Cards if these registers exist. The values
programmed into these registers depend on the
.B IO
requirements of this
configuration.
.SH STRUCTURE MEMBERS
.sp
.LP
The structure members of
.B config_req_t
are:
.sp
.in +2
.nf
uint32_t     Socket;          /* socket number */
uint32_t     Attributes;      /* configuration attributes */
uint32_t     Vcc;             /* Vcc value */
uint32_t     Vpp1;            /* Vpp1 value */
uint32_t     Vpp2;            /* Vpp2 value */
uint32_t     IntType;         /* socket interface type - mem or IO */
uint32_t     ConfigBase;      /* offset from start of AM space */
uint32_t     Status;          /* value to write to STATUS register */
uint32_t     Pin;             /* value to write to PRR */
uint32_t     Copy;            /* value to write to COPY register */
uint32_t     ConfigIndex;     /* value to write to COR */
uint32_t     Present;         /* which config registers present */
uint32_t     ExtendedStatus;  /* value to write to EXSTAT register */
.fi
.in -2

.sp
.LP
The fields are defined as follows:
.sp
.ne 2
.mk
.na
.B Socket
.ad
.sp .6
.RS 4n
Not used in Solaris, but for portability with other Card Services
implementations, it should be set to the logical socket number.
.RE

.sp
.ne 2
.mk
.na
.B Attributes
.ad
.sp .6
.RS 4n
This field is bit-mapped. It indicates whether the client wishes the
.B IRQ
resources to be enabled and whether Card Services should ignore
the
.B VS
bits on the socket interface. The following bits are defined:
.sp
.ne 2
.mk
.na
.B CONF_ENABLE_IRQ_STEERING
.ad
.sp .6
.RS 4n
Enable IRQ Steering. Set to connect the
.B PC
Card
.B IREQ
line to a
system interrupt previously selected by a call to
.BR csx_RequestIRQ (9F).
If
.B CONF_ENABLE_IRQ_STEERING
is set, once
.B csx_RequestConfiguration()
has successfully returned, the client may
start receiving
.B IRQ
callbacks at the
.B IRQ
callback handler
established in the call to
.BR csx_RequestIRQ (9F).
.RE

.sp
.ne 2
.mk
.na
.B CONF_VSOVERRIDE
.ad
.sp .6
.RS 4n
Override VS pins. After card insertion and prior to the first successful
.BR csx_RequestConfiguration() ,
the voltage levels applied to the card
shall be those indicated by the card's physical key and/or the VS[2:1]
voltage sense pins. For Low Voltage capable host systems (hosts which are
capable of
.B VS
pin decoding), if a client desires to apply a voltage
not indicated by the
.B VS
pin decoding, then
.B CONF_VSOVERRIDE
must
be set in the
.B Attributes
field; otherwise,
.B CS_BAD_VCC
shall be
returned.
.RE

.RE

.sp
.ne 2
.mk
.na
.B Vcc, Vpp1, Vpp2
.ad
.sp .6
.RS 4n
These fields all represent voltages expressed in tenths of a volt. Values
from zero (\fB0\fR) to
.B 25.5
volts may be set. To be valid, the exact
voltage must be available from the system.
.B PC
Cards indicate multiple
.B Vcc
voltage capability in their
.B CIS
via the
.B CISTPL_CFTABLE_ENTRY
tuple. After card insertion, Card Services
processes the
.BR CIS ,
and when multiple
.B Vcc
voltage capability is
indicated, Card Services will allow the client to apply
.B Vcc
voltage
levels which are contrary to the
.B VS
pin decoding without requiring the
client to set
.BR CONF_VSOVERRIDE.
.RE

.sp
.ne 2
.mk
.na
.B IntType
.ad
.sp .6
.RS 4n
This field is bit-mapped. It indicates how the socket should be configured.
The following bits are defined:
.sp
.ne 2
.mk
.na
.B SOCKET_INTERFACE_MEMORY
.ad
.sp .6
.RS 4n
Memory only interface.
.RE

.sp
.ne 2
.mk
.na
.B SOCKET_INTERFACE_MEMORY_AND_IO
.ad
.sp .6
.RS 4n
Memory and I/O interface.
.RE

.RE

.sp
.ne 2
.mk
.na
.B ConfigBase
.ad
.sp .6
.RS 4n
This field is the offset in bytes from the beginning of attribute memory of
the configuration registers.
.RE

.sp
.ne 2
.mk
.na
.B Present
.ad
.sp .6
.RS 4n
This field identifies which of the configuration registers are present. If
present, the corresponding bit is set. This field is bit-mapped as
follows:
.sp
.ne 2
.mk
.na
.B CONFIG_OPTION_REG_PRESENT
.ad
.RS 30n
.rt
Configuration Option Register (COR) present
.RE

.sp
.ne 2
.mk
.na
.B CONFIG_STATUS_REG_PRESENT
.ad
.RS 30n
.rt
Configuration Status Register (CCSR) present
.RE

.sp
.ne 2
.mk
.na
.B CONFIG_PINREPL_REG_PRESENT
.ad
.RS 30n
.rt
Pin Replacement Register (PRR) present
.RE

.sp
.ne 2
.mk
.na
.B CONFIG_COPY_REG_PRESENT
.ad
.RS 30n
.rt
Socket and Copy Register (SCR) present
.RE

.sp
.ne 2
.mk
.na
.B CONFIG_ESR_REG_PRESENT
.ad
.RS 30n
.rt
Extended Status Register (ESR) present
.RE

.RE

.sp
.ne 2
.mk
.na
.B Status, Pin, Copy, ExtendedStatus
.ad
.sp .6
.RS 4n
These fields represent the initial values that should be written to those
registers if they are present, as indicated by the
.B Present
field.
.sp
The
.B Pin
field is also used to inform Card Services which pins in the
.B PC
Card's
.B PRR
(Pin Replacement Register) are valid. Only those
bits which are set are considered valid. This affects how status is returned
by the \fBcsx_GetStatus\fR(9F) function. If a particular signal is valid in
the
.BR PRR ,
both the
.I mask
(\fBSTATUS\fR) bit and the \fIchange\fR
(\fBEVENT\fR) bit must be set in the \fBPin\fR field. The following
.B PRR
bit definitions are provided for client use:
.sp
.ne 2
.mk
.na
.B PRR_WP_STATUS
.ad
.RS 20n
.rt
.B WRITE PROTECT
mask
.RE

.sp
.ne 2
.mk
.na
.B PRR_READY_STATUS
.ad
.RS 20n
.rt
.B READY
mask
.RE

.sp
.ne 2
.mk
.na
.B PRR_BVD2_STATUS
.ad
.RS 20n
.rt
.B BVD2
mask
.RE

.sp
.ne 2
.mk
.na
.B PRR_BVD1_STATUS
.ad
.RS 20n
.rt
.B BVD1
mask
.RE

.sp
.ne 2
.mk
.na
.B PRR_WP_EVENT
.ad
.RS 20n
.rt
.B WRITE PROTECT
changed
.RE

.sp
.ne 2
.mk
.na
.B PRR_READY_EVENT
.ad
.RS 20n
.rt
.B READY
changed
.RE

.sp
.ne 2
.mk
.na
.B PRR_BVD2_EVENT
.ad
.RS 20n
.rt
.B BVD2
changed
.RE

.sp
.ne 2
.mk
.na
.B PRR_BVD1_EVENT
.ad
.RS 20n
.rt
.B BVD1
changed
.RE

.RE

.sp
.ne 2
.mk
.na
.B ConfigIndex
.ad
.sp .6
.RS 4n
This field is the value written to the
.B COR
(Configuration Option
Register) for the configuration index required by the
.B PC
Card. Only
the least significant six bits of the
.B ConfigIndex
field are
significant; the upper two (2) bits are ignored. The interrupt type in the
.B COR
is always set to
.I level
mode by Card Services.
.RE

.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B CS_SUCCESS
.ad
.RS 27n
.rt
Successful operation.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_HANDLE
.ad
.RS 27n
.rt
Client handle is invalid or
.B csx_RequestConfiguration()
not done.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_SOCKET
.ad
.RS 27n
.rt
Error in getting or setting socket hardware parameters.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_VCC
.ad
.RS 27n
.rt
Requested
.B Vcc
is not available on socket.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_VPP
.ad
.RS 27n
.rt
Requested
.B Vpp
is not available on socket.
.RE

.sp
.ne 2
.mk
.na
.B CS_NO_CARD
.ad
.RS 27n
.rt
No
.B PC
Card in socket.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_TYPE
.ad
.RS 27n
.rt
.B I/O
and memory interface not supported on socket.
.RE

.sp
.ne 2
.mk
.na
.B CS_CONFIGURATION_LOCKED
.ad
.RS 27n
.rt
.B csx_RequestConfiguration()
already done.
.RE

.sp
.ne 2
.mk
.na
.B CS_UNSUPPORTED_FUNCTION
.ad
.RS 27n
.rt
No
.B PCMCIA
hardware installed.
.RE

.SH CONTEXT
.sp
.LP
This function may be called from user or kernel context.
.SH SEE ALSO
.sp
.LP
.BR csx_AccessConfigurationRegister (9F),
.BR csx_GetStatus (9F),
.BR csx_RegisterClient (9F),
.BR csx_ReleaseConfiguration (9F),
.BR csx_RequestIO (9F),
.BR csx_RequestIRQ (9F)
.sp
.LP
.IR "PC Card 95 Standard" ,
PCMCIA/JEIDA
