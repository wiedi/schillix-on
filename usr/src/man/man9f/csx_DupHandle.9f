'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH csx_DupHandle 9F "19 Jul 1996" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
csx_DupHandle \- duplicate access handle
.SH SYNOPSIS
.LP
.nf
#include <sys/pccard.h>



\fBint32_t\fR \fBcsx_DupHandle\fR(\fBacc_handle_t\fR \fIhandle1\fR, \fBacc_handle_t *\fIhandle2\fR,
     \fBuint32_t\fR \fIflags\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris
.B DDI
Specific (Solaris
.B DDI)
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I handle1
.ad
.RS 12n
.rt
The access handle returned from
.BR csx_RequestIO "(9F) or"
.BR csx_RequestWindow (9F)
that is to be duplicated.
.RE

.sp
.ne 2
.mk
.na
.I handle2
.ad
.RS 12n
.rt
A pointer to the newly-created duplicated data access handle.
.RE

.sp
.ne 2
.mk
.na
.I flags
.ad
.RS 12n
.rt
The access attributes that will be applied to the new handle.
.RE

.SH DESCRIPTION
.sp
.LP
This function duplicates the handle,
.IR handle1 ,
into a new handle,
.IR handle2 ,
that has the access attributes specified in the \fIflags\fR
argument. Both the original handle and the new handle are active and can be
used with the common access functions.
.sp
.LP
Both handles must be explicitly freed when they are no longer necessary.
.sp
.LP
The
.I flags
argument is bit-mapped. The following bits are defined:
.sp
.in +2
.nf
WIN_ACC_NEVER_SWAP       Host endian byte ordering
WIN_ACC_BIG_ENDIAN       Big endian byte ordering
WIN_ACC_LITTLE_ENDIAN    Little endian byte ordering
WIN_ACC_STRICT_ORDER     Program ordering references
WIN_ACC_UNORDERED_OK     May re-order references
WIN_ACC_MERGING_OK       Merge stores to consecutive locations
WIN_ACC_LOADCACHING_OK   May cache load operations
WIN_ACC_STORECACHING_OK  May cache store operations
.fi
.in -2

.sp
.LP
.B WIN_ACC_BIG_ENDIAN
and
.B WIN_ACC_LITTLE_ENDIAN
describe the endian
characteristics of the device as big endian or little endian, respectively.
Even though most of the devices will have the same endian characteristics as
their busses, there are examples of devices with an
.B I/O
processor that
has opposite endian characteristics of the busses. When
.B WIN_ACC_BIG_ENDIAN
or
.B WIN_ACC_LITTLE_ENDIAN
is  set, byte
swapping will automatically be performed by the system if the host machine
and the device data formats have opposite endian characteristics. The
implementation may take advantage of hardware platform byte swapping
capabilities. When
.B WIN_ACC_NEVER_SWAP
is specified, byte swapping will
not be invoked in the data access functions. The ability to specify the order
in which the
.B CPU
will reference data is provided by the following
.I flags
bits. Only one of the following bits may be specified:
.sp
.ne 2
.mk
.na
.B WIN_ACC_STRICT_ORDER
.ad
.RS 28n
.rt
The data references must be issued by a
.B CPU
in program order. Strict
ordering is the default behavior.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_UNORDERED_OK
.ad
.RS 28n
.rt
The
.B CPU
may re-order the data  references. This includes all kinds of
re-ordering (that is, a load followed by a store may be replaced by a store
followed by a load).
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_MERGING_OK
.ad
.RS 28n
.rt
The
.B CPU
may merge individual stores to consecutive locations. For
example, the
.B CPU
may turn two consecutive byte stores into one halfword
store. It may also batch individual loads. For example, the
.B CPU
may
turn two consecutive byte loads into one halfword load. Setting this bit also
implies re-ordering.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_LOADCACHING_OK
.ad
.RS 28n
.rt
The
.B CPU
may cache the data it fetches and reuse it until another store
occurs. The default behavior is to fetch new data on every load. Setting this
bit also implies merging and re-ordering.
.RE

.sp
.ne 2
.mk
.na
.B WIN_ACC_STORECACHING_OK
.ad
.RS 28n
.rt
The
.B CPU
may keep the data in the cache and push it to the device
(perhaps with other data) at a later time. The  default behavior is to push
the data right away. Setting this bit also implies load caching, merging, and
re-ordering.
.RE

.sp
.LP
These values are advisory, not mandatory. For example, data can be ordered
without being merged or cached, even though a driver requests unordered,
merged and cached together.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B CS_SUCCESS
.ad
.RS 28n
.rt
Successful operation.
.RE

.sp
.ne 2
.mk
.na
.B CS_FAILURE
.ad
.RS 28n
.rt
Error in
.I flags
argument or handle could not be duplicated for some
reason.
.RE

.sp
.ne 2
.mk
.na
.B CS_UNSUPPORTED_FUNCTION
.ad
.RS 28n
.rt
No
.B PCMCIA
hardware installed.
.RE

.SH CONTEXT
.sp
.LP
This function may be called from user or kernel context.
.SH SEE ALSO
.sp
.LP
.BR csx_Get8 (9F),
.BR csx_GetMappedAddr (9F),
.BR csx_Put8 (9F),
.BR csx_RepGet8 (9F),
.BR csx_RepPut8 (9F),
.BR csx_RequestIO (9F),
.BR csx_RequestWindow (9F)
.sp
.LP
.I PC Card 95 Standard, PCMCIA/JEIDA
