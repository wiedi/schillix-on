'\" te
.\" Copyright (c) 2000, Sun Microsystems, Inc.
.\"  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH vsprintf 9F "6 May 1996" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
vsprintf \- format characters in memory
.SH SYNOPSIS
.LP
.nf
#include <sys/varargs.h>
 #include <sys/ddi.h>
 #include <sys/sunddi.h>



\fBchar *\fBvsprintf\fR(\fBchar *\fIbuf\fR, \fBconst char *\fIfmt\fR, \fBva_list\fR \fIap\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I buf
.ad
.RS 8n
.rt
Pointer to a character string.
.RE

.sp
.ne 2
.mk
.na
.I fmt
.ad
.RS 8n
.rt
Pointer to a character string.
.RE

.sp
.ne 2
.mk
.na
.I ap
.ad
.RS 8n
.rt
Pointer to a variable argument list.
.RE

.SH DESCRIPTION
.sp
.LP
.B vsprintf()
builds a string in
.I buf
under the control of the
format
.IR fmt .
The format is a character string with either plain
characters, which are simply copied into
.IR buf ,
or conversion
specifications, each of which converts zero or more arguments, again copied
into
.IR buf .
The results are unpredictable if there are insufficient
arguments for the format;  excess arguments are simply ignored. It is the
user's responsibility to ensure that enough storage is available for
.IR buf .
.sp
.LP
.I ap
contains the list of arguments used by the conversion
specifications in
.IR fmt .
.I ap
is a variable argument list and must
be initialized by calling
.BR va_start (9F).
.BR va_end (9F)
is used to
clean up and must be called after each traversal of the list. Multiple
traversals of the argument list, each bracketed by
.BR va_start (9F)
and
.BR va_end (9F),
are possible.
.sp
.LP
Each conversion specification is introduced by the
.B %
character, after
which the following appear in sequence:
.sp
.LP
An optional decimal digit specifying a minimum field width for numeric
conversion. The converted value will be right-justified and padded with
leading zeroes if it has fewer characters than the minimum.
.sp
.LP
An optional
.B l
(\fBll\fR) specifying that a following
.BR d ,
.BR D ,
.BR o ,
.BR O ,
.BR x ,
.BR X ,
or
.B u
conversion character
applies to a
.B long
(\fBlong long\fR) integer argument. An \fBl\fR
(\fBll\fR) before any other conversion character is ignored.
.sp
.LP
A character indicating the type of conversion to be applied:
.sp
.ne 2
.mk
.na
\fBd\fR,\fBD\fR,\fBo\fR,\fBO\fR,\fBx\fR,\fBX\fR,\fBu\fR
.ad
.RS 17n
.rt
The integer argument is converted to signed decimal (\fBd\fR,
.BR D ),
unsigned octal (\fBo\fR,
.BR O ),
unsigned hexadecimal (\fBx\fR,
.BR X )
or unsigned decimal
.RB ( u ),
respectively, and copied. The letters
.B abcdef
are used for
.B x
conversion. The letters
.B ABCDEF
are
used for
.B X
conversion.
.RE

.sp
.ne 2
.mk
.na
.B c
.ad
.RS 17n
.rt
The character value of the argument is copied.
.RE

.sp
.ne 2
.mk
.na
.B b
.ad
.RS 17n
.rt
This conversion uses two additional arguments. The first is an integer, and
is converted according to the base specified in the second argument. The
second argument is a character string in the form
\fB<\fIbase\fB>[<\fIarg\fB>\|.\|.\|.\|].\fR The base supplies
the conversion base for the first argument as a binary value;  \e10 gives
octal, \e20 gives hexadecimal. Each subsequent <arg> is a sequence of
characters, the first of which is the bit number to be tested, and
subsequent characters, up to the next bit number or terminating null, supply
the name of the bit.
.RE

.sp
.ne 2
.mk
.na
\fR
.ad
.RS 17n
.rt
A bit number is a binary-valued character in the range
.BR 1-32 .
For each
bit set in the first argument, and named in the second argument, the bit
names are copied, separated by commas, and bracketed by
.B <
and
.BR > .
Thus, the following function call would generate
\fBreg=3<BitTwo,BitOne>\en\fR in \fIbuf\fR.
.RE

.sp
.ne 2
.mk
.na
\fR
.ad
.RS 17n
.rt
\fBvsprintf(buf, "reg=%b\en", 3, "\e10\e2BitTwo\e1BitOne")\fR
.RE

.sp
.ne 2
.mk
.na
.B s
.ad
.RS 17n
.rt
The argument is taken to be a string (character pointer), and characters
from the string are copied until a null character is encountered.  If the
character pointer is
.I NULL
on
.BR SPARC ,
the string
.B <nullstring>
is used in its place; on x86, it is undefined.
.RE

.sp
.ne 2
.mk
.na
.B %
.ad
.RS 17n
.rt
Copy a
.BR % ;
no argument is converted.
.RE

.SH RETURN VALUES
.sp
.LP
.B vsprintf()
returns its first parameter, \fIbuf\fR.
.SH CONTEXT
.sp
.LP
.B vsprintf()
can be called from user, kernel, or interrupt context.
.SH EXAMPLES
.LP
.B Example 1
Using \fBvsprintf()\fR
.sp
.LP
In this example,
.B xxerror()
accepts a pointer to a  \fBdev_info_t\fR
structure
.BR dip ,
an error level
.BR level ,
a format
.BR fmt ,
and a
variable number of arguments.  The routine uses
.B vsprintf()
to format
the error message in
.BR buf .
Note that
.BR va_start "(9F) and"
.BR va_end (9F)
bracket the call to
.BR vsprintf() .
.BR instance ,
.BR level ,
.BR name ,
and
.B buf
are then passed to
.BR cmn_err (9F).

.sp
.in +2
.nf
#include <sys/varargs.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>
#define MAX_MSG 256

void
xxerror(dev_info_t *dip, int level, const char *fmt, .\|.\|.\|)
{
	va_list		ap;
	int		instance;
	char		buf[MAX_MSG],
			*name;

	instance = ddi_get_instance(dip);
	name = ddi_binding_name(dip);

	/* format buf using fmt and arguments contained in ap */
	va_start(ap, fmt);
	vsprintf(buf, fmt, ap); 	
	va_end(ap);

	/* pass formatted string to cmn_err(9F) */
	cmn_err(level, "%s%d: %s", name, instance, buf);
}
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR cmn_err (9F),
.BR ddi_binding_name (9F),
.BR ddi_get_instance (9F),
.BR va_arg (9F)
.sp
.LP
.I Writing Device Drivers
