'\" te
.\" Copyright 1989 AT&T
.\" Copyright (c) 2006, Sun Microsystems, Inc.,
.\"  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH putnextctl1 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
putnextctl1 \- send a control message with a one-byte parameter to a
queue
.SH SYNOPSIS
.LP
.nf
#include <sys/stream.h>



\fBint\fR \fBputnextctl1\fR(\fBqueue_t *\fIq\fR, \fBint\fR \fItype\fR, \fBint\fR \fIp\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Architecture independent level 1 (DDI/DKI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I q
.ad
.RS 8n
.rt
Queue to which the message is to be sent.
.RE

.sp
.ne 2
.mk
.na
.I type
.ad
.RS 8n
.rt
Type of message.
.RE

.sp
.ne 2
.mk
.na
.I p
.ad
.RS 8n
.rt
One-byte parameter.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B putnextctl1()
function, like
.BR putctl1 (9F),
tests the
.I type
argument to make sure a data type has not been specified, and
attempts to allocate a message block. The
.I p
parameter can be used, for
example, to specify how long the delay will be when an
.B M_DELAY
message
is being sent.
.B putnextctl1()
fails if
.I type
is
.BR M_DATA ,
.BR M_PROTO ,
or
.BR M_PCPROTO ,
or if a message block cannot be
allocated. If successful,
.B putnextctl1()
calls the
.BR put (9E)
routine of the queue pointed to by
.I q
with the newly allocated and
initialized message.
.sp
.LP
A call to \fBputnextctl1(\fIq\fR,\fItype, p\fB)\fR is an atomic
equivalent of \fBputctl1(\fIq\fB->q_next,\fR \fItype, p\fB).\fR The
STREAMS framework provides whatever mutual exclusion is necessary to insure
that dereferencing
.I q
through its
.B q_next
field and then invoking
.BR putctl1 (9F)
proceeds without interference from other threads.
.sp
.LP
The
.B putnextctl1()
function should always be used in preference to
.BR putctl1 (9F)
.SH RETURN VALUES
.sp
.LP
On success,
.B 1
is returned.
.B 0
is returned if
.I type
is a
data type, or if a message block cannot be allocated.
.SH CONTEXT
.sp
.LP
The
.B putnextctl1()
function can be called from user, interrupt, or
kernel context.
.SH EXAMPLES
.sp
.LP
See the \fBputnextctl\fR(9F) function page for an example of
.BR putnextctl1() .
.SH SEE ALSO
.sp
.LP
.BR put (9E),
.BR allocb (9F),
.BR datamsg (9F),
.BR putctl1 (9F),
.BR putnextctl (9F)
.sp
.LP
.I Writing Device Drivers
.sp
.LP
.I STREAMS Programming Guide
