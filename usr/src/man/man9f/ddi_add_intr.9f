'\" te
.\" Copyright (c) 2005 Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_add_intr 9F "19 Oct 2005" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_add_intr, ddi_get_iblock_cookie, ddi_remove_intr \- hardware interrupt
handling routines
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/conf.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint\fR \fBddi_get_iblock_cookie\fR(\fBdev_info_t *\fIdip\fR, \fBuint_t\fR \fIinumber\fR,
      \fBddi_iblock_cookie_t *\fIiblock_cookiep\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_add_intr\fR(\fBdev_info_t *\fIdip\fR, \fBuint_t\fR \fIinumber\fR,
     \fBddi_iblock_cookie_t *\fIiblock_cookiep\fR,
     \fBddi_idevice_cookie_t *\fIidevice_cookiep\fR,
     \fBuint_t (*\fIint_handler\fR) (caddr_t),
     \fBcaddr_t\fR \fIint_handler_arg\fR);
.fi

.LP
.nf
\fBvoid\fR \fBddi_remove_intr\fR(\fBdev_info_t *\fIdip\fR,
     \fBuint_t\fR \fIinumber\fR, \fBddi_iblock_cookie_t\fR \fIiblock_cookie\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI). These interfaces are obsolete. Use the
new interrupt interfaces referenced in \fBIntro\fR(9F). Refer to \fIWriting
Device Drivers\fR for more information.
.SH PARAMETERS
.sp
.LP
For
.BR ddi_get_iblock_cookie() :
.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 18n
.rt
Pointer to \fBdev_info\fR structure.
.RE

.sp
.ne 2
.mk
.na
.I inumber
.ad
.RS 18n
.rt
Interrupt number.
.RE

.sp
.ne 2
.mk
.na
.I iblock_cookiep
.ad
.RS 18n
.rt
Pointer to an interrupt block cookie.
.RE

.sp
.LP
For
.BR ddi_add_intr() :
.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 19n
.rt
Pointer to \fBdev_info\fR structure.
.RE

.sp
.ne 2
.mk
.na
.I inumber
.ad
.RS 19n
.rt
Interrupt number.
.RE

.sp
.ne 2
.mk
.na
.I iblock_cookiep
.ad
.RS 19n
.rt
Optional pointer to an interrupt block cookie where a returned interrupt
block cookie is stored.
.RE

.sp
.ne 2
.mk
.na
.I idevice_cookiep
.ad
.RS 19n
.rt
Optional pointer to an interrupt device cookie where a returned interrupt
device cookie is stored.
.RE

.sp
.ne 2
.mk
.na
.I int_handler
.ad
.RS 19n
.rt
Pointer to interrupt handler.
.RE

.sp
.ne 2
.mk
.na
.I int_handler_arg
.ad
.RS 19n
.rt
Argument for interrupt handler.
.RE

.sp
.LP
For
.BR ddi_remove_intr() :
.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 17n
.rt
Pointer to \fBdev_info\fR structure.
.RE

.sp
.ne 2
.mk
.na
.I inumber
.ad
.RS 17n
.rt
Interrupt number.
.RE

.sp
.ne 2
.mk
.na
.I iblock_cookie
.ad
.RS 17n
.rt
Block cookie which identifies the interrupt handler to be removed.
.RE

.SH DESCRIPTION
.SS "ddi_get_iblock_cookie(\|)"
.sp
.LP
\fBddi_get_iblock_cookie()\fR retrieves the interrupt block cookie
associated with a particular interrupt specification. This routine should be
called before
.B ddi_add_intr()
to retrieve the interrupt block cookie
needed to initialize locks (\fBmutex\fR(9F),
.BR rwlock (9F))
used by the
interrupt routine. The interrupt number
.I inumber
determines for which
interrupt specification to retrieve the cookie.
.I inumber
is associated
with information provided either by the device (see
.BR sbus (4))
or the
hardware configuration file (see
.BR sysbus (4),
.BR isa (4),
and
\fBdriver.conf\fR(4)). If only one interrupt is associated with the device,
\fIinumber\fR should be
.BR 0 .
.sp
.LP
On a successful return,
.I *iblock_cookiep
contains information needed
for initializing locks associated with the interrupt specification
corresponding to
.I inumber
(see \fBmutex_init\fR(9F) and
.BR rw_init (9F)).
The driver can then initialize locks acquired by the
interrupt routine before calling
.B ddi_add_intr()
which prevents a
possible race condition where the driver's interrupt handler is called
immediately \fBafter\fR the driver has called
.B ddi_add_intr()
but
\fBbefore\fR the driver has initialized the locks. This may happen when an
interrupt for a different device occurs on the same interrupt level. If the
interrupt routine acquires the lock before the lock has been initialized,
undefined behavior may result.
.SS "ddi_add_intr(\|)"
.sp
.LP
\fBddi_add_intr()\fR adds an interrupt handler to the system. The interrupt
number
.I inumber
determines which interrupt the handler will be
associated with. (Refer to
.B ddi_get_iblock_cookie()
above.)
.sp
.LP
On a successful return,
.I iblock_cookiep
contains information used for
initializing locks associated with this interrupt specification (see
.BR mutex_init (9F)
and
.BR rw_init "(9F)). Note that the interrupt block"
cookie is usually obtained using
.B ddi_get_iblock_cookie()
to avoid the
race conditions described above (refer to \fBddi_get_iblock_cookie()\fR
above). For this reason,
.I iblock_cookiep
is no longer useful and should
be set to
.IR NULL .
.sp
.LP
On a successful return,
.I idevice_cookiep
contains a pointer to a
\fBddi_idevice_cookie_t\fR structure (see
.BR ddi_idevice_cookie (9S))
containing information useful for some devices that have programmable
interrupts. If
.I idevice_cookiep
is set to
.IR NULL ,
no value is
returned.
.sp
.LP
The routine
.IR intr_handler ,
with its argument
.IR int_handler_arg ,
is
called upon receipt of the appropriate interrupt. The interrupt handler
should return
.B DDI_INTR_CLAIMED
if the interrupt was claimed,
\fBDDI_INTR_UNCLAIMED\fR otherwise.
.sp
.LP
If successful,
.B ddi_add_intr()
returns
.BR DDI_SUCCESS .
If the
interrupt information cannot be found on the sun4u architecture, either
\fBDDI_INTR_NOTFOUND\fR or \fBDDI_FAILURE\fR can be returned. On i86pc and
sun4m architectures, if the interrupt information cannot be found,
\fBDDI_INTR_NOTFOUND\fR is returned.
.SS "ddi_remove_intr(\|)"
.sp
.LP
\fBddi_remove_intr()\fR removes an interrupt handler from the system.
Unloadable drivers should call this routine during their
.BR detach (9E)
routine to remove their interrupt handler from the system.
.sp
.LP
The device interrupt routine for this instance of the device will not
execute after
.B ddi_remove_intr()
returns.
.B ddi_remove_intr()
may
need to wait for the device interrupt routine to complete before returning.
Therefore, locks acquired by the interrupt handler should not be held across
the call to
.B ddi_remove_intr()
or deadlock may result.
.SS "For All Three Functions:"
.sp
.LP
For certain bus types, you can call these
.B DDI
functions from a
high-interrupt context. These types include
.B ISA
and SBus buses. See
.BR sysbus (4),
.BR isa (4),
and
.BR sbus (4)
for details.
.SH RETURN VALUES
.sp
.LP
\fBddi_add_intr()\fR and \fBddi_get_iblock_cookie()\fR return:
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 21n
.rt
On success.
.RE

.sp
.ne 2
.mk
.na
.B DDI_INTR_NOTFOUND
.ad
.RS 21n
.rt
On failure to find the interrupt.
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 21n
.rt
On failure.
.B DDI_FAILURE
can also be returned on failure to find
interrupt
.RB ( sun4u ).
.RE

.SH CONTEXT
.sp
.LP
.BR ddi_add_intr() ,
.BR ddi_remove_intr() ,
and
\fBddi_get_iblock_cookie()\fR can be called from user or kernel context.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityObsolete
.TE

.SH SEE ALSO
.sp
.LP
.BR driver.conf (4),
.BR isa (4),
.BR sbus (4),
.BR sysbus (4),
.BR attach (9E),
.BR detach (9E),
.BR ddi_intr_hilevel (9F),
.BR Intro (9F),
.BR mutex (9F),
.BR mutex_init (9F),
.BR rw_init (9F),
.BR rwlock (9F),
.BR ddi_idevice_cookie (9S)
.sp
.LP
.I Writing Device Drivers
.SH NOTES
.sp
.LP
\fBddi_get_iblock_cookie()\fR must not be called \fBafter\fR the driver
adds an interrupt handler for the interrupt specification corresponding to
.IR inumber .
.sp
.LP
All consumers of these interfaces, checking return codes, should verify
.BR "return_code != DDI_SUCCESS" .
Checking for specific failure codes can
result in inconsistent behaviors among platforms.
.SH BUGS
.sp
.LP
The
.I idevice_cookiep
should really point to a data structure that is
specific to the bus architecture that the device operates on. Currently the
SBus and PCI buses are supported and a single data structure is used to
describe both.
