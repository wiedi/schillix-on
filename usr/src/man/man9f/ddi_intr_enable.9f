'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_intr_enable 9F "22 Apr 2005" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_intr_enable, ddi_intr_block_enable, ddi_intr_disable,
ddi_intr_block_disable \- enable or disable a given interrupt or range of
interrupts
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/conf.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint\fR \fBddi_intr_enable\fR(\fBddi_intr_handle_t\fR \fIh\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_intr_block_enable\fR(\fBddi_intr_handle_t *\fIh_array\fR, \fBint\fR \fIcount\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_intr_disable\fR(\fBddi_intr_handle_t\fR \fIh\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_intr_block_disable\fR(\fBddi_intr_handle_t *\fIh_array\fR, \fBint\fR \fIcount\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.LP
.B ddi_intr_enable()
.sp
.ne 2
.mk
.na
.I h
.ad
.RS 5n
.rt
DDI interrupt handle
.RE

.sp
.LP
.B ddi_intr_block_enable()
.sp
.ne 2
.mk
.na
.I h_array
.ad
.RS 11n
.rt
Pointer to an array of DDI interrupt handles
.RE

.sp
.ne 2
.mk
.na
.I count
.ad
.RS 11n
.rt
Number of interrupts
.RE

.sp
.LP
.B ddi_intr_disable()
.sp
.ne 2
.mk
.na
.I h
.ad
.RS 5n
.rt
DDI interrupt handle
.RE

.sp
.LP
.B ddi_intr_block_disable()
.sp
.ne 2
.mk
.na
.I h_array
.ad
.RS 11n
.rt
Pointer to an array of DDI interrupt handles
.RE

.sp
.ne 2
.mk
.na
.I count
.ad
.RS 11n
.rt
Number of interrupts
.RE

.SH DESCRIPTION
.sp
.LP
The
.B ddi_intr_enable()
function enables the interrupt given by the
interrupt handle
.IR h .
.sp
.LP
The
.B ddi_intr_block_enable()
function enables a range of interrupts
given by the
.I count
and
.I h_array
arguments, where
.I count
must
be at least
.B 1
and
.I h_array
is pointer to a count-sized array of
interrupt handles.
.sp
.LP
The
.B ddi_intr_block_enable()
function can be used only if the device
or host bridge supports the block enable/disable feature. The
\fBddi_intr_get_cap()\fR function returns the \fBRO\fR flag
\fBDDI_INTR_FLAG_BLOCK\fR if the device or host bridge supports the
interrupt block enable/disable feature for the given interrupt type. The
\fBddi_intr_block_enable()\fR function is useful for enabling MSI interrupts
when the optional per-vector masking capability is not supported.
.sp
.LP
The
.B ddi_intr_enable()
or
.B ddi_intr_block_enable()
functions must
be called after the required interrupt resources are allocated with
.BR ddi_intr_alloc() ,
the interrupt handlers are added through
.BR ddi_intr_add_handler() ,
and the required locks are initialized by
.BR mutex (9F)
or
.BR rwlock (9F).
.sp
.LP
Once enabled by either of the enable calls, the interrupt can be taken and
passed to the driver's interrupt service routine. Enabling an interrupt
implies clearing any system or device mask bits associated with the
interrupt.
.sp
.LP
The
.B ddi_intr_disable()
function disables the interrupt given by the
interrupt handle
.IR h .
.sp
.LP
The
.B ddi_intr_block_disable()
function disables a range of interrupts
given by the
.I count
and
.I h_array
arguments, where
.I count
must
be at least
.B 1
and
.I h_array
is pointer to a count-sized array of
interrupt handles.
.sp
.LP
The
.B ddi_intr_block_disable()
function can be used only if the device
or host bridge supports the block enable/disable feature. The
\fBddi_intr_get_cap()\fR function returns the \fBRO\fR flag
\fBDDI_INTR_FLAG_BLOCK\fR if the device or host bridge supports the
interrupt block enable/disable feature for the given interrupt type. The
\fBddi_intr_block_disable()\fR function is useful for disabling MSI
interrupts when the optional per-vector masking capability is not
supported.
.sp
.LP
The
.B ddi_intr_disable()
or
.B ddi_intr_block_disable()
functions
must be called before removing the interrupt handler and freeing the
corresponding interrupt with
.B ddi_intr_remove_handler()
and
\fBddi_intr_free()\fR, respectively. The \fBddi_intr_block_disable()\fR
function should be called if the
.B ddi_intr_block_enable()
function was
used to enable the interrupts.
.SH RETURN VALUES
.sp
.LP
The
.BR ddi_intr_enable() ,
.BR ddi_intr_block_enable() ,
.BR ddi_intr_disable() ,
and
.B ddi_intr_block_disable()
functions
return:
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 15n
.rt
On success.
.RE

.sp
.ne 2
.mk
.na
.B DDI_EINVAL
.ad
.RS 15n
.rt
On encountering invalid input parameters.
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 15n
.rt
On any implementation specific failure.
.RE

.SH CONTEXT
.sp
.LP
The
.BR ddi_intr_enable() ,
.BR ddi_intr_block_enable() ,
.BR ddi_intr_disable() ,
and
.B ddi_intr_block_disable()
functions can
be called from kernel non-interrupt context.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR attributes (5),
.BR ddi_intr_add_handler (9F),
.BR ddi_intr_alloc (9F),
.BR ddi_intr_dup_handler (9F),
.BR ddi_intr_free (9F),
.BR ddi_intr_get_cap (9F),
.BR ddi_intr_remove_handler (9F),
.BR mutex (9F),
.BR rwlock (9F)
.sp
.LP
.I Writing Device Drivers
.SH NOTES
.sp
.LP
Consumers of these interfaces should verify that the return value is not
equal to
.BR DDI_SUCCESS .
Incomplete checking for failure codes could
result in inconsistent behavior among platforms.
.sp
.LP
If a device driver that uses
.B MSI
and
.B MSI-X
interrupts resets
the device, the device might reset its configuration space modifications.
Such a reset could cause a device driver to lose any
.B MSI
and
\fBMSI-X\fR interrupt usage settings that have been applied.
