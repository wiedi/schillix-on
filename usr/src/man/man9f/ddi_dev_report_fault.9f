'\" te
.\" Copyright (c) 1999, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_dev_report_fault 9F "13 August 1999" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_dev_report_fault \- Report a hardware failure
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBvoid\fR  \fBddi_dev_report_fault\fR (\fBdev_info_t   *\fIdip\fR,
     \fBddi_fault_impact_t\fR \fIimpact\fR, \fB ddi_fault_location_t\fR \fIlocation\fR,
     \fBconst char   *\fImessage \fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 13n
.rt
Pointer to the driver's
.B dev_info
structure to which the fault report
relates. (Normally the caller's own
.B dev_info
pointer).
.RE

.sp
.ne 2
.mk
.na
.I impact
.ad
.RS 13n
.rt
One of a set of enumerated values indicating the impact of the fault on the
device's ability to provide normal service.
.RE

.sp
.ne 2
.mk
.na
.I location
.ad
.RS 13n
.rt
One of a set of enumerated values indicating the location of the fault,
relative to the hardware controlled by the driver specified by
.BR dip .
.RE

.sp
.ne 2
.mk
.na
.I message
.ad
.RS 13n
.rt
Text of the message describing the fault being reported.
.RE

.SH DESCRIPTION
.sp
.LP
This function provides a standardized mechanism through which device
drivers can report hardware faults.  Use of this reporting mechanism enables
systems equipped with a fault management system to respond to faults
discovered by a driver. On a suitably equipped system, this might include
automatic failover to an alternative device and/or scheduling replacement of
the faulty hardware.
.sp
.LP
The driver must indicate the impact of the fault being reported on its
ability to provide service by passing one of the following values for the
impact parameter:
.sp
.ne 2
.mk
.na
.B DDI_SERVICE_LOST
.ad
.RS 26n
.rt
Indicates a total loss of service. The driver is unable to implement the
normal functions of its hardware.
.RE

.sp
.ne 2
.mk
.na
.B DDI_SERVICE_DEGRADED
.ad
.RS 26n
.rt
The driver is unable to provide normal service, but can provide a partial
or degraded level of service. The driver may have to make repeated attempts
to perform an operation before it succeeds, or it may be running at less
than its configured speed. A driver may use this value to indicate that an
alternative device should be used if available, but that it can continue
operation if no alternative exists.
.RE

.sp
.ne 2
.mk
.na
.B DDI_SERVICE_UNAFFECTED
.ad
.RS 26n
.rt
The service provided by the device is currently unaffected by the reported
fault. This value may be used to report recovered errors for predictive
failure analysis.
.RE

.sp
.ne 2
.mk
.na
.B DDI_SERVICE_RESTORED
.ad
.RS 26n
.rt
The driver has resumed normal service, following a previous report that
service was lost or degraded.  This message implies that any previously
reported fault condition no longer exists.
.RE

.sp
.LP
The location parameter should be one of the following values:
.sp
.ne 2
.mk
.na
.B DDI_DATAPATH_FAULT
.ad
.RS 22n
.rt
The fault lies in the datapath between the driver and the device. The
device may be unplugged, or a problem may exist in the bus on which the
device resides.  This value is appropriate if the device is not responding
to accesses, (for example, the device may not be present) or if a call to
.BR ddi_check_acc_handle (9F)
returns
.BR DDI_FAILURE .
.RE

.sp
.ne 2
.mk
.na
.B DDI_DEVICE_FAULT
.ad
.RS 22n
.rt
The fault lies in the device controlled by the driver. This value is
appropriate if the device returns an error from a selftest function, or if
the driver is able to determine that device is present and accessible, but
is not functioning correctly.
.RE

.sp
.ne 2
.mk
.na
.B DDI_EXTERNAL_FAULT
.ad
.RS 22n
.rt
The fault is external to the device.  For example, an Ethernet driver would
use this value when reporting a cable fault.
.sp
If a device returns detectably bad data during normal operation (an
"impossible" value in a register or DMA status area, for example), the
driver should check the associated handle using
.BR ddi_check_acc_handle (9F)
or
.BR ddi_check_dma_handle (9F)
before
reporting the fault. If the fault is associated with the handle, the driver
should specify
.B DDI_DATAPATH_FAULT
rather than
.BR DDI_DEVICE_FAULT .
As a consequence of this call, the device's state may be updated to reflect
the level of service currently available. See
.BR ddi_get_devstate (9F).
.sp
Note that if a driver calls
.BR ddi_get_devstate "(9F) and discovers that"
its device is down, a fault should not be reported- the device is down as
the result of a fault that has already been reported. Additionally, a driver
should avoid incurring or reporting additional faults when the device is
already known to be unusable. The
.B ddi_dev_report_fault()
call should
only be used to report hardware (device) problems and should not be used to
report purely software problems such as memory (or other resource)
exhaustion.
.RE

.SH EXAMPLES
.sp
.LP
An Ethernet driver receives an error interrupt from its device if various
fault conditions occur.  The driver must read an error status register to
determine the nature of the fault, and report it appropriately:
.sp
.in +2
.nf
static int
xx_error_intr(xx_soft_state *ssp)
{
    ...
    error_status = ddi_get32(ssp->handle, &ssp->regs->xx_err_status);
    if (ddi_check_acc_handle(ssp->handle) != DDI_SUCCESS) {
        ddi_dev_report_fault(ssp->dip, DDI_SERVICE_LOST,
            DDI_DATAPATH_FAULT, "register access fault");
        return DDI_INTR_UNCLAIMED;
    }
    if (ssp->error_status & XX_CABLE_FAULT) {
        ddi_dev_report_fault(ssp->dip, DDI_SERVICE_LOST,
            DDI_EXTERNAL_FAULT, "cable fault")
        return DDI_INTR_CLAIMED;
    }
    if (ssp->error_status & XX_JABBER) {
        ddi_dev_report_fault(ssp->dip, DDI_SERVICE_DEGRADED,
            DDI_EXTERNAL_FAULT, "jabbering detected")
        return DDI_INTR_CLAIMED;
    }
    ...
}
.fi
.in -2

.SH CONTEXT
.sp
.LP
The
.B ddi_dev_report_fault()
function may be called from user, kernel,
or interrupt context.
.SH SEE ALSO
.sp
.LP
.BR ddi_check_acc_handle (9F),
.BR ddi_check_dma_handle (9F),
.BR ddi_get_devstate (9F)
