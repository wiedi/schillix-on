'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc., All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH scsi_ext_sense_fields 9F "29 Jun 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
scsi_ext_sense_fields, scsi_sense_info_uint64,
scsi_sense_cmdspecific_uint64 \- retrieve fields from SCSI sense data
.SH SYNOPSIS
.LP
.nf
#include <sys/scsi/scsi.h>



\fBvoid\fR \fBscsi_ext_sense_fields\fR(\fBuint8_t *\fIsense_buffer\fR, \fBint *\fIsense_buf_len\fR,
     \fBuint8_t **\fIinformation\fR, \fBuint8_t **\fIcmd_spec_info\fR, \fBuint8_t **\fIfru_code\fR,
     \fBuint8_t **\fIsk_specific\fR, \fBuint8_t **\fIstream_flags\fR);
.fi

.LP
.nf
\fBboolean_t\fR \fBscsi_sense_info_uint64\fR(\fBuint8_t *\fIsense_buffer\fR, \fBint\fR \fIsense_buf_len\fR,
     \fBuint64_t *\fIinformation\fR);
.fi

.LP
.nf
\fBboolean_t\fR \fBscsi_sense_cmdspecific_uint64\fR(\fBuint8_t *\fIsense_buffer\fR,
     \fBint\fR \fIsense_buf_len\fR, \fBuint64_t *\fIcmd_spec_info\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I sense_buffer
.ad
.RS 17n
.rt
Pointer to a buffer containing
.B SCSI
sense data. The sense data is
expected in wire format starting at the response code. It can be in either a
fixed or descriptor format.
.RE

.sp
.ne 2
.mk
.na
.I information
.ad
.RS 17n
.rt
For
.BR scsi_ext_sense_fields() ,
this is a call-by-reference pointer to
.BR uint8_t .
A pointer to the
.B INFORMATION
field in the sense data
may be returned in this parameter.
.sp
The
.B scsi_sense_info_uint64()
function requires a pointer to
.BR uint64_t .
The data in the information field is returned as a 64 bit
integer. If the sense data information field is 32 bits, fixed format, the
most significant 32-bits are\fR 0.
.RE

.sp
.ne 2
.mk
.na
.I cmd_spec_info
.ad
.RS 17n
.rt
For
.BR scsi_ext_sense_fields() ,
this is a call-by-reference pointer to
.BR uint8_t .
A pointer to the
.B "COMMAND_SPECIFIC INFORMATION"
field in
the sense data can be returned in this parameter.
.sp
The
.B scsi_sense_cmdspecific_uint64()
function requires a pointer to
.BR uint64_t .
The data in the command specific information field is
returned as a 64 bit integer. If the sense data command specific information
field is 32 bits, fixed format, the most significant 32-bits are
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
.I fru_code
.ad
.RS 17n
.rt
Call-by-reference pointer to
.BR uint8_t .
A pointer to the \fBFIELD
REPLACEABLE UNIT CODE\fR field in the sense data can be returned in this
parameter.
.RE

.sp
.ne 2
.mk
.na
.I sk_specific
.ad
.RS 17n
.rt
Call-by-reference pointer to
.BR uint8_t .
A pointer to the \fBSENSE KEY
SPECIFIC\fR field in the sense data can be returned in this parameter.
.RE

.sp
.ne 2
.mk
.na
.I stream_flags
.ad
.RS 17n
.rt
Call-by-reference pointer to
.BR uint8_t .
A pointer to the byte
containing the
.BR ILI ,
.BR EOM ,
and
.B FILEMARK
flags can be
returned in this parameter.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B scsi_ext_sense_fields()
function can be used to retrieve any of
the extended sense data fields from a sense data buffer, regardless of
whether the sense data is in fixed format or in descriptor format.
.sp
.LP
The
.IR information ,
.IR cmd_spec_info ,
.IR fru_code ,
.IR sk_specific ,
and
.I stream_specific
parameters are all
call-by-reference output parameters. Each parameter corresponds to one or
more of the extended sense data fields. Any of these parameters can be
passed as
.I NULL
if the caller is not interested in the associated
data.
.sp
.LP
If the requested data is present and valid for each output parameter, the
pointer passed in is set to point to the relevant location in the sense
buffer. If the data is not present or invalid, the pointer is set to
.IR NULL .
For example, a caller that requests a pointer to the information
field would get
.I NULL
when an information descriptor is not present for
descriptor format sense data or when the valid bit is not set for fixed
format sense data.
.sp
.LP
The information and command specific information fields can be 4 bytes or 8
bytes in length, depending on whether the sense data is in fixed or
descriptor format respectively. Drivers can use
.BR scsi_validate_sense (9F)
to determine the sense data format and, by
extension, the length of the information and command specific information
fields.
.sp
.LP
A driver can determine whether integer data is included in the information
or command specific information fields based on the
.B asc
and
.BR ascq
sense keys, such as the
.B LBA
of a failed disk request. The
.B scsi_sense_info_uint64()
function retrieves the contents of the
information field as a 64 bit integer and the
.B scsi_sense_cmdspecific_uint64()
retrieves the command specific
information field as a 64 bit integer.
.sp
.LP
Drivers should use
.BR scsi_validate_sense "(9F) to ensure that the sense"
buffer contains valid sense data.
.SH RETURN VALUES
.sp
.LP
The \fBscsi_sense_info_uint64()\fR function returns \fBTRUE\fR if the
information field is present and valid. Otherwise it returns
.BR FALSE .
.sp
.LP
The \fBscsi_sense_cmdspecific_uint64()\fR function returns \fBTRUE\fR if
the command specific information field is present and valid. Otherwise it
returns
.BR FALSE .
.SH CONTEXT
.sp
.LP
The
.BR scsi_ext_sense_fields() ,
.B scsi_sense_info_uint64()
and
.B scsi_sense_cmdspecific_uint64()()
functions can be called from user or
interrupt context.
.SH SEE ALSO
.sp
.LP
.BR scsi_find_sense_descr (9F),
.BR scsi_sense_asc (9F),
.BR scsi_sense_ascq (9F),
.BR scsi_sense_key (9F),
.BR scsi_validate_sense (9F)
