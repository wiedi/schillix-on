'\" te
.\" Copyright (c) 2003, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_dev_is_needed 9F "7 Dec 2003" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_dev_is_needed \- inform the system that a device's component is
required
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint\fR \fBddi_dev_is_needed\fR(\fBdev_info_t *\fIdip\fR, \fBint\fR \fIcomponent\fR, \fBint\fR \fIlevel\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 13n
.rt
Pointer to the device's \fBdev_info\fR structure.
.RE

.sp
.ne 2
.mk
.na
.I component
.ad
.RS 13n
.rt
Component of the driver which is needed.
.RE

.sp
.ne 2
.mk
.na
.I level
.ad
.RS 13n
.rt
Power level at which the component is needed.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B ddi_dev_is_needed()
function is obsolete and will be removed in a
future release. It is recommended that device drivers use
.BR pm_raise_power (9F)
and
.BR pm_lower_power (9F).
.sp
.LP
The
.B ddi_dev_is_needed()
function informs the system that a device
component is needed at the specified power level. The
.I level
argument
must be non-zero.
.sp
.LP
This function sets a
.I component
to the required level and sets all
devices which depend on this to their normal power levels.
.sp
.LP
The state of the device should be examined before each physical access. The
\fBddi_dev_is_needed()\fR function should be called to set a \fIcomponent\fR
to the required power level if the operation to be performed requires the
component to be at a power level other than its current level.
.sp
.LP
The
.B ddi_dev_is_needed()
function might cause re-entry of the driver.
Deadlock may result if driver locks are held across the call to
.BR ddi_dev_is_needed() .
.SH RETURN VALUES
.sp
.LP
The
.B ddi_dev_is_needed()
function returns:
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 15n
.rt
Power successfully set to the requested level.
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 15n
.rt
An error occurred.
.RE

.SH EXAMPLES
.LP
\fBExample 1\fR disk driver code
.sp
.LP
A hypothetical disk driver might include this code:

.sp
.in +2
.nf
     static int
xxdisk_spun_down(struct xxstate *xsp)
{
		return (xsp->power_level[DISK_COMPONENT] < POWER_SPUN_UP);
}
static int
xxdisk_strategy(struct buf *bp)
{

\&.\|.\|.

	mutex_enter(&xxstate_lock);
	/*
	* Since we have to drop the mutex, we have to do this in a loop
	* in case we get preempted and the device gets taken away from
	* us again
	*/
	while (device_spun_down(sp)) {
		mutex_exit(&xxstate_lock);
		if (ddi_dev_is_needed(xsp->mydip,
			XXDISK_COMPONENT, XXPOWER_SPUN_UP) != DDI_SUCCESS) {
				bioerror(bp,EIO);
				biodone(bp);
		return (0);
	}
		mutex_enter(&xxstate_lock);
	}
	xsp->device_busy++;
	mutex_exit(&xxstate_lock);

\&.\|.\|.

}
.fi
.in -2

.SH CONTEXT
.sp
.LP
This function can be called from user or kernel context.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityObsolete
.TE

.SH SEE ALSO
.sp
.LP
.BR pm (7D),
.BR pm-components (9P),
.BR attach (9E),
.BR detach (9E),
.BR power (9E),
.BR pm_busy_component (9F),
.BR pm_idle_component (9F)
.sp
.LP
.I Writing Device Drivers
