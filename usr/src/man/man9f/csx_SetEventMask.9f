'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH csx_SetEventMask 9F "19 Jul 1996" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
csx_SetEventMask, csx_GetEventMask \- set or return the client event mask
for the client
.SH SYNOPSIS
.LP
.nf
#include <sys/pccard.h>



\fBint32_t\fR \fBcsx_SetEventMask\fR(\fBclient_handle_t\fR \fIch\fR, \fBsockevent_t *\fIse\fR);
.fi

.LP
.nf
\fBint32_t\fR \fBcsx_GetEventMask\fR(\fBclient_handle_t\fR \fIch\fR, \fBsockevent_t *\fIse\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris
.B DDI
Specific (Solaris
.B DDI)
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I ch
.ad
.RS 7n
.rt
Client handle returned from
.BR csx_RegisterClient (9F).
.RE

.sp
.ne 2
.mk
.na
.I se
.ad
.RS 7n
.rt
Pointer to a
.B sockevent_t
structure
.RE

.SH DESCRIPTION
.sp
.LP
The function
.B csx_SetEventMask()
sets the client or global event mask
for the client.
.sp
.LP
The function
.B csx_GetEventMask()
returns the client or global event
mask for the client.
.sp
.LP
.BR csx_RequestSocketMask (9F)
must be called before calling
.B csx_SetEventMask()
for the client event mask for this socket.
.SH STRUCTURE MEMBERS
.sp
.LP
The structure members of
.B sockevent_t
are:
.sp
.in +2
.nf
uint32_t   uint32_t     /* attribute flags for call */
uint32_t   EventMask;   /* event mask to set or return */
uint32_t   Socket;      /* socket number if necessary */
.fi
.in -2

.sp
.LP
The fields are defined as follows:
.sp
.ne 2
.mk
.na
.B Attributes
.ad
.RS 14n
.rt
This is a bit-mapped field that identifies the type of event mask to be
returned. The field is defined as follows:
.sp
.ne 2
.mk
.na
.B CONF_EVENT_MASK_GLOBAL
.ad
.RS 27n
.rt
Client's global event mask. If set, the client's global event mask is
returned.
.RE

.sp
.ne 2
.mk
.na
.B CONF_EVENT_MASK_CLIENT
.ad
.RS 27n
.rt
Client's local event mask. If set, the client's local event mask is
returned.
.RE

.RE

.sp
.ne 2
.mk
.na
.B EventMask
.ad
.RS 14n
.rt
This field is bit-mapped. Card Services performs event notification based
on this field. See \fBcsx_event_handler\fR(9E) for valid event definitions
and for additional information about handling events.
.RE

.sp
.ne 2
.mk
.na
.B Socket
.ad
.RS 14n
.rt
Not used in Solaris, but for portability with other Card Services
implementations, it should be set to the logical socket number.
.RE

.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B CS_SUCCESS
.ad
.RS 28n
.rt
Successful operation.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_HANDLE
.ad
.RS 28n
.rt
Client handle is invalid.
.RE

.sp
.ne 2
.mk
.na
.B CS_BAD_SOCKET
.ad
.RS 28n
.rt
.BR csx_RequestSocketMask (9F)
not called for
.B CONF_EVENT_MASK_CLIENT.
.RE

.sp
.ne 2
.mk
.na
.B CS_UNSUPPORTED_FUNCTION
.ad
.RS 28n
.rt
No
.B PCMCIA
hardware installed.
.RE

.SH CONTEXT
.sp
.LP
These functions may be called from user or kernel context.
.SH SEE ALSO
.sp
.LP
.BR csx_event_handler (9E),
.BR csx_RegisterClient (9F),
.BR csx_ReleaseSocketMask (9F),
.BR csx_RequestSocketMask (9F)
.sp
.LP
.I PC Card 95 Standard,
PCMCIA/JEIDA
