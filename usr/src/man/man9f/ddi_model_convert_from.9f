'\" te
.\" Copyright (c) 2001 Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_model_convert_from 9F "8 Feb 2001" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_model_convert_from \- determine data model type mismatch
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>

\fB uint_t\fBddi_model_convert_from\fR(\fBuint_t\fR \fImodel\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I model
.ad
.RS 10n
.rt
The data model type of the current thread.
.RE

.SH DESCRIPTION
.sp
.LP
.B ddi_model_convert_from()
is used to determine if the current thread
uses a different
.B C
Language Type Model than the device driver. The
64-bit version of Solaris will require a 64-bit kernel to support both
64-bit and 32-bit user mode programs. The difference between a 32-bit
program and a 64-bit program is in its
.B C
Language Type Model: a 32-bit
program is
.B ILP32
(integer, longs, and pointers are 32-bit) and a
64-bit program is
.B LP64
(longs and pointers are 64-bit). There are a
number of driver entry points such as
.BR ioctl "(9E) and"
.BR mmap (9E)
where it is necessary to identify the
.B C
Language Type Model of the
user-mode originator of an kernel event. For example any data which flows
between programs and the device driver or vice versa need to be identical in
format. A 64-bit device driver may need to modify the format of the data
before sending it to a 32-bit application.
.B ddi_model_convert_from()
is
used to determine if data that is passed between the device driver and the
application requires reformatting to any non-native data model.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B DDI_MODEL_ILP32
.ad
.RS 20n
.rt
A conversion to/from
.B ILP32
is necessary.
.RE

.sp
.ne 2
.mk
.na
.B DDI_MODEL_NONE
.ad
.RS 20n
.rt
No conversion is necessary. Current thread and driver use the same data
model.
.RE

.SH CONTEXT
.sp
.LP
.B ddi_model_convert_from()
can be called from any context.
.SH EXAMPLES
.LP
.B Example 1
: Using \fBddi_model_convert_from()\fR in the \fBioctl()\fR
entry point to support both 32-bit and 64-bit applications.
.sp
.LP
The following is an example how to use
.B ddi_model_convert_from()
in
the
.B ioctl()
entry point to support both 32-bit and 64-bit
applications.

.sp
.in +2
.nf
struct passargs32 {
        int len;
        caddr32_t addr;
};

struct passargs {
        int len;
        caddr_t addr;
};
xxioctl(dev_t dev, int cmd, intptr_t arg, int mode,
    cred_t *credp, int *rvalp) {
        struct passargs pa;

        switch (ddi_model_convert_from(mode & FMODELS)) {
            case DDI_MODEL_ILP32:
            {
                struct passargs32 pa32;

                ddi_copyin(arg, &pa32, sizeof (struct passargs32), mode);
                pa.len = pa32.len;
                pa.address = pa32.address;
                break;
            }
            case DDI_MODEL_NONE:
                ddi_copyin(arg, &pa, sizeof (struct passargs), mode);
                break;
        }

        do_ioctl(&pa);
        .\|.\|.\|.
}
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR ioctl (9E),
.BR mmap (9E),
.BR ddi_mmap_get_model (9F)
.sp
.LP
.I Writing Device Drivers
