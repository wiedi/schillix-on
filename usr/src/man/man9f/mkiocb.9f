'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc., All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH mkiocb 9F "16 Jan 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
mkiocb \- allocates a STREAMS ioctl block for M_IOCTL messages in the
kernel.
.SH SYNOPSIS
.LP
.nf
#include <sys/stream.h>



\fBmblk_t *\fBmkiocb\fR(\fBuint_t\fR \fIcommand\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I command
.ad
.RS 11n
.rt
ioctl command for the
.B ioc_cmd
field.
.RE

.SH DESCRIPTION
.sp
.LP
STREAMS modules or drivers might need to issue an ioctl to a lower module
or driver. The
.B mkiocb()
function tries to allocate (using
.BR allocb (9F))
a STREAMS
.B M_IOCTL
message block (\fBiocblk\fR(9S)).
Buffer allocation fails only when the system is out of memory. If no buffer
is available, the \fBqbufcall\fR(9F) function can help a module recover from
an allocation failure.
.sp
.LP
The
.B mkiocb
function returns a
.B mblk_t
structure which is large
enough to hold any of the ioctl messages (\fBiocblk\fR(9S),
.BR copyreq (9S)
or \fBcopyresp\fR(9S)), and has the following special
properties:
.sp
.ne 2
.mk
.na
.B b_wptr
.ad
.RS 20n
.rt
Set to
.BR "b_rptr + sizeof(struct iocblk)" .
.RE

.sp
.ne 2
.mk
.na
.B b_cont
.ad
.RS 20n
.rt
Set to
.IR NULL. .
.RE

.sp
.ne 2
.mk
.na
.B b_datap->db_type
.ad
.RS 20n
.rt
Set to
.BR M_IOCTL .
.RE

.sp
.LP
The fields in the iocblk structure are initialized as follows:
.sp
.ne 2
.mk
.na
.B ioc_cmd
.ad
.RS 13n
.rt
Set to the command value passed in.
.RE

.sp
.ne 2
.mk
.na
.B ioc_id
.ad
.RS 13n
.rt
Set to a unique identifier.
.RE

.sp
.ne 2
.mk
.na
.B ioc_cr
.ad
.RS 13n
.rt
Set to point to a credential structure encoding the maximum system
privilege and which does not need to be freed in any fashion.
.RE

.sp
.ne 2
.mk
.na
.B ioc_count
.ad
.RS 13n
.rt
Set to 0.
.RE

.sp
.ne 2
.mk
.na
.B ioc_rval
.ad
.RS 13n
.rt
Set to 0.
.RE

.sp
.ne 2
.mk
.na
.B ioc_error
.ad
.RS 13n
.rt
Set to 0.
.RE

.sp
.ne 2
.mk
.na
.B ioc_flags
.ad
.RS 13n
.rt
Set to
.B IOC_NATIVE
to reflect that this is native to the running
kernel.
.RE

.SH RETURN VALUES
.sp
.LP
Upon success, the
.B mkiocb()
function returns a pointer to the
allocated
.B mblk_t
of type
.BR M_IOCTL .
.sp
.LP
On failure, it returns a null pointer.
.SH CONTEXT
.sp
.LP
The
.B mkiocb()
function can be called from user, interrupt, or kernel
context.
.SH EXAMPLES
.LP
.B Example 1 M_IOCTL
Allocation
.sp
.LP
The first example shows an
.B M_IOCTL
allocation with the ioctl command
.BR TEST_CMD .
If the
.BR iocblk "(9S) cannot be allocated,"
.I NULL
is
returned, indicating an allocation failure (line 5). In line 11, the
.BR putnext (9F)
function is used to send the message downstream.

.sp
.in +2
.nf
1  test_function(queue_t *q, test_info_t *testinfo)
 2  {
 3   mblk_t *mp;
 4
 5   if ((mp = mkiocb(TEST_CMD)) == NULL)
 6       return (0);
 7
 8       /* save off ioctl ID value */
 9       testinfo->xx_iocid = ((struct iocblk *)mp->b_rptr)->ioc_id;
10
11       putnext(q, mp);       /* send message downstream */
12       return (1);
13  }
.fi
.in -2

.LP
.B Example 2
The ioctl
.B ID
Value
.sp
.LP
During the read service routine, the ioctl
.B ID
value for
.B M_IOCACK
or
.B M_IOCNAK
should equal the ioctl that was previously
sent by this module before processing.

.sp
.in +2
.nf

 1  test_lrsrv(queue_t *q)
 2  {
 3      ...
 4
 5      switch (DB_TYPE(mp)) {
 6      case M_IOCACK:
 7      case M_IOCNAK:
 8          /* Does this match the ioctl that this module sent */
 9          ioc = (struct iocblk*)mp->b_rptr;
10          if (ioc->ioc_id == testinfo->xx_iocid) {
11              /* matches, so process the message */
12              ...
13              freemsg(mp);
14          }
15          break;
16      }
17      ...
18  }
.fi
.in -2

.LP
.B Example 3
An iocblk Allocation Which Fails
.sp
.LP
The next example shows an iocblk allocation which fails. Since the open
routine is in user context, the caller may block using \fBqbufcall\fR(9F)
until memory is available.

.sp
.in +2
.nf
1  test_open(queue_t *q, dev_t devp, int oflag, int sflag,
                           cred_t *credp)
 2  {
 3       while ((mp = mkiocb(TEST_IOCTL)) == NULL) {
 4            int id;
 5
 6            id = qbufcall(q, sizeof (union ioctypes), BPRI_HI,
 7                dummy_callback, 0);
 8            /* Handle interrupts */
 9            if (!qwait_sig(q)) {
10                qunbufcall(q, id);
11                return (EINTR);
12            }
13       }
14       putnext(q, mp);
15  }
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR allocb (9F),
.BR putnext (9F),
.BR qbufcall (9F),
.BR qwait_sig (9F),
.BR copyreq (9S),
.BR copyresp (9S),
.BR iocblk (9S)
.sp
.LP
.I Writing Device Drivers
.sp
.LP
.I STREAMS Programming Guide
.SH WARNINGS
.sp
.LP
It is the module's responsibility to remember the
.B ID
value of the
.B M_IOCTL
that was allocated. This will ensure proper cleanup and
.B ID
matching when the
.B M_IOCACK
or
.B M_IOCNAK
is received.
