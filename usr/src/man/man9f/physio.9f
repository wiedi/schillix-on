'\" te
.\" Copyright (c) 1997, Sun Microsystems, Inc.,
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH physio 9F "2 Apr 1993" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
physio, minphys \- perform physical I/O
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/buf.h>
#include <sys/uio.h>



\fBint\fR \fBphysio\fR(\fBint\fR(\fI*strat\fR)(\fIstruct buf *\fR), \fBstruct buf\fR \fI*bp\fR, \fBdev_t\fR \fIdev\fR,
     \fBint\fR \fIrw\fR, \fBvoid\fR (\fI*mincnt\fR)(\fIstruct buf *\fR), \fBstruct uio\fR \fI*uio\fR);
.fi

.LP
.nf
\fBvoid\fR \fBminphys\fR(\fBstruct buf\fR \fI*bp\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.SS "\fBphysio()\fR"
.sp
.ne 2
.mk
.na
.I strat
.ad
.RS 11n
.rt
Pointer to device strategy routine.
.RE

.sp
.ne 2
.mk
.na
.I bp
.ad
.RS 11n
.rt
Pointer to a
.BR buf (9S)
structure describing the transfer. If \fIbp\fR
is set to
.I NULL
then
.B physio()
allocates one which is
automatically released upon completion.
.RE

.sp
.ne 2
.mk
.na
.I dev
.ad
.RS 11n
.rt
The device number.
.RE

.sp
.ne 2
.mk
.na
.I rw
.ad
.RS 11n
.rt
Read/write flag. This is either
.B B_READ
when reading from the device,
or
.B B_WRITE
when writing to the device.
.RE

.sp
.ne 2
.mk
.na
.I mincnt
.ad
.RS 11n
.rt
Routine which bounds the maximum transfer unit size.
.RE

.sp
.ne 2
.mk
.na
.I uio
.ad
.RS 11n
.rt
Pointer to the
.B uio
structure which describes the user
.BR I/O
request.
.RE

.SS "\fBminphys()\fR"
.sp
.ne 2
.mk
.na
.I bp
.ad
.RS 7n
.rt
Pointer to a
.B buf
structure.
.RE

.SH DESCRIPTION
.sp
.LP
.B physio()
performs unbuffered
.B I/O
operations between the device
.I dev
and the address space described in the
.B uio
structure.
.sp
.LP
Prior to the start of the transfer
.B physio()
verifies the requested
operation is valid by checking the protection of the address space specified
in the
.B uio
structure. It then locks the pages involved in the
.B I/O
transfer so they can not be paged out. The device strategy
routine,
.BR strat() ,
is then called one or more times to perform the
physical
.B I/O
operations.
.B physio()
uses
.BR biowait "(9F) to"
block until
.B strat()
has completed each transfer. Upon completion, or
detection of an error,
.B physio()
unlocks the pages and returns the
error status.
.sp
.LP
.B physio()
uses
.B mincnt()
to bound the maximum transfer unit size
to the system, or device, maximum length.
.B minphys()
is the system
.B mincnt()
routine for use with
.B physio()
operations. Drivers which
do not provide their own local
.B mincnt()
routines should call
.B physio()
with
.BR minphys() .
.sp
.LP
\fBminphys()\fR limits the value of \fIbp\fB->b_bcount\fR to a sensible
default for the capabilities of the system. Drivers that provide their own
.B mincnt()
routine should also call
.B minphys()
to make sure they do
not exceed the system limit.
.SH RETURN VALUES
.sp
.LP
.B physio()
returns:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 12n
.rt
Upon success.
.RE

.sp
.ne 2
.mk
.na
.B non-zero
.ad
.RS 12n
.rt
Upon failure.
.RE

.SH CONTEXT
.sp
.LP
.B physio()
can be called from user context only.
.SH SEE ALSO
.sp
.LP
.BR strategy (9E),
.BR biodone (9F),
.BR biowait (9F),
.BR buf (9S),
.BR uio (9S)
.sp
.LP
.I Writing Device Drivers
.SH WARNINGS
.sp
.LP
Since
.B physio()
calls
.B biowait()
to block until each buf transfer
is complete, it is the drivers responsibility to call
.BR biodone (9F)
when
the transfer is complete, or
.B physio()
will block forever.
