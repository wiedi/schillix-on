'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_segmap 9F "17 Nov 2003" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_segmap, ddi_segmap_setup \- set up a user mapping using seg_dev
.SH SYNOPSIS
.LP
.nf
#include <sys/conf.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint\fR \fBddi_segmap\fR(\fBdev_t\fR \fIdev\fR, \fBoff_t\fR \fIoffset\fR, \fBstruct as *\fIasp\fR,
     \fBcaddr_t *\fIaddrp\fR, \fBoff_t\fR \fIlen\fR, \fBuint_t\fR \fIprot\fR,
     \fBuint_t\fR \fImaxprot\fR, \fBuint_t\fR \fIflags\fR, \fBcred_t\fR \fI*credp\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_segmap_setup\fR(\fBdev_t\fR \fIdev\fR, \fBoff_t\fR \fIoffset\fR, \fBstruct as *\fIasp\fR,
     \fBcaddr_t *\fIaddrp\fR, \fBoff_t\fR \fIlen\fR, \fBuint_t\fR \fIprot\fR,
     \fBuint_t\fR \fImaxprot\fR, \fBuint_t\fR \fIflags\fR, \fBcred_t\fR \fI*credp\fR,
     \fBddi_device_acc_attr_t\fR \fI*accattrp\fR, \fBuint_t\fR \fIrnumber\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
These interfaces are obsolete. See \fBdevmap\fR(9E) for an alternative to
.BR ddi_segmap() .
Use
.BR devmap_setup (9F)
instead of
.BR ddi_segmap_setup() .
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I dev
.ad
.RS 12n
.rt
The device whose memory is to be mapped.
.RE

.sp
.ne 2
.mk
.na
.I offset
.ad
.RS 12n
.rt
The offset within device memory at which the mapping begins.
.RE

.sp
.ne 2
.mk
.na
.I asp
.ad
.RS 12n
.rt
An opaque pointer to the user address space into which the device memory
should be mapped.
.RE

.sp
.ne 2
.mk
.na
.I addrp
.ad
.RS 12n
.rt
Pointer to the starting address within the user address space to which the
device memory should be mapped.
.RE

.sp
.ne 2
.mk
.na
.I len
.ad
.RS 12n
.rt
Length (in bytes) of the memory to be mapped.
.RE

.sp
.ne 2
.mk
.na
.I prot
.ad
.RS 12n
.rt
A bit field that specifies the protections. Some combinations of possible
settings are:
.sp
.ne 2
.mk
.na
.B PROT_READ
.ad
.RS 15n
.rt
Read access is desired.
.RE

.sp
.ne 2
.mk
.na
.B PROT_WRITE
.ad
.RS 15n
.rt
Write access is desired.
.RE

.sp
.ne 2
.mk
.na
.B PROT_EXEC
.ad
.RS 15n
.rt
Execute access is desired.
.RE

.sp
.ne 2
.mk
.na
.B PROT_USER
.ad
.RS 15n
.rt
User-level access is desired (the mapping is being done as a result of a
.BR mmap (2)
system call).
.RE

.sp
.ne 2
.mk
.na
.B PROT_ALL
.ad
.RS 15n
.rt
All access is desired.
.RE

.RE

.sp
.ne 2
.mk
.na
.I maxprot
.ad
.RS 12n
.rt
Maximum protection flag possible for attempted mapping (the
.B PROT_WRITE
bit may be masked out if the user opened the special file
read-only). If
.B "(maxprot & prot) != prot"
then there is an access
violation.
.RE

.sp
.ne 2
.mk
.na
.I flags
.ad
.RS 12n
.rt
Flags indicating type of mapping. Possible values are (other bits may be
set):
.sp
.ne 2
.mk
.na
.B MAP_PRIVATE
.ad
.RS 16n
.rt
Changes are private.
.RE

.sp
.ne 2
.mk
.na
.B MAP_SHARED
.ad
.RS 16n
.rt
Changes should be shared.
.RE

.sp
.ne 2
.mk
.na
.B MAP_FIXED
.ad
.RS 16n
.rt
The user specified an address in
.I *addrp
rather than letting the
system pick and address.
.RE

.RE

.sp
.ne 2
.mk
.na
.I credp
.ad
.RS 12n
.rt
Pointer to user credential structure.
.RE

.SS "ddi_segmap_setup(\|)"
.sp
.ne 2
.mk
.na
.I dev_acc_attr
.ad
.RS 17n
.rt
Pointer to a
.BR ddi_device_acc_attr "(9S) structure which contains the"
device access attributes to apply to this mapping.
.RE

.sp
.ne 2
.mk
.na
.I rnumber
.ad
.RS 17n
.rt
Index number to the register address space set.
.RE

.SH DESCRIPTION
.sp
.LP
Future releases of Solaris will provide this function for binary and
source compatibility.  However, for increased functionality, use
.BR ddi_devmap_segmap (9F)
instead.  See
.BR ddi_devmap_segmap (9F)
for
details.
.sp
.LP
\fBddi_segmap\fR(\|) and \fBddi_segmap_setup()\fR set up user mappings to
device space. When setting up the mapping, the
.BR ddi_segmap (\|)
and
.B ddi_segmap_setup()
routines call the
.BR mmap "(9E) entry point to"
validate the range to be mapped.  When a user process accesses the mapping,
the drivers
.BR mmap "(9E) entry point is again called to retrieve the page"
frame number that needs to be loaded.  The mapping translations for that
page are then loaded on behalf of the driver by the DDI framework.
.sp
.LP
.B ddi_segmap()
is typically used as the
.BR segmap "(9E) entry in the"
.BR cb_ops (9S)
structure for those devices that do not choose to provide
their own
.BR segmap "(9E) entry point. However, some drivers may have"
their own
.BR segmap "(9E) entry point to do some initial processing on the"
parameters and then call
.B ddi_segmap()
to establish the default memory
mapping.
.sp
.LP
.B ddi_segmap_setup()
is used in the drivers
.BR segmap "(9E) entry"
point to set up the mapping and assign device access attributes to that
mapping.
.I rnumber
specifies the register  set representing the range of
device memory being mapped. See  \fBddi_device_acc_attr\fR(9S) for details
regarding what device access attributes are available.
.sp
.LP
.B ddi_segmap_setup()
cannot be used directly in the
.BR cb_ops (9S)
structure and requires a driver to have a
.BR segmap "(9E) entry point."
.SH RETURN VALUES
.sp
.LP
.B ddi_segmap()
and
.B ddi_segmap_setup()
return the following
values:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 12n
.rt
Successful completion.
.RE

.sp
.ne 2
.mk
.na
.B Non-zero
.ad
.RS 12n
.rt
An error occurred. In particular, they return
.B ENXIO
if the range to
be mapped is invalid.
.RE

.SH CONTEXT
.sp
.LP
.B ddi_segmap()
and
.B ddi_segmap_setup()
can be called from user or
kernel context only.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
\fBATTRIBUTE TYPE\fR\fBATTRIBUTE VALUE\fR
_
Stability LevelObsolete
.TE

.SH SEE ALSO
.sp
.LP
.BR mmap (2),
.BR attributes (5),
.BR devmap (9E),
.BR mmap (9E),
.BR segmap (9E),
.BR devmap_setup (9F),
.BR cb_ops (9S),
.BR ddi_device_acc_attr (9S)
.sp
.LP
.I Writing Device Drivers
