'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_dma_getwin 9F "15 Nov 1996" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_dma_getwin \- activate a new DMA window
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi.h>
#include <sys/sunddi.h>



\fBint\fR \fBddi_dma_getwin\fR(\fBddi_dma_handle_t\fR \fIhandle\fR, \fBuint_t\fR \fIwin\fR,
     \fBoff_t *\fIoffp\fR, \fBsize_t *\fIlenp\fR, \fBddi_dma_cookie_t\fR \fI*cookiep\fR,
     \fBuint_t *\fIccountp\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I handle
.ad
.RS 12n
.rt
The
.B DMA
handle previously allocated by a call to
.BR ddi_dma_alloc_handle (9F).
.RE

.sp
.ne 2
.mk
.na
.I win
.ad
.RS 12n
.rt
Number of the window to activate.
.RE

.sp
.ne 2
.mk
.na
.I offp
.ad
.RS 12n
.rt
Pointer to an offset.  Upon a successful return,
.I offp
will contain
the new offset indicating the  beginning of the window within the object.
.RE

.sp
.ne 2
.mk
.na
.I lenp
.ad
.RS 12n
.rt
Upon a successful return,
.I lenp
will contain the size, in bytes, of
the current window.
.RE

.sp
.ne 2
.mk
.na
.I cookiep
.ad
.RS 12n
.rt
A pointer to the first
.BR ddi_dma_cookie "(9S) structure."
.RE

.sp
.ne 2
.mk
.na
.I ccountp
.ad
.RS 12n
.rt
Upon a successful return,
.I ccountp
will contain the number of cookies
for this
.B DMA
window.
.RE

.SH DESCRIPTION
.sp
.LP
.B ddi_dma_getwin()
activates a new
.B DMA
window. If a  \fBDMA\fR
resource allocation request returns
.B DDI_DMA_PARTIAL_MAP
indicating
that resources for less than the entire object were allocated, the current
.B DMA
window can be changed by a call to
.BR ddi_dma_getwin() .
.sp
.LP
The caller must first determine the number of
.B DMA
windows,
.IR N ,
using \fBddi_dma_numwin\fR(9F). \fBddi_dma_getwin()\fR takes a  \fBDMA\fR
window number from the range
.I [0..N-1]
as the parameter
.I win
and
makes it the current
.B DMA
window.
.sp
.LP
.B ddi_dma_getwin()
fills in the first
.B DMA
cookie pointed to by
.I cookiep
with the appropriate address, length, and bus type.
\fB*\fIccountp\fR is set to the number of \fBDMA\fR cookies representing
this
.B DMA
object. Subsequent
.B DMA
cookies must be retrieved using
.BR ddi_dma_nextcookie (9F).
.sp
.LP
.B ddi_dma_getwin()
takes care of underlying resource synchronizations
required to shift the window. However accessing the data prior to or after
moving the window requires further synchronization steps using
.BR ddi_dma_sync (9F).
.sp
.LP
.B ddi_dma_getwin()
is normally called from an interrupt routine. The
first invocation of the
.B DMA
engine is done from the driver. All
subsequent invocations of the
.B DMA
engine are done from the interrupt
routine. The interrupt routine checks to see if the request has been
completed. If it has, the interrupt routine returns without invoking another
.B DMA
transfer. Otherwise, it calls
.B ddi_dma_getwin()
to shift the
current window and start another
.B DMA
transfer.
.SH RETURN VALUES
.sp
.LP
.B ddi_dma_getwin()
returns:
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 16n
.rt
Resources for the specified
.B DMA
window are allocated.
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 16n
.rt
.I win
is not a valid window index.
.RE

.SH CONTEXT
.sp
.LP
.B ddi_dma_getwin()
can be called from user, kernel, or interrupt
context.
.SH SEE ALSO
.sp
.LP
.BR ddi_dma_addr_bind_handle (9F),
.BR ddi_dma_alloc_handle (9F),
.BR ddi_dma_buf_bind_handle (9F),
.BR ddi_dma_nextcookie (9F),
.BR ddi_dma_numwin (9F),
.BR ddi_dma_sync (9F),
.BR ddi_dma_unbind_handle (9F),
.BR ddi_dma_cookie (9S)
.sp
.LP
.I Writing Device Drivers
