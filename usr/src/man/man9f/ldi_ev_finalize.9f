'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc., All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ldi_ev_finalize 9F "21 Aug 2007" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ldi_ev_finalize \- propagate disposition of a state change event
.SH SYNOPSIS
.LP
.nf
#include <sys/sunldi.h>

\fBvoid\fR \fBldi_ev_finalize\fR(\fIdev_info_t *dip\fR, \fIminor_t minor\fR, \fIint spec_type\fR,
     \fIint ldi_result\fR, \fIldi_ev_cookie_t cookie\fR, \fIvoid *ev_data\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI)
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I dev_info_t *dip
.ad
.sp .6
.RS 4n
The
.B devinfo
node of the layered consumer exporting the minor device.
.RE

.sp
.ne 2
.mk
.na
.I minor_t minor
.ad
.sp .6
.RS 4n
The minor number of the exported minor device.
.RE

.sp
.ne 2
.mk
.na
.I int spec_type
.ad
.sp .6
.RS 4n
The type of minor device (\fBS_IFCHR\fR or
.BR S_IFBLK ).
.RE

.sp
.ne 2
.mk
.na
.I int ldi_result
.ad
.sp .6
.RS 4n
The final disposition of the state change.
.RE

.sp
.ne 2
.mk
.na
.I ldi_ev_cookie_t cookie
.ad
.sp .6
.RS 4n
An opaque event cookie for the event type returned by a previous call to
.BR ldi_ev_get_cookie (9F).
.RE

.sp
.ne 2
.mk
.na
.I void *ev_data
.ad
.sp .6
.RS 4n
Event specific data.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B ldi_ev_finalize()
function propagates the final disposition of an
event up the software stack. It may result in two actions:
.RS +4
.TP
.ie t \(bu
.el o
Invocation of "finalize" \fBLDI\fR callback handlers registered by layered
drivers up the software stack.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Device contract "negotiation end" (\fBCT_EV_NEGEND\fR) events generated on
minors exported to
.BR userland .
.RE
.sp
.LP
The event propagated up the software stack may be different than the event
received by the layered driver invoking
.BR ldi_ev_finalize() .
For example,
a volume manager may receive an "offline" event on one of it's \fBLDI\fR
opened disks, but may choose to propagate a "degraded" event on minors it
exports to
.B userland
(since  it  may have more than one copy of the
data). The event cookie argument to \fBldi_ev_notify\fR(9F) may be different
from the event cookie currently possessed by the layered driver. If that is
the case, the layered driver must generate another event cookie via a new
.BR ldi_ev_get_cookie (9F)
call.
.SH RETURN VALUES
.sp
.LP
None.
.SH CONTEXT
.sp
.LP
This function can be called from user and kernel contexts only.
.SH EXAMPLES
.LP
.B Example 1
Invoking ldi_ev_finalize(9F) from widget's finalize
callback
.sp
.LP
The following example shows how the
.B ldi_ev_finalize()
function is
invoked from a widget's finalize callback:

.sp
.in +2
.nf
static void
widget_finalize(ldi_handle_t lh, ldi_ev_cookie_t foo_cookie,
    int ldi_result, void *arg, void *ev_data)

{
         ASSERT(strcmp(ldi_ev_get_type(foo_cookie), LDI_EV_FOO) == 0);

         /* Map imported minor to exported minors */
         widget_map(lh, &minor, &spec_type);

         if (ldi_result == LDI_EV_SUCCESS) {
                 ldi_ev_finalize(dip, minor, spec_type,
                     LDI_EV_SUCCESS, foo_cookie, ev_data);
          }

          /*
           * The event foo failed. Reconfigure yourself
           * *before* propagating
           */
          widget_reconfigure(lh, LDI_EV_FOO, REACQUIRE);

          ldi_ev_finalize(dip, minor, spec_type, LDI_EV_FAILURE,
              foo_cookie, ev_data);
}
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR ldi_ev_get_cookie (9F),
.BR ldi_ev_register_callbacks (9F),
.BR ldi_ev_remove_callbacks (9F)
