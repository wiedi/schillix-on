'\" te
.\" Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ddi_dmae 9F "04 Apr 2006" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_dmae, ddi_dmae_alloc, ddi_dmae_release, ddi_dmae_prog, ddi_dmae_disable,
ddi_dmae_enable, ddi_dmae_stop, ddi_dmae_getcnt, ddi_dmae_1stparty,
ddi_dmae_getlim, ddi_dmae_getattr \- system DMA engine functions
.SH SYNOPSIS
.LP
.nf
\fBint\fR \fBddi_dmae_alloc\fR(\fBdev_info_t *\fIdip\fR, \fBint\fR \fIchnl\fR, \fBint (*\fIcallback\fR) (caddr_t),
     \fBcaddr_t\fR \fIarg\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_dmae_release\fR(\fBdev_info_t *\fIdip\fR, \fBint\fR \fIchnl\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_dmae_prog\fR(\fBdev_info_t *\fIdip\fR, \fBstruct ddi_dmae_req *\fIdmaereqp\fR,
     \fBddi_dma_cookie_t *\fIcookiep\fR, \fBint\fR \fIchnl\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_dmae_disable\fR(\fBdev_info_t *\fIdip\fR, \fBint\fR \fIchnl\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_dmae_enable\fR(\fBdev_info_t *\fIdip\fR, \fBint\fR \fIchnl\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_dmae_stop\fR(\fBdev_info_t *\fIdip\fR, \fBint\fR \fIchnl\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_dmae_getcnt\fR(\fBdev_info_t *\fIdip\fR, \fBint\fR \fIchnl\fR, \fBint *\fIcountp\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_dmae_1stparty\fR(\fBdev_info_t *\fIdip\fR, \fBint\fR \fIchnl\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_dmae_getlim\fR(\fBdev_info_t *\fIdip\fR, \fBddi_dma_lim_t *\fIlimitsp\fR);
.fi

.LP
.nf
\fBint\fR \fBddi_dmae_getattr\fR(\fBdev_info_t *\fIdip\fR, \fBddi_dma_attr_t *\fIattrp\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI). The
.B ddi_dmae_getlim()
interface,
described below, is obsolete. Use
.BR ddi_dmae_getattr() ,
also described
below, to replace it.
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I dip
.ad
.RS 12n
.rt
A \fBdev_info\fR pointer that identifies the device.
.RE

.sp
.ne 2
.mk
.na
.I chnl
.ad
.RS 12n
.rt
A
.B DMA
channel number. On
.B ISA
buses this number must be
.BR 0 ,
.BR 1 ,
.BR 2 ,
.BR 3 ,
.BR 5 ,
.BR 6 ,
or
.BR 7 .
.RE

.sp
.ne 2
.mk
.na
.I callback
.ad
.RS 12n
.rt
The address of a function to call back later if resources are not currently
available. The following special function addresses may also be used:
.sp
.ne 2
.mk
.na
.B DDI_DMA_SLEEP
.ad
.RS 20n
.rt
Wait until resources are available.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_DONTWAIT
.ad
.RS 20n
.rt
Do not wait until resources are available and do not schedule a callback.
.RE

.RE

.sp
.ne 2
.mk
.na
.I arg
.ad
.RS 12n
.rt
Argument to be passed to the callback function, if specified.
.RE

.sp
.ne 2
.mk
.na
.I dmaereqp
.ad
.RS 12n
.rt
A pointer to a
.B DMA
engine request structure. See
.BR ddi_dmae_req (9S).
.RE

.sp
.ne 2
.mk
.na
.I cookiep
.ad
.RS 12n
.rt
A pointer to a \fBddi_dma_cookie\fR(9S) object, obtained from
.BR ddi_dma_segtocookie (9F),
which contains the address and count.
.RE

.sp
.ne 2
.mk
.na
.I countp
.ad
.RS 12n
.rt
A pointer to an integer that will receive the count of the number of bytes
not yet transferred upon completion of a
.B DMA
operation.
.RE

.sp
.ne 2
.mk
.na
.I limitsp
.ad
.RS 12n
.rt
A pointer to a
.B DMA
limit structure. See \fBddi_dma_lim_x86\fR(9S).
.RE

.sp
.ne 2
.mk
.na
.I attrp
.ad
.RS 12n
.rt
A pointer to a
.B DMA
attribute structure. See \fBddi_dma_attr\fR(9S).
.RE

.SH DESCRIPTION
.sp
.LP
There are three possible ways that a device can perform
.B DMA
engine
functions:
.sp
.ne 2
.mk
.na
.B Bus master DMA
.ad
.RS 19n
.rt
If the device is capable of acting as a true bus master, then the driver
should program the device's
.B DMA
registers directly and not make use of
the
.B DMA
engine functions described here. The driver should obtain the
\fBDMA\fR address and count from \fBddi_dma_segtocookie\fR(9F). See
.BR ddi_dma_cookie (9S)
for a description of a
.B DMA
cookie.
.RE

.sp
.ne 2
.mk
.na
\fBThird-party \fBDMA\fR
.ad
.RS 19n
.rt
This method uses the system
.B DMA
engine that is resident on the main
.RB "system board. In this model, the device cooperates with the system's" " DMA"
engine to effect the data transfers between the device and memory. The driver
uses the functions documented here, except
.BR ddi_dmae_1stparty() ,
to
initialize and program the
.B DMA
engine. For each
.B DMA
data transfer,
the driver programs the
.B DMA
engine and then gives the device  a command
to initiate the transfer in cooperation with that engine.
.RE

.sp
.ne 2
.mk
.na
.B First-party DMA
.ad
.RS 19n
.rt
Using this method, the device uses its own
.B DMA
bus cycles, but requires
a channel from the system's
.B DMA
engine. After allocating the \fBDMA\fR
channel, the
.B ddi_dmae_1stparty()
function may be used to perform
whatever configuration is necessary to enable this mode.
.RE

.SS "\fBddi_dmae_alloc()\fR"
.sp
.LP
The
.B ddi_dmae_alloc()
function is used to acquire a
.B DMA
channel of
the system
.B DMA
engine.
.B ddi_dmae_alloc()
allows only one device at
a time to have a particular
.B DMA
channel allocated. It must be called
prior to any other system
.B DMA
engine function on a channel. If the
device allows the channel to be shared with other devices, it must be freed
using
.B ddi_dmae_release()
after completion of the
.B DMA
operation. In
any case, the channel must be released before the driver successfully
detaches. See \fBdetach\fR(9E). No other driver may acquire the \fBDMA\fR
channel until it is released.
.sp
.LP
If the requested channel is not immediately available, the value of
\fIcallback\fR determines what action will be taken. If the value of
\fIcallback\fR is
.BR DDI_DMA_DONTWAIT ,
\fBddi_dmae_alloc()\fR will return
immediately. The value
.B DDI_DMA_SLEEP
will cause the thread to sleep and
not return until the channel has been acquired. Any other value is assumed to
be a callback function address. In that case,
.B ddi_dmae_alloc()
returns
immediately, and when resources might have become available, the callback
function is called (with the argument
.IR arg )
from interrupt context. When
the callback function is called, it should attempt to allocate the \fBDMA\fR
channel again. If it succeeds or no longer needs the channel, it must return
the value
.BR DDI_DMA_CALLBACK_DONE .
If it tries to allocate the channel but
fails to do so, it must return the value
.BR DDI_DMA_CALLBACK_RUNOUT .
In
this case, the callback function is put back on a list to be called again
later.
.SS "\fBddi_dmae_prog()\fR"
.sp
.LP
The
.B ddi_dmae_prog()
function programs the
.B DMA
channel for a
\fBDMA\fR transfer. The \fBddi_dmae_req\fR structure contains all the
information necessary to set up the channel, except for the memory address and
count. Once the channel has been programmed, subsequent calls to
\fBddi_dmae_prog()\fR may specify a value of \fINULL\fR for \fIdmaereqp\fR if
no changes to the programming are required other than the address and count
values. It disables the channel prior to setup, and enables the channel before
returning. The
.B DMA
address and count are specified by passing
\fBddi_dmae_prog()\fR a cookie obtained from \fBddi_dma_segtocookie\fR(9F).
Other
.B DMA
engine parameters are specified by the
.B DMA
engine
request structure passed in through
.IR dmaereqp .
The fields of that
structure are documented in
.BR ddi_dmae_req (9S).
.sp
.LP
Before using
.BR ddi_dmae_prog() ,
you must allocate system
.BR DMA
resources using
.B DMA
setup functions such as \fBddi_dma_buf_setup\fR(9F).
.BR ddi_dma_segtocookie (9F)
can then be used to retrieve a cookie which
contains the address and count. Then this cookie is passed to
.BR ddi_dmae_prog() .
.SS "\fBddi_dmae_disable()\fR"
.sp
.LP
The
.B ddi_dmae_disable()
function disables the
.B DMA
channel so that
it no longer responds to a device's
.B DMA
service requests.
.SS "\fBddi_dmae_enable()\fR"
.sp
.LP
The
.B ddi_dmae_enable()
function enables the
.B DMA
channel for
operation. This may be used to re-enable the channel after a call to
.BR ddi_dmae_disable() .
The channel is automatically enabled after
successful programming by
.BR ddi_dmae_prog() .
.SS "\fBddi_dmae_stop()\fR"
.sp
.LP
The
.B ddi_dmae_stop()
function disables the channel and terminates any
active operation.
.SS "\fBddi_dmae_getcnt()\fR"
.sp
.LP
The
.B ddi_dmae_getcnt()
function examines the count register of the
\fBDMA\fR channel and sets \fI*countp\fR to the number of bytes remaining to
be transferred.  The channel is assumed to be stopped.
.SS "\fBddi_dmae_1stparty()\fR"
.sp
.LP
In the case of
.B ISA
buses,
.B ddi_dmae_1stparty()
configures a
channel in the system's
.B DMA
engine to operate in a ``slave''
(``cascade'') mode.
.sp
.LP
When operating in
.B ddi_dmae_1stparty()
mode, the
.B DMA
channel must
first be allocated using
.B ddi_dmae_alloc()
and then configured using
.BR ddi_dmae_1stparty() .
The driver then programs the device to perform the
I/O, including the necessary
.B DMA
address and count values obtained from
.BR ddi_dma_segtocookie (9F).
.SS "\fBddi_dmae_getlim()\fR"
.sp
.LP
This function is obsolete. Use
.BR ddi_dmae_getattr() ,
described below,
instead.
.sp
.LP
The
.B ddi_dmae_getlim()
function fills in the
.B DMA
limit structure,
pointed to by
.IR limitsp ,
with the
.B DMA
limits of the system
.BR DMA
engine. Drivers for devices that perform their own bus mastering or use
first-party
.B DMA
must create and initialize their own
.B DMA
limit
structures; they should not use
.BR ddi_dmae_getlim() .
The
.B DMA
limit
structure must be passed to the
.B DMA
setup routines so that they will
know how to break the
.B DMA
request into windows and segments (see
.BR ddi_dma_nextseg (9F)
and \fBddi_dma_nextwin\fR(9F)). If the device has
any particular restrictions on transfer size or granularity (such as the size
of disk sector), the driver should further restrict the values in the
structure members before passing them to the
.B DMA
setup routines. The
driver must not relax any of the restrictions embodied in the structure after
it is filled in by
.BR ddi_dmae_getlim() .
After calling
.BR ddi_dmae_getlim() ,
a driver must examine, and possibly set, the size of
the
.B DMA
.RB "engine's scatter/gather list to determine whether" " DMA"
chaining will be used. See
.BR ddi_dma_lim_x86 (9S)
and
.BR ddi_dmae_req (9S)
for additional information on scatter/gather DMA.
.SS "\fBddi_dmae_getattr()\fR"
.sp
.LP
The
.B ddi_dmae_getattr()
function fills in the
.B DMA
attribute
structure, pointed to by
.IR attrp ,
with the
.B DMA
attributes of the
system
.B DMA
engine. Drivers for devices that perform their own bus
mastering or use first-party
.B DMA
must create and initialize their own
\fBDMA\fR attribute structures; they should not use \fBddi_dmae_getattr()\fR.
The
.B DMA
attribute structure must be passed to the
.B DMA
resource
allocation functions to provide the information necessary to break the
\fBDMA\fR request into \fBDMA\fR windows and \fBDMA\fR cookies. See
.BR ddi_dma_nextcookie (9F)
and
.BR ddi_dma_getwin (9F).
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 23n
.rt
Upon success, for all of these routines.
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 23n
.rt
May be returned due to invalid arguments.
.RE

.sp
.ne 2
.mk
.na
.B DDI_DMA_NORESOURCES
.ad
.RS 23n
.rt
May be returned by
.B ddi_dmae_alloc()
if the requested resources are not
available and the value of \fIdmae_waitfp\fR is not \fBDDI_DMA_SLEEP\fR.
.RE

.SH CONTEXT
.sp
.LP
If
.B ddi_dmae_alloc()
is called from interrupt context, then its
\fIdmae_waitfp\fR argument and the callback function must not have the value
.BR DDI_DMA_SLEEP .
Otherwise, all these routines can be called from user,
interrupt, or kernel context.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Architecturex86
.TE

.SH SEE ALSO
.sp
.LP
.BR isa (4),
.BR attributes (5),
.BR ddi_dma_buf_setup (9F),
.BR ddi_dma_getwin (9F),
.BR ddi_dma_nextcookie (9F),
.BR ddi_dma_nextseg (9F),
.BR ddi_dma_nextwin (9F),
.BR ddi_dma_segtocookie (9F),
.BR ddi_dma_setup (9F),
.BR ddi_dma_attr (9S),
.BR ddi_dma_cookie (9S),
.BR ddi_dma_lim_x86 (9S),
.BR ddi_dma_req (9S),
.BR ddi_dmae_req (9S)
