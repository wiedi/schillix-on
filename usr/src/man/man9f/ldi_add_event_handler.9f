'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.,  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ldi_add_event_handler 9F "21 Aug 2007" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ldi_add_event_handler \- add NDI event service callback handler
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi_obsolete.h>

\fBint\fR \fBldi_add_event_handler\fR(\fBldi_handle_t\fR \fIlh\fR, \fIddi_eventcookie_t ec\fR,
     \fBvoid (*handler)(\fIldi_handle_t\fR, \fIddi_eventcookie_t\fR,
     \fBvoid *, void *) void *arg,\fR \fIldi_callback_id_t *id\fR);
.fi

.SH INTERFACE LEVEL
.sp
.LP
Obsolete
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I ldi_handle_t lh
.ad
.sp .6
.RS 4n
Layered handle representing event notification device.
.RE

.sp
.ne 2
.mk
.na
.I ddi_eventcookie_t ec
.ad
.sp .6
.RS 4n
Cookie returned from call to
.BR ldi_get_eventcookie (9F).
.RE

.sp
.ne 2
.mk
.na
\fIvoid (*handler)(ldi_handle_t, ddi_eventcookie_t, void *, void
*)\fR
.ad
.sp .6
.RS 4n
Callback handler for NDI event service notification.
.RE

.sp
.ne 2
.mk
.na
.I void *arg
.ad
.sp .6
.RS 4n
Pointer to opaque data supplied by caller. Typically, this is a pointer to
the layered driver's softstate structure.
.RE

.sp
.ne 2
.mk
.na
.I ldi_callback_id_t *id
.ad
.sp .6
.RS 4n
Pointer to registration id, where a unique registration id is returned.
Registration id must be saved and used when calling
.BR ldi_remove_event_handler (9F)
to unregister a callback handler.
.RE

.SH DESCRIPTION
.sp
.LP
This function is obsolete and is only maintained for compatibility. Use of
this function is strongly discouraged. For equivalent functionality provided
by new interfaces, see
.BR ldi_ev_get_cookie (9F)
and
.BR ldi_ev_register_callbacks (9F).
.sp
.LP
The
.B ldi_add_event_handler()
function adds a callback handler to be
invoked at the occurance of the event specified by the cookie. Adding a
callback handler is also known as subscribing to an event. Upon successful
subscription, the handler is invoked when the event occurs. You can
unregister the handler by using
.BR ldi_remove_event_handler (9F).
.sp
.LP
An instance of a layered driver can register multiple handlers for an event
or a single handler for multiple events. Callback order is not defined and
should be assumed to be random.
.sp
.LP
The routine handler is invoked with the following arguments:
.sp
.ne 2
.mk
.na
\fBldi_handle_t\fR \fIlh\fR
.ad
.RS 24n
.rt
Layered handle representing the device for which the event notification is
requested.
.RE

.sp
.ne 2
.mk
.na
\fBddi_eventcookie_t\fR \fIec\fR
.ad
.RS 24n
.rt
Structure describing event that occurred.
.RE

.sp
.ne 2
.mk
.na
.BI "void *" arg
.ad
.RS 24n
.rt
Opaque data pointer provided by the driver during callback registration.
.RE

.sp
.ne 2
.mk
.na
.BI "void *" impl_data
.ad
.RS 24n
.rt
Pointer to event specific data defined by the framework that invokes the
callback function.
.RE

.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B DDI_SUCCESS
.ad
.RS 15n
.rt
Callback handler registered successfully.
.RE

.sp
.ne 2
.mk
.na
.B DDI_FAILURE
.ad
.RS 15n
.rt
Failed to register callback handler. Possible reasons include lack of
resources or a bad cookie.
.RE

.SH CONTEXT
.sp
.LP
The
.B ldi_add_event_handler()
function can be called from user and
kernel contexts only.
.SH SEE ALSO
.sp
.LP
.BR ldi_ev_get_cookie (9F),
.BR ldi_ev_register_callbacks (9F),
.BR ldi_get_eventcookie (9F),
.BR ldi_remove_event_handler (9F)
.sp
.LP
.I Writing Device Drivers
.SH NOTES
.sp
.LP
Layered drivers must remove all registered callback handlers for a device
instance, represented by the layered handle, by calling
.BR ldi_remove_event_handler (9F)
before the layered driver's
\fBdetach(9E)\fR routine completes.
