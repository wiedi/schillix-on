'\" te
.\" Copyright (c) 1983, Regents of the University of California.  All rights reserved.
.\" The Berkeley software License Agreement  specifies the terms and conditions for redistribution.
.\" Copyright 1989 AT&T.
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.TH getservbyname 3SOCKET "31 Jan 2007" "SunOS 5.11" "Sockets Library Functions"
.SH NAME
getservbyname, getservbyname_r, getservbyport, getservbyport_r, getservent,
getservent_r, setservent, endservent \- get service entry
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lsocket\fR \fB -lnsl \fR [ \fIlibrary\fR .\|.\|. ]
#include <netdb.h>

\fBstruct servent *\fBgetservbyname\fR(\fBconst char *\fIname\fR, \fBconst char *\fIproto\fR);
.fi

.LP
.nf
\fBstruct servent *\fBgetservbyname_r\fR(\fBconst char *\fIname\fR, \fBconst char *\fIproto\fR,
     \fBstruct servent *\fIresult\fR, \fBchar *\fIbuffer\fR, \fBint\fR \fIbuflen\fR);
.fi

.LP
.nf
\fBstruct servent *\fBgetservbyport\fR(\fBint\fR \fIport\fR, \fBconst char *\fIproto\fR);
.fi

.LP
.nf
\fBstruct servent *\fBgetservbyport_r\fR(\fBint\fR \fIport\fR, \fBconst char *\fIproto\fR,
     \fBstruct servent *\fIresult\fR, \fBchar *\fIbuffer\fR, \fBint\fR \fIbuflen\fR);
.fi

.LP
.nf
\fBstruct servent *\fBgetservent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBstruct servent *\fBgetservent_r\fR(\fBstruct servent *\fIresult\fR, \fBchar *\fIbuffer\fR,
     \fBint\fR \fIbuflen\fR);
.fi

.LP
.nf
\fBint\fR \fBsetservent\fR(\fBint\fR \fIstayopen\fR);
.fi

.LP
.nf
\fBint\fR \fBendservent\fR(\fBvoid\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions are used to obtain entries for Internet services.  An entry
may come from any of the sources for
.B services
specified in the
.B /etc/nsswitch.conf
file. See \fBnsswitch.conf\fR(4).
.sp
.LP
The
.B getservbyname()
and
.B getservbyport()
functions sequentially
search from the  beginning of the file until a matching protocol name or
port number is found, or until end-of-file  is encountered.  If a protocol
name is also supplied (non-null), searches must also match the protocol.
.sp
.LP
The
.B getservbyname()
function searches for an entry with the Internet
service name specified by the
.I name
parameter.
.sp
.LP
The
.B getservbyport()
function searches for an entry with the Internet
port number
.IR port .
.sp
.LP
All addresses are returned in network order. In order to  interpret the
addresses, \fBbyteorder\fR(3SOCKET) must be used for byte order conversion.
The string
.I proto
is used by both
.B getservbyname()
and
.B getservbyport()
to restrict the search to entries with the specified
protocol. If
.I proto
is
.IR NULL ,
entries with any protocol can be
returned.
.sp
.LP
The functions
.BR setservent() ,
.BR getservent() ,
and
.B endservent()
are used to enumerate entries from the services
database.
.sp
.LP
The
.B setservent()
function sets (or resets) the enumeration to the
beginning of the set of service entries. This function should be called
before the first call to
.BR getservent() .
Calls to the functions
.B getservbyname()
and
.B getservbyport()
leave the enumeration
position in an indeterminate state.   If the
.I stayopen
flag is
non-zero, the system may keep allocated resources such as open file
descriptors until a subsequent call to
.BR endservent() .
.sp
.LP
The
.B getservent()
function reads the next line of the file, opening
the file if necessary.
.B getservent()
opens and rewinds the file. If
the
.I stayopen
flag is non-zero, the net data base will not be closed
after each call to
.B getservent()
(either directly, or indirectly
through one of the other "getserv"calls).
.sp
.LP
Successive calls to
.B getservent()
return either successive entries or
.IR NULL ,
indicating the end of the enumeration.
.sp
.LP
The
.B endservent()
function closes the file. The \fBendservent()\fR
function can be called to indicate that the caller expects to do no further
service entry retrieval operations; the system can then deallocate resources
it was using.  It is still allowed, but possibly less efficient, for the
process to call more service entry retrieval functions after calling
.BR endservent() .
.SS "Reentrant Interfaces"
.sp
.LP
The functions
.BR getservbyname() ,
.BR getservbyport() ,
and
.B getservent()
use static storage that is re-used in each call, making
these functions unsafe for use in multithreaded applications.
.sp
.LP
The functions
.BR getservbyname_r() ,
.BR getservbyport_r() ,
and
.B getservent_r()
provide reentrant interfaces for these operations.
.sp
.LP
Each reentrant interface performs the same operation as its non-reentrant
counterpart, named by removing the  "\fB_r\fR" suffix.  The reentrant
interfaces, however, use buffers supplied by the caller to store returned
results, and  are safe for use in both single-threaded and multithreaded
applications.
.sp
.LP
Each reentrant interface takes the same parameters as its non-reentrant
counterpart, as well as the following additional parameters. The parameter
.I result
must be a pointer to a
.B "struct servent"
structure allocated
by the caller.  On successful completion, the function returns the service
entry in this structure. The parameter
.I buffer
must be a pointer to a
buffer supplied by the caller.  This buffer is used as storage space for the
service entry data.  All of the pointers within the returned \fBstruct
servent\fR \fIresult\fR point to data stored within this buffer.  See the
RETURN VALUES section of this manual page. The buffer must be large enough
to hold all of the data associated with the service entry. The parameter
.I buflen
should give the size in bytes of the buffer indicated by
.IR buffer .
.sp
.LP
For enumeration in multithreaded applications, the position within the
enumeration is a process-wide property shared by all threads. The
.B setservent()
function can be used in a multithreaded application but
resets the enumeration position for all threads.  If multiple threads
interleave calls to
.BR getservent_r() ,
the threads will enumerate
disjoint subsets of the service database.
.sp
.LP
Like their non-reentrant counterparts,
.B getservbyname_r()
and
.B getservbyport_r()
leave the enumeration position in an indeterminate
state.
.SH RETURN VALUES
.sp
.LP
Service entries are represented by the
.B "struct servent"
structure
defined in <\fBnetdb.h\fR>:
.sp
.in +2
.nf
struct  servent {
    char	*s_name;		      /* official name of service */
    char	**s_aliases;		   /* alias list */
    int	s_port;			   /* port service resides at */
    char	*s_proto;		      /* protocol to use */
};
.fi
.in -2

.sp
.LP
The members of this structure are:
.sp
.ne 2
.mk
.na
.B s_name
.ad
.RS 13n
.rt
The official name of the service.
.RE

.sp
.ne 2
.mk
.na
.B s_aliases
.ad
.RS 13n
.rt
A zero terminated list of alternate names for the service.
.RE

.sp
.ne 2
.mk
.na
.B s_port
.ad
.RS 13n
.rt
The port number at which  the  service  resides.  Port  numbers are
returned in  network  byte order.
.RE

.sp
.ne 2
.mk
.na
.B s_proto
.ad
.RS 13n
.rt
The name of  the  protocol  to  use when contacting the service
.RE

.sp
.LP
The functions
.BR getservbyname() ,
.BR getservbyname_r() ,
.BR getservbyport() ,
and
.B getservbyport_r()
each return a pointer to
a
.B "struct servent"
if they successfully locate the requested entry;
otherwise they return
.IR NULL .
.sp
.LP
The functions
.B getservent()
and
.B getservent_r()
each return a
pointer to a
.B "struct servent"
if they successfully enumerate an entry;
otherwise they return
.I NULL,
indicating the end of the enumeration.
.sp
.LP
The functions
.BR getservbyname() ,
.BR getservbyport() ,
and
.B getservent()
use static storage, so returned data must be copied
before a subsequent call to any of these functions if the data is to be
saved.
.sp
.LP
When the pointer returned by the reentrant functions
.BR getservbyname_r() ,
.BR getservbyport_r() ,
and
.BR getservent_r()
is non-null, it is always equal to the
.I result
pointer that was
supplied by the caller.
.SH ERRORS
.sp
.LP
The reentrant functions
.BR getservbyname_r() ,
.BR getservbyport_r() ,
and
.B getservent_r()
return
.I NULL
and set
.B errno
to
.B ERANGE
if the length of the buffer supplied by caller is not large
enough to store the result.  See
.BR Intro (2)
for the proper usage and
interpretation of
.B errno
in multithreaded applications.
.SH FILES
.sp
.ne 2
.mk
.na
.B /etc/services
.ad
.RS 22n
.rt
Internet network services
.RE

.sp
.ne 2
.mk
.na
.B /etc/netconfig
.ad
.RS 22n
.rt
network configuration file
.RE

.sp
.ne 2
.mk
.na
.B /etc/nsswitch.conf
.ad
.RS 22n
.rt
configuration file for the name-service switch
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelT{
See "Reentrant Interfaces" in \fBDESCRIPTION\fR.
T}
.TE

.SH SEE ALSO
.sp
.LP
.BR Intro (2),
.BR Intro (3),
.BR byteorder (3SOCKET),
.BR netdir (3NSL),
.BR netconfig (4),
.BR nsswitch.conf (4),
.BR services (4),
.BR attributes (5),
.BR netdb.h (3HEAD)
.SH WARNINGS
.sp
.LP
The reentrant interfaces
.BR getservbyname_r() ,
.BR getservbyport_r() ,
and
.B getservent_r()
are included in this release on an uncommitted
basis only, and are subject to change or removal in future minor releases.
.SH NOTES
.sp
.LP
The functions that return
.B "struct servent"
return the least significant
16-bits of the
.I s_port
field in
.IR "network byte order" .
.B getservbyport()
and
.B getservbyport_r()
also expect the input
parameter
.I port
in the
.IR "network byte order" .
See
.BR htons (3SOCKET)
for more details on converting between host and network
byte orders.
.sp
.LP
To ensure that they all return consistent results,
.BR getservbyname() ,
.BR getservbyname_r() ,
and
.B netdir_getbyname()
are implemented in
terms of the same internal library function. This function obtains the
system-wide source lookup policy based on the
.B inet
family entries in
.BR netconfig (4)
and the
.B services:
entry in \fBnsswitch.conf\fR(4).
Similarly,
.BR getservbyport() ,
.BR getservbyport_r() ,
and
.B netdir_getbyaddr()
are implemented in terms of the same internal
library function. If the
.B inet
family entries in
.BR netconfig (4)
have a ``-'' in the last column for nametoaddr libraries, then the entry for
.B services
in
.B nsswitch.conf
will be used; otherwise the nametoaddr
libraries in that column will be used, and
.B nsswitch.conf
will not be
consulted.
.sp
.LP
There is no analogue of
.B getservent()
and
.B getservent_r()
in the
netdir functions, so these enumeration functions go straight to the
.B services
entry in
.BR nsswitch.conf .
Thus enumeration may return
results from a different source than that used by
.BR getservbyname() ,
.BR getservbyname_r() ,
.BR getservbyport() ,
and
.BR getservbyport_r() .
.sp
.LP
When compiling multithreaded applications, see
.BR Intro (3),
\fINotes On
Multithread Applications\fR, for information about the use of the
.B _REENTRANT
flag.
.sp
.LP
Use of the enumeration interfaces
.B getservent()
and
.B getservent_r()
is discouraged; enumeration may not be supported for
all database sources.  The semantics of enumeration are discussed further in
.BR nsswitch.conf (4).
