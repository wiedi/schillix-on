'\" te
.\" Copyright 2003 AT&T
.\" Copyright (C) 2003, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH icmp6_filter 3SOCKET "13 Dec 2003" "SunOS 5.11" "Sockets Library Functions"
.SH NAME
icmp6_filter \- Variable allocation datatype
.SH SYNOPSIS
.LP
.nf
\fBvoid\fR \fBICMP6_FILTER_SETPASSALL\fR (\fBstruct icmp6_filter *\fR);
.fi

.LP
.nf
\fBvoid\fR \fBICMP6_FILTER_SETBLOCKALL\fR (\fBstruct icmp6_filter *\fR);
.fi

.LP
.nf
\fBvoid\fR \fBICMP6_FILTER_SETPASS\fR (\fBint,\fR \fIstruct icmp6_filter *\fR);
.fi

.LP
.nf
\fBvoid\fR \fBICMP6_FILTER_SETBLOCK\fR (\fBint,\fR \fIstruct icmp6_filter *\fR);
.fi

.LP
.nf
\fBint\fR \fBICMP6_FILTER_WILLPASS\fR (\fBint,\fR \fIconst struct icmp6_filter *\fR);
.fi

.LP
.nf
\fBint\fR \fBICMP6_FILTER_WILLBLOCK\fR (\fBint,\fR \fIconst struct icmp6_filter *\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBicmp6_filter\fR structure is similar to the \fBfd_set\fR datatype
used with the
.B select()
function in the sockets API. The
.B icmp6_filter
structure is an opaque datatype and the application
should not care how it is implemented. The application allocates a variable
of this type, then passes a pointer to it. Next it passes a pointer to a
variable of this type to
.B getsockopt()
and
.B setsockopt()
and
operates on a variable of this type using the six macros defined below.
.sp
.LP
The
.B SETPASSALL
and
.B SETBLOCKALL
functions enable you to specify
that all ICMPv6 messages are passed to the application or that all ICMPv6
messages are blocked from being passed.
.sp
.LP
The
.B SETPASS
and
.B SETBLOCKALL
functions enable you to specify
that messages of a given ICMPv6 type should be passed to the application or
not passed to the application (blocked).
.sp
.LP
The
.B WILLPASS
and
.B WILLBLOCK
return true or false depending
whether the specified message type is passed to the application or blocked
from being passed to the application by the filter pointed to by the second
argument.
.sp
.LP
The pointer argument to all six
.B icmp6_filter
macros is a pointer to a
filter that is modified by the first four macros and is examined by
.B ICMP6_FILTER_SETBLOCK
and
.BR ICMP6_FILTER_WILLBLOCK .
The first
argument, (an integer), to the
.BR ICMP6_FILTER_BLOCKALL ,
.BR ICMP6_FILTER_SETPASS ,
.BR ICMP6_FILTER_SETBLOCK ,
and
.B ICMP6_FILTER_WILLBLOCK
macros is an ICMPv6 message type, between 0 and
255.
.sp
.LP
The current filter is fetched and stored using
.B getsockopt()
and
.B setsockopt()
with a level of IPPROTO_ICMPV6 and an option name of
ICMP6_FILTER.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelSafe
_
Interface StabilityStandard
.TE

