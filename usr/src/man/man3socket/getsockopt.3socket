'\" te
.\" Copyright (C) 2009, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH getsockopt 3SOCKET "27 Jan 2009" "SunOS 5.11" "Sockets Library Functions"
.SH NAME
getsockopt, setsockopt \- get and set options on sockets
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lsocket\fR \fB -lnsl \fR [ \fIlibrary\fR .\|.\|. ]
#include <sys/types.h>
#include <sys/socket.h>

\fBint\fR \fBgetsockopt\fR(\fBint\fR \fIs\fR, \fBint\fR \fIlevel\fR, \fBint\fR \fIoptname\fR, \fBvoid *\fIoptval\fR,
     \fBint *\fIoptlen\fR);
.fi

.LP
.nf
\fBint\fR \fBsetsockopt\fR(\fBint\fR \fIs\fR, \fBint\fR \fIlevel\fR, \fBint\fR \fIoptname\fR, \fBconst void *\fIoptval\fR,
     \fBint\fR \fIoptlen\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B getsockopt()
and
.B setsockopt()
functions manipulate options
associated with a socket. Options may exist at multiple protocol levels;
they are always present at the uppermost "socket" level.
.sp
.LP
The
.I level
argument specifies the protocol level at which the option
resides. To manipulate options at the socket level, specify the \fIlevel\fR
argument as
.BR SOL_SOCKET .
To manipulate options at the protocol level,
supply the appropriate protocol number for the protocol controlling the
option. For example, to indicate that an option will be interpreted by the
.BR TCP ,
set
.I level
to the protocol number of
.BR TCP ,
as defined
in the
.B <netinet/in.h>
header, or as determined by using
.BR getprotobyname (3SOCKET).
Some socket protocol families may also define
additional levels, such as
.BR SOL_ROUTE .
Only socket-level options are
described here.
.sp
.LP
The parameters
.I optval
and
.I optlen
are used to access option
values for
.BR setsockopt() .
For
.BR getsockopt() ,
they identify a
buffer in which the value(s) for the requested option(s) are to be returned.
For
.BR getsockopt() ,
.I optlen
is a value-result parameter, initially
containing the size of the buffer pointed to by
.IR optval ,
and modified
on return to indicate the actual size of the value returned. Use a 0
.I optval
if no option value is to be supplied or returned.
.sp
.LP
The
.I optname
and any specified options are passed uninterpreted to the
appropriate protocol module for interpretation. The include file
<\fBsys/socket.h\fR> contains definitions for the socket-level options
described below. Options at other protocol levels vary in format and name.
.sp
.LP
Most socket-level options take an
.B int
for
.IR optval .
For
.BR setsockopt() ,
the
.I optval
parameter should be non-zero to enable
a boolean option, or zero if the option is to be disabled. \fBSO_LINGER\fR
uses a
.B "struct linger"
parameter that specifies the desired state of the
option and the linger interval.
.B "struct linger"
is defined in
<\fBsys/socket.h\fR>. \fBstruct linger\fR contains the following
members:
.sp
.ne 2
.mk
.na
.B l_onoff
.ad
.RS 12n
.rt
on = 1/off = 0
.RE

.sp
.ne 2
.mk
.na
.B l_linger
.ad
.RS 12n
.rt
linger time, in seconds
.RE

.sp
.LP
The following options are recognized at the socket level. Except as noted,
each may be examined with
.B getsockopt()
and set with
.BR setsockopt() .
.sp
.ne 2
.mk
.na
.B SO_DEBUG
.ad
.RS 19n
.rt
enable/disable recording of debugging information
.RE

.sp
.ne 2
.mk
.na
.B SO_REUSEADDR
.ad
.RS 19n
.rt
enable/disable local address reuse
.RE

.sp
.ne 2
.mk
.na
.B SO_KEEPALIVE
.ad
.RS 19n
.rt
enable/disable keep connections alive
.RE

.sp
.ne 2
.mk
.na
.B SO_DONTROUTE
.ad
.RS 19n
.rt
enable/disable routing bypass for outgoing messages
.RE

.sp
.ne 2
.mk
.na
.B SO_LINGER
.ad
.RS 19n
.rt
linger on close if data is present
.RE

.sp
.ne 2
.mk
.na
.B SO_BROADCAST
.ad
.RS 19n
.rt
enable/disable permission to transmit broadcast messages
.RE

.sp
.ne 2
.mk
.na
.B SO_OOBINLINE
.ad
.RS 19n
.rt
enable/disable reception of out-of-band data in band
.RE

.sp
.ne 2
.mk
.na
.B SO_SNDBUF
.ad
.RS 19n
.rt
set buffer size for output
.RE

.sp
.ne 2
.mk
.na
.B SO_RCVBUF
.ad
.RS 19n
.rt
set buffer size for input
.RE

.sp
.ne 2
.mk
.na
.B SO_DGRAM_ERRIND
.ad
.RS 19n
.rt
application wants delayed error
.RE

.sp
.ne 2
.mk
.na
.B SO_TIMESTAMP
.ad
.RS 19n
.rt
enable/disable reception of timestamp with datagrams
.RE

.sp
.ne 2
.mk
.na
.B SO_EXCLBIND
.ad
.RS 19n
.rt
enable/disable exclusive binding of the socket
.RE

.sp
.ne 2
.mk
.na
.B SO_TYPE
.ad
.RS 19n
.rt
get the type of the socket (get only)
.RE

.sp
.ne 2
.mk
.na
.B SO_ERROR
.ad
.RS 19n
.rt
get and clear error on the socket (get only)
.RE

.sp
.ne 2
.mk
.na
.B SO_MAC_EXEMPT
.ad
.RS 19n
.rt
get or set mandatory access control on the socket. This option is available
only when the system is configured with Trusted Extensions.
.RE

.sp
.ne 2
.mk
.na
.B SO_ALLZONES
.ad
.RS 19n
.rt
bypass zone boundaries (privileged).
.RE

.sp
.ne 2
.mk
.na
.B SO_DOMAIN
.ad
.RS 19n
.rt
get the domain used in the socket (get only)
.RE

.sp
.ne 2
.mk
.na
.B SO_PROTOTYPE
.ad
.RS 19n
.rt
for socket in domains
.B PF_INET
and
.BR PF_INET6 ,
get the underlying
protocol number used in the socket. For socket in domain
.BR PF_ROUTE ,
get
the address family used in the socket.
.RE

.sp
.LP
The
.B SO_DEBUG
option enables debugging in the underlying protocol
modules. The
.B SO_REUSEADDR
option indicates that the rules used in
validating addresses supplied in a
.BR bind "(3SOCKET) call should allow"
reuse of local addresses. The
.B SO_KEEPALIVE
option enables the periodic
transmission of messages on a connected socket. If the connected party fails
to respond to these messages, the connection is considered broken and
threads using the socket are notified using a
.B SIGPIPE
signal. The
.B SO_DONTROUTE
option indicates that outgoing messages should bypass the
standard routing facilities. Instead, messages are directed to the
appropriate network interface according to the network portion of the
destination address.
.sp
.LP
The
.B SO_LINGER
option controls the action taken when unsent messages
are queued on a socket and a
.BR close (2)
is performed. If the socket
promises reliable delivery of data and
.B SO_LINGER
is set, the system
will block the thread on the
.B close()
attempt until it is able to
transmit the data or until it decides it is unable to deliver the
information (a timeout period, termed the linger interval, is specified in
the
.B setsockopt()
call when
.B SO_LINGER
is requested). If
.B SO_LINGER
is disabled and a
.B close()
is issued, the system will
process the
.B close()
in a manner that allows the thread to continue as
quickly as possible.
.sp
.LP
The option
.B SO_BROADCAST
requests permission to send broadcast
datagrams on the socket. With protocols that support out-of-band data, the
.B SO_OOBINLINE
option requests that out-of-band data be placed in the
normal data input queue as received; it will then be accessible with
.B recv()
or
.B read()
calls without the
.B MSG_OOB
flag.
.sp
.LP
The
.B SO_SNDBUF
and
.B SO_RCVBUF
options adjust the normal buffer
sizes allocated for output and input buffers, respectively. The buffer size
may be increased for high-volume connections or may be decreased to limit
the possible backlog of incoming data. The maximum buffer size for \fBUDP\fR
is determined by the value of the
.B ndd
variable
.BR udp_max_buf .
The
maximum buffer size for
.B TCP
is determined the value of the
.BR ndd
variable
.BR tcp_max_buf .
Use the
.BR ndd "(1M) utility to determine the"
current default values. See the \fISolaris Tunable Parameters Reference
Manual\fR for information on setting the values of \fBudp_max_buf\fR and
.BR tcp_max_buf .
At present, lowering
.B SO_RCVBUF
on a TCP connection
after it has been established has no effect.
.sp
.LP
By default, delayed errors (such as
.B ICMP
port unreachable packets)
are returned only for connected datagram sockets. The \fBSO_DGRAM_ERRIND\fR
option makes it possible to receive errors for datagram sockets that are not
connected. When this option is set, certain delayed errors received after
completion of a
.B sendto()
or
.B sendmsg()
operation will cause a
subsequent
.B sendto()
or
.B sendmsg()
operation using the same
destination address (\fIto\fR parameter) to fail with the appropriate error.
See
.BR send (3SOCKET).
.sp
.LP
If the
.B SO_TIMESTAMP
option is enabled on a
.B SO_DGRAM
or a
.B SO_RAW
socket, the
.BR recvmsg (3XNET)
call will return a timestamp
in the native data format, corresponding to when the datagram was
received.
.sp
.LP
The
.B SO_EXCLBIND
option is used to enable or disable the exclusive
binding of a socket. It overrides the use of the
.B SO_REUSEADDR
option
to reuse an address on \fBbind\fR(3SOCKET). The actual semantics of the
.B SO_EXCLBIND
option depend on the underlying protocol. See
.BR tcp (7P)
or \fBudp\fR(7P) for more information.
.sp
.LP
The
.B SO_TYPE
and
.B SO_ERROR
options are used only with
.BR getsockopt() .
The
.B SO_TYPE
option returns the type of the socket,
for example,
.BR SOCK_STREAM .
It is useful for servers that inherit
sockets on startup. The
.B SO_ERROR
option returns any pending error on
the socket and clears the error status. It may be used to check for
asynchronous errors on connected datagram sockets or for other asynchronous
errors.
.sp
.LP
The
.B SO_MAC_EXEMPT
option is used to toggle socket behavior with
unlabeled peers. A socket that has this option enabled can communicate with
an unlabeled peer if it is in the global zone or has a label that dominates
the default label of the peer. Otherwise, the socket must have a label that
is equal to the default label of the unlabeled peer. Calling
.B setsockopt()
with this option returns an
.B EACCES
error if the
process lacks the
.B NET_MAC_AWARE
privilege or if the socket is bound.
The
.B SO_MAC_EXEMPT
option is available only when the system is
configured with Trusted Extensions.
.sp
.LP
The
.B SO_ALLZONES
option can be used to bypass zone boundaries between
shared-IP zones. Normally, the system prevents a socket from being bound to
an address that is not assigned to the current zone. It also prevents a
socket that is bound to a wildcard address from receiving traffic for other
zones. However, some daemons which run in the global zone might need to send
and receive traffic using addresses that belong to other shared-IP zones. If
set before a socket is bound,
.B SO_ALLZONES
causes the socket to ignore
zone boundaries between shared-IP zones and permits the socket to be bound
to any address assigned to the shared-IP zones. If the socket is bound to a
wildcard address, it receives traffic intended for all shared-IP zones and
behaves as if an equivalent socket were bound in each active shared-IP zone.
Applications that use the
.B SO_ALLZONES
option to initiate connections
or send datagram traffic should specify the source address for outbound
traffic by binding to a specific address. There is no effect from setting
this option in an exclusive-IP zone. Setting this option requires the
.B sys_net_config
privilege. See
.BR zones (5).
.SH RETURN VALUES
.sp
.LP
If successful,
.B getsockopt()
and
.B setsockopt()
return
.BR 0 .
Otherwise, the functions return \fB\(mi1\fR and set
.B errno
to indicate
the error.
.SH ERRORS
.sp
.LP
The
.B getsockopt()
and
.B setsockopt()
calls succeed unless:
.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 17n
.rt
The argument
.I s
is not a valid file descriptor.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 17n
.rt
There was insufficient memory available for the operation to complete.
.RE

.sp
.ne 2
.mk
.na
.B ENOPROTOOPT
.ad
.RS 17n
.rt
The option is unknown at the level indicated.
.RE

.sp
.ne 2
.mk
.na
.B ENOSR
.ad
.RS 17n
.rt
There were insufficient STREAMS resources available for the operation to
complete.
.RE

.sp
.ne 2
.mk
.na
.B ENOTSOCK
.ad
.RS 17n
.rt
The argument
.I s
is not a socket.
.RE

.sp
.ne 2
.mk
.na
.B ENOBUFS
.ad
.RS 17n
.rt
.B SO_SNDBUF
or
.B SO_RCVBUF
exceeds a system limit.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 17n
.rt
Invalid length for
.BR IP_OPTIONS .
.RE

.sp
.ne 2
.mk
.na
.B EHOSTUNREACH
.ad
.RS 17n
.rt
Invalid address for
.BR IP_MULTICAST_IF .
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 17n
.rt
Not a multicast address for
.B IP_ADD_MEMBERSHIP
and
.BR IP_DROP_MEMBERSHIP .
.RE

.sp
.ne 2
.mk
.na
.B EADDRNOTAVAIL
.ad
.RS 17n
.rt
Bad interface address for
.B IP_ADD_MEMBERSHIP
and
.BR IP_DROP_MEMBERSHIP .
.RE

.sp
.ne 2
.mk
.na
.B EADDRINUSE
.ad
.RS 17n
.rt
Address already joined for
.BR IP_ADD_MEMBERSHIP .
.RE

.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 17n
.rt
Address not joined for
.BR IP_DROP_MEMBERSHIP .
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 17n
.rt
No permissions.
.RE

.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 17n
.rt
Permission denied.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 17n
.rt
The specified option is invalid at the specified socket level, or the
socket has been shut down.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR ndd (1M),
.BR close (2),
.BR ioctl (2),
.BR read (2),
.BR bind (3SOCKET),
.BR getprotobyname (3SOCKET),
.BR recv (3SOCKET),
.BR recvmsg (3XNET),
.BR send (3SOCKET),
.BR socket (3SOCKET),
.BR socket.h (3HEAD),
.BR attributes (5),
.BR zones (5),
.BR tcp (7P),
.BR udp (7P)
.sp
.LP
.I Solaris Tunable Parameters Reference Manual
