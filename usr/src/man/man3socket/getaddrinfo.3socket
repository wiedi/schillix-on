'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH getaddrinfo 3SOCKET "8 May 2009" "SunOS 5.11" "Sockets Library Functions"
.SH NAME
getaddrinfo, getnameinfo, freeaddrinfo, gai_strerror \- translate between
node name and address
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR\&.\|.\|. ] \fIfile\fR \&.\|.\|. \fB-lsocket\fR \fB -lnsl \fR [ \fIlibrary\fR \&.\|.\|. ]
#include <sys/socket.h>
#include <netdb.h>

\fBint\fR \fBgetaddrinfo\fR(\fBconst char *\fInodename\fR, \fBconst char *\fIservname\fR,
     \fBconst struct addrinfo *\fIhints\fR, \fBstruct addrinfo **\fIres\fR);
.fi

.LP
.nf
\fBint\fR \fBgetnameinfo\fR(\fBconst struct sockaddr *\fIsa\fR, \fBsocklen_t\fR \fIsalen\fR,
     \fBchar *\fIhost\fR, \fBsize_t\fR \fIhostlen\fR, \fBchar *\fIserv\fR, \fBsize_t\fR \fIservlen\fR,
     \fBint\fR \fIflags\fR);
.fi

.LP
.nf
\fBvoid\fR \fBfreeaddrinfo\fR(\fBstruct addrinfo *\fIai\fR);
.fi

.LP
.nf
\fBchar *\fBgai_strerror\fR(\fBint\fR \fIerrcode\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions perform translations from node name to address and from
address to node name in a protocol-independent manner.
.sp
.LP
The \fBgetaddrinfo()\fR function performs the node name to address
translation. The
.I nodename
and
.I servname
arguments are pointers to
null-terminated strings or
.IR NULL .
One or both of these arguments must
be a non-null pointer. In the normal client scenario, both the
\fInodename\fR and \fIservname\fR are specified. In the normal server
scenario, only the
.I servname
is specified.
.sp
.LP
A non-null
.I nodename
string can be a node name or a numeric host
address string. The
.I nodename
can also be an IPv6 zone-id in the
form:
.sp
.in +2
.nf
<address>%<zone-id>
.fi
.in -2

.sp
.LP
The address is the literal IPv6 link-local address or host name of the
destination. The zone-id is the interface ID of the IPv6 link used to send
the packet. The zone-id can either be a numeric value, indicating a literal
zone value, or an interface name such as \fBhme0\fR.
.sp
.LP
A non-null
.I servname
string can be either a service name or a decimal
port number.
.sp
.LP
The caller can optionally pass an \fBaddrinfo\fR structure, pointed to by
the
.I hints
argument, to provide hints concerning the type of socket
that the caller supports.
.sp
.LP
The \fBaddrinfo\fR structure is defined as:
.sp
.in +2
.nf
struct addrinfo {
int              ai_flags;      /* AI_PASSIVE, AI_CANONNAME,
                                   AI_NUMERICHOST, AI_NUMERICSERV
                                   AI_V4MAPPED, AI_ALL,
                                   AI_ADDRCONFIG */
int              ai_family;     /* PF_xxx */
int              ai_socktype;   /* SOCK_xxx */
int              ai_protocol;   /* 0 or IPPROTO_xxx for IPv4 & IPv6 */
socklen_t        ai_addrlen;    /* length of ai_addr */
char             *ai_canonname; /* canonical name for nodename */
struct sockaddr  *ai_addr;      /* binary address */
struct addrinfo  *ai_next;      /* next structure in linked list */
};
.fi
.in -2

.sp
.LP
In this
.I hints
structure, all members other than \fBai_flags\fR,
\fBai_family\fR,
.BR ai_socktype ,
and
.B ai_protocol
must be 0 or a
null pointer. A value of
.B PF_UNSPEC
for \fBai_family\fR indicates that
the caller will accept any protocol family. A value of 0 for
\fBai_socktype\fR indicates that the caller will accept any socket type.  A
value of 0 for
.B ai_protocol
indicates that the caller will accept any
protocol. For example, if the caller handles only TCP and not UDP, then the
\fBai_socktype\fR member of the \fIhints\fR structure should be set to
\fBSOCK_STREAM\fR when \fBgetaddrinfo()\fR is called. If the caller handles
only IPv4 and not IPv6, then the \fBai_family\fR member of the \fIhints\fR
structure should be set to
.B PF_INET
when \fBgetaddrinfo()\fR is called.
If the third argument to \fBgetaddrinfo()\fR is a null pointer, it is as if
the caller had filled in an \fBaddrinfo\fR structure initialized to 0 with
\fBai_family\fR set to \fBPF_UNSPEC\fR.
.sp
.LP
Upon success, a pointer to a linked list of one or more \fBaddrinfo\fR
structures is returned through the final argument.  The caller can process
each \fBaddrinfo\fR structure in this list by following the \fBai_next\fR
pointer, until a null pointer is encountered. In each returned
\fBaddrinfo\fR structure the three members \fBai_family\fR,
.BR ai_socktype ,
and
.B ai_protocol
are the corresponding arguments for
a call to the \fBsocket\fR(3SOCKET) function. In each \fBaddrinfo\fR
structure the
.B ai_addr
member points to a filled-in socket address
structure whose length is specified by the
.B ai_addrlen
member.
.sp
.LP
If the
.B AI_PASSIVE
bit is set in the \fBai_flags\fR member of the
\fIhints\fR structure, the caller plans to use the returned socket address
structure in a call to \fBbind\fR(3SOCKET). In this case, if the
\fInodename\fR argument is a null pointer, the IP address portion of the
socket address structure will be set to
.B INADDR_ANY
for an IPv4 address
or
.B IN6ADDR_ANY_INIT
for an IPv6 address.
.sp
.LP
If the
.B AI_PASSIVE
bit is not set in the \fBai_flags\fR member of the
\fIhints\fR structure, then the returned socket address structure will be
ready for a call to \fBconnect\fR(3SOCKET) (for a connection-oriented
protocol) or either \fBconnect\fR(3SOCKET),
.BR sendto (3SOCKET),
or
.BR sendmsg (3SOCKET)
(for a connectionless protocol). If the
\fInodename\fR argument is a null pointer, the IP address portion of the
socket address structure will be set to the loopback address.
.sp
.LP
If the
.B AI_CANONNAME
bit is set in the \fBai_flags\fR member of the
\fIhints\fR structure, then upon successful return the \fBai_canonname\fR
member of the first \fBaddrinfo\fR structure in the linked list will point
to a null-terminated string containing the canonical name of the specified
.IR nodename .
A numeric host address string is not a name, and thus does
not have a canonical name form; no address to host name translation is
performed.
.sp
.LP
If the
.B AI_NUMERICHOST
bit is set in the \fBai_flags\fR member of the
\fIhints\fR structure, then a non-null \fInodename\fR string must be a
numeric host address string. Otherwise an error of
.B EAI_NONAME
is
returned. This flag prevents any type of name resolution service (such as
DNS) from being called.
.sp
.LP
If the
.B AI_NUMERICSERV
flag is specified, then a non-null servname
string supplied will be a numeric port string.  Otherwise, an
[\fBEAI_NONAME\fR] error is returned. This flag prevents any type of name
resolution service (for example, NIS+) from being invoked.
.sp
.LP
If the
.B AI_V4MAPPED
flag is specified along with an \fBai_family\fR of
.BR AF_INET6 ,
then \fBgetaddrinfo()\fR returns IPv4-mapped IPv6 addresses
on finding no matching IPv6 addresses (\fBai_addrlen\fR shall be 16). For
example, if no AAAA records are found when using DNS, a query is made for A
records. Any found records are returned as IPv4-mapped IPv6 addresses.
.sp
.LP
The
.B AI_V4MAPPED
flag is ignored unless \fBai_family\fR equals
.BR AF_INET6 .
.sp
.LP
If the
.B AI_ALL
flag is used with the AI_V4MAPPED flag, then
\fBgetaddrinfo()\fR returns all matching IPv6 and IPv4 addresses. For
example, when using the DNS, queries are made for both AAAA records and A
records, and \fBgetaddrinfo()\fR returns the combined results of both
queries. Any IPv4 addresses found are returned as IPv4-mapped IPv6
addresses.
.sp
.LP
The
.B AI_ALL
flag without the
.B AI_V4MAPPED
flag is ignored.
.sp
.LP
When \fBai_family\fR is not specified
.RB ( AF_UNSPEC ),
.B AI_V4MAPPED
and
.B AI_ALL
flags are used only if
.B AF_INET6
is supported.
.sp
.LP
If the
.B AI_ADDRCONFIG
flag is specified, IPv4 addresses are returned
only if an IPv4 address is configured on the local system, and IPv6
addresses are returned only if an IPv6 address is configured on the local
system. For this case, the loopback address is not considered to be as valid
as a configured address. For example, when using the DNS, a query for AAAA
records should occur only if the node has at least one IPv6 address
configured (other than IPv6 loopback) and a query for A records should occur
only if the node has at least one IPv4 address configured (other than the
IPv4 loopback).
.sp
.LP
All of the information returned by \fBgetaddrinfo()\fR is dynamically
allocated: the \fBaddrinfo\fR structures as well as the socket address
structures and canonical node name strings pointed to by the \fBaddrinfo\fR
structures. The \fBfreeaddrinfo()\fR function is called to return this
information to the system. For
.BR freeaddrinfo() ,
the \fBaddrinfo\fR
structure pointed to by the
.I ai
argument is freed, along with any
dynamic storage pointed to by the structure. This operation is repeated
until a null
.B ai_next
pointer is encountered.
.sp
.LP
To aid applications in printing error messages based on the
.BR EAI_ *
codes returned by
.BR getaddrinfo() ,
the
.B gai_strerror()
is defined.
The argument is one of the
.BR EAI_ *
values defined below and the return
value points to a string describing the error. If the argument is not one of
the
.BR EAI_ *
values, the function still returns a pointer to a string
whose contents indicate an unknown error.
.sp
.LP
The \fBgetnameinfo()\fR function looks up an IP address and port number
provided by the caller in the name service database and system-specific
database, and returns text strings for both in buffers provided by the
caller. The function indicates successful completion by a 0 return value; a
non-zero return value indicates failure.
.sp
.LP
The first argument,
.IR sa ,
points to either a
.BR sockaddr_in
structure (for IPv4) or a
.B sockaddr_in6
structure (for IPv6) that holds
the IP address and port number. The
.I salen
argument gives the length of
the
.B sockaddr_in
or
.B sockaddr_in6
structure.
.sp
.LP
The function returns the node name associated with the IP address in the
buffer pointed to by the
.I host
argument.
.sp
.LP
The function can also return the IPv6 zone-id in the form:
.sp
.in +2
.nf
<address>%<zone-id>
.fi
.in -2

.sp
.LP
The caller provides the size of this buffer with the
.IR hostlen
argument. The service name associated with the port number is returned in
the buffer pointed to by
.IR serv ,
and the
.I servlen
argument gives
the length of this buffer. The caller specifies not to return either string
by providing a 0 value for the
.I hostlen
or
.I servlen
arguments.
Otherwise, the caller must provide buffers large enough to hold the node
name and the service name, including the terminating null characters.
.sp
.LP
To aid the application in allocating buffers for these two returned
strings, the following constants are defined in <\fBnetdb.h\fR>:
.sp
.in +2
.nf
#define NI_MAXHOST  1025
#define NI_MAXSERV    32
.fi
.in -2

.sp
.LP
The final argument is a flag that changes the default actions of this
function. By default, the fully-qualified domain name (\fBFQDN\fR) for the
host is looked up in the name service database and returned. If the flag bit
\fBNI_NOFQDN\fR is set, only the node name portion of the \fBFQDN\fR is
returned for local hosts.
.sp
.LP
If the flag bit
.B NI_NUMERICHOST
is set, or if the host's name cannot
be located in the name service, the numeric form of the host's address is
returned instead of its name, for example, by calling
.B inet_ntop()
(see
.BR inet (3SOCKET))
instead of \fBgetipnodebyname\fR(3SOCKET). If the flag
bit
.B NI_NAMEREQD
is set, an error is returned if the host's name cannot
be located in the name service database.
.sp
.LP
If the flag bit
.B NI_NUMERICSERV
is set, the numeric form of the
service address is returned (for example, its port number) instead of its
name. The two
.BR NI_NUMERIC *
flags are required to support the
.BR -n
flag that many commands provide.
.sp
.LP
A fifth flag bit,
.BR NI_DGRAM ,
specifies that the service is a datagram
service, and causes
.BR getservbyport (3SOCKET)
to be called with a second
argument of
.B udp
instead of the default
.BR tcp .
This is required for
the few ports (for example, 512-514) that have different services for UDP
and TCP.
.sp
.LP
These
.BR NI_ *
flags are defined in <\fBnetdb.h\fR> along with the
\fBAI_\fR* flags already defined for \fBgetaddrinfo()\fR.
.SH RETURN VALUES
.sp
.LP
For
.BR getaddrinfo() ,
if the query is successful, a pointer to a linked
list of one or more \fBaddrinfo\fR structures is returned by the fourth
argument and the function returns
.BR 0 .
The order of the addresses
returned i nthe fourth argument is discussed in the ADDRESS ORDERING
section. If the query fails, a non-zero error code will be returned. For
\fBgetnameinfo()\fR, if successful, the strings hostname and service are
copied into
.I host
and
.IR serv ,
respectively. If unsuccessful, zero
values for either
.I hostlen
or
.I servlen
will suppress the
associated lookup; in this case no data is copied into the applicable
buffer. If
.B gai_strerror()
is successful, a pointer to a string
containing an error message appropriate for the
.BR EAI_ *
errors is
returned. If
.I errcode
is not one of the
.BR EAI_ *
values, a pointer
to a string indicating an unknown error is returned.
.SS "Address Ordering"
.sp
.LP
AF_INET6 addresses returned by the fourth argument of \fBgetaddrinfo()\fR
are ordered according to the algorithm described in \fIRFC 3484, Default
Address Selection for Internet Protocol version 6 (IPv6)\fR. The addresses
are ordered using a list of pair-wise comparison rules which are applied in
order. If a rule determines that one address is better than another, the
remaining rules are irrelevant to the comparison of those two addresses. If
two addresses are equivalent according to one rule, the remaining rules act
as a tie-breaker. The address ordering list of pair-wise comparison rules
follow below:
.sp

.sp
.TS
tab() box;
lw(2.75i) |lw(2.75i)
lw(2.75i) |lw(2.75i)
.
Avoid unusable destinations.T{
Prefer a destination that is reachable through the IP routing table.
T}
_
Prefer matching scope.T{
Prefer a destination whose scope is equal to the scope of its source address. See \fBinet6\fR(7P) for the definition of scope used by this rule.
T}
_
Avoid link-local source.T{
Avoid selecting a link-local source address when the destination address is not a link-local address.
T}
_
Avoid deprecated addresses.T{
Prefer a destination that is not deprecated (\fBIFF_DEPRECATED\fR).
T}
_
T{
Prefer matching label. This rule uses labels that are obtained through the IPv6 default address selection policy table. See \fBipaddrsel\fR(1M) for a description of the default contents of the table and how the table is configured.
T}T{
Prefer a destination whose label is equal to the label of its source address.
T}
_
T{
Prefer higher precedence. This rule uses precedence values that are obtained through the IPv6 default address selection policy table. See \fBipaddrsel\fR(1M) for a description of the default contents of the table and how the table is configured.
T}T{
Prefer the destination whose precedence is higher than the other destination.
T}
_
Prefer native transport.T{
Prefer a destination if the interface that is used for sending packets to that destination is not an IP over IP tunnel.
T}
_
T{
Prefer smaller scope. See \fBinet6\fR(7P) for the definition of this rule.
T}T{
Prefer the destination whose scope is smaller than the other destination.
T}
_
Use longest matching prefix.T{
When the two destinations belong to the same address family, prefer the destination that has the longer matching prefix with its source address.
T}
.TE

.SH ERRORS
.sp
.LP
The following names are the error values returned by \fBgetaddrinfo()\fR
and are defined in <\fBnetdb.h\fR>:
.sp
.ne 2
.mk
.na
.B EAI_ADDRFAMILY
.ad
.RS 18n
.rt
Address family for nodename is not supported.
.RE

.sp
.ne 2
.mk
.na
.B EAI_AGAIN
.ad
.RS 18n
.rt
Temporary failure in name resolution has occurred .
.RE

.sp
.ne 2
.mk
.na
.B EAI_BADFLAGS
.ad
.RS 18n
.rt
Invalid value specified for \fBai_flags\fR.
.RE

.sp
.ne 2
.mk
.na
.B EAI_FAIL
.ad
.RS 18n
.rt
Non-recoverable failure in name resolution has occurred.
.RE

.sp
.ne 2
.mk
.na
.B EAI_FAMILY
.ad
.RS 18n
.rt
The \fBai_family\fR is not supported.
.RE

.sp
.ne 2
.mk
.na
.B EAI_MEMORY
.ad
.RS 18n
.rt
Memory allocation failure has occurred.
.RE

.sp
.ne 2
.mk
.na
.B EAI_NODATA
.ad
.RS 18n
.rt
No address is associated with
.IR nodename .
.RE

.sp
.ne 2
.mk
.na
.B EAI_NONAME
.ad
.RS 18n
.rt
Neither
.I nodename
nor
.I servname
is provided or known.
.RE

.sp
.ne 2
.mk
.na
.B EAI_SERVICE
.ad
.RS 18n
.rt
The
.I servname
is not supported for
.BR ai_socktype .
.RE

.sp
.ne 2
.mk
.na
.B EAI_SOCKTYPE
.ad
.RS 18n
.rt
The
.B ai_socktype
is not supported.
.RE

.sp
.ne 2
.mk
.na
.B EAI_OVERFLOW
.ad
.RS 18n
.rt
Argument buffer has overflowed.
.RE

.sp
.ne 2
.mk
.na
.B EAI_SYSTEM
.ad
.RS 18n
.rt
System error was returned in
.IR errno .
.RE

.SH FILES
.sp
.ne 2
.mk
.na
.B /etc/inet/hosts
.ad
.RS 22n
.rt
local database that associates names of nodes with IP addresses
.RE

.sp
.ne 2
.mk
.na
\fB/etc/netconfig\fR
.ad
.RS 22n
.rt
network configuration database
.RE

.sp
.ne 2
.mk
.na
\fB/etc/nsswitch.conf\fR
.ad
.RS 22n
.rt
configuration file for the name service switch
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
.BR ipaddrsel (1M),
.BR gethostbyname (3NSL),
.BR getipnodebyname (3SOCKET),
.BR htonl (3SOCKET),
.BR inet (3SOCKET),
.BR netdb.h (3HEAD),
.BR socket (3SOCKET),
.BR hosts (4),
\fBnsswitch.conf\fR(4),
.BR attributes (5),
.BR standards (5),
.BR inet6 (7P)
.sp
.LP
Draves, R. \fIRFC 3484, Default Address Selection for Internet Protocol
version 6 (IPv6)\fR. Network Working Group. February 2003.
.SH NOTES
.sp
.LP
IPv4-mapped addresses are not recommended.
