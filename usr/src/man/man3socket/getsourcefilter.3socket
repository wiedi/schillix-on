'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH getsourcefilter 3SOCKET "20 Aug 2007" "SunOS 5.11" "Sockets Library Functions"
.SH NAME
getsourcefilter, setsourcefilter, getipv4sourcefilter, setipv4sourcefilter
\- retrieve and set a socket's multicast filter
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lsocket\fR [ \fIlibrary\fR.\|.\|. ]
#include <netinet/in.h>

\fBint\fR \fBgetsourcefilter\fR(\fBint\fR \fIs\fR, \fBuint32_t\fR \fIinterface\fR,
     \fBstruct sockaddr *\fIgroup\fR, \fBsocklen_t\fR \fIgrouplen\fR, \fBuint32_t *\fIfmode\fR,
     \fBuint_t *\fInumsrc\fR, \fBstruct sockaddr_storage *\fIslist\fR);
.fi

.LP
.nf
\fBint\fR \fBsetsourcefilter\fR(\fBint\fR \fIs\fR, \fBuint32_t\fR \fIinterface\fR,
     \fBstruct sockaddr *\fIgroup\fR, \fBsocklen_t\fR \fIgrouplen\fR, \fBuint32_t\fR \fIfmode\fR,
     \fBuint_t\fR \fInumsrc\fR, \fBstruct sockaddr_storage *\fIslist\fR);
.fi

.LP
.nf
\fBint\fR \fBgetipv4sourcefilter\fR(\fBint\fR \fIs\fR, \fBstruct in_addr\fR \fIinterface\fR,
     \fBstruct in_addr\fR \fIgroup\fR, \fBuint32_t *\fIfmode\fR, \fBuint32_t *\fInumsrc\fR,
     \fBstruct in_addr *\fIslist\fR);
.fi

.LP
.nf
\fBint\fR \fBsetipv4sourcefilter\fR(\fBint\fR \fIs\fR, \fBstruct in_addr\fR \fIinterface\fR,
     \fBstruct in_addr\fR \fIgroup\fR,\fBuint32_t\fR \fIfmode\fR, \fBuint32_t\fR \fInumsrc\fR,
     \fBstruct in_addr *\fIslist\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions allow applications to retrieve and modify the multicast
filtering state for a tuple consisting of socket, interface, and multicast
group values.
.sp
.LP
A multicast filter is described by a filter mode, which is
.B MODE_INCLUDE
or
.BR MODE_EXCLUDE ,
and a list of source addresses
which are filtered. If a group is simply joined with no source address
restrictions, the filter mode is
.B MODE_EXCLUDE
and the source list is
empty.
.sp
.LP
The
.BR getsourcefilter() " and "
.B setsourcefilter()
functions are
protocol-independent. They can be used on either
.B PF_INET
or
.B PF_INET6
sockets. The
.B getipv4sourcefilter()
and
.B setipv4sourcefilter()
functions are IPv4-specific. They must be used
only on
.B PF_INET
sockets.
.sp
.LP
For the protocol-independent functions, the first four arguments identify
the socket, interface, multicast group tuple values. The argument
.I s
is
an open socket of type
.B SOCK_DGRAM
or
.BR SOCK_RAW .
The
.I interface
argument is the interface index. The interface name can be
mapped to the index using
.BR if_nametoindex (3SOCKET).
The
.I group
points to either a
.B sockaddr_in
containing an IPv4 multicast address if
the socket is
.B PF_INET
or a
.B sockaddr_in6
containing an IPv6
multicast address if the socket is
.BR PF_INET6 .
The
.I grouplen
is the
size of the structure pointed to by
.IR group .
.sp
.LP
For the IPv4-specific functions, the first three arguments identify the
same socket, interface, multicast group tuple values. The argument
.I s
is an open socket of type
.B SOCK_DGRAM
or
.B SOCK_RAW
and protocol
family
.BR PF_INET .
The
.I interface
argument is the IPv4 address
assigned to the local interface. The
.I group
argument is the IPv4
multicast address.
.sp
.LP
The
.BR getsourcefilter() " and "
.B getipv4sourcefilter()
functions
retrieve the current filter for the given tuple consisting of socket,
interface, and multicast group values. On successful return,
.I fmode
contains either
.B MODE_INCLUDE
or
.BR MODE_EXCLUDE ,
indicating the
filter mode. On input, the
.I numsrc
argument holds the number of
addresses that can fit in the
.I slist
.RI "array.  On return," " slist"
contains as many addresses as fit, while
.I numsrc
contains the total
number of source addresses in the filter. It is possible that
.I numsrc
can contain a number larger than the number of addresses in the
.IR slist
array. An application might determine the required buffer size by calling
.B getsourcefilter()
with
.I numsrc
containing
.B 0
and
.IR slist
a
.B NULL
pointer. On return,
.I numsrc
contains the number of
elements that the
.I slist
buffer must be able to hold. Alternatively,
the maximum number of source addresses allowed by this implementation is
defined in
.BR <netinet/in.h> :
.sp
.in +2
.nf
#define MAX_SRC_FILTER_SIZE	64
.fi
.in -2

.sp
.LP
The
.BR setsourcefilter() " and "
.B setipv4sourcefilter
functions replace
the current filter with the filter specified in the arguments
.IR fmode ,
.IR numsrc ,
and
.IR slist .
The
.I fmode
argument must be set to
either
.B MODE_INCLUDE
or
.BR MODE_EXCLUDE .
The
.I numsrc
argument
is the number of addresses in the
.I slist
.RI "array. The" " slist"
argument points to the array of source addresses to be included or excluded,
depending on the
.I fmode
value.
.SH RETURN VALUES
.sp
.LP
If successful, all four functions return
.BR 0 .
Otherwise, they return
.B
\(mi1 \c
and set
.B errno
to indicate the error.
.SH ERRORS
.sp
.LP
These functions will fail if:
.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 16n
.rt
The
.I s
argument is not a valid descriptor.
.RE

.sp
.ne 2
.mk
.na
.B EAFNOSUPPORT
.ad
.RS 16n
.rt
The address family of the passed-in
.I sockaddr
is not
.B AF_INET
or
.BR AF_INET6 .
.RE

.sp
.ne 2
.mk
.na
.B ENOPROTOOPT
.ad
.RS 16n
.rt
The socket
.I s
is not of type
.B SOCK_DGRAM
or
.BR SOCK_RAW .
.RE

.sp
.ne 2
.mk
.na
.B ENOPROTOOPT
.ad
.RS 16n
.rt
The address family of the group parameter does not match the protocol
family of the socket.
.RE

.sp
.ne 2
.mk
.na
.B ENOSR
.ad
.RS 16n
.rt
Insufficient
.B STREAMS
resources available for the operation to
complete.
.RE

.sp
.ne 2
.mk
.na
.B ENXIO
.ad
.RS 16n
.rt
The
.I interface
argument, either an index or an IPv4 address, does not
identify a valid interface.
.RE

.sp
.LP
The
.BR getsourcefilter() " and "
.B getipv4sourcefilter()
functions will
fail if:
.sp
.ne 2
.mk
.na
.B EADDRNOTAVAIL
.ad
.RS 17n
.rt
The tuple consisting of socket, interface, and multicast group values does
not exist;
.I group
is not being listened to on
.I interface
by
.IR socket .
.RE

.sp
.LP
The functions
.BR setsourcefilter() and
\fBsetipv4sourcefilter()\fR can
fail in the following additional case:
.sp
.ne 2
.mk
.na
.B ENOBUFS
.ad
.RS 11n
.rt
The source filter list is larger than that allowed by the implementation.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR if_nametoindex (3SOCKET),
.BR socket (3SOCKET),
.BR attributes (5)
.sp
.LP
RFC 3678
