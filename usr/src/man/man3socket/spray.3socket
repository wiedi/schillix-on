'\" te
.\" Copyright 1989 AT&T  Copyright (c) 1997, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH spray 3SOCKET "30 Dec 1996" "SunOS 5.11" "Sockets Library Functions"
.SH NAME
spray \- scatter data in order to test the network
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lsocket\fR \fB -lnsl \fR [ \fIlibrary\fR .\|.\|. ]
#include <rpcsvc/spray.h>

\fBbool_t\fR \fBxdr_sprayarr\fR(\fBXDR *\fIxdrs\fR, \fBsprayarr *\fIobjp\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBxdr_spraycumul\fR(\fBXDR *\fIxdrs\fR, \fBspraycumul *\fIobjp\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The spray program sends packets to a given machine to test communications
with that machine.
.sp
.LP
The spray program is not a C function interface, per se, but it can be
accessed using the generic remote procedure calling interface
.BR clnt_call() .
See
.BR rpc_clnt_calls "(3NSL). The program sends a"
packet to the called host. The host acknowledges receipt of the packet. The
program counts the number of acknowledgments and can return that count.
.sp
.LP
The spray program currently supports the following procedures, which should
be called in the order given:
.sp
.ne 2
.mk
.na
.B SPRAYPROC_CLEAR
.ad
.RS 19n
.rt
This procedure clears the counter.
.RE

.sp
.ne 2
.mk
.na
.B SPRAYPROC_SPRAY
.ad
.RS 19n
.rt
This procedure sends the packet.
.RE

.sp
.ne 2
.mk
.na
.B SPRAYPROC_GET
.ad
.RS 19n
.rt
This procedure returns the count and the amount of time since the last
.BR SPRAYPROC_CLEAR .
.RE

.SH EXAMPLES
.LP
.B Example 1
Using
.BR spray()
.sp
.LP
The following code fragment demonstrates how the spray program is used:

.sp
.in +2
.nf
#include <rpc/rpc.h>
#include <rpcsvc/spray.h>
 .  .  .
	spraycumul	spray_result;
	sprayarr	spray_data;
	char		buf[100];		/* arbitrary data */
	int		loop = 1000;
	CLIENT	*clnt;
	struct timeval timeout0 = {0, 0};
	struct timeval timeout25 = {25, 0};
	spray_data.sprayarr_len = (uint_t)100;
	spray_data.sprayarr_val = buf;
	clnt = clnt_create("somehost", SPRAYPROG, SPRAYVERS, "netpath");
	if (clnt == (CLIENT *)NULL) {
		/* handle this error */
	}
	if (clnt_call(clnt, SPRAYPROC_CLEAR,
		xdr_void, NULL, xdr_void, NULL, timeout25)) {
			/* handle this error */
	}
	while (loop\(mi > 0) {
		if (clnt_call(clnt, SPRAYPROC_SPRAY,
			xdr_sprayarr, &spray_data, xdr_void, NULL, timeout0)) {
				/* handle this error */
		}
	}
	if (clnt_call(clnt, SPRAYPROC_GET,
		xdr_void, NULL, xdr_spraycumul, &spray_result, timeout25)) {
			/* handle this error */
	}
	printf("Acknowledged %ld of 1000 packets in %d secs %d usecs\en",
		spray_result.counter,
		spray_result.clock.sec,
		spray_result.clock.usec);
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR spray (1M),
.BR rpc_clnt_calls (3NSL),
.BR attributes (5)
.SH NOTES
.sp
.LP
This interface is unsafe in multithreaded applications.  Unsafe interfaces
should be called only from the main thread.
.sp
.LP
A spray program is not useful as a networking benchmark as it uses
unreliable connectionless transports, for example, udp. It can report a
large number of packets dropped, when the drops were caused by the program
sending packets faster than they can be buffered locally, that is, before
the packets get to the network medium.
