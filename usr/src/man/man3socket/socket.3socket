'\" te
.\" Copyright (C) 2009, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH socket 3SOCKET "28 Jan 2009" "SunOS 5.11" "Sockets Library Functions"
.SH NAME
socket \- create an endpoint for communication
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lsocket\fR \fB -lnsl \fR [ \fIlibrary\fR .\|.\|. ]
#include <sys/types.h>
#include <sys/socket.h>

\fBint\fR \fBsocket\fR(\fBint\fR \fIdomain\fR, \fBint\fR \fItype\fR, \fBint\fR \fIprotocol\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B socket()
function creates an endpoint for communication and
returns a descriptor.
.sp
.LP
The
.I domain
argument specifies the protocol family within which
communication takes place. The protocol family is generally the same as the
address family for the addresses supplied in later operations on the socket.
These families are defined in
.BR <sys/socket.h> .
.sp
.LP
The currently supported protocol families are:
.sp
.ne 2
.mk
.na
.B PF_UNIX
.ad
.RS 12n
.rt
.B UNIX
system internal protocols
.RE

.sp
.ne 2
.mk
.na
.B PF_INET
.ad
.RS 12n
.rt
Internet Protocol Version 4 (IPv4)
.RE

.sp
.ne 2
.mk
.na
.B PF_INET6
.ad
.RS 12n
.rt
Internet Protocol Version 6 (IPv6)
.RE

.sp
.ne 2
.mk
.na
.B PF_NCA
.ad
.RS 12n
.rt
Network Cache and Accelerator (NCA) protocols
.RE

.sp
.LP
The socket has the indicated
.IR type ,
which specifies the communication
semantics. Currently defined types are:
.sp
.in +2
.nf
SOCK_STREAM
SOCK_DGRAM
SOCK_RAW
SOCK_SEQPACKET
SOCK_RDM
.fi
.in -2

.sp
.LP
There must be an entry in the
.BR netconfig (4)
file for at least each
protocol family and type required. If  a non-zero protocol has been
specified but no exact match for the protocol family, type, and protocol is
found, then the first entry containing the specified family and type with a
.I protocol
value of zero will be used.
.sp
.LP
A
.B SOCK_STREAM
type provides sequenced, reliable, two-way
connection-based byte streams. An out-of-band data transmission mechanism
may be supported. A
.B SOCK_DGRAM
socket supports datagrams
(connectionless, unreliable messages of a fixed (typically small) maximum
length). A
.B SOCK_SEQPACKET
socket may provide a sequenced, reliable,
two-way connection-based data transmission path for datagrams of fixed
maximum length; a consumer may be required to read an entire packet with
each read system call. This facility is protocol specific, and presently not
implemented for any protocol family.
.B SOCK_RAW
sockets provide access
to internal network interfaces. The types
.BR SOCK_RAW ,
which is available
only to a user with the
.B net_rawaccess
privilege, and
.BR SOCK_RDM ,
for which no implementation currently exists, are not described here.
.sp
.LP
The
.I protocol
parameter is a protocol-family-specific value which
specifies a particular protocol to be used with the socket.  Normally this
value is zero, as commonly only a single protocol exists to support a
particular socket type within a given protocol family. However, multiple
protocols may exist, in which case a particular protocol may be specified in
this manner.
.sp
.LP
Sockets of type
.B SOCK_STREAM
are full-duplex byte streams, similar to
pipes. A stream socket must be in a
.I connected
state before any data
may be sent or received on it. A connection to another socket is created
with a \fBconnect\fR(3SOCKET) call. Once connected, data may be transferred
using
.BR read (2)
and
.BR write (2)
calls or some variant of the
.BR send (3SOCKET)
and
.BR recv "(3SOCKET) calls. When a session has been"
completed, a
.BR close (2)
may be performed. Out-of-band data may also be
transmitted as described on the
.BR send "(3SOCKET) manual page and received"
as described on the
.BR recv "(3SOCKET) manual page."
.sp
.LP
The communications protocols used to implement a
.B SOCK_STREAM
insure
that data is not lost or duplicated.  If a piece of data for which the peer
protocol has buffer space cannot be successfully transmitted within a
reasonable length of time, then the connection is considered broken and
calls will indicate an error with \(mi1 returns and with
.B ETIMEDOUT
as
the specific code in the global variable
.BR errno .
The protocols
optionally keep sockets "warm" by forcing transmissions roughly every minute
in the absence of other activity. An error is then indicated if no response
can be elicited on an otherwise idle connection for a extended period (for
instance 5 minutes). A
.B SIGPIPE
signal is raised if a thread sends on a
broken stream; this causes naive processes, which do not handle the signal,
to exit.
.sp
.LP
.B SOCK_SEQPACKET
sockets employ the same system calls as
.B SOCK_STREAM
sockets. The only difference is that
.BR read (2)
calls
will return only the amount of data requested, and any remaining in the
arriving packet will be discarded.
.sp
.LP
.B SOCK_DGRAM
and
.B SOCK_RAW
sockets allow datagrams to be sent to
correspondents named in
.BR sendto "(3SOCKET) calls. Datagrams are generally"
received with \fBrecvfrom\fR(3SOCKET), which returns the next datagram with
its return address.
.sp
.LP
An
.BR fcntl (2)
call can be used to specify a process group to receive a
.B SIGURG
signal when the out-of-band data arrives. It can also enable
non-blocking I/O.
.sp
.LP
The operation of sockets is controlled by socket level
.IR options .
These
options are defined in the file <\fBsys/socket.h\fR>.
.BR setsockopt (3SOCKET)
and
.BR getsockopt "(3SOCKET) are used to set and"
get options, respectively.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, a descriptor referencing the socket is
returned. Otherwise, -1 is returned and
.B errno
is set to indicate the
error.
.SH ERRORS
.sp
.LP
The
.B socket()
function will fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 19n
.rt
Permission to create a socket of the specified type or protocol is
denied.
.RE

.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 19n
.rt
There were insufficient resources available to complete the operation.
.RE

.sp
.ne 2
.mk
.na
.B EAFNOSUPPORT
.ad
.RS 19n
.rt
The specified address family is not supported by the protocol family.
.RE

.sp
.ne 2
.mk
.na
.B EMFILE
.ad
.RS 19n
.rt
The per-process descriptor table is full.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 19n
.rt
Insufficient user memory is available.
.RE

.sp
.ne 2
.mk
.na
.B ENOSR
.ad
.RS 19n
.rt
There were insufficient STREAMS resources available to complete the
operation.
.RE

.sp
.ne 2
.mk
.na
.B EPFNOSUPPORT
.ad
.RS 19n
.rt
The specified protocol family is not supported.
.RE

.sp
.ne 2
.mk
.na
.B EPROTONOSUPPORT
.ad
.RS 19n
.rt
The protocol type is not supported by the address family.
.RE

.sp
.ne 2
.mk
.na
.B EPROTOTYPE
.ad
.RS 19n
.rt
The socket type is not supported by the protocol.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR nca (1),
.BR close (2),
.BR fcntl (2),
.BR ioctl (2),
.BR read (2),
.BR write (2),
.BR accept (3SOCKET),
.BR bind (3SOCKET),
.BR connect (3SOCKET),
.BR getsockname (3SOCKET),
\fBgetsockopt\fR(3SOCKET), \fBin.h\fR(3HEAD),\fBlisten\fR(3SOCKET),
.BR recv (3SOCKET),
.BR setsockopt (3SOCKET),
.BR send (3SOCKET),
.BR shutdown (3SOCKET),
.BR socket.h (3HEAD),
.BR socketpair (3SOCKET),
.BR attributes (5)
.SH NOTES
.sp
.LP
Historically,
.BR AF_ *
was commonly used in places where
.BR PF_ *
was
meant. New code should be careful to use
.BR PF_ *
as necessary.
