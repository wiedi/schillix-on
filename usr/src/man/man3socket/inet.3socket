'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH inet 3SOCKET "28 Nov 2007" "SunOS 5.11" "Sockets Library Functions"
.SH NAME
inet, inet6, inet_ntop, inet_pton, inet_aton, inet_addr, inet_network,
inet_makeaddr, inet_lnaof, inet_netof, inet_ntoa \- Internet address
manipulation
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lsocket\fR \fB -lnsl \fR [ \fIlibrary\fR.\|.\|. ]
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

\fBconst char *\fBinet_ntop\fR(\fBint\fR \fIaf\fR, \fBconst void *\fIaddr\fR, \fBchar *\fIcp\fR,
     \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBint\fR \fBinet_pton\fR(\fBint\fR \fIaf\fR, \fBconst char *\fIcp\fR, \fBvoid *\fIaddr\fR);
.fi

.LP
.nf
\fBint\fR \fBinet_aton\fR(\fBconst char *\fIcp\fR, \fBstruct in_addr *\fIaddr\fR);
.fi

.LP
.nf
\fBin_addr_t\fR \fBinet_addr\fR(\fBconst char *\fIcp\fR);
.fi

.LP
.nf
\fBin_addr_t\fR \fBinet_network\fR(\fBconst char *\fIcp\fR);
.fi

.LP
.nf
\fBstruct in_addr\fR \fBinet_makeaddr\fR(\fBconst int\fR \fInet\fR, \fBconst int\fR \fIlna\fR);
.fi

.LP
.nf
\fBint\fR \fBinet_lnaof\fR(\fBconst struct in_addr\fR \fIin\fR);
.fi

.LP
.nf
\fBint\fR \fBinet_netof\fR(\fBconst struct in_addr\fR \fIin\fR);
.fi

.LP
.nf
\fBchar *\fBinet_ntoa\fR(\fBconst struct in_addr\fR \fIin\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B inet_ntop()
and
.B inet_pton()
functions can manipulate both
IPv4 and IPv6 addresses. The
.BR inet_aton() ,
.BR inet_addr() ,
.BR inet_network() ,
.BR inet_makeaddr() ,
.BR inet_lnaof() ,
\fBinet_netof()\fR, and \fBinet_ntoa()\fR functions can only manipulate IPv4
addresses.
.sp
.LP
The
.B inet_ntop()
function converts a numeric address into a string
suitable for presentation. The \fIaf\fR argument specifies the family of the
address which can be
.B AF_INET
or
.BR AF_INET6 .
The
.IR addr
argument points to a buffer that holds an IPv4 address if the \fIaf\fR
argument is
.BR AF_INET .
The
.I addr
argument points to a buffer that
holds an IPv6 address if the \fIaf\fR argument is
.BR AF_INET6 .
The
address must be in network byte order. The
.I cp
argument points to a
buffer where the function stores the resulting string. The application must
specify a non-\fINULL cp\fR argument. The
.I size
argument
specifies the size of this buffer. For IPv6 addresses, the buffer must be at
least 46-octets. For IPv4 addresses, the buffer must be at least 16-octets.
To allow applications to easily declare buffers of the proper size to store
IPv4 and IPv6 addresses in string form, the following two constants are
defined in <\fBnetinet/in.h\fR>:
.sp
.in +2
.nf
#define INET_ADDRSTRLEN    16
#define INET6_ADDRSTRLEN   46
.fi
.in -2

.sp
.LP
The
.B inet_pton()
function converts the standard text presentation form
of a function to the numeric binary form. The \fIaf\fR argument specifies
the family of the address. Currently, the
.B AF_INET
and
.BR AF_INET6
address families are supported. The
.I cp
argument points to the string
being passed in. The
.I addr
argument points to a buffer where the
function stores the numeric address. The calling application must ensure
that the buffer referred to by
.I addr
is large enough to hold the
numeric address, at least 4 bytes for
.B AF_INET
or 16 bytes for
.BR AF_INET6 .
.sp
.LP
The
.BR inet_aton() ,
.BR inet_addr() ,
and
.BR inet_network()
functions interpret character strings that represent numbers expressed in
the IPv4 standard '\fB\&.\fR' notation, returning numbers suitable for use
as IPv4 addresses and IPv4 network numbers, respectively. The
\fBinet_makeaddr()\fR function uses an IPv4 network number and a local
network address to construct an IPv4 address. The \fBinet_netof()\fR and
\fBinet_lnaof()\fR functions break apart IPv4 host addresses, then return
the network number and local network address, respectively.
.sp
.LP
The
.B inet_ntoa()
function returns a pointer to a string in the base
256 notation
.BR d.d.d.d .
See the following section on IPv4 addresses.
.sp
.LP
Internet addresses are returned in network order, bytes ordered from left
to right. Network numbers and local address parts are returned as machine
format integer values.
.SS "IPv6 Addresses"
.sp
.LP
There are three conventional forms for representing IPv6 addresses as
strings:
.RS +4
.TP
1.
The preferred form is
.BR x:x:x:x:x:x:x:x ,
where the 'x's are the
hexadecimal values of the eight 16-bit pieces of the address. For example:
.sp
.in +2
.nf
1080:0:0:0:8:800:200C:417A
.fi
.in -2

It is not necessary to write the leading zeros in an individual field.
There must be at least one numeral in every field, except when the special
syntax described in the following is used.
.RE
.RS +4
.TP
2.
It is common for addresses to contain long strings of zero bits in some
methods used to allocate certain IPv6 address styles. A special syntax is
available to compress the zeros. The use of "\fB::\fR" indicates multiple
groups of 16 bits of zeros. The
.B ::
may only appear once in an address.
The
.B ::
can also be used to compress the leading and trailing zeros in
an address. For example:
.sp
.in +2
.nf
1080::8:800:200C:417A
.fi
.in -2

.RE
.RS +4
.TP
3.
The alternative form
.B x:x:x:x:x:x:d.d.d.d
is sometimes more convenient
when dealing with a mixed environment of IPv4 and IPv6 nodes. The \fBx\fR's
in this form represent the hexadecimal values of the six high-order 16-bit
pieces of the address. The \fBd\fR's represent the decimal values of the
four low-order 8-bit pieces of the standard IPv4 address. For example:
.sp
.in +2
.nf
::FFFF:129.144.52.38
::129.144.52.38
.fi
.in -2

The
.B ::FFFF:d.d.d.d
and
.B ::d.d.d.d
pieces are the general forms
of an IPv4-mapped IPv6 address and an IPv4-compatible IPv6 address.
.sp
The IPv4 portion must be in the
.B d.d.d.d
form. The following forms are
invalid:
.sp
.in +2
.nf
::FFFF:d.d.d
::FFFF:d.d
::d.d.d
::d.d
.fi
.in -2

The
.B ::FFFF:d
form is a valid but unconventional representation of the
IPv4-compatible IPv6 address
.BR ::255.255.0.d .
.sp
The
.B ::d
form corresponds to the general IPv6 address
.BR 0:0:0:0:0:0:0:d .
.RE
.SS "IPv4 Addresses"
.sp
.LP
Values specified using `\fB\&.\fR' notation take one of the following
forms:
.sp
.in +2
.nf
d.d.d.d
d.d.d
d.d
d
.fi
.in -2

.sp
.LP
When four parts are specified, each part is interpreted as a byte of data
and assigned from left to right to the four bytes of an IPv4 address.
.sp
.LP
When a three-part address is specified, the last part is interpreted as a
16-bit quantity and placed in the right most two bytes of the network
address. The three part address format is convenient for specifying Class B
network addresses such as
.BR 128.net.host .
.sp
.LP
When a two-part address is supplied, the last part is interpreted as a
24-bit quantity and placed in the right most three bytes of the network
address. The two part address format is convenient for specifying Class A
network addresses such as
.BR net.host .
.sp
.LP
When only one part is given, the value is stored directly in the network
address without any byte rearrangement.
.sp
.LP
With the exception of
.BR inet_pton() ,
numbers supplied as
.I parts
in
\&'\fB\&.\fR' notation may be decimal, octal, or hexadecimal, as specified
in C language. For example, a leading
.B 0x
or
.B 0X
implies
hexadecimal. A leading
.B 0
implies octal. Otherwise, the number is
interpreted as decimal.
.sp
.LP
For IPv4 addresses,
.B inet_pton()
accepts only a string in standard
IPv4 dot notation:
.sp
.in +2
.nf
d.d.d.d
.fi
.in -2

.sp
.LP
Each number has one to three digits with a decimal value between 0 and
255.
.sp
.LP
The
.B inet_addr()
function has been obsoleted by
.BR inet_aton() .
.SH RETURN VALUES
.sp
.LP
The
.B inet_aton()
function returns nonzero if the address is valid,
\fB0\fR if the address is invalid.
.sp
.LP
The
.B inet_ntop()
function returns a pointer to the buffer that
contains a string if the conversion succeeds. Otherwise,
.I NULL
is
returned. Upon failure,
.I errno
is set to
.B EAFNOSUPPORT
if the
\fIaf\fR argument is invalid or \fBENOSPC\fR if the size of the result
buffer is inadequate.
.sp
.LP
The
.B inet_pton()
function returns
.B 1
if the conversion succeeds,
\fB0\fR if the input is not a valid IPv4 dotted-decimal string or a valid
IPv6 address string. The function returns
.B -1
with
.I errno
set to
\fBEAFNOSUPPORT\fR if the af argument is unknown.
.sp
.LP
The value
.BR INADDR_NONE ,
which is equivalent to
.BR (in_addr_t)(-1) ,
is returned by
.B inet_addr()
and
.B inet_network()
for malformed
requests.
.sp
.LP
The functions \fBinet_netof()\fR and \fBinet_lnaof()\fR break apart IPv4
host addresses, returning the network number and local network address part,
respectively.
.sp
.LP
The function
.B inet_ntoa()
returns a pointer to a string in the base
256 notation
.BR d.d.d.d ,
described in the section on IPv4 addresses.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilitySee below.
_
MT-LevelSafe
.TE

.sp
.LP
The
.BR inet_ntop() ,
.BR inet_pton() ,
.BR inet_aton() ,
.BR inet_addr() ,
and
.B inet_network()
functions are Committed. The
.BR inet_lnaof() ,
.BR inet_makeaddr() ,
.BR inet_netof() ,
and
\fBinet_network()\fR functions are Committed (Obsolete).
.SH SEE ALSO
.sp
.LP
.BR gethostbyname (3NSL),
.BR getipnodebyname (3SOCKET),
.BR getnetbyname (3SOCKET),
.BR inet.h (3HEAD),
.BR hosts (4),
.BR networks (4),
.BR attributes (5)
.SH NOTES
.sp
.LP
The return value from
.B inet_ntoa()
points to a buffer which is
overwritten on each call. This buffer is implemented as thread-specific data
in multithreaded applications.
.sp
.LP
IPv4-mapped addresses are not recommended.
.SH BUGS
.sp
.LP
The problem of host byte ordering versus network byte ordering is
confusing. A simple way to specify Class C network addresses in a manner
similar to that for Class B and Class A is needed.
