'\" te
.\" Copyright 2003 AT&T
.\" Copyright (C) 2007, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH inet6_rth 3SOCKET "15 Feb 2007" "SunOS 5.11" "Sockets Library Functions"
.SH NAME
inet6_rth, inet6_rth_space, inet6_rth_init, inet6_rth_add,
inet6_rth_reverse, inet6_rth_segments, inet6_rth_getaddr \- Routing header
manipulation
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lsocket\fR [\fIlibrary\fR]
#include <netinet/in.h>

\fBsocklen_t\fR \fBinet6_rth_space\fR(\fBint\fR \fItype\fR, \fBint\fR \fIsegments\fR);
.fi

.LP
.nf
\fBvoid *\fBinet6_rth_init\fR(\fBvoid *\fIbp\fR, \fBsocklen_t\fR \fIbp_len\fR, \fBint\fR \fItype\fR, \fBint\fR \fIsegments\fR);
.fi

.LP
.nf
\fBint\fR \fBinet6_rth_add\fR(\fBvoid *\fIbp\fR, \fBconst\fR \fIstruct\fR, \fBin6_addr *\fIaddr\fR);
.fi

.LP
.nf
\fBint\fR \fBinet6_rth_reverse\fR(\fBconst void *\fIin\fR, \fBvoid *\fIout\fR);
.fi

.LP
.nf
\fBint\fR \fBinet6_rth_segments\fR(\fBconst void *\fIbp\fR);
.fi

.LP
.nf
\fBstruct in6_addr *\fBinet6_rth_getaddr\fR(\fBconst void *\fIbp\fR, \fBint\fR \fIindex\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B inet6_rth
functions enable users to manipulate routing headers
without having knowledge of their structure.
.sp
.LP
The
.B iet6_rth_init()
function initializes the buffer pointed to by
.I bp
to contain a routing header of the specified type and sets
.B ip6r_len
based on the segments parameter. The
.I bp_len
argument is
used only to verify that the buffer is large enough. The
.B ip6r_segleft
field is set to zero and
.B inet6_rth_add()
increments it. The caller
allocates the buffer and its size can be determined by calling
.BR inet6_rth_space() .
.sp
.LP
The
.B inet6_rth_add()
function adds the IPv6 address pointed to by
.I addr
to the end of the routing header that is being constructed.
.sp
.LP
The
.B inet6_rth_reverse()
function takes a routing header extension
header pointed to by the first argument and writes a new routing header that
sends datagrams along the reverse of the route. The function reverses the
order of the addresses and sets the
.B segleft
member in the new routing
header to the number of segments. Both arguments can point to the same
buffer (that is, the reversal can occur in place).
.sp
.LP
The
.B inet6_rth_segments()
function returns the number of segments
(addresses) contained in the routing header described by
.IR bp .
.sp
.LP
The
.B inet6_rth_getaddr()
function returns a pointer to the IPv6
address specified by index, which must have a value between 0 and one less
than the value returned by
.B inet6_rth_segments()
in the routing header
described by
.IR bp .
Applications should first call
.B inet6_rth_segments()
to obtain the number of segments in the routing
header.
.sp
.LP
The
.B inet6_rth_space()
function returns the size, but the function
does not allocate the space required for the ancillary data routing
header.
.SH ROUTING HEADERS
.sp
.LP
To receive a routing header, the application must enable the
.B IPV6_RECVRTHDR
socket option:
.sp
.in +2
.nf
int  on = 1;
setsockopt (fd, IPPROTO_IPV6, IPV6_RECVRTHDR, &on, sizeof(on));
.fi
.in -2

.sp
.LP
Each received routing header is returned as one ancillary data object
described by a
.B cmsghdr
structure with
.B cmsg_type
set to
.BR IPV6_RTHDR .
.sp
.LP
To send a routing header, the application specifies it either as ancillary
data in a call to
.B sendmsg()
or by using
.BR setsockopt() .
For the
sending side, this
.B API
assumes the number of occurrences of the
routing header as described in
.IR RFC-2460 .
Applications can specify no
more than one outgoing routing header.
.sp
.LP
The application can remove any sticky routing header by calling
.B setsockopt()
for
.B IPV6_RTHDR
with a zero option length.
.sp
.LP
When using ancillary data, a routing header is passed between the
application and the kernel as follows: The
.B cmsg_level
member has a
value of
.B IPPROTO_IPV6
and the
.B cmsg_type
member has a value of
.BR IPV6_RTHDR .
The contents of the
.B cmsg_data
member is
implementation-dependent and should not be accessed directly by the
application, but should be accessed using the
.B inet6_rth
functions.
.sp
.LP
The following constant is defined as a result of including the
.RB < netinet/in.h >:
.sp
.in +2
.nf
#define IPV6_RTHDR_TYPE_0   0 /* IPv6 Routing header type 0 */
.fi
.in -2

.SS "ROUTING HEADER OPTION"
.sp
.LP
Source routing in IPv6 is accomplished by specifying a routing header as an
extension header. There are a number of different routing headers, but IPv6
currently defines only the Type 0 header. See
.IR RFC-2460 .
The Type 0
header supports up to 127 intermediate nodes, limited by the length field in
the extension header. With this maximum number of intermediate nodes, a
source, and a destination, there are 128 hops.
.SH RETURN VALUES
.sp
.LP
The
.B inet6_rth_init()
function returns a pointer to the buffer
.RI ( bp )
upon success.
.sp
.LP
For the
.B inet6_rth_add()
function, the
.B segleft
member of the
routing header is updated to account for the new address in the routing
header. The function returns
.B 0
upon success and
.B -1
upon
failure.
.sp
.LP
The
.B inet6_rth_reverse()
function returns
.B 0
upon success or
.B -1
upon an error.
.sp
.LP
The
.B inet6_rth_segments()
function returns
.B 0
or greater upon
success and
.B -1
upon an error.
.sp
.LP
The
.B inet6_rth_getaddr()
function returns
.B NULL
upon an error.
.sp
.LP
The
.B inet6_rth_space()
function returns the size of the buffer needed
for the routing header.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
RFC 3542- \fIAdvanced Sockets Application Programming Interface (API) for IPv6\fR, The Internet Society. May 2003
