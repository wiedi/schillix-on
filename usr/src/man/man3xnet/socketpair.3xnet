'\" te
.\" Copyright (c) 1992, X/Open Company Limited  All Rights Reserved
.\" Portions Copyright (c) 1998, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH socketpair 3XNET "10 Jun 2002" "SunOS 5.11" "X/Open Networking Services Library Functions"
.SH NAME
socketpair \- create a pair of connected sockets
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lxnet\fR [ \fIlibrary\fR .\|.\|. ]
#include <sys/socket.h>

\fBint\fR \fBsocketpair\fR(\fBint\fR \fIdomain\fR, \fBint\fR \fItype\fR, \fBint\fR \fIprotocol\fR, \fBint\fR \fIsocket_vector\fB[2]\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B socketpair()
function creates an unbound pair of connected
sockets in a specified
.IR domain ,
of a specified
.BR type ,
under the
protocol optionally specified by the
.I protocol
argument.  The two
sockets are identical. The file descriptors used in referencing the created
sockets are returned in \fIsocket_vector\fB0\fR and
\fIsocket_vector\fB1\fR.
.sp
.LP
The
.I type
argument specifies the socket type, which determines the
semantics of communications over the socket.  The socket types supported by
the system are implementation-dependent.  Possible socket types include:
.sp
.ne 2
.mk
.na
.B SOCK_STREAM
.ad
.RS 18n
.rt
Provides sequenced, reliable, bidirectional, connection-mode byte streams,
and may provide a transmission mechanism for out-of-band data.
.RE

.sp
.ne 2
.mk
.na
.B SOCK_DGRAM
.ad
.RS 18n
.rt
Provides datagrams, which are connectionless-mode, unreliable messages of
fixed maximum length.
.RE

.sp
.ne 2
.mk
.na
.B SOCK_SEQPACKET
.ad
.RS 18n
.rt
Provides sequenced, reliable, bidirectional, connection-mode transmission
path for records.  A record can be sent using one or more output operations
and received using one or more input operations, but a single operation
never transfers part of more than one record.  Record boundaries are visible
to the receiver via the MSG_EOR flag.
.RE

.sp
.LP
If the
.I protocol
argument is non-zero, it must specify a protocol that
is supported by the address family.  The protocols supported by the system
are implementation-dependent.
.sp
.LP
The process may need to have appropriate privileges to use the
.B socketpair()
function or to create some sockets.
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I domain
.ad
.RS 17n
.rt
Specifies the communications domain in which the sockets are to be
created.
.RE

.sp
.ne 2
.mk
.na
.I type
.ad
.RS 17n
.rt
Specifies the type of sockets to be created.
.RE

.sp
.ne 2
.mk
.na
.I protocol
.ad
.RS 17n
.rt
Specifies a particular protocol to be used with the sockets. Specifying a
.I protocol
of 0 causes
.B socketpair()
to use an unspecified default
protocol appropriate for the requested socket type.
.RE

.sp
.ne 2
.mk
.na
.I socket_vector
.ad
.RS 17n
.rt
Specifies a 2-integer array to hold the file descriptors of the created
socket pair.
.RE

.SH USAGE
.sp
.LP
The documentation for specific address families specifies which protocols
each address family supports.  The documentation for specific protocols
specifies which socket types each protocol supports.
.sp
.LP
The
.B socketpair()
function is used primarily with UNIX domain sockets
and need not be supported for other domains.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, this function returns 0.  Otherwise, \(mi1 is
returned and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B socketpair()
function will fail if:
.sp
.ne 2
.mk
.na
.B EAFNOSUPPORT
.ad
.RS 19n
.rt
The implementation does not support the specified address family.
.RE

.sp
.ne 2
.mk
.na
.B EMFILE
.ad
.RS 19n
.rt
No more file descriptors are available for this process.
.RE

.sp
.ne 2
.mk
.na
.B ENFILE
.ad
.RS 19n
.rt
No more file descriptors are available for the system.
.RE

.sp
.ne 2
.mk
.na
.B EOPNOTSUPP
.ad
.RS 19n
.rt
The specified protocol does not permit creation of socket pairs.
.RE

.sp
.ne 2
.mk
.na
.B EPROTONOSUPPORT
.ad
.RS 19n
.rt
The protocol is not supported by the address family, or the protocol is not
supported by the implementation.
.RE

.sp
.ne 2
.mk
.na
.B EPROTOTYPE
.ad
.RS 19n
.rt
The socket type is not supported by the protocol.
.RE

.sp
.LP
The
.B socketpair()
function may fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 11n
.rt
The process does not have appropriate privileges.
.RE

.sp
.ne 2
.mk
.na
.B ENOBUFS
.ad
.RS 11n
.rt
Insufficient resources were available in the system to perform the
operation.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 11n
.rt
Insufficient memory was available to fulfill the request.
.RE

.sp
.ne 2
.mk
.na
.B ENOSR
.ad
.RS 11n
.rt
There were insufficient STREAMS resources available for the operation to
complete.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR socket (3XNET),
.BR attributes (5),
.BR standards (5)
