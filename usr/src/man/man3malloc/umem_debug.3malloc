'\" te
.\" Copyright (c) 2002, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH umem_debug 3MALLOC "26 July 2002" "SunOS 5.11" "Memory Allocation Library Functions"
.SH NAME
umem_debug \- debugging features of the umem library
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lumem\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <\fBumem.h\fR>
.fi

.SH DESCRIPTION
.sp
.LP
The
.B libumem
library provides debugging features that detect memory
leaks, buffer overruns, multiple frees, use of uninitialized data, use of
freed data, and many other common programming errors. The activation of the
run-time debugging features is controlled by environment variables.
.sp
.LP
When the library detects an error, it writes a description of the error to
an internal buffer that is readable with the
.BR ::umem_status
.BR mdb (1)
.I dcmd
and then calls
.BR abort (3C).
.SH ENVIRONMENT VARIABLES
.sp
.ne 2
.mk
.na
.B UMEM_DEBUG
.ad
.RS 16n
.rt
This variable contains a list of comma-separated options.  Unrecognized
options are ignored. Possible options include:
.sp
.ne 2
.mk
.na
\fBaudit\fR[=\fIframes\fR]\fR
.ad
.RS 20n
.rt
This option enables the recording of auditing information, including thread
ID, high-resolution time stamp, and stack trace for the last action
(allocation or free) on every allocation.  If transaction logging (see
.BR UMEM_LOGGING )
is enabled, this auditing information is also logged.
.sp
The
.I frames
parameter sets the number of stack frames recorded in the
auditing structure. The upper bound for frames is implementation-defined. If
a larger value is requested, the upper bound is used instead.
.sp
If
.I frames
is not specified or is not an integer, the default value of
15 is used.
.sp
This option also enables the
.B guards
option.
.RE

.sp
.ne 2
.mk
.na
\fBcontents\fR[=\fIcount\fR]\fR
.ad
.RS 20n
.rt
If auditing and contents logging (see
.BR UMEM_LOGGING )
are enabled, the
first
.I count
bytes of each buffer are logged when they are freed.  If a
buffer is shorter than
.I count
bytes, it is logged in its entirety.
.sp
If
.I count
is not specified or is not an integer, the default value of
256 is used.
.RE

.sp
.ne 2
.mk
.na
.B default
.ad
.RS 20n
.rt
This option is equivalent to \fBaudit\fR,\fBcontents\fR,\fBguards\fR.
.RE

.sp
.ne 2
.mk
.na
.B guards
.ad
.RS 20n
.rt
This option enables filling allocated and freed buffers with special
patterns to help detect the use of uninitialized data and previously freed
buffers. It also enables an 8-byte redzone after each buffer that contains
.BR 0xfeedfacefeedfaceULL .
.sp
When an object is freed, it is filled with
.BR 0xdeadbeef .
When an
object is allocated, the
.B 0xdeadbeef
pattern is verified and replaced
with
.BR 0xbaddcafe .
The redzone is checked every time a buffer is
allocated or freed.
.sp
For caches with either constructors or destructors, or both,
.BR umem_cache_alloc (3MALLOC)
and \fBumem_cache_free\fR(3MALLOC) apply the
cache's constructor and destructor, respectively, instead of caching
constructed objects. The presence of \fBassert\fR(3C)s in the destructor
verifying that the buffer is in the constructed state can be used to detect
any objects returned in an improper state.  See
.BR umem_cache_create (3MALLOC)
for details.
.RE

.sp
.ne 2
.mk
.na
.B verbose
.ad
.RS 20n
.rt
The library writes error descriptions to standard error before aborting.
These messages are not localized.
.RE

.RE

.sp
.ne 2
.mk
.na
.B UMEM_LOGGING
.ad
.RS 16n
.rt
To be enabled, this variable should be set to a comma-separated list of
in-memory logs. The logs available are:
.sp
.ne 2
.mk
.na
\fBtransaction\fR[=\fIsize\fR]\fR
.ad
.RS 22n
.rt
If the
.B audit
debugging option is set (see
.BR UMEM_DEBUG ),
the
audit structures from previous transactions are entered into this log.
.RE

.sp
.ne 2
.mk
.na
\fBcontents\fR[=\fIsize\fR]\fR
.ad
.RS 22n
.rt
If the
.B audit
debugging option is set, the contents of objects are
recorded in this log as they are freed.
.sp
If the "contents" debugging option was not set, 256 bytes of each freed
buffer are saved.
.RE

.sp
.ne 2
.mk
.na
\fBfail\fR[=\fIsize\fR]\fR
.ad
.RS 22n
.rt
Records are entered into this log for every failed allocation.
.RE

For any of these options, if
.I size
is not specified, the default value
of 64k is used.  The
.I size
parameter must be an integer that can be
qualified with K, M, G, or T to specify kilobytes, megabytes, gigabytes, or
terabytes, respectively.
.sp
Logs that are not listed or that have either a size of 0 or an invalid size
are disabled.
.sp
The log is disabled if during initialization the requested amount of
storage cannot be allocated.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityUnstable
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR mdb (1),
.BR abort (3C),
.BR signal (3C),
.BR umem_cache_create (3MALLOC),
.BR attributes (5)
.sp
.LP
.I Solaris Modular Debugger Guide
.SH WARNINGS
.sp
.LP
When
.B libumem
aborts the process using
.BR abort "(3C), any existing"
signal handler for
.B SIGABRT
is called. If the signal handler performs
allocations, undefined behavior can result.
.SH NOTES
.sp
.LP
Some of the debugging features work only for allocations smaller than 16
kilobytes in size. Allocations larger than 16 kilobytes could have reduced
support.
.sp
.LP
Activating any of the library's debugging features could significantly
increase the library's memory footprint and decrease its performance.
