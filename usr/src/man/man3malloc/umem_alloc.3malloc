'\" te
.\" Copyright (c) 2008 Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH umem_alloc 3MALLOC "24 Mar 2008" "SunOS 5.11" "Memory Allocation Library Functions"
.SH NAME
umem_alloc, umem_zalloc, umem_free, umem_nofail_callback \- fast, scalable
memory allocation
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag \&.\|.\|.\fR ] \fIfile\fR\&.\|.\|. \fB-lumem\fR [ \fIlibrary \&.\|.\|.\fR ]
#include <umem.h>

\fBvoid *\fBumem_alloc\fR(\fBsize_t\fR \fIsize\fR, \fBint\fR  \fIflags\fR);
.fi

.LP
.nf
\fBvoid *\fBumem_zalloc\fR(\fBsize_t\fR \fIsize\fR, \fBint\fR  \fIflags\fR);
.fi

.LP
.nf
\fBvoid\fR \fBumem_free\fR(\fBvoid *\fIbuf\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBvoid\fR \fBumem_nofail_callback\fR(\fB(int (*\fIcallback\fR)(void));
.fi

.LP
.nf
\fBvoid *\fBmalloc\fR(\fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBvoid *\fBcalloc\fR(\fBsize_t\fR \fInelem\fR, \fBsize_t\fR \fIelsize\fR);
.fi

.LP
.nf
\fBvoid\fR \fBfree\fR(\fBvoid *\fIptr\fR);
.fi

.LP
.nf
\fBvoid *\fBmemalign\fR(\fBsize_t\fR \fIalignment\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBvoid *\fBrealloc\fR(\fBvoid *\fIptr\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBvoid *\fBvalloc\fR(\fBsize_t\fR \fIsize\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B umem_alloc()
function returns a pointer to a block of
.IR size
bytes suitably aligned for any variable type. The initial contents of memory
allocated using
.B umem_alloc()
is undefined. The
.I flags
argument
determines the behavior of
.B umem_alloc()
if it is unable to fulfill the
request. The
.I flags
argument can take the following values:
.sp
.ne 2
.mk
.na
.B UMEM_DEFAULT
.ad
.RS 16n
.rt
Return
.I NULL
on failure.
.RE

.sp
.ne 2
.mk
.na
.B UMEM_NOFAIL
.ad
.RS 16n
.rt
Call an optional
.I callback
(set with
.BR umem_nofail_callback() )
on
failure. The
.I callback
takes no arguments and can finish by:
.RS +4
.TP
.ie t \(bu
.el o
returning
.BR UMEM_CALLBACK_RETRY ,
in which case the allocation will be
retried. If the allocation fails, the callback will be invoked again.
.RE
.RS +4
.TP
.ie t \(bu
.el o
returning \fBUMEM_CALLBACK_EXIT\fR(\fIstatus\fR), in which case
.BR exit (2)
is invoked with
.I status
.RB "as its argument. The" " exit()"
function is called only once. If multiple threads return from the
\fBUMEM_NOFAIL\fR callback with \fBUMEM_CALLBACK_EXIT\fR(\fIstatus\fR), one
will call
.B exit()
while the other blocks until
.B exit()
terminates
the program.
.RE
.RS +4
.TP
.ie t \(bu
.el o
invoking a context-changing function
.RB ( setcontext (2))
or a non-local
jump
.RB ( longjmp (3C)
or
.BR siglongjmp (3C),
or ending the current
thread of control
.RB ( thr_exit (3C)
or
.BR pthread_exit (3C).
The
application is responsible for any necessary cleanup. The state of
.B libumem
remains consistent.
.RE
If no callback has been set or the callback has been set to
.IR NULL ,
.BR umem_alloc (.\|.\|.,
.BR UMEM_NOFAIL )
behaves as though the callback
returned
.BR UMEM_CALLBACK_EXIT (255).
.sp
The
.B libumem
library can call callbacks from any place that a
.B UMEM_NOFAIL
allocation is issued. In multithreaded applications,
callbacks are expected to perform their own concurrency management.
.RE

.sp
.LP
The function call
.BR umem_alloc (0,
.IR flag )
always returns
.IR NULL .
The function call \fBumem_free\fR(\fINULL\fR, 0) is allowed.
.sp
.LP
The
.B umem_zalloc()
function has the same semantics as
.BR umem_alloc() ,
but the block of memory is initialized to zeros before
it is returned.
.sp
.LP
The
.B umem_free()
function frees blocks previously allocated using
.B umem_alloc()
and
.BR umem_zalloc() .
The buffer address and size must
exactly match the original allocation. Memory must not be returned
piecemeal.
.sp
.LP
The
.B umem_nofail_callback()
function sets the process-wide UMEM_NOFAIL
callback. See the description of UMEM_NOFAIL for more information.
.sp
.LP
The
.BR malloc() ,
.BR calloc() ,
.BR free() ,
.BR memalign() ,
.BR realloc() ,
and
.B valloc()
functions are as described in
.BR malloc (3C).
The
.B libumem
library provides these functions for
backwards-compatibility with the standard functions.
.SH ENVIRONMENT VARIABLES
.sp
.LP
See
.BR umem_debug (3MALLOC)
for environment variables that effect the
debugging features of the
.B libumem
library.
.sp
.ne 2
.mk
.na
.B UMEM_OPTIONS
.ad
.RS 16n
.rt
Contains a list of comma-separated options.  Unrecognized options are
ignored. The options that are supported are:
.sp
.ne 2
.mk
.na
\fBbackend\fR=\fBsbrk\fR
.ad
.br
.na
\fBbackend\fR=\fBmmap\fR
.ad
.RS 16n
.rt
Set the underlying function used to allocate memory. This option can be set
to
.B sbrk
(the default) for an
.BR sbrk (2)-based
source or \fBmmap\fR
for an
.BR mmap (2)-based
source. If set to a value that is not supported,
.B sbrk
will be used.
.RE

.RE

.SH EXAMPLES
.LP
.B Example 1
Using the
.B umem_alloc()
function.
.sp
.in +2
.nf
#include <stdio.h>
#include <umem.h>
\&.\|.\|.
char *buf = umem_alloc(1024, UMEM_DEFAULT);

if (buf == NULL) {
     fprintf(stderr, "out of memory\en");
          return (1);
}
/* cannot assume anything about buf's contents */
\&.\|.\|.
umem_free(buf, 1024);
\&.\|.\|.
.fi
.in -2

.LP
.B Example 2
Using the
.B umem_zalloc()
function
.sp
.in +2
.nf
#include <stdio.h>
#include <umem.h>
\&.\|.\|.
char *buf = umem_zalloc(1024, UMEM_DEFAULT);

if (buf == NULL) {
    fprintf(stderr, "out of memory\en");
         return (1);
}
/* buf contains zeros */
\&.\|.\|.
umem_free(buf, 1024);
\&.\|.\|.
.fi
.in -2

.LP
.B Example 3
Using UMEM_NOFAIL
.sp
.in +2
.nf
#include <stdlib.h>
#include <stdio.h>
#include <umem.h>

/*
 * Note that the allocation code below does not have to
 * check for umem_alloc() returning NULL
 */
int
my_failure_handler(void)
{
         (void) fprintf(stderr, "out of memory\en");
         return (UMEM_CALLBACK_EXIT(255));
}
\&.\|.\|.
umem_nofail_callback(my_failure_handler);
\&.\|.\|.
int i;
char *buf[100];

for (i = 0; i < 100; i++)
         buf[i] = umem_alloc(1024 * 1024, UMEM_NOFAIL);
\&.\|.\|.
for (i = 0; i < 100; i++)
    umem_free(buf[i], 1024 * 1024);
\&.\|.\|.
.fi
.in -2

.LP
.B Example 4
Using UMEM_NOFAIL in a multithreaded application
.sp
.in +2
.nf
#define _REENTRANT
#include <thread.h>
#include <stdio.h>
#include <umem.h>

void *
start_func(void *the_arg)
{
          int *info = (int *)the_arg;
          char *buf = umem_alloc(1024 * 1024, UMEM_NOFAIL);

          /* does not need to check for buf == NULL */
          buf[0] = 0;
          .\|.\|.
          /*
           * if there were other UMEM_NOFAIL allocations,
           * we would need to arrange for buf to be
           * umem_free()ed upon failure.
           */
          .\|.\|.
          umem_free(buf, 1024 * 1024);
          return (the_arg);
}
\&.\|.\|.
int
my_failure_handler(void)
{
         /* terminate the current thread with status NULL */
         thr_exit(NULL);
}
\&.\|.\|.
umem_nofail_callback(my_failure_handler);
\&.\|.\|.
int my_arg;

thread_t tid;
void *status;

(void) thr_create(NULL, NULL, start_func, &my_arg, 0,
    NULL);
\&.\|.\|.
while (thr_join(0, &tid, &status) != 0)
          ;

if (status == NULL) {
    (void) fprintf(stderr, "thread %d ran out of memory\en",
             tid);
}
\&.\|.\|.
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
_
StandardSee below.
.TE

.sp
.LP
For
.BR malloc() ,
.BR calloc() ,
.BR free() ,
.BR realloc() ,
and
.BR valloc() ,
see
.BR standards (5).
.SH SEE ALSO
.sp
.LP
.BR exit (2),
.BR mmap (2),
.BR sbrk (2),
.BR bsdmalloc (3MALLOC),
.BR libumem (3LIB),
.BR longjmp (3C),
.BR malloc (3C),
.BR malloc (3MALLOC),
.BR mapmalloc (3MALLOC),
.BR pthread_exit (3C),
.BR thr_exit (3C),
.BR umem_cache_create (3MALLOC),
.BR umem_debug (3MALLOC),
.BR watchmalloc (3MALLOC),
.BR attributes (5),
.BR standards (5)
.sp
.LP
.I Solaris Modular Debugger Guide
.SH WARNINGS
.sp
.LP
Any of the following can cause undefined results:
.RS +4
.TP
.ie t \(bu
.el o
Passing a pointer returned from
.B umem_alloc()
or
.BR umem_zalloc()
to
.B free()
or
.BR realloc() .
.RE
.RS +4
.TP
.ie t \(bu
.el o
Passing a pointer returned from
.BR malloc() ,
.BR calloc() ,
.BR valloc() ,
.BR memalign() ,
or
.B realloc()
to
.BR umem_free() .
.RE
.RS +4
.TP
.ie t \(bu
.el o
Writing past the end of a buffer allocated using
.B umem_alloc()
or
.B umem_zalloc()
.RE
.RS +4
.TP
.ie t \(bu
.el o
Performing
.B UMEM_NOFAIL
allocations from an
.BR atexit (3C)
handler.
.RE
.sp
.LP
If the
.B UMEM_NOFAIL
callback performs
.B UMEM_NOFAIL
allocations,
infinite recursion can occur.
.SH NOTES
.sp
.LP
The following list compares the features of the
.BR malloc (3C),
.BR bsdmalloc (3MALLOC),
.BR malloc (3MALLOC),
.BR mtmalloc (3MALLOC)
,
and the
.B libumem
functions.
.RS +4
.TP
.ie t \(bu
.el o
The
.BR malloc (3C),
.BR bsdmalloc (3MALLOC),
and
.BR malloc (3MALLOC)
functions have no support for concurrency. The
.B libumem
and
.BR mtmalloc (3MALLOC)
functions support concurrent allocations.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The
.BR bsdmalloc (3MALLOC)
functions afford better performance but are
space-inefficient.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The
.BR malloc (3MALLOC)
functions are space-efficient but have slower
performance.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The standard, fully SCD-compliant
.BR malloc (3C)
functions are a
trade-off between performance and space-efficiency.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The
.BR mtmalloc (3MALLOC)
functions provide fast, concurrent
.B malloc()
implementations that are not space-efficient.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The
.B libumem
functions provide a fast, concurrent allocation
implementation that in most cases is more space-efficient than
.BR mtmalloc (3MALLOC).
.RE
