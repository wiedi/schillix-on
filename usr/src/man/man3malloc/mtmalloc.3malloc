'\" te
.\" Copyright 1989 AT&T.  Copyright (c) 2004, Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH mtmalloc 3MALLOC "21 Mar 2005" "SunOS 5.11" "Memory Allocation Library Functions"
.SH NAME
mtmalloc, mallocctl \- MT hot memory allocator
.SH SYNOPSIS
.LP
.nf
#include <mtmalloc.h>
cc -o a.out -lthread -lmtmalloc

\fBvoid *\fBmalloc\fR(\fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBvoid\fR \fBfree\fR(\fBvoid *\fIptr\fR);
.fi

.LP
.nf
\fBvoid *\fBmemalign\fR(\fBsize_t\fR \fIalignment\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBvoid *\fBrealloc\fR(\fBvoid *\fIptr\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBvoid *\fBvalloc\fR(\fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBvoid\fR \fBmallocctl\fR(\fBint\fR \fIcmd\fR, \fBlong\fR \fIvalue\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B malloc()
and \fBfree()\fR functions provide a simple general-purpose
memory allocation package that is suitable for use in high performance
multithreaded applications. The suggested use of this library is in multithreaded
applications; it can be used for single threaded applications, but there is no
advantage in doing so. This library cannot be dynamically loaded with
.BR dlopen (3C)
during runtime because there must be only one manager of the
process heap.
.sp
.LP
The
.B malloc()
function returns a pointer to a block of at least
.IR size
bytes suitably aligned for any use.
.sp
.LP
The argument to \fBfree()\fR is a pointer to a block previously allocated by
\fBmalloc()\fR or
.BR realloc() .
After \fBfree()\fR is performed this space is
available for further allocation. If 
.I ptr
is a null pointer, no action
occurs. The \fBfree()\fR function does not set \fBerrno\fR.
.sp
.LP
Undefined results will occur if the space assigned by
.B malloc()
is overrun
or if a random number is handed to
.BR free() .
A freed pointer that is passed
to \fBfree()\fR will send a 
.B SIGABRT
signal to the calling process. This
behavior is controlled by
.BR mallocctl() .
.sp
.LP
The
.B memalign()
function allocates
.I size
bytes on a specified
alignment boundary and returns a pointer to the allocated block. The value of the
returned address is guaranteed to be an even multiple of
.IR alignment .
Note
that the value of
.I alignment
must be a power of two, and must be greater
than or equal to the size of a word.
.sp
.LP
The
.B realloc()
function changes the size of the block pointed to by
\fIptr\fR to \fIsize\fR bytes and returns a pointer to the (possibly moved)
block. The contents will be unchanged up to the lesser of the new and old sizes.
If the new size of the block requires movement of the block, the space for the
previous instantiation of the block is freed. If the new size is larger, the
contents of the newly allocated portion of the block are unspecified. If
\fIptr\fR is
.IR NULL ,
\fBrealloc()\fR behaves like \fBmalloc()\fR for the
specified size. If
.I size
is 0 and
.I ptr
is not a null pointer, the space
pointed to is freed.
.sp
.LP
The
.B valloc()
function has the same effect as
.BR malloc() ,
except that
the allocated memory will be aligned to a multiple of the value returned by
\fBsysconf\fR(\fB_SC_PAGESIZE\fR).
.sp
.LP
After possible pointer coercion, each allocation routine returns  a pointer to a
space that is suitably aligned  for storage of any type of object.
.sp
.LP
The
.BR malloc() ,
.BR realloc() ,
.BR memalign() ,
and
.BR valloc()
functions will fail if there is not enough available memory.
.sp
.LP
The
.B mallocctl()
function controls the behavior of the
.BR malloc
library. The options fall into two general classes, debugging options and
performance options.
.sp
.ne 2
.mk
.na
.B MTDOUBLEFREE
.ad
.RS 18n
.rt
Allows double  \fBfree\fR of a pointer.   Setting
.I value
to
.B 1
means
yes and
.B 0
means no. The default behavior of double \fBfree\fR results in a
core dump.
.RE

.sp
.ne 2
.mk
.na
.B MTDEBUGPATTERN
.ad
.RS 18n
.rt
Writes misaligned data into the buffer after
.BR free() .
When the buffer is
reallocated, the contents are verified to ensure that there was no access to the
buffer after the
.BR free .
If the buffer has been dirtied, a  \fBSIGABRT\fR
signal is delivered to the process. Setting 
.I value
to
.B 1
means yes and
\fB0\fR means no. The default behavior is to  \fInot\fR write misaligned data.
The pattern used  is
.BR 0xdeadbeef .
Use of this option results in a
performance penalty.
.RE

.sp
.ne 2
.mk
.na
.B MTINITBUFFER
.ad
.RS 18n
.rt
Writes misaligned data into the newly allocated buffer. This option is useful
for detecting some accesses before initialization. Setting
.I value
to
.BR 1
means yes and
.B 0
means no. The default behavior is to
.I not
write
misaligned data to the newly allocated buffer. The pattern used is
\fB0xbaddcafe\fR. Use of this option results in a performance penalty.
.RE

.sp
.ne 2
.mk
.na
.B MTCHUNKSIZE
.ad
.RS 18n
.rt
This option changes the size of allocated memory when a pool has exhausted all
available memory in the buffer. Increasing this  value allocates more memory for
the application.  A substantial  performance gain can occur because the library
makes fewer calls  to the OS for more memory. Acceptable number \fIvalue\fRs are
between
.B 9
and
.BR 256 .
The default value is
.BR 9 .
This value is
multiplied by 8192.
.RE

.SH RETURN VALUES
.sp
.LP
If there is no available memory,
.BR malloc() ,
.BR realloc() ,
.BR memalign() ,
and
.B valloc()
.RB "return a null pointer. When" " realloc()"
is called with
.I size
> 0 and returns
.IR NULL ,
the block pointed to by
\fIptr\fR is left intact. If
.IR size ,
.IR nelem ,
or
.I elsize
is 0,
either a null pointer or a unique pointer that can be passed to \fBfree()\fR is
returned.
.sp
.LP
If
.B malloc()
or
.B realloc()
returns unsuccessfully,
.B errno
will be
set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B malloc()
and
.B realloc()
functions will fail if:
.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
The physical limits of the system are exceeded by
.I size
bytes of memory
which cannot be allocated.
.RE

.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
There is not enough memory available to allocate
.I size
bytes of memory; but
the application could try again later.
.RE

.SH USAGE
.sp
.LP
Comparative features of the various allocation libraries can be found in the
.BR umem_alloc (3MALLOC)
manual page.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR brk (2),
.BR getrlimit (2),
.BR bsdmalloc (3MALLOC),
.BR dlopen (3C),
.BR malloc (3C),
.BR malloc (3MALLOC),
.BR mapmalloc (3MALLOC),
.BR signal.h (3HEAD),
.BR umem_alloc (3MALLOC),
.BR watchmalloc (3MALLOC),
.BR attributes (5)
.SH WARNINGS
.sp
.LP
Undefined results will occur if the size requested for a block of memory exceeds
the maximum size of a process's heap. This information may be obtained using
.BR getrlimit() .
