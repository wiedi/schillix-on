'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH bsdmalloc 3MALLOC "21 Mar 2005" "SunOS 5.11" "Memory Allocation Library Functions"
.SH NAME
bsdmalloc \- memory allocator
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lbsdmalloc\fR [ \fIlibrary\fR .\|.\|. ]

\fBchar *\fBmalloc\fR(\fIsize\fRunsigned \fIsize\fR;
.fi

.LP
.nf
\fBint\fR \fBfree\fR(\fR \fIptr\fRchar *\fIptr\fR;
.fi

.LP
.nf
\fBchar *\fBrealloc\fR(\fR \fIptr\fR, \fIsize\fRchar *\fIptr\fR;
unsigned \fIsize\fR;
.fi

.SH DESCRIPTION
.sp
.LP
These routines provide a general-purpose memory allocation package. They
maintain a table of free blocks for efficient allocation and coalescing of
free storage. When there is no suitable space already free, the allocation
routines call
.BR sbrk (2)
to get more memory from the system. Each of the
allocation routines returns a pointer  to  space suitably aligned for
storage of any type of object. Each returns a null pointer if the request
cannot be completed.
.sp
.LP
The
.B malloc()
function returns a pointer to  a block of at least
.I size
bytes, which is appropriately aligned.
.sp
.LP
The
.B free()
function releases a previously allocated block. Its
argument is a pointer to a block previously allocated by
.B malloc()
or
.BR realloc() .
The
.B free()
function does not set
.BR errno .
.sp
.LP
The
.B realloc()
function changes the size of the block pointed to by
.I ptr
to
.I size
bytes and returns a pointer to the (possibly moved)
block. The contents will be unchanged up to the lesser of the new and old
sizes. If the new size of the block requires movement of the block, the
space for the previous instantiation of the block is freed. If the new size
is larger, the contents of the newly allocated portion of the block are
unspecified. If
.I ptr
is
.IR NULL ,
.B realloc()
behaves like
.B malloc()
for the specified size. If
.I size
is 0 and
.I ptr
is
not a null pointer, the space pointed to is freed.
.SH RETURN VALUES
.sp
.LP
The
.B malloc()
and
.B realloc()
functions return a null pointer if
there is not enough available memory. They  return a non-null pointer if
.I size
is 0. These pointers should not be dereferenced. When
.B realloc()
returns
.IR NULL ,
the block pointed to by
.I ptr
is
left intact. Always cast the value returned by
.B malloc()
and
.BR realloc() .
.SH ERRORS
.sp
.LP
If
.B malloc()
or
.B realloc()
returns  unsuccessfully,
.B errno
will be set to indicate the following:
.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
.I size
bytes of memory cannot be allocated because it exceeds the
physical limits of the system.
.RE

.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
There is not enough memory available at this point in time to allocate
.I size
bytes of memory; but the application could try again later.
.RE

.SH USAGE
.sp
.LP
Using
.B realloc()
with a block freed before the most recent call to
.B malloc()
or
.B realloc()
results in an error.
.sp
.LP
Comparative features of the various allocation libraries can be found in
the
.BR umem_alloc "(3MALLOC) manual page."
.SH SEE ALSO
.sp
.LP
.BR brk (2),
.BR malloc (3C),
.BR malloc (3MALLOC),
.BR mapmalloc (3MALLOC),
.BR umem_alloc (3MALLOC)
.SH WARNINGS
.sp
.LP
Use of
.B libbsdmalloc
renders an application non-SCD compliant.
.sp
.LP
The
.B libbsdmalloc
routines are incompatible with the memory allocation
routines in the standard C-library (libc):
.BR malloc (3C),
.BR alloca (3C),
.BR calloc (3C),
.BR free (3C),
.BR memalign (3C),
.BR realloc (3C),
and
.BR valloc (3C).
