'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH watchmalloc 3MALLOC "10 Jan 2007" "SunOS 5.11" "Memory Allocation Library Functions"
.SH NAME
watchmalloc \- debugging memory allocator
.SH SYNOPSIS
.LP
.nf
#include <stdlib.h>

\fBvoid *\fBmalloc\fR(\fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBvoid\fR \fBfree\fR(\fBvoid *\fIptr\fR);
.fi

.LP
.nf
\fBvoid *\fBrealloc\fR(\fBvoid *\fIptr\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBvoid *\fBmemalign\fR(\fBsize_t\fR \fIalignment\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBvoid *\fBvalloc\fR(\fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBvoid *\fBcalloc\fR(\fBsize_t\fR \fInelem\fR, \fBsize_t\fR \fIelsize\fR);
.fi

.LP
.nf
#include <malloc.h>

\fBint\fR \fBmallopt\fR(\fBint\fR \fIcmd\fR, \fBint\fR \fIvalue\fR);
.fi

.LP
.nf
\fBstruct mallinfo\fR \fBmallinfo\fR(\fBvoid\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The collection of
.B malloc()
functions in this shared object are an
optional replacement for the standard versions of the same  functions in the
system C library. See \fBmalloc\fR(3C). They provide a more strict interface
than the standard versions and enable enforcement of the interface through
the watchpoint facility of
.BR /proc .
See
.BR proc (4).
.sp
.LP
Any dynamically linked application can be run with these functions in place
of the standard functions if the following string is present in the
environment (see
.BR ld.so.1 (1)):
.sp
.in +2
.nf
 LD_PRELOAD=watchmalloc.so.1
.fi
.in -2

.sp
.LP
The individual function interfaces are identical to the standard ones as
described in
.BR malloc "(3C). However, laxities provided in the standard"
versions are not permitted when the watchpoint facility is enabled (see
.B WATCHPOINTS
below):
.RS +4
.TP
.ie t \(bu
.el o
Memory may not be freed more than once.
.RE
.RS +4
.TP
.ie t \(bu
.el o
A pointer to freed memory may not be used in a call to
.BR realloc() .
.RE
.RS +4
.TP
.ie t \(bu
.el o
A call to
.B malloc()
immediately following a call to
.B free()
will
not return the same space.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Any reference to memory that has been freed yields undefined results.
.RE
.sp
.LP
To enforce these restrictions partially, without great loss in speed as
compared to the watchpoint facility described below, a freed block of memory
is overwritten with the pattern
.B 0xdeadbeef
before returning from
.BR free() .
The
.B malloc()
function returns with the allocated memory
filled with the pattern
.B 0xbaddcafe
as a precaution against
applications incorrectly expecting to receive back unmodified memory from
the last
.BR free() .
The
.B calloc()
function always returns with the
memory zero-filled.
.sp
.LP
Entry points for
.B mallopt()
and
.B mallinfo()
are provided as empty
routines, and are present only because some
.B malloc()
implementations
provide them.
.SH WATCHPOINTS
.sp
.LP
The watchpoint facility of
.B /proc
can be applied by a process to
itself. The functions in
.B watchmalloc.so.1
use this feature if the
following string is present in the environment:
.sp
.LP
MALLOC_DEBUG=WATCH
.sp
.LP
This causes every block of freed memory to be covered with
.BR WA_WRITE
watched areas. If the application attempts to write any part of freed
.RB "memory, it will trigger a watchpoint trap, resulting in a" " SIGTRAP"
signal, which normally produces an  application core dump.
.sp
.LP
A header is maintained before each block of allocated memory. Each header
is covered with a watched area, thereby providing a red zone before and
after each block of allocated memory (the header for the subsequent memory
block serves as the trailing red zone for its preceding memory block).
Writing just before or just after a memory block returned by
.BR malloc()
will trigger a watchpoint trap.
.sp
.LP
Watchpoints incur a large performance penalty. Requesting
.B MALLOC_DEBUG=WATCH
can cause the application to run 10 to 100 times
slower, depending on the use made of allocated memory.
.sp
.LP
Further options are enabled by specifying a comma-separated string of
options:
.sp
.LP
MALLOC_DEBUG=WATCH,RW,STOP
.sp
.ne 2
.mk
.na
.B WATCH
.ad
.RS 9n
.rt
Enables
.B WA_WRITE
watched areas as described above.
.RE

.sp
.ne 2
.mk
.na
.B RW
.ad
.RS 9n
.rt
Enables both
.B WA_READ
and
.B WA_WRITE
watched areas. An attempt
either to read or write freed memory or the red zones will trigger a
watchpoint trap. This incurs even more overhead and can cause the
application to run up to 1000 times slower.
.RE

.sp
.ne 2
.mk
.na
.B STOP
.ad
.RS 9n
.rt
The process will stop showing a
.B FLTWATCH
machine fault if it triggers
a watchpoint trap, rather than dumping core with a
.B SIGTRAP
signal.
This allows a debugger to be attached to the live process at the point where
it underwent the watchpoint trap. Also, the various
.B /proc
tools
described in
.BR proc (1)
can be used to examine the stopped process.
.RE

.sp
.LP
One of
.B WATCH
or
.B RW
must be specified, else the watchpoint
facility is not engaged.
.B RW
overrides
.BR WATCH .
Unrecognized
options are silently ignored.
.SH LIMITATIONS
.sp
.LP
Sizes of memory blocks allocated by
.B malloc()
are rounded up to the
worst-case alignment size, 8 bytes for 32-bit processes and 16 bytes for
64-bit processes. Accessing the extra space allocated for a memory block is
technically a memory violation but is in fact innocuous. Such accesses are
not detected by the watchpoint facility of
.BR watchmalloc .
.sp
.LP
Interposition of
.B watchmalloc.so.1
fails innocuously if the target
application is statically linked with respect to its
.BR malloc()
functions.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR proc (1),
.BR bsdmalloc (3MALLOC),
.BR calloc (3C),
.BR free (3C),
.BR malloc (3C),
.BR malloc (3MALLOC),
.BR mapmalloc (3MALLOC),
.BR memalign (3C),
.BR realloc (3C),
.BR valloc (3C),
.BR libmapmalloc (3LIB),
.BR proc (4),
.BR attributes (5)
