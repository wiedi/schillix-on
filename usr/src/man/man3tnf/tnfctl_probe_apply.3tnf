'\" te
.\" Copyright (c) 2004 Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH tnfctl_probe_apply 3TNF "1 Mar 2004" "SunOS 5.11" "TNF Library Functions"
.SH NAME
tnfctl_probe_apply, tnfctl_probe_apply_ids \- iterate over probes
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-ltnfctl\fR [ \fIlibrary\fR .\|.\|. ]
#include <tnf/tnfctl.h>

\fBtnfctl_errcode_t\fR \fBtnfctl_probe_apply\fR(\fBtnfctl_handle_t *\fIhndl\fR,
     \fBtnfctl_probe_op_t\fR \fIprobe_op\fR, \fBvoid *\fIclientdata\fR);
.fi

.LP
.nf
\fBtnfctl_errcode_t\fR \fBtnfctl_probe_apply_ids\fR(\fBtnfctl_handle_t *\fIhndl\fR,
     \fBulong_t\fR \fIprobe_count\fR, \fBulong_t *\fIprobe_ids\fR,
     \fBtnfctl_probe_op_t\fR \fIprobe_op\fR, \fBvoid *\fIclientdata\fR);
.fi

.SH DESCRIPTION
.sp
.LP
.B tnfctl_probe_apply()
is used to iterate over the probes controlled by
.I hndl.
For every probe, the
.I probe_op
function is called:
.sp
.in +2
.nf
typedef tnfctl_errcode_t (*tnfctl_probe_op_t)(
	tnfctl_handle_t *hndl,
	tnfctl_probe_t *probe_hndl,
	void *clientdata);
.fi
.in -2

.sp
.LP
Several predefined functions are available for use as
.IR probe_op .
These
functions are described in
.BR tnfctl_probe_state_get (3TNF).
.sp
.LP
The
.I clientdata
supplied in
.B tnfctl_probe_apply()
is passed in as
the last argument of
.IR probe_op .
The
.I probe_hndl
in the probe
operation function can be used to query or change the state of  the probe.  See
.BR tnfctl_probe_state_get (3TNF).
The
.I probe_op
function should return
.B TNFCTL_ERR_NONE
upon success.  It can also return an error code,  which
will cause
.B tnfctl_probe_apply()
to stop processing the rest of the probes
and return with the same error code. Note that there are five (5) error codes
reserved that the client can use for its own semantics. See
.BR ERRORS .
.sp
.LP
The lifetime of
.I probe_hndl
is the same as the lifetime of
.IR hndl .
It
is good until
.I hndl
is closed by
.BR tnfctl_close (3TNF).
Do not confuse
a
.I probe_hndl
with
.IR hndl .
The
.I probe_hndl
refers to a particular
probe, while
.I hndl
refers to a process or the kernel. If
.I probe_hndl
is used in another
.BR libtnfctl (3TNF)
interface, and it references a probe
in a library that has been  dynamically closed (see
.BR dlclose (3C)),
then
the error code
.B TNFCTL_ERR_INVALIDPROBE
will be returned by that
interface.
.sp
.LP
.B tnfctl_probe_apply_ids()
is very similar to
.BR tnfctl_probe_apply() .
The difference is that
.I probe_op
is called only for probes that match a
probe id specified in the array of integers referenced by
.IR probe_ids .
The
number of probe ids in the array should be specified in
.IR probe_count .
Use
.B tnfctl_probe_state_get()
to get the
.I probe_id
that corresponds to
the
.IR probe_handl .
.SH RETURN VALUES
.sp
.LP
.B tnfctl_probe_apply()
and
.B tnfctl_probe_apply_ids()
return
.B TNFCTL_ERR_NONE
upon success.
.SH ERRORS
.sp
.LP
The following errors apply to both
.B tnfctl_probe_apply()
and
.BR tnfctl_probe_apply_ids() :
.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_INTERNAL
.ad
.RS 23n
.rt
An internal error occurred.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_USR1
.ad
.RS 23n
.rt
Error code reserved for user.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_USR2
.ad
.RS 23n
.rt
Error code reserved for user.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_USR3
.ad
.RS 23n
.rt
Error code reserved for user.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_USR4
.ad
.RS 23n
.rt
Error code reserved for user.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_USR5
.ad
.RS 23n
.rt
Error code reserved for user.
.RE

.sp
.LP
.B tnfctl_probe_apply()
and
.B tnfctl_probe_apply_ids()
also return any
error returned by the callback function
.IR probe_op .
.sp
.LP
The following errors apply only to
.BR tnfctl_probe_apply_ids() :
.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_INVALIDPROBE
.ad
.RS 27n
.rt
The probe handle is no longer valid.  For example, the probe is in a  library
that has been closed by
.BR dlclose (3C).
.RE

.SH EXAMPLES
.LP
.B Example 1
Enabling Probes
.sp
.LP
To enable all probes:

.sp
.in +2
.nf
tnfctl_probe_apply(hndl, tnfctl_probe_enable, NULL);
.fi
.in -2

.LP
.B Example 2
Disabling Probes
.sp
.LP
To disable the probes that match a certain pattern in the probe attribute
string:

.sp
.in +2
.nf
/* To disable all probes that contain the string "vm" */
tnfctl_probe_apply(hndl, select_disable, "vm");
static tnfctl_errcode_t
select_disable(tnfctl_handle_t *hndl, tnfctl_probe_t *probe_hndl,
void *client_data)
{
     char *pattern = client_data;
     tnfctl_probe_state_t probe_state;
     tnfctl_probe_state_get(hndl, probe_hndl, &probe_state);
     if (strstr(probe_state.attr_string, pattern)) {
          tnfctl_probe_disable(hndl, probe_hndl, NULL);
     }
}
.fi
.in -2

.sp
.LP
Note that these examples do not have any error handling code.

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWtnfc
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR prex (1),
.BR TNF_PROBE (3TNF),
.BR dlclose (3C),
.BR dlopen (3C),
.BR libtnfctl (3TNF),
.BR tnfctl_close (3TNF),
.BR tnfctl_probe_state_get (3TNF),
.BR tracing (3TNF),
.BR tnf_kernel_probes (4),
.BR attributes (5)
.sp
.LP
.I Linker and Libraries Guide
