'\" te
.\" Copyright (c) 2004 Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH tnfctl_pid_open 3TNF "1 Mar 2004" "SunOS 5.11" "TNF Library Functions"
.SH NAME
tnfctl_pid_open, tnfctl_exec_open, tnfctl_continue \- interfaces for direct
probe and process control for another process
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-ltnfctl\fR [ \fIlibrary\fR .\|.\|. ]
#include <tnf/tnfctl.h>

\fBtnfctl_errcode_t\fR \fBtnfctl_pid_open\fR(\fBpid_t\fR \fIpid\fR, \fBtnfctl_handle_t **\fIret_val\fR);
.fi

.LP
.nf
\fBtnfctl_errcode_t\fR \fBtnfctl_exec_open\fR(\fBconst char *\fIpgm_name\fR,
     \fBchar * const *\fIargv\fR, \fBchar * const *\fIenvp\fR,
     \fBconst char *\fIlibnfprobe_path\fR, \fBconst char *\fIld_preload\fR,
     \fBtnfctl_handle_t **\fIret_val\fR);
.fi

.LP
.nf
\fBtnfctl_errcode_t\fR \fBtnfctl_continue\fR(\fBtnfctl_handle_t *\fIhndl\fR,
     \fBtnfctl_event_t *\fIevt\fR, \fBtnfctl_handle_t **\fIchild_hndl\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.BR tnfctl_pid_open() ,
.BR tnfctl_exec_open() ,
and
.B tnfctl_continue()
functions create handles to control probes in another
process (direct process probe control). Either
.B tnfctl_pid_open()
or
.B tnfctl_exec_open()
will return a handle in
.I ret_val
that can be
used for probe control. On return of these calls, the process is stopped.
.B tnfctl_continue()
allows the process specified by
.I hndl
to continue
execution.
.sp
.LP
The
.B tnfctl_pid_open()
function attaches to a running process with
process id of
.IR pid .
The process is stopped on return of this call.  The
.B tnfctl_pid_open()
function returns an error message if
.I pid
is the
same as the calling process. See
.BR tnfctl_internal_open (3TNF)
for
information on internal process probe control. A pointer to an opaque handle
is returned in
.IR ret_val ,
which can be used to control the process and
the probes in the process. The target process must have
.B libtnfprobe.so.1
(defined in
.RB < tnf/tnfctl.h >
as macro
.B TNFCTL_LIBTNFPROBE)
linked in for probe control to work.
.sp
.LP
The
.B tnfctl_exec_open()
function is used to
.BR exec (2)
a program and
obtain a probe control handle. For probe control to work, the process image to
be
.BR exec "'d must load"
.BR libtnfprobe.so.1 .
The
.B tnfctl_exec_open()
function makes it simple for the library to be loaded at process start up
time. The
.I pgm_name
argument is the command to
.BR exec .
If
.I pgm_name
is not an absolute path, then the
.B $PATH
environment
variable is used to find the
.IR pgm_name .
.I argv
is a null-terminated
argument pointer, that is, it is a null-terminated array of pointers to
null-terminated strings. These strings constitute the argument list available
to the new process image. The
.I argv
argument must have at least one
member, and it should point to a string that is the same as
.IR pgm_name .
See
.BR execve (2).
The
.I libnfprobe_path
argument is an optional
argument, and if set, it should be the path to the directory that contains
\fBlibtnfprobe.so.1\fR. There is no need for a trailing "/" in this argument.
This argument is  useful if
.B libtnfprobe.so.1
is not installed in
.BR /usr/lib .
.I ld_preload
is a space-separated list of libraries to
preload into the target program. This string should follow the syntax
guidelines of the
.B LD_PRELOAD
environment variable.  See
.BR ld.so.1 (1).
The following illustrates how strings are concatenated to
form the
.B LD_PRELOAD
environment variable in the new process image:
.sp
.in +2
.nf
<current value of $LD_PRELOAD> + <space> +
libtnfprobe_path + "/libtnfprobe.so.1" +<space> +
ld_preload
.fi
.in -2

.sp
.LP
This option is useful for preloading interposition libraries that have probes
in them.
.sp
.LP
.I envp
is an optional argument, and if set, it is used for the
environment of the target program.  It is a null-terminated array of pointers
to null-terminated strings. These strings constitute the environment of the
new process image. See
.BR execve (2).
If
.I envp
is set, it overrides
.IR ld_preload .
In this case, it is the caller's responsibility to ensure
that
.B libtnfprobe.so.1
is loaded into the target program.  If \fIenvp\fR
is not set, the new process image inherits the environment of the calling
process, except for
.BR LD_PRELOAD .
.sp
.LP
The
.I ret_val
argument is the handle that can be used to control the
process and the probes within the process.  Upon return, the process is
stopped before any user code, including \fB\&.init\fR sections, has been
executed.
.sp
.LP
The
.B tnfctl_continue()
function is a blocking call and lets the target
process referenced by
.I hndl
continue running.  It can only be used on
.RB "handles returned by " tnfctl_pid_open() " and " tnfctl_exec_open() 
(direct process probe control). It returns when the target stops; the reason
that the  process stopped  is returned in
.IR evt .
This call is
interruptible by signals.  If it is interrupted, the process is stopped, and
.B TNFCTL_EVENT_EINTR
is returned in
.IR evt .
The client of this library
will have to decide which signal implies a  stop to the target and catch that
signal. Since a signal interrupts
.BR tnfctl_continue() ,
it will return, and
the caller can decide whether or not to call
.B tnfctl_continue()
again.
.sp
.LP
.B tnfctl_continue()
returns with an event of
.BR TNFCTL_EVENT_DLOPEN ,
.BR TNFCTL_EVENT_DLCLOSE ,
.BR TNFCTL_EVENT_EXEC ,
.BR TNFCTL_EVENT_FORK ,
.BR TNFCTL_EVENT_EXIT ,
or
.BR TNFCTL_EVENT_TARGGONE ,
respectively, when
the target program calls
.BR dlopen (3C),
\fBdlclose\fR(3C), any flavor of
.BR exec (2),
.BR fork (2)
(or
.BR fork1 (2)),
.BR exit (2),
or terminates
unexpectedly. If the target program called
.BR exec (2),
the client then
needs to call
.BR tnfctl_close (3TNF)
on the current handle leaving the
target resumed, suspended, or killed (second argument to
.BR tnfctl_close (3TNF)).
No other
.B libtnfctl
interface call can be used
on the existing handle. If the client wants to control the
.BR exec 'ed
image, it should leave the old handle suspended, and use
.B tnfctl_pid_open()
to reattach to the same process.  This new handle can
then be used to control the
.BR exec 'ed
image.  See \fBEXAMPLES\fR below for
sample code.  If the target process did a
.BR fork (2)
or
.BR fork1 (2),
and if control of the child process is not needed, then
.I child_hndl
should be
.IR NULL .
If control of the child process is needed, then
.I child_hndl
should be set.  If it is set, a pointer to a handle that can
be used to control the child process is returned in
.IR child_hndl .
The
child process is stopped at the end of the
.B fork()
system call. See
.B EXAMPLES
for an example of this event.
.SH RETURN VALUES
.sp
.LP
The
.BR tnfctl_pid_open() ,
.BR tnfctl_exec_open() ,
and
.B tnfctl_continue()
functions return
.B TNFCTL_ERR_NONE
upon success.
.SH ERRORS
.sp
.LP
The following error codes apply to
.BR tnfctl_pid_open() :
.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_BADARG
.ad
.RS 28n
.rt
The
.I pid
specified is the same process.  Use
.BR tnfctl_internal_open (3TNF)
instead.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_ACCES
.ad
.RS 28n
.rt
Permission denied. No privilege to connect to a setuid process.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_ALLOCFAIL
.ad
.RS 28n
.rt
A memory allocation failure occurred.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_BUSY
.ad
.RS 28n
.rt
Another client is already using
.B /proc
to control this process or
internal tracing is being used.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_NOTDYNAMIC
.ad
.RS 28n
.rt
The process is not a dynamic executable.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_NOPROCESS
.ad
.RS 28n
.rt
No such target process exists.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_NOLIBTNFPROBE
.ad
.RS 28n
.rt
.B libtnfprobe.so.1
is not linked in the target process.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_INTERNAL
.ad
.RS 28n
.rt
An internal error occurred.
.RE

.sp
.LP
The following error codes apply to
.BR tnfctl_exec_open() :
.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_ACCES
.ad
.RS 28n
.rt
Permission denied.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_ALLOCFAIL
.ad
.RS 28n
.rt
A memory allocation failure occurred.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_NOTDYNAMIC
.ad
.RS 28n
.rt
The target is not a dynamic executable.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_NOLIBTNFPROBE
.ad
.RS 28n
.rt
.B libtnfprobe.so.1
is not linked in the target process.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_FILENOTFOUND
.ad
.RS 28n
.rt
The program is not found.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_INTERNAL
.ad
.RS 28n
.rt
An internal error occurred.
.RE

.sp
.LP
The following error codes apply to
.BR tnfctl_continue() :
.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_BADARG
.ad
.RS 24n
.rt
Bad input argument.
.I hndl
is not a direct process probe control
handle.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_INTERNAL
.ad
.RS 24n
.rt
An internal error occurred.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_NOPROCESS
.ad
.RS 24n
.rt
No such target process exists.
.RE

.SH EXAMPLES
.LP
.B Example 1
Using
.B tnfctl_pid_open()
.sp
.LP
These examples do not include any error-handling code.  Only the initial
example includes the declaration of the variables that are used in all  of the
examples.

.sp
.LP
The following example shows how to preload
.B libtnfprobe.so.1
from the
normal location and inherit the parent's environment.

.sp
.in +2
.nf
const char        *pgm;
char * const      *argv;
tnfctl_handle_t   *hndl, *new_hndl, *child_hndl;
tnfctl_errcode_t  err;
char * const      *envptr;
extern char       **environ;
tnfctl_event_t    evt;
int               pid;

/* assuming argv has been allocated */
argv[0] = pgm;
/* set up rest of argument vector here */
err = tnfctl_exec_open(pgm, argv, NULL, NULL, NULL, &hndl);
.fi
.in -2

.sp
.LP
This example shows how to preload two user-supplied libraries
.B libc_probe.so.1
and
.BR libthread_probe.so.1 .
They interpose on the
corresponding
.B libc.so
and
.B libthread.so
interfaces and have probes
for function entry and exit.
.B libtnfprobe.so.1
is preloaded from the
normal location and the parent's environment is inherited.

.sp
.in +2
.nf
/* assuming argv has been allocated */
argv[0] = pgm;
/* set up rest of argument vector here */
err = tnfctl_exec_open(pgm, argv, NULL, NULL,
      "libc_probe.so.1 libthread_probe.so.1", &hndl);
.fi
.in -2

.sp
.LP
This example preloads an interposition library
.BR libc_probe.so.1 ,
and
specifies a different location from which to preload
.BR libtnfprobe.so.1 .

.sp
.in +2
.nf
/* assuming argv has been allocated */
argv[0] = pgm;
/* set up rest of argument vector here */
err = tnfctl_exec_open(pgm, argv, NULL, "/opt/SUNWXXX/lib",
      "libc_probe.so.1", &hndl);
.fi
.in -2

.sp
.LP
To set up the environment explicitly for probe control to work, the target
process must link
.BR libtnfprobe.so.1 .
If using
.IR envp ,
it is the
caller's responsibility to do so.

.sp
.in +2
.nf
/* assuming argv has been allocated */
argv[0] = pgm;
/* set up rest of argument vector here */
/* envptr set up to caller's needs */
err = tnfctl_exec_open(pgm, argv, envptr, NULL, NULL, &hndl);
.fi
.in -2

.sp
.LP
Use this example to resume a process that does an
.BR exec (2)
without
controlling it.

.sp
.in +2
.nf
err = tnfctl_continue(hndl, &evt, NULL);
switch (evt) {
case TNFCTL_EVENT_EXEC:
     /* let target process continue without control */
     err = tnfctl_close(hndl, TNFCTL_TARG_RESUME);
     .\|.\|.
     break;
}
.fi
.in -2

.sp
.LP
Alternatively, use the next example to control a process that does an
.BR exec (2).

.sp
.in +2
.nf
/*
 * assume the pid variable has been set by calling
 * tnfctl_trace_attrs_get()
*/
err = tnfctl_continue(hndl, &evt, NULL);
switch (evt) {
case TNFCTL_EVENT_EXEC:
     /* suspend the target process */
     err = tnfctl_close(hndl, TNFCTL_TARG_SUSPEND);
     /* re-open the exec'ed image */
     err = tnfctl_pid_open(pid, &new_hndl);
     /* new_hndl now controls the exec'ed image */
     .\|.\|.
     break;
}
.fi
.in -2

.sp
.LP
To let 
.BR fork 'ed
children continue without control, use
.I NULL
as
the last argument to \fBtnfctl_continue(\|).\fR

.sp
.in +2
.nf
err = tnfctl_continue(hndl, &evt, NULL);
.fi
.in -2

.sp
.LP
The next example is how to control child processes that
.BR fork (2)
or
.BR fork1 (2)
create.

.sp
.in +2
.nf
err = tnfctl_continue(hndl, &evt, &child_hndl);
switch (evt) {
case TNFCTL_EVENT_FORK:
     /* spawn a new thread or process to control child_hndl */
     .\|.\|.
     break;
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWtnfc
_
MT LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR ld (1),
.BR prex (1),
.BR proc (1),
.BR exec (2),
.BR execve (2),
.BR exit (2),
.BR fork (2),
.BR TNF_PROBE (3TNF),
.BR dlclose (3C),
.BR dlopen (3C),
.BR libtnfctl (3TNF),
.BR tnfctl_close (3TNF),
.BR tnfctl_internal_open (3TNF),
.BR tracing (3TNF)
.BR attributes (5)
.sp
.LP
.I Linker and Libraries Guide
.SH NOTES
.sp
.LP
After a call to
.B tnfctl_continue()
returns, a client should use
.BR tnfctl_trace_attrs_get (3TNF)
to check the
.B trace_buf_state
member
of the trace attributes and make sure that there is no internal error in the
target.
