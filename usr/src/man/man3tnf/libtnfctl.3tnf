'\" te
.\" Copyright (c) 2004 Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH libtnfctl 3TNF "1 Mar 2004" "SunOS 5.11" "TNF Library Functions"
.SH NAME
libtnfctl \- library for TNF probe control in a process or the kernel
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-ltnfctl\fR [ \fIlibrary\fR .\|.\|. ]
#include <tnf/tnfctl.h>
.fi

.SH DESCRIPTION
.sp
.LP
The
.B libtnfctl
library provides an
.B API
to control
.B
TNF
("Trace Normal Form") probes within a process or the kernel. See
.BR tracing (3TNF)
for an overview of the Solaris tracing architecture. The
client of
.B libtnfctl
controls probes in one of four modes:
.sp
.ne 2
.mk
.na
.B internal mode
.ad
.RS 17n
.rt
The target is the controlling process itself; that is, the client controls
its own probes.
.RE

.sp
.ne 2
.mk
.na
.B direct mode
.ad
.RS 17n
.rt
The target is a separate process; a client can either
.BR exec (2)
a
program or attach to a running process for probe control. The
.B libtnfctl
library uses
.BR proc (4)
on the target process for probe
and process control in this mode, and additionally provides basic process
control features.
.RE

.sp
.ne 2
.mk
.na
.B indirect mode
.ad
.RS 17n
.rt
The target is a separate process, but the controlling process is already
using
.BR proc (4)
to control the target, and hence
.B libtnfctl
cannot
use those interfaces directly.  Use this mode to control probes from within
a debugger. In this mode, the client must provide a set of functions that
.B libtnfctl
can use to query and update the target process.
.RE

.sp
.ne 2
.mk
.na
.B kernel mode
.ad
.RS 17n
.rt
The target is the Solaris kernel.
.RE

.sp
.LP
A process is controlled "externally" if it is being controlled in either
direct mode or indirect mode. Alternatively, a process is controlled
"internally" when it uses internal mode to control its own probes.
.sp
.LP
There can be only one client at a time doing probe control on a given
process. Therefore, it is not possible for a process to be controlled
internally while it is being controlled externally. It is also not possible
to have a process controlled by multiple external processes. Similarly,
there can be only one process at a time doing kernel probe control. Note,
however, that while a given target may only be controlled by one
.B libtnfctl
client, a single client may control an arbitrary number of
targets. That is, it is possible for a process to simultaneously control its
own probes, probes in other processes, and probes in the kernel.
.sp
.LP
The following tables denotes the modes applicable to all
.B libtnfctl
interfaces (INT = internal mode; D = direct mode; IND = indirect mode; K =
kernel mode).
.sp
.LP
These interfaces create handles in the specified modes:
.sp

.sp
.TS
tab();
lw(2.49i) lw(.76i) lw(.74i) lw(.78i) lw(.74i)
lw(2.49i) lw(.76i) lw(.74i) lw(.78i) lw(.74i)
.
\fBtnfctl_internal_open()\fRINT
\fBtnfctl_exec_open()\fRD
\fBtnfctl_pid_open()\fRD
\fBtnfctl_indirect_open()\fRIND
\fBtnfctl_kernel_open()\fRK
.TE

.sp
.LP
These interfaces are used with the specified modes:
.sp

.sp
.TS
tab();
lw(2.46i) lw(.76i) lw(.79i) lw(.78i) lw(.71i)
lw(2.46i) lw(.76i) lw(.79i) lw(.78i) lw(.71i)
.
\fBtnfctl_continue()\fRD
\fBtnfctl_probe_connect()\fRINTDIND
\fBtnfctl_probe_disconnect_all ()\fRINTDIND
\fBtnfctl_trace_attrs_get()\fRINTDINDK
\fBtnfctl_buffer_alloc()\fRINTDINDK
\fBtnfctl_register_funcs()\fRINTDINDK
\fBtnfctl_probe_apply()\fRINTDINDK
\fBtnfctl_probe_apply_ids()\fRINTDINDK
\fBtnfctl_probe_state_get ()\fRINTDINDK
\fBtnfctl_probe_enable()\fRINTDINDK
\fBtnfctl_probe_disable()\fRINTDINDK
\fBtnfctl_probe_trace()\fRINTDINDK
\fBtnfctl_probe_untrace()\fRINTDINDK
\fBtnfctl_check_libs()\fRINTDINDK
\fBtnfctl_close()\fRINTDINDK
\fBtnfctl_strerror()\fRINTDINDK
\fBtnfctl_buffer_dealloc()\fRK
\fBtnfctl_trace_state_set()\fRK
\fBtnfctl_filter_state_set()\fRK
\fBtnfctl_filter_list_get()\fRK
\fBtnfctl_filter_list_add()\fRK
\fBtnfctl_filter_list_delete()\fRK
.TE

.sp
.LP
When using
.BR libtnfctl ,
the first task is to create a handle for
controlling probes. The
.B tnfctl_internal_open()
function creates an
internal mode handle for controlling probes in the same process, as
.RB "described above. The " tnfctl_pid_open() " and " tnfctl_exec_open() 
functions create handles in direct mode. The
.B tnfctl_indirect_open()
function creates an indirect mode handle, and the
.B tnfctl_kernel_open()
function creates a kernel mode handle. A handle is required for use in
.RB "nearly all other  " libtnfctl " functions. The " tnfctl_close() 
function releases the resources associated with a handle.
.sp
.LP
The
.B tnfctl_continue()
function is used in direct mode to resume
execution of the target process.
.sp
.LP
The
.B tnfctl_buffer_alloc()
function allocates a trace file or, in
kernel mode, a trace buffer.
.sp
.LP
The
.BR tnfctl_probe_apply() " and "
.B tnfctl_probe_apply_ids()
functions
call a specified function for each probe or for a designated set of
probes.
.sp
.LP
The
.B tnfctl_register_funcs()
function registers functions to be called
whenever new probes are seen or probes have disappeared, providing an
opportunity to do one-time processing for each probe.
.sp
.LP
The
.B tnfctl_check_libs()
function is used primarily in indirect mode
to check whether any new probes have appeared, that is, they have been made
available by
.BR dlopen "(3C), or have disappeared, that is, they have"
disassociated from the process by
.BR dlclose (3C).
.sp
.LP
The
.BR tnfctl_probe_enable() " and "
.B tnfctl_probe_disable()
functions
control whether the probe, when hit, will be ignored.
.sp
.LP
The
.BR tnfctl_probe_trace() " and "
.B tnfctl_probe_untrace()
functions
control whether an enabled probe, when hit, will cause an entry to be made
in the trace file.
.sp
.LP
.RB "The " tnfctl_probe_connect() " and " tnfctl_probe_disconnect_all() 
functions control which functions, if any, are called when an enabled probe
is hit.
.sp
.LP
The
.B tnfctl_probe_state_get()
function returns information about the
status of a probe, such as whether it is currently enabled.
.sp
.LP
The
.B tnfctl_trace_attrs_get()
function returns information about the
tracing session, such as the  size of the trace buffer or trace file.
.sp
.LP
The
.BR tnfctl_strerror() " function maps a  "
.B tnfctl
error code to a
string, for reporting purposes.
.sp
.LP
The remaining functions apply only to kernel mode.
.sp
.LP
The
.B tnfctl_trace_state_set()
function controls the master switch for
kernel tracing.  See
.BR prex (1)
for more details.
.sp
.LP
The
.BR tnfctl_filter_state_set() ,
.BR tnfctl_filter_list_get() ,
.BR tnfctl_filter_list_add() ,
and
.B tnfctl_filter_list_delete()
functions allow a set of processes to be specified for which probes will not
be ignored when hit. This prevents kernel activity caused by uninteresting
processes from cluttering up the kernel's trace buffer.
.sp
.LP
The
.B tnfctl_buffer_dealloc()
function deallocates the kernel's
internal trace buffer.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, these functions return\fBTNFCTL_ERR_NONE\fR.
.SH ERRORS
.sp
.LP
The error codes for
.B libtnfctl
are:
.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_ACCES
.ad
.RS 28n
.rt
Permission denied.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_NOTARGET
.ad
.RS 28n
.rt
The target process completed.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_ALLOCFAIL
.ad
.RS 28n
.rt
A memory allocation failure occurred.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_INTERNAL
.ad
.RS 28n
.rt
An internal error occurred.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_SIZETOOSMALL
.ad
.RS 28n
.rt
The requested trace size is too small.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_SIZETOOBIG
.ad
.RS 28n
.rt
The requested trace size is too big.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_BADARG
.ad
.RS 28n
.rt
Bad input argument.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_NOTDYNAMIC
.ad
.RS 28n
.rt
The target is not a dynamic executable.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_NOLIBTNFPROBE
.ad
.RS 28n
.rt
.B libtnfprobe.so
not linked in target.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_BUFBROKEN
.ad
.RS 28n
.rt
Tracing is broken in the target.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_BUFEXISTS
.ad
.RS 28n
.rt
A buffer already exists.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_NOBUF
.ad
.RS 28n
.rt
No buffer exists.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_BADDEALLOC
.ad
.RS 28n
.rt
Cannot deallocate buffer.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_NOPROCESS
.ad
.RS 28n
.rt
No such target process exists.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_FILENOTFOUND
.ad
.RS 28n
.rt
File not found.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_BUSY
.ad
.RS 28n
.rt
Cannot attach to process or kernel because it is already tracing.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_INVALIDPROBE
.ad
.RS 28n
.rt
Probe no longer valid.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_USR1
.ad
.RS 28n
.rt
Error code reserved for user.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_USR2
.ad
.RS 28n
.rt
Error code reserved for user.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_USR3
.ad
.RS 28n
.rt
Error code reserved for user.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_USR4
.ad
.RS 28n
.rt
Error code reserved for user.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_USR5
.ad
.RS 28n
.rt
Error code reserved for user.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWtnfc
_
MT LevelMT-Safe with exceptions
.TE

.SH SEE ALSO
.sp
.LP
.BR prex (1),
.BR exec (2),
.BR dlclose (3C),
.BR dlopen (3C),
.BR TNF_PROBE (3TNF),
.BR tnfctl_buffer_alloc (3TNF),
.BR tnfctl_buffer_dealloc (3TNF),
.BR tnfctl_check_libs (3TNF),
.BR tnfctl_close (3TNF),
.BR tnfctl_continue (3TNF),
.BR tnfctl_internal_open (3TNF),
.BR tnfctl_exec_open (3TNF),
.BR tnfctl_filter_list_add (3TNF),
.BR tnfctl_filter_list_delete (3TNF),
.BR tnfctl_filter_list_get (3TNF),
.BR tnfctl_filter_state_set (3TNF),
.BR tnfctl_kernel_open (3TNF),
.BR tnfctl_pid_open (3TNF),
.BR tnfctl_probe_apply (3TNF),
.BR tnfctl_probe_apply_ids (3TNF),
.BR tnfctl_probe_connect (3TNF),
.BR tnfctl_probe_disable (3TNF),
.BR tnfctl_probe_enable (3TNF),
.BR tnfctl_probe_state_get (3TNF),
.BR tnfctl_probe_trace (3TNF),
.BR tnfctl_probe_untrace (3TNF),
.BR tnfctl_indirect_open (3TNF),
.BR tnfctl_register_funcs (3TNF),
.BR tnfctl_strerror (3TNF),
.BR tnfctl_trace_attrs_get (3TNF),
.BR tnfctl_trace_state_set (3TNF),
.BR libtnfctl (3LIB),
.BR proc (4),
.BR attributes (5)
.sp
.LP
.I Linker and Libraries Guide
.SH NOTES
.sp
.LP
This
.B API
is MT-Safe.  Multiple threads may concurrently operate on
independent
.B tnfctl
handles, which is the typical behavior expected.
The
.B libtnfctl
library does not support multiple threads operating on
the same
.B tnfctl
handle.  If this is desired, it is the client's
responsibility to implement  locking to ensure that two threads that use the
.RB "same " tnfctl " handle are not simultaneously in a " libtnfctl 
interface.
