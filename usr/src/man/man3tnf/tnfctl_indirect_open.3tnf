'\" te
.\" Copyright (c) 2004 Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH tnfctl_indirect_open 3TNF "1 Mar 2004" "SunOS 5.11" "TNF Library Functions"
.SH NAME
tnfctl_indirect_open, tnfctl_check_libs \- control probes of another
process where caller provides /proc functionality
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-ltnfctl\fR [ \fIlibrary\fR .\|.\|. ]
#include <tnf/tnfctl.h>

\fBtnfctl_errcode_t\fR \fBtnfctl_indirect_open\fR(\fBvoid *\fIprochandle\fR,
     \fBtnfctl_ind_config_t *\fIconfig\fR, \fBtnfctl_handle_t **\fIret_val\fR);
.fi

.LP
.nf
\fBtnfctl_errcode_t\fR \fBtnfctl_check_libs\fR(\fBtnfctl_handle_t *\fIhndl\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The interfaces  \fBtnfctl_indirect_open()\fR and \fBtnfctl_check_libs()\fR
are used to control probes in another process where the
\fBlibtnfctl\fR(3TNF) client has already opened
.BR proc (4)
on the target
process. An example of this is when the client is a debugger. Since these
clients already use
.B /proc
on the target, \fBlibtnfctl\fR(3TNF) cannot
use
.B /proc
directly.  Therefore, these clients must provide callback
functions that can be used to inspect and to update the target process.
The target process must load \fBlibtnfprobe.so.1\fR (defined in
\fB<tnf/tnfctl.h>\fR as macro \fBTNFCTL_LIBTNFPROBE).\fR
.sp
.LP
The first argument
.I prochandle
is a pointer to an opaque structure
that is used in the callback functions that inspect and update the target
process. This structure should encapsulate the state that the caller needs
to use
.B /proc
on the target process (the
.B /proc
file descriptor).
The second argument,
.IR config ,
is a pointer to
.sp
.in +2
.nf
typedef
struct tnfctl_ind_config {
	int (*p_read)(void *prochandle, paddr_t addr, char *buf,
					size_t size);
	int (*p_write)(void *prochandle, paddr_t addr, char *buf,
					size_t size);
	pid_t (*p_getpid)(void *prochandle);
	int (*p_obj_iter)(void *prochandle, tnfctl_ind_obj_f *func,
					void *client_data);
} tnfctl_ind_config_t;
.fi
.in -2

.sp
.LP
The first field
.I p_read
is the address of a function that can read
\fBsize\fR bytes at address \fIaddr\fR in the target image into the buffer
\fIbuf\fR. The function should return  \fB0\fR upon success.. The second
field
.I p_write
is the address of a function that can write
.BR size
bytes at address
.I addr
in the target image from the buffer
.IR buf .
The function should return
.B 0
upon success. The third field
\fIp_getpid\fR is the address of a function that should return the process
id of the target process
.RI ( prochandle ).
The fourth field
\fIp_obj_iter\fR is the address of a function that iterates over all load
objects and the executable by calling the callback function  \fIfunc\fR with
.IR client_data .
If \fIfunc\fR returns
.BR 0 ,
\fIp_obj_iter\fR should
continue processing link objects.  If \fIfunc\fR returns any other value,
\fIp_obj_iter\fR should stop calling the callback function and return that
value.
.I p_obj_iter
should return
.B 0
if it iterates over all load
objects.
.sp
.LP
If a failure is returned by any of the functions in
.IR config ,
the error
is propagated back as
.B PREX_ERR_INTERNAL
by the \fBlibtnfctl\fR
interface that called it.
.sp
.LP
The definition of  \fBtnfctl_ind_obj_f\fR is:
.sp
.in +2
.nf
typedef int
tnfctl_ind_obj_f(void *prochandle,
	const struct tnfctl_ind_obj_info *obj
	void *client_data);
typedef struct tnfctl_ind_obj_info {
	int     objfd;			/* -1 indicates fd not available */
	paddr_t text_base;		/* virtual addr of text segment */
	paddr_t data_base;		/* virtual addr of data segment */
	const char *objname;    	/* null-term. pathname to loadobj */
} tnfctl_ind_obj_info_t;
.fi
.in -2

.sp
.LP
\fIobjfd\fR should be the file descriptor of the load object or executable.
If it is \fB\(mi1\fR, then
.I objname
should be an absolute pathname to
the load object or executable. If \fIobjfd\fR is not closed by
\fBlibtnfctl\fR, it should be closed by the load object iterator function.
\fItext_base\fR and \fIdata_base\fR are the addresses where the text and
data segments of the load object are mapped in the target process.
.sp
.LP
Whenever the target process opens  or closes  a dynamic object, the set of
available probes may change.   See
.BR dlopen (3C)
and
.BR dlclose (3C).
In indirect mode, call \fBtnfctl_check_libs()\fR when such events occur to
make \fBlibtnfctl\fR aware of any changes.  In other modes this is
unnecessary but harmless. It is also harmless to call
\fBtnfctl_check_libs()\fR when no such events have occurred.
.SH RETURN VALUES
.sp
.LP
\fBtnfctl_indirect_open()\fR and \fBtnfctl_check_libs()\fR return
\fBTNFCTL_ERR_NONE\fR upon success.
.SH ERRORS
.sp
.LP
The following error codes apply to
.BR tnfctl_indirect_open() :
.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_ALLOCFAIL
.ad
.RS 28n
.rt
A memory allocation failure occurred.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_BUSY
.ad
.RS 28n
.rt
Internal tracing is being used.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_NOLIBTNFPROBE
.ad
.RS 28n
.rt
\fBlibtnfprobe.so.1\fR is not loaded in the target process.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_INTERNAL
.ad
.RS 28n
.rt
An internal error occurred.
.RE

.sp
.LP
The following error codes apply to
.BR tnfctl_check_libs() :
.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_ALLOCFAIL
.ad
.RS 24n
.rt
A memory allocation failure occurred.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_INTERNAL
.ad
.RS 24n
.rt
An internal error occurred.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWtnfc
_
MT LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR prex (1),
.BR TNF_PROBE (3TNF),
.BR dlclose (3C),
.BR dlopen (3C),
\fBlibtnfctl\fR(3TNF), \fBtnfctl_probe_enable\fR(3TNF),
.BR tnfctl_probe_trace (3TNF),
.BR tracing (3TNF),
.BR proc (4),
.BR attributes (5)
.sp
.LP
.I Linker and Libraries Guide
.SH NOTES
.sp
.LP
\fBtnfctl_indirect_open()\fR should only be called after the dynamic linker
has mapped in all the libraries (rtld sync point) and called only after the
process is stopped. Indirect process probe control assumes the target
process is stopped whenever any \fBlibtnfctl\fR interface is used on it.
For example, when used for indirect process probe control,
\fBtnfctl_probe_enable\fR(3TNF) and \fBtnfctl_probe_trace\fR(3TNF) should be
called only for a process that is stopped.
