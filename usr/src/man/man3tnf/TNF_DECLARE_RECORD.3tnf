'\" te
.\" Copyright 1994 Sun Microsystems Inc.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH TNF_DECLARE_RECORD 3TNF "31 Dec 1996" "SunOS 5.11" "TNF Library Functions"
.SH NAME
TNF_DECLARE_RECORD, TNF_DEFINE_RECORD_1, TNF_DEFINE_RECORD_2,
TNF_DEFINE_RECORD_3, TNF_DEFINE_RECORD_4, TNF_DEFINE_RECORD_5 \- TNF type
extension interface for probes
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|.[ \fB-ltnfprobe\fR ] [ \fIlibrary\fR .\|.\|. ]
#include <tnf/probe.h>



\fBTNF_DECLARE_RECORD\fR(\fIc_type\fR, \fItnf_type\fR);
.fi

.LP
.nf
\fBTNF_DEFINE_RECORD_1\fR(\fIc_type\fR, \fItnf_type\fR, \fItnf_member_type_1\fR, \fIc_member_name_1\fR);
.fi

.LP
.nf
\fBTNF_DEFINE_RECORD_2\fR(\fIc_type\fR, \fItnf_type\fR, \fItnf_member_type_1\fR, \fIc_member_name_1\fR,
     \fItnf_member_type_2\fR, \fIc_member_name_2\fR);
.fi

.LP
.nf
\fBTNF_DEFINE_RECORD_3\fR(\fIc_type\fR, \fItnf_type\fR, \fItnf_member_type_1\fR, \fIc_member_name_1\fR,
     \fItnf_member_type_2\fR, \fIc_member_name_2\fR, \fItnf_member_type_3\fR,
     \fIc_member_name_3\fR);
.fi

.LP
.nf
\fBTNF_DEFINE_RECORD_4\fR(\fIc_type\fR, \fItnf_type\fR, \fItnf_member_type_1\fR, \fIc_member_name_1\fR,
     \fItnf_member_type_2\fR, \fIc_member_name_2\fR, \fItnf_member_type_3\fR,
     \fIc_member_name_3\fR, \fItnf_member_type_4\fR, \fIc_member_name_4\fR);
.fi

.LP
.nf
\fBTNF_DEFINE_RECORD_5\fR(\fIc_type\fR, \fItnf_type\fR, \fItnf_member_type_1\fR, \fIc_member_name_1\fR,
     \fItnf_member_type_2\fR, \fIc_member_name_2\fR, \fItnf_member_type_3\fR,
     \fIc_member_name_3\fR,\fItnf_member_type_4\fR, \fIc_member_name_4\fR,
     \fItnf_member_type_5\fR, \fIc_member_name_5\fR);
.fi

.SH DESCRIPTION
.sp
.LP
This macro interface is used to extend the TNF (Trace Normal Form) types
that can be used in
.BR TNF_PROBE (3TNF).
.sp
.LP
There should be only one
.B TNF_DECLARE_RECORD
and one
.B TNF_DEFINE_RECORD
per new type being defined. The
.B TNF_DECLARE_RECORD
should precede the
.BR TNF_DEFINE_RECORD .
It can
be in a header file that multiple source files share if those source files
need to use the
.I tnf_type
being defined. The
.B
TNF_DEFINE_RECORD
should only appear in one of the source files.
.sp
.LP
The
.B TNF_DEFINE_RECORD
macro  interface defines a function as well as
a couple of data structures. Hence,  this interface has to be used in a
source file (.c or .cc file) at file scope and  not inside a function.
.sp
.LP
Note that there is no semicolon after the
.BR TNF_DEFINE_RECORD
interface. Having one will generate a compiler warning.
.sp
.LP
Compiling with the preprocessor option
.B -DNPROBE
or with the
preprocessor control statement
.B "#define NPROBE"
ahead of the
.B
#include <tnf/probe.h>
statement, will stop the TNF type extension code from being
compiled into the program.
.sp
.LP
The
.I c_type
argument must be a C struct type.  It is the template from
which the new
.I tnf_type
is being created.  Not all elements of the C
struct need be provided in the TNF type being defined.
.sp
.LP
The
.I tnf_type
argument is the name being given to the newly created
type. Use of this interface uses the name space prefixed by
.IR tnf_type .
If a new type called "xxx_type" is defined by a library, then the library
should not use "xxx_type" as a prefix in any other symbols it defines. The
policy on managing the type name space is the same as managing any other
name space in a library; that is, prefix any new TNF types by the unique
prefix that the rest of the symbols in the library use.  This would prevent
name space collisions when linking multiple  libraries that define new TNF
types. For example, if a library
.B
libpalloc.so
uses the prefix "pal"
for all symbols it defines, then it should also use the prefix "pal" for all
new TNF types being defined.
.sp
.LP
.RI "The " tnf_member_type_n " argument is the TNF type of the " n th
provided member of the C structure.
.sp
.LP
.RI "The " tnf_member_name_n " argument is the name of the " n th
provided
member of the C structure.
.SH EXAMPLES
.LP
.B Example 1
Defining and using a TNF type.
.sp
.LP
The following example demonstrates how a new TNF type is defined and used
in a probe. This code is assumed to be part of a fictitious library called
"libpalloc.so" which  uses the prefix "pal" for all it's symbols.

.sp
.in +2
.nf
#include <tnf/probe.h>
typedef struct pal_header {
        long    size;
        char *  descriptor;
        struct pal_header *next;
} pal_header_t;
TNF_DECLARE_RECORD(pal_header_t, pal_tnf_header);
TNF_DEFINE_RECORD_2(pal_header_t, pal_tnf_header,
                        tnf_long,   size,
                        tnf_string, descriptor)
/*
 * Note: name space prefixed by pal_tnf_header should not
 *       be used by this client anymore.
 */
void
pal_free(pal_header_t *header_p)
{
        int state;
        TNF_PROBE_2(pal_free_start, "palloc pal_free",
                "sunw%debug entering pal_free",
                tnf_long,       state_var,  state,
                pal_tnf_header, header_var, header_p);
        . . .
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWtnfd
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR prex (1),
.BR tnfdump (1),
.BR TNF_PROBE (3TNF),
.BR tnf_process_disable (3TNF),
.BR attributes (5)
.SH NOTES
.sp
.LP
It is possible to make a
.I tnf_type
definition be recursive or mutually
recursive e.g. a structure that uses the "next" field to point to itself (a
linked list). If such a structure is sent in to a
.BR TNF_PROBE (3TNF),
then the entire linked list will be logged to the trace file (until the
"next" field is
.IR NULL ).
But, if the list is circular, it will result in
an infinite loop. To break the recursion, either do not  include the "next"
field in the
.IR tnf_type ,
or define the type of the "next" member as
.BR tnf_opaque .
