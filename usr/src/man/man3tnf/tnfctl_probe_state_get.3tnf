'\" te
.\" Copyright (c) 2004 Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH tnfctl_probe_state_get 3TNF "1 Mar 2004" "SunOS 5.11" "TNF Library Functions"
.SH NAME
tnfctl_probe_state_get, tnfctl_probe_enable, tnfctl_probe_disable,
tnfctl_probe_trace, tnfctl_probe_untrace, tnfctl_probe_connect,
tnfctl_probe_disconnect_all \- interfaces to query and to change the state
of a probe
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-ltnfctl\fR [ \fIlibrary\fR .\|.\|. ]
#include <tnf/tnfctl.h>

\fBtnfctl_errcode_t\fR \fBtnfctl_probe_state_get\fR(\fBtnfctl_handle_t *\fIhndl\fR,
     \fBtnfctl_probe_t *\fIprobe_hndl\fR, \fBtnfctl_probe_state_t *\fIstate\fR);
.fi

.LP
.nf
\fBtnfctl_errcode_t\fR \fBtnfctl_probe_enable\fR(\fBtnfctl_handle_t *\fIhndl\fR,
     \fBtnfctl_probe_t *\fIprobe_hndl\fR, \fBvoid *\fIignored\fR);
.fi

.LP
.nf
\fBtnfctl_errcode_t\fR \fBtnfctl_probe_disable\fR(\fBtnfctl_handle_t *\fIhndl\fR,
     \fBtnfctl_probe_t *\fIprobe_hndl\fR, \fBvoid *\fIignored\fR);
.fi

.LP
.nf
\fBtnfctl_errcode_t\fR \fBtnfctl_probe_trace\fR(\fBtnfctl_handle_t *\fIhndl\fR,
     \fBtnfctl_probe_t *\fIprobe_hndl\fR, \fBvoid *\fIignored\fR);
.fi

.LP
.nf
\fBtnfctl_errcode_t\fR \fBtnfctl_probe_untrace\fR(\fBtnfctl_handle_t *\fIhndl\fR,
     \fBtnfctl_probe_t *\fIprobe_hndl\fR, \fBvoid *\fIignored\fR);
.fi

.LP
.nf
\fBtnfctl_errcode_t\fR \fBtnfctl_probe_disconnect_all\fR(\fBtnfctl_handle_t *\fIhndl\fR,
     \fBtnfctl_probe_t *\fIprobe_hndl\fR, \fBvoid *\fIignored\fR);
.fi

.LP
.nf
\fBtnfctl_errcode_t\fR \fBtnfctl_probe_connect\fR(\fBtnfctl_handle_t *\fIhndl\fR,
     \fBtnfctl_probe_t *\fIprobe_hndl\fR, \fBconst char *\fIlib_base_name\fR,
     \fBconst char *\fIfunc_name\fR);
.fi

.SH DESCRIPTION
.sp
.LP
.B tnfctl_probe_state_get()
returns the state of the probe specified by
.I probe_hndl
in the process or kernel specified by
.IR hndl .
The user
will pass these in to an apply iterator. The caller must also allocate
.I state
and pass in a pointer to it.  The semantics of the individual
members of
.I state
are:
.sp
.ne 2
.mk
.na
.B id
.ad
.RS 26n
.rt
The unique integer assigned to this probe. This number does not change over
the lifetime of this probe. A
.I probe_hndl
can be obtained by using the
calls
.BR tnfctl_apply() ,
.BR tanfctl_apply_ids() ,
or
.BR tnfctl_register_funcs() .
.RE

.sp
.ne 2
.mk
.na
.B attr_string
.ad
.RS 26n
.rt
A string that consists of
.I "attribute value"
pairs separated by
semicolons. For the syntax of this string, see the  syntax of the
.B detail
argument of the
.BR TNF_PROBE "(3TNF) macro. The attributes"
.IR name ,
.IR slots ,
.IR keys ,
.BR file ,
and
.B line
are defined
for every probe. Additional user-defined attributes can be added by using
the
.I detail
argument of the \fBTNF_PROBE\fR(3TNF) macro.  An example of
.I attr_string
follows:
.sp
.in +2
.nf
"name pageout;slots vnode pages_pageout ;
keys vm pageio io;file vm.c;line 25;"
.fi
.in -2

.RE

.sp
.ne 2
.mk
.na
.B enabled
.ad
.RS 26n
.rt
.B B_TRUE
if the probe is enabled, or
.B B_FALSE
if the probe is
disabled. Probes are disabled by default. Use
.B tnfctl_probe_enable()
or
.B tnfctl_probe_disable()
to change this state.
.RE

.sp
.ne 2
.mk
.na
.B traced
.ad
.RS 26n
.rt
.B B_TRUE
if the probe is traced, or
.B B_FALSE
if the probe is not
traced. Probes in user processes are traced by default.  Kernel probes are
untraced by default.  Use
.B tnfctl_probe_trace()
or
.B tnfctl_probe_untrace()
to change this state.
.RE

.sp
.ne 2
.mk
.na
.B new_probe
.ad
.RS 26n
.rt
.B B_TRUE
if this is a new probe brought in since the last change in
libraries. See
.BR dlopen (3C)
or
.BR dlclose (3C).
Otherwise, the value
of
.B new_probe
will be
.BR B_FALSE .
This field is not  meaningful for
kernel probe control.
.RE

.sp
.ne 2
.mk
.na
.B obj_name
.ad
.RS 26n
.rt
The name of the shared object or executable in which the probe is located.
This string can be freed, so the client should make a copy of the string if
it needs to be saved for use by other
.B libtnfctl
interfaces.  In
.RI "kernel mode, this string is always " " NULL."
.RE

.sp
.ne 2
.mk
.na
.B func_names
.ad
.RS 26n
.rt
A null-terminated array of pointers to strings that contain the names of
functions connected to this probe.  Whenever an enabled probe is encountered
at runtime, these functions are executed. This array also will be freed by
the library when the state of the probe changes.  Use
.B tnfctl_probe_connect()
or
.B tnfctl_probe_disconnect_all()
to
change this state.
.RE

.sp
.ne 2
.mk
.na
.B func_addrs
.ad
.RS 26n
.rt
A null-terminated array of pointers to addresses of functions in the target
image connected to this probe.  This array also will be freed by the library
when the state of the probe changes.
.RE

.sp
.ne 2
.mk
.na
.B client_registered_data
.ad
.RS 26n
.rt
Data that was registered by the client for this probe by the creator
function in \fBtnfctl_register_funcs\fR(3TNF).
.RE

.sp
.LP
\fBtnfctl_probe_enable(\|),\fR \fBtnfctl_probe_disable(\|),\fR
\fBtnfctl_probe_trace(\|),\fR \fBtnfctl_probe_untrace(\|),\fR and
.B tnfctl_probe_disconnect_all()
ignore the last argument. This
convenient feature permits these functions to be used in the
.IR probe_op
field of \fBtnfctl_probe_apply\fR(3TNF) and
.BR tnfctl_probe_apply_ids (3TNF).
.B tnfctl_probe_enable()
enables the
probe specified by
.IR probe_hndl .
This is the master switch on a probe.
A probe does not perform any action until it is enabled.
.sp
.LP
.B tnfctl_probe_disable()
disables the probe specified by
.IR probe_hndl .
.sp
.LP
.B tnfctl_probe_trace()
turns on tracing for the probe specified by
.IR probe_hndl .
Probes emit a trace record only if the probe is traced.
.sp
.LP
.B tnfctl_probe_untrace()
turns off tracing for the probe specified by
.IR probe_hndl .
This is useful if you want to connect probe functions to a
probe without tracing it.
.sp
.LP
.B tnfctl_probe_connect()
connects the function
.I func_name
which
exists in the library
.IR lib_base_name ,
to the probe specified by
.IR probe_hndl .
.B tnfctl_probe_connect()
returns an error code if used
on a kernel tnfctl handle.
.I lib_base_name
is the base name (not a path)
of the library.  If it is
.I NULL,
and multiple functions in the target
process match
.IR func_name ,
one of the matching functions is chosen
arbitrarily. A probe function is a function that is in the target's address
space and is written to a certain specification.  The specification is not
currently published.
.sp
.LP
.B tnf_probe_debug()
is one function exported by \fBlibtnfprobe.so.1\fR
and is the debug function that
.BR prex (1)
uses.  When the debug function
is executed, it prints out the probe arguments and the value of the
.B sunw%debug
attribute of the probe to
.BR stderr .
.sp
.LP
.B tnfctl_probe_disconnect_all()
disconnects all probe functions from
the probe specified by
.IR probe_hndl .
.sp
.LP
Note that no
.B libtnfctl
call returns a probe handle
(\fBtnfctl_probe_t\fR), yet each of the routines described here takes a
.I probe_hndl
as an argument. These routines may be used by passing them
to one of the \fBtnfctl_probe_apply\fR(3TNF) iterators as the "op" argument.
Alternatively, probe handles may be obtained and saved by a user's "op"
function, and they can be passed later as the
.I probe_hndl
argument when
using any of the functions described here.
.SH RETURN VALUES
.sp
.LP
\fBtnfctl_probe_state_get(\|),\fR \fBtnfctl_probe_enable(\|),\fR
\fBtnfctl_probe_disable(\|),\fR \fBtnfctl_probe_trace(\|),\fR
\fBtnfctl_probe_untrace(\|),\fR \fBtnfctl_probe_disconnect_all()\fR and
.B tnfctl_probe_connect()
return
.B TNFCTL_ERR_NONE
upon success.
.SH ERRORS
.sp
.LP
The following error codes apply to
.BR tnfctl_probe_state_get() :
.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_INVALIDPROBE
.ad
.RS 27n
.rt
.I probe_hndl
is no longer valid. The library that the probe was in
could have been dynamically closed by
.BR dlclose (3C).
.RE

.sp
.LP
The following error codes apply to
.BR tnfctl_probe_enable() ,
.BR tnfctl_probe_disable() ,
.BR tnfctl_probe_trace() ,
.BR tnfctl_probe_untrace() ,
and \fBtnfctl_probe_disconnect_all()\fR
.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_INVALIDPROBE
.ad
.RS 27n
.rt
.I probe_hndl
is no longer valid. The library that the probe was in
could have been dynamically closed by
.BR dlclose (3C).
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_BUFBROKEN
.ad
.RS 27n
.rt
Cannot do probe operations because tracing is broken in the target.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_NOBUF
.ad
.RS 27n
.rt
Cannot do probe operations until a buffer is allocated. See
.BR tnfctl_buffer_alloc (3TNF).
This error code  does not apply to kernel
probe control.
.RE

.sp
.LP
The following error codes apply to
.BR tnfctl_probe_connect() :
.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_INVALIDPROBE
.ad
.RS 27n
.rt
.I probe_hndl
is no longer valid. The library that the probe was in
could have been dynamically closed by
.BR dlclose (3C).
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_BADARG
.ad
.RS 27n
.rt
The handle is a kernel handle, or
.I func_name
could not be found.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_BUFBROKEN
.ad
.RS 27n
.rt
Cannot do probe operations because tracing is broken in the target.
.RE

.sp
.ne 2
.mk
.na
.B TNFCTL_ERR_NOBUF
.ad
.RS 27n
.rt
Cannot do probe operations until a buffer is allocated. See
.BR tnfctl_buffer_alloc (3TNF).
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWtnfc
_
MT LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR prex (1),
.BR TNF_PROBE (3TNF),
.BR libtnfctl (3TNF),
.BR tnfctl_check_libs (3TNF),
.BR tnfctl_continue (3TNF),
.BR tnfctl_probe_apply (3TNF),
.BR tnfctl_probe_apply_ids (3TNF),
.BR tracing (3TNF),
.BR tnf_kernel_probes (4),
.BR attributes (5)
