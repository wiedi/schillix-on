'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH sysevent_subscribe_event 3SYSEVENT "24 Jul 2009" "SunOS 5.11" "System Event Library Functions"
.SH NAME
sysevent_subscribe_event, sysevent_unsubscribe_event \- register or
unregister interest in event receipt
.SH SYNOPSIS
.LP
.nf
\fBcc\fR  [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lsysevent\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <libsysevent.h>

\fBint\fR \fBsysevent_subscribe_event\fR(\fBsysevent_handle_t *\fIsysevent_hdl\fR,
     \fBchar *\fIevent_class\fR, \fBchar **\fIevent_subclass_list\fR,
     \fBint\fR \fInum_subclasses\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsysevent_unsubscribe_event\fR(\fBsysevent_handle_t *\fIsysevent_hdl\fR,
     \fBchar *\fIevent_class\fR);
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I event_class
.ad
.RS 23n
.rt
system event class string
.RE

.sp
.ne 2
.mk
.na
.I event_subclass_list
.ad
.RS 23n
.rt
array of subclass strings
.RE

.sp
.ne 2
.mk
.na
.I num_subclasses
.ad
.RS 23n
.rt
number of subclass strings
.RE

.sp
.ne 2
.mk
.na
.I sysevent_hdl
.ad
.RS 23n
.rt
.B sysevent
subscriber handle
.RE

.SH DESCRIPTION
.sp
.LP
The
.B sysevent_subscribe_event()
function registers the caller's
interest in event notifications belonging to the class
.I event_class
and
the subclasses contained in
.IR event_subclass_list .
The subscriber
handle
.I sysevent_hdl
is updated with the new subscription and the
calling process receives event notifications from the event handler
specified in
.IR sysevent_bind_handle .
.sp
.LP
System events matching
.I event_class
and a subclass contained in
.I event_subclass_list
published after the caller returns from
.B sysevent_subscribe_event()
are guaranteed to be delivered to the
calling process.  Matching system events published and queued prior to a
call to
.B sysevent_subscribe_event()
may be delivered to the process's
event handler.
.sp
.LP
The
.I num_subclasses
argument provides the number of subclass string
elements in
.IR event_subclass_list .
.sp
.LP
A caller can use the event class
.B EC_ALL
to subscribe to all event
classes and subclasses. The event class
.B EC_SUB_ALL
can be used to
subscribe to all subclasses within a given event class.
.sp
.LP
Subsequent calls to
.B sysevent_subscribe_event()
are allowed to add
additional classes or subclasses.  To remove an existing subscription,
.B sysevent_unsubscribe_event()
must be used to remove the
subscription.
.sp
.LP
The
.B sysevent_unsubscribe_event()
function removes the subscription
described by
.I event_class
for
.IR sysevent_hdl .
Event notifications
matching event_class will not be delivered to the calling process upon
return.
.sp
.LP
A caller can use the event class
.B EC_ALL
to remove all subscriptions
for
.IR sysevent_hdl .
.sp
.LP
The library manages all subscription resources.
.SH RETURN VALUES
.sp
.LP
The
.B sysevent_subscribe_event()
function returns 0 if the subscription
is successful. Otherwise, \(mi1 is returned and
.B errno
is set to
indicate the error.
.sp
.LP
The
.B sysevent_unsubscribe_event()
function returns no value.
.SH ERRORS
.sp
.LP
The
.B sysevent_subscribe_event()
function will fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 10n
.rt
The calling process has an ID other than the privileged user.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I sysevent_hdl
argument is an invalid
.B sysevent
handle.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
There is insufficient memory available to allocate subscription
resources.
.RE

.SH EXAMPLES
.LP
.B Example 1
Subscribing for environmental events
.sp
.in +2
.nf
#include <libsysevent.h>
#include <sys/nvpair.h>

static int32_t attr_int32;

#define    CLASS1        "class1"
#define    CLASS2        "class2"
#define    SUBCLASS_1    "subclass_1"
#define    SUBCLASS_2    "subclass_2"
#define    SUBCLASS_3    "subclass_3"
#define    MAX_SUBCLASS  3

static void
event_handler(sysevent_t *ev)
{
    nvlist_t *nvlist;

    /*
     * Special processing  for events (CLASS1, SUBCLASS_1) and
     * (CLASS2, SUBCLASS_3)
     */
    if ((strcmp(CLASS1, sysevent_get_class_name(ev)) == 0 &&
        strcmp(SUBCLASS_1, sysevent_get_subclass_name(ev)) == 0) ||
        (strcmp(CLASS2, sysevent_get_subclass_name(ev) == 0) &&
        strcmp(SUBCLASS_3, sysevent_get_subclass(ev)) == 0)) {
        if (sysevent_get_attr_list(ev, &nvlist) != 0)
            return;
        if (nvlist_lookup_int32(nvlist, "my_int32_attr", &attr_int32)
            != 0)
            return;

        /* Event Processing */
    } else {
        /* Event Processing */
    }

}


int
main(int argc, char **argv)
{
    sysevent_handle_t *shp;
    const char *subclass_list[MAX_SUBCLASS];

    /* Bind event handler and create subscriber handle */
    shp = sysevent_bind_handle(event_handler);
    if (shp == NULL)
        exit(1);

    /* Subscribe to all CLASS1 event notifications */
    subclass_list[0] = EC_SUB_ALL;
    if (sysevent_subscribe_event(shp, CLASS1, subclass_list, 1) != 0) {
        sysevent_unbind_handle(shp);
        exit(1);
    }

    /* Subscribe to CLASS2 events for subclasses: SUBCLASS_1,
     * SUBCLASS_2 and SUBCLASS_3
     */
    subclass_list[0] = SUBCLASS_1;
    subclass_list[1] = SUBCLASS_2;
    subclass_list[2] = SUBCLASS_3;
    if (sysevent_subscribe_event(shp, CLASS2, subclass_list,
        MAX_SUBCLASS) != 0) {
        sysevent_unbind_handle(shp);
        exit(1);
    }

    for (;;) {
        (void) pause();
    }
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR syseventd (1M),
.BR sysevent_bind_handle (3SYSEVENT),
.BR sysevent_get_attr_list (3SYSEVENT),
.BR sysevent_get_class_name (3SYSEVENT),
.BR sysevent_get_vendor_name (3SYSEVENT),
.BR attributes (5)
.SH NOTES
.sp
.LP
The
.B libsysevent
interfaces do not work at all in non-global zones.
