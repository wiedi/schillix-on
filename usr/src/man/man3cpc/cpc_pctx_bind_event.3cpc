'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH cpc_pctx_bind_event 3CPC "05 Mar 2007" "SunOS 5.11" "CPU Performance Counters Library Functions"
.SH NAME
cpc_pctx_bind_event, cpc_pctx_take_sample, cpc_pctx_rele,
cpc_pctx_invalidate \- access CPU performance counters in other processes
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \(milcpc \(milpctx [ \fIlibrary\fR.\|.\|. ]
#include <libpctx.h>
#include <libcpc.h>

\fBint\fR \fBcpc_pctx_bind_event\fR(\fBpctx_t *\fIpctx\fR, \fBid_t\fR \fIlwpid\fR, \fBcpc_event_t *\fIevent\fR,
     \fBint\fR \fIflags\fR);
.fi

.LP
.nf
\fBint\fR \fBcpc_pctx_take_sample\fR(\fBpctx_t *\fIpctx\fR, \fBid_t\fR \fIlwpid\fR, \fBcpc_event_t *\fIevent\fR);
.fi

.LP
.nf
\fBint\fR \fBcpc_pctx_rele\fR(\fBpctx_t *\fIpctx\fR, \fBid_t\fR \fIlwpid\fR);
.fi

.LP
.nf
\fBint\fR \fBcpc_pctx_invalidate\fR(\fBpctx_t *\fIpctx\fR, \fBid_t\fR \fIlwpid\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions are designed to be run in the context of an event handler
created using the
.BR libpctx (3LIB)
family of functions that allow the
caller, also known as the
.IR "controlling process" ,
to manipulate the
performance counters in the context of a
.IR "controlled process" .
The
controlled process is described by the
.I pctx
argument, which must be
obtained from an invocation of
.BR pctx_capture "(3CPC) or"
.BR pctx_create (3CPC)
and passed to the functions described on this page
in the context of an event handler.
.sp
.LP
The semantics of the functions
.BR cpc_pctx_bind_event() ,
.BR cpc_pctx_take_sample() ,
and
.B cpc_pctx_rele()
are directly
analogous to those of
.BR cpc_bind_event() ,
.BR cpc_take_sample() ,
and
.B cpc_rele()
described on the
.BR cpc_bind_event "(3CPC) manual page."
.sp
.LP
The
.B cpc_pctx_invalidate()
function allows the performance context to
be invalidated in an
.B LWP
in the controlled process.
.SH RETURN VALUES
.sp
.LP
These functions return
.B 0
on success.  On failure, they return
.B
\(mi1 \c
and set
.B errno
to indicate the error.
.SH ERRORS
.sp
.LP
The
.BR cpc_pctx_bind_event() ,
.BR cpc_pctx_take_sample() ,
and
.B cpc_pctx_rele()
functions return the same
.B errno
values the
analogous functions described on the
.BR cpc_bind_event "(3CPC) manual page."
In addition, these function may fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 10n
.rt
For
.BR cpc_pctx_bind_event() ,
access to the requested hypervisor event
was denied.
.RE

.sp
.ne 2
.mk
.na
.B ESRCH
.ad
.RS 10n
.rt
The value of the
.I lwpid
argument is invalid in the context of the
controlled process.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelUnsafe
_
Interface StabilityEvolving
.TE

.SH SEE ALSO
.sp
.LP
.BR cpc (3CPC),
.BR cpc_bind_event (3CPC),
.BR libcpc (3LIB),
.BR pctx_capture (3CPC),
.BR pctx_create (3CPC),
.BR attributes (5)
.SH NOTES
.sp
.LP
The
.BR cpc_pctx_bind_event() ,
.BR cpc_pctx_invalidate() ,
.BR cpc_pctx_rele() ,
and
.B cpc_pctx_take_sample()
functions exist for
binary compatibility only. Source containing these functions will not
compile. These functions are obsolete and might be removed in a future
release. Applications should use
.BR cpc_bind_pctx (3CPC),
.BR cpc_unbind (3CPC),
and
.BR cpc_set_sample "(3CPC) instead."
.sp
.LP
The capability to create and analyze overflow events in other processes is
not available, though it may be made available in a future version of this
API. In the current implementation, the
.I flags
field must be specified
as 0.
