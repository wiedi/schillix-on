'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH cpc_npic 3CPC "8 Oct 2008" "SunOS 5.11" "CPU Performance Counters Library Functions"
.SH NAME
cpc_npic, cpc_caps, cpc_cciname, cpc_cpuref, cpc_walk_events_all,
cpc_walk_generic_events_all, cpc_walk_events_pic,
cpc_walk_generic_events_pic, cpc_walk_attrs \- determine CPU performance
counter configuration
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lcpc\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <libcpc.h>

\fBuint_t\fR \fBcpc_npic\fR(\fBcpc_t *\fIcpc\fR);
.fi

.LP
.nf
\fBuint_t\fR \fBcpc_caps\fR(\fBcpc_t *\fIcpc\fR);
.fi

.LP
.nf
\fBconst char *\fBcpc_cciname\fR(\fBcpc_t *\fIcpc\fR);
.fi

.LP
.nf
\fBconst char *\fBcpc_cpuref\fR(\fBcpc_t *\fIcpc\fR);
.fi

.LP
.nf
\fBvoid\fR \fBcpc_walk_events_all\fR(\fBcpc_t *\fIcpc\fR, \fBvoid *\fIarg\fR,
     \fBvoid\fR (*\fIaction\fR)(\fBvoid *\fIarg\fR, const char *\fIevent\fR));
.fi

.LP
.nf
\fBvoid\fR \fBcpc_walk_generic_events_all\fR(\fBcpc_t *\fIcpc\fR, \fBvoid *\fIarg\fR,
     \fBvoid\fR (*\fIaction\fR)(\fBvoid *\fIarg\fR, \fBconst char *\fIevent\fR));
.fi

.LP
.nf
\fBvoid\fR \fBcpc_walk_events_pic\fR(\fBcpc_t *\fIcpc\fR, \fBuint_t\fR \fIpicno\fR, \fBvoid *\fIarg\fR,
     \fBvoid\fR (*\fIaction\fR)(\fBvoid *\fIarg\fR, uint_t \fIpicno\fR, const char *\fIevent\fR));
.fi

.LP
.nf
\fBvoid\fR \fBcpc_walk_generic_events_pic\fR(\fBcpc_t *\fIcpc\fR, \fBuint_t\fR \fIpicno\fR,
     \fBvoid *\fIarg\fR, \fBvoid\fR (*\fIaction\fR)(\fBvoid *\fIarg\fR, \fBuint_t\fR \fIpicno\fR,
     \fBconst char *\fIevent\fR));
.fi

.LP
.nf
\fBvoid\fR \fBcpc_walk_attrs\fR(\fBcpc_t *\fIcpc\fR, \fBvoid *\fIarg\fR,
     \fBvoid\fR (*\fIaction\fR)(\fBvoid *\fIarg\fR, \fBconst char *\fIattr\fR));
.fi

.SH DESCRIPTION
.sp
.LP
The
.B cpc_cciname()
function returns a printable description of the
processor performance counter interfaces, for example, the string UltraSPARC
III+ & IV. This name should not be assumed to be the same as the name the
manufacturer might otherwise ascribe to the processor. It simply names the
performance counter interfaces as understood by the system, and thus names
the set of performance counter events that can be described by that
interface.
.sp
.LP
The
.B cpc_cpuref()
function returns a string that describes a reference
work that should be consulted to (allow a human to) understand the semantics
of the performance counter events that are known to the system. The string
returned might be substantially longer than 80 characters. Callers printing
to a terminal might want to insert line breaks as appropriate.
.sp
.LP
The
.B cpc_npic()
function returns the number of performance counters
accessible on the processor.
.sp
.LP
The
.B cpc_caps()
function returns a bitmap containing the bitwise
inclusive-OR of zero or more flags that describe the capabilities of the
processor. If
.B CPC_CAP_OVERFLOW_INTERRUPT
is present, the processor can
generate an interrupt when a hardware performance counter overflows. If
.B CPC_CAP_OVERFLOW_PRECISE
is present, the processor can determine
precisely which counter overflowed, thereby affecting the behavior of the
overflow notification mechanism described in
.BR cpc_bind_curlwp (3CPC).
.sp
.LP
The system maintains a list of performance counter events supported by the
underlying processor. Some processors are able to count all events on all
hardware counters, while other processors restrict certain events to be
counted only on specific hardware counters. The system also maintains a list
of processor-specific attributes that can be used for advanced configuration
of the performance counter hardware. These functions allow applications to
determine what events and attributes are supported by the underlying
processor. The reference work pointed to by
.B cpc_cpuref()
should be
consulted to understand the reasons for and use of the attributes.
.sp
.LP
The
.B cpc_walk_events_all()
function calls the
.I action
function on
each element of a global
.I event
list. The
.I action
function is
called with each event supported by the processor, regardless of which
counter is capable of counting it. The
.I action
function is called only
once for each event, even if that event can be counted on more than one
counter.
.sp
.LP
The
.B cpc_walk_events_pic()
function calls the action
.I function
with each event supported by the counter indicated by the
.IR picno
argument, where
.I picno
ranges from 0 to the value returned by
.BR cpc_npic() .
.sp
.LP
The system maintains a list of platform independent performance counter
events known as generic events (see
.BR generic_events (3CPC)).
.sp
.LP
The
.B cpc_walk_generic_events_all()
function calls the action function
on each generic event available on the processor. The action function is
called for each generic event, regardless of which counter is capable of
counting it. The action function is called only once for each event, even if
that event can be counted on more than one counter.
.sp
.LP
The
.B cpc_walk_generic_events_pic()
function calls the action function
with each generic event supported by the counter indicated by the
.I picno
argument, where
.I picno
ranges from 0 to the value returned
by
.BR cpc_npic() .
.sp
.LP
The system maintains a list of attributes that can be used to enable
advanced features of the performance counters on the underlying processor.
The
.B cpc_walk_attrs()
function calls the
.I action
function for each
supported attribute name. See the reference material as returned by
.BR cpc_cpuref (3CPC)
for the semantics use of attributes.
.SH RETURN VALUES
.sp
.LP
The
.B cpc_cciname()
function always returns a printable description of
the processor performance counter interfaces.
.sp
.LP
The
.B cpc_cpuref()
function always returns a string that describes a
reference work.
.sp
.LP
The
.B cpc_npic()
function always returns the number of performance
counters accessible on the processor.
.sp
.LP
The
.B cpc_caps()
function always returns a bitmap containing the
bitwise inclusive-OR of zero or more flags that describe the capabilities of
the processor.
.sp
.LP
If the user-defined function specified by
.I action
is not called, the
.BR cpc_walk_events_all() ,
.BR cpc_walk_events_pic() ,
.BR cpc_walk_attrs() ,
.BR cpc_walk_generic_events_pic() ,
and
.B cpc_walk_generic_events_pic()
functions set
.B errno
to indicate
the error.
.SH ERRORS
.sp
.LP
The
.BR cpc_walk_events_all() ,
.BR cpc_walk_events_pic() ,
.BR cpc_walk_attrs() ,
.BR cpc_walk_generic_events_pic() ,
and
.B cpc_walk_generic_events_pic()
functions will fail if:
.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
There is not enough memory available.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR cpc_bind_curlwp (3CPC),
.BR generic_events (3CPC),
.BR libcpc (3LIB),
.BR attributes (5)
