'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH cpc_seterrhndlr 3CPC "30 Jan 2004" "SunOS 5.11" "CPU Performance Counters Library Functions"
.SH NAME
cpc_seterrhndlr \- control libcpc error reporting
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lcpc\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <libcpc.h>

\fBtypedef void(\fBcpc_errhndlr_t\fR)(\fBcpc_t *\fIcpc\fR, \fBconst char *\fIfn\fR, \fBint\fR \fIsubcode\fR,
     \fBconst char *\fIfmt\fR, \fBva_list\fR \fIap\fR);
.fi

.LP
.nf
\fBvoid\fR \fBcpc_seterrhndlr\fR(\fBcpc_t *\fIcpc\fR, \fBcpc_errhndlr_t *\fIerrfn\fR);
.fi

.SH DESCRIPTION
.sp
.LP
For the convenience of programmers instrumenting their code, several
.BR libcpc (3LIB)
functions automatically emit to
.B stderr
error
messages that attempt to provide a more detailed explanation of their error
return values.  While this can be useful for simple programs, some
applications might wanat to report their errors differently, for example, to
a window or to a log file.
.sp
.LP
The
.B cpc_seterrhndlr()
function allows the caller to provide an
alternate function for reporting errors. The type signature is shown in the
SYNOPSIS. The
.I fn
argument is passed the library function name that
detected the error, an integer subcode indicating the specific error
condidtion that has occurred, and the format string
.I fmt
that contains
a textual description of the integer subcode. The format string
.I fmt
and argument pointer
.I ap
can be passed directly to
.BR vsnprintf (3C)
or similar
.IR varargs -based
function for formatting.
.sp
.LP
The integer subcodes are provided to allow programs to recognize error
conditions while using
.BR libcpc .
The
.I fmt
string is provided as a
convenience for easy printing. The error subcodes are:
.sp
.ne 2
.mk
.na
.B CPC_INVALID_EVENT
.ad
.sp .6
.RS 4n
A specified event is not supported by the processor.
.RE

.sp
.ne 2
.mk
.na
.B CPC_INVALID_PICNUM
.ad
.sp .6
.RS 4n
The counter number does not fall in the range of available counters.
.RE

.sp
.ne 2
.mk
.na
.B CPC_INVALID_ATTRIBUTE
.ad
.sp .6
.RS 4n
A specified attribute is not supported by the processor.
.RE

.sp
.ne 2
.mk
.na
.B CPC_ATTRIBUTE_OUT_OF_RANGE
.ad
.sp .6
.RS 4n
The value of an attribute is outside the range supported by the
processor.
.RE

.sp
.ne 2
.mk
.na
.B CPC_RESOURCE_UNAVAIL
.ad
.sp .6
.RS 4n
A hardware resource necessary for completing an operation was
unavailable.
.RE

.sp
.ne 2
.mk
.na
.B CPC_PIC_NOT_CAPABLE
.ad
.sp .6
.RS 4n
The requested counter cannot count an assigned event.
.RE

.sp
.ne 2
.mk
.na
.B CPC_REQ_INVALID_FLAGS
.ad
.sp .6
.RS 4n
One or more requests has invalid flags.
.RE

.sp
.ne 2
.mk
.na
.B CPC_CONFLICTING_REQS
.ad
.sp .6
.RS 4n
The requests in a set cannot be programmed onto the hardware at the same
time.
.RE

.sp
.ne 2
.mk
.na
.B CPC_ATTR_REQUIRES_PRIVILEGE
.ad
.sp .6
.RS 4n
A request contains an attribute which requires the cpc_cpu privilege, which
the process does not have.
.RE

.sp
.LP
The default printing routine can be restored by calling  the routine with
an
.I errfn
argument of
.IR NULL .
.SH EXAMPLES
.LP
.B Example 1
Debugging example.
.sp
.LP
The following example produces error messages only when debugging the
program containing it, or when the
.BR cpc_bind_curlwp() ,
.BR cpc_bind_cpu() ,
or
.B cpc_bind_pctx()
functions are reporting an
error when binding a cpc_set_t.

.sp
.in +2
.nf
int debugging;
void
myapp_errfn(const char *fn, int subcode, const char *fmt, va_list ap)
{
        if (strncmp(fn, "cpc_bind", 8) != 0 && !debugging)
            return;
        (void) fprintf(stderr, "myapp: cpc_%s(): ", fn);
        (void) vfprintf(stderr, fmt, ap);
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR cpc_bind_curlwp (3CPC),
.BR libcpc (3LIB),
.BR vsnprintf (3C),
.BR attributes (5)
