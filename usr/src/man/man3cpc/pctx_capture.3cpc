'\" te
.\" Copyright (c) 2003, Sun Microsystems, Inc.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH pctx_capture 3CPC "13 May 2003" "SunOS 5.11" "CPU Performance Counters Library Functions"
.SH NAME
pctx_capture, pctx_create, pctx_run, pctx_release \- process context library
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \(milpctx [ \fIlibrary\fR.\|.\|. ]
#include <libpctx.h>

\fBtypedef void\fR \fB(pctx_errfn_t)\fR(\fBconst char *\fIfn\fR, \fBconst char *\fIfmt\fR, \fBva_list\fR \fIap\fR);
.fi

.LP
.nf
\fBpctx_t *\fBpctx_create\fR(\fBconst char *\fIfilename\fR, \fBchar *const *\fIargv\fR, \fBvoid *\fIarg\fR,
     \fBint\fR \fIverbose\fR, \fBpctx_errfn_t *\fIerrfn\fR);
.fi

.LP
.nf
\fBpctx_t *\fBpctx_capture\fR(\fBpid_t\fR \fIpid\fR, \fBvoid *\fIarg\fR, \fBint\fR \fIverbose\fR,
     \fBpctx_errfn_t *\fIerrfn\fR);
.fi

.LP
.nf
\fBint\fR \fBpctx_run\fR(\fBpctx_t *\fIpctx\fR, \fBuint_t\fR \fIsample\fR, \fBuint_t\fR \fInsamples\fR,
     \fBint (*\fItick\fR)(pctx *, \fBpid_t, id_t, void *));\fR
.fi

.LP
.nf
\fBvoid\fR \fBpctx_release\fR(\fBpctx_t *\fIpctx\fR);
.fi

.SH DESCRIPTION
.sp
.LP
This family of functions allows a controlling process (the process that
invokes them) to create or capture controlled processes.  The functions allow
the occurrence of various events of interest in the controlled process to cause
the controlled process to be stopped, and to cause callback routines to be
invoked in the controlling process.
.SS "\fBpctx_create()\fR and \fBpctx_capture()\fR"
.sp
.LP
There are two ways a process can be acquired by the process context functions.
First, a named application can be invoked with the usual
.IR argv []
array
using
.BR pctx_create() ,
which forks the caller and
.BR exec "s the"
application in the child. Alternatively, an existing process can be captured by
its process
.B ID
using
.BR pctx_capture() .
.sp
.LP
Both functions accept a pointer to an opaque handle,
.IR arg ;
this is saved
and treated as a caller-private handle that is passed to the other functions in
the library.  Both functions accept a pointer to a \fBprintf\fR(3C)-like error
routine
.IR errfn ;
a default version is provided if
.I NULL
is
specified.
.sp
.LP
A freshly-created process is created stopped; similarly, a process that has
been successfully captured is stopped by the act of capturing it, thereby
allowing the caller to specify the handlers that should be called when various
events occur in the controlled process.  The set of handlers is listed on the
.BR pctx_set_events (3CPC)
manual page.
.SS "\fBpctx_run()\fR"
.sp
.LP
Once the callback handlers have been set with
.BR pctx_set_events() ,
the
application can be set running using
.BR pctx_run() .
This function starts the
event handling loop; it returns only when either the process has exited, the
number of time samples has expired, or an error has occurred (for example, if
the controlling process is not privileged, and the controlled process has
\fBexec\fR-ed a setuid program).
.sp
.LP
Every
.I sample
milliseconds the process is stopped and the \fItick\fR(\|)
routine is called so that, for example, the performance counters can be sampled
by the caller. No periodic sampling is performed if
.I sample
is 0.
.SS "\fBpctx_release()\fR"
.sp
.LP
Once
.B pctx_run()
has returned, the process can be released and the
underlying storage freed using
.BR pctx_release() .
Releasing the process will
either allow the controlled process to continue (in the case of an existing
captured process and its children) or kill the process (if it and its children
were created using
.BR pctx_create() ).
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B pctx_capture()
and
.BR pctx_create()
return a valid handle.  Otherwise, the functions print a diagnostic message and
return
.IR NULL .
.sp
.LP
Upon successful completion,
.B pctx_run()
returns
.B 0
with the
controlled process either stopped or exited (if the controlled process has
invoked
.BR exit (2).)
If an error has occurred (for example, if the
controlled process has \fBexec\fR-ed a set-\fBID\fR executable, if certain
callbacks have returned error indications, or if the process was unable to
respond to
.BR proc (4)
requests) an error message is printed and the function
returns \(mi1.
.SH USAGE
.sp
.LP
Within an event handler in the controlling process, the controlled process can
be made to perform various system calls on its behalf. No system calls are
directly supported in this version of the API, though system calls are executed
by the
.B cpc_pctx
family of interfaces in
.B libcpc
such as
.BR cpc_pctx_bind_event (3CPC).
A specially created agent
.B LWP
is used to
execute these system calls in the controlled process. See
.BR proc (4)
for
more details.
.sp
.LP
While executing the event handler functions, the library arranges for the
signals
.BR SIGTERM ,
.BR SIGQUIT ,
.BR SIGABRT ,
and
.B SIGINT
to be
blocked to reduce the likelihood of a keyboard signal killing the controlling
process prematurely, thereby leaving the controlled process permanently stopped
while the agent
.B LWP
is still alive inside the controlled process.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR fork (2),
.BR cpc (3CPC),
.BR pctx_set_events (3CPC),
.BR libpctx (3LIB),
.BR proc (4),
.BR attributes (5)
