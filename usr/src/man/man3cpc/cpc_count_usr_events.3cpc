'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH cpc_count_usr_events 3CPC "28 Mar 2005" "SunOS 5.11" "CPU Performance Counters Library Functions"
.SH NAME
cpc_count_usr_events, cpc_count_sys_events \- enable and disable
performance counters
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \(milcpc [ \fIlibrary\fR.\|.\|. ]
#include <libcpc.h>

\fBint\fR \fBcpc_count_usr_events\fR(\fBint\fR \fIenable\fR);
.fi

.LP
.nf
\fBint\fR \fBcpc_count_sys_events\fR(\fBint\fR \fIenable\fR);
.fi

.SH DESCRIPTION
.sp
.LP
In certain applications, it can be useful to explicitly enable and disable
performance counters at different times so that the performance of a
.RB "critical algorithm can be examined.  The" " cpc_count_usr_events()"
function can be used to control whether events are counted on behalf of the
application running in user mode, while
.B cpc_count_sys_events()
can be
used to control whether events are counted on behalf of the application
while it is running in the kernel, without otherwise disturbing the binding
of events to the invoking LWP. If the
.I enable
argument is non-zero,
counting of events is enabled, otherwise they are disabled.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B cpc_count_usr_events()
and
.B cpc_count_sys_events()
return
.BR 0 .
Otherwise, the functions return
.B
\(mi1 \c
and set
.B errno
to indicate the error.
.SH ERRORS
.sp
.LP
The
.B cpc_count_usr_events()
and
.B cpc_count_sys_events()
functions
will fail if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 11n
.rt
The associated performance counter context has been invalidated by another
process.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 11n
.rt
No performance counter context has been created, or an attempt was made to
enable system events while delivering counter overflow signals.
.RE

.SH EXAMPLES
.LP
.B Example 1
Use
.B cpc_count_usr_events()
to minimize code needed by
application.
.sp
.LP
In this example, the routine
.B cpc_count_usr_events()
is used to
minimize the amount of code that needs to be added to the application. The
.BR cputrack (1)
command can be used in conjunction with these interfaces
to provide event programming, sampling, and reporting facilities.

.sp
.LP
If the application is instrumented in this way and then started by
.B cputrack
with the
.B nouser
flag set in the event specification,
counting of user events will only be enabled around the critical code
section of interest.   If the program is run normally, no harm will ensue.

.sp
.in +2
.nf
int have_counters = 0;
int
main(int argc, char *argv[])
{
    if (cpc_version(CPC_VER_CURRENT) == CPC_VER_CURRENT &&
        cpc_getcpuver() != -1 && cpc_access() == 0)
        have_counters = 1;

    /* .\|.\|. other application code */

    if (have_counters)
        (void) cpc_count_usr_events(1);

    /* ==> Code to be measured goes here <== */

    if (have_counters)
        (void) cpc_count_usr_events(0);

    /* .\|.\|. other application code */
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
_
Interface StabilityObsolete
.TE

.SH SEE ALSO
.sp
.LP
.BR cputrack (1),
.BR cpc (3CPC),
.BR cpc_access (3CPC),
.BR cpc_bind_event (3CPC),
.BR cpc_enable (3CPC),
.BR cpc_getcpuver (3CPC),
.BR cpc_pctx_bind_event (3CPC),
.BR cpc_version (3CPC),
.BR libcpc (3LIB),
.BR attributes (5)
.SH NOTES
.sp
.LP
The
.B cpc_count_usr_events()
and
.B cpc_count_sys_events()
functions
exist for binary compatibility only. Source containing these functions will
not compile. These functions are obsolete and might be removed in a future
release. Applications should use
.BR cpc_enable (3CPC)
instead.
