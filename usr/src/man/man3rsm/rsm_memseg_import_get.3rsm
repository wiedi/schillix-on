'\" te
.\" Copyright (c) 2001 by Sun Microsystems, Inc.  All rights reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH rsm_memseg_import_get 3RSM "8 Jun 2001" "SunOS 5.11" "Remote Shared Memory Library Functions"
.SH NAME
rsm_memseg_import_get, rsm_memseg_import_get8, rsm_memseg_import_get16,
rsm_memseg_import_get32, rsm_memseg_import_get64 \- read from a segment
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. -lrsm [ \fIlibrary\fR.\|.\|. ]
#include <rsmapi.h>

\fBint\fR \fBrsm_memseg_import_get\fR(\fBrsm_memseg_import_handle_t\fR \fIim_memseg\fR,
     \fBoff_t\fR \fIoffset\fR, \fBvoid *\fIdest_addr\fR, \fBsize_t\fR \fIlength\fR);
.fi

.LP
.nf
\fBint\fR \fBrsm_memseg_import_get8\fR(\fBrsm_memseg_import_handle_t\fR \fIim_memseg\fR,
     \fBoff_t\fR \fIoffset\fR, \fBuint8_t *\fIdatap\fR, \fBulong_t\fR \fIrep_cnt\fR);
.fi

.LP
.nf
\fBint\fR \fBrsm_memseg_import_get16\fR(\fBrsm_memseg_import_handle_t\fR \fIim_memseg\fR,
     \fBoff_t\fR \fIoffset\fR, \fBuint16_t *\fIdatap\fR, \fBulong_t\fR \fIrep_cnt\fR);
.fi

.LP
.nf
\fBint\fR \fBrsm_memseg_import_get32\fR(\fBrsm_memseg_import_handle_t\fR \fIim_memseg\fR,
     \fBoff_t\fR \fIoffset\fR, \fBuint32_t *\fIdatap\fR, \fBulong_t\fR \fIrep_cnt\fR);
.fi

.LP
.nf
\fBint\fR \fBrsm_memseg_import_get64\fR(\fBrsm_memseg_import_handle_t\fR \fIim_memseg\fR,
     \fBoff_t\fR \fIoffset\fR, \fBuint64_t *\fIdatap\fR, \fBulong_t\fR \fIrep_cnt\fR);
.fi

.SH DESCRIPTION
.sp
.LP
When using interconnects that allow memory mapping (see
.BR rsm_memseg_import_map (3RSM)),
standard CPU memory operations may be
used for accessing memory of a segment. If a mapping is not provided, then
explicitly calling these functions facilitates reading from a segment.
Depending on the attributes of the extension library of the specific
interconnect, these functions may involve performing an implicit mapping
before performing the data transfer. Applications can be made
interconnect-independent with respect to segment reads by using these
functions. The data access error detection is performed through the use of
barriers (see \fBrsm_memseg_import_open_barrier\fR(3RSM)). The default
barrier operation mode is
.BR RSM_BARRIER_MODE_IMPLICIT ,
meaning that
around every get operation open and close barrier are performed
automatically. Alternatively, explicit error handling may be set up for
these functions (see
.BR rsm_memseg_import_set_mode (3RSM)).
In either case
the barrier should be initialized prior to using these  functions using
.BR rsm_memseg_import_init_barrier (3RSM).
.sp
.LP
The
.B rsm_memseg_import_get()
function copies
.I length
bytes from
the imported segment
.I im_memseg
beginning at location
.I offset
from
the start of the segment to a local memory buffer pointed to by
.IR dest_addr .
.sp
.LP
The
.B rsm_memseg_import_get8()
function copies
.I rep_cnt
number of
8-bit quantities from successive locations starting from
.I offset
in the
imported segment to successive local memory locations pointed to by
.IR datap .
.sp
.LP
The
.B rsm_memseg_import_get16()
functions copies
.I rep_cnt
number
of 16-bit quantities from successive locations starting from
.I offset
in
the imported segment to successive local memory locations pointed to by
.IR datap .
The offset must be aligned at half-word address boundary.
.sp
.LP
The
.B rsm_memseg_import_get32()
function copies
.I rep_cnt
number of
32-bit quantities from successive locations starting from
.I offset
in
the imported segment to successive local memory locations pointed to by
.IR datap .
The offset must be aligned at word address boundary.
.sp
.LP
The
.B rsm_memseg_import_get64()
function copies
.I rep_cnt
number of
-bit quantities from successive locations starting from
.I offset
in the
imported segment to successive local memory locations pointed to by
.IR datap .
The offset must be aligned at double-word address boundary.
.sp
.LP
The data transfer functions that transfer small quantities of data (that
is, 8-, 16-, 32-, and 64-bit quantities) perform byte swapping prior to the
data transfer, in the event that the source and destination have
incompatible endian characteristics.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, these functions return 0. Otherwise, an error
value is returned to indicate the error.
.SH ERRORS
.sp
.LP
These functions can return the following errors:
.sp
.ne 2
.mk
.na
.B RSMERR_BAD_SEG_HNDL
.ad
.sp .6
.RS 4n
Invalid segment handle.
.RE

.sp
.ne 2
.mk
.na
.B RSMERR_BAD_ADDR
.ad
.sp .6
.RS 4n
Bad address.
.RE

.sp
.ne 2
.mk
.na
.B RSMERR_BAD_MEM_ALIGNMENT
.ad
.sp .6
.RS 4n
Invalid memory alignment for pointer.
.RE

.sp
.ne 2
.mk
.na
.B RSMERR_BAD_OFFSET
.ad
.sp .6
.RS 4n
Invalid offset.
.RE

.sp
.ne 2
.mk
.na
.B RSMERR_BAD_LENGTH
.ad
.sp .6
.RS 4n
Invalid length.
.RE

.sp
.ne 2
.mk
.na
.B RSMERR_PERM_DENIED
.ad
.sp .6
.RS 4n
Permission denied.
.RE

.sp
.ne 2
.mk
.na
.B RSMERR_INSUFFICIENT_RESOURCES
.ad
.sp .6
.RS 4n
Insufficient resources.
.RE

.sp
.ne 2
.mk
.na
.B RSMERR_BARRIER_UNINITIALIZED
.ad
.sp .6
.RS 4n
Barrier not initialized.
.RE

.sp
.ne 2
.mk
.na
.B RSMERR_BARRIER_FAILURE
.ad
.sp .6
.RS 4n
I/O completion error.
.RE

.sp
.ne 2
.mk
.na
.B RSMERR_CONN_ABORTED
.ad
.sp .6
.RS 4n
Connection aborted.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
lw(2.75i) |lw(2.75i)
lw(2.75i) |lw(2.75i)
.
\fBATTRIBUTE TYPE \fR\fBATTRIBUTE VALUE\fR
_
Interface StabilityEvolving
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR rsm_memseg_import_init_barrier (3RSM),
.BR rsm_memseg_import_open_barrier (3RSM),
.BR rsm_memseg_import_set_mode (3RSM),
.BR attributes (5)
