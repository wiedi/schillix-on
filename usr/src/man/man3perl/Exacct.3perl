'\" te
.\" Copyright (c) 2002, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH Exacct 3PERL "1 Dec 2002" "SunOS 5.11" "Perl Library Functions"
.SH NAME
Exacct \- exacct system calls and error handling
.SH SYNOPSIS
.LP
.nf
use Sun::Solaris::Exacct qw(:EXACCT_ALL);
my $ea_rec = getacct(P_PID, $$);
.fi

.SH DESCRIPTION
.sp
.LP
This module provides access to the \fBea_error\fR(3EXACCT) function and for
all the extended accounting system calls. Constants from the various
.BR libexacct (3LIB)
header files are also provided.
.SS "Constants"
.sp
.LP
The
.BR P_PID ,
.BR P_TASKID ,
\fBP_PROJID\fR and all the
.BR EW_* ,
.BR EP_* ,
\fBEXR_*\fR macros are provided as Perl constants.
.SS "Functions"
.sp
.ne 2
.mk
.na
.B getacct($idtype, $id)
.ad
.sp .6
.RS 4n
The
.B $idtype
parameter must be either
.B P_TASKID
or
.BR P_PID
and
.B $id
must be a corresponding task or process ID. This function
returns an object of type
.BR Sun::Solaris::Exacct::Object ,
representing
the unpacked accounting buffer returned by the underlying
.BR getacct (2)
system call. In the event of error, \fBundef\fR is returned.
.RE

.sp
.ne 2
.mk
.na
.B putacct($idtype, $id, $record)
.ad
.sp .6
.RS 4n
The
.B $idtype
parameter must be either
.B P_TASKID
or
.BR P_PID
and
.B $id
must be a corresponding task or process ID. If $record is of
type Sun::Solaris::Exacct::Object, it is converted to the corresponding
packed
.B libexacct
object and passed to the
.BR putacct (2)
system
call. If
.B $record
is not of type
.B Sun::Solaris::Exacct::Object
it
is converted to a string using the normal Perl conversion rules and stored
as a raw buffer. For predictable and endian-independent results, any raw
buffers should be constructed using the Perl
.B pack()
function. This
function returns true on success and false on failure.
.RE

.sp
.ne 2
.mk
.na
\fBwracct($idtype, $id, $flags)\fR
.ad
.sp .6
.RS 4n
The
.B $idtype
parameter must be either
.B P_TASKID
or
.BR P_PID
and
.B $id
must be a corresponding task or process ID. The \fB$flags\fR
parameter must be either
.B EW_INTERVAL
or
.BR EW_PARTIAL .
The
parameters are passed directly to the underlying
.BR wracct (2)
system
call. This function returns true on success and false on failure.
.RE

.sp
.ne 2
.mk
.na
.B ea_error()
.ad
.sp .6
.RS 4n
This function provides access to the \fBea_error\fR(3EXACCT) function. It
returns a double-typed scalar that becomes one of the EXR_* constants. In a
string context it becomes a descriptive error message. This is the exacct
equivalent to the
.B $!(errno)
Perl variable.
.RE

.sp
.ne 2
.mk
.na
.B ea_error_str()
.ad
.sp .6
.RS 4n
This function returns a double-typed scalar that in a numeric context will
be one of the EXR_* constants as returned by ea_error. In a string context
it describes the value returned by ea_error. If ea_error returns
EXR_SYSCALL_FAIL, the string value returned is the value returned by
.BR strerror (3C).
This function is provided as a convenience so that
repeated blocks of code like the following can be avoided:
.sp
.in +2
.nf
if (ea_error() == EXR_SYSCALL_FAIL) {
        print("error: $!\en");
} else {
        print("error: ", ea_error(), "\en");
}
.fi
.in -2

.RE

.sp
.ne 2
.mk
.na
\fBea_register_catalog($cat_pfx, $catalog_id, $export, @idlist)\fR
.ad
.sp .6
.RS 4n
This convenience function is a wrapper around the
\fBSun::Solaris::Exacct::Catalog->register()\fR method.
.RE

.sp
.ne 2
.mk
.na
.B ea_new_catalog($integer)
.ad
.br
.na
.B ea_new_catalog($cat_obj)
.ad
.br
.na
.B ea_new_catalog($type, $catalog, $id)
.ad
.sp .6
.RS 4n
These convenience functions are wrappers around the
\fBSun::Solaris::Exacct::Catalog->new()\fR method. See
.BR Exacct::Catalog (3PERL).
.RE

.sp
.ne 2
.mk
.na
\fBea_new_file($name, $oflags, creator => $creator, aflags => $aflags,
mode => $mode)\fR
.ad
.sp .6
.RS 4n
This convenience function is a wrapper around the
\fBSun::Solaris::Exacct::File->new()\fR method. See
.BR Exacct::File (3PERL).
.RE

.sp
.ne 2
.mk
.na
.B ea_new_item($catalog, $value)
.ad
.sp .6
.RS 4n
This convenience function is a wrapper around the
\fBSun::Solaris::Exacct::Object::Item->new()\fR method. See
.BR Exacct::Object::Item (3PERL).
.RE

.sp
.ne 2
.mk
.na
.B ea_new_group($catalog, @objects)
.ad
.sp .6
.RS 4n
This convenience function is a wrapper around the
\fBSun::Solaris::Exacct::Object::Group->new()\fR method. See
.BR Exacct::Object::Group (3PERL).
.RE

.sp
.ne 2
.mk
.na
\fBea_dump_object($object, $filehandle)\fR
.ad
.sp .6
.RS 4n
This convenience function is a wrapper around the
\fBSun::Solaris::Exacct::Object->dump()\fR method. See
.BR Exacct::Object (3PERL).
.RE

.SS "Class methods"
.sp
.LP
None.
.SS "Object methods"
.sp
.LP
None.
.SS "Exports"
.sp
.LP
By default nothing is exported from this module. The following tags can be
used to selectively import constants and functions defined in this module:
.sp
.ne 2
.mk
.na
.B :SYSCALLS
.ad
.RS 21n
.rt
.BR getacct() ,
.BR putacct() ,
and
.BR wracct()
.RE

.sp
.ne 2
.mk
.na
.B :LIBCALLS
.ad
.RS 21n
.rt
\fBea_error()\fR and \fBea_error_str()\fR
.RE

.sp
.ne 2
.mk
.na
.B :CONSTANTS
.ad
.RS 21n
.rt
.BR P_PID ,
.BR P_TASKID ,
.BR P_PROJID ,
.BR EW_* ,
.BR EP_* ,
and
.B EXR_*
.RE

.sp
.ne 2
.mk
.na
.B :SHORTHAND
.ad
.RS 21n
.rt
.BR ea_register_catalog() ,
.BR ea_new_catalog() ,
.BR ea_new_file() ,
.BR ea_new_item() ,
and
.BR ea_new_group()
.RE

.sp
.ne 2
.mk
.na
.B :ALL
.ad
.RS 21n
.rt
.BR :SYSCALLS ,
.BR :LIBCALLS ,
.BR :CONSTANTS ,
and
.BR :SHORTHAND
.RE

.sp
.ne 2
.mk
.na
.B :EXACCT_CONSTANTS
.ad
.RS 21n
.rt
.BR :CONSTANTS ,
plus the
.B :CONSTANTS
tags for
.BR Sun::Solaris::Catalog ,
.BR Sun::Solaris::File ,
and
.B Sun::Solaris::Object
.RE

.sp
.ne 2
.mk
.na
.B :EXACCT_ALL
.ad
.RS 21n
.rt
.BR :ALL ,
plus the
.B :ALL
tags for
.BR Sun::Solaris::Catalog ,
.BR Sun::Solaris::File ,
and
.BR Sun::Solaris::Object
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWpl5u
_
Interface StabilityEvolving
.TE

.SH SEE ALSO
.sp
.LP
.BR getacct (2),
.BR putacct (2),
.BR wracct (2),
.BR ea_error (3EXACCT),
.BR Exacct::Catalog (3PERL),
.BR Exacct::File (3PERL),
.BR Exacct::Object (3PERL),
.BR Exacct::Object::Group (3PERL),
.BR Exacct::Object::Item (3PERL),
.BR libexacct (3LIB),
.BR attributes (5)
.SH NOTES
.sp
.LP
The modules described in the section 3PERL manual pages make extensive use
of the Perl "double-typed scalar" facility. This facility allows a scalar
value to behave either as an integer or as a string, depending upon context.
It is the same behavior as exhibited by the
.B $!
Perl variable
(\fBerrno\fR). It is useful because it avoids the need to map from an
integer value to the corresponding string to display a value. Some examples
are provided below:
.sp
.in +2
.nf
# Assume $obj is a Sun::Solaris::Item
my $type = $obj->type();

# Print "2 EO_ITEM"
printf("%d %s\en", $type, $type);

# Behave as an integer, $i == 2
my $i = 0 + $type;

# Behave as a string, $s = "abc EO_ITEM xyx"
my $s = "abc $type xyz";
.fi
.in -2

.sp
.LP
Wherever a function or method is documented as returning a double-typed
scalar, the returned value exhibits this type of behavior.
