'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH Lgrp 3PERL "30 Aug 2006" "SunOS 5.11" "Perl Library Functions"
.SH NAME
Lgrp \- Perl interface to Solaris liblgrp library
.SH SYNOPSIS
.LP
.nf
use Sun::Solaris::Lgrp qw(:ALL);

# initialize lgroup interface
my $cookie = lgrp_init(LGRP_VIEW_OS | LGRP_VIEW_CALLER);
my $l = Sun::Solaris::Lgrp->new(LGRP_VIEW_OS |
     LGRP_VIEW_CALLER);

my $version = lgrp_version(LGRP_VER_CURRENT | LGRP_VER_NONE);
$version = $l->version(LGRP_VER_CURRENT | LGRP_VER_NONE);

$home = lgrp_home(P_PID, P_MYID);
$home = l->home(P_PID, P_MYID);

lgrp_affinity_set(P_PID, $\fIpid\fR, $\fIlgrp\fR,
      LGRP_AFF_STRONG | LGRP_AFF_WEAK | LGRP_AFF_NONE);
$l->affinity_set(P_PID, $\fIpid\fR, $\fIlgrp\fR,
      LGRP_AFF_STRONG | LGRP_AFF_WEAK | LGRP_AFF_NONE);

my $affinity = lgrp_affinity_get(P_PID, $\fIpid\fR, $\fIlgrp\fR);
$affinity = $l->affinity_get(P_PID, $\fIpid\fR, $\fIlgrp\fR);

my $nlgrps = lgrp_nlgrps($\fIcookie\fR);
$nlgrps = $l->nlgrps();

my $root = lgrp_root($\fIcookie\fR);
$root = l->root();

$latency = lgrp_latency($\fIlgrp1\fR, $\fIlgrp2\fR);
$latency = $l->latency($\fIlgrp1\fR, $\fIlgrp2\fR);

my @children = lgrp_children($\fIcookie\fR, $\fIlgrp\fR);
@children = l->children($lgrp);

my @parents = lgrp_parents($\fIcookie\fR, $\fIlgrp\fR);
@parents = l->parents($\fIlgrp\fR);

my @lgrps = lgrp_lgrps($\fIcookie\fR);
@lgrps = l->lgrps();

@lgrps = lgrp_lgrps($\fIcookie\fR, $\fIlgrp\fR);
@lgrps = l->lgrps($\fIlgrp\fR);

my @leaves = lgrp_leaves($\fIcookie\fR);
@leaves = l->leaves();

my $is_leaf = lgrp_isleaf($\fIcookie\fR, $\fIlgrp\fR);
$is_leaf = $l->is_leaf($\fIlgrp\fR);

my @cpus = lgrp_cpus($\fIcookie\fR, $\fIlgrp\fR,
     LGRP_CONTENT_HIERARCHY | LGRP_CONTENT_DIRECT);
@cpus = l->cpus($\fIlgrp\fR, LGRP_CONTENT_HIERARCHY |
     LGRP_CONTENT_DIRECT);

my $memsize = lgrp_mem_size($\fIcookie\fR, $\fIlgrp\fR,
      LGRP_MEM_SZ_INSTALLED | LGRP_MEM_SZ_FREE,
      LGRP_CONTENT_HIERARCHY | LGRP_CONTENT_DIRECT);
$memsize = l->mem_size($\fIlgrp\fR,
      LGRP_MEM_SZ_INSTALLED | LGRP_MEM_SZ_FREE,
      LGRP_CONTENT_HIERARCHY | LGRP_CONTENT_DIRECT);

my $is_stale = lgrp_cookie_stale($\fIcookie\fR);
$stale = l->stale();

lgrp_fini($\fIcookie\fR);

# The following is available for API version greater than 1:
my @lgrps = lgrp_resources($\fIcookie\fR, $\fIlgrp\fR, LGRP_RSRC_CPU);

# Get latencies from cookie
$latency = lgrp_latency_cookie($\fIcookie\fR, $\fIfrom\fR, $\fIto\fR);
.fi

.SH DESCRIPTION
.sp
.LP
This module provides access to the
.BR liblgrp "(3LIB) library and to"
various constants and functions defined in <\fBsys/lgrp_sys.h\fR>. It
provides both the procedural and object interface to the library. The
procedural interface requires (in most cases) passing around a transparent
cookie. The object interface hides all the cookie manipulations from the
user.
.sp
.LP
Functions returning a scalar value indicate an error by returning
.BR undef .
The caller can examine the
.B $!
variable to get the error
value.
.sp
.LP
Functions returning a list value return the number of elements in the list
when called in scalar context. In the event of error, the empty list is
returned in the array context and
.B undef
is returned in the scalar
context.
.SS "Constants"
.sp
.LP
The constants are exported with
.B :CONSTANTS
or
.B :ALL
tags:
.sp
.in +2
.nf
use Sun::Solaris::Lgrp ':ALL';
.fi
.in -2

.sp
.LP
or
.sp
.in +2
.nf
use Sun::Solaris::Lgrp ':CONSTANTS';
.fi
.in -2

.sp
.LP
The following constants are available for use in Perl programs:
.br
.in +2
.B LGRP_NONE
.in -2
.br
.in +2
.B LGRP_VER_CURRENT
.in -2
.br
.in +2
.B LGRP_VER_NONE
.in -2
.br
.in +2
.B LGRP_VIEW_CALLER
.in -2
.br
.in +2
.B LGRP_VIEW_OS
.in -2
.br
.in +2
.B LGRP_AFF_NONE
.in -2
.br
.in +2
.B LGRP_AFF_STRONG
.in -2
.br
.in +2
.B LGRP_AFF_WEAK
.in -2
.br
.in +2
.B LGRP_CONTENT_DIRECT
.in -2
.br
.in +2
.B LGRP_CONTENT_HIERARCHY
.in -2
.br
.in +2
.B LGRP_MEM_SZ_FREE
.in -2
.br
.in +2
.B LGRP_MEM_SZ_FREE
.in -2
.br
.in +2
.B LGRP_RSRC_CPU
(1)
.in -2
.br
.in +2
.B LGRP_RSRC_MEM
(1)
.in -2
.br
.in +2
.B LGRP_CONTENT_ALL
(1)
.in -2
.br
.in +2
.B LGRP_LAT_CPU_TO_MEM
(1)
.in -2
.br
.in +2
.B P_PID
.in -2
.br
.in +2
.B P_LWPID
.in -2
.br
.in +2
.B P_MYID
.in -2
.sp
.LP
(1) Available for versions of the \fBliblgrp\fR(3LIB) API greater than 1.
.SS "Functions"
.sp
.LP
A detailed description of each function follows. Since this module is
intended to provide a Perl interface to the functions in
.BR liblgrp (3LIB),
a very short description is given for the corresponding
functions in this module and a reference is given to the complete
description in the
.B liblgrp
manual pages. Any differences or additional
functionality in the Perl module are highlighted and fully documented
here.
.sp
.ne 2
.mk
.na
.B lgrp_init([LGRP_VIEW_CALLER | LGRP_VIEW_OS])
.ad
.sp .6
.RS 4n
This function initializes the lgroup interface and takes a snapshot of the
.RB "lgroup hierarchy with the given view. Given the view," " lgrp_init()"
returns a cookie representing this snapshot of the lgroup hierarchy. This
cookie should be used with other routines in the lgroup interface needing
the lgroup hierarchy. The
.B lgrp_fini()
function should be called with
the cookie when it is no longer needed. Unlike
.BR lgrp_init (3LGRP),
.B LGRP_VIEW_OS
is assumed as the default if no view is provided.
.sp
Upon successful completion,
.B lgrp_init()
returns a cookie. Otherwise
it returns
.B undef
and sets
.B $!
to indicate the error.
.sp
See \fBlgrp_init\fR(3LGRP) for more information.
.RE

.sp
.ne 2
.mk
.na
\fBlgrp_fini\fR($\fIcookie\fR)\fR
.ad
.sp .6
.RS 4n
This function takes a cookie, frees the snapshot of the lgroup hierarchy
created by
.BR lgrp_init() ,
and cleans up anything else set up by
.BR lgrp_init() .
After this function is called, the cookie returned by the
lgroup interface might no longer be valid and should not be used.
.sp
Upon successful completion, 1 is returned. Otherwise,
.B undef
is
returned and
.B $!
is set to indicate the error.
.sp
See \fBlgrp_fini\fR(3LGRP) for more information.
.RE

.sp
.ne 2
.mk
.na
\fBlgrp_view\fR($\fIcookie\fR)\fR
.ad
.sp .6
.RS 4n
This function takes a cookie representing the snapshot of the lgroup
hierarchy and returns the snapshot's view of the lgroup hierarchy.
.sp
If the given view is
.BR LGRP_VIEW_CALLER ,
the snapshot contains only the
resources that are available to the caller (such as those with respect to
processor sets). When the view is
.BR LGRP_VIEW_OS ,
the snapshot contains
what is available to the operating system.
.sp
Upon succesful completion, the function returns the view for the snapshot
of the lgroup hierarchy represented by the given cookie.  Otherwise,
.B undef
is returned and
.B $!
is set to indicate the error.
.sp
See \fBlgrp_view\fR(3LGRP) for more information.
.RE

.sp
.ne 2
.mk
.na
\fBlgrp_home\fR($\fIidtype\fR, $\fIid\fR)\fR
.ad
.sp .6
.RS 4n
This function returns the home lgroup for the given process or thread. The
$\fIidtype\fR argument should be \fBP_PID\fR to specify a process and the
$\fIid\fR argument should be its process ID. Otherwise, the $\fIidtype\fR
argument should be
.B P_LWPID
to specify a thread and the $\fIid\fR
argument should be its LWP ID. The value
.B P_MYID
can be used for the
$\fIid\fR argument to specify the current process or thread.
.sp
Upon successful completion,
.B lgrp_home()
returns the ID of the home
lgroup of the specified process or thread. Otherwise,
.B undef
is
returned and
.B $!
is set to indicate the error.
.sp
See \fBlgrp_home\fR(3LGRP) for more information.
.RE

.sp
.ne 2
.mk
.na
\fBlgrp_cookie_stale\fR($\fIcookie\fR)\fR
.ad
.sp .6
.RS 4n
Upon successful completion, this function returns whether the cookie is
stale. Otherwise, it returns
.B undef
and sets
.B $!
to indicate the
error.
.sp
The
.B lgrp_cookie_stale()
function will fail with
.B EINVAL
if the
cookie is not valid.
.sp
See \fBlgrp_cookie_stale\fR(3LGRP) for more information.
.RE

.sp
.ne 2
.mk
.na
\fBlgrp_cpus\fR($\fIcookie\fR, $\fIlgrp\fR, $\fIcontext\fR)\fR
.ad
.sp .6
.RS 4n
This function takes a cookie representing a snapshot of the lgroup
hierarchy and returns the list of CPUs in the lgroup specified by
$\fIlgrp\fR. The $\fIcontext\fR argument should be set to one of the
following values to specify whether the direct contents or everything in
this lgroup including its children should be returned:
.sp
.ne 2
.mk
.na
.B LGRP_CONTENT_HIERARCHY
.ad
.RS 26n
.rt
everything within this hierarchy
.RE

.sp
.ne 2
.mk
.na
.B LGRP_CONTENT_DIRECT
.ad
.RS 26n
.rt
directly contained in lgroup
.RE

When called in scalar context,
.B lgrp_cpus()
function returns the
number of CPUs contained in the specified lgroup.
.sp
In the event of error,
.B undef
is returned in scalar context and
.B $!
is set to indicate the error. In list context, the empty list is
returned and
.B $!
is set.
.sp
See \fBlgrp_cpus\fR(3LGRP) for more information.
.RE

.sp
.ne 2
.mk
.na
\fBlgrp_children\fR($\fIcookie\fR, $\fIlgrp\fR)\fR
.ad
.sp .6
.RS 4n
This function takes a cookie representing a snapshot of the lgroup
hierarchy and returns the list of lgroups that are children of the specified
lgroup.
.sp
When called in scalar context,
.B lgrp_children()
returns the number of
children lgroups for the specified lgroup.
.sp
In the event of error, \fBundef\fR or empty list is returned and \fB$!\fR
is set to indicate the error.
.sp
See \fBlgrp_children\fR(3LGRP) for more information.
.RE

.sp
.ne 2
.mk
.na
\fBlgrp_parents\fR($\fIcookie\fR, $\fIlgrp\fR)\fR
.ad
.sp .6
.RS 4n
This function takes a cookie representing a snapshot of the lgroup
hierarchy and returns the list of parents of the specified lgroup.
.sp
When called in scalar context,
.B lgrp_parents()
returns the number of
parent lgroups for the specified lgroup.
.sp
In the event of error,
.B undef
or an empty list is returned and
.B $!
is set to indicate the error.
.sp
See \fBlgrp_parents\fR(3LGRP) for more information.
.RE

.sp
.ne 2
.mk
.na
\fBlgrp_nlgrps\fR($\fIcookie\fR)\fR
.ad
.sp .6
.RS 4n
This function takes a cookie representing a snapshot of the lgroup
hierarchy. It returns the number of lgroups in the hierarchy, where the
number is always at least one.
.sp
In the event of error,
.B undef
is returned and
.B $!
is set to
.BR EINVAL ,
indicating that the cookie is not valid.
.sp
See \fBlgrp_nlgrps\fR(3LGRP) for more information.
.RE

.sp
.ne 2
.mk
.na
\fBlgrp_root\fR($\fIcookie\fR)\fR
.ad
.sp .6
.RS 4n
This function returns the root lgroup ID.
.sp
In the event of error,
.B undef
is returned and
.B $!
is set to
.BR EINVAL ,
indicatng that the cookie is not valid.
.sp
See \fBlgrp_root\fR(3LGRP) for more information.
.RE

.sp
.ne 2
.mk
.na
\fBlgrp_mem_size\fR($\fIcookie\fR, $\fIlgrp\fR, $\fItype\fR,
$\fIcontent\fR)\fR
.ad
.sp .6
.RS 4n
This function takes a cookie representing a snapshot of the lgroup
hierarchy. The function returns the memory size of the given lgroup in
bytes. The $\fItype\fR argument should be set to one of the following
values:
.sp
.ne 2
.mk
.na
.B LGRP_MEM_SZ_FREE
.ad
.RS 25n
.rt
free memory
.RE

.sp
.ne 2
.mk
.na
.B LGRP_MEM_SZ_INSTALLED
.ad
.RS 25n
.rt
installed memory
.RE

The $\fIcontent\fR argument should be set to one of the following values to
specify whether the direct contents or everything in this lgroup including
its children should be returned:
.sp
.ne 2
.mk
.na
.B LGRP_CONTENT_HIERARCHY
.ad
.RS 26n
.rt
Return everything within this hierarchy.
.RE

.sp
.ne 2
.mk
.na
.B LGRP_CONTENT_DIRECT
.ad
.RS 26n
.rt
Return that which is directly contained in this lgroup.
.RE

The total sizes include all the memory in the lgroup including its
children, while the others reflect only the memory contained directly in the
given lgroup.
.sp
Upon successful completion, the size in bytes is returned. Otherwise,
.B undef
is returned and
.B $!
is set to indicate the error.
.sp
See \fBlgrp_mem_size\fR(3LGRP) for more information.
.RE

.sp
.ne 2
.mk
.na
\fBlgrp_version\fR([$\fIversion\fR])\fR
.ad
.sp .6
.RS 4n
This function takes an interface version number, $\fIversion\fR, as an
argument and returns an lgroup interface version. The $\fIversion\fR
argument should be the value of
.B LGRP_VER_CURRENT
or
.B LGRP_VER_NONE
to find out the current lgroup interface version on the
running system.
.sp
If $\fIversion\fR is still supported by the implementation, then
.B lgrp_version()
returns the requested version. If \fBLGRP_VER_NONE\fR
is returned, the implementation cannot support the requested version.
.sp
If $\fIversion\fR is
.BR LGRP_VER_NONE ,
.B lgrp_version()
returns the
current version of the library.
.sp
The following example tests whether the version of the interface used by
the caller is supported:
.sp
.in +2
.nf
lgrp_version(LGRP_VER_CURRENT) == LGRP_VER_CURRENT or
    die("Built with unsupported lgroup interface");
.fi
.in -2

See \fBlgrp_version\fR(3LGRP) for more information.
.RE

.sp
.ne 2
.mk
.na
\fBlgrp_affinity_set\fR($\fIidtype\fR, $\fIid\fR, $\fIlgrp\fR,
$\fIaffinity\fR)\fR
.ad
.sp .6
.RS 4n
This function sets the affinity that the LWP or set of LWPs specified by
$\fIidtype\fR and $\fIid\fR have for the given lgroup. The lgroup affinity
can be set to
.BR LGRP_AFF_STRONG ,
.BR LGRP_AFF_WEAK ,
or
.BR LGRP_AFF_NONE .
.sp
If the $\fIidtype\fR is
.BR P_PID ,
the affinity is retrieved for one of
the LWPs in the process or set for all the LWPs of the process with process
ID (PID) $\fIid\fR. The affinity is retrieved or set for the LWP of the
current process with LWP ID $\fIid\fR if $\fIidtype\fR is
.BR P_LWPID .
If
$\fIid\fR is
.BR P_MYID ,
then the current LWP or process is specified.
.sp
There are different levels of affinity that can be specified by a thread
for a particuliar lgroup. The levels of affinity are the following from
strongest to weakest:
.sp
.ne 2
.mk
.na
.B LGRP_AFF_STRONG
.ad
.RS 19n
.rt
strong affinity
.RE

.sp
.ne 2
.mk
.na
.B LGRP_AFF_WEAK
.ad
.RS 19n
.rt
weak affinity
.RE

.sp
.ne 2
.mk
.na
.B LGRP_AFF_NONE
.ad
.RS 19n
.rt
no affinity
.RE

Upon successful completion,
.B lgrp_affinity_set()
returns 1. Otherwise,
it returns
.B undef
and set
.B $!
to indicate the error.
.sp
See \fBlgrp_affinity_set\fR(3LGRP) for more information.
.RE

.sp
.ne 2
.mk
.na
\fBlgrp_affinity_get\fR($\fIidtype\fR, $\fIid\fR, $\fIlgrp\fR)\fR
.ad
.sp .6
.RS 4n
This function returns the affinity that the LWP has to a given lgroup.
.sp
See \fBlgrp_affinity_get\fR(3LGRP) for more information.
.RE

.sp
.ne 2
.mk
.na
\fBlgrp_latency_cookie\fR($\fIcookie\fR, $\fIfrom\fR, $\fIto\fR,
[$\fIbetween\fR=\fBLGRP_LAT_CPU_TO_MEM\fR])\fR
.ad
.sp .6
.RS 4n
This function takes a cookie representing a snapshot of the lgroup
hierarchy and returns the latency value between a hardware resource in the
$\fIfrom\fR lgroup to a hardware resource in the $\fIto\fR lgroup. If
$\fIfrom\fR is the same lgroup as $\fIto\fR, the latency value within that
lgroup is returned.
.sp
The optional $\fIbetween\fR argument should be set to
.B LGRP_LAT_CPU_TO_MEM
to specify between which hardware resources the
latency should be measured. The only valid value is
.BR LGRP_LAT_CPU_TO_MEM ,
which represents latency from CPU to memory.
.sp
Upon successful completion,
.B lgrp_latency_cookie()
return 1.
Otherwise, it returns
.B undef
and set
.B $!
to indicate the error.
For LGRP API version 1, the
.B lgrp_latency_cookie()
is an alias for
.B lgrp_latency.()
.sp
See \fBlgrp_latency_cookie\fR(3LGRP) for more information.
.RE

.sp
.ne 2
.mk
.na
\fBlgrp_latency\fR($\fIfrom\fR, $\fIto\fR)\fR
.ad
.sp .6
.RS 4n
This function is similiar to the
.B lgrp_latency_cookie()
function, but
returns the latency between the given lgroups at the given instant in time.
Since lgroups can be freed and reallocated, this function might not be able
to provide a consistent answer across calls. For that reason,
.B lgrp_latency_cookie()
should be used in its place.
.sp
See \fBlgrp_latency\fR(3LGRP) for more information.
.RE

.sp
.ne 2
.mk
.na
\fBlgrp_resources\fR($\fIcookie\fR, $\fIlgrp\fR, $\fItype\fR)\fR
.ad
.sp .6
.RS 4n
This function returns the list of lgroups directly containing resources of
the specified type. The resources are represented by a set of lgroups in
which each lgroup directly contains CPU and/or memory resources.
.sp
The
.I type
can be specified as:
.sp
.ne 2
.mk
.na
.B LGRP_RSRC_CPU
.ad
.RS 17n
.rt
CPU resources
.RE

.sp
.ne 2
.mk
.na
.B LGRP_RSRC_MEM
.ad
.RS 17n
.rt
memory resources
.RE

In the event of error,
.B undef
or an empty list is returned and
.B $!
is set to indicate the error.
.sp
This function is available only for API version 2 and returns \fBundef\fR
or an empty list for API version 1 and sets
.B $!
to
.BR EINVAL .
.sp
See \fBlgrp_resources\fR(3LGRP) for more information.
.RE

.sp
.ne 2
.mk
.na
\fBlgrp_lgrps\fR($\fIcookie\fR, [$\fIlgrp\fR])\fR
.ad
.sp .6
.RS 4n
This function returns a list of all lgroups in a hierarchy starting from
$\fIlgrp\fR. If $\fIlgrp\fR is not specified, uses the value of
\fBlgrp_root\fR($\fIcookie\fR). This function returns the empty list on
failure.
.sp
When called in scalar context, this function returns the total number of
lgroups in the system.
.RE

.sp
.ne 2
.mk
.na
\fBlgrp_leaves\fR($\fIcookie\fR, [$\fIlgrp\fR])\fR
.ad
.sp .6
.RS 4n
This function returns a list of all leaf lgroups in a hierarchy starting
from $\fIlgrp\fR. If $\fIlgrp\fR is not specified, this function uses the
value of \fBlgrp_root\fR($\fIcookie\fR). It returns \fBundef\fR or an empty
list on failure.
.sp
When called in scalar context, this function returns the total number of
leaf lgroups in the system.
.RE

.sp
.ne 2
.mk
.na
\fBlgrp_isleaf\fR($\fIcookie\fR, $\fIlgrp\fR)\fR
.ad
.sp .6
.RS 4n
This function returns True if $\fIlgrp\fR is a leaf (has no children).
Otherwise it returns False.
.RE

.SS "Object methods"
.sp
.ne 2
.mk
.na
\fBnew\fR([$\fIview\fR])\fR
.ad
.sp .6
.RS 4n
This method creates a new
.B Sun::Solaris::Lgrp
object. An optional
argument is passed to the
.B lgrp_init()
function. By default this method
uses
.BR LGRP_VIEW_OS .
.RE

.sp
.ne 2
.mk
.na
.B cookie()
.ad
.sp .6
.RS 4n
This method returns a transparent cookie that can be passed to functions
accepting the cookie.
.RE

.sp
.ne 2
.mk
.na
\fBversion\fR([$\fIversion\fR])\fR
.ad
.sp .6
.RS 4n
Without the argument, this method returns the current version of the
.BR liblgrp (3LIB)
library. This method is a wrapper for
.B lgrp_version()
with
.B LGRP_VER_NONE
as the default version
argument.
.RE

.sp
.ne 2
.mk
.na
.B stale()
.ad
.sp .6
.RS 4n
This method returns T if the lgroup information in the object is stale and
F otherwise. It is a wrapper for
.BR lgrp_cookie_stale() .
.RE

.sp
.ne 2
.mk
.na
.B view()
.ad
.sp .6
.RS 4n
This method returns the snapshot's view of the lgroup hierarchy. It is a
wrapper for
.BR lgrp_view() .
.RE

.sp
.ne 2
.mk
.na
.B root()
.ad
.sp .6
.RS 4n
This method returns the root lgroup. It is a wrapper for
.BR lgrp_root() .
.RE

.sp
.ne 2
.mk
.na
\fBchildren\fR($\fIlgrp\fR)\fR
.ad
.sp .6
.RS 4n
This method returns the list of lgroups that are children of the specified
lgroup. It is a wrapper for
.BR lgrp_children() .
.RE

.sp
.ne 2
.mk
.na
\fBparents\fR($\fIlgrp\fR)\fR
.ad
.sp .6
.RS 4n
This method returns the list of lgroups that are parents of the specified
lgroup. It is a wrapper for
.BR lgrp_parents() .
.RE

.sp
.ne 2
.mk
.na
.B nlgrps()
.ad
.sp .6
.RS 4n
This method returns the number of lgroups in the hierarchy. It is a wrapper
for
.BR lgrp_nlgrps() .
.RE

.sp
.ne 2
.mk
.na
\fBmem_size\fR($\fIlgrp\fR, $\fItype\fR, $\fIcontent\fR)\fR
.ad
.sp .6
.RS 4n
This method returns the memory size of the given lgroup in bytes. It is a
wrapper for
.BR lgrp_mem_size() .
.RE

.sp
.ne 2
.mk
.na
\fBcpus\fR($\fIlgrp\fR, $\fIcontext\fR)\fR
.ad
.sp .6
.RS 4n
This method returns the list of CPUs in the lgroup specified by $lgrp. It
is a wrapper for
.BR lgrp_cpus() .
.RE

.sp
.ne 2
.mk
.na
\fBresources\fR($\fIlgrp\fR, $\fItype\fR)\fR
.ad
.sp .6
.RS 4n
This method returns the list of lgroups directly containing resources of
the specified type. It is a wrapper for
.BR lgrp_resources() .
.RE

.sp
.ne 2
.mk
.na
\fBhome\fR($\fIidtype\fR, $\fIid\fR)\fR
.ad
.sp .6
.RS 4n
This method returns the home lgroup for the given process or thread. It is
a wrapper for
.BR lgrp_home() .
.RE

.sp
.ne 2
.mk
.na
\fBaffinity_get\fR($\fIidtype\fR, $\fIid\fR, $\fIlgrp\fR)\fR
.ad
.sp .6
.RS 4n
This method returns the affinity that the LWP has to a given lgrp. It is a
wrapper for
.BR lgrp_affinity_get() .
.RE

.sp
.ne 2
.mk
.na
\fBaffinity_set\fR($\fIidtype\fR, $\fIid\fR, $\fIlgrp\fR,
$\fIaffinity\fR)\fR
.ad
.sp .6
.RS 4n
This method sets the affinity that the LWP or set of LWPs specified by
$\fIidtype\fR and $\fIid\fR have for the given lgroup. It is a wrapper for
lgrp_affinity_set.
.RE

.sp
.ne 2
.mk
.na
\fBlgrps\fR([$\fIlgrp\fR])\fR
.ad
.sp .6
.RS 4n
This method returns list of all lgroups in a hierarchy starting from
$\fIlgrp\fR or the \fBlgrp_root()\fR if $\fIlgrp\fR is not specified. It is
a wrapper for
.BR lgrp_lgrps() .
.RE

.sp
.ne 2
.mk
.na
\fBleaves\fR([$\fIlgrp\fR])\fR
.ad
.sp .6
.RS 4n
This method returns a list of all leaf lgroups in a hierarchy starting from
$\fIlgrp\fR. If $\fIlgrp\fR is not specified, this method uses the value of
.BR lgrp_root() .
It is a wrapper for
.BR lgrp_leaves() .
.RE

.sp
.ne 2
.mk
.na
\fBisleaf\fR($\fIlgrp\fR)\fR
.ad
.sp .6
.RS 4n
This method returns True if $\fIlgrp\fR is leaf (has no children) and False
otherwise. It is a wrapper for
.BR lgrp_isleaf() .
.RE

.sp
.ne 2
.mk
.na
\fBlatency\fR($\fIfrom\fR, $\fIto\fR)\fR
.ad
.sp .6
.RS 4n
This method returns the latency value between a hardware resource in the
$\fIfrom\fR lgroup to a hardware resource in the $\fIto\fR lgroup. It uses
.B lgrp_latency()
for version 1 of
.B liblgrp
and
.B lgrp_latency_cookie()
for newer versions.
.RE

.SS "Exports"
.sp
.LP
By default nothing is exported from this module. The following tags can be
used to selectively import constants and functions defined in this module:
.sp
.ne 2
.mk
.na
.B :LGRP_CONSTANTS
.ad
.RS 19n
.rt
.BR LGRP_AFF_NONE ,
.BR LGRP_AFF_STRONG ,
.BR LGRP_AFF_WEAK ,
.BR LGRP_CONTENT_DIRECT ,
.BR LGRP_CONTENT_HIERARCHY ,
.BR LGRP_MEM_SZ_FREE ,
.BR LGRP_MEM_SZ_INSTALLED ,
.BR LGRP_VER_CURRENT ,
.BR LGRP_VER_NONE ,
.BR LGRP_VIEW_CALLER ,
.BR LGRP_VIEW_OS ,
.BR LGRP_NONE ,
.BR LGRP_RSRC_CPU ,
.BR LGRP_RSRC_MEM ,
.BR LGRP_CONTENT_ALL ,
.B LGRP_LAT_CPU_TO_MEM
.RE

.sp
.ne 2
.mk
.na
.B :PROC_CONSTANTS
.ad
.RS 19n
.rt
.BR P_PID ,
.BR P_LWPID ,
.B P_MYID
.RE

.sp
.ne 2
.mk
.na
.B :CONSTANTS
.ad
.RS 19n
.rt
.BR :LGRP_CONSTANTS ,
.B :PROC_CONSTANTS
.RE

.sp
.ne 2
.mk
.na
.B :FUNCTIONS
.ad
.RS 19n
.rt
.BR lgrp_affinity_get() ,
.BR lgrp_affinity_set() ,
.BR lgrp_children() ,
.BR lgrp_cookie_stale() ,
.BR lgrp_cpus() ,
.BR lgrp_fini() ,
.BR lgrp_home() ,
.BR lgrp_init() ,
.BR lgrp_latency() ,
.BR lgrp_latency_cookie() ,
.BR lgrp_mem_size() ,
.BR lgrp_nlgrps() ,
.BR lgrp_parents() ,
.BR lgrp_root() ,
.BR lgrp_version() ,
.BR lgrp_view() ,
.BR lgrp_resources() ,
.BR lgrp_lgrps() ,
.BR lgrp_leaves() ,
.B lgrp_isleaf()
.RE

.sp
.ne 2
.mk
.na
.B :ALL
.ad
.RS 19n
.rt
.BR :CONSTANTS ,
.B :FUNCTIONS
.RE

.SS "Error values"
.sp
.LP
The functions in this module return
.B undef
or an empty list when an
underlying library function fails. The
.B $!
is set to provide more
information values for the error. The following error codes are possible:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The value supplied is not valid.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
There was not enough system memory to complete an operation.
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 10n
.rt
The effective user of the calling process does not have appropriate
privileges, and its real or effective user ID does not match the real or
effective user ID of one of the threads.
.RE

.sp
.ne 2
.mk
.na
.B ESRCH
.ad
.RS 10n
.rt
The specified process or thread was not found.
.RE

.SS "Difference in the API versions"
.sp
.LP
The
.BR liblgrp "(3LIB) library is versioned. The exact version that was"
used to compile a module is available through the
.BR lgrp_version()
function.
.sp
.LP
Version 2 of the
.B lgrp_user
API introduced the following constants and
functions not present in version 1:
.br
.in +2
.B LGRP_RSRC_CPU
constant
.in -2
.br
.in +2
.B LGRP_RSRC_MEM
constant
.in -2
.br
.in +2
.B LGRP_CONTENT_ALL
constant
.in -2
.br
.in +2
.B LGRP_LAT_CPU_TO_MEM
constant
.in -2
.br
.in +2
.B lgrp_resources()
function
.in -2
.br
.in +2
.B lgrp_latency_cookie()
function
.in -2
.sp
.LP
The
.B LGRP_RSRC_CPU
and
.B LGRP_RSRC_MEM
constants are not defined
for version 1. The
.B lgrp_resources()
function is defined for version 1
but always returns an empty list. The
.B lgrp_latency_cookie()
function
is an alias for
.B lgrp_latency()
for version 1.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWpl5u
_
Interface StabilityUnstable
.TE

.SH SEE ALSO
.sp
.LP
.BR lgrp_affinity_get (3LGRP),
.BR lgrp_affinity_set (3LGRP),
.BR lgrp_children (3LGRP),
.BR lgrp_cookie_stale (3LGRP),
.BR lgrp_cpus (3LGRP),
.BR lgrp_fini (3LGRP),
.BR lgrp_home (3LGRP),
.BR lgrp_init (3LGRP),
.BR lgrp_latency (3LGRP),
.BR lgrp_latency_cookie (3LGRP),
.BR lgrp_mem_size (3LGRP),
.BR lgrp_nlgrps (3LGRP),
.BR lgrp_parents (3LGRP),
.BR lgrp_resources (3LGRP),
.BR lgrp_root (3LGRP),
.BR lgrp_version (3LGRP),
.BR lgrp_view (3LGRP),
.BR liblgrp (3LIB),
.BR attributes (5)
