'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH Privilege 3PERL "30 Jan 2004" "SunOS 5.11" "Perl Library Functions"
.SH NAME
Privilege \- Perl interface to Privileges
.SH SYNOPSIS
.LP
.nf
use Sun::Solaris::Privilege qw(:ALL);
.fi

.SH DESCRIPTION
.sp
.LP
This module provides wrappers for the Privilege-related system and library
calls. Also provided are constants from the various Privilege-related
headers and dynamically-generated constants for all the privileges and
privilege sets.
.SS "Constants"
.sp
.LP
.BR PRIV_STR_SHORT ,
.BR PRIV_STR_LIT ,
.BR PRIV_STR_PORT ,
.BR PRIV_ON ,
.BR PRIV_OFF ,
.BR PRIV_SET ,
.BR PRIV_AWARE ,
and
.BR PRIV_DEBUG .
.SS "Functions"
.sp
.ne 2
.mk
.na
.B getppriv($which)
.ad
.sp .6
.RS 4n
This function returns the process privilege set specified by
.BR $which .
.RE

.sp
.ne 2
.mk
.na
.B setppriv($op, $which, $set)
.ad
.sp .6
.RS 4n
This function modified the privilege set specified by $which in the as
specified by the
.B $op
and
.B $set
arguments. If
.B $op
is
.BR PRIV_ON ,
the privileges in
.B $set
are added to the set specified.
If
.B $op
is
.BR PRIV_OFF ,
the privileges in
.B $set
are removed
from the set specified. If
.B $op
is
.BR PRIV_SET ,
the specified set is
made equal to
.BR $set .
.RE

.sp
.ne 2
.mk
.na
\fBgetpflags($flag)\fR
.ad
.sp .6
.RS 4n
This function returns the value associated with process \fB$flag\fR or
\fBundef\fR on error. Possible values for \fB$flag\fR are \fBPRIV_AWARE\fR
and
.BR PRIV_DEBUG .
.RE

.sp
.ne 2
.mk
.na
\fBsetppflags($flag, $val)\fR
.ad
.sp .6
.RS 4n
This function sets the process flag \fB$flag\fR to \fB$val\fR.
.RE

.sp
.ne 2
.mk
.na
\fBpriv_fillset()\fR
.ad
.sp .6
.RS 4n
This function returns a new privilege set with all privileges set.
.RE

.sp
.ne 2
.mk
.na
.B priv_emptyset()
.ad
.sp .6
.RS 4n
This function returns a new empty privilege set.
.RE

.sp
.ne 2
.mk
.na
.B priv_isemptyset($set)
.ad
.sp .6
.RS 4n
This function returns whether or not
.B $set
is empty.
.RE

.sp
.ne 2
.mk
.na
\fBpriv_isfullset($set)\fR
.ad
.sp .6
.RS 4n
This function returns whether or not
.B $set
is full.
.RE

.sp
.ne 2
.mk
.na
.B priv_isequalset($a, $b)
.ad
.sp .6
.RS 4n
This function returns whether sets
.B $a
and
.B $b
are equal.
.RE

.sp
.ne 2
.mk
.na
.B priv_issubset($a, $b)
.ad
.sp .6
.RS 4n
This function returns whether set
.B $a
is a subset of
.BR $b .
.RE

.sp
.ne 2
.mk
.na
.B priv_ismember($set, $priv)
.ad
.sp .6
.RS 4n
This function returns whether
.B $priv
is a member of
.BR $set .
.RE

.sp
.ne 2
.mk
.na
\fBpriv_ineffect($priv)\fR
.ad
.sp .6
.RS 4n
This function returned whether
.B $priv
is in the process's effective
set.
.RE

.sp
.ne 2
.mk
.na
.B priv_intersect($a, $b)
.ad
.sp .6
.RS 4n
This function returns a new privilege set which is the intersection of
\fB$a\fR and \fB$b\fR.
.RE

.sp
.ne 2
.mk
.na
.B priv_union($a, $b)
.ad
.sp .6
.RS 4n
This function returns a new privilege set which is the union of
.BR $a
and
.BR $b .
.RE

.sp
.ne 2
.mk
.na
.B priv_inverse($a)
.ad
.sp .6
.RS 4n
This function returns a new privilege set which is the inverse of
.BR $a .
.RE

.sp
.ne 2
.mk
.na
.B priv_addset($set, $priv)
.ad
.sp .6
.RS 4n
This functon adds the privilege
.B $priv
to
.BR $set .
.RE

.sp
.ne 2
.mk
.na
.B priv_copyset($a)
.ad
.sp .6
.RS 4n
This function returns a copy of the privilege set
.BR $a .
.RE

.sp
.ne 2
.mk
.na
.B priv_delset($set, $priv)
.ad
.sp .6
.RS 4n
This function remove the privilege
.B $priv
from
.BR $set .
.RE

.SS "Class methods"
.sp
.LP
None.
.SS "Object methods"
.sp
.LP
None.
.SS "Exports"
.sp
.LP
By default nothing is exported from this module. The following tags can be
used to selectively import constants and functions defined in this module:
.sp
.ne 2
.mk
.na
.B :SYSCALLS
.ad
.RS 14n
.rt
.BR getppriv() ,
.B setppriv()
.RE

.sp
.ne 2
.mk
.na
.B :LIBCALLS
.ad
.RS 14n
.rt
.BR priv_addset() ,
.BR priv_copyset() ,
.BR priv_delset() ,
.BR priv_emptyset() ,
\fBpriv_fillset()\fR, \fBpriv_intersect()\fR,
.BR priv_inverse() ,
.BR priv_isemptyset() ,
.BR priv_isequalset() ,
.BR priv_isfullset() ,
.BR priv_ismember() ,
.BR priv_issubset() ,
.BR priv_gettext() ,
.BR priv_union() ,
.BR priv_set_to_str() ,
.B priv_str_to_set()
.RE

.sp
.ne 2
.mk
.na
.B :CONSTANTS
.ad
.RS 14n
.rt
.BR PRIV_STR_SHORT ,
.BR PRIV_STR_LIT ,
.BR PRIV_STR_PORT ,
.BR PRIV_ON ,
.BR PRIV_OFF ,
.BR PRIV_SET ,
.BR PRIV_AWARE ,
.BR PRIV_DEBUG ,
plus constants for all privileges and privilege sets.
.RE

.sp
.ne 2
.mk
.na
.B :VARIABLES
.ad
.RS 14n
.rt
.BR %PRIVILEGES ,
.B %PRIVSETS
.RE

.sp
.ne 2
.mk
.na
.B :ALL
.ad
.RS 14n
.rt
.BR :SYSCALLS ,
.BR :LIBCALLS ,
.BR :CONSTANTS ,
.B :VARIABLES
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWpl5u
_
Interface StabilityEvolving
.TE

.SH SEE ALSO
.sp
.LP
.BR getpflags (2),
.BR getppriv (2),
.BR priv_addset (3C),
.BR priv_set (3C),
.BR priv_str_to_set (3C),
.BR attributes (5),
.BR privileges (5)
