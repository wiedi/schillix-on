'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH scf_property_create 3SCF "28 Oct 2008" "SunOS 5.11" "Service Configuration Facility Library Functions"
.SH NAME
scf_property_create, scf_property_handle, scf_property_destroy,
scf_property_get_name, scf_property_type, scf_property_is_type,
scf_type_to_string, scf_string_to_type, scf_property_get_value,
scf_pg_get_property \- create and manipulate property handles in the Service
Configuration Facility
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lscf\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <libscf.h>

\fBscf_property_t *\fBscf_property_create\fR(\fBscf_handle_t *\fIhandle\fR);
.fi

.LP
.nf
\fBscf_handle_t *\fBscf_property_handle\fR(\fBscf_property_t *\fIprop\fR);
.fi

.LP
.nf
\fBvoid\fR \fBscf_property_destroy\fR(\fBscf_property_t *\fIprop\fR);
.fi

.LP
.nf
\fBssize_t\fR \fBscf_property_get_name\fR(\fBconst scf_property_t *\fIprop\fR,
     \fBchar *\fIbuf\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_property_type\fR(\fBconst scf_property_t *\fIprop\fR,
     \fBscf_type_t *\fItype\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_property_is_type\fR(\fBconst scf_property_t *\fIprop\fR,
     \fBscf_type_t\fR \fItype\fR);
.fi

.LP
.nf
\fBconst char *\fBscf_type_to_string\fR(\fBscf_type_t\fR \fItype\fR);
.fi

.LP
.nf
\fBscf_type_t\fR \fBscf_string_to_type\fR(\fBconst char *\fItype\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_property_get_value\fR(\fBconst scf_property_t *\fIprop\fR,
     \fBscf_value_t *\fIvalue\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_pg_get_property\fR(\fBconst scf_property_t *\fIpg\fR,
     \fBconst char *\fIname\fR, \fBscf_property_t *\fIprop\fR);
.fi

.SH DESCRIPTION
.sp
.LP
Properties are named sets of values of one type. They are grouped into
property groups (see
.BR scf_pg_create (3SCF))
that are updated atomically
using transactions (see
.BR scf_transaction_create (3SCF)).
.sp
.LP
An
.B scf_property_t
is an opaque handle that can be set to a single
property at any given time. When set, it inherits the point-in-time from the
source
.B scf_propertygroup_t
and does not change until reset.
.sp
.LP
The
.B scf_property_create()
function allocates and initializes a new
.B scf_property_t
bound to
.IR handle .
The
.B scf_property_destroy()
function destroys and frees
.IR prop .
.sp
.LP
The
.B scf_property_handle()
function returns the handle to which
.I prop
is bound.
.sp
.LP
The
.B scf_property_type()
function retrieves the type of the property
to which
.I prop
is set.
.sp
.LP
The
.B scf_property_is_type()
function determines if the property is
compatible with type. See
.BR scf_value_create (3SCF).
.sp
.LP
The
.B scf_type_to_string()
function returns the string name of the type
supplied. If the type is invalid or unknown, it returns "unknown".
.sp
.LP
.RB "The " scf_string_to_type() " function returns the " scf_type_t 
definition of the string supplied. If the string does not translate to an
existing type, it returns
.BR SCF_TYPE_INVALID .
.sp
.LP
The
.B scf_property_get_value()
function retrieves the single value that
the property to which
.I prop
is set contains. If the property has more
than one value, the
.I value
argument is set to one of the values. To
retrieve all values associated with a property, see
.BR scf_iter_property_values (3SCF).
.sp
.LP
The
.B scf_pg_get_property()
function sets
.I prop
to the property
specified by
.I name
in the property group specified by
.IR pg .
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B scf_property_create()
returns a new
.BR scf_property_t .
Otherwise, it returns
.IR NULL .
.sp
.LP
Upon successful completion,
.B scf_property_get_name()
function returns
the length of the string written, not including the terminating null byte.
Otherwise, it returns -1.
.sp
.LP
Upon successful completion,
.BR scf_pg_get_property() ,
.BR scf_property_type() ,
.BR scf_property_is_type() ,
and
.B scf_pg_get_value()
functions return 0. Otherwise, they return -1.
.sp
.LP
Upon successful completion,
.B scf_type_to_string()
returns a string of
the type supplied.
.sp
.LP
Upon successful completion,
.B scf_string_to_type()
returns the
.B scf_type_t
definition of the string supplied
.SH ERRORS
.sp
.LP
The
.B scf_property_create()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.RS 30n
.rt
The value of the
.I handle
argument is
.IR NULL .
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_MEMORY
.ad
.RS 30n
.rt
There is not enough memory to allocate an
.BR scf_property_t .
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_RESOURCES
.ad
.RS 30n
.rt
The server does not have adequate resources for a new property handle.
.RE

.sp
.LP
The
.B scf_property_handle()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_HANDLE_DESTROYED
.ad
.RS 30n
.rt
The handle associated with
.I prop
has been destroyed.
.RE

.sp
.LP
The
.BR scf_property_get_name() ,
.BR scf_property_type() ,
.BR scf_property_is_type() ,
and
.B scf_property_get_value()
functions
will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_CONNECTION_BROKEN
.ad
.sp .6
.RS 4n
The connection to the repository was lost.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_DELETED
.ad
.sp .6
.RS 4n
The property's parent property group or an ancestor has been deleted.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_BOUND
.ad
.sp .6
.RS 4n
The handle was never bound or has been unbound.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_SET
.ad
.sp .6
.RS 4n
The property is not set.
.RE

.sp
.LP
The
.B scf_property_is_type()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.RS 30n
.rt
The
.I type
argument is not a valid type.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_TYPE_MISMATCH
.ad
.RS 30n
.rt
The
.I prop
argument is not of a type compatible with
.IR type .
.RE

.sp
.LP
The
.B scf_pg_get_property()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_BACKEND_ACCESS
.ad
.sp .6
.RS 4n
The  storage  mechanism  that  the   repository server
.RB ( svc.configd (1M))
chose for the operation denied access.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_CONNECTION_BROKEN
.ad
.sp .6
.RS 4n
The connection to the repository was lost.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_DELETED
.ad
.sp .6
.RS 4n
The property group or an ancestor has been deleted.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_HANDLE_MISMATCH
.ad
.sp .6
.RS 4n
The property group and property are not derived from the same handle.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_INTERNAL
.ad
.sp .6
.RS 4n
An internal error occurred.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.sp .6
.RS 4n
The value of the
.I name
argument is not a valid property name.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_RESOURCES
.ad
.sp .6
.RS 4n
The server does not have the resources to complete the request.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_BOUND
.ad
.sp .6
.RS 4n
The handle was never bound or has been unbound.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_FOUND
.ad
.sp .6
.RS 4n
The property specified by
.I name
was not found.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_SET
.ad
.sp .6
.RS 4n
The property group specified by
.I pg
is not set.
.RE

.sp
.LP
The
.B scf_property_get_value()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_CONSTRAINT_VIOLATED
.ad
.sp .6
.RS 4n
.RI "The property has more than one value associated with it. The" " value"
argument will be set to one of the values.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_HANDLE_MISMATCH
.ad
.sp .6
.RS 4n
The property and value are derived from different handles.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_FOUND
.ad
.sp .6
.RS 4n
The property has no values associated with it. The
.I value
argument
will be reset.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_PERMISSION_DENIED
.ad
.sp .6
.RS 4n
The value could not be read due to access restrictions.
.RE

.sp
.LP
The
.BR scf_error (3SCF)
function can be used to retrieve the error
value.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libscf (3LIB),
.BR scf_error (3SCF),
.BR scf_handle_decode_fmri (3SCF),
.BR scf_iter_property_values (3SCF),
.BR scf_pg_create (3SCF),
.BR scf_property_to_fmri (3SCF),
.BR scf_transaction_create (3SCF),
.BR scf_value_create (3SCF),
.BR attributes (5)
