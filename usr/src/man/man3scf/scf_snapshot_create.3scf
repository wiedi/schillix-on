'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH scf_snapshot_create 3SCF "27 Aug 2007" "SunOS 5.11" "Service Configuration Facility Library Functions"
.SH NAME
scf_snapshot_create, scf_snapshot_handle, scf_snapshot_destroy,
scf_snapshot_get_parent, scf_snapshot_get_name, scf_snapshot_update,
scf_instance_get_snapshot \- create and manipulate snapshot handles and
snapshots in the Service Configuration Facility
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lscf\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <libscf.h>

\fBscf_snapshot_t *\fBscf_snapshot_create\fR(\fBscf_handle_t *\fIhandle\fR);
.fi

.LP
.nf
\fBscf_handle_t *\fBscf_snapshot_handle\fR(\fBscf_snapshot_t *\fIsnap\fR);
.fi

.LP
.nf
\fBvoid\fR \fBscf_snapshot_destroy\fR(\fBscf_snapshot_t *\fIsnap\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_snapshot_get_parent\fR(\fBconst scf_snapshot_t *\fIsnap\fR,
     \fBscf_instance_t *\fIinst\fR);
.fi

.LP
.nf
\fBssize_t\fR \fBscf_snapshot_get_name\fR(\fBconst scf_snapshot_t *\fIsnap\fR,
     \fBchar *\fIbuf\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_snapshot_update\fR(\fBscf_snapshot_t *\fIsnap\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_instance_get_snapshot\fR(\fBconst scf_instance_t *\fIinst\fR,
     \fBconst char *\fIname\fR, \fBscf_snapshot_t *\fIsnap\fR);
.fi

.SH DESCRIPTION
.sp
.LP
A snapshot is an unchanging picture of the full set of property groups
associated with an instance. Snapshots are automatically created and managed
by the Solaris Management Facility. See
.BR smf (5).
.sp
.LP
A snapshot consists of a set of snaplevels, each of which holds copies of
the property groups associated with an instance or service in the resolution
path of the base instance. Typically, there is one snaplevel for the
instance and one for the instance's parent service.
.sp
.LP
The
.B scf_snapshot_create()
function allocates and initializes a new
.B scf_snapshot_t
bound to
.IR handle .
The
.B scf_snapshot_destroy()
function destroys and frees
.IR snap .
.sp
.LP
The
.B scf_snapshot_handle()
function retrieves the handle to which
.I snap
is bound.
.sp
.LP
The
.B scf_snapshot_get_parent()
function sets
.I inst
to the parent
of the snapshot to which
.I snap
is set.
.sp
.LP
The
.B scf_snapshot_get_name()
function retrieves the name of the
snapshot to which
.I snap
is set.
.sp
.LP
The
.B scf_snapshot_update()
function reattaches
.I snap
to the
latest version of the snapshot to which
.I snap
is set.
.sp
.LP
The
.B scf_instance_get_snapshot()
function sets
.I snap
to the
snapshot specified by
.I name
in the instance specified by
.IR inst .
To
walk all of the snapshots, see
.BR scf_iter_instance_snapshots (3SCF).
.sp
.LP
To access the snaplevels of a snapshot, see
.BR scf_snapshot_get_base_snaplevel (3SCF).
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B scf_snapshot_create()
returns a new
.BR scf_snapshot_t .
Otherwise, it returns
.IR NULL .
.sp
.LP
Upon successful completion,
.B scf_snapshot_handle()
returns the handle
to which
.I snap
is bound. Otherwise, it returns
.IR NULL .
.sp
.LP
Upon successful completion,
.B scf_snapshot_get_name()
returns the
length of the string written, not including the terminating null byte.
Otherwise, it returns
.IR NULL .
.sp
.LP
The
.B scf_snapshot_update()
function returns 1 if the snapshot was
updated, 0 if the snapshot had not been updated, and -1 on failure.
.sp
.LP
Upon successful completion,
.B scf_snapshot_get_parent()
and
.B scf_instance_get_snapshot()
return 0. Otherwise, they return -1.
.SH ERRORS
.sp
.LP
The
.B scf_snapshot_create()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.sp .6
.RS 4n
The
.I handle
argument is
.IR NULL .
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_MEMORY
.ad
.sp .6
.RS 4n
There is not enough memory to allocate an
.BR scf_snapshot_t .
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_RESOURCES
.ad
.sp .6
.RS 4n
The server does not have adequate resources for a new instance handle.
.RE

.sp
.LP
The
.B scf_snapshot_handle()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_HANDLE_DESTROYED
.ad
.sp .6
.RS 4n
The handle associated with
.I snap
has been destroyed.
.RE

.sp
.LP
.RB "The " scf_snapshot_get_name() " and " scf_snapshot_get_parent() 
functions will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_DELETED
.ad
.sp .6
.RS 4n
The snapshot has been deleted.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_SET
.ad
.sp .6
.RS 4n
The snapshot is not set.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_BOUND
.ad
.sp .6
.RS 4n
The handle is not bound.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_CONNECTION_BROKEN
.ad
.sp .6
.RS 4n
The connection to the repository was lost.
.RE

.sp
.LP
The
.B scf_snapshot_update()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_CONNECTION_BROKEN
.ad
.sp .6
.RS 4n
The connection to the repository was lost.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_DELETED
.ad
.sp .6
.RS 4n
An ancestor of the snapshot specified by
.I snap
has been deleted.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_INTERNAL
.ad
.sp .6
.RS 4n
An internal error occurred. This can happen if
.I snap
has been
corrupted.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.sp .6
.RS 4n
The
.I snap
argument refers to an invalid
.BR scf_snapshot_t .
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_BOUND
.ad
.sp .6
.RS 4n
The handle is not bound.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_SET
.ad
.sp .6
.RS 4n
The snapshot specified by
.I snap
is not set.
.RE

.sp
.LP
The
.B scf_instance_get_snapshot()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_BACKEND_ACCESS
.ad
.sp .6
.RS 4n
The  storage  mechanism  that  the   repository server
.RB ( svc.configd (1M))
chose for the operation denied access.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_CONNECTION_BROKEN
.ad
.sp .6
.RS 4n
The connection to the repository was lost.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_DELETED
.ad
.sp .6
.RS 4n
The instance has been deleted.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_HANDLE_MISMATCH
.ad
.sp .6
.RS 4n
The instance and snapshot are not derived from the same handle.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_INTERNAL
.ad
.sp .6
.RS 4n
An internal error occurred.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.sp .6
.RS 4n
The value of the
.I name
argument is not a valid snapshot name.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_RESOURCES
.ad
.sp .6
.RS 4n
The server does not have the resources to complete the request.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_BOUND
.ad
.sp .6
.RS 4n
The handle is not bound.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_FOUND
.ad
.sp .6
.RS 4n
The snapshot specified by
.I name
was not found.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_SET
.ad
.sp .6
.RS 4n
The instance is not set.
.RE

.sp
.LP
The
.BR scf_error (3SCF)
function can be used to retrieve the error
value.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libscf (3LIB),
.BR scf_error (3SCF),
.BR scf_iter_instance_snapshots (3SCF),
.BR scf_snapshot_get_base_snaplevel (3SCF),
.BR attributes (5),
.BR smf (5)
