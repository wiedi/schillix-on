'\" te
.\" Copyright (c) 2008, Sun Microsystems Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH scf_tmpl_prop_create 3SCF "28 Oct 2008" "SunOS 5.11" "Service Configuration Facility Library Functions"
.SH NAME
scf_tmpl_prop_create, scf_tmpl_prop_reset, scf_tmpl_prop_destroy,
scf_tmpl_get_by_prop, scf_tmpl_iter_props \- template property functions
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lscf\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <libscf.h>

\fBscf_prop_tmpl_t *\fBscf_tmpl_prop_create\fR(\fBscf_handle_t *\fIhandle\fR);
.fi

.LP
.nf
\fBvoid\fR \fBscf_tmpl_prop_reset\fR(\fBscf_prop_tmpl_t *\fIprop_tmpl\fR);
.fi

.LP
.nf
\fBvoid\fR \fBscf_tmpl_prop_destroy\fR(\fBscf_prop_tmpl_t *\fIprop_tmpl\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_tmpl_get_by_prop\fR(\fBscf_pg_tmpl_t *\fIpg_tmpl\fR,
     \fBconst char *\fIprop\fR, \fBscf_prop_tmpl_t *\fIprop_tmpl\fR, \fBint\fR \fIflags\fR)
.fi

.LP
.nf
\fBint\fR \fBscf_tmpl_iter_props\fR(\fBscf_pg_tmpl_t *\fIpg_tmpl\fR, \fBconst char *\fIfmri\fR,
     \fBscf_prop_tmpl_t *\fIprop_tmpl\fR, \fBint\fR \fIflags\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The template property functions locate and give access to metadata about
properties. They require that the template for the property group containing
the property has already been located by one of the
.BR scf_tmpl_pg_create (3SCF)
suite of functions.
.sp
.LP
Once retrieved, the
.B scf_prop_tmpl_t
can be explored using the
.BR scf_tmpl_prop_name (3SCF)
suite of functions.
.sp
.LP
.RB "Before calling " scf_tmpl_get_by_prop() " or " scf_tmpl_iter_props() ,
the
.B scf_prop_tmpl_t
must be allocated by
.BR scf_tmpl_prop_create .
The
.B scf_prop_tmpl_t
can be reset to contain no template information with
.BR scf_tmpl_prop_reset() ,
so that it can be used to start an iteration from
scratch. All associated memory can be freed with
.BR scf_tmpl_prop_destroy() .
.sp
.LP
The
.B scf_tmpl_get_by_prop()
function locates template data about the
property name specified.
.sp
.LP
The
.B scf_tmpl_iter_props()
function iterates across all property
templates defined in the specified property group template.
.sp
.LP
The iterator state for
.B scf_tmpl_iter_props()
is stored on the property
template data structure. The data structure should be allocated with
.BR scf_tmpl_prop_create() ,
and to continue the iteration the previously
returned structure should be passed in as an argument.
.SH RETURN VALUES
.sp
.LP
The
.B scf_tmpl_get_by_prop()
function returns -1 on failure and 0 on
success.
.sp
.LP
The
.B scf_tmpl_iter_props()
function returns 1 on successful completion.
If the iteration is complete, it returns 0. It returns -1 on error.
.SH ERRORS
.sp
.LP
The
.BR scf_tmpl_get_by_prop() " and "
.B scf_tmpl_iter_props()
functions
will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_BACKEND_ACCESS
.ad
.sp .6
.RS 4n
The storage mechanism that the repository server
.RB ( svc.configd (1M))
chose for the operation denied access.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_CONNECTION_BROKEN
.ad
.sp .6
.RS 4n
The connection to the repository was lost.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_DELETED
.ad
.sp .6
.RS 4n
The instance or its template property group has been deleted.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_HANDLE_DESTROYED
.ad
.sp .6
.RS 4n
The handle passed in has been destroyed.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_INTERNAL
.ad
.sp .6
.RS 4n
An internal error occurred.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.sp .6
.RS 4n
One of the arguments is invalid.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_MEMORY
.ad
.sp .6
.RS 4n
There is not enough memory to populate the
.BR scf_prop_tmpl_t .
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_RESOURCES
.ad
.sp .6
.RS 4n
The server does not have adequate resources to complete the request.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_BOUND
.ad
.sp .6
.RS 4n
The handle is not currently bound.
.RE

.sp
.LP
The
.B scf_tmpl_get_by_prop()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_FOUND
.ad
.sp .6
.RS 4n
Template object matching property doesn't exist in the repository.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_TYPE_MISMATCH
.ad
.sp .6
.RS 4n
Matching template object is the wrong type in the repository.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_PERMISSION_DENIED
.ad
.sp .6
.RS 4n
The template could not be read due to access restrictions.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_TEMPLATE_INVALID
.ad
.sp .6
.RS 4n
The template data is invalid.
.RE

.sp
.LP
The
.B scf_tmpl_prop_create()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.RS 30n
.rt
The
.I handle
argument is
.IR NULL .
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_MEMORY
.ad
.RS 30n
.rt
There is no memory available.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR svc.configd (1M),
.BR scf_tmpl_pg_create (3SCF),
.BR scf_tmpl_prop_name (3SCF),
.BR attributes (5),
.BR smf_template (5)
