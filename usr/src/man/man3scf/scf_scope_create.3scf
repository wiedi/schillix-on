'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH scf_scope_create 3SCF "9 Sep 2004" "SunOS 5.11" "Service Configuration Facility Library Functions"
.SH NAME
scf_scope_create, scf_scope_handle, scf_scope_destroy, scf_scope_get_name,
scf_handle_get_scope \- create and manipulate scope handles in the Service
Configuration Facility
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lscf\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <libscf.h>

\fBscf_scope_t *\fBscf_scope_create\fR(\fBscf_handle_t *\fIhandle\fR);
.fi

.LP
.nf
\fBscf_handle_t *\fBscf_scope_handle\fR(\fBscf_scope_t *\fIsc\fR);
.fi

.LP
.nf
\fBvoid\fR \fBscf_scope_destroy\fR(\fBscf_scope_t *\fIsc\fR);
.fi

.LP
.nf
\fBssize_t\fR  \fBscf_scope_get_name\fR(\fBscf_scope_t *\fIsc\fR, \fBchar *\fIbuf\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_handle_get_scope\fR(\fBscf_handle_t *\fIhandle\fR, \fBconst char *\fIname\fR,
     \fBscf_scope_t *\fIout\fR);
.fi

.SH DESCRIPTION
.sp
.LP
Scopes are the top level of the Service Configuration Facility's repository
tree. The children of a scope are services (see
.BR scf_service_create (3SCF))
and can be walked using
.BR scf_iter_scope_services (3SCF).
.sp
.LP
There is a distinguished scope with the name
.B SCF_SCOPE_LOCAL
that is
the root for all available services on the local machine. In the current
implementation, there are no other scopes.
.sp
.LP
An
.B scf_scope_t
is an opaque handle that can be set to a single scope
at any given time. The
.B scf_scope_create()
function allocates a new
.B scf_scope_t
bound to
.IR handle .
The
.B scf_scope_destroy()
function destroys and frees
.IR sc .
.sp
.LP
The
.B scf_scope_handle()
function retrieves the handle to which
.I sc
is bound.
.sp
.LP
The
.B scf_scope_get_name()
function retrieves the name of the scope to
which
.I sc
is set.
.sp
.LP
The
.B scf_handle_get_scope()
function sets
.I out
to the scope
specified by
.I name
for the repository handle specified by
.IR handle .
The
.BR scf_iter_handle_scopes (3SCF)
and
.BR scf_iter_next_scope (3SCF)
calls can be used to iterate through all available scopes.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B scf_scope_create()
returns a new
.BR scf_scope_t .
Otherwise, it returns
.IR NULL .
.sp
.LP
Upon successful completion,
.B scf_scope_handle()
returns the handle to
which
.I sc
is bound. Otherwise, it returns
.IR NULL .
.sp
.LP
Upon successful completion,
.B scf_scope_get_name()
returns the length
of the string written, not including the terminating null byte.  Otherwise,
it returns -1.
.sp
.LP
Upon successful completion,
.B scf_handle_get_scope()
returns 0.
Otherwise, it returns -1.
.SH ERRORS
.sp
.LP
The
.B scf_scope_create()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.RS 30n
.rt
The value of the
.I handle
argument is
.IR NULL .
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_MEMORY
.ad
.RS 30n
.rt
There is not enough memory to allocate an
.BR scf_scope_t .
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_RESOURCES
.ad
.RS 30n
.rt
The server does not have adequate resources for a new scope handle.
.RE

.sp
.LP
The
.B scf_scope_handle()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_HANDLE_DESTROYED
.ad
.RS 30n
.rt
The handle associated with
.I sc
has been destroyed.
.RE

.sp
.LP
The
.B scf_scope_get_name()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_SET
.ad
.sp .6
.RS 4n
The scope is not set.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_BOUND
.ad
.sp .6
.RS 4n
The handle is not bound.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_CONNECTION_BROKEN
.ad
.sp .6
.RS 4n
The connection to the repository was lost.
.RE

.sp
.LP
The
.B scf_handle_get_scope()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_FOUND
.ad
.sp .6
.RS 4n
No scope named name was found.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.sp .6
.RS 4n
The
.I name
argument is not a valid scope name.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_BOUND
.ad
.sp .6
.RS 4n
The handle is not bound.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_CONNECTION_BROKEN
.ad
.sp .6
.RS 4n
The connection to the repository was lost.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_HANDLE_MISMATCH
.ad
.sp .6
.RS 4n
The value of the
.I out
argument is not derived from handle.
.RE

.sp
.LP
The
.BR scf_error (3SCF)
function can be used to retrieve the error
value.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libscf (3LIB),
.BR scf_error (3SCF),
.BR scf_handle_decode_fmri (3SCF),
.BR scf_iter_handle_scopes (3SCF),
.BR scf_iter_next_scope (3SCF),
.BR scf_iter_scope_services (3SCF),
.BR scf_scope_to_fmri (3SCF),
.BR scf_service_create (3SCF),
.BR attributes (5)
