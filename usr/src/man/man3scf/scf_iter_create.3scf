'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH scf_iter_create 3SCF "4 Dec 2008" "SunOS 5.11" "Service Configuration Facility Library Functions"
.SH NAME
scf_iter_create, scf_iter_handle, scf_iter_destroy, scf_iter_reset,
scf_iter_handle_scopes, scf_iter_scope_services, scf_iter_service_instances,
scf_iter_service_pgs, scf_iter_service_pgs_typed,
scf_iter_instance_snapshots, scf_iter_snaplevel_pgs,
scf_iter_snaplevel_pgs_typed, scf_iter_instance_pgs,
scf_iter_instance_pgs_typed, scf_iter_instance_pgs_composed,
scf_iter_instance_pgs_typed_composed, scf_iter_pg_properties,
scf_iter_property_values, scf_iter_next_scope, scf_iter_next_service,
scf_iter_next_instance, scf_iter_next_snapshot, scf_iter_next_pg,
scf_iter_next_property, scf_iter_next_value \- iterate through the Service
Configuration Facility repository
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lscf\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <libscf.h>

\fBscf_iter_t *\fBscf_iter_create\fR(\fBscf_handle_t *\fIhandle\fR);
.fi

.LP
.nf
\fBscf_handle_t *\fBscf_iter_handle\fR(\fBscf_iter_t *\fIiter\fR);
.fi

.LP
.nf
\fBvoid\fR \fBscf_iter_destroy\fR(\fBscf_iter_t *\fIiter\fR);
.fi

.LP
.nf
\fBvoid\fR \fBscf_iter_reset\fR(\fBscf_iter_t *\fIiter\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_handle_scopes\fR(\fBscf_iter_t *\fIiter\fR, \fBconst scf_handle_t *\fIh\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_scope_services\fR(\fBscf_iter_t *\fIiter\fR, \fBconst scf_scope_t *\fIparent\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_service_instances\fR(\fBscf_iter_t *\fIiter\fR,
     \fBconst scf_service_t *\fIparent\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_service_pgs\fR(\fBscf_iter_t *\fIiter\fR, \fBconst scf_service_t *\fIparent\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_service_pgs_typed\fR(\fBscf_iter_t *\fIiter\fR,
     \fBconst scf_service_t *\fIparent\fR, \fBconst char *\fIpgtype\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_instance_snapshots\fR(\fBscf_iter_t *\fIiter\fR,
     \fBconst scf_instance_t *\fIparent\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_snaplevel_pgs\fR(\fBscf_iter_t *\fIiter\fR,
     \fBconst scf_snaplevel_t *\fIparent\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_snaplevel_pgs_typed\fR(\fBscf_iter_t *\fIiter\fR,
     \fBconst scf_snaplevel_t *\fIparent\fR, \fBconst char *\fIpgtype\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_instance_pgs\fR(\fBscf_iter_t *\fIiter\fR, \fBscf_instance_t *\fIparent\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_instance_pgs_typed\fR(\fBscf_iter_t *\fIiter\fR,
     \fBscf_instance_t *\fIparent\fR, \fBconst char *\fIpgtype\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_instance_pgs_composed\fR(\fBscf_iter_t *\fIiter\fR,
     \fBconst scf_instance_t *\fIinstance\fR, \fBconst scf_snapshot_t *\fIsnapshot\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_instance_pgs_typed_composed\fR(\fBscf_iter_t *\fIiter\fR,
     \fBconst scf_instance_t *\fIinstance\fR, \fBconst scf_snapshot_t *\fIsnapshot\fR,
     \fBconst char *\fIpgtype\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_pg_properties\fR(\fBscf_iter_t *\fIiter\fR,
     \fBconst scf_propertygroup_t *\fIparent\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_property_values\fR(\fBscf_iter_t *\fIiter\fR,
     \fBconst scf_property_t *\fIparent\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_next_scope\fR(\fBscf_iter_t *\fIiter\fR, \fBscf_scope_t *\fIout\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_next_service\fR(\fBscf_iter_t *\fIiter\fR, \fBscf_service_t *\fIout\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_next_instance\fR(\fBscf_iter_t *\fIiter\fR, \fBscf_instance_t *\fIout\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_next_snapshot\fR(\fBscf_iter_t *\fIiter\fR, \fBscf_snapshot_t *\fIout\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_next_pg\fR(\fBscf_iter_t *\fIiter\fR, \fBscf_propertygroup_t  *\fIout\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_next_property\fR(\fBscf_iter_t *\fIiter\fR, \fBscf_property_t *\fIout\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_iter_next_value\fR(\fBscf_iter_t *\fIiter\fR, \fBscf_value_t *\fIout\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B scf_iter_create()
function creates a new iterator associated with
.IR handle .
The
.B scf_iter_destroy()
function destroys an iteration.
.sp
.LP
The
.B scf_iter_reset()
function releases any resources involved with an
active iteration and returns the iterator to its initial state.
.sp
.LP
The
.BR scf_iter_handle_scopes() ,
.BR scf_iter_scope_services() ,
.BR scf_iter_service_instances() ,
.BR scf_iter_instance_snapshots() ,
.BR scf_iter_service_pgs() ,
.BR scf_iter_instance_pgs() ,
.BR scf_iter_snaplevel_pgs() ,
.BR scf_iter_pg_properties() ,
and
.B scf_iter_property_values()
functions set up a new iteration of all the
children
.I parent
of a particular type. The
.B scf_iter_property_values()
function will iterate over values in the
order in which they were specified with \fBscf_entry_add_value\fR(3SCF).
.sp
.LP
The
.BR scf_iter_service_pgs_typed() ,
.BR scf_iter_instance_pgs_typed() ,
and
.B scf_iter_snaplevel_pgs_typed()
functions iterate over the child
property groups of
.IR parent ,
but restrict them to a particular property
group type.
.sp
.LP
The
.B scf_iter_instance_pgs_composed()
function sets up a new iteration
of the composed view of instance's children at the time
.I snapshot
was
taken. If
.I snapshot
is
.IR NULL ,
the current properties are used. The
composed view of an instance's properties is the union of the properties of
the instance and its ancestors. Properties of the instance take precedence
over properties of the service with the same name, including property group
name. Property groups retrieved with this iterator might not have
.I instance
as their parent and properties retrieved from such property
groups might not have the indicated property group as their parent. If
.I instance
and its parent have property groups with the same name but
different types, the properties in the property group of the parent are
excluded. The
.B scf_iter_instance_pgs_typed_composed()
function behaves
as
.BR scf_iter_instance_pgs_composed() ,
except the property groups of the
type
.I pgtype
are returned.
.sp
.LP
The
.BR scf_iter_next_scope() ,
.BR scf_iter_next_service() ,
.BR scf_iter_next_instance() ,
.BR scf_iter_next_snapshot() ,
.BR scf_iter_next_pg() ,
.BR scf_iter_next_property() ,
and
.B scf_iter_next_value()
functions retrieve the next element of the
iteration.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B scf_iter_create()
returns a pointer to a
new iterator. Otherwise, it returns
.IR NULL .
.sp
.LP
Upon successful completion,
.B scf_iter_handle()
returns the handle
associated with
.IR iter .
Otherwise it returns
.IR NULL .
.sp
.LP
Upon successful completion,
.BR scf_iter_handle_scopes() ,
.BR scf_iter_scope_services() ,
.BR scf_iter_service_instances() ,
.BR scf_iter_instance_snapshots() ,
.BR scf_iter_service_pgs() ,
.BR scf_iter_instance_pgs() ,
.BR scf_iter_snaplevel_pgs() ,
.BR scf_iter_pg_properties() ,
.BR scf_iter_property_values() ,
.BR scf_iter_service_pgs_typed() ,
.BR scf_iter_instance_pgs_composed() ,
.BR scf_iter_instance_pgs_typed() ,
.BR scf_iter_instance_pgs_typed_composed() ,
and
.B scf_iter_snaplevel_pgs_typed()
return 0. Otherwise, they return
-1.
.sp
.LP
Upon successful completion,
.BR scf_iter_next_scope() ,
.BR scf_iter_next_service() ,
.BR scf_iter_next_instance() ,
.BR scf_iter_next_snapshot() ,
.BR scf_iter_next_pg() ,
.BR scf_iter_next_property() ,
and
.B scf_iter_next_value()
return 1. If
the iterator is complete, they return 0. Otherwise, they return -1.
.SH ERRORS
.sp
.LP
The
.B scf_iter_create()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.RS 30n
.rt
The handle argument is NULL.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_MEMORY
.ad
.RS 30n
.rt
There is no memory available.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_RESOURCES
.ad
.RS 30n
.rt
The server does not have adequate resources for a new iteration.
.RE

.sp
.LP
The
.B scf_iter_handle()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_HANDLE_DESTROYED
.ad
.RS 30n
.rt
The handle associated with
.I iter
has been destroyed.
.RE

.sp
.LP
The
.B scf_iter_next_value()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_PERMISSION_DENIED
.ad
.sp .6
.RS 4n
The value could not be read due to access restrictions.
.RE

.sp
.LP
The
.BR scf_iter_handle_scopes() ,
.BR scf_iter_scope_services() ,
.BR scf_iter_service_instances() ,
.BR scf_iter_instance_snapshots() ,
.BR scf_iter_service_pgs() ,
.BR scf_iter_instance_pgs() ,
.BR scf_iter_instance_pgs_composed() ,
.BR scf_iter_snaplevel_pgs() ,
.BR scf_iter_pg_properties() ,
.BR scf_iter_property_values() ,
.BR scf_iter_service_pgs_typed() ,
.BR scf_iter_instance_pgs_typed() ,
.BR scf_iter_instance_pgs_typed_composed() ,
and
.B scf_iter_snaplevel_pgs_typed()
functions will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_DELETED
.ad
.sp .6
.RS 4n
The parent has been deleted.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_SET
.ad
.sp .6
.RS 4n
The parent is not set.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_BOUND
.ad
.sp .6
.RS 4n
The handle is not bound.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_CONNECTION_BROKEN
.ad
.sp .6
.RS 4n
The connection to the repository was lost.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_HANDLE_MISMATCH
.ad
.sp .6
.RS 4n
The
.I iter
and
.I parent
arguments are not derived from the same
handle.
.RE

.sp
.LP
The
.BR scf_iter_service_pgs_typed() ,
.BR scf_iter_instance_pgs_typed() ,
.BR scf_iter_instance_pgs_typed_composed() ,
and
.B scf_iter_snaplevel_pgs_typed()
functions will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.RS 30n
.rt
The
.I pgtype
argument is not a valid property group type.
.RE

.sp
.LP
The
.BR scf_iter_next_service() ,
.BR scf_iter_next_instance() ,
.BR scf_iter_next_snapshot() ,
.BR scf_iter_next_pg() ,
.BR scf_iter_next_property() ,
and
.B scf_iter_next_value()
functions
will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_DELETED
.ad
.RS 21n
.rt
The parent the iterator is attached to has been deleted.
.RE

.sp
.LP
The
.BR scf_iter_next_scope() ,
.BR scf_iter_next_service() ,
.BR scf_iter_next_instance() ,
.BR scf_iter_next_snapshot() ,
\fBscf_iter_next_pg()\fR,\fBscf_iter_next_property()\fR, and
.B scf_iter_next_value()
functions will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_SET
.ad
.sp .6
.RS 4n
The iterator is not set.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.sp .6
.RS 4n
The requested object type does not match the type the iterator is
walking.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_BOUND
.ad
.sp .6
.RS 4n
The handle is not bound.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_HANDLE_MISMATCH
.ad
.sp .6
.RS 4n
The
.I iter
and
.I parent
arguments are not derived from the same
handle.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_CONNECTION_BROKEN
.ad
.sp .6
.RS 4n
The connection to the repository was lost.
.RE

.sp
.LP
The
.BR scf_iter_scope_services() ,
.BR scf_iter_service_instances() ,
.BR scf_iter_service_pgs() ,
.BR scf_iter_instance_snapshots() ,
.BR scf_iter_instance_pgs() ,
.BR scf_iter_instance_pgs_composed() ,
.BR scf_iter_snaplevel_pgs() ,
.BR scf_iter_pg_properties() ,
.BR scf_iter_property_values() ,
.BR scf_iter_service_pgs_typed() ,
.BR scf_iter_instance_pgs_typed() ,
.BR scf_iter_instance_pgs_typed_composed() ,
.BR scf_iter_snaplevel_pgs_typed() ,
.BR scf_iter_next_service() ,
.BR scf_iter_next_instance() ,
.BR scf_iter_next_snapshot() ,
.BR scf_iter_next_pg() ,
and
.B scf_iter_next_property()
functions will
fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_RESOURCES
.ad
.RS 26n
.rt
The server does not have the resources to complete the request.
.RE

.sp
.LP
The \fBscf_error\fR(3SCF) function can be used to retrieve the error
value.
.SH EXAMPLES
.LP
.B Example 1
Iterate over all instances under a service.
.sp
.in +2
.nf
scf_iter_t *iter = scf_iter_create(handle);

if (iter == NULL || scf_iter_service_instances(iter, parent) == -1) {
     /* failure */
}
while ((r = scf_iter_next_instance(iter, child)) > 0) {
     /* process child */
}
if (r < 0) {
     /* failure */
}
scf_iter_destroy(iter);
.fi
.in -2

.LP
.B Example 2
Connect to the repository, walk all services and instances
and print their FMRIs.
.sp
.in +2
.nf
scf_handle_t *handle = scf_handle_create(SCF_VERSION);
scf_scope_t *scope = scf_scope_create(handle);
scf_service_t *svc = scf_service_create(handle);
scf_instance_t *inst = scf_instance_create(handle);
scf_iter_t *svc_iter = scf_iter_create(handle);
scf_iter_t *inst_iter = scf_iter_create(handle);

size_t sz = scf_limit(SCF_LIMIT_MAX_FMRI_LENGTH) + 1;
char *fmri = malloc(sz + 1);

int r;

if (handle == NULL || scope == NULL || svc == NULL ||
     inst == NULL || svc_iter == NULL || inst_iter == NULL ||
     fmri == NULL) {
         /* failure */
}
if (scf_handle_bind(handle) == -1 ||
     scf_handle_get_scope(handle, SCF_SCOPE_LOCAL, scope) == -1 ||
     scf_iter_scope_services(svc_iter, scope) == -1) {
          /* failure */
}
while ((r = scf_iter_next_service(svc_iter, svc)) > 0) {
     if (scf_service_to_fmri(svc, fmri, sz) < 0) {
          /* failure */
     }
     puts(fmri);
     if (scf_iter_service_instances(inst_iter, svc) < 0) {
          /* failure */
     }
     while ((r = scf_iter_next_instance(inst_iter, inst)) > 0) {
          if (scf_instance_to_fmri(inst, fmri, sz) < 0) {
               /* failure */
          }
          puts(fmri);
     }
     if (r < 0)
          break;
}
if (r < 0) {
     /* failure */
}

scf_handle_destroy(handle);
scf_scope_destroy(scope);
scf_service_destroy(svc);
scf_instance_destroy(inst);
scf_iter_destroy(svc_iter);
scf_iter_destroy(inst_iter);
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libscf (3LIB),
.BR scf_entry_add_value (3SCF),
.BR scf_error (3SCF),
.BR scf_handle_create (3SCF),
.BR attributes (5)
