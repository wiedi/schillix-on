'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH scf_entry_create 3SCF "17 Jul 2008" "SunOS 5.11" "Service Configuration Facility Library Functions"
.SH NAME
scf_entry_create, scf_entry_handle, scf_entry_destroy,
scf_entry_destroy_children, scf_entry_reset, scf_entry_add_value \- create
and manipulate transaction in the Service Configuration Facility
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lscf\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <libscf.h>

\fBscf_transaction_entry_t *\fBscf_entry_create\fR(\fBscf_handle_t *\fIhandle\fR);
.fi

.LP
.nf
\fBscf_handle_t *\fBscf_entry_handle\fR(\fBscf_transaction_entry_t *\fIentry\fR);
.fi

.LP
.nf
\fBvoid\fR \fBscf_entry_destroy\fR(\fBscf_transaction_entry_t *\fIentry\fR);
.fi

.LP
.nf
\fBvoid\fR \fBscf_entry_destroy_children\fR(\fBscf_transaction_entry_t *\fIentry\fR);
.fi

.LP
.nf
\fBvoid\fR \fBscf_entry_reset\fR(\fBscf_transaction_entry_t *\fIentry\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_entry_add_value\fR(\fBscf_transaction_entry_t *\fIentry\fR,
     \fBscf_value_t *\fIvalue\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B scf_entry_create()
function allocates a new transaction entry
handle. The
.B scf_entry_destroy()
function destroys the transaction
entry handle.
.sp
.LP
The
.B scf_entry_handle()
function retrieves the handle associated with
.IR entry .
.sp
.LP
A transaction entry represents a single action on a property in a property
group. If an entry is added to a transaction using
.BR scf_transaction_property_new (3SCF),
.BR scf_transaction_property_change (3SCF),
or
.BR scf_transaction_property_change_type (3SCF),
.B scf_entry_add_value()
can be called zero or more times to set up the
set of values for that property. Each value must be set and of a compatible
type to the type associated with the entry. When later retrieved from the
property, the values will have the type of the entry. If the values are
committed successfully with \fBscf_transaction_commit\fR(3SCF), they will be
set in the order in which they were added with
.BR scf_entry_add_value() .
.sp
.LP
The
.B scf_entry_reset()
function resets a transaction entry,
disassociating it from any transaction it is a part of (invalidating the
transaction in the process), and disassociating any values that were added
to it.
.sp
.LP
The
.B scf_entry_destroy_children()
function destroys all values
associated with the transaction entry. The entry itself is not destroyed.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B scf_entry_create()
returns a new
.BR scf_transaction_entry_t .
Otherwise, it returns
.IR NULL .
.sp
.LP
Upon successful completion,
.B scf_entry_handle()
returns the handle
associated with the transaction entry. Otherwise, it returns
.IR NULL .
.sp
.LP
Upon successful completion,
.B scf_entry_add_value()
returns 0.
Otherwise, it returns -1.
.SH ERRORS
.sp
.LP
The
.B scf_entry_create()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.RS 30n
.rt
The
.I handle
argument is
.IR NULL .
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_MEMORY
.ad
.RS 30n
.rt
There is not enough memory to allocate an
.BR scf_transaction_entry_t .
.RE

.sp
.LP
The
.B scf_entry_handle()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_HANDLE_DESTROYED
.ad
.RS 30n
.rt
The handle associated with entry has been destroyed.
.RE

.sp
.LP
The
.B scf_entry_add_value()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_HANDLE_MISMATCH
.ad
.RS 30n
.rt
The
.I value
and
.I entry
arguments are not derived from the same
handle.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_IN_USE
.ad
.RS 30n
.rt
The value has been added to another entry.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_INTERNAL
.ad
.RS 30n
.rt
An internal error occurred.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.RS 30n
.rt
The
.I value
argument is not set, or the entry was added to the
transaction using \fBscf_transaction_property_delete\fR(3SCF).
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_SET
.ad
.RS 30n
.rt
The transaction entry is not associated with a transaction.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_TYPE_MISMATCH
.ad
.RS 30n
.rt
The type of the
.I value
argument does not match the type that was set
using
.BR scf_transaction_property_new() ,
.BR scf_transaction_property_change() ,
or
.BR scf_transaction_property_change_type() .
.RE

.sp
.LP
The \fBscf_error\fR(3SCF) function can be used to retrieve the error
value.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libscf (3LIB),
.BR scf_error (3SCF),
.BR scf_transaction_commit (3SCF),
.BR scf_transaction_property_change (3SCF),
.BR scf_transaction_property_change_type (3SCF),
.BR scf_transaction_property_delete (3SCF),
.BR scf_transaction_property_new (3SCF),
.BR scf_transaction_reset (3SCF),
.BR attributes (5)
