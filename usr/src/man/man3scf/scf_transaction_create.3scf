'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH scf_transaction_create 3SCF "28 Aug 2007" "SunOS 5.11" "Service Configuration Facility Library Functions"
.SH NAME
scf_transaction_create, scf_transaction_handle, scf_transaction_reset,
scf_transaction_reset_all, scf_transaction_destroy,
scf_transaction_destroy_children, scf_transaction_start,
scf_transaction_property_delete, scf_transaction_property_new,
scf_transaction_property_change, scf_transaction_property_change_type,
scf_transaction_commit \- create and manipulate transaction in the Service
Configuration Facility
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lscf\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <libscf.h>

\fBscf_transaction_t *\fBscf_transaction_create\fR(\fBscf_handle_t *\fIhandle\fR);
.fi

.LP
.nf
\fBscf_handle_t *\fBscf_transaction_handle\fR(\fBscf_transaction_t *\fItran\fR);
.fi

.LP
.nf
\fBvoid\fR \fBscf_transaction_reset\fR(\fBscf_transaction_t *\fItran\fR);
.fi

.LP
.nf
\fBvoid\fR \fBscf_transaction_reset_all\fR(\fBscf_transaction_t *\fItran\fR);
.fi

.LP
.nf
\fBvoid\fR \fBscf_transaction_destroy\fR(\fBscf_transaction_t *\fItran\fR);
.fi

.LP
.nf
\fBvoid\fR \fBscf_transaction_destroy_children\fR(\fBscf_transaction_t *\fItran\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_transaction_start\fR(\fBscf_transaction_t *\fItran\fR,
     \fBscf_propertygroup_t *\fIpg\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_transaction_property_delete\fR(\fBscf_transaction_t *\fItran\fR,
     \fBscf_transaction_entry_t *\fIentry\fR, \fBconst char *\fIprop_name\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_transaction_property_new\fR(\fBscf_transaction_t *\fItran\fR,
     \fBscf_transaction_entry_t *\fIentry\fR, \fBconst char *\fIprop_name\fR,
     \fBscf_type_t\fR \fItype\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_transaction_property_change\fR(\fBscf_transaction_t *\fItran\fR,
     \fBscf_transaction_entry_t *\fIentry\fR, \fBconst char *\fIprop_name\fR,
     \fBscf_type_t\fR \fItype\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_transaction_property_change_type\fR(
     \fBscf_transaction_t *\fItran\fR, \fBscf_transaction_entry_t *\fIentry\fR,
     \fBconst char *\fIprop_name\fR, \fBscf_type_t\fR \fItype\fR);
.fi

.LP
.nf
\fBint\fR \fBscf_transaction_commit\fR(\fBscf_transaction_t *\fItran\fR);
.fi

.SH DESCRIPTION
.sp
.LP
Transactions are the mechanism for changing property groups. They act
atomically, whereby either all of the updates occur or none of them do. An
.B scf_transaction_t
is always in one of the following states:
.sp
.ne 2
.mk
.na
.B reset
.ad
.RS 13n
.rt
The initial state. A successful return of \fBscf_transaction_start()\fR
moves the transaction to the started state.
.RE

.sp
.ne 2
.mk
.na
.B started
.ad
.RS 13n
.rt
The transaction has started. The
.BR scf_transaction_property_delete() ,
.BR scf_transaction_property_new() ,
.BR scf_transaction_property_change() ,
and
.B scf_transaction_property_change_type()
functions can be used to
set up changes to properties. The
.B scf_transaction_reset()
and
.B scf_transaction_reset_all()
functions return the transaction to the
reset state.
.RE

.sp
.ne 2
.mk
.na
.B committed
.ad
.RS 13n
.rt
A call to
.B scf_transaction_commit()
(whether or not it is successful)
moves the transaction to the committed state. Modifying, resetting, or
destroying the entries and values associated with a transaction will move it
to the invalid state.
.RE

.sp
.ne 2
.mk
.na
.B invalid
.ad
.RS 13n
.rt
The \fBscf_transaction_reset()\fR and \fBscf_transaction_reset_all()\fR
functions return the transaction to the reset state.
.RE

.sp
.LP
The
.B scf_transaction_create()
function allocates and initializes an
.B scf_transaction_t
bound to
.IR handle .
The
.B scf_transaction_destroy()
function resets, destroys, and frees
.IR tran .
If there are any entries associated with the transaction,
.B scf_transaction_destroy()
also effects a call to
.BR scf_transaction_reset() .
The \fBscf_transaction_destroy_children()\fR
function resets, destroys, and frees all entries and values associated the
transaction.
.sp
.LP
The
.B scf_transaction_handle()
function gets the handle to which
.I tran
is bound.
.sp
.LP
The
.B scf_transaction_start()
function sets up the transaction to
modify the property group to which
.I pg
is set. The time reference used
by
.I pg
becomes the basis of the transaction. The transaction fails if
the property group has been modified since the last update of
.I pg
at
the time when
.B scf_transaction_commit()
is called.
.sp
.LP
The
.BR scf_transaction_property_delete() ,
.BR scf_transaction_property_new() ,
.BR scf_transaction_property_change() ,
and
.B scf_transaction_property_change_type()
functions add a new
transaction entry to the transaction. Each property the transaction affects
must have a unique
.BR scf_transaction_entry_t .
Each
.B scf_transaction_entry_t
can be associated with only a single
transaction at a time. These functions all fail if the transaction is not in
the started state,
.I prop_name
is not a valid property name, or
.I entry
is already associated with a transaction. These functions affect
commit and failure as follows:
.sp
.ne 2
.mk
.na
.B scf_transaction_property_delete()
.ad
.sp .6
.RS 4n
This function deletes the property
.I prop_name
in the property group.
It fails if
.I prop_name
does not name a property in the property
group.
.RE

.sp
.ne 2
.mk
.na
.B scf_transaction_property_new()
.ad
.sp .6
.RS 4n
This function adds a new property prop_name\fR to the property group
with a value list of type
.IR type .
It fails if
.I prop_name
names an
existing property in the property group.
.RE

.sp
.ne 2
.mk
.na
.B scf_transaction_property_change()
.ad
.sp .6
.RS 4n
This function changes the value list for an existing property
.I prop_name
in the property group. It fails if
.I prop_name
does not
name an existing property in the property group or names an existing
property with a different type.
.RE

.sp
.ne 2
.mk
.na
.B scf_transaction_property_change_type()
.ad
.sp .6
.RS 4n
This function changes the value list and type for an existing property
.I prop_name
in the property group. It fails if
.I prop_name
does not
name an existing property in the property group.
.RE

.sp
.LP
If the function call is successful,
.I entry
remains active in the
transaction until
.BR scf_transaction_destroy() ,
.BR scf_transaction_reset() ,
or
.B scf_transaction_reset_all()
is
called. The \fBscf_entry_add_value\fR(3SCF) manual page provides information
for setting up the value list for entries that are not associated with
.BR scf_transaction_property_delete() .
Resetting or destroying an entry or
value active in a transaction will move it into the invalid state.
.sp
.LP
The
.B scf_transaction_commit()
function attempts to commit
.IR tran .
.sp
.LP
The
.B scf_transaction_reset()
function returns the transaction to the
reset state and releases all of the transaction entries that were added.
.sp
.LP
The
.B scf_transaction_reset_all()
function returns the transaction to
the reset state, releases all of the transaction entries, and calls
.BR scf_value_reset (3SCF)
on all values associated with the entries.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B scf_transaction_create()
returns a new
.BR scf_transaction_t .
Otherwise, it returns
.IR NULL .
.sp
.LP
Upon successful completion,
.B scf_transaction_handle()
returns the
handle associated with the transaction. Otherwise, it returns
.IR NULL .
.sp
.LP
Upon successful completion,
.BR scf_transaction_start() ,
.BR scf_transaction_property_delete() ,
.BR scf_transaction_property_new() ,
.BR scf_transaction_property_change() ,
and
.B scf_transaction_property_change_type()
return 0. Otherwise, they
return \(mi1.
.sp
.LP
The
.B scf_transaction_commit()
function returns 1 upon successful
commit, 0 if the property group set in
.B scf_transaction_start()
is not
the most recent, and -1 on failure.
.SH ERRORS
.sp
.LP
The
.B scf_transaction_create()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.RS 30n
.rt
The value of the
.I handle
argument is
.IR NULL .
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_MEMORY
.ad
.RS 30n
.rt
There is not enough memory to allocate an
.BR scf_transaction_t .
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_RESOURCES
.ad
.RS 30n
.rt
The server does not have adequate resources for a new transaction handle.
.RE

.sp
.LP
The
.B scf_transaction_handle()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_HANDLE_DESTROYED
.ad
.RS 30n
.rt
The handle associated with
.I tran
has been destroyed.
.RE

.sp
.LP
The
.B scf_transaction_start()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_BACKEND_ACCESS
.ad
.sp .6
.RS 4n
The repository backend refused the modification.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_BACKEND_READONLY
.ad
.sp .6
.RS 4n
The repository backend refused modification because it is read-only.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_CONNECTION_BROKEN
.ad
.sp .6
.RS 4n
The connection to the repository was lost.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_DELETED
.ad
.sp .6
.RS 4n
The property group has been deleted.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_HANDLE_MISMATCH
.ad
.sp .6
.RS 4n
The transaction and property group are not derived from the same handle.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_IN_USE
.ad
.sp .6
.RS 4n
The transaction is not in the
.B reset
state. The
.B scf_transaction_reset()
and \fBscf_transaction_reset_all()\fR
functions can be used to return the transaction to the
.B reset
state.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_RESOURCES
.ad
.sp .6
.RS 4n
The server does not have the resources to complete the request.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_BOUND
.ad
.sp .6
.RS 4n
The handle was never bound or has been unbound.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_SET
.ad
.sp .6
.RS 4n
The property group specified by
.I pg
is not set.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_PERMISSION_DENIED
.ad
.sp .6
.RS 4n
The user does not have sufficient privileges to modify the property
group.
.RE

.sp
.LP
The
.BR scf_transaction_property_delete() ,
.BR scf_transaction_property_new() ,
.BR scf_transaction_property_change() ,
and
.B scf_transaction_property_change_type()
functions will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_BACKEND_ACCESS
.ad
.sp .6
.RS 4n
The  storage  mechanism  that  the   repository server
(\fBsvc.configd\fR(1M)) chose for the operation denied access.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_CONNECTION_BROKEN
.ad
.sp .6
.RS 4n
The connection to the repository was lost.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_DELETED
.ad
.sp .6
.RS 4n
The property group the transaction is changing has been deleted.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_HANDLE_MISMATCH
.ad
.sp .6
.RS 4n
The transaction and entry are not derived from the same handle.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_IN_USE
.ad
.sp .6
.RS 4n
The property already has an entry in the transaction.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_INTERNAL
.ad
.sp .6
.RS 4n
An internal error occurred.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.sp .6
.RS 4n
The
.I prop_name
argument is not a valid property name.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_RESOURCES
.ad
.sp .6
.RS 4n
The server does not have the resources to complete the request.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_BOUND
.ad
.sp .6
.RS 4n
The handle is not bound.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_SET
.ad
.sp .6
.RS 4n
The transaction has not been started.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_TYPE_MISMATCH
.ad
.sp .6
.RS 4n
The
.I tran
argument is not of a type compatible with
.IR type .
.RE

.sp
.LP
The
.BR scf_transaction_property_delete() ,
.BR scf_transaction_property_change() ,
and
.B scf_transaction_property_change_type()
functions will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_EXISTS
.ad
.RS 23n
.rt
The object already exists.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_FOUND
.ad
.RS 23n
.rt
The property group does not contain a property named
.IR prop_name .
.RE

.sp
.LP
The
.B scf_transaction_property_new()
,
.BR scf_transaction_property_change() ,
and
.B scf_transaction_property_change_type()
functions will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.RS 30n
.rt
The
.I prop_name
argument is not not a valid property name, or the
.I type
argument is an invalid type.
.RE

.sp
.LP
The
.B scf_transaction_property_new()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_EXISTS
.ad
.RS 23n
.rt
The property group already contains a property named
.IR prop_name .
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_FOUND
.ad
.RS 23n
.rt
Nothing of that name was found.
.RE

.sp
.LP
The
.B scf_transaction_property_change()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_TYPE_MISMATCH
.ad
.RS 27n
.rt
The property
.I prop_name
is not of type
.IR type .
.RE

.sp
.LP
The
.B scf_transaction_commit()
function will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_BACKEND_READONLY
.ad
.sp .6
.RS 4n
The repository backend is read-only.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_BACKEND_ACCESS
.ad
.sp .6
.RS 4n
The repository backend refused the modification.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_BOUND
.ad
.sp .6
.RS 4n
The handle is not bound.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_CONNECTION_BROKEN
.ad
.sp .6
.RS 4n
The connection to the repository was lost.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.sp .6
.RS 4n
The transaction is in an invalid state.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_DELETED
.ad
.sp .6
.RS 4n
The property group the transaction is acting on has been deleted.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_SET
.ad
.sp .6
.RS 4n
The transaction has not been started.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_PERMISSION_DENIED
.ad
.sp .6
.RS 4n
The user does not have sufficient privileges to modify the property
group.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_RESOURCES
.ad
.sp .6
.RS 4n
The server does not have sufficient resources to commit the transaction.
.RE

.sp
.LP
The \fBscf_error\fR(3SCF) function can be used to retrieve the error
value.
.SH EXAMPLES
.LP
.B Example 1
Set an existing boolean value to true.
.sp
.in +2
.nf
tx = scf_transaction_create(handle);
e1 = scf_entry_create(handle);
v1 = scf_value_create(handle);

do {
     if (scf_pg_update(pg) == -1)
          goto fail;
     if (scf_transaction_start(tx, pg) == -1)
          goto fail;

     /* set up transaction entries */
     if (scf_transaction_property_change(tx, e1, "property",
        SCF_TYPE_BOOLEAN) == -1) {
            scf_transaction_reset(tx);
            goto fail;
     }
     scf_value_set_boolean(v1, 1);
     scf_entry_add_value(e1, v1);


     result = scf_transaction_commit(tx);

     scf_transaction_reset(tx);
} while (result == 0);

if (result < 0)
     goto fail;

/* success */

   cleanup:
scf_transaction_destroy(tx);
scf_entry_destroy(e1);
scf_value_destroy(v1);
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libscf (3LIB),
.BR scf_value_reset (3SCF),
.BR scf_error (3SCF),
.BR scf_pg_create (3SCF),
.BR attributes (5)
