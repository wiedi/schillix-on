'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH smf_enable_instance 3SCF "5 Nov 2007" "SunOS 5.11" "Service Configuration Facility Library Functions"
.SH NAME
smf_enable_instance, smf_disable_instance, smf_refresh_instance,
smf_restart_instance, smf_maintain_instance, smf_degrade_instance,
smf_restore_instance, smf_get_state \- administrative interface to the
Service Configuration Facility
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lscf\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <libscf.h>

\fBint\fR \fBsmf_enable_instance\fR(\fBconst char *\fIinstance\fR, \fBint\fR \fIflags\fR);
.fi

.LP
.nf
\fBint\fR \fBsmf_disable_instance\fR(\fBconst char *\fIinstance\fR, \fBint\fR \fIflags\fR);
.fi

.LP
.nf
\fBint\fR \fBsmf_refresh_instance\fR(\fBconst char *\fIinstance\fR);
.fi

.LP
.nf
\fBint\fR \fBsmf_restart_instance\fR(\fBconst char *\fIinstance\fR);
.fi

.LP
.nf
\fBint\fR \fBsmf_maintain_instance\fR(\fBconst char *\fIinstance\fR, \fBint\fR \fIflags\fR);
.fi

.LP
.nf
\fBint\fR \fBsmf_degrade_instance\fR(\fBconst char *\fIinstance\fR, \fBint\fR \fIflags\fR);
.fi

.LP
.nf
\fBint\fR \fBsmf_restore_instance\fR(\fBconst char *\fIinstance\fR);
.fi

.LP
.nf
\fBchar *\fBsmf_get_state\fR(\fBconst char *\fIinstance\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions provide administrative control over service instances. Using
these functions, an administrative tool can make a request to enable,
disable, refresh, or restart an instance. All calls are asynchronous. They
request an action, but do not wait to see if the action succeeds or fails.
.sp
.LP
The
.B smf_enable_instance()
function enables the service instance
specified by
.I instance
FMRI. If
.I flags
is
.BR SMF_TEMPORARY ,
the
enabling of the service instance is a temporary change, lasting only for the
lifetime of the current system instance. The
.I flags
argument is set to
.B 0
if no flags are to be use.
.sp
.LP
The
.B smf_disable_instance()
function places the service instance
specified by
.I instance
FMRI in the disabled state and triggers the stop
method (see \fBsvc.startd\fR(1M)). If \fIflags\fR is
.BR SMF_TEMPORARY ,
the
disabling of the service instance is a temporary change, lasting only for the
lifetime of the current system instance. The
.I flags
argument is set to
.B 0
if no flags are to be use.
.sp
.LP
The
.B smf_refresh_instance()
function causes the service instance
specified by
.I instance
FMRI to re-read its configuration information.
.sp
.LP
The
.B smf_restart_instance()
function restarts the service instance
specified by
.I instance
FMRI.
.sp
.LP
The
.B smf_maintain_instance()
function moves the service instance
specified by
.I instance
into the maintenance state. If
.I flags
is
.BR SMF_IMMEDIATE ,
the instance is moved into maintenance state
immediately, killing any running methods. If
.I flags
is
.BR SMF_TEMPORARY ,
the change to maintenance state is a temporary change,
lasting only for the lifetime of the current system instance. The \fIflags\fR
argument is set to
.B 0
if no flags are to be use.
.sp
.LP
The
.B smf_degrade_instance()
function moves an online service instance
into the degraded state. This function operates only on instances in the
online state. The \fIflags\fR argument is set to \fB0\fR if no flags are to
be use. The only available flag is
.BR SMF_IMMEDIATE ,
which causes the
instance to be moved into the degraded state immediately.
.sp
.LP
The
.B smf_restore_instance()
function brings an instance currently in
the maintenance to the uninitialized state, so that it can be brought back
online. For a service in the degraded state, \fBsmf_restore_instance()\fR
brings the specified instance back to the online state.
.sp
.LP
The
.B smf_get_state()
function returns a pointer to a string containing
the name of the instance's current state. The user is responsible for freeing
this string. Possible state strings are defined as the following:
.sp
.in +2
.nf
#define SCF_STATE_STRING_UNINIT         ((const char *)"uninitialized")
#define SCF_STATE_STRING_MAINT          ((const char *)"maintenance")
#define SCF_STATE_STRING_OFFLINE        ((const char *)"offline")
#define SCF_STATE_STRING_DISABLED       ((const char *)"disabled")
#define SCF_STATE_STRING_ONLINE         ((const char *)"online")
#define SCF_STATE_STRING_DEGRADED       ((const char *)"degraded")
.fi
.in -2

.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.BR smf_enable_instance() ,
.BR smf_disable_instance() ,
.BR smf_refresh_instance() ,
.BR smf_restart_instance() ,
.BR smf_maintain_instance() ,
.BR smf_degrade_instance() ,
and
.B smf_restore_instance()
return
.BR 0 .
Otherwise, they return \fB-1\fR\&.
.sp
.LP
Upon successful completion, smf_get_state returns an allocated string.
Otherwise, it returns
.IR NULL .
.SH ERRORS
.sp
.LP
These functions will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_MEMORY
.ad
.sp .6
.RS 4n
The memory allocation failed.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_INVALID_ARGUMENT
.ad
.sp .6
.RS 4n
The
.I instance
FMRI or
.I flags
argument is invalid.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NOT_FOUND
.ad
.sp .6
.RS 4n
The FMRI is valid but there is no matching instance found.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_CONNECTION_BROKEN
.ad
.sp .6
.RS 4n
The connection to repository was broken.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_NO_RESOURCES
.ad
.sp .6
.RS 4n
The server has insufficient resources.
.RE

.sp
.LP
The
.BR smf_maintain_instance() ,
.BR smf_refresh_instance() ,
.BR smf_restart_instance() ,
.BR smf_degrade_instance() ,
and
.B smf_restore_instance()
functions will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_PERMISSION_DENIED
.ad
.sp .6
.RS 4n
User does not have proper authorizations. See
.BR smf_security (5).
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_BACKEND_ACCESS
.ad
.sp .6
.RS 4n
The repository's backend refused access.
.RE

.sp
.ne 2
.mk
.na
.B SCF_ERROR_BACKEND_READONLY
.ad
.sp .6
.RS 4n
The repository's backend is read-only.
.RE

.sp
.LP
The \fBsmf_restore_instance()\fR and \fBsmf_degrade_instance()\fR functions
will fail if:
.sp
.ne 2
.mk
.na
.B SCF_ERROR_CONSTRAINT_VIOLATED
.ad
.sp .6
.RS 4n
The function is called on an instance in an inappropriate state.
.RE

.sp
.LP
The \fBscf_error\fR(3SCF) function can be used to retrieve the error
value.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR svc.startd (1M),
.BR libscf (3LIB),
.BR scf_error (3SCF),
.BR attributes (5),
.BR smf_security (5)
