'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH process 4 "25 Mar 2008" "SunOS 5.11" "File Formats"
.SH NAME
process \- process contract type
.SH SYNOPSIS
.LP
.nf
\fB/system/contract/process\fR
.fi

.SH DESCRIPTION
.sp
.LP
Process contracts allow processes to create a fault boundary around a set
of subprocesses and observe events which occur within that boundary.
.sp
.LP
Process contracts are managed using the
.BR contract (4)
file system and
the
.BR libcontract "(3LIB) library. The process contract type directory is"
.BR /system/contract/process .
.SS "CREATION"
.sp
.LP
A process contract is created when an LWP that has an active process
contract template calls
.BR fork (2).
Initially, the child process created
by \fBfork()\fR is the only resource managed by the contract. When an LWP
that does not have an active process contract template calls \fBfork()\fR,
the child process created by \fBfork()\fR is added as a resource to the
process contract of which the parent was a member.
.SS "EVENT TYPES"
.sp
.LP
The following events types are defined:
.sp
.ne 2
.mk
.na
.B CT_PR_EV_EMPTY
.ad
.sp .6
.RS 4n
The last member of the process contract exited.
.RE

.sp
.ne 2
.mk
.na
.B CT_PR_EV_FORK
.ad
.sp .6
.RS 4n
A new process has been added to the process contract.
.RE

.sp
.ne 2
.mk
.na
.B CT_PR_EV_EXIT
.ad
.sp .6
.RS 4n
A member of the process contract exited.
.RE

.sp
.ne 2
.mk
.na
.B CT_PR_EV_CORE
.ad
.sp .6
.RS 4n
A process failed and dumped core. This could also occur if the process
would have dumped core had appropriate
.BR coreadm "(1M) options been"
enabled and core file size was unlimited.
.RE

.sp
.ne 2
.mk
.na
.B CT_PR_EV_SIGNAL
.ad
.sp .6
.RS 4n
A process received a fatal signal from a process, other than the owner of
the process contract, that is a member of a different process contract.
.RE

.sp
.ne 2
.mk
.na
.B CT_PR_EV_HWERR
.ad
.sp .6
.RS 4n
A process was killed because of an uncorrectable hardware error.
.RE

.SS "TERMS"
.sp
.LP
The following common contract terms, defined in
.BR contract (4),
have
process-contract specific attributes:
.sp
.ne 2
.mk
.na
.B critical event set
.ad
.sp .6
.RS 4n
The default value for the critical event set is \fB(CT_PR_EV_EMPTY |
CT_PR_EV_HWERR)\fR. 
.sp
An attempt by a user without the
.B {PRIV_CONTRACT_EVENT}
privilege in
its effective set to add an event, other than
.BR CT_PR_EV_EMPTY ,
to the
critical event set which is not present in the fatal set, or if the
\fBCT_PR_PGONLY\fR parameter is set and the same user attempts to add any
event, other than
.BR CT_PR_EV_EMPTY ,
to the critical event set, fails.
.RE

.sp
.ne 2
.mk
.na
\fBinformative event set\fR
.ad
.sp .6
.RS 4n
The default value for the informative event set is \fB(CT_PR_EV_CORE |
CT_PR_EV_SIGNAL)\fR.
.RE

.sp
.LP
The following contract terms can be read from or written to a process
contract template using the named \fBlibcontract\fR(3LIB) interfaces. These
contract terms are in addition to those described in
.BR contract (4).
.sp
.ne 2
.mk
.na
.B creator's aux
.ad
.sp .6
.RS 4n
Auxiliary contract description. The purpose of this field is to provide the
contract creator with a way to differentiate process contracts it creates
under the same service FMRI. Use ct_pr_tmpl_set_svc_aux(3CONTRACT) to set
this term. The default value is an empty string. The contents of this field
should be limited to 7-bit ASCII values.
.RE

.sp
.ne 2
.mk
.na
\fBfatal event set\fR
.ad
.sp .6
.RS 4n
Defines a set of events which, when generated, causes all members of the
process contract to be killed with
.BR SIGKILL ,
or the intersection of the
contract and the containing process group if the
.BR CT_PR_PGRPONLY
parameter is set. Set this term with \fBct_pr_tmpl_set_fatal\fR(3CONTRACT).
The fatal event set is restricted to
.BR CT_PR_EV_CORE ,
.BR CT_PR_EV_SIGNAL ,
and
.BR CT_PR_EV_HWERR .
For
.B CT_PR_EV_CORE
and
\fBCT_PR_EV_SIGNAL\fR events, the scope of \fBSIGKILL\fR is limited to those
processes which the contract author or the event source could have normally
sent signals to.
.sp
The default value for the fatal event set is
.BR CT_PR_EV_HWERR .
.sp
If a user without the
.BR {PRIV_CONTRACT_EVENT} " privilege in its"
effective set removes an event from the fatal event set which is present in
the critical event set, the corresponding event is automatically removed
from the critical event set and added to the informative event set.
.RE

.sp
.ne 2
.mk
.na
.B parameter set
.ad
.sp .6
.RS 4n
Defines miscellaneous other settings. Use
.BR ct_pr_tmpl_set_param (3CONTRACT)
to set this term.
.sp
The default parameter set is empty.
.sp
The value is a bit vector comprised of some or all of:
.sp
.ne 2
.mk
.na
.B CT_PR_INHERIT
.ad
.sp .6
.RS 4n
If set, indicates that the process contract is to be inherited by the
process contract the contract owner is a member of if the contract owner
exits before explicitly abandoning the process contract.
.sp
If not set, the process contract is automatically abandoned when the owner
exits.
.RE

.sp
.ne 2
.mk
.na
.B CT_PR_NOORPHAN
.ad
.sp .6
.RS 4n
If set, all processes in a process contract are sent
.B SIGKILL
if the
process contract is abandoned, either explicitly or because the holder died
and
.B CT_PR_INHERIT
was not set. The scope of
.B SIGKILL
is limited
to those processes which the contract author or the event source could have
normally sent signals to.
.sp
If this is not set and the process contract is abandoned, the process
contract is orphaned, that is, continues to exist without owner.
.RE

.sp
.ne 2
.mk
.na
.B CT_PR_PGRPONLY
.ad
.sp .6
.RS 4n
If set, only those processes within the same process group and process
contract as a fatal error-generating process are killed.
.sp
If not set, all processes within the process contract are killed if a
member process encounters an error specified in the fatal set.
.sp
If a user without the
.BR {PRIV_CONTRACT_EVENT} " privilege in its"
effective set adds
.B CT_PR_PGRPONLY
to a template's parameter set, any
events other than
.B CT_PR_EV_EMPTY
are automatically removed from the
critical event set and added to the informative event set.
.RE

.sp
.ne 2
.mk
.na
.B CT_PR_REGENT
.ad
.sp .6
.RS 4n
If set, the process contract can inherit unabandoned contracts left by
exiting member processes.
.sp
If not set, indicates that the process contract should not inherit
contracts from member processes. If a process exits before abandoning a
contract it owns and is a member of a process contract which does not have
\fBCT_PR_REGENT\fR set, the system automatically abandons the contract.
.sp
If a regent process contract has inherited contracts and is abandoned by
its owner, its inherited contracts are abandoned.
.RE

.RE

.sp
.ne 2
.mk
.na
.B service FMRI
.ad
.sp .6
.RS 4n
Specifies the service FMRI associated with the process contract. Use
\fBct_pr_tmpl_set_svc_fmri\fR(3CONTRACT) to set this term. The default is to
inherit the value from the creator's process contract. When this term is
uninitialized, \fBct_pr_tmpl_get_svc_fmri\fR(3CONTRACT) returns the token
string
.B inherited:
to indicate the value has not been set and is
inherited. Setting the service FMRI to
.BR inherited :
clears the current
(\fBB\fR value and the \fBterm\fR is inherited from the creator's process
contract. To set this term a process must have
\fB{PRIV_CONTRACT_IDENTITY}\fR in its effective set.
.RE

.sp
.ne 2
.mk
.na
\fBtransfer contract\fR
.ad
.sp .6
.RS 4n
Specifies the ID of an empty process contract held by the caller whose
inherited process contracts are to be transferred to the newly created
contract. Use \fBct_pr_tmpl_set_transfer\fR(3CONTRACT) to set the tranfer
contract. Attempts to specify a contract not held by the calling process, or
a contract which still has processes in it, fail.
.sp
The default transfer term is
.BR 0 ,
that is, no contract.
.RE

.SS "STATUS"
.sp
.LP
In addition to the standard items, the status object read from a status
file descriptor contains the following items to obtain this information
respectively:
.sp
.ne 2
.mk
.na
.B service contract ID
.ad
.sp .6
.RS 4n
Specifies the process contract id which defined the service FMRI term. Use
.BR ct_pr_status_get_svc_ctid (3CONTRACT)
to read the term's value. It can
be used to determine if the service FMRI was inherited as in the example
below.
.sp
.in +2
.nf
ctid_t ctid;           /* our contract id */
int fd;       /* fd of ctid's status file */

ct_stathdl_(Bt status;
ctid_t svc_ctid;

if (ct_status_read(fd, CTD_FIXED, &status) == 0) {
      if (ct_pr_status_get_svc_ctid(status, &svc_ctid) == 0) {
            if (svc_ctid == ctid)
                /* not inherited */
            else
                /* inherited */
      }
      ct_status_free(status);
}
.fi
.in -2
.sp

.RE

.sp
.LP
If
.B CTD_ALL
is specified, the following items are also available:
.sp
.ne 2
.mk
.na
.B Member list
.ad
.sp .6
.RS 4n
The PIDs of processes which are members of the process contract. Use
.BR ct_pr_status_get_members (3CONTRACT)
for this information.
.RE

.sp
.ne 2
.mk
.na
.B Inherited contract list
.ad
.sp .6
.RS 4n
The IDs of contracts which have been inherited by the process contract. Use
.BR ct_pr_status_get_contracts (3CONTRACT)
to obtain this information.
.RE

.sp
.ne 2
.mk
.na
.B Service FMRI (term)
.ad
.sp .6
.RS 4n
Values equal to the terms used when the contract was written. The Service
FMRI term of the process contract of a process en(\fBBtering\fR a zone has
the value \fBsvc:/system/zone_enter:default\fR when read from the non-global
zone.
.RE

.sp
.ne 2
.mk
.na
.B contract creator
.ad
.sp .6
.RS 4n
Specifies the process that created the process contract. Use
.BR ct_pr_status_get_svc_creator (3CONTRACT)
to read the term's value.
.RE

.sp
.ne 2
.mk
.na
.B creator's aux (term)
.ad
.sp .6
.RS 4n
Values equal to the terms used when the contract was written.
.RE

.sp
.LP
The following standard status items have different meanings in some
situations:
.sp
.ne 2
.mk
.na
.B Ownership state
.ad
.sp .6
.RS 4n
If the process contract has a state of
.B CTS_OWNED
or
\fBCTS_INHERITED\fR and is held by an entity in the global zone, but
contains processes in a non-global zone, it appears to have the state
\fBCTS_OWNED\fR when observed by processes in the non-global zone.
.RE

.sp
.ne 2
.mk
.na
.B Contract holder
.ad
.sp .6
.RS 4n
If the process contract has a state of
.B CTS_OWNED
or
\fBCTS_INHERITED\fR and is held by an entity in the global zone, but
contains processes in a non-global zone, it appears to be held by the
non-global zone's
.B zsched
when observed by processes in the non-global
zone.
.RE

.SS "EVENTS"
.sp
.LP
In addition to the standard items, an event generated by a process contract
contains the following information:
.sp
.ne 2
.mk
.na
.B Generating PID
.ad
.sp .6
.RS 4n
The process ID of the member process which experienced the event, or caused
the contract event to be generated (in the case of \fBCT_PR_EV_EMPTY\fR).
Use \fBct_pr_event_get_pid\fR(3CONTRACT) to obtain this information.
.RE

.sp
.LP
If the event type is
.BR CT_PR_EV_FORK ,
the event contains:
.sp
.ne 2
.mk
.na
.B Parent PID
.ad
.sp .6
.RS 4n
The process ID which forked [Generating PID]. Use
.BR ct_pr_event_get_ppid (3CONTRACT)
to obtain this information.
.RE

.sp
.LP
If the event type is
.BR CT_PR_EV_EXIT ,
the event contains:
.sp
.ne 2
.mk
.na
.B Exit status
.ad
.sp .6
.RS 4n
The exit status of the process. Use
.BR ct_pr_event_get_exitstatus (3CONTRACT)
to obtain this information.
.RE

.sp
.LP
If the event type is
.BR CT_PR_EV_CORE ,
the event can contain:
.sp
.ne 2
.mk
.na
.B Process core name
.ad
.sp .6
.RS 4n
The name of the per-process core file. Use
\fBct_pr_event_get_pcorefile\fR(3CONTRACT) to obtain this information.
.RE

.sp
.ne 2
.mk
.na
.B Global core name
.ad
.sp .6
.RS 4n
The name of the process's zone's global core file. Use
\fBct_pr_event_get_gcorefile\fR(3CONTRACT) to obtain this information.
.RE

.sp
.ne 2
.mk
.na
.B Zone core name
.ad
.sp .6
.RS 4n
The name of the system-wide core file in the global zone. Use
\fBct_pr_event_get_zcorefile\fR(3CONTRACT) to obtain this information.
.RE

.sp
.LP
See \fBcoreadm\fR(1M) for more information about per-process, global, and
system-wide core files.
.sp
.LP
If the event type is
.BR CT_PR_EV_SIGNAL ,
the event contains:
.sp
.ne 2
.mk
.na
.B Signal
.ad
.sp .6
.RS 4n
The number of the signal which killed the process. Use
.BR ct_pr_event_get_signal (3CONTRACT)
to obtain this information.
.RE

.sp
.LP
It can contain:
.sp
.ne 2
.mk
.na
.B sender
.ad
.sp .6
.RS 4n
The PID of the process which sent the signal. Use
.BR ct_pr_event_get_sender (3CONTRACT)
to obtain this information.
.RE

.SH FILES
.sp
.ne 2
.mk
.na
.B /usr/include/sys/contract/process.h
.ad
.sp .6
.RS 4n
Contains definitions of event-type macros.
.RE

.SH SEE ALSO
.sp
.LP
.BR ctrun (1),
.BR ctstat (1),
.BR ctwatch (1),
.BR coreadm (1M),
.BR close (2),
\fBfork\fR(2), \fBioctl\fR(2),
.BR open (2),
.BR poll (2),
.BR ct_pr_event_get_exitstatus (3CONTRACT),
\fBct_pr_event_get_gcorefile\fR(3CONTRACT),
\fBct_pr_event_get_pcorefile\fR(3CONTRACT),
.BR ct_pr_event_get_pid (3CONTRACT),
.BR ct_pr_event_get_ppid (3CONTRACT),
.BR ct_pr_event_get_signal (3CONTRACT),
\fBct_pr_event_get_zcorefile\fR(3CONTRACT),
.BR ct_pr_status_get_contracts (3CONTRACT),
.BR ct_pr_status_get_members (3CONTRACT),
.BR ct_pr_status_get_param (3CONTRACT),
\fBct_pr_tmpl_set_fatal\fR(3CONTRACT),
.BR ct_pr_tmpl_set_param (3CONTRACT),
\fBct_pr_tmpl_set_transfer\fR(3CONTRACT),
.BR ct_tmpl_set_cookie (3CONTRACT),
.BR ct_tmpl_set_critical (3CONTRACT),
\fBct_tmpl_set_informative\fR(3CONTRACT), \fBlibcontract\fR(3LIB),
.BR contract (4),
.BR privileges (5)
