'\" te
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved. The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\" Copyright (c) 2003, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.TH ufsdump 4 "9 Apr 2003" "SunOS 5.11" "File Formats"
.SH NAME
ufsdump, dumpdates \- incremental dump format
.SH SYNOPSIS
.LP
.nf
\fB#include <sys/types.h>\fR
.fi

.LP
.nf
\fB#include <sys/inode.h>\fR
.fi

.LP
.nf
\fB#include <protocols/dumprestore.h>\fR
.fi

.LP
.nf
\fB/etc/dumpdates\fR
.fi

.SH DESCRIPTION
.sp
.LP
Tapes used by \fBufsdump\fR(1M) and \fBufsrestore\fR(1M) contain:
.RS +4
.TP
.ie t \(bu
.el o
a header record
.RE
.RS +4
.TP
.ie t \(bu
.el o
two groups of bit map records
.RE
.RS +4
.TP
.ie t \(bu
.el o
a group of records describing directories
.RE
.RS +4
.TP
.ie t \(bu
.el o
a group of records describing files
.RE
.sp
.LP
The format of the header record and the format of the first record of each
description in the
.B <protocols/dumprestore.h>
include file are:
.sp
.in +2
.nf
#define TP_BSIZE_MAX    65536
#define TP_BSIZE_MIN    1024
#define ESIZE_SHIFT_MAX 6

#ifdef SUPPORTS_MTB_TAPE_FORMAT
#define TP_BUFSIZE      TP_BSIZE_MAX
#else
#define TP_BSIZE        1024
#define TP_BUFSIZE      TP_BSIZE
#endif /* SUPPORTS_MTB_TAPE_FORMAT */

#define NTREC           10
#define HIGHDENSITYTREC 32
#define CARTRIDGETREC   63
#define TP_NINDIR       (TP_BSIZE_MIN/2)
#define TP_NINOS        (TP_NINDIR / sizeof (long))
#define LBLSIZE         16
#define NAMELEN         64

#define OFS_MAGIC       (int)60011
#define NFS_MAGIC       (int)60012
#define MTB_MAGIC       (int)60013
#define CHECKSUM        (int)84446
.fi
.in -2

.sp
.in +2
.nf
union u_data {
        char    s_addrs[TP_NINDIR];
        int32_t s_inos[TP_NINOS];
};

union u_shadow {
        struct s_nonsh {
                int32_t c_level;
                char    c_filesys[NAMELEN];
                char    c_dev[NAMELEN];
                char    c_host[NAMELEN];
        } c_nonsh;
        char    c_shadow[1];
};

union u_spcl {
        char dummy[TP_BUFSIZE];
        struct  s_spcl {
                int32_t c_type;
                time32_t c_date;
                time32_t c_ddate;
                int32_t c_volume;
                daddr32_t c_tapea;
                ino32_t c_inumber;
                int32_t c_magic;
                int32_t c_checksum;
                struct  dinode  c_dinode;
                int32_t c_count;
                union   u_data c_data;
                char    c_label[LBLSIZE];
                union   u_shadow c_shadow;
                int32_t c_flags;
                int32_t c_firstrec;
#ifdef SUPPORTS_MTB_TAPE_FORMAT
                int32_t c_tpbsize;
                int32_t c_spare[31];
#else
                int32_t c_spare[32];
#endif /* SUPPORTS_MTB_TAPE_FORMAT */
} s_spcl;
} u_spcl;
.fi
.in -2

.sp
.in +2
.nf
int32_t                    c_type;
time32_t                   c_date;
time32_t                   c_ddate;
int32_t                    c_volume;
daddr32_t                  c_tapea;
ino32_t                    c_inumber;
int32_t                    c_magic;
int32_t                    c_checksum;
struct dinode              c_dinode;
int32_t                    c_count;
union                      u_data c_data;
char                       c_label[LBLSIZE];
union                      u_shadow c_shadow;
int32_t                    c_flags;
int32_t                    c_firstrec;
#ifdef SUPPORTS_MTB_TAPE_FORMAT
int32_t                    c_tpbsize;
int32_t                    c_spare[31];
#else
int32_t                    c_spare[32];
#endif                       /*
     SUPPORTS_MTB_TAPE_FORMAT */
.fi
.in -2

.sp
.in +2
.nf
   } s_spcl;
} u_spcl;
#define spcl u_spcl.s_spcl
#define c_addr c_data.s_addrs
#define c_inos c_data.s_inos
#define c_level c_shadow.c_nonsh.c_level
#define c_filesys c_shadow.c_nonsh.c_filesys
#define c_dev c_shadow.c_nonsh.c_dev
#define c_host c_shadow.c_nonsh.c_host
.fi
.in -2

.sp
.in +2
.nf
#define TS_TAPE         1
#define TS_INODE        2
#define TS_ADDR         4
#define TS_BITS         3
#define TS_CLRI         6
#define TS_END          5
#define TS_EOM          7

#define DR_NEWHEADER    1
#define DR_INODEINFO    2
#define DR_REDUMP       4
#define DR_TRUEINC      8
#define DR_HASMETA      16
.fi
.in -2

.sp
.LP
This header describes three formats for the \fBufsdump\fR/\fBufsrestore\fR
interface:
.RS +4
.TP
.ie t \(bu
.el o
An old format, non-MTB, that supports dump sizes of less than 2 terabytes.
This format is represented by
.BR NFS_MAGIC .
.RE
.RS +4
.TP
.ie t \(bu
.el o
A new format, MTB, that supports dump sizes of greater than 2 terabytes
using a variable block size and 2 new constants:
.B TP_BSIZE_MIN
and
.BR TP_BSIZE_MAX .
This format is represented by
.BR MTB_MAGIC .
.RE
.RS +4
.TP
.ie t \(bu
.el o
A much older format that might be found on existing backup tapes. The
.B ufsrestore
command can restore tapes of this format, but no longer
generates tapes of this format. Backups in this format have the
.B OFS_MAGIC
magic number in their tape headers.
.RE
.sp
.LP
The constants are described as follows:
.sp
.ne 2
.mk
.na
.B TP_BSIZE
.ad
.RS 20n
.rt
Size of file blocks on the dump tapes for the old format. Note that
.B TP_BSIZE
must be a multiple of
.B DEV_BSIZE
This is applicable for
dumps of type
.B NFS_MAGIC
or
.BR OFS_MAGIC ,
but is not applicable for
dumps of type
.BR MTB_MAGIC .
.RE

.sp
.ne 2
.mk
.na
.B TP_BSIZE_MIN
.ad
.RS 20n
.rt
Minimum size of file blocks on the dump tapes for the new MTB format
(\fBMTB_MAGIC\fR) only.
.RE

.sp
.ne 2
.mk
.na
.B TP_BSIZE_MAX
.ad
.RS 20n
.rt
Maximum size of file blocks on the dump tapes for the new MTB format
(\fBMTB_MAGIC\fR) only.
.RE

.sp
.ne 2
.mk
.na
.B NTREC
.ad
.RS 20n
.rt
Number of
.B TP_BSIZE
blocks that are written in each tape record.
.RE

.sp
.ne 2
.mk
.na
.B HIGHDENSITYNTREC
.ad
.RS 20n
.rt
Number of
.B TP_BSIZE
blocks that are written in each tape record on
6250 BPI or higher density tapes.
.RE

.sp
.ne 2
.mk
.na
.B CARTRIDGETREC
.ad
.RS 20n
.rt
Number of
.B TP_BSIZE
blocks that are written in each tape record on
cartridge tapes.
.RE

.sp
.ne 2
.mk
.na
.B TP_NINDIR
.ad
.RS 20n
.rt
Number of indirect pointers in a
.B TS_INODE
or
.B TS_ADDR
record. It
must be a power of 2.
.RE

.sp
.ne 2
.mk
.na
.B TP_NINOS
.ad
.RS 20n
.rt
The maximum number of volumes on a tape.
.RE

.sp
.ne 2
.mk
.na
.B LBLSIZE
.ad
.RS 20n
.rt
The maximum size of a volume label.
.RE

.sp
.ne 2
.mk
.na
.B NAMELEN
.ad
.RS 20n
.rt
The maximum size of a host's name.
.RE

.sp
.ne 2
.mk
.na
.B OFS_MAGIC
.ad
.RS 20n
.rt
Magic number that is used for the very old format.
.RE

.sp
.ne 2
.mk
.na
.B NFS_MAGIC
.ad
.RS 20n
.rt
Magic number that is used for the non-MTB format.
.RE

.sp
.ne 2
.mk
.na
.B MTB_MAGIC
.ad
.RS 20n
.rt
Magic number that is used for the MTB format.
.RE

.sp
.ne 2
.mk
.na
.B CHECKSUM
.ad
.RS 20n
.rt
Header records checksum to this value.
.RE

.sp
.LP
The
.B TS_
entries are used in the
.B c_type
field to indicate what
sort of header this is. The types and their meanings are as follows:
.sp
.ne 2
.mk
.na
.B TS_TAPE
.ad
.RS 12n
.rt
Tape volume label.
.RE

.sp
.ne 2
.mk
.na
.B TS_INODE
.ad
.RS 12n
.rt
A file or directory follows. The
.B c_dinode
field is a copy of the disk
inode and contains bits telling what sort of file this is.
.RE

.sp
.ne 2
.mk
.na
.B TS_ADDR
.ad
.RS 12n
.rt
A subrecord of a file description. See
.B s_addrs
below.
.RE

.sp
.ne 2
.mk
.na
.B TS_BITS
.ad
.RS 12n
.rt
A bit map follows. This bit map has a one bit for each inode that was
dumped.
.RE

.sp
.ne 2
.mk
.na
.B TS_CLRI
.ad
.RS 12n
.rt
A bit map follows. This bit map contains a zero bit for all inodes that
were empty on the file system when dumped.
.RE

.sp
.ne 2
.mk
.na
.B TS_END
.ad
.RS 12n
.rt
End of tape record.
.RE

.sp
.ne 2
.mk
.na
.B TS_EOM
.ad
.RS 12n
.rt
diskette
.BR EOM "indicates that the restore is compatible with old dump"
.RE

.sp
.LP
The flags are described as follows:
.sp
.ne 2
.mk
.na
.B DR_NEWHEADER
.ad
.RS 17n
.rt
New format tape header.
.RE

.sp
.ne 2
.mk
.na
.B DR_INFODEINFO
.ad
.RS 17n
.rt
Header contains starting inode info.
.RE

.sp
.ne 2
.mk
.na
.B DR_REDUMP
.ad
.RS 17n
.rt
Dump contains recopies of active files.
.RE

.sp
.ne 2
.mk
.na
.B DR_TRUEINC
.ad
.RS 17n
.rt
Dump is a "true incremental".
.RE

.sp
.ne 2
.mk
.na
.B DR_HASMETA
.ad
.RS 17n
.rt
The metadata in this header.
.RE

.sp
.ne 2
.mk
.na
.B DUMPOUTFMT
.ad
.RS 17n
.rt
Name, incon, and ctime (date) for printf.
.RE

.sp
.ne 2
.mk
.na
.B DUMPINFMT
.ad
.RS 17n
.rt
Inverse for scanf.
.RE

.sp
.LP
The fields of the header structure are as follows:
.sp
.ne 2
.mk
.na
.B s_addrs
.ad
.RS 17n
.rt
An array of bytes describing the blocks of the dumped file.  A byte is
zero if the block associated with that byte was not present on the file
system; otherwise, the byte is non-zero.  If the block was not present on
the file lsystem, no block was dumped; the block will be stored as a   hole
in the file.  If there is not sufficient space in this record to describe
all the blocks in a file,
.B TS_ADDR
records will be scattered through
the file, each one picking up where the  last left off
.RE

.sp
.ne 2
.mk
.na
.B s_inos
.ad
.RS 17n
.rt
The starting inodes on tape.
.RE

.sp
.ne 2
.mk
.na
.B c_type
.ad
.RS 17n
.rt
The type of the record.
.RE

.sp
.ne 2
.mk
.na
.B c_date
.ad
.RS 17n
.rt
The date of the previous dump.
.RE

.sp
.ne 2
.mk
.na
.B c_ddate
.ad
.RS 17n
.rt
The date of this dump.
.RE

.sp
.ne 2
.mk
.na
.B c_volume
.ad
.RS 17n
.rt
The current volume number of the dump.
.RE

.sp
.ne 2
.mk
.na
.B c_tapea
.ad
.RS 17n
.rt
The logical block of this record.
.RE

.sp
.ne 2
.mk
.na
.B c_inumber
.ad
.RS 17n
.rt
The number of the inode being dumped if this is of type
.BR TS_INODE .
.RE

.sp
.ne 2
.mk
.na
.B c_magic
.ad
.RS 17n
.rt
This contains the value
.B MAGIC
above, truncated as needed.
.RE

.sp
.ne 2
.mk
.na
.B c_checksum
.ad
.RS 17n
.rt
This contains whatever value is needed to make the record sum to
.BR CHECKSUM .
.RE

.sp
.ne 2
.mk
.na
.B c_dinode
.ad
.RS 17n
.rt
This is a copy of the inode as it appears on the file system.
.RE

.sp
.ne 2
.mk
.na
.B c_count
.ad
.RS 17n
.rt
The count of bytes in
.BR s_addrs .
.RE

.sp
.ne 2
.mk
.na
.B u_data c_data
.ad
.RS 17n
.rt
The union of either
.B "u_data c_data"
The union of either
.BR s_addrs
or
.BR s_inos .
.RE

.sp
.ne 2
.mk
.na
.B c_label
.ad
.RS 17n
.rt
Label for this dump.
.RE

.sp
.ne 2
.mk
.na
.B c_level
.ad
.RS 17n
.rt
Level of this dump.
.RE

.sp
.ne 2
.mk
.na
.B c_filesys
.ad
.RS 17n
.rt
Name of dumped file system.
.RE

.sp
.ne 2
.mk
.na
.B c_dev
.ad
.RS 17n
.rt
Name of dumped service.
.RE

.sp
.ne 2
.mk
.na
.B c_host
.ad
.RS 17n
.rt
Name of dumped host.
.RE

.sp
.ne 2
.mk
.na
.B c_flags
.ad
.RS 17n
.rt
Additional information.
.RE

.sp
.ne 2
.mk
.na
.B c_firstrec
.ad
.RS 17n
.rt
First record on volume.
.RE

.sp
.ne 2
.mk
.na
.B c_spare
.ad
.RS 17n
.rt
Reserved for future uses.
.RE

.sp
.ne 2
.mk
.na
.B c_tpbsize
.ad
.RS 17n
.rt
Tape block size for MTB format only.
.RE

.sp
.LP
Each volume except the last ends with a tapemark (read as an end of file).
The last volume ends with a
.B TS_END
record and then the tapemark.
.sp
.LP
The dump history is kept in the file
.BR /etc/dumpdates .
It is an
.B ASCII
file with three fields separated by white space:
.RS +4
.TP
.ie t \(bu
.el o
The name of the device on which the dumped file system resides.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The level number of the dump tape; see \fBufsdump\fR(1M).
.RE
.RS +4
.TP
.ie t \(bu
.el o
The date of the incremental dump in the format generated by
.BR ctime (3C).
.RE
.sp
.LP
.B DUMPOUTFMT
is the format to use when using \fBprintf\fR(3C) to write
an entry to
.BR /etc/dumpdates ;
.B DUMPINFMT
is the format to use when
using \fBscanf\fR(3C) to read an entry from
.BR /etc/dumpdates .
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Stability LevelUnstable
.TE

.SH SEE ALSO
.sp
.LP
.BR ufsdump (1M),
.BR ufsrestore (1M),
.BR ctime (3C),
.BR printf (3C),
.BR scanf (3C),
.BR types.h (3HEAD),
.BR attributes (5),
