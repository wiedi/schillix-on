'\" te
.\" Copyright 1989 AT&T, Copyright (c) 2001, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH rt_dptbl 4 "15 Oct 2002" "SunOS 5.11" "File Formats"
.SH NAME
rt_dptbl \- real-time dispatcher parameter table
.SH DESCRIPTION
.sp
.LP
The process scheduler (or dispatcher) is the portion of the kernel that
controls allocation of the
.B CPU
to processes. The scheduler supports
the notion of scheduling classes where each class defines a scheduling
policy, used to schedule processes within that class. Associated with each
scheduling class is a set of priority queues on which ready to run processes
are linked. These priority queues are mapped by the system configuration
into a set of global scheduling priorities which are available to processes
within the class. The dispatcher always selects for execution the process
with the highest global scheduling priority in the system. The priority
queues associated with a given class are viewed by that class as a
contiguous set of priority levels numbered from 0 (lowest priority) to
.I n
(highest priority\(ema configuration dependent value). The set of
global scheduling priorities that the queues for a given class are mapped
into might not start at zero and might not be contiguous, depending on the
configuration.
.sp
.LP
The real-time class maintains an in-core table, with an entry for each
priority level, giving the properties of that level. This table is called
the real-time dispatcher parameter table
.RB ( rt_dptbl ).
The
.B rt_dptbl
consists of an array (\fBconfig_rt_dptbl[]\fR) of parameter
structures
.RB ( "struct rtdpent_t" ),
one for each of the
.I n
priority
levels. The structure are accessed via a pointer,
.RB ( rt_dptbl ),
to the
array. The properties of a given priority level
.I i
are specified by the
\fIi\fRth parameter structure in this array ( \fBrt_dptbl[\fIi\fB]\fR
).
.sp
.LP
A parameter structure consists of the following members. These are also
described in the
.B /usr/include/sys/rt.h
header file.
.sp
.ne 2
.mk
.na
.B rt_globpri
.ad
.RS 14n
.rt
The global scheduling priority associated with this priority level. The
.B rt_globpri
values cannot be changed with
.BR dispadmin (1M).
.RE

.sp
.ne 2
.mk
.na
.B rt_quantum
.ad
.RS 14n
.rt
The length of the time quantum allocated to processes at this level in
ticks
.RB ( hz ).
The time quantum value is only a default or starting value
for processes at a particular level as the time quantum of a real-time
process can be changed by the user with the
.B priocntl
command or the
.B priocntl
system call.
.sp
In the high resolution clock mode (\fBhires_tick\fR set to
.BR 1 ),
the
value of
.B hz
is set to
.BR 1000 .
Increase quantums to maintain the
same absolute time quantums.
.RE

.sp
.LP
An administrator can affect the behavior of the real-time portion of the
scheduler by reconfiguring the
.BR rt_dptbl .
There are two methods
available for doing this: reconfigure with a loadable module at boot-time or
by using
.BR dispadmin "(1M) at run-time."
.SS "rt_dptbl Loadable Module"
.sp
.LP
The
.B rt_dptbl
can be reconfigured with a loadable module which
contains a new real time dispatch table. The module containing the dispatch
table is separate from the RT loadable module which contains the rest of the
real time software. This is the only method that can be used to change the
number of real time priority levels or the set of global scheduling
priorities used by the real time class. The relevant procedure and source
code is described in the Examples section.
.SS "dispadmin Configuration File"
.sp
.LP
The
.B rt_quantum
values in the
.B rt_dptbl
can be examined and
modified on a running system using the
.BR dispadmin "(1M) command. Invoking"
.B dispadmin
for the real-time class allows the administrator to retrieve
the current
.B rt_dptbl
configuration from the kernel's in-core table, or
overwrite the in-core table with values from a configuration file. The
configuration file used for input to
.B dispadmin
must conform to the
specific format described below.
.sp
.LP
Blank lines are ignored and any part of a line to the right of a
.IR #
symbol is treated as a comment. The first non-blank, non-comment line must
indicate the resolution to be used for interpreting the time quantum values.
The resolution is specified as
.sp
.in +2
.nf
RES=\fIres\fR
.fi
.in -2

.sp
.LP
where
.I res
is a positive integer between 1 and 1,000,000,000 inclusive
and the resolution used is the reciprocal of
.I res
in seconds. (For
example,
.B RES=1000
specifies millisecond resolution.) Although very
fine (nanosecond) resolution may be specified, the time quantum lengths are
rounded up to the next integral multiple of the system clock's resolution.
.sp
.LP
The remaining lines in the file are used to specify the
.BR rt_quantum
values for each of the real-time priority levels. The first line specifies
the quantum for real-time level 0, the second line specifies the quantum for
real-time level 1. There must be exactly one line for each configured
real-time priority level. Each
.B rt_quantum
entry must be either a
positive integer specifying the desired time quantum (in the resolution
given by
.IR res ),
or the value -2 indicating an infinite time quantum for
that level.
.SH EXAMPLES
.LP
.B Example 1
A Sample
.B dispadmin
Configuration File
.sp
.LP
The following excerpt from a
.B dispadmin
configuration file illustrates
the format. Note that for each line specifying a time quantum there is a
comment indicating the corresponding priority level. These level numbers
indicate priority within the real-time class, and the mapping between these
real-time priorities and the corresponding global scheduling priorities is
determined by the configuration specified in the
.B RT_DPTBL
loadable
module. The level numbers are strictly for the convenience of the
administrator reading the file and, as with any comment, they are ignored by
.B dispadmin
on input.
.B dispadmin
assumes that the lines in the file
are ordered by consecutive, increasing priority level (from 0 to the maximum
configured real-time priority). The level numbers in the comments should
normally agree with this ordering; if for some reason they don't, however,
.B dispadmin
is unaffected.

.sp
.in +2
.nf
# Real-Time Dispatcher Configuration File
RES=1000

# TIME QUANTUM PRIORITY
# (rt_quantum)LEVEL
100#   0
100#   1
100#   2
100#   3
100#   4
100#   5
90 #   6
90 #   7
\&..    .
\&..    .
\&..    .
10#   58
10#   59
.fi
.in -2

.LP
.B Example 2
Replacing The rt_dptbl Loadable Module
.sp
.LP
In order to change the size of the real time dispatch table, the loadable
module which contains the dispatch table information will have to be built.
It is recommended that you save the existing module before using the
following procedure.

.RS +4
.TP
1.
Place the dispatch table code shown below in a file called
.BR rt_dptbl.c
An example of an
.B rt_dptbl.c
file follows.
.RE
.RS +4
.TP
2.
Compile the code using the given compilation and link lines supplied.
.sp
.in +2
.nf
cc -c -0 -D_KERNEL rt_dptbl.c
ld -r -o RT_DPTBL rt_dptbl.o
.fi
.in -2
.sp

.RE
.RS +4
.TP
3.
Copy the current dispatch table in
.B /usr/kernel/sched
to
.BR RT_DPTBL.bak .
.RE
.RS +4
.TP
4.
Replace the current
.B RT_DPTBL
in
.BR /usr/kernel/sched .
.RE
.RS +4
.TP
5.
You will have to make changes in the
.B /etc/system
file to reflect the
changes to the sizes of the tables. See
.BR system (4).
The
.BR rt_maxpri
variable may need changing. The syntax for setting this is:
.sp
.in +2
.nf
set RT:rt_maxpri=(class-specific value for maximum \e
        real-time priority)
.fi
.in -2

.RE
.RS +4
.TP
6.
Reboot the system to use the new dispatch table.
.RE
.sp
.LP
Great care should be used in replacing the dispatch table using this
method. If you don't get it right, the system may not behave properly.

.sp
.LP
The following is an example of a
.B rt_dptbl.c
file used for building
the new
.BR rt_dptbl .

.sp
.in +2
.nf
/*  BEGIN rt_dptbl.c  */
#include <sys/proc.h>
#include <sys/priocntl.h>
#include <sys/class.h>
#include <sys/disp.h>
#include <sys/rt.h>
#include <sys/rtpriocntl.h>
/*
 * This is the loadable module wrapper.
 */
#include <sys/modctl.h>
extern struct mod_ops mod_miscops;
/*
 * Module linkage information for the kernel.
 */
static struct modlmisc modlmisc = {
	&mod_miscops, "realtime dispatch table"
};
static struct modlinkage modlinkage = {
	MODREV_1, &modlmisc, 0
};
_init()
{
	return (mod_install(&modlinkage));
}
_info (struct modinfo *modinfop)
{
	return (mod_info(&modlinkage, modinfop));
}
rtdpent_t       config_rt_dptbl[] = {

/*   prilevel Time quantum  */

100,100,
101,100,
102,100,
103,100,
104,100,
105,100,
106,100,
107,100,
108,100,
109,100,
110,80,
111,80,
112,80,
113,80,
114,80,
115,80,
116,80,
117,80,
118,80,
119,80,
120,60,
121,60,
122,60,
123,60,
124,60,
125,60,
126,60,
127,60,
128,60,
129,60,
130,40,
131,40,
132,40,
133,40,
134,40,
135,40,
136,40,
137,40,
138,40,
139,40,
140,20,
141,20,
142,20,
143,20,
144,20,
145,20,
146,20,
147,20,
148,20,
149,20,
150,10,
151,10,
152,10,
153,10,
154,10,
155,10,
156,10,
157,10,
158,10,
159,10,

};
/*
 * Return the address of config_rt_dptbl
 */ rtdpent_t *
    rt_getdptbl()
{
           return (config_rt_dptbl);
}
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR priocntl (1),
.BR dispadmin (1M),
.BR priocntl (2),
.BR system (4)
.sp
.LP
.I System Administration Guide: Basic Administration
.sp
.LP
 \fIProgramming Interfaces Guide\fR
