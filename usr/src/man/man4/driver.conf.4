'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH driver.conf 4 "5 Jan 2007" "SunOS 5.11" "File Formats"
.SH NAME
driver.conf \- driver configuration files
.SH SYNOPSIS
.LP
.nf
\fBdriver.conf\fR
.fi

.SH DESCRIPTION
.sp
.LP
Driver configuration files provide values for device properties. The values
override values provided by the devices themselves. Most modern devices
provide enough property values to make a driver configuration file
unnecessary.
.sp
.LP
The system associates a driver with its configuration file by name. For
example, a driver in
.B /usr/kernel/drv
called
.B wombat
has the
driver configuration file
.BR wombat.conf ,
also stored in
.BR /usr/kernel/drv ,
associated with it. On systems capable of support
64-bit drivers, the driver configuration file should be placed in the
directory in which the 32-bit driver is (or would be) located, even if only
a 64-bit version is provided. For example, a 64-bit driver stored in
.B /usr/kernel/drv/sparcv9
stores its driver configuration file in
.BR /usr/kernel/drv .
.sp
.LP
The value of the
.B name
property is the node name. In a
.B driver.conf
file, where the generic node name and
.B compatible
property associated with a self-identifying devices are typically not used,
the node name must be a binding name. The binding name is the name chosen by
the system to bind a driver to the device. The binding name is either an
alias associated with the driver established by
.BR add_drv "(1M) or the"
driver name itself.
.sp
.LP
The syntax of a single entry in a driver configuration file takes one of
three forms:
.sp
.in +2
.nf
\fBname\fR="\fInode name\fR" \fBparent\fR="\fIparent name\fR" [\fIproperty-name=value\fR .\|.\|.]\fB;\fR
.fi
.in -2

.sp
.LP
In this form, the parent name can be either the binding name of the parent
nexus driver or a specific full pathname, beginning with a slash
.RB ( / )
character, identifying a specific instance of a parent bus. If a binding
name is used then all parent nodes bound to that driver match. A generic
name (for example,
.BR pci )
is not a valid binding name even though it can
appear in the full pathname of all intended parents.
.sp
.LP
Alternatively, the parent can be specified by the type of interface it
presents to its children.
.sp
.in +2
.nf
\fBname\fR="\fInode name\fR" \fBclass\fR="\fIclass name\fR" [\fIproperty-name=value\fR .\|.\|.]\fB;\fR
.fi
.in -2

.sp
.LP
For example, the driver for the
.B SCSI
host adapter can have different
names on different platforms, but the target drivers can use class
.B scsi
to insulate themselves from these differences.
.sp
.LP
Entries of either form above correspond to a device information
.RB ( devinfo )
node in the kernel device tree. Each node has a
.I
name
which is usually the name of the driver, and a
.I parent
name which is
the name of the parent
.B devinfo
node to which it will be connected. Any
number of name-value pairs can be specified to create properties on the
prototype
.B devinfo
node. These properties can be retrieved using the
DDI property interfaces (for example,
.BR ddi_prop_get_int (9F)
and
.BR ddi_prop_lookup (9F)).
The prototype
.B devinfo
node specification
must be terminated with a semicolon
.RB ( ; ).
.sp
.LP
The third form of an entry is simply a list of properties.
.sp
.in +2
.nf
[\fIproperty-name=value\fR .\|.\|.]\fB;\fR
.fi
.in -2
.sp

.sp
.LP
A property created in this way is treated as global to the driver. It can
be overridden by a property with the same name on a particular
.B devinfo
node, either by creating one explicitly on the prototype node in the
driver.conf file or by the driver.
.sp
.LP
Items are separated by any number of newlines,
.B SPACE
or
.BR TAB
characters.
.sp
.LP
The configuration file can contain several entries to specify different
device configurations and parent nodes. The system can call the driver for
each possible prototype
.B devinfo
node, and it is generally the
responsibility of the drivers
.BR probe (9E)
routine to determine if the
hardware described by the prototype
.B devinfo
node is really present.
.sp
.LP
Property names must not violate the naming conventions for Open Boot PROM
properties or for IEEE 1275 names. In particular, property names should
contain only printable characters, and should not contain at-sign
.RB ( @ ),
slash
.RB ( / ),
backslash
.RB ( \e ),
colon
.RB ( : ),
or square brackets
.RB ( [] ).
Property values can be decimal integers or strings delimited by
double quotes (\fB"\fR). Hexadecimal integers can be constructed by
prefixing the digits with
.BR 0x .
.sp
.LP
A comma separated list of integers can be used to construct properties
whose value is an integer array. The value of such properties can be
retrieved inside the driver using
.BR ddi_prop_lookup_int_array (9F).
.sp
.LP
Comments are specified by placing a
.B #
character at the beginning of
the comment string, the comment string extends for the rest of the line.
.SH EXAMPLES
.LP
.B Example 1
Configuration File for a PCI Bus Frame Buffer
.sp
.LP
The following is an example of a configuration file called
.B ACME,simple.conf
for a
.B PCI
bus frame buffer called
.BR ACME,simple .

.sp
.in +2
.nf
#
# Copyright (c) 1993, by ACME Fictitious Devices, Inc.
#
#ident  "@(#)ACME,simple.conf   1.3     1999/09/09"

name="ACME,simple" class="pci" unit-address="3,1"
        debug-mode=12;
.fi
.in -2

.sp
.LP
This example creates a prototype
.B devinfo
node called
.B ACME,simple
under all parent nodes of class
.BR pci .
The node has
device and function numbers of 3 and 1, respectively; the property
.B debug-mode
is provided for all instances of the driver.

.LP
.B Example 2
Configuration File for a Pseudo Device Driver
.sp
.LP
The following is an example of a configuration file called
.B ACME,example.conf
for a pseudo device driver called
.BR ACME,example .

.sp
.in +2
.nf
#
# Copyright (c) 1993, ACME Fictitious Devices, Inc.
#
#ident  "@(#)ACME,example.conf  1.2   93/09/09"
name="ACME,example" parent="pseudo" instance=0
    debug-level=1;

name="ACME,example" parent="pseudo" instance=1;

whizzy-mode="on";
debug-level=3;
.fi
.in -2

.sp
.LP
This creates two
.B devinfo
nodes called
.B ACME,example
which
attaches below the
.B pseudo
node in the kernel device tree. The
.B instance
property is only interpreted by the
.B pseudo
node, see
.BR pseudo (4)
for further details. A property called
.B debug-level
is
created on the first
.B devinfo
node which has the value 1. The
.B example
driver is able to fetch the value of this property using
.BR ddi_prop_get_int (9F).

.sp
.LP
Two global driver properties are created,
.B whizzy-mode
(which has the
string value "on") and
.B debug-level
(which has the value 3). If the
driver looks up the property
.B whizzy-mode
on either node, it retrieves
the value of the global
.B
whizzy-mode
property ("on"). If the driver
looks up the
.B debug-level
property on the first node, it retrieves the
value of the
.B debug-level
property on that node (1). Looking up the
same property on the second node retrieves the value of the global
.B debug-level
property (3).

.SH SEE ALSO
.sp
.LP
.BR add_drv (1M),
.BR pci (4),
.BR pseudo (4),
.BR sbus (4),
.BR scsi (4),
.BR probe (9E),
.BR ddi_getlongprop (9F),
.BR ddi_getprop (9F),
.BR ddi_getproplen (9F),
.BR ddi_prop_get_int (9F),
.BR ddi_prop_lookup (9F),
.BR ddi_prop_op (9F)
.sp
.LP
.I Writing Device Drivers
.SH WARNINGS
.sp
.LP
To avoid namespace collisions between multiple driver vendors, it is
strongly recommended that the
.I name
property of the driver should begin
with a vendor-unique string. A reasonably compact and unique choice is the
vendor over-the-counter stock symbol.
.SH NOTES
.sp
.LP
The
.BR update_drv "(1M) command should be used to prompt the kernel to"
reread
.B driver.conf
files. Using
.BR modunload (1M)
to update
.B driver.conf
continues to work in release 9 of the Solaris operating
environment, but the behavior will change in a future release.
