'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH contract 4 "11 Jul 2005" "SunOS 5.11" "File Formats"
.SH NAME
contract \- the contract file system
.SH SYNOPSIS
.LP
.nf
\fB/system/contract\fR
.fi

.SH DESCRIPTION
.sp
.LP
The
.B /system/contract
file system acts as the primary interface to the
contract subsystem. There is a subdirectory of
.B /system/contract
for
each available contract type.
.sp
.LP
.B /system/contract
can be mounted on any mount point, in addition to the
standard
.B /system/contract
mount point, and can be mounted several
places at once. Such additional mounts are allowed in order to facilitate the
confinement of processes to subtrees of the file system using
.BR chroot (1M)
and yet allow such processes to continue to use contract
commands and interfaces.
.sp
.LP
A combination of standard system calls (for example,
.BR open (2),
.BR close (2),
and
.BR poll (2))
and calls to
.BR libcontract (3LIB)
access
.B /system/contract
files.
.sp
.LP
Consumers of the contract file system must be large file aware. See
.BR largefile (5)
and \fBlfcompile64\fR(5).
.SS "DIRECTORY STRUCTURE"
.sp
.LP
At the top level, the
.B /system/contract
directory contains
subdirectories named with each available contract type, and one special
directory,
.BR all .
Each of these directories is world-readable and
world-searchable.
.SS "STRUCTURE OF \fB/system/contract/\fItype\fR"
.sp
.LP
Each \fB/system/contract/\fItype\fR directory contains a fixed number of
files. It also contains a variable number of subdirectories corresponding to
existing contracts of type
.I type
and named with the decimal
representation of the contracts' IDs.
.sp
.LP
The following files are in a \fB/system/contract/\fItype\fR directory:
.sp
.ne 2
.mk
.na
.B template
.ad
.RS 12n
.rt
Opening this file returns a file descriptor for a new
.I type
contract
template.
.sp
You can use the following \fBlibcontract\fR(3LIB) calls on a template file
descriptor:
.sp
.in +2
.nf
>

 ct_tmpl_activate(3contract)
 ct_tmpl_clear(3contract)
 ct_tmpl_create(3contract)
.fi
.in -2
.sp

See TERMS for additional template functions.
.RE

.sp
.ne 2
.mk
.na
.B latest
.ad
.RS 12n
.rt
Opening this file returns a file descriptor for the status file of the last
.I type
contract written by the opening LWP. See \fBSTRUCTURE OF
/system/contract/\fItype\fR/\fIid\fR. If the opening LWP has not created a
.I type
contract, opening latest fails with
.BR ESRCH .
.RE

.sp
.ne 2
.mk
.na
.B bundle
.ad
.RS 12n
.rt
Opening this file returns a file descriptor for an event endpoint which
receives events from all
.I type
contracts on the system. No privileges
are required to open a type bundle event endpoint. Events sent by contracts
owned and written by users other than the reader's effective user id are
invisible, that is, they are silently skipped, unless the reader has
.B {PRIV_CONTRACT_OBSERVER}
in its effective set. See
.BR EVENTS .
.RE

.sp
.ne 2
.mk
.na
.B pbundle
.ad
.RS 12n
.rt
Opening this file returns a file descriptor for an event endpoint which
receives events from all
.I type
contracts held by the opening process.
See
.BR EVENTS .
.RE

.SS "STRUCTURE OF /system/contract/all"
.sp
.LP
The
.B /system/contract/all
directory contains a numerically named file
for each contract in the system. Each file is a symbolic link to the
type-specific directory for that contract, that is
\fB/system/contract/all/\fIid\fR points to
\fB/system/contract/\fItype\fR/\fIid\fR.
.SS "STRUCTURE OF /system/contract/\fItype\fR/\fIid\fR"
.sp
.LP
Each \fB/system/contract/\fItype\fR/\fIid\fR directory contains the
following files:
.sp
.ne 2
.mk
.na
.B ctl
.ad
.RS 10n
.rt
Opening this file returns a file descriptor for contract
.IR id "'s control"
file. The open fails if the opening process does not hold contract \fIid\fR
and the contract has not been inherited by the process contract of which the
opening process is a member. See
.BR process (4).
.sp
The following \fBlibcontract\fR(3LIB) calls can be made on a \fBctl\fR file
descriptor if the contract is owned by the caller:
.sp
.in +2
.nf
ct_ctl_abandon(3contract)
ct_ctl_newct(3contract)
ct_ctl_ack(3contract)
ct_ctl_qack(3contract)
.fi
.in -2
.sp

The following \fBlibcontract\fR(3LIB) call can be made on a ctl file
descriptor if the contract doesn't have an owner:
.sp
.in +2
.nf
ct_ctl_adopt(3contract)
.fi
.in -2
.sp

.RE

.sp
.ne 2
.mk
.na
.B status
.ad
.RS 10n
.rt
Opening this file returns a file descriptor for contract
.IR id "'s status"
file. The following
.BR libcontract (3LIB)
calls can be made on a status
file descriptor:
.LP
.nf
ct_status_read(3contract)
.fi

 See STATUS.
.RE

.sp
.ne 2
.mk
.na
.B events
.ad
.RS 10n
.rt
Opening this file returns a file descriptor for an event endpoint which
receives events from contract
.IR id .
See
.BR EVENTS .
.sp
Only a process which has the same effective user ID as the process owning
the contract, the same effective user ID as the contract's author, or has
.B {PRIV_CONTRACT_OBSERVER}
in its effective set can open the event
endpoint for a contract.
.RE

.SS "TERMS"
.sp
.LP
The following terms are defined for all contracts:
.sp
.ne 2
.mk
.na
.B cookie
.ad
.RS 25n
.rt
Specifies a 64-bit quantity that the contract author can use to identify the
contract. Use
.BR ct_tmpl_set_cookie (3CONTRACT)
to set this term.
.RE

.sp
.ne 2
.mk
.na
.B informative event set
.ad
.RS 25n
.rt
Selects which events are delivered as informative events. Use
.BR ct_tmpl_set_informative (3CONTRACT)
to set this term.
.RE

.sp
.ne 2
.mk
.na
.B critical event set
.ad
.RS 25n
.rt
Selects which events are delivered as critical events. Use
.BR ct_tmpl_set_critical (3CONTRACT)
to set this term.
.RE

.SS "STATUS"
.sp
.LP
A status object returned by
.BR ct_status_read "(3CONTRACT) contains the"
following pieces of information:
.sp
.ne 2
.mk
.na
.B contract ID
.ad
.sp .6
.RS 4n
The numeric ID of the contract. Use
.BR ct_status_get_id (3CONTRACT)
to
obtain this information.
.RE

.sp
.ne 2
.mk
.na
.B contract type
.ad
.sp .6
.RS 4n
The type of the contract, specifed as a string. Obtained using
.BR ct_status_get_type (3CONTRACT).
The contract type is the same as its
subdirectory name under
.BR /system/contract .
.RE

.sp
.ne 2
.mk
.na
.B creator's zone ID
.ad
.sp .6
.RS 4n
The zone ID of the process which created the contract. Obtained using
.BR ct_status_get_zoneid (3CONTRACT).
.RE

.sp
.ne 2
.mk
.na
.B ownership state
.ad
.sp .6
.RS 4n
The state of the contract, specified as
.BR CTS_OWNED ,
.BR CTS_INHERITED ,
.BR CTS_ORPHAN ,
or
.BR CTS_DEAD .
Use
.BR ct_status_get_state (3CONTRACT)
to obtain this information.
.RE

.sp
.ne 2
.mk
.na
.B contract holder
.ad
.sp .6
.RS 4n
If the contract's state is
.BR CTS_OWNED ,
the ID of the process which owns
the contract. If the contract's state is
.BR CTS_INHERITED ,
the ID of the
contract which is acting as regent. If the contract's state is
.B CTS_ORPHAN
or
.BR CTS_DEAD ,
this is undefined. Use
.BR ct_status_get_holder (3CONTRACT)
to obtain this information.
.RE

.sp
.ne 2
.mk
.na
.B number of critical events
.ad
.sp .6
.RS 4n
The number of unacknowledged critical events pending on the contract's event
queue. Use
.BR ct_status_get_nevents (3CONTRACT)
to obtain this
information.
.RE

.sp
.ne 2
.mk
.na
.B negotiation time
.ad
.sp .6
.RS 4n
The time remaining before the current synchronous negotiation times out. Use
.BR ct_status_get_ntime (3CONTRACT)
to obtain this information.
.RE

.sp
.ne 2
.mk
.na
.B negotiation quantum time
.ad
.sp .6
.RS 4n
The time remaining before the current negotiation quantum runs out. Use
.BR ct_status_get_qtime (3CONTRACT)
to obtain this information.
.RE

.sp
.ne 2
.mk
.na
.B negotiation event ID
.ad
.sp .6
.RS 4n
The ID of the event which initiated the negotiation timeout. Use
.BR ct_status_get_nevid (3CONTRACT)
to obtain this information.
.RE

.sp
.ne 2
.mk
.na
.B cookie (term)
.ad
.sp .6
.RS 4n
The contract's cookie term. Use
.BR ct_status_get_cookie (3CONTRACT)
to
obtain this information.
.RE

.sp
.ne 2
.mk
.na
.B Informative event set (term)
.ad
.sp .6
.RS 4n
The contract's informative event set. Use
.BR ct_status_get_informative (3CONTRACT)
to obtain this information.
.RE

.sp
.ne 2
.mk
.na
.B Critical event set (term)
.ad
.sp .6
.RS 4n
The contract's critical event set. Use
.BR ct_status_get_critical (3CONTRACT)
to obtain this information.
.RE

.SS "EVENTS"
.sp
.LP
All three event endpoints, \fB/system/contract/\fItype\fR/bundle\fR,
\fB/system/contract/\fItype\fR/pbundle\fR, and
\fB/system/contract/\fItype\fR/\fIid\fR/events\fR, are accessed in the same
manner.
.sp
.LP
The following \fBlibcontract\fR(3LIB) interfaces are used with an event
endpoint file descriptor:
.sp
.in +2
.nf
ct_event_read(3contract)
ct_event_read_critical(3contract)
ct_event_reset(3contract)
ct_event_next(3contract)
.fi
.in -2
.sp

.sp
.LP
To facilitate processes watching multiple event endpoints, it is possible to
poll(2) on event endpoints. When it is possible to receive on an endpoint
file descriptor, POLLIN is set for that descriptor.
.sp
.LP
An event object returned by
.BR ct_event_read "(3CONTRACT) contains the"
following information:
.sp
.ne 2
.mk
.na
.B contract ID
.ad
.RS 28n
.rt
The ID of the contract that generated the event. Use
.BR ct_event_read (3CONTRACT)
to obtain this information.
.RE

.sp
.ne 2
.mk
.na
.B event ID
.ad
.RS 28n
.rt
The ID of the contract event.Use
.BR ct_event_get_evid (3CONTRACT).
.RE

.sp
.ne 2
.mk
.na
.B flags
.ad
.RS 28n
.rt
A bit vector possibly including
.B CT_ACK
and
.BR CTE_INFO .
Use
.BR ct_event_get_flags (3CONTRACT)
to obtain this information.
.RE

.sp
.ne 2
.mk
.na
.B event type
.ad
.RS 28n
.rt
The type of event, equal to one of the constants specified in the contract
type's manual page or
.BR CT_EV_NEGEND .
Use
.BR ct_event_get_type (3CONTRACT)
to obtain this information.
.RE

.SS "EVENT TYPES"
.sp
.LP
The following event types are defined:
.sp
.ne 2
.mk
.na
.B CT_EV_NEGEND
.ad
.RS 16n
.rt
Some time after an exit negotiation is initiated, the \fBCT_EV_NEGEND\fR
event is sent. This indicates that the negotiation ended. This might be
because the operation was cancelled, or because the operation was successful.
If successful, and the owner requested that a new contract be written, this
contains the ID of that contract.
.sp
.B CT_EV_NEGEND
cannot be included in a contract's informative or
critical event set. It is always delivered and always critical. If
.B CT_EV_NEGEND
indicates that the operation was successful, no further
events are sent. The contract's owner should use
.BR ct_ctl_abandon (3CONTRACT)
to abandon the contract.
.sp
A
.B CT_EV_NEGEND
event contains:
.sp
.ne 2
.mk
.na
.B negotiation ID
.ad
.RS 19n
.rt
The ID of the negotiation which ended. Use
.BR ct_event_get_nevid (3CONTRACT)
to obain this information.
.RE

.sp
.ne 2
.mk
.na
.B new contract ID
.ad
.RS 19n
.rt
The ID of the newly created contract. This value is 0 if no contract was
created, or the ID of the existing contract if the operation was not
completed. Use
.BR ct_event_get_newct (3CONTRACT)
to obtain this
information.
.RE

.RE

.SH FILES
.sp
.ne 2
.mk
.na
.B /system/contract
.ad
.sp .6
.RS 4n
List of all contract types
.RE

.sp
.ne 2
.mk
.na
.B /system/contract/all
.ad
.sp .6
.RS 4n
Directory of all contract IDs
.RE

.sp
.ne 2
.mk
.na
\fB/system/contract/all/\fIid\fR
.ad
.sp .6
.RS 4n
Symbolic link to the type-specific directory of contract \fIid\fR
.RE

.sp
.ne 2
.mk
.na
\fB/system/contract/\fItype\fR
.ad
.sp .6
.RS 4n
Specific type directory
.RE

.sp
.ne 2
.mk
.na
\fB/system/contract/\fItype\fR/templete\fR
.ad
.sp .6
.RS 4n
Template for the contract type
.RE

.sp
.ne 2
.mk
.na
\fB/system/contract/\fItype\fR/bundle\fR
.ad
.sp .6
.RS 4n
Listening point for all contracts of that type
.RE

.sp
.ne 2
.mk
.na
\fB/system/contract/\fItype\fR/pbundle\fR
.ad
.sp .6
.RS 4n
Listening point for all contracts of that type for the opening process
.RE

.sp
.ne 2
.mk
.na
\fB/system/contract/\fItype\fR /latest\fR
.ad
.sp .6
.RS 4n
Status of most recent
.I type
contract created by the opening LWP
.RE

.sp
.ne 2
.mk
.na
\fB/system/contract/\fItype\fR/\fIID\fR
.ad
.sp .6
.RS 4n
Directory for contract id
.RE

.sp
.ne 2
.mk
.na
\fB/system/contract/\fItype\fR/\fIID\fR/events\fR
.ad
.sp .6
.RS 4n
Listening point for contract id's events
.RE

.sp
.ne 2
.mk
.na
\fB/system/contract/\fItype\fR/\fIID\fR/ctl\fR
.ad
.sp .6
.RS 4n
Control file for contract ID
.RE

.sp
.ne 2
.mk
.na
\fB/system/contract/\fItype\fR/\fIID\fR/status\fR
.ad
.sp .6
.RS 4n
Status info for contract ID
.RE

.SH SEE ALSO
.sp
.LP
.BR ctrun (1),
.BR ctstat (1),
.BR ctwatch (1),
.BR chroot (1M),
.BR close (2),
.BR ioctl (2),
.BR open (2),
.BR poll (2),
.BR ct_ctl_abandon (3CONTRACT),
.BR ct_event_read (3CONTRACT),
.BR ct_event_get_evid (3CONTRACT),
.BR ct_event_get_flags (3CONTRACT),
.BR ct_event_get_nevid (3CONTRACT),
.BR ct_event_get_newct (3CONTRACT),
\fBct_event_get_type\fR(3CONTRACT), \fBct_status_read\fR(3CONTRACT)\fBct_status_get_cookie\fR(3CONTRACT),
.BR ct_status_get_critical (3CONTRACT),
.BR ct_status_get_holder (3CONTRACT),
.BR ct_status_get_id (3CONTRACT),
.BR ct_status_get_informative (3CONTRACT),
.BR ct_status_get_nevid (3CONTRACT),
.BR ct_status_get_nevents (3CONTRACT),
.BR ct_status_get_ntime (3CONTRACT),
.BR ct_status_get_qtime (3CONTRACT),
.BR ct_status_get_state (3CONTRACT),
.BR ct_status_get_type (3CONTRACT),
.BR ct_tmpl_set_cookie (3CONTRACT),
.BR ct_tmpl_set_critical (3CONTRACT),
.BR ct_tmpl_set_informative (3CONTRACT),
.BR libcontract (3LIB),
.BR process (4),
.BR largefile (5),
.BR lfcompile (5),
.BR privileges (5)
