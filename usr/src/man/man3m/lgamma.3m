'\" te
.\" Copyright (c) 2001, the Institute of Electrical
.\" and Electronics Engineers, Inc. and The Open Group. All Rights Reserved.
.\" Copyright (c) 1992, X/Open Company Limited.
.\"  All Rights Reserved.
.\" Copyright (c) 1983 Regents of the University
.\" of California. All rights reserved. The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\" Portions Copyright (c) 2006, Sun Microsystems,
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Inc. All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.TH lgamma 3M "12 Jul 2006" "SunOS 5.11" "Mathematical Library Functions"
.SH NAME
lgamma, lgammaf, lgammal, lgamma_r, lgammaf_r, lgammal_r, gamma, gammaf,
gammal, gamma_r, gammaf_r, gammal_r \- log gamma function
.SH SYNOPSIS
.LP
.nf
c99 [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lm\fR [ \fIlibrary\fR.\|.\|. ]
#include <math.h>

extern int signgam;

\fBdouble\fR \fBlgamma\fR(\fBdouble\fR \fIx\fR);
.fi

.LP
.nf
\fBfloat\fR \fBlgammaf\fR(\fBfloat\fR \fIx\fR);
.fi

.LP
.nf
\fBlong double\fR \fBlgammal\fR(\fBlong double\fR \fIx\fR);
.fi

.LP
.nf
\fBdouble\fR \fBgamma\fR(\fBdouble\fR \fIx\fR);
.fi

.LP
.nf
\fBfloat\fR \fBgammaf\fR(\fBfloat\fR \fIx\fR);
.fi

.LP
.nf
\fBlong double\fR \fBgammal\fR(\fBlong double\fR \fIx\fR);
.fi

.LP
.nf
\fBdouble\fR \fBlgamma_r\fR(\fBdouble\fR \fIx\fR, \fBint *\fIsigngamp\fR);
.fi

.LP
.nf
\fBfloat\fR \fBlgammaf_r\fR(\fBfloat\fR \fIx\fR, \fBint *\fIsigngamp\fR);
.fi

.LP
.nf
\fBlong double\fR \fBlgammal_r\fR(\fBlong double\fR \fIx\fR, \fBint *\fIsigngamp\fR);
.fi

.LP
.nf
\fBdouble\fR \fBgamma_r\fR(\fBdouble\fR \fIx\fR, \fBint *\fIsigngamp\fR);
.fi

.LP
.nf
\fBfloat\fR \fBgammaf_r\fR(\fBfloat\fR \fIx\fR, \fBint *\fIsigngamp\fR);
.fi

.LP
.nf
\fBlong double\fR \fBgammal_r\fR(\fBlong double\fR \fIx\fR, \fBint *\fIsigngamp\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions return
.sp
ln||~(x)|
.sp
.LP
where
.sp
|~(x) = integral from 0 to +Infinity of pow(t,x-1)*exp(-t) dt
.sp
.LP
for x > 0 and
.sp
|~(x) = n/(|~(1-x)sin(nx))
.sp
.LP
for x < 1.
.sp
.LP
These functions use the external integer
.B signgam
to return the sign
of
.B |~(x)
while
.B lgamma_r()
and
.B gamma_r()
use the
user-allocated space addressed by
.BR signgamp .
.SH RETURN VALUES
.sp
.LP
Upon successful completion, these functions return the logarithmic gamma of
.IR x .
.sp
.LP
If
.I x
is a non-positive integer, a pole error occurs and these
functions return
.RB + HUGE_VAL ,
.RB + HUGE_VALF ,
and +\fBHUGE_VALL\fR,
respectively.
.sp
.LP
If
.I x
is NaN, a NaN is returned.
.sp
.LP
If
.I x
is 1 or 2, +0 shall be returned.
.sp
.LP
If
.I x
is \(+-Inf, +Inf is returned.
.SH ERRORS
.sp
.LP
These functions will fail if:
.sp
.ne 2
.mk
.na
.B Pole Error
.ad
.RS 14n
.rt
The
.I x
argument is a negative integer or 0.
.sp
If the integer expression (\fBmath_errhandling\fR &
.BR MATH_ERREXCEPT )
is non-zero, then the divide-by-zero floating-point exception is raised.
.RE

.SH USAGE
.sp
.LP
An application wanting to check for exceptions should call
\fBfeclearexcept\fR(\fBFE_ALL_EXCEPT\fR) before calling these functions. On
.RB "return, if " fetestexcept ( FE_INVALID " |"
.B FE_DIVBYZERO
|
.B FE_OVERFLOW
|
.BR FE_UNDERFLOW )
is non-zero, an exception has been
raised. An application should either examine the return value or check the
floating point exception flags to detect exceptions.
.sp
.LP
In the case of
.BR lgamma() ,
do not use the expression
.B signgam*exp(lgamma(x))
to compute
.sp
`g  := |~(x)'
.sp
.LP
Instead compute
.B lgamma()
first:
.sp
.LP
.B "lg = lgamma(x); g = signgam*exp(lg);
.sp
.LP
only after
.B lgamma()
has returned can
.B signgam
be correct. Note
that
.B |~(x)
must overflow when
.I x
is large enough, underflow when
\(mi\fIx\fR is large enough, and generate a division by 0 exception at the
singularities
.I x
a nonpositive integer.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilitySee below.
_
MT-LevelSee below.
.TE

.sp
.LP
The
.BR lgamma() ,
.BR lgammaf() ,
.BR lgammal() ,
and
.BR gamma()
functions are Standard. The
.BR lgamma_r() ,
.BR lgammaf_r() ,
.BR lgammal_r() ,
.BR gamma_r() ,
.BR gammaf_r() ,
and
.BR gammal_r() ,
functions are Stable.
.sp
.LP
The
.BR lgamma() ,
.BR lgammaf() ,
.BR lgammal() ,
.BR gamma() ,
.BR gammaf() ,
and
.B gammal()
functions are Unsafe in multithreaded
applications. The
.BR lgamma_r() ,
.BR lgammaf_r() ,
.BR lgammal_r() ,
.BR gamma_r() ,
.BR gammaf_r() ,
and
.B gammal_r()
functions are
MT-Safe and should be used instead.
.SH SEE ALSO
.sp
.LP
.BR exp (3M),
.BR feclearexcept (3M),
.BR fetestexcept (3M),
.BR isnan (3M),
.BR math.h (3HEAD),
.BR attributes (5),
.BR standards (5)
.SH NOTES
.sp
.LP
When compiling multithreaded applications, the
.B _REENTRANT
flag must
be defined on the compile line.  This flag should only be used in
multithreaded applications.
