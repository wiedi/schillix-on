'\" te
.\" Copyright 1989 AT&T
.\" Copyright (c) 2003, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\"  Portions Copyright (c) 1992, X/Open Company Limited  All Rights Reserved
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH expr 1 "29 Aug 2003" "SunOS 5.11" "User Commands"
.SH NAME
expr \- evaluate arguments as an expression
.SH SYNOPSIS
.LP
.nf
\fB/usr/bin/expr\fR \fIargument\fR.\|.\|.
.fi

.LP
.nf
\fB/usr/xpg4/bin/expr\fR \fIargument\fR.\|.\|.
.fi

.LP
.nf
\fB/usr/xpg6/bin/expr\fR \fIargument\fR.\|.\|.
.fi

.SH DESCRIPTION
.SS "/usr/bin/expr, /usr/xpg4/bin/expr"
.sp
.LP
The
.B expr
utility evaluates the expression and writes the result to
standard output. The character
.B 0
is written to indicate a zero value
and nothing is written to indicate a null string.
.SS "/usr/xpg6/bin/expr"
.sp
.LP
The
.B expr
utility evaluates the expression and writes the result to
standard output followed by a NEWLINE. If there is no result from \fBexpr\fR
processing, a NEWLINE is written to standard output.
.SH OPERANDS
.sp
.LP
The
.I argument
operand is evaluated as an expression. Terms of the
expression must be separated by blanks. Characters special to the shell must
be escaped (see
.BR sh (1)).
Strings containing blanks or other special
characters should be quoted. The length of the expression is limited to
.B LINE_MAX
(2048 characters).
.sp
.LP
The operators and keywords are listed below. The list is in order of
increasing precedence, with equal precedence operators grouped within
\fB{\|}\fR symbols. All of the operators are left-associative.
.sp
.ne 2
.mk
.na
.I expr
\fB\e|\fR \fIexpr\fR
.ad
.sp .6
.RS 4n
Returns the evaluation of the first
.I expr
if it is neither
.IR NULL
nor
.BR 0 ;
otherwise, returns the evaluation of the second
.I expr
if it
is not
.IR NULL ;
otherwise,
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
.I expr
\fB\e&\fR \fIexpr\fR
.ad
.sp .6
.RS 4n
Returns the first
.I expr
if neither
.I expr
is
.I NULL
or
.BR 0 ,
otherwise returns
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
.IR expr {
.BR = ,
\fB\e>\fR, \fB\e>=\fR, \fB\e<\fR, \fB\e<=\fR,
\fB!=\fR} \fIexpr\fR
.ad
.sp .6
.RS 4n
Returns the result of an integer comparison if both arguments are integers,
otherwise returns the result of a string comparison using the locale-specific
coalition sequence. The result of each comparison will be
.B 1
if the
specified relationship is
.BR TRUE ,
.B 0
if the relationship is
.BR FALSE .
.RE

.sp
.ne 2
.mk
.na
.I expr
{
.BR + ,
\fB\(mi\fR } \fIexpr\fR
.ad
.sp .6
.RS 4n
Addition or subtraction of integer-valued arguments.
.RE

.sp
.ne 2
.mk
.na
.I expr
{ \fB\e*\fR,
.BR / ,
\fB%\fR} \fIexpr\fR
.ad
.sp .6
.RS 4n
Multiplication, division, or remainder of the integer-valued arguments.
.RE

.sp
.ne 2
.mk
.na
.I expr
.B :
.I expr
.ad
.sp .6
.RS 4n
The matching operator
.B :
(colon) compares the first argument with the
second argument, which must be an internationalized basic regular expression
(BRE), except that all patterns are anchored to the beginning of the string.
That is, only sequences starting at the first character of a string are
matched by the regular expression. See
.BR regex (5)
and NOTES. Normally,
the
.B /usr/bin/expr
matching operator returns the number of bytes matched
and the
.B /usr/xpg4/bin/expr
matching operator returns the number of
characters matched (\fB0\fR on failure). If the second argument contains at
least one BRE sub-expression [\e(.\|.\|.\e)], the matching operator returns the
string corresponding to \e1.
.RE

.sp
.ne 2
.mk
.na
.I integer
.ad
.sp .6
.RS 4n
An argument consisting only of an (optional) unary minus followed by
digits.
.RE

.sp
.ne 2
.mk
.na
.I string
.ad
.sp .6
.RS 4n
A string argument that cannot be identified as an
.I integer
argument or
as one of the expression operator symbols.
.RE

.SS "Compatibility Operators (x86 only)"
.sp
.LP
The following operators are included for compatibility with INTERACTIVE UNIX
System only and are not intended to be used by non- INTERACTIVE UNIX System
scripts:
.sp
.ne 2
.mk
.na
.B index
.I string character-list
.ad
.sp .6
.RS 4n
Report the first position in which any one of the bytes in
.I character-list
matches a byte in
.IR string .
.RE

.sp
.ne 2
.mk
.na
.B length
.I string
.ad
.sp .6
.RS 4n
Return the length (that is, the number of bytes) of
.IR string .
.RE

.sp
.ne 2
.mk
.na
.B substr
.I string integer-1 integer-2
.ad
.sp .6
.RS 4n
Extract the substring of
.I string
starting at position
.IR integer-1
and of length
.I integer-2
bytes.  If
.I integer-1
has a value greater
than the number of bytes in
.IR string ,
.B expr
returns a null string.
If you try to extract more bytes than there are in string,
.B expr
returns
all the remaining bytes from
.IR string .
Results are unspecified if either
.I integer-1
or
.I integer-2
is a negative value.
.RE

.SH EXAMPLES
.LP
.B Example 1
Adding an integer to a shell variable
.sp
.LP
Add 1 to the shell variable
.BR a :

.sp
.in +2
.nf
example$ \fBa=`expr\| $a\| +\| 1`\fR
.fi
.in -2
.sp

.LP
.B Example 2
Returning a path name segment
.sp
.LP
The following example emulates
.BR basename (1),
returning the last segment
of the path name
.BR $a .
For
.B $a
equal to either \fB/usr/abc/file\fR
or just
.BR file ,
the example returns
.BR file .
(Watch out for \fB/\fR
alone as an argument:
.B expr
takes it as the division operator. See NOTES
below.)

.sp
.in +2
.nf
example$ \fBexpr $a : '.*/\e(.*\e)' \e| $a\fR
.fi
.in -2
.sp

.LP
.B Example 3
Using // characters to simplify the expression
.sp
.LP
Here is a better version of the previous example. The addition of the
.B //
characters eliminates any ambiguity about the division operator and
simplifies the whole expression.

.sp
.in +2
.nf
example$ \fBexpr //$a : '.*/\e(.*\e)'\fR
.fi
.in -2
.sp

.SS "/usr/bin/expr"
.LP
.B Example 4
Returning the number of bytes in a variable
.sp
.in +2
.nf
example$ \fBexpr "$VAR" : '.*'\fR
.fi
.in -2
.sp

.SS "/usr/xpg4/bin/expr"
.LP
.B Example 5
Returning the number of characters in a variable
.sp
.in +2
.nf
example$ \fBexpr "$VAR" : '.*'\fR
.fi
.in -2
.sp

.SH ENVIRONMENT VARIABLES
.sp
.LP
See
.BR environ (5)
for descriptions of the following environment variables
that affect the execution of
.BR expr :
.BR LANG ,
.BR LC_ALL ,
.BR LC_COLLATE ,
.BR LC_CTYPE ,
.BR LC_MESSAGES ,
and
.BR NLSPATH .
.SH EXIT STATUS
.sp
.LP
As a side effect of expression evaluation,
.B expr
returns the following
exit values:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 7n
.rt
If the expression is neither
.I NULL
nor
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
.B 1
.ad
.RS 7n
.rt
If the expression is either
.I NULL
or
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
.B 2
.ad
.RS 7n
.rt
For invalid expressions.
.RE

.sp
.ne 2
.mk
.na
.B >2
.ad
.RS 7n
.rt
An error occurred.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
_
CSIenabled
_
Interface StabilityStandard
.TE

.SH SEE ALSO
.sp
.LP
.BR basename (1),
.BR ed (1),
.BR sh (1),
.BR Intro (3),
.BR attributes (5),
.BR environ (5),
.BR regex (5),
.BR standards (5)
.SH DIAGNOSTICS
.sp
.ne 2
.mk
.na
.B syntax error
.ad
.RS 24n
.rt
Operator and operand errors.
.RE

.sp
.ne 2
.mk
.na
.B non-numeric argument
.ad
.RS 24n
.rt
Arithmetic is attempted on such a string.
.RE

.SH NOTES
.sp
.LP
After argument processing by the shell,
.B expr
cannot tell the
difference between an operator and an operand except by the value. If
.B $a
is an
.BR = ,
the command:
.sp
.in +2
.nf
example$ \fBexpr $a = '='\fR
.fi
.in -2
.sp

.sp
.LP
looks like:
.sp
.in +2
.nf
example$ \fBexpr = = =\fR
.fi
.in -2
.sp

.sp
.LP
as the arguments are passed to
.B expr
(and they are all taken as the
.B =
operator). The following works:
.sp
.in +2
.nf
example$ \fBexpr X$a = X=\fR
.fi
.in -2
.sp

.SS "Regular Expressions"
.sp
.LP
Unlike some previous versions,
.B expr
uses Internationalized Basic
Regular Expressions for all system-provided locales. Internationalized
Regular Expressions are explained on the
.BR regex (5)
manual page.
