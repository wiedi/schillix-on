'\" te
.\" Copyright 1989 AT&T
.\" Copyright (c) 2009 Sun Microsystems, Inc. All Rights Reserved.
.\" The contents of this file are subject to the terms of the Common Development and Distribution License (the "License").  You may not use this file except in compliance with the License. You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE or http://www.opensolaris.org/os/licensing.
.\"  See the License for the specific language governing permissions and limitations under the License. When distributing Covered Code, include this CDDL HEADER in each file and include the License file at usr/src/OPENSOLARIS.LICENSE.  If applicable, add the following below this CDDL HEADER,
.\" with the fields enclosed by brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
.TH as 1 "24 Aug 2009" "SunOS 5.11" "User Commands"
.SH NAME
as \- assembler
.SH SYNOPSIS
.SS "SPARC"
.LP
.nf
\fBas\fR [\fB-b\fR] [\fB-i\fR] [\fB-K\fR {pic,PIC}] [\fB-L\fR] [\fB-m\fR] [\fB-n\fR] [\fB-o\fR \fIoutfile\fR] 
     [\fB-P\fR] [\fB-D\fR\fIname\fR] [\fB-D\fR\fIname=def\fR] [\fB-I\fR\fIpath\fR] [\fB-U\fR\fIname\fR]... [\fB-q\fR] 
     [\fB-Q\fR\fIy\fR | \fIn\fR] [\fB-s\fR] [\fB-S\fR [\fIa\fR | \fIb\fR | \fIc\fR | \fIl\fR | \fIA\fR | \fIB\fR | \fIC\fR | \fIL\fR]] 
     [\fB-T\fR] [\fB-V\fR]
     [\fB-xarch=v7\fR | \fB-xarch=v8\fR | \fB-xarch=v8a\fR | \fB-xarch=v8plus\fR |
      \fB-xarch=v8plusa\fR | \fB-xarch=v8plusb\fR | \fB-xarch=v8plusd\fR |
      \fB-xarch=v8plusv\fR | \fB-xarch=v9\fR | \fB-xarch=v9a\fR |
      \fB-xarch=v9b\fR | \fB-xarch=v9d\fR | \fB-xarch=v9v\fR] 
     [\fB-xF\fR] [\fB-Y\fR \fIdirname\fR] \fIfilename\fR...
.fi

.SS "x86"
.LP
.nf
\fBas\fR [\fB-b\fR] [\fB-i\fR] [\fB-K\fR PIC] [\fB-L\fR] [\fB-m\fR] [\fB-n\fR] [\fB-o\fR \fIoutfile\fR] [\fB-P\fR] 
     [\fB-D\fR\fIname\fR] [\fB-D\fR\fIname=def\fR] [\fB-I\fR\fIpath\fR] [\fB-U\fR\fIname\fR]... [\fB-Q\fR\fIy\fR | \fIn\fR] 
     [\fB-s\fR] [\fB-S\fR [\fIa\fR | \fIb\fR | \fIc\fR | \fIl\fR | \fIA\fR | \fIB\fR | \fIC\fR | \fIL\fR]] [\fB-T\fR] [\fB-V\fR] 
     [\fB-xarch\fR=generic64 | \fB-xarch\fR=amd64] [\fB-Y\fR \fIdirname\fR] 
     [\fB-xmodel\fR= [ SMALL | KERNEL ]] \fIfilename\fR...
.fi

.SH DESCRIPTION
.sp
.LP
The \fBas\fR command creates object files from assembly language source files.
.SH OPTIONS
.SS "Common Options"
.sp
.LP
The following flags are common to both SPARC and x86. They can be specified in any order:
.sp
.ne 2
.mk
.na
\fB\fB-b\fR\fR
.ad
.RS 23n
.rt  
Generates extra symbol table information.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-i\fR\fR
.ad
.RS 23n
.rt  
Ignore line number information from preprocessor.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-K\fR \fBpic\fR | \fBPIC\fR\fR
.ad
.RS 23n
.rt  
Generates position-independent code. 
.RE

.sp
.ne 2
.mk
.na
\fB\fB-L\fR\fR
.ad
.RS 23n
.rt  
Saves all symbols, including temporary labels that are normally discarded to save space, in the ELF symbol table.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-m\fR\fR
.ad
.RS 23n
.rt  
Runs the \fBm4\fR(1) macro processor on the input to the assembler.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-n\fR\fR
.ad
.RS 23n
.rt  
Suppresses all the warnings while assembling.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-o\fR \fIoutfile\fR\fR
.ad
.RS 23n
.rt  
Puts the output of the assembly in \fIoutfile\fR. By default, the output file name is formed by removing the \fB\&.s\fR suffix, if there is one, from the input file name and appending a \fB\&.o\fR suffix.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-P\fR\fR
.ad
.RS 23n
.rt  
Runs \fBcpp\fR(1), the C preprocessor, on the files being assembled. The preprocessor is run separately on each input file, not on their concatenation. The preprocessor output is passed to the assembler.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-D\fR\fIname\fR\fR
.ad
.br
.na
\fB\fB-D\fR\fIname=def\fR\fR
.ad
.RS 23n
.rt  
When the \fB-P\fR option is in effect, these options are passed to the \fBcpp\fR(1) preprocessor without interpretation by the \fBas\fR command; otherwise, they are ignored.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-I\fR\fIpath\fR\fR
.ad
.RS 23n
.rt  
When the \fB-P\fR option is in effect, this option is passed to the \fBcpp\fR(1) preprocessor without interpretation by the \fBas\fR command; otherwise, it is ignored.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-U\fR\fIname\fR\fR
.ad
.RS 23n
.rt  
When the \fB-P\fR option is in effect, this option is passed to the \fBcpp\fR(1) preprocessor without interpretation by the \fBas\fR command; otherwise, it is ignored.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-Q\fR\fIy\fR | \fIn\fR\fR
.ad
.RS 23n
.rt  
If \fIy\fR is specified, this option produces the assembler version information in the comment section of the output object file. If \fIn\fR is specified, the information is suppressed.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-s\fR\fR
.ad
.RS 23n
.rt  
Places all stabs in the \fB\&.stabs\fR section. By default, stabs are placed in \fBstabs.excl\fR sections, which are stripped out by the static linker, \fBld\fR(1), during final execution. When the \fB-s\fR option is used, stabs remain in the final executable because \fB\&.stab\fR sections are not stripped by the static linker.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-S\fR[\fIa\fR|\fIb\fR|\fIc\fR|\fIl\fR|\fIA\fR|\fIB\fR|\fIC\fR|\fIL\fR]\fR
.ad
.RS 23n
.rt  
Produces a disassembly of the emitted code to the standard output. Adding each of the following characters to the \fB-S\fR option produces:
.sp
.ne 2
.mk
.na
\fB\fIa\fR\fR
.ad
.RS 5n
.rt  
disassembling with address
.RE

.sp
.ne 2
.mk
.na
\fB\fIb\fR\fR
.ad
.RS 5n
.rt  
disassembling with ".bof"
.RE

.sp
.ne 2
.mk
.na
\fB\fIc\fR\fR
.ad
.RS 5n
.rt  
disassembling with comments
.RE

.sp
.ne 2
.mk
.na
\fB\fIl\fR\fR
.ad
.RS 5n
.rt  
disassembling with line numbers
.RE

Capital letters turn the switch off for the corresponding option.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-T\fR\fR
.ad
.RS 23n
.rt  
This is a migration option for 4.\fIx\fR assembly files to be assembled on 5.\fIx\fR systems. With this option, the symbol names in 4.\fIx\fR assembly files are interpreted as 5.\fIx\fR symbol names.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-V\fR\fR
.ad
.RS 23n
.rt  
Writes the version number of the assembler being run on the standard error output.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-xF\fR\fR
.ad
.RS 23n
.rt  
Allows function reordering by the Performance Analyzer. If you compile with the \fB-xF\fR option, and then run the Performance Analyzer, you can generate a map file that shows an optimized order for the functions. The subsequent link to build the executable file can be directed to use that map file by using the linker \fB-M\fR \fImapfile\fR option. It places each function from the executable file into a separate section.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-Y\fR \fIdirname\fR\fR
.ad
.RS 23n
.rt  
Specify directory \fBm4\fR and/or \fBcm4def\fR.
.RE

.SS "Options for SPARC only"
.sp
.ne 2
.mk
.na
\fB\fB-q\fR\fR
.ad
.RS 18n
.rt  
Performs a quick assembly. When the \fB-q\fR option is used, many error checks are not performed. This option disables many error checks. Use of this option to assemble handwritten assembly language is not recommended.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-xarch=v7\fR\fR
.ad
.RS 18n
.rt  
This option instructs the assembler to accept instructions defined in the SPARC version 7 (V7) architecture. The resulting object code is in ELF format.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-xarch=v8\fR\fR
.ad
.RS 18n
.rt  
This option instructs the assembler to accept instructions defined in the SPARC-V8 architecture, less the quad-precision floating-point instructions. The resulting object code is in ELF format.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-xarch=v8a\fR\fR
.ad
.RS 18n
.rt  
This option instructs the assembler to accept instructions defined in the SPARC-V8 architecture, less the quad-precision floating-point instructions and less the \fIfsmuld\fR instruction. The resulting object code is in ELF format. This is the default choice of the \fB\fR\fB-xarch\fR\fB=\fR\fIoptions\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-xarch=v8plus\fR\fR
.ad
.RS 18n
.rt  
This option instructs the assembler to accept instructions defined in the SPARC-V9 architecture, less the quad-precision floating-point instructions. The resulting object code is in ELF format. It does not execute on a Solaris V8 system (a machine with a V8 processor). It   executes on a Solaris V8+ system. This combination is a SPARC 64-bit processor and a 32-bit OS.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-xarch=v8plusa\fR\fR
.ad
.RS 18n
.rt  
This option instructs the assembler to accept instructions defined in the SPARC-V9 architecture, less the quad-precision floating-point instructions, plus the instructions in the Visual Instruction Set (VIS). The resulting object code is in V8+ ELF format. It does not execute on a Solaris V8 system (a machine with a V8 processor). It executes on a Solaris V8+ system
.RE

.sp
.ne 2
.mk
.na
\fB\fB-xarch=v8plusb\fR\fR
.ad
.RS 18n
.rt  
This option enables the assembler to accept instructions defined in the SPARC-V9 architecture, plus the instructions in the Visual Instruction Set (VIS), with UltraSPARC-III extensions. The resulting object code is in V8+ ELF32 format. 
.RE

.sp
.ne 2
.mk
.na
\fB\fB-xarch=v8plusd\fR\fR
.ad
.RS 18n
.rt  
This option enables the assembler to accept instructions DEFIned in UltraSPARC Architecture 2009. The resulting object code is in V8+ ELF32 format.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-xarch=v8plusv\fR\fR
.ad
.RS 18n
.rt  
This option enables the assembler to accept instructions defined in UltraSPARC Architecture 2005, including the extensions dealing with the sun4v virtual machine model. The resulting object code is in V8+ ELF32 format.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-xarch=v9\fR\fR
.ad
.RS 18n
.rt  
This option limits the instruction set to the SPARC-V9 architecture. The resulting .o object files are in 64-bit ELF format and can only be linked with other object files in the same format. The resulting executable can only be run on a 64-bit SPARC processor running 64-bit Solaris with the 64-bit kernel.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-xarch=v9a\fR\fR
.ad
.RS 18n
.rt  
This option limits the instruction set to the SPARC-V9 architecture, adding the Visual Instruction Set (VIS) and extensions specific to UltraSPARC processors. The resulting .o object files are in 64-bit ELF format and can only be linked with other object files in the same format. The resulting executable can only be run on a 64-bit SPARC processor running 64-bit Solaris with the 64-bit kernel.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-xarch=v9b\fR\fR
.ad
.RS 18n
.rt  
This option enables the assembler to accept instructions defined in the SPARC-V9 architecture, plus the Visual Instruction Set (VIS), with UltraSPARC-III extensions. The resulting .o object files are in ELF64 format and can only be linked with other V9 object files in the same format. The resulting executable can only be run on a 64-bit processor running a 64-bit Solaris operating environment with the 64-bit kernel. 
.RE

.sp
.ne 2
.mk
.na
\fB\fB-xarch=v9d\fR\fR
.ad
.RS 18n
.rt  
This option enables the assembler to accept instructions defined in UltraSPARC Architecture 2009. The resulting object code is in ELF64 format.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-xarch=v9v\fR\fR
.ad
.RS 18n
.rt  
This option enables the assembler to accept instructions defined in UltraSPARC Architecture 2005, including the extensions dealing with the sun4v virtual machine model. The resulting object code is in ELF64 format.
.RE

.SS "Options for x86 Only"
.sp
.ne 2
.mk
.na
\fB\fB-xarch>=generic64\fR\fR
.ad
.RS 28n
.rt  
Limits the instruction set to AMD64. The resulting object code is in 64-bit ELF format.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-xarch=amd64\fR\fR
.ad
.RS 28n
.rt  
Limits the instruction set to AMD64. The resulting object code is in 64-bit ELF format.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-xmodel\fR=[SMALL | KERNEL]\fR
.ad
.RS 28n
.rt  
For AMD64 only, generate \fBR_X86_64_32S\fR relocatable type for static data access under \fBKERNEL\fR. Otherwise, generate \fBR_X86_64_32\fR under \fBSMALL\fR. \fBSMALL\fR is the default.
.RE

.SH OPERANDS
.sp
.LP
The following operand is supported:
.sp
.ne 2
.mk
.na
\fB\fIfilename\fR\fR
.ad
.RS 12n
.rt  
Assembly language source file
.RE

.SH ENVIRONMENT VARIABLES
.sp
.ne 2
.mk
.na
\fB\fBTMPDIR\fR\fR
.ad
.RS 10n
.rt  
The \fBas\fR command normally creates temporary files in the directory \fB/tmp\fR. Another directory can be specified by setting the environment variable \fBTMPDIR\fR to the chosen directory. (If \fBTMPDIR\fR is not a valid directory, then \fBas\fR uses \fB/tmp\fR).
.RE

.SH FILES
.sp
.LP
By default, \fBas\fR creates its temporary files in \fB/tmp\fR.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWsprot
.TE

.SH SEE ALSO
.sp
.LP
\fBcpp\fR(1),\fBld\fR(1), \fBm4\fR(1), \fBnm\fR(1), \fBstrip\fR(1), \fBtmpnam\fR(3C), \fBa.out\fR(4), \fBattributes\fR(5)
.sp
.LP
\fBdbx\fR and \fBanalyzer\fR manual pages available with Sun Studio documentation.
.SH NOTES
.sp
.LP
If the \fB-m\fR option, which invokes the \fBm4\fR(1) macro processor, is used, keywords for \fBm4\fR cannot be used as symbols (variables, functions, labels) in the input file, since \fBm4\fR cannot determine which keywords are assembler symbols and which keywords are real \fBm4\fR macros.
.sp
.LP
Whenever possible, access the assembler through a compilation system interface program.
.sp
.LP
All undefined symbols are treated as global.
