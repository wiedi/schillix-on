'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH kmdb 1 "3 May 2007" "SunOS 5.11" "User Commands"
.SH NAME
kmdb \- in situ kernel debugger
.SH SYNOPSIS
.SS "Boot-time Loading"
.sp
.LP
SPARC
.LP
.nf
\fBok boot\fR [\fIdevice-specifier\fR] \fB-k\fR [\fB-d\fR] [\fIboot-flags\fR]
.fi

.LP
.nf
\fBok boot\fR [\fIdevice-specifier\fR] kmdb [\fB-d\fR] [\fIboot-flags\fR]
.fi

.sp
.LP
x86
.LP
.nf
\fBkernel$\fR \fB/platform/i86pc/kernel/$ISADIR/unix\fR \fB-k\fR [\fB-d\fR] [\fIboot-flags\fR]
.fi

.SS "Runtime Loading"
.LP
.nf
\fBmdb\fR \fB-K\fR
.fi

.SH DESCRIPTION
.sp
.LP
\fBkmdb\fR is an interactive kernel debugger which implements the user
interface and functionality of
.BR mdb (1)
in a live kernel context.
\fBkmdb\fR provides features that allow for the control of kernel execution
and for the inspection and modification of live kernel state.
.B kmdb
can
be loaded at the beginning of a boot session or after the system is
booted.
.sp
.LP
This man page describes the features and functionality that are unique to
\fBkmdb\fR or different in \fBkmdb\fR as compared to
.BR mdb (1).
For more
information on
.BR mdb (1)
or further details on the features and
functionality implemented by
.BR kmdb ,
see the
.BR mdb (1)
man page and
the
.IR "Solaris Modular Debugger Guide" .
.SS "Loading and Unloading"
.sp
.ne 2
.mk
.na
.B Boot-time Loading
.ad
.RS 21n
.rt
When requested, the kernel runtime linker (\fBkrtld\fR) loads \fBkmdb\fR
prior to the transfer of control to the kernel. If the
.B -d
flag is
used, the debugger gains control of the system prior to the execution of the
initial function in the 'unix' object. If
.B -d
.RB "is not used," " kmdb"
is loaded but does not gain control until such time as it is explicitly
entered. See the Debugger Entry section below. For a list of the boot
commands which cause
.B kmdb
to be loaded at boot, see the SYNOPSIS
section above.
.sp
Boot-loaded
.B kmdb
can be unloaded only by means of a system reboot.
.sp
Some features of
.B kmdb
rely on the presence of kernel services and are
not immediately available to boot-loaded
.BR kmdb .
In particular, the
loading and unloading of dmods is not available until the module subsystem
is initialized. Requests are queued until they can be processed. Similarly,
translation of virtual addresses to physical addresses is not be available
until the VM system has been initialized. Attempted translations fail until
translation facilities are available.
.RE

.sp
.ne 2
.mk
.na
.B Run-time Loading
.ad
.RS 21n
.rt
\fBkmdb\fR can also be loaded after the system has booted, using the
\fB-K\fR flag to
.BR mdb (1).
When loaded in this fashion, it will
immediately gain control of the system. Run-time-loaded
.B kmdb
can be
unloaded using the
.B -U
flag to
.BR mdb (1)
or from within the debugger
with the
.B -u
flag to the
.BR "::quit dcmd" .
.RE

.sp
.ne 2
.mk
.na
.B Terminal types
.ad
.RS 21n
.rt
When loaded,
.B kmdb
attempts to determine the proper terminal type in
use on the system console. If the system being debugged has an attached
keyboard and local display that are both used for the system console,
\fBkmdb\fR uses the terminal type appropriate for the machine: 'sun' for
SPARC; 'sun-color' for x86. When a serial console is in use, boot-loaded
\fBkmdb\fR defaults to a terminal type 'vt100'. Run-time-loaded \fBkmdb\fR
defaults to the terminal type requested by
.BR mdb (1).
.BR mdb (1)
requests the terminal type specified by the value of the
.BR TERM
environment variable unless overridden by the
.B -T
flag. \fB::term\fR
can be used to view the current terminal type.
.RE

.SS "Debugger Entry"
.sp
.LP
Debugger entry can be requested explicitly or implicitly. Implicit entry,
encountered when breakpoints or other execution control features are used,
is discussed in the
.B "Execution Control"
section.
.sp
.LP
The primary means for explicit debugger entry is with the keyboard abort
sequence for systems with local consoles and the BREAK character for those
with serial consoles. The abort sequence is STOP-A or Shift-Pause for SPARC
systems with local consoles, and F1-A or Shift-Pause for x86 systems with
local consoles. See
.BR kbd (1)
for a discussion of the abort sequence and
for instructions on disabling it.
.sp
.LP
A second way to request entry into the debugger is with the
.BR mdb (1)
command. Invocations of
.BR mdb (1)
with the
.B -K
flag after the
debugger is loaded trigger debugger entry.
.sp
.LP
If the kernel panics and
.B kmdb
is loaded, by default, the panic
routine enters
.B kmdb
for live debugging. If a dump device is specified,
and you enter
.BR ::cont ,
the debugger exits and a crash dump is
performed. To prevent the kernel from entering
.B kmdb
when panicking,
you can set the
.B nopanicdebug
variable to
.BR 1 .
Set the
\fBnopanicdebug\fR variable to \fB1\fR using \fBkmdb\fR or including the
following a line in
.BR /etc/system :
.sp
.in +2
.nf
set nopanicdebug = 1
.fi
.in -2
.sp

.sp
.LP
This can be useful if you want to keep
.B kmdb
loaded, but always want a
panic to trigger a crash dump without entering the debugger.
.SS "Execution Control"
.sp
.LP
For the most part, the execution control facilities provided by \fBkmdb\fR
for the kernel mirror those provided by the
.BR mdb (1)
process target.
Breakpoints
.RB ( ::bp ),
watchpoints
.RB ( ::wp ),
.BR ::continue ,
and
the various flavors of
.B ::step
can be used.
.sp
.LP
In contrast to the unlimited user process watchpoints supplied by the
kernel,
.B kmdb
is restricted to a set of CPU watchpoints that limit the
number, size, and type of watchpoints allowed. The
.B ::wp
command does
not allow a watchpoint to be created if it is incompatible with the
watchpoints supported by the hardware.
.SS "Debugger modules (dmods)"
.sp
.LP
As with
.BR mdb (1),
\fBkmdb\fR is installed with a number of
subsystem-specific debugger modules, or dmods. The dmods are loaded and
unloaded automatically with the loading and unloading of the subsystems that
they support. The dmods can also be explicitly loaded and unloaded using
\fB::load\fR and
.BR ::unload .
.sp
.LP
\fBkmdb\fR uses kernel facilities to load and unload dmods and must resume
system execution to perform each requested action. When a dmod load or
unload is complete, the system is stopped and the debugger is automatically
re-entered. For a dmod load, processing is completed when the load of a
requested dmod succeeds or fails. Status messages are provided in either
case.
.SS "Processor-specific functionality"
.sp
.LP
Some functionality is specific to an individual processor type. An example
of such functionality is the branch tracing provided by various x86
processors. Access to these processor-specific features is provided with
processor-specific dcmds that are present only on systems that support them.
The availability of processor-specific support is indicated in the output of
the
.BR "::status dcmd" .
The debugger relies on the kernel to determine the
processor type. Even though the debugger might provide support for a given
processor type, the support is not exposed until the kernel has progressed
to the point at which processor identification has completed.
.SS "Kernel Macros"
.sp
.LP
The debugger provides access to a set of macros that are precompiled into
the debugger. Only the precompiled macros are available . Unlike with
.BR mdb (1),
the
.B "$< dcmd"
may not be used to load macros from
arbitrary locations. Use the
.B $M
command to list the available
macros.
.SS "Built-in dcmds"
.sp
.LP
This section lists dcmds that are unique to
.B kmdb
or those with
behavior that differs in
.B kmdb
as compared to
.BR mdb (1).
.sp
.ne 2
.mk
.na
\fB[\fIaddress\fR]\fB::bp [+/-dDestT]\fR [\fB-c\fR \fIcmd\fR]
[\fB-n\fR \fIcount\fR] \fIsym\fR .\|.\|.\fR
.ad
.br
.na
\fIaddress\fR \fB:b [\fIcmd\fR \fB\&.\|.\|.]\fR
.ad
.sp .6
.RS 4n
Set a breakpoint at the specified locations. The
.B ::bp
dcmd sets a
breakpoint at each address or symbol specified, including an optional
address specified by an explicit expression preceding the dcmd, and each
string or immediate value following the dcmd. The arguments can be symbol
names or immediate values denoting a particular virtual address of
interest.
.sp
If a symbol name is specified, the name may refer to a symbol that cannot
yet be evaluated. It might consist of an object name and function name in a
load object that has not yet been opened. In such a case, the breakpoint is
deferred and is not active in the target until an object matching the given
name is loaded. The breakpoint is automatically enabled when the load object
is opened.
.sp
The
.BR -d ,
.BR -D ,
.BR -e ,
.BR -s ,
.BR -t ,
.BR -T ,
.BR -c ,
and
.B -n
options have the same meaning as they do for the
.BR ::evset
dcmd. See
.BR mdb (1)
for a description of
.BR ::evset .
If the
.BR :b
form of the dcmd is used, a breakpoint is set only at the virtual address
specified by the expression preceding the dcmd. The arguments following the
\fB:b\fR dcmd are concatenated together to form the callback string. If this
string contains meta-characters, it must be quoted.
.RE

.sp
.ne 2
.mk
.na
\fB::branches\fR [\fB-v\fR]\fR
.ad
.br
.na
.B (x86 only)
.ad
.sp .6
.RS 4n
Display the last branches taken by the CPU. This dcmd is supported only on
x86 systems, and is available only when processor-specific support is
detected and enabled. The number and type of branches displayed is dependent
on the capabilities of the branch tracing facilities provided by the CPU.
When the
.B -v
option is used, the instructions prior to a given branch
are displayed.
.RE

.sp
.ne 2
.mk
.na
\fB[\fIfunction\fR] \fB::call\fR [\fIarg\fR [\fIarg\fR .\|.\|.]]\fR
.ad
.sp .6
.RS 4n
Call the specified function using the specified arguments. The called
function must be listed as a function in the symbol table for a loaded
module. String arguments are passed by reference. When the call completes,
the return value of the function is displayed.
.sp
This dcmd must be used with extreme caution. The kernel will not be resumed
when the call is made. The function being called may not make any
assumptions regarding the availability of any kernel services, and must not
perform operations or calls that may block. The user must also beware of any
side-effects introduced by the called function, as kernel stability might be
affected.
.RE

.sp
.ne 2
.mk
.na
\fB[\fIaddr\fR] \fB::cpuregs\fR [\fB-c\fR \fIcpuid\fR]\fR
.ad
.sp .6
.RS 4n
Display the current general purpose register set for the specified CPU, in
the format used by
.BR ::regs .
.RE

.sp
.ne 2
.mk
.na
\fB[\fIaddr\fR] \fB::cpustack\fR [\fB-c\fR \fIcpuid\fR]\fR
.ad
.sp .6
.RS 4n
Print a C stack backtrace for the specified CPU. The backtrace displayed is
for the point at which the specified CPU entered or was stopped by the
debugger.
.RE

.sp
.ne 2
.mk
.na
\fIaddr\fR[,\fIlen\fR] \fB::in\fR [\fB-L\fR \fIlen\fR]\fR
.ad
.br
.na
.B (x86 only)
.ad
.sp .6
.RS 4n
Read
.I len
bytes from the I/O port specified by
.IR addr .
The value
of the
.B -L
option, if provided, takes precedence over the value of the
repeat count. The read length must be 1, 2, or 4 bytes, and the port address
must have the same alignment as the length.
.RE

.sp
.ne 2
.mk
.na
\fIaddr\fR[,\fIlen\fR] \fB::out\fR [\fB-L\fR \fIlen\fR] \fIvalue\fR
.ad
.br
.na
.B (x86 only)
.ad
.sp .6
.RS 4n
Write value to the len-byte I/O port specified by
.IR addr .
The value of
the
.B -L
option, if provided, takes precedence over the value of the
repeat count. The write length must be 1, 2, or 4 bytes and the port address
must have the same alignment as the length.
.RE

.sp
.ne 2
.mk
.na
\fB::quit\fR [\fB-u\fR]\fR
.ad
.br
.na
.B $q
.ad
.sp .6
.RS 4n
Causes the debugger to exit. When the
.B -u
option is used, the system
is resumed and the debugger is unloaded. The
.B -u
option may not be used
if the debugger was loaded at boot. When the
.B -u
option is not used,
SPARC systems will exit to the boot PROM
.B ok
.RB "prompt. The" " go"
command can be used to re-enter the debugger. On x86 systems, a prompt is
displayed that requests permission to reboot the machine.
.RE

.sp
.ne 2
.mk
.na
\fB::step [over|out|branch]\fR
.ad
.sp .6
.RS 4n
Step the target one instruction. The optional
.B over
argument is used
to step over subroutine calls. When the optional
.B out
argument is
specified, the target program continues until control returns from the
current function.
.sp
The optional
.B branch
argument is available only on x86 systems when
processor-specific support is detected and enabled. When \fB::step branch\fR
is specified, the target program continues until the next branching
instruction is encountered.
.sp
On SPARC systems, the
.B "::step dcmd"
may not be used to step 'ta'
instructions. Similarly, it may not be used on x86 systems to step 'int'
instructions. If the step results in a trap that cannot be resolved by the
debugger, a message to that effect is printed and the step will fail.
.RE

.sp
.ne 2
.mk
.na
.B cpuid::switch
.ad
.br
.na
.B cpuid:x
.ad
.sp .6
.RS 4n
Use the specified CPU as the representative. Stack traces, general purpose
register dumps, and similar functionality use the new representative CPU as
the data source. Full execution control functionality is available on the
new representative CPU.
.RE

.sp
.ne 2
.mk
.na
.B ::term
.ad
.sp .6
.RS 4n
Display the current terminal type.
.RE

.sp
.ne 2
.mk
.na
\fIaddr\fB[,\fIlen\fR]\fB::wp [+/-dDestT]\fR [\fB-rwx\fR]
[\fB-pi\fR] [\fB-n\fR \fIcount\fR] [\fB-c\fR \fIcmd\fR]\fR
.ad
.br
.na
\fIaddr\fR[,\fIlen\fR]\fB:a [\fIcmd\fR \fB\&.\|.\|.]\fR
.ad
.br
.na
\fIaddr\fR[,\fIlen\fR]\fB:p [\fIcmd\fR \fB\&.\|.\|.]\fR
.ad
.br
.na
\fIaddr\fR[,\fIlen\fR]\fB:w [\fIcmd\fR \fB\&.\|.\|.]\fR
.ad
.sp .6
.RS 4n
Set a watchpoint at the specified address, interpreted by default as a
virtual address. If the
.B -p
option is used, the address is interpreted
as a physical address. On x86 platforms, watchpoints can be set on I/O ports
using the
.B -i
option. When the
.B -i
option is used, the address is
interpreted as that of an I/O port.
.sp
The length in bytes of the watched region can be set by specifying an
optional repeat count preceding the dcmd. If no length is explicitly set,
the default is one byte. The
.B ::wp
dcmd allows the watchpoint to be
configured to trigger on any combination of read (\fB-r\fR option), write
(\fB-w\fR option), or execute (\fB-x\fR option) access.
.sp
The
.BR -d ,
.BR -D ,
.BR -e ,
.BR -s ,
.BR -t ,
.BR -T ,
.BR -c ,
and
.B -n
options have the same meaning as they do for the
.BR ::evset
dcmd. See
.BR mdb (1)
for a description of
.BR ::evset .
The
.B :a
dcmd
sets a read access watchpoint at the specified address. The
.B :p
dcmd
sets an execute access watchpoint at the specified address. The \fB:w\fR
dcmd sets a write access watchpoint at the specified address. The arguments
following the
.BR :a ,
.BR :p ,
and
.B :w
dcmds are concatenated
together to form the callback string. If the string contains
meta-characters, it must be quoted.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWckr (debugger)
_
SUNWmdbr (dmods)
_
Interface StabilityEvolving
.TE

.SH SEE ALSO
.sp
.LP
.BR mdb (1),
.BR boot (1M),
.BR dumpadm (1M),
.BR kernel (1M),
.BR system (4),
.BR attributes (5)
.sp
.LP
.I Solaris Modular Debugger Guide
.SS "SPARC Only"
.sp
.LP
.BR kbd (1)
.SH NOTES
.SS "Limitations on Memory Available to the Debugger"
.sp
.LP
The memory region available to the debugger is allocated when the debugger
is loaded, and is fixed at that point. If dcmds attempt to allocate more
memory than is available, they will, if possible, be terminated. The
debugger will attempt to recover gracefully from an out-of-memory situation,
but may be unable to, and may be forced to terminate the system. This
constraint is especially acute on 32-bit x86 systems.
.SS "Performance Impact"
.sp
.LP
System performance will be negatively impacted by the loading of
.BR kmdb ,
as the debugger will consume kernel memory and other limited
system resources.
