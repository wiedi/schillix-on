'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH priocntl 1 "1 Apr 2008" "SunOS 5.11" "User Commands"
.SH NAME
priocntl \- display or set scheduling parameters of specified process(es)
.SH SYNOPSIS
.LP
.nf
\fBpriocntl\fR \fB-l\fR
.fi

.LP
.nf
\fBpriocntl\fR \fB-d\fR [\fB-i\fR \fIidtype\fR] [\fIidlist\fR]
.fi

.LP
.nf
\fBpriocntl\fR \fB-s\fR [\fB-c\fR \fIclass\fR] [\fIclass-specific\fR \fIoptions\fR]
     [\fB-i\fR \fIidtype\fR] [\fIidlist\fR]
.fi

.LP
.nf
\fBpriocntl\fR \fB-e\fR [\fB-c\fR \fIclass\fR] [\fIclass-specific\fR \fIoptions\fR] \fIcommand\fR
     [\fIargument(s)\fR]
.fi

.SH DESCRIPTION
.sp
.LP
The
.B priocntl
command displays or sets scheduling parameters of the
specified process(es). It can also be used to display the current
configuration information for the system's process scheduler or execute a
command with specified scheduling parameters.
.sp
.LP
Processes fall into distinct classes with a separate scheduling policy
applied to each class. The process classes currently supported are the
real-time class, time-sharing class, interactive class, fair-share class,
and the fixed priority class. The characteristics of these classes and the
class-specific options they accept are described below in the USAGE section
under the headings
.BR "Real-Time Class" ,
.BR "Time-Sharing Class" ,
.BR "Inter-Active Class" ,
.BR "Fair-Share Class" ,
and \fBFixed-Priority
Class\fR. With appropriate permissions, the
.B priocntl
command can
change the class and other scheduling parameters associated with a running
process.
.sp
.LP
In the default configuration, a runnable real-time process runs before any
other process. Therefore, inappropriate use of real-time processes can have
a dramatic negative impact on system performance.
.sp
.LP
If an
.I idlist
is present, it must appear last on the command line and
the elements of the list must be separated by white space. If no
\fIidlist\fR is present, an \fIidtype\fR argument of
.BR pid ,
.BR ppid ,
.BR pgid ,
.BR sid ,
.BR taskid ,
.BR class ,
.BR uid ,
.BR gid ,
.BR projid ,
or
.B zoneid
specifies the process
.BR ID ,
parent process
.BR ID ,
process group
.BR ID ,
session
.BR ID ,
task
.BR ID ,
class,
user
.BR ID ,
group
.BR ID ,
project
.BR ID ,
or zone
.BR ID ,
respectively, of the
.B priocntl
command itself.
.sp
.LP
The command
.sp
.in +2
.nf
\fBpriocntl -d [-i \fIidtype\fR] [\fIidlist\fR]\fR
.fi
.in -2
.sp

.sp
.LP
displays the class and class-specific scheduling parameters of the
process(es) specified by
.I idtype
and
.IR idlist .
.sp
.LP
The command
.sp
.in +2
.nf
\fBpriocntl -s [-c \fIclass\fR] [\fIclass-specific options\fR] \e
     [-i \fIidtype\fR] [\fIidlist\fR]\fR
.fi
.in -2
.sp

.sp
.LP
sets the class and class-specific parameters of the specified processes to
the values given on the command line. The
.B -c
\fIclass\fR option
specifies the class to be set. (The valid
.I class
arguments are
.BR RT
for real-time,
.B TS
for time-sharing,
.B IA
for inter-active,
\fBFSS\fR for fair-share, or \fBFX\fR for fixed-priority.)
.sp
.LP
The class-specific parameters to be set are specified by the class-specific
options as explained under the appropriate heading below. If the \fB-c\fR
\fIclass\fR option is omitted, \fIidtype\fR and \fIidlist\fR must specify a
set of processes which are all in the same class, otherwise an error
results. If no class-specific options are specified, the process's
class-specific parameters are set to the default values for the class
specified by
.B -c
\fIclass\fR (or to the default parameter values for
the process's current class if the
.B -c
\fIclass\fR option is also
omitted).
.sp
.LP
In order to change the scheduling parameters of a process using
\fBpriocntl\fR the real or effective user \fBID\fR (respectively, groupID)
of the user invoking
.B priocntl
must match the real or effective user
\fBID\fR (respectively, groupID) of the receiving process or the effective
user
.B ID
of the user must be super-user. These are the minimum
permission requirements enforced for all classes. An individual class can
impose additional permissions requirements when setting processes to that
class or when setting class-specific scheduling parameters.
.sp
.LP
When
.I idtype
and
.I idlist
specify a set of processes,
\fBpriocntl\fR acts on the processes in the set in an
implementation-specific order. If
.B priocntl
encounters an error for one
or more of the target processes, it can or cannot continue through the set
of processes, depending on the nature of the error.
.sp
.LP
If the error is related to permissions,
.B priocntl
prints an error
message and then continues through the process set, resetting the parameters
for all target processes for which the user has appropriate permissions. If
\fBpriocntl\fR encounters an error other than permissions, it does not
continue through the process set but prints an error message and exits
immediately.
.sp
.LP
A special
.B sys
scheduling class exists for the purpose of scheduling
the execution of certain special system processes (such as the swapper
process). It is not possible to change the class of any process to
.BR sys .
In addition, any processes in the
.B sys
class that are
included in the set of processes specified by
.I idtype
and
.IR idlist
are disregarded by
.BR priocntl .
For example, if
.I idtype
were
.BR uid ,
an
.I idlist
consisting of a zero would specify all processes
with a
.B UID
of
.BR 0 ,
except processes in the
.B sys
class and (if
changing the parameters using the
.B -s
option) the
.B init
process.
.sp
.LP
The
.B init
process (process
.BR "ID 1" )
is a special case. In
order for the
.B priocntl
command to change the class or other scheduling
parameters of the
.B init
process,
.I idtype
must be
.B pid
and
\fIidlist\fR must be consist of only a
.BR 1 .
The
.B init
process can
be assigned to any class configured on the system, but the time-sharing
class is almost always the appropriate choice. Other choices can be highly
.RI "undesirable; see the" " System Administration Guide: Basic Administration"
for more information.
.sp
.LP
The command
.sp
.in +2
.nf
\fBpriocntl -e [-c \fIclass\fB]\fB [\fIclass-specific options\fR] \fIcommand\fR \e
     [\fIargument.\|.\|.\fR]\fR
.fi
.in -2
.sp

.sp
.LP
executes the specified command with the class and scheduling parameters
specified on the command line (\fIarguments\fR are the arguments to the
command). If the
.B -c
\fIclass\fR option is omitted the command is run
in the user's current class.
.SH OPTIONS
.sp
.LP
The following options are supported:
.sp
.ne 2
.mk
.na
\fB-c\fR \fIclass\fR
.ad
.RS 13n
.rt
Specifies the
.I class
to be set. (The valid
.I class
arguments are
\fBRT\fR for real-time, \fBTS\fR for time-sharing, \fBIA\fR for
inter-active,
.B FSS
for fair-share, or
.B FX
for fixed-priority.) If
the specified class is not already configured, it is automatically
configured.
.RE

.sp
.ne 2
.mk
.na
.B -d
.ad
.RS 13n
.rt
Displays the scheduling parameters associated with a set of processes.
.RE

.sp
.ne 2
.mk
.na
.B -e
.ad
.RS 13n
.rt
Executes a specified command with the class and scheduling parameters
associated with a set of processes.
.RE

.sp
.ne 2
.mk
.na
\fB-i\fR \fIidtype\fR
.ad
.RS 13n
.rt
This option, together with the
.I idlist
arguments (if any), specifies
one or more processes to which the
.B priocntl
command is to apply. The
interpretation of
.I idlist
depends on the value of
.IR idtype .
If the
.B -i
.I idtype
option is omitted when using the
.B -d
or
.BR -s
options the default
.I idtype
of
.B pid
is assumed.
.sp
The valid
.I idtype
arguments and corresponding interpretations of
\fIidlist\fR are as follows:
.sp
.ne 2
.mk
.na
.B -i all
.ad
.RS 13n
.rt
The
.B priocntl
command applies to all existing processes. No
\fIidlist\fR should be specified (if one is specified, it is ignored). The
permission restrictions described below still apply.
.RE

.sp
.ne 2
.mk
.na
.B -i ctid
.ad
.RS 13n
.rt
idlist is a list of process contract IDs. The
.B priocntl
command
applies to all processes with a process contract ID equal to an ID from the
list.
.RE

.sp
.ne 2
.mk
.na
.B -i class
.ad
.RS 13n
.rt
\fIidlist\fR consists of a single class name (\fBRT\fR for real-time,
\fBTS\fR for time-sharing, \fBIA\fR for inter-active, \fBFSS\fR for
fair-share, or
.B FX
for fixed-priority). The
.B priocntl
command
applies to all processes in the specified class.
.RE

.sp
.ne 2
.mk
.na
.B -i gid
.ad
.RS 13n
.rt
\fIidlist\fR is a list of group \fBID\fRs. The \fBpriocntl\fR command
applies to all processes with an effective group
.B ID
equal to an
\fBID\fR from the list.
.RE

.sp
.ne 2
.mk
.na
.B -i pgid
.ad
.RS 13n
.rt
\fIidlist\fR is a list of process group \fBID\fRs. The \fBpriocntl\fR
command applies to all processes in the specified process groups.
.RE

.sp
.ne 2
.mk
.na
.B -i pid
.ad
.RS 13n
.rt
\fIidlist\fR is a list of process \fBID\fRs. The \fBpriocntl\fR command
applies to the specified processes.
.RE

.sp
.ne 2
.mk
.na
.B -i ppid
.ad
.RS 13n
.rt
\fIidlist\fR is a list of parent process \fBID\fRs. The \fBpriocntl\fR
command applies to all processes whose parent process
.B ID
is in the
list.
.RE

.sp
.ne 2
.mk
.na
.B -i projid
.ad
.RS 13n
.rt
\fIidlist\fR is a list of project \fBID\fRs. The \fBpriocntl\fR command
applies to all processes with an effective project
.B ID
equal to an
\fBID\fR from the list.
.RE

.sp
.ne 2
.mk
.na
.B -i sid
.ad
.RS 13n
.rt
\fIidlist\fR is a list of session \fBID\fRs. The \fBpriocntl\fR command
applies to all processes in the specified sessions.
.RE

.sp
.ne 2
.mk
.na
.B -i taskid
.ad
.RS 13n
.rt
\fIidlist\fR is a list of task \fBID\fRs. The \fBpriocntl\fR command
applies to all processes in the specified tasks.
.RE

.sp
.ne 2
.mk
.na
.B -i uid
.ad
.RS 13n
.rt
\fIidlist\fR is a list of user \fBID\fRs. The \fBpriocntl\fR command
applies to all processes with an effective user
.B ID
equal to an
\fBID\fR from the list.
.RE

.sp
.ne 2
.mk
.na
.B -i zoneid
.ad
.RS 13n
.rt
\fIidlist\fR is a list of zone \fBID\fRs. The \fBpriocntl\fR command
applies to all processes with an effective zone
.B ID
equal to an
\fBID\fR from the list.
.RE

.RE

.sp
.ne 2
.mk
.na
.B -l
.ad
.RS 13n
.rt
Displays a list of the classes currently configured in the system along
with class-specific information about each class. The format of the
class-specific information displayed is described under USAGE.
.RE

.sp
.ne 2
.mk
.na
.B -s
.ad
.RS 13n
.rt
Sets the scheduling parameters associated with a set of processes.
.RE

.sp
.LP
The valid class-specific options for setting real-time parameters are:
.sp
.ne 2
.mk
.na
\fB-p\fR \fIrtpri\fR
.ad
.RS 21n
.rt
Sets the real-time priority of the specified process(es) to
.IR rtpri .
.RE

.sp
.ne 2
.mk
.na
\fB-t\fR \fItqntm\fR [\fB-r\fR \fIres\fR]\fR
.ad
.RS 21n
.rt
Sets the time quantum of the specified process(es) to
.IR tqntm .
You can
optionally specify a resolution as explained below.
.RE

.sp
.ne 2
.mk
.na
\fB-q\fR \fItqsig\fR
.ad
.RS 21n
.rt
Sets the real-time time quantum signal of the specified process(es) to
.IR tqsig .
.RE

.sp
.LP
The valid class-specific options for setting time-sharing parameters are:
.sp
.ne 2
.mk
.na
\fB-m\fR \fItsuprilim\fR
.ad
.RS 16n
.rt
Sets the user priority limit of the specified process(es) to
.IR tsuprilim .
.RE

.sp
.ne 2
.mk
.na
\fB-p\fR \fItsupri\fR
.ad
.RS 16n
.rt
Sets the user priority of the specified process(es) to
.IR tsupri .
.RE

.sp
.LP
The valid class-specific options for setting inter-active parameters are:
.sp
.ne 2
.mk
.na
\fB-m\fR \fIiauprilim\fR
.ad
.RS 16n
.rt
Sets the user priority limit of the specified process(es) to
.IR iauprilim .
.RE

.sp
.ne 2
.mk
.na
\fB-p\fR \fIiaupri\fR
.ad
.RS 16n
.rt
Sets the user priority of the specified process(es) to
.IR iaupri .
.RE

.sp
.LP
The valid class-specific options for setting fair-share parameters are:
.sp
.ne 2
.mk
.na
\fB-m\fR \fIfssuprilim\fR
.ad
.RS 17n
.rt
Sets the user priority limit of the specified process(es) to
.IR fssuprilim .
.RE

.sp
.ne 2
.mk
.na
\fB-p\fR \fIfssupri\fR
.ad
.RS 17n
.rt
Sets the user priority of the specified process(es) to
.IR fssupri .
.RE

.sp
.LP
The valid class-specific options for setting fixed-priority parameters
are:
.sp
.ne 2
.mk
.na
\fB-m\fR \fIfxuprilim\fR
.ad
.RS 16n
.rt
Sets the user priority limit of the specified process(es) to
.IR fxuprilim .
.RE

.sp
.ne 2
.mk
.na
\fB-p\fR \fIfxupri\fR
.ad
.RS 16n
.rt
Sets the user priority of the specified process(es) to
.IR fxupri .
.RE

.sp
.ne 2
.mk
.na
\fB-t\fR \fItqntm\fR
.ad
.RS 16n
.rt
[\fB-r\fR \fIres\fR] Sets the time quantum of the specified process(es) to
.IR tqntm .
You can optionally specify a resolution as explained below.
.RE

.SH USAGE
.SS "Real-Time Class"
.sp
.LP
The real-time class provides a fixed priority preemptive scheduling policy
for those processes requiring fast and deterministic response and absolute
user/application control of scheduling priorities. If the real-time class is
configured in the system, it should have exclusive control of the highest
range of scheduling priorities on the system. This ensures that a runnable
real-time process is given
.B CPU
service before any process belonging to
any other class.
.sp
.LP
The real-time class has a range of real-time priority (\fIrtpri\fR) values
that can be assigned to processes within the class. Real-time priorities
range from 0 to
.IR x ,
where the value of
.I x
is configurable and can
be displayed for a specific installation that has already configured a
real-time scheduler, by using the command
.sp
.in +2
.nf
\fBpriocntl -l\fR
.fi
.in -2
.sp

.sp
.LP
The real-time scheduling policy is a fixed priority policy. The scheduling
priority of a real-time process never changes except as the result of an
explicit request by the user/application to change the
.I rtpri
value of
the process.
.sp
.LP
For processes in the real-time class, the
.I rtpri
value is, for all
practical purposes, equivalent to the scheduling priority of the process.
The
.I rtpri
value completely determines the scheduling priority of a
real-time process relative to other processes within its class. Numerically
higher
.I rtpri
values represent higher priorities. Since the real-time
class controls the highest range of scheduling priorities in the system, it
is guaranteed that the runnable real-time process with the highest
\fIrtpri\fR value is always selected to run before any other process in the
system.
.sp
.LP
In addition to providing control over priority,
.B priocntl
provides for
control over the length of the time quantum allotted to processes in the
real-time class. The time quantum value specifies the maximum amount of time
a process can run, assuming that it does not complete or enter a resource or
event wait state
.RB ( sleep ).
Notice that if another process becomes
runnable at a higher priority, the currently running process can be
preempted before receiving its full time quantum.
.sp
.LP
The command
.sp
.in +2
.nf
\fBpriocntl -d [-i \fIidtype\fR] [\fIidlist\fR]\fR
.fi
.in -2
.sp

.sp
.LP
displays the real-time priority, time quantum (in millisecond resolution),
and time quantum signal value for each real-time process in the set
specified by
.I idtype
and
.IR idlist .
.sp
.LP
Any combination of the \fB-p\fR, \fB-t\fR [\fB-r\fR], and
.B -q
options
can be used with
.B "priocntl -s"
or
.B "priocntl -e"
for the
real-time class. If an option is omitted and the process is currently
real-time, the associated parameter is unaffected. If an option is omitted
when changing the class of a process to real-time from some other class, the
associated parameter is set to a default value. The default value for
\fIrtpri\fR is \fB0\fR and the default for time quantum is dependent on the
value of
.I rtpri
and on the system configuration; see
.BR rt_dptbl (4).
.sp
.LP
When using the
.B -t
\fItqntm\fR option, you can optionally specify a
resolution using the
.B -r
\fIres\fR option. (If no resolution is
specified, millisecond resolution is assumed.) If
.I res
is specified, it
must be a positive integer between
.B 1
and
.BR 1,000,000,000
inclusively and the resolution used is the reciprocal of
.I res
in
seconds. For example, specifying
.B "-t 10"
\fB-r 100\fR would
set the resolution to hundredths of a second and the resulting time quantum
length would be 10/100 seconds (one tenth of a second). Although very fine
(nanosecond) resolution can be specified, the time quantum length is rounded
up by the system to the next integral multiple  of the system clock's
resolution. Requests for time quantums of zero or quantums greater than the
(typically very large) implementation-specific maximum quantum result in an
error.
.sp
.LP
The real-time time quantum signal can be used to notify runaway real-time
processes about the consumption of their time quantum. Those processes,
which are monitored by the real-time time quantum signal, receive the
configured signal in the event of time quantum expiration. The default value
(\fB0\fR) of the time quantum signal \fItqsig\fR denotes no signal delivery.
A positive value denotes the delivery of the signal specified by the value.
Like
.BR kill (1)
.RB "and other commands operating on signals, the" " -q"
\fItqsig\fR option is also able to handle symbolically named signals, like
\fBXCPU\fR or
.BR KILL .
.sp
.LP
In order to change the class of a process to real-time (from any other
class), the user invoking
.B priocntl
must have super-user privilege. In
order to change the
.I rtpri
value or time quantum of a real-time
process, the user invoking
.B priocntl
must either be super-user, or must
currently be in the real-time class (shell running as a real-time process)
with a real or effective user
.B ID
matching the real or effective user
\fBID\fR of the target process.
.sp
.LP
The real-time priority, time quantum, and time quantum signal are inherited
across the
.BR fork (2)
and
.BR exec (2)
system calls. When using the time
quantum signal with a user defined signal handler across the
.BR exec (2)
system call, the new image must install an appropriate user defined signal
handler before the time quantum expires. Otherwise, unpredicable behavior
would result.
.SS "Time-Sharing Class"
.sp
.LP
The time-sharing scheduling policy provides for a fair and effective
allocation of the
.B CPU
resource among processes with varying
.BR CPU
consumption characteristics. The objectives of the time-sharing policy are
to provide good response time to interactive processes and good throughput
to \fBCPU\fR-bound jobs, while providing a degree of user/application
control over scheduling.
.sp
.LP
The time-sharing class has a range of time-sharing user priority
(\fItsupri\fR) values that can be assigned to processes within the class.
User priorities range from \(mi\fIx\fR to +\fIx\fR, where the value of
\fIx\fR is configurable. The range for a specific installation can be
displayed by using the command
.sp
.in +2
.nf
\fBpriocntl -l\fR
.fi
.in -2
.sp

.sp
.LP
The purpose of the user priority is to provide some degree of
user/application control over the scheduling of processes in the
time-sharing class. Raising or lowering the
.I tsupri
value of a process
in the time-sharing class raises or lowers the scheduling priority of the
process. It is not guaranteed, however, that a time-sharing process with a
higher
.I tsupri
value runs before one with a lower
.I tsupri
value.
This is because the
.I tsupri
value is just one factor used to determine
the scheduling priority of a time-sharing process. The system can
dynamically adjust the internal scheduling priority of a time-sharing
process based on other factors such as recent
.B CPU
usage.
.sp
.LP
In addition to the system-wide limits on user priority (displayed with
.BR "priocntl -l" ),
there is a per process user priority limit
(\fItsuprilim\fR), which specifies the maximum \fItsupri\fR value that can
be set for a given process.
.sp
.LP
The command
.sp
.in +2
.nf
\fBpriocntl -d [-i \fIidtype\fR] [\fIidlist\fR]\fR
.fi
.in -2
.sp

.sp
.LP
displays the user priority and user priority limit for each time-sharing
process in the set specified by
.I idtype
and
.IR idlist .
.sp
.LP
Any time-sharing process can lower its own
.I tsuprilim
(or that of
another process with the same user
.BR ID ).
Only a time-sharing process
with super-user privilege can raise a
.IR tsuprilim .
When changing the
class of a process to time-sharing from some other class, super-user
privilege is required in order to set the initial
.I tsuprilim
to a value
greater than zero.
.sp
.LP
Any time-sharing process can set its own
.I tsupri
(or that of another
process with the same user
.BR ID )
to any value less than or equal to the
process's
.IR tsuprilim .
Attempts to set the
.I tsupri
above the
\fItsuprilim\fR (and/or set the \fItsuprilim\fR below the
.IR tsupri )
result in the
.I tsupri
being set equal to the
.IR tsuprilim .
.sp
.LP
Any combination of the
.B -m
and
.B -p
options can be used with
\fBpriocntl -s\fR or \fBpriocntl -e\fR for the time-sharing
class. If an option is omitted and the process is currently time-sharing,
the associated parameter is normally unaffected. The exception is when the
\fB-p\fR option is omitted and \fB-m\fR is used to set a \fItsuprilim\fR
below the current
.IR tsupri .
In this case, the
.I tsupri
is set equal
to the
.I tsuprilim
which is being set. If an option is omitted when
changing the class of a process to time-sharing from some other class, the
associated parameter is set to a default value. The default value for
\fItsuprilim\fR is \fB0\fR and the default for \fItsupri\fR is to set it
equal to the
.I tsuprilim
value which is being set.
.sp
.LP
The time-sharing user priority and user priority limit are inherited across
the
.BR fork (2)
and
.BR exec (2)
system calls.
.SS "Inter-Active Class"
.sp
.LP
The inter-active scheduling policy provides for a fair and effective
allocation of the
.B CPU
resource among processes with varying
.BR CPU
consumption characteristics while providing good responsiveness for user
interaction. The objectives of the inter-active policy are to provide good
response time to interactive processes and good throughput to
\fBCPU\fR-bound jobs. The priorities of processes in the inter-active class
can be changed in the same manner as those in the time-sharing class, though
the modified priorities continue to be adjusted to provide good
responsiveness for user interaction.
.sp
.LP
The inter-active user priority limit,
.IR iaupri ,
is equivalent to
.IR tsupri .
The inter-active per process user priority,
.IR iauprilim ,
is equivalent to
.IR tsuprilim .
.sp
.LP
Inter-active class processes that have the \fIiamode\fR ("interactive
mode") bit set are given a priority boost value of \fB10\fR, which is
factored into the user mode priority of the process when that calculation is
made, that is, every time a process's priority is adjusted. This feature is
used by the X windowing system, which sets this bit for those processes that
run inside of the current active window to give them a higher priority.
.SS "Fair-Share Class"
.sp
.LP
The fair-share scheduling policy provides a fair allocation of system
\fBCPU\fR resources among projects, independent of the number of processes
they own. Projects are given "shares" to control their entitlement to
\fBCPU\fR resources. Resource usage is remembered over time, so that
entitlement is reduced  for heavy usage, and increased for light usage, with
respect to other projects.
.B CPU
time is scheduled among processes
according to their owner's entitlements, independent of the number of
processes each project owns.
.sp
.LP
The
.B FSS
scheduling class supports the notion of per-process user
priority and user priority limit for compatibility with the time-share
scheduler. The fair share scheduler attempts to provide an evenly graded
effect across the whole range of user priorities. Processes with negative
\fIfssupri\fR values receive time slices less frequently than normal,  while
processes with positive \fIfssupri\fR values receive time slices more
frequently than normal.  Notice that user priorities do not interfere with
shares. That is, changing a \fIfssupri\fR value of a process is not going to
affect its project's overall
.B CPU
usage which only relates to the
amount of shares it is allocated compared to other projects.
.sp
.LP
The priorities of processes in the fair-share class can be changed in the
same manner as those in the time-share class.
.SS "Fixed-Priority Class"
.sp
.LP
The fixed-priority class provides a fixed priority preemptive scheduling
policy for those processes requiring that the scheduling priorities do not
get dynamically adjusted by the system and that the user/application have
control of the scheduling priorities.
.sp
.LP
The fixed-priority class shares the same range of scheduling priorities
with the time-sharing class, by default. The fixed-priority class has a
range of fixed-priority user priority (\fIfxupri\fR) values that can be
assigned to processes within the class. User priorities range from 0 to
.IR x ,
where the value of
.I x
is configurable. The range for a
specific installation can be displayed by using the command
.sp
.in +2
.nf
\fBpriocntl -l\fR
.fi
.in -2
.sp

.sp
.LP
The purpose of the user priority is to provide user/application control
over the scheduling of processes in the fixed-priority class. For processes
in the fixed-priority class, the \fIfxupri\fR value is, for all practical
purposes, equivalent  to the scheduling priority of the process. The
\fIfxupri\fR value completely determines the scheduling priority of a
fixed-priority process relative to other processes within its class.
Numerically higher \fIfxupri\fR values represent higher priorities.
.sp
.LP
In addition to the system-wide limits on user priority (displayed with
.BR "priocntl -l" ),
there is a per process user priority limit
(\fIfxuprilim\fR), which specifies the maximum \fIfxupri\fR value that can
be set for a given process.
.sp
.LP
Any fixed-priority process can lower its own \fIfxuprilim\fR (or that of
another process with the same user
.BR ID ).
Only a process with super-user
privilege can raise a
.IR fxuprilim .
When changing the class of a process
to fixed-priority from some other class, super-user privilege is required in
order to set the initial \fIfxuprilim\fR to a value greater than zero.
.sp
.LP
Any fixed-priority process can set its own \fIfxupri\fR (or that of another
process with the same user
.BR ID )
to any value less than or equal to the
process's
.IR fxuprilim .
Attempts to set the \fIfxupri\fR above the
\fIfxuprilim\fR (or set the \fIfxuprilim\fR below the
.IR fxupri )
result
in the \fIfxupri\fR being set equal to the \fIfxuprilim\fR.
.sp
.LP
In addition to providing control over priority,
.B priocntl
provides for
control over the length of the time quantum allotted to processes in the
fixed-priority class. The time quantum value specifies the maximum amount of
time a process can run, before surrendering the
.BR CPU ,
assuming that it
does not complete or enter a resource or event wait state (sleep). Notice
that if another process becomes runnable at a higher priority, the currently
running process can be preempted before receiving its full time quantum.
.sp
.LP
Any combination of the
.BR -m ,
.BR -p ,
and
.B -t
options can be used
with
.B "priocntl -s"
or
.B "priocntl -e"
for the
fixed-priority class. If an option is omitted and the process is currently
fixed-priority, the associated parameter is normally unaffected. The
exception is when the
.B -p
option is omitted and the
.B -m
option is
used to set a \fIfxuprilim\fR below the current
.IR fxupri .
In this case,
the \fIfxupri\fR is set equal to the \fIfxuprilim\fR which is being set. If
an option is omitted when changing the class of a process to fixed-priority
from some other class, the associated parameter is set to a default value.
The default value for \fIfxuprilim\fR is
.BR 0 .
The default for
\fIfxupri\fR is to set it equal to the \fIfxuprilim\fR value which is being
set. The default for time quantum is dependent on the \fIfxupri\fR and on
the system configuration. See
.BR fx_dptbl (4).
.sp
.LP
The time quantum of processes in the fixed-priority class can be
changed in the same manner as those in the real-time class.
.sp
.LP
The fixed-priority user priority, user priority limit, and time quantum are
inherited across the
.BR fork (2)
and
.BR exec (2)
system calls.
.SH EXAMPLES
.sp
.LP
The following are real-time class examples:
.LP
\fBExample 1\fR Setting the Class
.sp
.LP
The following example sets the class of any non-real-time processes
selected by
.I idtype
and
.I idlist
to real-time and sets their
real-time priority to the default value of
.BR 0 .
The real-time priorities
of any processes currently in the real-time class are unaffected. The time
quantums of all of the specified processes are set to
.B 1/10
seconds.

.sp
.in +2
.nf
example% \fBpriocntl -s -c RT -t 1 -r 10 -i \fIidtype idlist\fR
.fi
.in -2
.sp

.LP
\fBExample 2\fR Executing a Command in Real-time
.sp
.LP
The following example executes
.I command
in the real-time class with a
real-time priority of
.B 15
and a time quantum of
.BR 20
milliseconds:

.sp
.in +2
.nf
example% \fBpriocntl -e -c RT -p 15 -t 20 \fIcommand\fR
.fi
.in -2
.sp

.LP
\fBExample 3\fR Executing a Command in Real-time with a Specified Quantum
Signal
.sp
.LP
The following example executes
.I command
in the real-time class with a
real-time priority of
.BR 11 ,
a time quantum of
.B 250
milliseconds,
and where the specified real-time quantum signal is
.BR SIGXCPU :

.sp
.in +2
.nf
example% \fBpriocntl -e -c RT -p 11 -t 250 -q XCPU \fIcommand\fR
.fi
.in -2
.sp

.sp
.LP
The following are time-sharing class examples:
.LP
\fBExample 4\fR Setting the Class of non-time-sharing Processes
.sp
.LP
The following example sets the class of any non-time-sharing processes
selected by
.I idtype
and
.I idlist
to time-sharing and sets both
their user priority limit and user priority to
.BR 0 .
Processes already in
the time-sharing class are unaffected.

.sp
.in +2
.nf
example% \fBpriocntl -s -c TS -i \fIidtype idlist\fR
.fi
.in -2
.sp

.LP
\fBExample 5\fR Executing a Command in the Time-sharing Class
.sp
.LP
The following example executes
.I command
with the arguments
\fIarguments\fR in the time-sharing class with a user priority limit of
\fB0\fR and a user priority of \fB\(mi15\fR:

.sp
.in +2
.nf
example% \fBpriocntl -e -c TS -m 0 -p \fB-15\fR \fIcommand\fR [\fIarguments\fR]\fR
.fi
.in -2
.sp

.LP
\fBExample 6\fR Executing a Command in Fixed-Priority Class
.sp
.LP
The following example executes a command in the fixed-priority  class with
a user priority limit of
.B 20
and user priority of
.B 10
and time
quantum of
.B 250
milliseconds:

.sp
.in +2
.nf
example% \fBpriocntl -e -c FX -m 20 -p 10 -t 250 command\fR
.fi
.in -2
.sp

.SH EXIT STATUS
.sp
.LP
The following exit values are returned:
.sp
.LP
For options
.BR -d ,
.BR -l ,
and
.BR -s :
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 5n
.rt
Successful operation.
.RE

.sp
.ne 2
.mk
.na
.B 1
.ad
.RS 5n
.rt
Error condition.
.RE

.sp
.LP
For option
.BR -e :
.sp
.LP
Return of the Exit Status of the executed command denotes successful
operation. Otherwise,
.sp
.ne 2
.mk
.na
.B 1
.ad
.RS 5n
.rt
Command could not be executed at the specified priority.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
_
CSIEnabled
.TE

.SH SEE ALSO
.sp
.LP
.BR kill (1),
.BR nice (1),
.BR ps (1),
.BR dispadmin (1M),
.BR exec (2),
.BR fork (2),
.BR priocntl (2),
.BR fx_dptbl (4),
.BR process (4),
.BR rt_dptbl (4),
.BR attributes (5),
.BR zones (5),
.BR FSS (7)
.sp
.LP
.I System Administration Guide: Basic Administration
.SH DIAGNOSTICS
.sp
.LP
\fBpriocntl\fR prints the following error messages:
.sp
.ne 2
.mk
.na
\fBProcess(es) not found\fR
.ad
.sp .6
.RS 4n
None of the specified processes exists.
.RE

.sp
.ne 2
.mk
.na
\fBSpecified processes from different classes\fR
.ad
.sp .6
.RS 4n
The
.B -s
.RB "option is being used to set parameters, the" " -c"
\fIclass\fR option is not present, and processes from more than one class
are specified.
.RE

.sp
.ne 2
.mk
.na
.B Invalid option or argument
.ad
.sp .6
.RS 4n
An unrecognized or invalid option or option argument is used.
.RE

