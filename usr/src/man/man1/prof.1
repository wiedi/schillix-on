'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH prof 1 "25 Aug 2009" "SunOS 5.11" "User Commands"
.SH NAME
prof \- display profile data
.SH SYNOPSIS
.LP
.nf
\fBprof\fR [\fB-ChsVz\fR] [\fB-a\fR | c | n | t] [\fB-o\fR | x] [\fB-g\fR | l] [\fB-m\fR \fImdata\fR]
     [\fIprog\fR]
.fi

.SH DESCRIPTION
.sp
.LP
The
.B prof
command interprets a profile file produced by the
.B monitor
function.  The symbol table in the object file
.I prog
.RB ( a.out
by default) is read and correlated with a profile file
.RB ( mon.out
by default).  For each external text symbol the percentage of
time spent executing between the address of that symbol and the address of
the next is printed, together with the number of times that function was
called and the average number of milliseconds per call.
.SH OPTIONS
.sp
.LP
The mutually exclusive options
.BR -a ,
.BR -c ,
.BR -n ,
and
.BR -t
determine the type of sorting of the output lines:
.sp
.ne 2
.mk
.na
.B -a
.ad
.RS 6n
.rt
Sort by increasing symbol address.
.RE

.sp
.ne 2
.mk
.na
.B -c
.ad
.RS 6n
.rt
Sort by decreasing number of calls.
.RE

.sp
.ne 2
.mk
.na
.B -n
.ad
.RS 6n
.rt
Sort lexically by symbol name.
.RE

.sp
.ne 2
.mk
.na
.B -t
.ad
.RS 6n
.rt
Sort by decreasing percentage of total time (default).
.RE

.sp
.LP
The mutually exclusive options
.B -o
and
.B -x
specify the printing
of the address of each symbol monitored:
.sp
.ne 2
.mk
.na
.B -o
.ad
.RS 6n
.rt
Print each symbol address (in octal) along with the symbol name.
.RE

.sp
.ne 2
.mk
.na
.B -x
.ad
.RS 6n
.rt
Print each symbol address (in hexadecimal) along with the symbol name.
.RE

.sp
.LP
The mutually exclusive options
.B -g
and
.B -l
control the type of
symbols to be reported. The
.B -l
option must be used with care; it
applies the time spent in a static function to the preceding (in memory)
global function, instead of giving the static function a separate entry in
the report. If all static functions are properly located, this feature can
be very useful. If not, the resulting report may be misleading.
.sp
.LP
Assume that
.B A
and
.B B
are global functions and only
.BR A
calls static function
.BR S .
If
.B S
is located immediately after  A
in the source code (that is, if
.B S
is properly located), then, with
the
.B -l
option, the amount of time spent in
.B A
can easily be
determined, including the time spent in
.BR S .
If, however, both 
.B A
and
.B B
call
.BR S ,
then, if the
.B -l
option is used, the report
will be misleading; the time spent during 
.BR B 's
call to
.B S
will
be attributed to
.BR A ,
making it appear as if more time had been spent
in
.B A
than really had.  In this case, function
.B S
cannot be
properly located.
.sp
.ne 2
.mk
.na
.B -g
.ad
.RS 6n
.rt
List the time spent in static (non-global) functions separately. The
.B -g
option function is the opposite of the
.B -l
function.
.RE

.sp
.ne 2
.mk
.na
.B -l
.ad
.RS 6n
.rt
Suppress printing statically declared functions.  If this option is given,
time spent executing in a static function is allocated to the closest global
function loaded before the static function in the executable.  This option
is the default.  It is the opposite of the
.B -g
function and should be
used with care.
.RE

.sp
.LP
The following options may be used in any combination:
.sp
.ne 2
.mk
.na
.B -C
.ad
.RS 12n
.rt
Demangle C++ symbol names before printing them out.
.RE

.sp
.ne 2
.mk
.na
.B -h
.ad
.RS 12n
.rt
Suppress the heading normally printed on the report. This is useful if the
report is to be processed further.
.RE

.sp
.ne 2
.mk
.na
.B -m
.I mdata
.ad
.RS 12n
.rt
Use file
.I mdata
instead of
.B mon.out
as the input profile file.
.RE

.sp
.ne 2
.mk
.na
.B -s
.ad
.RS 12n
.rt
Print a summary of several of the monitoring parameters and statistics on
the standard error output.
.RE

.sp
.ne 2
.mk
.na
.B -V
.ad
.RS 12n
.rt
Print
.B prof
version information on the standard error output.
.RE

.sp
.ne 2
.mk
.na
.B -z
.ad
.RS 12n
.rt
Include all symbols in the profile range, even if associated with zero
number of calls and zero time.
.RE

.sp
.LP
A single function may be split into subfunctions for profiling by means of
the
.B MARK
macro. See
.BR prof (5).
.SH ENVIRONMENT VARIABLES
.sp
.ne 2
.mk
.na
.B PROFDIR
.ad
.RS 11n
.rt
The name of the file created by a profiled program is controlled by the
environment variable
.BR PROFDIR .
If
.B PROFDIR
is not set,
.B mon.out
is produced in the directory current when the program
terminates. If 
.BR PROFDIR =\fIstring\fR,
\fIstring\fB/\fIpid\fB\&.\fIprogname\fR is produced, where
.I progname
consists of
.B argv[0]
with any path prefix removed, and
.I pid
is the process ID of the program.  If
.B PROFDIR
is set, but
null, no profiling output is produced.
.RE

.SH FILES
.sp
.ne 2
.mk
.na
.B mon.out
.ad
.RS 11n
.rt
default profile file
.RE

.sp
.ne 2
.mk
.na
.B a.out
.ad
.RS 11n
.rt
default namelist (object) file
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWbtool
.TE

.SH SEE ALSO
.sp
.LP
.BR gprof (1),
.BR exit (2),
.BR pcsample (2),
.BR profil (2),
.BR malloc (3C),
.BR malloc (3MALLOC),
.BR monitor (3C),
.BR attributes (5),
.BR prof (5)
.SH NOTES
.sp
.LP
If the executable image has been stripped and does not have the
\fB\&.symtab\fR symbol table,
.B gprof
reads the global dynamic symbol
tables \fB\&.dynsym\fR and \fB\&.SUNW_ldynsym\fR, if present.  The symbols
in the dynamic symbol tables are a subset of the symbols that are found in
\fB\&.symtab\fR. The \fB\&.dynsym\fR symbol table contains the global
symbols used by the runtime linker. \fB\&.SUNW_ldynsym\fR augments the
information in \fB\&.dynsym\fR with local function symbols. In the case
where \fB\&.dynsym\fR is found and \fB\&.SUNW_ldynsym\fR is not, only the
information for the global symbols is available. Without local symbols, the
behavior is as described for the
.B -a
option.
.sp
.LP
The times reported in successive identical runs may show variances because
of varying cache-hit ratios that result from sharing the cache with other
processes. Even if a program seems to be the only one using the machine,
hidden background or asynchronous processes may blur the data. In rare
cases, the clock ticks initiating recording of the program counter may
.B beat
with loops in a program, grossly distorting measurements. Call
counts are always recorded precisely, however.
.sp
.LP
Only programs that call
.B exit
or return from
.B main
are
guaranteed to produce a profile file, unless a final call to 
.B monitor
is explicitly coded.
.sp
.LP
The times for static functions are attributed to the preceding external
text symbol if the
.B -g
option is not used. However, the call counts for
the preceding function are still correct; that is, the static function call
counts are not added to the call counts of the external function.
.sp
.LP
If more than one of the options
.BR -t ,
.BR -c ,
.BR -a ,
and
.B -n
is specified, the last option specified is used and the user is
warned.
.sp
.LP
.B LD_LIBRARY_PATH
must not contain
.B /usr/lib
as a component when
compiling a program for profiling. If
.B LD_LIBRARY_PATH
contains
.BR /usr/lib ,
the program will not be linked correctly with the profiling
versions of the system libraries in
.BR /usr/lib/libp .
See
.BR gprof (1).
.sp
.LP
Functions such as
.BR mcount() ,
.BR _mcount() ,
.BR moncontrol() ,
.BR _moncontrol() ,
.BR monitor() ,
and
.B _monitor()
may appear in the
.B prof
report.  These functions are part of the profiling implementation
and thus account for some amount of the runtime overhead.  Since these
functions are not present in an unprofiled application, time accumulated and
call counts for these functions may be ignored when evaluating the
performance of an application.
.SS "64-bit profiling"
.sp
.LP
64-bit profiling may be used freely with dynamically linked executables,
and profiling information is collected for the shared objects if the objects
are compiled for profiling. Care must be applied to interpret the profile
output, since it is possible for symbols from different shared objects to
have the same name. If duplicate names are seen in the profile output, it is
better to use the
.B -s
(summary) option, which prefixes a module id
before each symbol that is duplicated. The symbols can then be mapped to
appropriate modules by looking at the modules information in the summary.
.sp
.LP
If the
.B -a
option is used with a dynamically linked executable, the
sorting occurs on a per-shared-object basis. Since there is a high
likelihood of symbols from differed shared objects to have the same value,
this results in an output that is more understandable. A blank line
separates the symbols from different shared objects, if the
.B -s
option
is given.
.SS "32-bit profiling"
.sp
.LP
32-bit profiling may be used with dynamically linked executables, but care
must be applied. In 32-bit profiling, shared objects cannot be profiled with
.BR prof .
Thus, when a profiled, dynamically linked program is executed,
only the
.B main
portion of the image is sampled. This means that all
time spent outside of the
.B main
object, that is, time spent in a shared
object, will not be included in the profile summary; the total time reported
for the program may be less than the total time used by the program.
.sp
.LP
Because the time spent in a shared object cannot be accounted for, the use
of shared objects should be minimized whenever a program is profiled with
.BR prof .
If desired, the program should be linked to the profiled version
of a library (or to the standard archive version if no profiling version is
available), instead of the shared object to get profile information on the
functions of a library. Versions of profiled libraries may be supplied with
the system in the
.B /usr/lib/libp
directory. Refer to compiler driver
documentation on profiling.
.sp
.LP
Consider an extreme case. A profiled program dynamically linked with the
shared C library spends 100 units of time in some
.B libc
routine, say,
.BR malloc() .
Suppose
.B malloc()
is called only from routine
.BR B
and
.B B
consumes only 1 unit of time. Suppose further that routine
.B A
consumes 10 units of time, more than any other routine in the
.B main
(profiled) portion of the image. In this case,
.B prof
will
conclude that most of the time is being spent in
.B A
and almost no time
is being spent in
.BR B .
From this it will be almost impossible to tell
that the greatest improvement can be made by looking at routine
.B B
and
not routine
.BR A .
The value of the profiler in this case is severely
degraded; the solution is to use archives as much as possible for
profiling.
