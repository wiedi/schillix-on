'\" te
.\" Copyright (c) 1986-2006 AT&T Knowledge Ventures
.\" To view license terms, see http://www.opensource.org/licenses/cpl1.0.txt
.\" Portions Copyright (c) 2007, Sun Microsystems, Inc.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.TH msgcpp 1 "9 Oct 2007" "SunOS 5.11" "User Commands"
.SH NAME
msgcpp \- C language message catalog preprocessor
.SH SYNOPSIS
.LP
.nf
\fBmsgcpp\fR [\fB-ACEHMPVX\fR] [\fB-D\fR \fIname\fR[\fB=\fIvalue\fR]] [\fB-I\fR \fIdirectory\fR] [\fB-U\fR \fIname\fR]
 [\fB-T\fR[\fIlength\fR]] [\fB-Y\fR \fIdirectory\fR] [\fIinput\fR [\fIoutput\fR] ]
.fi

.SH DESCRIPTION
.sp
.LP
.B msgcpp
is a C language message catalog preprocessor. It accepts
.BR cpp (1)
style options and arguments.
.B msgcpp
preprocesses an input
C source file and emits keyed lines to the output, usually for further
processing by\fBmsgcc\fR(1).
.B msgcc
output is in the
.BR gencat (1)
syntax. Candidate message text is determined by arguments to the last
.B <error.h>
and
.B <option.h>
functions. The
.B msgcpp
keyed
output lines are:
.sp
.ne 2
.mk
.na
.B cmd
.I command
.ad
.RS 19n
.rt
.I command
is a candidate for
.B --??keys
option string generation.
This is triggered by
.BR "b_command(int argc" ,
in the input.
.RE

.sp
.ne 2
.mk
.na
.B def
.I name string
.ad
.RS 19n
.rt
.I name
is a candidate variable with
.I string
value string.
.RE

.sp
.ne 2
.mk
.na
.B str
.I string
.ad
.RS 19n
.rt
.I string
should be entered into the catalog.
.RE

.sp
.ne 2
.mk
.na
.B var
.I name
.ad
.RS 19n
.rt
If
.B def
.I name
occurs then its string value should be entered into
the catalog.
.RE

.sp
.LP
The input source file is preprocessed with the
.B pp:allpossible
option
on. This enables non-C semantics. All source should first be compiled
error-free with a real compiler before running
.BR msgcpp .
The following
changes are enabled for the top level files. Included file behavior is not
affected.
.RS +4
.TP
1.
All
.BR #if ,
.B #ifdef
and
.B #ifndef
branches are enabled.
.RE
.RS +4
.TP
2.
The first definition for a macro is retained, even when subsequent
.B #define
statements would normally redefine the macro.
.B #undef
must be used to redefine a macro.
.RE
.RS +4
.TP
3.
Macro calls with an improper number of arguments are silently ignored.
.RE
.RS +4
.TP
4.
.B #include
on non-existent headers are silently ignored.
.RE
.RS +4
.TP
5.
Invalid C source characters are silently ignored.
.RE
.sp
.LP
.B msgcat.h
is included if it exists. This file may contain macro
definitions for functions that translate string arguments. If
.B foo
is a
function that translates its string arguments then include the line
.B #define foo _TRANSLATE_
in
.BR msgcat.h ,
or specify the option
.BR -Dfoo=_TRANSLATE_ .
If
.B bar
is a function that translates string
arguments if the first argument is
.BR stderr ,
then use either \fB#define bar _STDIO_\fR or
.BR -Dbar=_STDIO_ .
.sp
.LP
The macro
.B _BLD_msgcat
is defined to be
.BR 1 .
As an alternative to
.BR msgcat.h ,
.B _TRANSLATE_
definitions could be placed inside
.BR "#ifdef _BLD_msgcat .\|.\|. #endif" .
.SH OPTIONS
.sp
.LP
The following options are supported:
.sp
.ne 2
.mk
.na
.B -A
.ad
.br
.na
.BI --assert= assertion
.ad
.RS 25n
.rt
Enter the assertion using
.B #assert
for system V compatibility.
.RE

.sp
.ne 2
.mk
.na
.B -C
.ad
.br
.na
.B --comments
.ad
.RS 25n
.rt
Pass comments to the output.
.sp
Comments are omitted by default.
.RE

.sp
.ne 2
.mk
.na
.B -D
.ad
.br
.na
\fB--define=\fIname\fB[=\fIvalue\fB]\fR
.ad
.RS 25n
.rt
Define the macro
.I name
to have
.IR value .
This is the only portable
way to pass options through
.B cc
to
.BR cpp (1).
.RS +4
.TP
.ie t \(bu
.el o
If \fB=\fIvalue\fR is omitted, \fIvalue\fR is assumed to be
.B 1
\&.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.I name
begins with
.BR : ,
then it is interpreted as a
.BR libpp
.BR "#pragma pp" :
statement.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.I name
begins with
.BR % ,
it is interpreted as a
.BR libpp
.B #
directive statement.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If name begins with a
.B -
or a
.BR + ,
it is interpreted as a
.B libpp
option.
.sp
.B -
turns the option on,
.B +
turns it off.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Most options have a
.B #pragma
counterpart that is listed with the
option definition.
.RE
.sp
.ne 2
.mk
.na
.B -D-C
.ad
.br
.na
.B pp:compatibility
.ad
.sp .6
.RS 4n
Preprocess for K&R C compatibility.
.RE

.sp
.ne 2
.mk
.na
.BI -D-D level
.ad
.br
.na
.B pp:debug level
.I level
.ad
.sp .6
.RS 4n
Set the debug trace level.
.sp
Specify
.I level
as a number greater than or equal to
.BR 0 .
Higher
levels produce more output. Levels higher than
.B 3
can only be enabled
in the
.B -g
compiled versions.
.RE

.sp
.ne 2
.mk
.na
.BI -D-F name
.ad
.sp .6
.RS 4n
Set the main input file name to
.IR name .
This only affects the error
messages and the line sync output.
.RE

.sp
.ne 2
.mk
.na
.B -D-H
.ad
.br
.na
.B pp:hosted
.ad
.sp .6
.RS 4n
All directories are hosted. Compatibility warning messages from the hosted
directory headers are suppressed.
.RE

.sp
.ne 2
.mk
.na
.B -D-I
.ad
.br
.na
.B pp:cdir
.ad
.sp .6
.RS 4n
All directories contain C headers. This option is only used only with
.BR -D-+ .
.RE

.sp
.ne 2
.mk
.na
.B -D-K
.ad
.br
.na
.B pp:keyargs
.ad
.sp .6
.RS 4n
Enable the non-standard \fIname\fB=\fIvalue\fR macro argument mode.
.RE

.sp
.ne 2
.mk
.na
\fB-D-L[\fIid\fB]\fR
.ad
.br
.na
\fBpp:lineid [\fIid\fR]\fR
.ad
.sp .6
.RS 4n
Set the line sync directive id to
.IR id .
If
.I id
is not specified,
set to null.
.RE

.sp
.ne 2
.mk
.na
.B -D-M
.ad
.br
.na
.B pp:nomultiple
.ad
.sp .6
.RS 4n
Disable multiple include detection.
.RE

.sp
.ne 2
.mk
.na
.B -D-P
.ad
.br
.na
.B pp:passthrough
.ad
.sp .6
.RS 4n
Enable the non-standard passthrough mode. This can be useful for processing
non-C input.
.RE

.sp
.ne 2
.mk
.na
.B -D-Q
.ad
.br
.na
.B pp:dump
.ad
.sp .6
.RS 4n
Dump macro definitions to the output so that the output may be passed
through
.B cpp
again. This is used for generating precompiled headers.
.RE

.sp
.ne 2
.mk
.na
.B -D-R
.ad
.br
.na
.B pp:transition
.ad
.sp .6
.RS 4n
Enable the transition preprocessing mode. This is used for compilers that
cannot make up their semantics between K&R and ISO C.
.RE

.sp
.ne 2
.mk
.na
.B -D-S
.ad
.br
.na
.B pp:strict
.ad
.sp .6
.RS 4n
Enable strict preprocessing semantics and warnings. This works with any
mode (compatibility, transition, or the default ISO).
.RE

.sp
.ne 2
.mk
.na
.BI -D-T test
.ad
.br
.na
.B pp:test
.I test
.ad
.sp .6
.RS 4n
Enable implementation specific test code according to
.IR test .
.RE

.sp
.ne 2
.mk
.na
.B -D-W
.ad
.br
.na
.B pp:warn
.ad
.sp .6
.RS 4n
Enable pedantic warnings in non-hosted files.
.RE

.sp
.ne 2
.mk
.na
.B -D-X[cc]
.ad
.br
.na
\fR
.ad
.sp .6
.RS 4n
Preprocess for the
.B cc
compiler, which must be an executable path or
an executable on
.BR $PATH .
.RE

.sp
.ne 2
.mk
.na
.B -D-Z
.ad
.br
.na
.B pp:pool
.ad
.sp .6
.RS 4n
Enable pool mode.
.RE

.sp
.ne 2
.mk
.na
.B -D-d
.ad
.sp .6
.RS 4n
List canonicalized
.B #define
statements for non-predefined macros in
the output.
.RE

.sp
.ne 2
.mk
.na
.B -D-m
.ad
.sp .6
.RS 4n
List canonicalized
.B #define
statements for all macros. All other
output is disabled.
.RE

.sp
.ne 2
.mk
.na
.B -D-+
.ad
.br
.na
.B pp:plusplus
.ad
.sp .6
.RS 4n
Preprocess for the C++ dialect.
.RE

.RE

.sp
.ne 2
.mk
.na
.B -E
.ad
.br
.na
.B --preprocess
.ad
.RS 25n
.rt
Ignored; for compatibility with very old compilers.
.RE

.sp
.ne 2
.mk
.na
.B -H
.ad
.br
.na
.B --include-reference
.ad
.RS 25n
.rt
Emit
.B #include
file paths on the standard error, one per line,
indented to show nesting.
.RE

.sp
.ne 2
.mk
.na
.B -I
.ad
.br
.na
\fB--include[=\fIdirectory\fB]\fR
.ad
.RS 25n
.rt
Append directory to the list of directories searched for
.BR #include
files.
.sp
If directory is
.BR - :
.RS +4
.TP
1.
\fB-I\fR directories before \fB-I-\fR are searched only for \fB".\|.\|."\fR
include files
.RE
.RS +4
.TP
2.
\fB-I\fR directories after \fB-I-\fR are searched for \fB".\|.\|."\fR and
\fB<".\|.\|.">\fR include files
.RE
.RS +4
.TP
3.
the directory \fB\&.\fR is searched only if it is explicitly specified by
an
.B -I
option
.RE
.sp
.ne 2
.mk
.na
.BI -I-C directory
.ad
.br
.na
.B pp:cdir directory
.ad
.sp .6
.RS 4n
Mark
.I directory
as a C header directory. This option is used with
.BR pp:plusplus .
.RE

.sp
.ne 2
.mk
.na
\fB-I-D[\fIfile\fR]\fR
.ad
.sp .6
.RS 4n
Read the default
.B probe
definitions from
.IR file ,
or ignore the
default definitions if
.I file
is omitted.
.RE

.sp
.ne 2
.mk
.na
.BI -I-H directory
.ad
.br
.na
.B pp:hostdir
.I directory
.ad
.sp .6
.RS 4n
Mark directory as a hosted directory. Headers from hosted directories have
compatibility warnings disabled.
.RE

.sp
.ne 2
.mk
.na
.BI -I-I header
.ad
.br
.na
.B pp:ignore
.I header
.ad
.sp .6
.RS 4n
Add
.I header
to the list of ignored headers.
.RE

.sp
.ne 2
.mk
.na
.BI -I-M file
.ad
.sp .6
.RS 4n
\fIfile\fR contains a sequence of header \fB[= "map" ]\fR lines, where
header is either \fB<name>\fR or \fB"name"\fR, and \fB"map"\fR is an
explicit binding for header. header is ignored \fBif = "map"\fR is
omitted.
.RE

.sp
.ne 2
.mk
.na
.BI -I-R file
.ad
.sp .6
.RS 4n
Include
.I file
but do not emit text or line syncs.
.RE

.sp
.ne 2
.mk
.na
.BI -I-S directory
.ad
.sp .6
.RS 4n
Add
.I directory
to the default standard include directory list.
.RE

.sp
.ne 2
.mk
.na
.BI -I-T file
.ad
.sp .6
.RS 4n
Include
.I file
and emit text to the output file. The option value can
be omitted.
.RE

.RE

.sp
.ne 2
.mk
.na
.B -M
.ad
.br
.na
.B --dependencies
.ad
.RS 25n
.rt
Generate
.BR make "(1S) dependencies. This option is not needed with"
.BR nmake .
.sp
The
.B -M
option can be followed by optional flags to change the
dependency output styles.
.sp
The following optional flags are supported:
.sp
.ne 2
.mk
.na
.B D
.ad
.RS 5n
.rt
Generate dependencies in a separate \fB\&.d\fR file. Preprocessed output is
still written to output, or the standard output if output is omitted.
.RE

.sp
.ne 2
.mk
.na
.B G
.ad
.RS 5n
.rt
Also generate missing dependencies.
.RE

.sp
.ne 2
.mk
.na
.B M
.ad
.RS 5n
.rt
Only generate local header dependencies. Hosted headers are omitted. Hosted
headers are determined by the
.B -I-H
option and the -\fB-pp:hosted\fR
and
.BR "pp:hostdir pragmas" .
No special distinction is made between the
\fB""\fR and \fB<>\fR include styles.
.RE

.RE

.sp
.ne 2
.mk
.na
.B -P
.ad
.br
.na
.B --sync
.ad
.RS 25n
.rt
Emit line syncs.
.sp
Line sync is turned on by default.
.B -P
means
.BR --nosync .
.RE

.sp
.ne 2
.mk
.na
\fB-T[\fIlength\fB]\fR
.ad
.RS 25n
.rt
If not
.BR gcc ,
truncate identifiers to
.I length
characters for
compatibility with old AT&T compilers.
.RE

.sp
.ne 2
.mk
.na
.B -U
.ad
.br
.na
.BI --undefine= name
.ad
.RS 25n
.rt
Remove the definition for the macro
.IR name .
.RE

.sp
.ne 2
.mk
.na
.B -V
.ad
.br
.na
.B --version
.ad
.RS 25n
.rt
Emit the
.B libpp
version.
.RE

.sp
.ne 2
.mk
.na
.B -X
.ad
.br
.na
.B --argmode
.ad
.RS 25n
.rt
Enable \fIname\fB=\fIvalue\fR macro arguments for \fBeasel\fR
compatibility.
.RE

.sp
.ne 2
.mk
.na
.B -Y
.ad
.br
.na
.BI --standard= directory
.ad
.RS 25n
.rt
Add
.I directory
to the list searched for \fB#include <.\|.\|.>\fR files.
.RE

.SH OPERANDS
.sp
.LP
The following operands are supported:
.sp
.ne 2
.mk
.na
.I input
.ad
.RS 10n
.rt
Specifies C source file to preprocess.
.RE

.sp
.ne 2
.mk
.na
.I output
.ad
.RS 10n
.rt
Specifies output file.
.RE

.SH EXIT STATUS
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 6n
.rt
Successful completion.
.RE

.sp
.ne 2
.mk
.na
.B >0
.ad
.RS 6n
.rt
An error occurred.
.RE

.SH EXAMPLES
.LP
.B Example 1
Using
.B msgcpp
to Extract Localizable Strings
.sp
.LP
The following example uses
.B msgcpp
to extract localizable strings from
the file
.BR hello.c ,
marked using the
.BR ERROR_dictionary() ,
and
writes them to the file
.BR hello.mso :

.sp
.in +2
.nf
example% cat hello.c


#include <stdio.h>
#include <stdlib.h>

/*
 * dummy macro to avoid including
 * libast headers
 */
#define ERROR_dictionary(x) x

int main(int ac, char *av[])
{
    puts( ERROR_dictionary("hello world") );
    puts( ERROR_dictionary("hello all") );
    return( EXIT_SUCCESS );
 }

example% msgcpp -D__STDC__ -D__i386 hello.c hello.mso

example% cat hello.mso
str "hello world"
str "hello all"
.fi
.in -2
.sp

.SH AUTHORS
.sp
.LP
Glenn Fowler,
.B gsf@research.att.com
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWastdev
_
Interface StabilityVolatile
.TE

.SH SEE ALSO
.sp
.LP
.BR cpp (1),
.BR gencat (1),
.BR msgcc (1),
.BR msgcvt (1),
.BR msggen (1),
.BR make (1S),
.BR attributes (5)
.sp
.LP
Kernighan, Brian W. and Ritchie, Dennis M., \fIThe C Programming Language\fR, Prentice Hall, 1988.
