'\" te
.\" Copyright 1989 AT&T
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Portions Copyright (c) 1992, X/Open Company Limited All Rights Reserved
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH m4 1 "3 Jul 2007" "SunOS 5.11" "User Commands"
.SH NAME
m4 \- macro processor
.SH SYNOPSIS
.LP
.nf
\fB/usr/bin/m4\fR [\fB-e\fR] [\fB-s\fR] [\fB-B\fR \fIint\fR] [\fB-H\fR \fIint\fR] [\fB-S\fR \fIint\fR]
     [\fB-T\fR \fIint\fR] [\fB-D\fIname\fR [\fI=val\fR]] .\|.\|. [\fB-U\fR \fIname\fR] .\|.\|. [\fIfile\fR].\|.\|.
.fi

.LP
.nf
\fB/usr/xpg4/bin/m4\fR [\fB-e\fR] [\fB-s\fR] [\fB-B\fR \fIint\fR] [\fB-H\fR \fIint\fR] [\fB-S\fR \fIint\fR]
     [\fB-T\fR \fIint\fR] [\fB-D\fIname\fR [.\|.\|.\fI=val\fR]] [\fB-U\fR \fIname\fR] .\|.\|. [\fIfile\fR].\|.\|.
.fi

.SH DESCRIPTION
.sp
.LP
The
.B m4
utility is a macro processor intended as a front end for C,
assembler, and other languages. Each of the argument files is processed in
order. If there are no files, or if a file is \fB\(mi\fR, the standard input is
.RB "read. The processed text is written on the standard output." " Note: m4"
cannot include more than nine nested files and writes a diagnostic message if
that number is exceeded.
.SS "Macro Syntax"
.sp
.LP
Macro calls have the form:
.sp
.in +2
.nf
\fIname\fR(\fIarg1\fR,\fIarg2\fR, .\|.\|., \fIargn\fR)
.fi
.in -2
.sp

.sp
.LP
The open parenthesis character,
.BR ( ,
must immediately follow the name of
the macro. If the name of a defined macro is not followed by a
.BR ( ,
it is
deemed to be a call of that macro with no arguments. Potential macro names
consist of alphanumeric characters and underscore
.RB ( _ ),
where the first
character is not a digit.
.sp
.LP
Leading unquoted blanks, TABs, and
.BR NEWLINE s
are ignored while collecting
arguments. Left and right single quotes are used to quote strings. The value of
a quoted string is the string stripped of the quotes.
.SS "Macro Processing"
.sp
.LP
When a macro name is recognized, its arguments are collected by searching for a
matching right parenthesis. If fewer arguments are supplied than are in the
macro definition, the trailing arguments are taken to be
.IR NULL .
Macro
evaluation proceeds normally during the collection of the arguments, and any
commas or right parentheses that happen to turn up within the value of a nested
call are as effective as those in the original input text. After argument
collection, the value of the macro is pushed back onto the input stream and
rescanned.
.SH OPTIONS
.sp
.LP
The options and their effects are as follows:
.sp
.ne 2
.mk
.na
.BI -B int
.ad
.RS 9n
.rt
Changes the size of the push-back and argument collection buffers from the
default of
.BR 4,096 .
.RE

.sp
.ne 2
.mk
.na
.B -e
.ad
.RS 9n
.rt
Operates interactively. Interrupts are ignored and the output is unbuffered.
.RE

.sp
.ne 2
.mk
.na
.BI -H int
.ad
.RS 9n
.rt
Changes the size of the symbol table hash array from the default of
.BR 199 .
The size should be prime.
.RE

.sp
.ne 2
.mk
.na
.B -s
.ad
.RS 9n
.rt
Enables line sync output for the C preprocessor (\fB#\fRline .\|.\|.\|)
.RE

.sp
.ne 2
.mk
.na
.BI -S int
.ad
.RS 9n
.rt
Changes the size of the call stack from the default of
.BR 100 "slots. Macros"
take three slots, and non-macro arguments take one.
.RE

.sp
.ne 2
.mk
.na
.BI -T int
.ad
.RS 9n
.rt
Changes the size of the token buffer from the default of
.BR 512 bytes.
.RE

.sp
.LP
To be effective, the above flags must appear before any file names and before
any
.B -D
or
.B -U
flags:
.sp
.ne 2
.mk
.na
\fB-D\fR \fIname\fR[\fB=val\fR]\fR
.ad
.RS 17n
.rt
Defines
.I name
to
.B val
or to
.I NULL
in
.BR val "'s absence."
.RE

.sp
.ne 2
.mk
.na
.BI -U name
.ad
.RS 17n
.rt
Undefines
.IR name .
.RE

.SH OPERANDS
.sp
.LP
The following operand is supported:
.sp
.ne 2
.mk
.na
.I file
.ad
.RS 8n
.rt
A path name of a text file to be processed. If no
.I file
is given, or if it
is \(mi, the standard input is read.
.RE

.SH USAGE
.sp
.LP
The
.B m4
utility makes available the following built-in macros. These
macros can be redefined, but once this is done the original meaning is lost.
Their values are
.I NULL
unless otherwise stated.
.sp
.ne 2
.mk
.na
.B changequote
.ad
.RS 15n
.rt
Change quote symbols to the first and second arguments. The symbols can be up
to five characters long.
.B changequote
without arguments restores the
original values (that is,
.BR `\|' ).
.RE

.sp
.ne 2
.mk
.na
.B changecom
.ad
.RS 15n
.rt
Change left and right comment markers from the default
.B #
and
.BR NEWLINE .
With no arguments, the comment mechanism is effectively disabled.
With one argument, the left marker becomes the argument and the right marker
becomes
.BR NEWLINE .
With two arguments, both markers are affected. Comment
markers can be up to five characters long.
.RE

.sp
.ne 2
.mk
.na
.B decr
.ad
.RS 15n
.rt
Returns the value of its argument decremented by 1.
.RE

.sp
.ne 2
.mk
.na
.B define
.ad
.RS 15n
.rt
The second argument is installed as the value of the macro whose name is the
first argument. Each occurrence of
.BI $ n
in the replacement text, where
.I n
is a digit, is replaced by the
.IR n -th
argument. Argument 0 is the
name of the macro; missing arguments are replaced by the null string;
.B $#
is replaced by the number of arguments;
.B $*
is replaced by a list of all
the arguments separated by commas;
.B $@
is like
.BR $* ,
but each argument
is quoted (with the current quotes).
.RE

.sp
.ne 2
.mk
.na
.B defn
.ad
.RS 15n
.rt
Returns the quoted definition of its argument(s). It is useful for renaming
macros, especially built-ins.
.RE

.sp
.ne 2
.mk
.na
.B divert
.ad
.RS 15n
.rt
.B m4
maintains 10 output streams, numbered 0-9. The final output is the
concatenation of the streams in numerical order. Initially stream 0 is the
current stream. The
.B divert
macro changes the current output stream to its
(digit-string) argument. Output diverted to a stream other than 0 through 9 is
discarded.
.RE

.sp
.ne 2
.mk
.na
.B divnum
.ad
.RS 15n
.rt
Returns the value of the current output stream.
.RE

.sp
.ne 2
.mk
.na
.B dnl
.ad
.RS 15n
.rt
Reads and discards characters up to and including the next
.BR NEWLINE .
.RE

.sp
.ne 2
.mk
.na
.B dumpdef
.ad
.RS 15n
.rt
Prints current names and definitions, for the named items, or for all if no
arguments are given.
.RE

.sp
.ne 2
.mk
.na
.B errprint
.ad
.RS 15n
.rt
Prints its argument on the diagnostic output file.
.RE

.sp
.ne 2
.mk
.na
.B ifdef
.ad
.RS 15n
.rt
If the first argument is defined, the value is the second argument, otherwise
the third. If there is no third argument, the value is
.IR NULL .
The word
.B unix
is predefined.
.RE

.sp
.ne 2
.mk
.na
.B ifelse
.ad
.RS 15n
.rt
This macro has three or more arguments. If the first argument is the same
string as the second, then the value is the third argument. If not, and if
there
are more than four arguments, the process is repeated with arguments 4, 5, 6
and
7. Otherwise, the value is either the fourth string, or, if it is not present,
.IR NULL .
.RE

.sp
.ne 2
.mk
.na
.B include
.ad
.RS 15n
.rt
Returns the contents of the file named in the argument.
.RE

.sp
.ne 2
.mk
.na
.B incr
.ad
.RS 15n
.rt
Returns the value of its argument incremented by 1. The value of the argument
is calculated by interpreting an initial digit-string as a decimal number.
.RE

.sp
.ne 2
.mk
.na
.B index
.ad
.RS 15n
.rt
Returns the position in its first argument where the second argument begins
(zero origin), or \(mi1 if the second argument does not occur.
.RE

.sp
.ne 2
.mk
.na
.B len
.ad
.RS 15n
.rt
Returns the number of characters in its argument.
.RE

.sp
.ne 2
.mk
.na
.B m4exit
.ad
.RS 15n
.rt
This macro causes immediate exit from
.BR m4 .
Argument 1, if given, is the
exit code; the default is
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
.B m4wrap
.ad
.RS 15n
.rt
Argument 1 is pushed back at final
.BR EOF .
Example:
\fBm4wrap(`cleanup(\|)')\fR
.RE

.sp
.ne 2
.mk
.na
.B maketemp
.ad
.RS 15n
.rt
Fills in a string of "\fBX\fR" characters in its argument with the current
process
.BR ID .
.RE

.sp
.ne 2
.mk
.na
.B popdef
.ad
.RS 15n
.rt
Removes current definition of its argument(s), exposing the previous one, if
any.
.RE

.sp
.ne 2
.mk
.na
.B pushdef
.ad
.RS 15n
.rt
Like
.BR define ,
but saves any previous definition.
.RE

.sp
.ne 2
.mk
.na
.B shift
.ad
.RS 15n
.rt
Returns all but its first argument. The other arguments are quoted and pushed
back with commas in between. The quoting nullifies the effect of the extra scan
that is subsequently be performed.
.RE

.sp
.ne 2
.mk
.na
.B sinclude
.ad
.RS 15n
.rt
This macro is identical to
.BR include ,
except that it says nothing if the
file is inaccessible.
.RE

.sp
.ne 2
.mk
.na
.B substr
.ad
.RS 15n
.rt
Returns a substring of its first argument. The second argument is a zero origin
number selecting the first character; the third argument indicates the length
of
the substring. A missing third argument is taken to be large enough to extend
to
the end of the first string.
.RE

.sp
.ne 2
.mk
.na
.B syscmd
.ad
.RS 15n
.rt
This macro executes the command given in the first argument. No value is
returned.
.RE

.sp
.ne 2
.mk
.na
.B sysval
.ad
.RS 15n
.rt
This macro is the return code from the last call to
.BR syscmd .
.RE

.sp
.ne 2
.mk
.na
.B translit
.ad
.RS 15n
.rt
Transliterates the characters in its first argument from the set given by the
second argument to the set given by the third. No abbreviations are permitted.
.RE

.sp
.ne 2
.mk
.na
.B traceon
.ad
.RS 15n
.rt
This macro with no arguments, turns on tracing for all macros (including
built-ins). Otherwise, turns on tracing for named macros.
.RE

.sp
.ne 2
.mk
.na
.B traceoff
.ad
.RS 15n
.rt
Turns off trace globally and for any macros specified.
.RE

.sp
.ne 2
.mk
.na
.B undefine
.ad
.RS 15n
.rt
Removes the definition of the macro named in its argument.
.RE

.sp
.ne 2
.mk
.na
.B undivert
.ad
.RS 15n
.rt
This macro causes immediate output of text from diversions named as arguments,
or all diversions if no argument. Text can be undiverted into another
diversion.
Undiverting discards the diverted text.
.RE

.SS "/usr/bin/m4"
.sp
.ne 2
.mk
.na
.B eval
.ad
.RS 8n
.rt
Evaluates its argument as an arithmetic expression, using 32-bit signed-integer
arithmetic. The following operators are supported: parentheses, unary -, unary
+, !, ~, *, /, %, +, -, relationals, bitwise &, |, &&, and ||. Octal and hex
numbers can be specified as in C. The second argument specifies the radix for
the result; the default is 10. The third argument  can be used to specify the
minimum number of digits in the result.
.RE

.SS "/usr/xpg4/bin/m4"
.sp
.ne 2
.mk
.na
.B eval
.ad
.RS 8n
.rt
Evaluates its argument as an arithmetic expression,  using  32-bit
signed-integer arithmetic. The following operators are supported: parentheses,
unary -, unary +, !, ~, *, /, %, +, -, <<, >>, relationals, bitwise &, |, &&,
and ||. Precedence and associativity are as in C. Octal and hex numbers can
also
be specified as in C. The second argument specifies the radix for the result;
the default is 10. The third argument can be used to specify the minimum number
of digits in the result.
.RE

.SH EXAMPLES
.LP
.B Example 1
Examples of m4 files
.sp
.LP
If the file
.B m4src
contains the lines:

.sp
.in +2
.nf
The value of `VER' is "VER".
        ifdef(`VER', ``VER'' is defined to be VER., VER is not defined.)
        ifelse(VER, 1, ``VER'' is `VER'.)
        ifelse(VER, 2, ``VER'' is `VER'., ``VER'' is not 2.)
        end
.fi
.in -2
.sp

.sp
.LP
then the command:

.sp
.in +2
.nf
\fBm4 m4src\fR
.fi
.in -2
.sp

.sp
.LP
or the command:

.sp
.in +2
.nf
\fBm4 -U VER m4src\fR
.fi
.in -2
.sp

.sp
.LP
produces the output:

.sp
.in +2
.nf
The value of VER is "VER".
        VER is not defined.

        VER is not 2.
        end
.fi
.in -2
.sp

.sp
.LP
The command:

.sp
.in +2
.nf
\fBm4 -D VER m4src\fR
.fi
.in -2
.sp

.sp
.LP
produces the output:

.sp
.in +2
.nf
The value of VER is "".
        VER is defined to be .

        VER is not 2.
        end
.fi
.in -2
.sp

.sp
.LP
The command:

.sp
.in +2
.nf
\fBm4 -D VER=1 m4src\fR
.fi
.in -2
.sp

.sp
.LP
produces the output:

.sp
.in +2
.nf
The value of VER is "1".
       VER is defined to be 1.
       VER is 1.
       VER is not 2.
       end
.fi
.in -2
.sp

.sp
.LP
The command:

.sp
.in +2
.nf
\fBm4 -D VER=2 m4src\fR
.fi
.in -2
.sp

.sp
.LP
produces the output:

.sp
.in +2
.nf
The value of VER is "2".
        VER is defined to be 2.

        VER is 2.
        end
.fi
.in -2
.sp

.SH ENVIRONMENT VARIABLES
.sp
.LP
See
.BR environ (5)
for descriptions of the following environment variables
that affect the execution of
.BR m4 :
.BR LANG ,
.BR LC_ALL ,
.BR LC_CTYPE ,
.BR LC_MESSAGES ,
and
.BR NLSPATH .
.SH EXIT STATUS
.sp
.LP
The following exit values are returned:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 6n
.rt
Successful completion.
.RE

.sp
.ne 2
.mk
.na
.B >0
.ad
.RS 6n
.rt
An error occurred
.RE

.sp
.LP
If the
.B m4exit
macro is used, the exit value can be specified by the input
file.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.SS "\fB/usr/bin/m4\fR"
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
.TE

.SS "\fB/usr/xpg4/bin/m4\fR"
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWxcu4
_
Interface StabilityStandard
.TE

.SH SEE ALSO
.sp
.LP
.BR as (1),
.BR attributes (5),
.BR environ (5),
.BR standards (5)
