'\" te
.\" Copyright (C) 2009, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH rpcgen 1 "24 Aug 2009" "SunOS 5.11" "User Commands"
.SH NAME
rpcgen \- an RPC protocol compiler
.SH SYNOPSIS
.LP
.nf
\fBrpcgen\fR \fIinfile\fR
.fi

.LP
.nf
\fBrpcgen\fR [\fB-a\fR] [\fB-A\fR] [\fB-b\fR] [\fB-C\fR] [\fB-D\fR \fIname\fR [= \fIvalue\fR]] [\fB-i\fR \fIsize\fR]
     [\fB-I\fR [\fB-K\fR \fIseconds\fR]] [\fB-L\fR] [\fB-M\fR] [\fB-N\fR] [\fB- T\fR] [\fB-v\fR]
     [\fB-Y\fR \fIpathname\fR] \fIinfile\fR
.fi

.LP
.nf
\fBrpcgen\fR [\fB-c\fR | \fB-h\fR | \fB-l\fR | \fB-m\fR | \fB-t\fR | \fB-Sc\fR | \fB-Ss\fR | \fB-Sm\fR]
     [\fB-o\fR \fIoutfile\fR] [\fIinfile\fR]
.fi

.LP
.nf
\fBrpcgen\fR [\fB-s\fR \fInettype\fR] [\fB-o\fR \fIoutfile\fR] [\fIinfile\fR]
.fi

.LP
.nf
\fBrpcgen\fR [\fB-n\fR \fInetid\fR] [\fB-o\fR \fIoutfile\fR] [\fIinfile\fR]
.fi

.SH DESCRIPTION
.sp
.LP
The
.B rpcgen
utility is a tool that generates C code to implement an
.B RPC
protocol. The input to
.B rpcgen
is a language similar to C
known as
.B RPC
Language (Remote Procedure Call Language).
.sp
.LP
The
.B rpcgen
utility is normally used as in the first synopsis where it
takes an input file and generates three output files. If the
.I infile
is
named
.BR proto.x ,
then
.B rpcgen
generates a header in
.BR proto.h ,
.B XDR
routines in
.BR proto_xdr.c ,
server-side stubs in
.BR proto_svc.c ,
and client-side stubs in
.BR proto_clnt.c .
With the
.B -T
option, it also generates the
.B RPC
dispatch table in
.BR proto_tbl.i .
.sp
.LP
.B rpcgen
can also generate sample client and server files that can be
customized to suit a particular application. The
.BR -Sc ,
.BR -Ss ,
and
.B -Sm
options generate sample client, server and makefile, respectively.
The
.B -a
option generates all files, including sample files. If the
infile is
.BR proto.x ,
then the client side sample file is written to
.BR proto_client.c ,
the server side sample file to
.BR proto_server.c
and the sample makefile to
.BR makefile.proto .
.sp
.LP
The server created can be started both by the port monitors (for example,
.B inetd
or
.BR listen )
or by itself. When it is started by a port
monitor, it creates servers only for the transport for which the file
descriptor
.B 0
was passed. The name of the transport must be specified
by setting up the environment variable
.BR PM_TRANSPORT .
When the server
generated by
.B rpcgen
is executed, it creates server handles for all the
transports specified in the
.B NETPATH
environment variable, or if it is
unset, it creates server handles for all the visible transports from the
.B /etc/netconfig
file. Note: the transports are chosen at run time and
not at compile time. When the server is self-started, it backgrounds itself
by default. A special define symbol
.B RPC_SVC_FG
can be used to run the
server process in foreground.
.sp
.LP
The second synopsis provides special features which allow for the creation
of more sophisticated
.B RPC
servers. These features include support for
user-provided
.B #defines
and
.B RPC
dispatch tables. The entries in
the
.B RPC
dispatch table contain:
.RS +4
.TP
.ie t \(bu
.el o
pointers to the service routine corresponding to that procedure
.RE
.RS +4
.TP
.ie t \(bu
.el o
a pointer to the input and output arguments
.RE
.RS +4
.TP
.ie t \(bu
.el o
the size of these routines
.RE
.sp
.LP
A server can use the dispatch table to check authorization and then to
execute the service routine. A client library can use the dispatch table to
deal with the details of storage management and
.B XDR
data conversion.
.sp
.LP
The other three synopses shown above are used when one does not want to
generate all the output files, but only a particular one. See the EXAMPLES
section below for examples of
.B rpcgen
usage. When
.B rpcgen
is
executed with the
.B -s
option, it creates servers for that particular
class of transports. When executed with the
.B -n
option, it creates a
server for the transport specified by
.IR netid .
If
.I infile
is not
specified,
.B rpcgen
accepts the standard input.
.sp
.LP
All the options mentioned in the second synopsis can be used with the other
three synopses, but the changes are made only to the specified output
file.
.sp
.LP
The C preprocessor
.B "cc -E"
is run on the input file before it is
actually interpreted by
.BR rpcgen .
For each type of output file,
.B rpcgen
defines a special preprocessor symbol for use by the
.B rpcgen
programmer:
.sp
.ne 2
.mk
.na
.B RPC_HDR
.ad
.RS 12n
.rt
defined when compiling into headers
.RE

.sp
.ne 2
.mk
.na
.B RPC_XDR
.ad
.RS 12n
.rt
defined when compiling into
.B XDR
routines
.RE

.sp
.ne 2
.mk
.na
.B RPC_SVC
.ad
.RS 12n
.rt
defined when compiling into server-side stubs
.RE

.sp
.ne 2
.mk
.na
.B RPC_CLNT
.ad
.RS 12n
.rt
defined when compiling into client-side stubs
.RE

.sp
.ne 2
.mk
.na
.B RPC_TBL
.ad
.RS 12n
.rt
defined when compiling into
.B RPC
dispatch tables
.RE

.sp
.LP
Any line beginning with ``\fB%\fR'' is passed directly into the output
file, uninterpreted by \fBrpcgen\fR, except that the leading ``\fB%\fR" is
stripped off. To specify the path name of the C preprocessor, use the
.B -Y
flag.
.sp
.LP
For every data type referred to in
.IR infile ,
.B rpcgen
assumes that
there exists a routine with the string
.B xdr_
prepended to the name of
the data type. If this routine does not exist in the \fBRPC\fR/\fBXDR\fR
library, it must be provided. Providing an undefined data type allows
customization of
.B XDR
routines.
.SS "Server Error Reporting"
.sp
.LP
By default, errors detected by
.B proto_svc.c
is reported to standard
error and/or the system log.
.sp
.LP
This behavior can be overridden by compiling the file with a definition of
.BR RPC_MSGOUT ,
for example,
.BR -DRPC_MSGOUT=mymsgfunc .
The function
specified is called to report errors. It must conform to the following
\fBprintf\fR-like signature:
.sp
.in +2
.nf
extern void RPC_MSGOUT(const char *fmt, .\|.\|.);
.fi
.in -2
.sp

.SH OPTIONS
.sp
.LP
The following options are supported:
.sp
.ne 2
.mk
.na
.B -a
.ad
.RS 18n
.rt
Generates all files, including sample files.
.RE

.sp
.ne 2
.mk
.na
.B -A
.ad
.RS 18n
.rt
Enables the Automatic
.B MT
mode in the server main program. In this
mode, the
.B RPC
library automatically creates threads to service client
requests. This option generates multithread-safe stubs by implicitly turning
on the
.B -M
option. Server multithreading modes and parameters can be
set using the
.BR rpc_control "(3NSL) call."
.B rpcgen
generated code does
not change the default values for the Automatic
.B MT
mode.
.RE

.sp
.ne 2
.mk
.na
.B -b
.ad
.RS 18n
.rt
Backward compatibility mode. Generates transport-specific
.B RPC
code
for older versions of the operating system.
.RE

.sp
.ne 2
.mk
.na
.B -c
.ad
.RS 18n
.rt
Compiles into
.B XDR
routines.
.RE

.sp
.ne 2
.mk
.na
.B -C
.ad
.RS 18n
.rt
Generates header and stub files which can be used with ANSI C compilers.
Headers generated with this flag can also be used with C++ programs.
.RE

.sp
.ne 2
.mk
.na
\fB-D\fIname\fB[=\fIvalue\fB]\fR
.ad
.RS 18n
.rt
Defines a symbol
.IR name .
Equivalent to the
.B #define
directive in
the source. If no
.I value
is given,
.I value
is defined as
.BR 1 .
This option can be specified more than once.
.RE

.sp
.ne 2
.mk
.na
.B -h
.ad
.RS 18n
.rt
Compiles into
.B C
data-definitions (a header). The
.B -T
option can
be used in conjunction to produce a header which supports
.B RPC
dispatch
tables.
.RE

.sp
.ne 2
.mk
.na
.B -i
.I size
.ad
.RS 18n
.rt
Size at which to start generating inline code. This option is useful for
optimization. The default
.I size
is 5.
.RE

.sp
.ne 2
.mk
.na
.B -I
.ad
.RS 18n
.rt
Compiles support for
.BR inetd "(1M) in the server side stubs. Such servers"
can be self-started or can be started by
.BR inetd .
When the server is
self-started, it backgrounds itself by default. A special define symbol
.B RPC_SVC_FG
can be used to run the server process in foreground, or the
user can simply compile without the
.B -I
option.
.sp
If there are no pending client requests, the
.B inetd
servers exit after
120 seconds (default). The default can be changed with the
.B -K
option.
All of the error messages for
.B inetd
servers are always logged with
.BR syslog (3C).
.sp
.B Note:
This option is supported for backward compatibility only. It
should always be used in conjunction with the
.B -b
option which
generates backward compatibility code. By default (that is, when
.B -b
is
not specified),
.B rpcgen
generates servers that can be invoked through
portmonitors.
.RE

.sp
.ne 2
.mk
.na
.B -K
.I seconds
.ad
.RS 18n
.rt
By default, services created using
.B rpcgen
and invoked through port
monitors wait 120 seconds after servicing a request before exiting. That
interval can be changed using the
.B -K
flag. To create a server that
exits immediately upon servicing a request, use
.BR "-K 0" .
To create
.RB "a server that never exits, the appropriate argument is" " -K"
.BR \(mi1 \&.
.sp
When monitoring for a server, some portmonitors, like
.BR listen (1M),
.B always
spawn a new process in response to a service request. If it is
known that a server are used with such a monitor, the server should exit
immediately on completion. For such servers,
.B rpcgen
should be used
with
.BR "-K 0" .
.RE

.sp
.ne 2
.mk
.na
.B -l
.ad
.RS 18n
.rt
Compiles into client-side stubs.
.RE

.sp
.ne 2
.mk
.na
.B -L
.ad
.RS 18n
.rt
When the servers are started in foreground, uses
.BR syslog (3C)
to log
the server errors instead of printing them on the standard error.
.RE

.sp
.ne 2
.mk
.na
.B -m
.ad
.RS 18n
.rt
Compiles into server-side stubs, but do not generate a "main" routine. This
option is useful for doing callback-routines and for users who need to write
their own "main" routine to do initialization.
.RE

.sp
.ne 2
.mk
.na
.B -M
.ad
.RS 18n
.rt
Generates multithread-safe stubs for passing arguments and results between
\fBrpcgen\fR-generated code and user written code. This option is useful for
users who want to use threads in their code.
.RE

.sp
.ne 2
.mk
.na
.B -N
.ad
.RS 18n
.rt
This option allows procedures to have multiple arguments. It also uses the
style of parameter passing that closely resembles C. So, when passing an
argument to a remote procedure, you do not have to pass a pointer to the
argument, but can pass the argument itself. This behavior is different from
the old style of
.BR rpcgen "-generated code. To maintain backward"
compatibility, this option is not the default.
.RE

.sp
.ne 2
.mk
.na
.B -n
.I netid
.ad
.RS 18n
.rt
Compiles into server-side stubs for the transport specified by
.IR netid .
There should be an entry for
.I netid
in the
.B netconfig
database.
This option can be specified more than once, so as to compile a server that
serves multiple transports.
.RE

.sp
.ne 2
.mk
.na
.B -o
.I outfile
.ad
.RS 18n
.rt
Specifies the name of the output file. If none is specified, standard
output is used (\fB-c\fR,
.BR -h ,
.BR -l ,
.BR -m ,
.BR -n ,
.BR -s ,
.BR -Sc ,
.BR -Sm ,
.BR -Ss ,
and
.B -t
modes only).
.RE

.sp
.ne 2
.mk
.na
.B -s
.I nettype
.ad
.RS 18n
.rt
Compiles into server-side stubs for all the transports belonging to the
class
.IR nettype .
The supported classes are
.BR netpath ,
.BR visible ,
.BR circuit_n ,
.BR circuit_v ,
.BR datagram_n ,
.BR datagram_v ,
.BR tcp ,
and
.B udp
(see \fBrpc\fR(3NSL) for the meanings associated
with these classes). This option can be specified more than once.
.B Note:
The transports are chosen at run time and not at compile time.
.RE

.sp
.ne 2
.mk
.na
.B -Sc
.ad
.RS 18n
.rt
Generates sample client code that uses remote procedure calls.
.RE

.sp
.ne 2
.mk
.na
.B -Sm
.ad
.RS 18n
.rt
Generates a sample Makefile which can be used for compiling the
application.
.RE

.sp
.ne 2
.mk
.na
.B -Ss
.ad
.RS 18n
.rt
Generates sample server code that uses remote procedure calls.
.RE

.sp
.ne 2
.mk
.na
.B -t
.ad
.RS 18n
.rt
Compiles into
.B RPC
dispatch table.
.RE

.sp
.ne 2
.mk
.na
.B -T
.ad
.RS 18n
.rt
Generates the code to support
.B RPC
dispatch tables.
.sp
The options
.BR -c ,
.BR -h ,
.BR -l ,
.BR -m ,
.BR -s ,
.BR -Sc ,
.BR -Sm ,
.BR -Ss ,
and
.B -t
are used exclusively to generate a
particular type of file, while the options
.B -D
and
.B -T
are global
and can be used with the other options.
.RE

.sp
.ne 2
.mk
.na
.B -v
.ad
.RS 18n
.rt
Displays the version number.
.RE

.sp
.ne 2
.mk
.na
.B -Y
.I pathname
.ad
.RS 18n
.rt
Gives the name of the directory where
.B rpcgen
starts looking for the C
preprocessor.
.RE

.SH OPERANDS
.sp
.LP
The following operand is supported:
.sp
.ne 2
.mk
.na
.I infile
.ad
.RS 10n
.rt
input file
.RE

.SH EXAMPLES
.LP
.B Example 1
Generating the output files and dispatch table
.sp
.LP
The following entry

.sp
.in +2
.nf
example% \fBrpcgen -T prot.x\fR
.fi
.in -2
.sp

.sp
.LP
generates all the five files:
.BR prot.h ,
.BR prot_clnt.c ,
.BR prot_svc.c ,
.BR prot_xdr.c ,
and
.BR prot_tbl.i .

.LP
.B Example 2
Sending headers to standard output
.sp
.LP
The following example sends the C data-definitions (header) to the standard
output:

.sp
.in +2
.nf
example% \fBrpcgen -h prot.x\fR
.fi
.in -2
.sp

.LP
.B Example 3
Sending a test version
.sp
.LP
To send the test version of the
.BR -DTEST ,
server side stubs for all the
transport belonging to the class
.B datagram_n
to standard output, use:

.sp
.in +2
.nf
example% \fBrpcgen -s datagram_n -DTEST prot.x\fR
.fi
.in -2
.sp

.LP
.B Example 4
Creating server side stubs
.sp
.LP
To create the server side stubs for the transport indicated by
.IR netid
.BR tcp ,
use:

.sp
.in +2
.nf
example% \fBrpcgen -n tcp -o prot_svc.c prot.x\fR
.fi
.in -2
.sp

.SH EXIT STATUS
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 6n
.rt
Successful operation.
.RE

.sp
.ne 2
.mk
.na
.B >0
.ad
.RS 6n
.rt
An error occurred.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWbtool
.TE

.SH SEE ALSO
.sp
.LP
.BR inetd (1M),
.BR listen (1M),
.BR rpc (3NSL),
.BR rpc_control (3NSL),
.BR rpc_svc_calls (3NSL),
.BR syslog (3C),
.BR netconfig (4),
.BR attributes (5)
.sp
.LP
The
.B rpcgen
chapter in the \fIONC+ Developer\&'s Guide\fR manual.
