'\" te
.\" Copyright 1989 AT&T Copyright (c) 1992, X/Open Company Limited All Rights Reserved
.\" Portions Copyright (c) 2009, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH tr 1 "3 Mar 2009" "SunOS 5.11" "User Commands"
.SH NAME
tr \- translate characters
.SH SYNOPSIS
.LP
.nf
\fB/usr/bin/tr\fR [\fB-cds\fR] [\fIstring1\fR [\fIstring2\fR]]
.fi

.LP
.nf
\fB/usr/xpg4/bin/tr\fR [\fB-cs\fR] \fIstring1\fR \fIstring2\fR
.fi

.LP
.nf
\fB/usr/xpg4/bin/tr\fR \fB-s\fR | \fB-d\fR [\fB-c\fR] \fIstring1\fR
.fi

.LP
.nf
\fB/usr/xpg4/bin/tr\fR \fB-ds\fR [\fB-c\fR] \fIstring1\fR \fIstring2\fR
.fi

.LP
.nf
\fB/usr/xpg6/bin/tr\fR [\fB-c\fR | \fB-C\fR] [\fB-s\fR] \fIstring1\fR \fIstring2\fR
.fi

.LP
.nf
\fB/usr/xpg6/bin/tr\fR \fB-s\fR [\fB-c\fR | \fB-C\fR] \fIstring1\fR
.fi

.LP
.nf
\fB/usr/xpg6/bin/tr\fR \fB-d\fR [\fB-c\fR | \fB-C\fR] \fIstring1\fR
.fi

.LP
.nf
\fB/usr/xpg6/bin/tr\fR \fB-ds\fR [\fB-c\fR | \fB-C\fR] \fIstring1\fR \fIstring2\fR
.fi

.SH DESCRIPTION
.sp
.LP
The
.B tr
utility copies the standard input to the standard output with
substitution or deletion of selected characters. The options specified and
the
.I string1
and
.I string2
operands control translations that occur
while copying characters and single-character collating elements.
.SH OPTIONS
.sp
.LP
The following options are supported:
.sp
.ne 2
.mk
.na
.B -c
.ad
.RS 6n
.rt
Complements the set of values specified by
.IR string1 .
.RE

.sp
.ne 2
.mk
.na
.B -C
.ad
.RS 6n
.rt
Complements the set of characters specified by
.IR string1 .
.RE

.sp
.ne 2
.mk
.na
.B -d
.ad
.RS 6n
.rt
Deletes all occurrences of input characters that are specified by
.IR string1 .
.RE

.sp
.ne 2
.mk
.na
.B -s
.ad
.RS 6n
.rt
Replaces instances of repeated characters with a single character.
.RE

.sp
.LP
When the
.B -d
option is not specified:
.RS +4
.TP
.ie t \(bu
.el o
Each input character found in the array specified by
.I string1
is
replaced by the character in the same relative position in the array
specified by
.IR string2 .
When the array specified by
.I string2
is
shorter than the one specified by
.IR string1 ,
the results are
unspecified.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If the
.B -c
option is specified, the complements of the values
specified by
.I string1
are placed in the array in ascending order by
binary value.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If the
.B -C
option is specified, the complements of the characters
specified by
.I string1
(the set of all characters in the current
character set, as defined by the current setting of
.BR LC_CTYPE ,
except
for those actually specified in the
.I string1
operand) are placed in the
array in ascending collation sequence, as defined by the current setting of
.BR LC_COLLATE .
.RE
.RS +4
.TP
.ie t \(bu
.el o
Because the order in which characters specified by character class
expressions or equivalence class expressions is undefined, such expressions
should only be used if the intent is to map several characters into one. An
exception is case conversion, as described previously.
.RE
.sp
.LP
When the
.B -d
option is specified:
.RS +4
.TP
.ie t \(bu
.el o
Input characters found in the array specified by
.I string1
are
deleted.
.RE
.RS +4
.TP
.ie t \(bu
.el o
When the
.B -C
option is specified with
.BR -d ,
all values except
those specified by
.I string1
are deleted. The contents of
.I string2
are ignored, unless the
.B -s
option is also specified.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If the
.B -c
option is specified, the complements of the values
specified by
.I string1
are placed in the array in ascending order by
binary value.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The same string cannot be used for both the
.B -d
and the
.BR -s
option. When both options are specified, both
.I string1
(used for
deletion) and
.I string2
(used for squeezing) are required.
.RE
.sp
.LP
When the
.B -s
option is specified, after any deletions or translations
have taken place, repeated sequences of the same character is replaced by
one occurrence of the same character, if the character is found in the array
specified by the last operand. If the last operand contains a character
class, such as the following example:
.sp
.in +2
.nf
\fBtr -s '[:space:]'\fR
.fi
.in -2
.sp

.sp
.LP
the last operand's array contains all of the characters in that character
class. However, in a case conversion, as described previously, such as
.sp
.in +2
.nf
\fBtr -s '[:upper:]' '[:lower:]'\fR
.fi
.in -2
.sp

.sp
.LP
the last operand's array contains only those characters defined as the
second characters in each of the
.B toupper
or
.B tolower
character
pairs, as appropriate. (See
.BR toupper (3C)
and
.BR tolower (3C)).
.sp
.LP
An empty string used for
.I string1
or
.I string2
produces undefined
results.
.SH OPERANDS
.sp
.LP
The following operands are supported:
.sp
.ne 2
.mk
.na
.I string1
.ad
.br
.na
.I string2
.ad
.RS 11n
.rt
Translation control strings. Each string represents a set of characters to
be converted into an array of characters used for the translation.
.RE

.sp
.LP
The operands
.I string1
and
.I string2
(if specified) define two
arrays of characters. The constructs in the following list can be used to
specify characters or single-character collating elements. If any of the
constructs result in multi-character collating elements,
.B tr
excludes,
without a diagnostic, those multi-character elements from the resulting
array.
.sp
.ne 2
.mk
.na
.I character
.ad
.RS 15n
.rt
Any character not described by one of the conventions below represents
itself.
.RE

.sp
.ne 2
.mk
.na
\fB\e\fIoctal\fR
.ad
.RS 15n
.rt
Octal sequences can be used to represent characters with specific coded
values. An octal sequence consists of a backslash followed by the longest
sequence of one-, two-, or three-octal-digit characters (01234567). The
sequence causes the character whose encoding is represented by the one-,
two- or three-digit octal integer to be placed into the array. Multi-byte
characters require multiple, concatenated escape sequences of this type,
including the leading \e for each byte.
.RE

.sp
.ne 2
.mk
.na
\fB\e\fIcharacter\fR
.ad
.RS 15n
.rt
The backslash-escape sequences \fB\ea\fR, \fB\eb\fR, \fB\ef\fR, \fB\en\fR,
\fB\er\fR, \fB\et\fR, and \fB\ev\fR are supported. The results of using any
other character, other than an octal digit, following the backslash are
unspecified.
.RE

.SS "/usr/xpg4/bin/tr"
.sp
.ne 2
.mk
.na
.I c-c
.ad
.RS 7n
.rt

.RE

.SS "/usr/bin/tr"
.sp
.ne 2
.mk
.na
\fB[\fIc-c\fR]\fR
.ad
.RS 13n
.rt
In the POSIX locale, this construct represents the range of collating
elements between the range endpoints (as long as neither endpoint is an
octal sequence of the form \fB\e\fIoctal\fR), inclusively, as defined by
the collation sequence. The characters or collating elements in the range
are placed in the array in ascending collation sequence. If the second
endpoint precedes the starting endpoint in the collation sequence, it is
unspecified whether the range of collating elements is empty, or this
construct is treated as invalid. In locales other than the POSIX locale,
this construct has unspecified behavior.
.sp
If either or both of the range endpoints are octal sequences of the form
\fB\e\fIoctal\fR, represents the range of specific coded binary values
between two range endpoints, inclusively.
.RE

.sp
.ne 2
.mk
.na
\fB[:\fIclass\fB:]\fR
.ad
.RS 13n
.rt
Represents all characters belonging to the defined character class, as
defined by the current setting of the
.B LC_CTYPE
locale category. The
following character class names are accepted when specified in
.IR string1 :
.sp
.in +2
.nf
alnum  blank  digit  lower  punct  upper
alpha  cntrl  graph  print  space  xdigit
.fi
.in -2
.sp

In addition, character class expressions of the form
\fB[:\fIname\fB:]\fR are recognized in those locales where the
.I name
keyword has been given a
.B charclass
definition in the
.B LC_CTYPE
category.
.sp
When both the
.B -d
and
.B -s
options are specified, any of the
character class names are accepted in
.IR string2 .
Otherwise, only
character class names
.B lower
or
.B upper
are valid in
.IR string2
and then only if the corresponding character class
.B upper
and
.BR lower ,
respectively, is specified in the same relative position in
.IR string1 .
Such a specification is interpreted as a request for case
conversion. When
.B [:lower:]
appears in
.I string1
and
.B [:upper:]
appears in
.I string2,
the arrays contain the characters
from the
.B toupper
mapping in the
.B LC_CTYPE
category of the current
locale. When \fB[:upper:]\fR appears in
.I string1
and \fB[:lower:]\fR
appears in
.I string2,
the arrays contain the characters from the
.B tolower
mapping in the
.B LC_CTYPE
category of the current locale.
The first character from each mapping pair is in the array for
.IR string1
and the second character from each mapping pair is in the array for
.I string2
in the same relative position.
.sp
Except for case conversion, the characters specified by a character class
expression are placed in the array in an unspecified order.
.sp
If the name specified for
.I class
does not define a valid character
class in the current locale, the behavior is undefined.
.RE

.sp
.ne 2
.mk
.na
\fB[=\fIequiv\fB=]\fR
.ad
.RS 13n
.rt
Represents all characters or collating elements belonging to the same
equivalence class as
.IR equiv ,
as defined by the current setting of the
.B LC_COLLATE
locale category. An equivalence class expression is allowed
only in
.IR string1 ,
or in
.I string2
when it is being used by the
combined
.B -d
and
.B -s
options. The characters belonging to the
equivalence class are placed in the array in an unspecified order.
.RE

.sp
.ne 2
.mk
.na
\fB[\fIx*n\fR]\fR
.ad
.RS 13n
.rt
Represents
.I n
repeated occurrences of the character
.IR x .
Because
this expression is used to map multiple characters to one, it is only valid
when it occurs in
.IR string2 .
If
.I n
has a leading
.BR 0 ,
it is
interpreted as an octal value. Otherwise, it is interpreted as a decimal
value.
.sp
If
.I n
is omitted or is
.BR 0 ,
.B /usr/bin/tr
interprets this as
huge;
.B /usr/xpg4/bin/tr
and
.B /usr/xpg6/bin/tr
interprets this as
large enough to extend the\fIstring2\fR-based sequence to the length of the
\fIstring1\fR-based sequence.
.RE

.SH USAGE
.sp
.LP
See
.BR largefile (5)
for the description of the behavior of
.B tr
when
encountering files greater than or equal to 2 Gbyte ( 2^31 bytes).
.SH EXAMPLES
.LP
.B Example 1
Creating a list of words
.sp
.LP
The following example creates a list of all words in
.IR file1 ,
one per
line in
.IR file2 ,
where a word is taken to be a maximal string of
letters.

.sp
.in +2
.nf
\fBtr \(mics "[:alpha:]" "[\en*]" <file1 >file2\fR
.fi
.in -2
.sp

.LP
.B Example 2
Translating characters
.sp
.LP
This example translates all lower-case characters in
.B file1
to
upper-case and writes the results to standard output.

.sp
.in +2
.nf
\fBtr "[:lower:]" "[:upper:]" <file1\fR
.fi
.in -2
.sp

.sp
.LP
Notice that the caveat expressed in the corresponding example in XPG3 is no
longer in effect. This case conversion is now a special case that employs
the
.B tolower
and
.B toupper
classifications, ensuring that proper
mapping is accomplished (when the locale is correctly defined).

.LP
.B Example 3
Identifying equivalent characters
.sp
.LP
This example uses an equivalence class to identify accented variants of the
base character
.B e
in
.BR file1 ,
which are stripped of diacritical
marks and written to
.BR file2 .

.sp
.in +2
.nf
\fBtr "[=e=]" e <file1 >file2\fR
.fi
.in -2
.sp

.SH ENVIRONMENT VARIABLES
.sp
.LP
See
.BR environ (5)
for descriptions of the following environment
variables that affect the execution of
.BR tr :
.BR LANG ,
.BR LC_ALL ,
.BR LC_COLLATE ,
.BR LC_CTYPE ,
.BR LC_MESSAGES ,
and
.BR NLSPATH .
.SH EXIT STATUS
.sp
.LP
The following exit values are returned:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 6n
.rt
All input was processed successfully.
.RE

.sp
.ne 2
.mk
.na
.B >0
.ad
.RS 6n
.rt
An error occurred.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.SS "/usr/bin/tr"
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
_
CSIEnabled
.TE

.SS "/usr/xpg4/bin/tr"
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWxcu4
_
CSIEnabled
_
Interface StabilityCommitted
_
StandardSee \fBstandards\fR(5).
.TE

.SS "/usr/xpg6/bin/tr"
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWxcu6
_
CSIEnabled
_
Interface StabilityCommitted
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
.BR ed (1),
.BR sed (1),
.BR sh (1),
.BR tolower (3C),
.BR toupper (3C),
.BR ascii (5),
.BR attributes (5),
.BR environ (5),
.BR largefile (5),
.BR regex (5),
.BR standards (5)
.SH NOTES
.sp
.LP
Unlike some previous versions,
.B /usr/xpg4/bin/tr
correctly processes
.B NUL
characters in its input stream.
.B NUL
characters can be
stripped by using
.B "tr -d"
.BR \&'\e000' .
