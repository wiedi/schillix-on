'\" te
.\" Copyright 1989 AT&T
.\" Copyright (c) 2009, Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ld 1 "18 Sep 2009" "SunOS 5.11" "User Commands"
.SH NAME
ld \- link-editor for object files
.SH SYNOPSIS
.LP
.nf
\fBld\fR [\fB-32\fR | \fB-64\fR] [\fB-a\fR | \fB-r\fR] [\fB-b\fR] [\fB-B\fRdirect | nodirect]
[\fB-B\fR dynamic | static] [\fB-B\fR eliminate] [\fB-B\fR group] [\fB-B\fR local]
[\fB-B\fR reduce] [\fB-B\fR symbolic] [\fB-c\fR \fIname\fR] [\fB-C\fR] [\fB-d\fR y | n]
[\fB-D\fR \fItoken\fR,.\|.\|.] [\fB-e\fR \fIepsym\fR] [\fB-f\fR \fIname\fR | \fB-F\fR \fIname\fR] [\fB-G\fR] [\fB-h\fR \fIname\fR]
[\fB-i\fR] [\fB-I\fR \fIname\fR] [\fB-l\fR \fIx\fR] [\fB-L\fR \fIpath\fR] [\fB-m\fR] [\fB-M\fR \fImapfile\fR]
[\fB-N\fR \fIstring\fR] [\fB-o\fR \fIoutfile\fR] [\fB-p\fR \fIauditlib\fR] [\fB-P\fR \fIauditlib\fR]
[\fB-Q\fR y | n] [\fB-R\fR \fIpath\fR] [\fB-s\fR] [\fB-S\fR \fIsupportlib\fR] [\fB-t\fR]
[\fB-u\fR \fIsymname\fR] [\fB-V\fR] [\fB-Y P\fI,dirlist\fR] [\fB-z\fR absexec]
[\fB-z\fR allextract | defaultextract | weakextract ]
[\fB-z\fR altexec64] [\fB-z\fR combreloc | nocombreloc ] [\fB-z\fR defs | nodefs]
[\fB-z\fR direct | nodirect] [\fB-z\fR endfiltee] [\fB-z\fR finiarray=\fIfunction\fR]
[\fB-z\fR globalaudit] [\fB-z\fR groupperm | nogroupperm] [\fB-z\fR help ]
[\fB-z\fR ignore | record] [\fB-z\fR initarray=\fIfunction\fR] [\fB-z\fR initfirst]
[\fB-z\fR interpose] [\fB-z\fR lazyload | nolazyload]
[\fB-z\fR ld32=\fIarg1\fR,\fIarg2\fR,.\|.\|.] [\fB-z\fR ld64=\fIarg1\fR,\fIarg2\fR,.\|.\|.]
[\fB-z\fR loadfltr] [\fB-z\fR muldefs] [\fB-z\fR nocompstrtab] [\fB-z\fR nodefaultlib]
[\fB-z\fR nodelete] [\fB-z\fR nodlopen] [\fB-z\fR nodump] [\fB-z\fR noldynsym]
[\fB-z\fR nopartial] [\fB-z\fR noversion] [\fB-z\fR now] [\fB-z\fR origin]
[\fB-z\fR preinitarray=\fIfunction\fR] [\fB-z\fR redlocsym] [\fB-z\fR relaxreloc]
[\fB-z\fR rescan-now] [\fB-z\fR recan] [\fB-z\fR rescan-start \fI\&.\|.\|.\fR \fB-z\fR rescan-end]]
[\fB-z\fR target=sparc|x86] [\fB-z\fR text | textwarn | textoff]
[\fB-z\fR verbose] [\fB-z\fR wrap=\fIsymbol\fR] \fIfilename\fR.\|.\|.
.fi

.SH DESCRIPTION
.sp
.LP
The link-editor,
.BR ld ,
combines relocatable object files by resolving
symbol references to symbol definitions, together with performing
relocations.
.B ld
operates in two modes, static or dynamic, as governed
by the
.B -d
option. In all cases, the output of
.B ld
is left in the
file
.B a.out
by default. See NOTES.
.sp
.LP
In dynamic mode,
.BR -dy ,
the default, relocatable object files that are
provided as arguments are combined to produce an executable object file.
This file is linked at execution with any shared object files that are
provided as arguments. If the
.B -G
option is specified, relocatable
object files are combined to produce a shared object. Without the \fB-G\fR
option, a dynamic executable is created.
.sp
.LP
In static mode,
.BR -dn ,
relocatable object files that are provided as
arguments are combined to produce a static executable file. If the \fB-r\fR
option is specified, relocatable object files are combined to produce one
relocatable object file. See
.BR "Static Executables" .
.sp
.LP
Dynamic linking is the most common model for combining relocatable objects,
and the eventual creation of processes within Solaris. This environment
tightly couples the work of the link-editor and the runtime linker,
.BR ld.so.1 (1).
Both of these utilities, together with their related
technologies and utilities, are extensively documented in the \fILinker and
Libraries Guide\fR.
.sp
.LP
If any argument is a library,
.B ld
by default searches the library
exactly once at the point the library is encountered on the argument list.
The library can be either a shared object or relocatable archive. See
.BR ar.h (3HEAD)).
.sp
.LP
A shared object consists of an indivisible, whole unit that has been
generated by a previous link-edit of one or more input files. When the
link-editor processes a shared object, the entire contents of the shared
object become a logical part of the resulting output file image. The shared
object is not physically copied during the link-edit as its actual inclusion
is deferred until process execution. This logical inclusion means that all
symbol entries defined in the shared object are made available to the
link-editing process. See Chapter 4,
.I "Shared Objects,"
in \fILinker and
Libraries Guide\fR
.sp
.LP
For an archive library,
.B ld
loads only those routines that define an
unresolved external reference.
.B ld
searches the symbol table of the
archive library sequentially to resolve external references that can be
satisfied by library members. This search is repeated until no external
references can be resolved by the archive. Thus, the order of members in the
library is functionally unimportant, unless multiple library members exist
that define the same external symbol. Archive libraries that have
interdependencies can require multiple command line definitions, or the use
of one of the
.B "-z rescan"
options. See
.I "Archive Processing"
in
.IR "Linker and Libraries Guide" .
.sp
.LP
\fBld\fR is a cross link-editor, able to link 32-bit objects or 64-bit
objects, for Sparc or x86 targets.
.B ld
uses the
.B ELF
class and
machine type of the first relocatable object on the command line to govern
the mode in which to operate. The mixing of 32-bit objects and 64-bit
objects is not permitted. Similarly, only objects of a single machine type
are allowed. See the
.BR -32 ,
\fB-64\fR and \fB-z target\fR options, and
the
.B LD_NOEXEC_64
environment variable.
.SS "Static Executables"
.sp
.LP
The creation of static executables has been discouraged for many releases.
In fact, 64-bit system archive libraries have never been provided. Because a
static executable is built against system archive libraries, the executable
contains system implementation details. This self-containment has a number
of drawbacks.
.RS +4
.TP
.ie t \(bu
.el o
The executable is immune to the benefits of system patches delivered as
shared objects. The executable therefore, must be rebuilt to take advantage
of many system improvements.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The ability of the executable to run on future releases can be
compromised.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The duplication of system implementation details negatively affects system
performance.
.RE
.sp
.LP
With Solaris 10, 32-bit system archive libraries are no longer provided.
Without these libraries, specifically
.BR libc.a ,
the creation of static
executables is no longer achievable without specialized system knowledge.
However, the capability of
.B ld
to process static linking options, and
the processing of archive libraries, remains unchanged.
.SH OPTIONS
.sp
.LP
The following options are supported.
.sp
.ne 2
.mk
.na
\fB-32\fR | \fB-64\fR
.ad
.sp .6
.RS 4n
Creates a 32-bit, or 64-bit object.
.sp
By default, the class of the object being generated is determined from the
first
.B ELF
object processed from the command line. If no objects are
specified, the class is determined by the first object encountered within
the first archive processed from the command line. If there are no objects
or archives, the link-editor creates a 32-bit object.
.sp
The
.B -64
option is required to create a 64-bit object solely from a
mapfile.
.sp
This
.B -32
or
.B -64
options can also be used in the rare case of
linking entirely from an archive that contains a mixture of 32 and 64-bit
objects. If the first object in the archive is not the class of the object
that is required to be created, then the
.B -32
or
.B -64
option can
be used to direct the link-editor. See \fIThe 32-bit link-editor and 64-bit
link-editor\fR in
.IR "Linker and Libraries Guide" .
.RE

.sp
.ne 2
.mk
.na
.B -a
.ad
.sp .6
.RS 4n
In static mode only, produces an executable object file. Undefined
references are not permitted. This option is the default behavior for static
mode. The
.B -a
option can not be used with the
.B -r
option. See
\fBStatic Executables\fR under DESCRIPTION.
.RE

.sp
.ne 2
.mk
.na
.B -b
.ad
.sp .6
.RS 4n
In dynamic mode only, provides no special processing for dynamic executable
relocations that reference symbols in shared objects. Without the \fB-b\fR
option, the link-editor applies techniques within a dynamic executable so
that the text segment can remain read-only. One technique is the creation of
special position-independent relocations for references to functions that
are defined in shared objects. Another technique arranges for data objects
that are defined in shared objects to be copied into the memory image of an
executable at runtime.
.sp
The
.B -b
option is intended for specialized dynamic objects and is not
recommended for general use. Its use suppresses all specialized processing
required to ensure an object's shareability, and can even prevent the
relocation of 64-bit executables.
.RE

.sp
.ne 2
.mk
.na
\fB-B direct\fR | \fBnodirect\fR
.ad
.sp .6
.RS 4n
These options govern direct binding.
.B "-B direct"
establishes
direct binding information by recording the relationship between each symbol
reference together with the dependency that provides the definition. In
addition, direct binding information is established between each symbol
reference and an associated definition within the object being created. The
runtime linker uses this information to search directly for a symbol in the
associated object rather than to carry out a default symbol search.
.sp
Direct binding information can only be established to dependencies
specified with the link-edit. Thus, you should use the \fB-z defs\fR
option. Objects that wish to interpose on symbols in a direct binding
environment should identify themselves as interposers with the
.BR -z
\fBinterpose\fR option. The use of \fB-B direct\fR enables \fB-z\fR
\fBlazyload\fR for all dependencies.
.sp
The
.B "-B nodirect"
option prevents any direct binding to the
interfaces offered by the object being created. The object being created can
continue to directly bind to external interfaces by specifying the
.BR -z
\fBdirect\fR option. See Appendix D, \fIDirect Bindings,\fR in \fILinker and
Libraries Guide\fR.
.RE

.sp
.ne 2
.mk
.na
\fB-B dynamic\fR | \fBstatic\fR
.ad
.sp .6
.RS 4n
Options governing library inclusion.
.B "-B dynamic"
is valid in
dynamic mode only. These options can be specified any number of times on the
command line as toggles: if the
.B "-B static"
option is given, no
shared objects are accepted until
.B "-B dynamic"
is seen. See the
\fB-l\fR option.
.RE

.sp
.ne 2
.mk
.na
.B -B eliminate
.ad
.sp .6
.RS 4n
Causes any global symbols, not assigned to a version definition, to be
eliminated from the symbol table. Version definitions can be supplied by
means of a \fBmapfile\fR to indicate the global symbols that should remain
visible in the generated object. This option achieves the same symbol
elimination as the
.I auto-elimination
directive that is available as
part of a \fBmapfile\fR version definition. This option can be useful when
combining versioned and non-versioned relocatable objects. See also the
\fB-B local\fR option and the \fB-B reduce\fR option. See
\fIDefining Additional Symbols with a mapfile\fR in \fILinker and Libraries
Guide\fR.
.RE

.sp
.ne 2
.mk
.na
.B -B group
.ad
.sp .6
.RS 4n
Establishes a shared object and its dependencies as a group. Objects within
the group are bound to other members of the group at runtime. This mode is
similar to adding the object to the process by using
.BR dlopen "(3C) with"
the
.B RTLD_GROUP
mode. An object that has an explicit dependency on a
object identified as a group, becomes a member of the group.
.sp
As the group must be self contained, use of the
.B "-B group"
option
also asserts the \fB-z defs\fR option.
.RE

.sp
.ne 2
.mk
.na
.B -B local
.ad
.sp .6
.RS 4n
Causes any global symbols, not assigned to a version definition, to be
reduced to local. Version definitions can be supplied by means of a
\fBmapfile\fR to indicate the global symbols that should remain visible in
the generated object. This option achieves the same symbol reduction as the
\fIauto-reduction\fR directive that is available as part of a \fBmapfile\fR
version definition. This option can be useful when combining versioned and
.RB "non-versioned relocatable objects. See also the" " -B eliminate"
option and the
.B "-B reduce"
option. See \fIDefining Additional
Symbols with a mapfile\fR in
.IR "Linker and Libraries Guide" .
.RE

.sp
.ne 2
.mk
.na
.B -B reduce
.ad
.sp .6
.RS 4n
When generating a relocatable object, causes the reduction of symbolic
information defined by any version definitions. Version definitions can be
supplied by means of a \fBmapfile\fR to indicate the global symbols that
should remain visible in the generated object. By default, when a
relocatable object is generated, version definitions are only recorded in
the output image. The actual reduction of symbolic information is carried
out when the object is used in the construction of a dynamic executable or
shared object. The
.B "-B reduce"
option is applied automatically
when a dynamic executable or shared object is created.
.RE

.sp
.ne 2
.mk
.na
.B -B symbolic
.ad
.sp .6
.RS 4n
In dynamic mode only. When building a shared object, binds references to
global symbols to their definitions, if available, within the object.
Normally, references to global symbols within shared objects are not bound
until runtime, even if definitions are available. This model allows
definitions of the same symbol in an executable or other shared object to
override the object's own definition.
.B ld
issues warnings for undefined
symbols unless \fB-z defs\fR overrides.
.sp
The
.B "-B symbolic"
option is intended for specialized dynamic
objects and is not recommended for general use. To reduce the runtime
relocation processing that is required an object, the creation of a version
definition is recommended.
.RE

.sp
.ne 2
.mk
.na
\fB-c\fR \fIname\fR
.ad
.sp .6
.RS 4n
Records the configuration file
.I name
for use at runtime. Configuration
files can be employed to alter default search paths, provide a directory
cache, together with providing alternative object dependencies. See
.BR crle (1).
.RE

.sp
.ne 2
.mk
.na
.B -C
.ad
.sp .6
.RS 4n
Demangles C++ symbol names displayed in diagnostic messages.
.RE

.sp
.ne 2
.mk
.na
\fB-d y\fR | \fBn\fR
.ad
.sp .6
.RS 4n
When
.BR "-d y" ,
the default, is specified,
.B ld
uses dynamic
linking. When
.B "-d n"
is specified,
.B ld
uses static linking.
See
.B "Static Executables"
.RB "under DESCRIPTION, and" " -B"
\fBdynamic\fR|\fBstatic\fR.
.RE

.sp
.ne 2
.mk
.na
\fB-D\fR \fItoken\fR,.\|.\|.\fR
.ad
.sp .6
.RS 4n
Prints debugging information as specified by each
.IR token ,
to the
standard error. The special token
.B help
indicates the full list of
tokens available. See
.I "Debugging Aids"
in \fILinker and Libraries
Guide\fR.
.RE

.sp
.ne 2
.mk
.na
\fB-e\fR \fIepsym\fR
.ad
.br
.na
\fB--entry\fR \fIepsym\fR
.ad
.sp .6
.RS 4n
Sets the entry point address for the output file to be the symbol
.IR epsym .
.RE

.sp
.ne 2
.mk
.na
\fB-f\fR \fIname\fR
.ad
.br
.na
\fB--auxiliary\fR \fIname\fR
.ad
.sp .6
.RS 4n
Useful only when building a shared object. Specifies that the symbol table
of the shared object is used as an auxiliary filter on the symbol table of
the shared object specified by
.IR name .
Multiple instances of this option
are allowed. This option can not be combined with the
.B -F
option. See
\fIGenerating Auxiliary Filters\fR in
.IR "Linker and Libraries Guide" .
.RE

.sp
.ne 2
.mk
.na
\fB-F\fR \fIname\fR
.ad
.br
.na
\fB--filter\fR \fIname\fR
.ad
.sp .6
.RS 4n
Useful only when building a shared object. Specifies that the symbol table
of the shared object is used as a filter on the symbol table of the shared
object specified by
.IR name .
Multiple instances of this option are
allowed. This option can not be combined with the \fB-f\fR option. See
\fIGenerating Standard Filters\fR in
.IR "Linker and Libraries Guide" .
.RE

.sp
.ne 2
.mk
.na
.B -G
.ad
.br
.na
.B -shared
.ad
.sp .6
.RS 4n
In dynamic mode only, produces a shared object. Undefined symbols are
allowed. See Chapter 4,
.I "Shared Objects,"
in \fILinker and Libraries
Guide\fR.
.RE

.sp
.ne 2
.mk
.na
\fB-h\fR \fIname\fR
.ad
.br
.na
\fB--soname\fR \fIname\fR
.ad
.sp .6
.RS 4n
In dynamic mode only, when building a shared object, records
.I name
in
the object's dynamic section.
.I name
is recorded in any dynamic objects
that are linked with this object rather than the object's file system name.
Accordingly,
.I name
is used by the runtime linker as the name of the
shared object to search for at runtime. See \fIRecording a Shared Object
Name\fR in
.IR "Linker and Libraries Guide" .
.RE

.sp
.ne 2
.mk
.na
.B -i
.ad
.sp .6
.RS 4n
Ignores
.BR LD_LIBRARY_PATH .
This option is useful when an
\fBLD_LIBRARY_PATH\fR setting is in effect to influence the runtime library
search, which would interfere with the link-editing being performed.
.RE

.sp
.ne 2
.mk
.na
\fB-I\fR \fIname\fR
.ad
.br
.na
\fB--dynamic-linker\fR \fIname\fR
.ad
.sp .6
.RS 4n
When building an executable, uses
.I name
as the path name of the
interpreter to be written into the program header. The default in static
mode is no interpreter. In dynamic mode, the default is the name of the
runtime linker,
.BR ld.so.1 (1).
Either case can be overridden by
.BR -I
.IR name .
.BR exec (2)
loads this interpreter when the
.B a.out
is
.RB "loaded, and passes control to the interpreter rather than to the" " a.out"
directly.
.RE

.sp
.ne 2
.mk
.na
\fB-l\fR \fIx\fR
.ad
.br
.na
\fB--library\fR \fIx\fR
.ad
.sp .6
.RS 4n
Searches a library \fBlib\fIx\fB\&.so\fR or
\fBlib\fIx\fB\&.a\fR, the conventional names for shared object and
.RB "archive libraries, respectively. In dynamic mode, unless the" " -B"
\fBstatic\fR option is in effect, \fBld\fR searches each directory specified
in the library search path for a \fBlib\fIx\fB\&.so\fR or
\fBlib\fIx\fB\&.a\fR file. The directory search stops at the first
directory containing either.
.B ld
chooses the file ending in \fB\&.so\fR
if \fB-l\fIx\fR expands to two files with names of the form
\fBlib\fIx\fB\&.so\fR and \fBlib\fIx\fB\&.a\fR. If no
\fBlib\fIx\fB\&.so\fR is found, then \fBld\fR accepts
\fBlib\fIx\fB\&.a\fR. In static mode, or when the \fB-B\fR
\fBstatic\fR option is in effect, \fBld\fR selects only the file ending in
\fB\&.a\fR. \fBld\fR searches a library when the library is encountered, so
the placement of
.B -l
is significant. See \fILinking With Additional
Libraries\fR in
.IR "Linker and Libraries Guide" .
.RE

.sp
.ne 2
.mk
.na
\fB-L\fR \fIpath\fR
.ad
.br
.na
\fB--library-path\fR \fIpath\fR
.ad
.sp .6
.RS 4n
Adds
.I path
to the library search directories.
.B ld
searches for
libraries first in any directories specified by the
.B -L
options and
then in the standard directories. This option is useful only if the option
precedes the
.B -l
options to which the
.B -L
option applies. See
\fIDirectories Searched by the Link-Editor\fR in \fILinker and Libraries
Guide\fR.
.sp
The environment variable
.B LD_LIBRARY_PATH
can be used to supplement
the library search path, however the
.B -L
option is recommended, as the
environment variable is also interpreted by the runtime environment. See
\fBLD_LIBRARY_PATH\fR under ENVIRONMENT VARIABLES.
.RE

.sp
.ne 2
.mk
.na
.B -m
.ad
.sp .6
.RS 4n
Produces a memory map or listing of the input/output sections, together
with any non-fatal multiply-defined symbols, on the standard output.
.RE

.sp
.ne 2
.mk
.na
\fB-M\fR \fImapfile\fR
.ad
.sp .6
.RS 4n
Reads \fImapfile\fR as a text file of directives to
.BR ld .
This option
can be specified multiple times. If \fImapfile\fR is a directory, then all
regular files, as defined by
.BR stat (2),
within the directory are
processed. See Chapter 9, \fIMapfile Option,\fR in \fILinker and Libraries
Guide\fR. Example mapfiles are provided in
.BR /usr/lib/ld .
See FILES.
.RE

.sp
.ne 2
.mk
.na
\fB-N\fR \fIstring\fR
.ad
.sp .6
.RS 4n
This option causes a
.B DT_NEEDED
entry to be added to the
\fB\&.dynamic\fR section of the object being built. The value of the
\fBDT_NEEDED\fR string is the \fIstring\fR that is specified on the command
.RB "line. This option is position dependent, and the" " DT_NEEDED"
\fB\&.dynamic\fR entry is relative to the other dynamic dependencies
discovered on the link-edit line. This option is useful for specifying
dependencies within device driver relocatable objects when combined with the
\fB-dy\fR and \fB-r\fR options.
.RE

.sp
.ne 2
.mk
.na
\fB-o\fR \fIoutfile\fR
.ad
.br
.na
\fB--output\fR \fIoutfile\fR
.ad
.sp .6
.RS 4n
Produces an output object file that is named
.IR outfile .
The name of the
default object file is
.BR a.out .
.RE

.sp
.ne 2
.mk
.na
\fB-p\fR \fIauditlib\fR
.ad
.sp .6
.RS 4n
Identifies an audit library,
.IR auditlib .
This audit library is used to
audit the object being created at runtime. A shared object identified as
requiring auditing with the
.B -p
option, has this requirement inherited
by any object that specifies the shared object as a dependency. See the
\fB-P\fR option. See \fIRuntime Linker Auditing Interface\fR in \fILinker
and Libraries Guide\fR.
.RE

.sp
.ne 2
.mk
.na
\fB-P\fR \fIauditlib\fR
.ad
.sp .6
.RS 4n
Identifies an audit library,
.IR auditlib .
This audit library is used to
audit the dependencies of the object being created at runtime. Dependency
auditing can also be inherited from dependencies that are identified as
requiring auditing. See the
.B -p
.RB "option, and the" " -z"
\fBglobalaudit\fR option. See \fIRuntime Linker Auditing Interface\fR in
.IR "Linker and Libraries Guide" .
.RE

.sp
.ne 2
.mk
.na
\fB-Q y\fR | \fBn\fR
.ad
.sp .6
.RS 4n
Under
.BR "-Q y" ,
an
.B ident
string is added to the
\fB\&.comment\fR section of the output file. This string identifies the
version of the
.B ld
used to create the file. This results in multiple
\fBld idents\fR when there have been multiple linking steps, such as
when using
.BR "ld -r" .
This identification is identical with the
default action of the
.B cc
command.
.B "-Q n"
suppresses version
identification. \fB\&.comment\fR sections can be manipulated by the
.BR mcs (1)
utility.
.RE

.sp
.ne 2
.mk
.na
.B -r
.ad
.br
.na
.B --relocatable
.ad
.sp .6
.RS 4n
Combines relocatable object files to produce one relocatable object file.
\fBld\fR does not complain about unresolved references. This option cannot
be used with the
.B -a
option.
.RE

.sp
.ne 2
.mk
.na
\fB-R\fR \fIpath\fR
.ad
.br
.na
\fB-rpath\fR \fIpath\fR
.ad
.sp .6
.RS 4n
A colon-separated list of directories used to specify library search
directories to the runtime linker. If present and not NULL, the path is
recorded in the output object file and passed to the runtime linker.
Multiple instances of this option are concatenated together with each
\fIpath\fR separated by a colon. See \fIDirectories Searched by the Runtime
Linker\fR in
.IR "Linker and Libraries Guide" .
.sp
The use of a runpath within an associated object is preferable to setting
global search paths such as through the
.B LD_LIBRARY_PATH
environment
variable. Only the runpaths that are necessary to find the objects
dependencies should be recorded.
.BR ldd (1)
can also be used to discover
unused runpaths in dynamic objects, when used with the
.B -U
option.
.sp
Various tokens can also be supplied with a runpath that provide a flexible
means of identifying system capabilities or an objects location. See
Appendix C,
.I "Establishing Dependencies with Dynamic String Tokens,"
in
.IR "Linker and Libraries Guide" .
The
.B $ORIGIN
token is especially
useful in allowing dynamic objects to be relocated to different locations in
the file system.
.RE

.sp
.ne 2
.mk
.na
.B -s
.ad
.br
.na
.B --strip-all
.ad
.sp .6
.RS 4n
Strips symbolic information from the output file. Any debugging
information, that is, \fB\&.line\fR, \fB\&.debug*\fR, and \fB\&.stab*\fR
sections, and their associated relocation entries are removed. Except for
relocatable files, a symbol table
.B SHT_SYMTAB
and its associated string
table section are not created in the output object file. The elimination of
a
.B SHT_SYMTAB
symbol table can reduce the \fB\&.stab*\fR debugging
information that is generated using the compiler drivers
.B -g
option.
See the
.B "-z redlocsym"
and
.B "-z noldynsym"
options.
.RE

.sp
.ne 2
.mk
.na
\fB-S\fR \fIsupportlib\fR
.ad
.sp .6
.RS 4n
The shared object
.I supportlib
is loaded with
.B ld
and given
information regarding the linking process. Shared objects that are defined
by using the
.B -S
option can also be supplied using the
\fBSGS_SUPPORT\fR environment variable. See \fILink-Editor Support
Interface\fR in
.IR "Linker and Libraries Guide" .
.RE

.sp
.ne 2
.mk
.na
.B -t
.ad
.sp .6
.RS 4n
Turns off the warning for multiply-defined symbols that have different
sizes or different alignments.
.RE

.sp
.ne 2
.mk
.na
\fB-u\fR \fIsymname\fR
.ad
.br
.na
\fB--undefined\fR \fIsymname\fR
.ad
.sp .6
.RS 4n
Enters
.I symname
as an undefined symbol in the symbol table. This
option is useful for loading entirely from an archive library. In this
instance, an unresolved reference is needed to force the loading of the
first routine. The placement of this option on the command line is
significant. This option must be placed before the library that defines the
symbol. See \fIDefining Additional Symbols with the u option\fR in \fILinker
and Libraries Guide\fR.
.RE

.sp
.ne 2
.mk
.na
.B -V
.ad
.br
.na
.B --version
.ad
.sp .6
.RS 4n
Outputs a message giving information about the version of
.B ld
being
used.
.RE

.sp
.ne 2
.mk
.na
\fB-Y\fR \fBP,\fIdirlist\fR
.ad
.sp .6
.RS 4n
Changes the default directories used for finding libraries. \fIdirlist\fR
is a colon-separated path list.
.RE

.sp
.ne 2
.mk
.na
.B -z absexec
.ad
.sp .6
.RS 4n
Useful only when building a dynamic executable. Specifies that references
to external absolute symbols should be resolved immediately instead of being
left for resolution at runtime. In very specialized circumstances, this
option removes text relocations that can result in excessive swap space
demands by an executable.
.RE

.sp
.ne 2
.mk
.na
\fB-z allextract\fR | \fBdefaultextract\fR |
.B weakextract
.ad
.br
.na
\fB--whole-archive\fR | \fB--no-whole-archive\fR
.ad
.sp .6
.RS 4n
Alters the extraction criteria of objects from any archives that follow. By
default, archive members are extracted to satisfy undefined references and
to promote tentative definitions with data definitions. Weak symbol
references do not trigger extraction. Under the
.B "-z allextract"
or
\fB--whole-archive\fR options, all archive members are extracted from the
archive. Under
.BR "-z weakextract" ,
weak references trigger archive
extraction. The \fB-z defaultextract\fR or \fB--no-whole-archive\fR
options provide a means of returning to the default following use of the
former extract options. See
.I "Archive Processing"
in \fILinker and
Libraries Guide\fR.
.RE

.sp
.ne 2
.mk
.na
.B -z altexec64
.ad
.sp .6
.RS 4n
Execute the 64-bit
.BR ld .
The creation of very large 32-bit objects can
exhaust the virtual memory that is available to the 32-bit
.BR ld .
The
\fB-z altexec64\fR option can be used to force the use of the
associated 64-bit
.BR ld .
The 64-bit
.B ld
provides a larger virtual
address space for building 32-bit objects. See \fIThe 32-bit link-editor and
64-bit link-editor\fR in
.IR "Linker and Libraries Guide" .
.RE

.sp
.ne 2
.mk
.na
\fB-z combreloc\fR | \fBnocombreloc\fR
.ad
.sp .6
.RS 4n
By default,
.B ld
combines multiple relocation sections when building
executables or shared objects. This section combination differs from
relocatable objects, in which relocation sections are maintained in a
one-to-one relationship with the sections to which the relocations must be
applied. The
.B "-z nocombreloc"
option disables this merging of
relocation sections, and preserves the one-to-one relationship found in the
original relocatable objects.
.sp
\fBld\fR sorts the entries of data relocation sections by their symbol
reference. This sorting reduces runtime symbol lookup. When multiple
relocation sections are combined, this sorting produces the least possible
relocation overhead when objects are loaded into memory, and speeds the
runtime loading of dynamic objects.
.sp
Historically, the individual relocation sections were carried over to any
executable or shared object, and the
.B "-z combreloc"
option was
required to enable the relocation section merging previously described.
Relocation section merging is now the default. The \fB-z combreloc\fR
option is still accepted for the benefit of old build environments, but the
option is unnecessary, and has no effect.
.RE

.sp
.ne 2
.mk
.na
\fB-z defs\fR | \fBnodefs\fR
.ad
.br
.na
\fB--no-undefined\fR
.ad
.sp .6
.RS 4n
The \fB-z defs\fR option and the \fB--no-undefined\fR option force a
fatal error if any undefined symbols remain at the end of the link. This
mode is the default when an executable is built. For historic reasons, this
mode is
.B not
the default when building a shared object. Use of the
\fB-z defs\fR option is recommended, as this mode assures the object
being built is self-contained. A self-contained object has all symbolic
references resolved internally, or to the object's immediate dependencies.
.sp
The \fB-z nodefs\fR option allows undefined symbols. For historic
reasons, this mode is the default when a shared object is built. When used
with executables, the behavior of references to such undefined symbols is
unspecified. Use of the \fB-z nodefs\fR option is not recommended.
.RE

.sp
.ne 2
.mk
.na
\fB-z direct\fR | \fBnodirect\fR
.ad
.sp .6
.RS 4n
Enables or disables direct binding to any dependencies that follow on the
command line. These options allow finer control over direct binding than the
global counterpart
.BR "-B direct" .
The
.B "-z direct"
option
also differs from the
.B "-B direct"
option in the following areas.
Direct binding information is not established between a symbol reference and
an associated definition within the object being created. Lazy loading is
not enabled.
.RE

.sp
.ne 2
.mk
.na
\fB-z endfiltee\fR
.ad
.sp .6
.RS 4n
Marks a filtee so that when processed by a filter, the filtee terminates
any further filtee searches by the filter. See \fIReducing Filtee
Searches\fR in
.IR "Linker and Libraries Guide" .
.RE

.sp
.ne 2
.mk
.na
\fB-z\fR \fBfiniarray=\fIfunction\fR
.ad
.sp .6
.RS 4n
Appends an entry to the \fB\&.finiarray\fR section of the object being
built. If no \fB\&.finiarray\fR section is present, a section is created.
The new entry is initialized to point to
.IR function .
See
\fIInitialization and Termination Sections\fR in \fILinker and Libraries
Guide\fR.
.RE

.sp
.ne 2
.mk
.na
.B -z globalaudit
.ad
.sp .6
.RS 4n
This option supplements an audit library definition that has been recorded
with the
.B -P
option. This option is only meaningful when building a
dynamic executable. Audit libraries that are defined within an object with
the
.B -P
option typically allow for the auditing of the immediate
dependencies of the object. The
.B "-z globalaudit"
promotes the
auditor to a global auditor, thus allowing the auditing of all dependencies.
See \fIInvoking the Auditing Interface\fR in \fILinker and Libraries
Guide\fR.
.sp
An auditor established with the
.B -P
option and the
.BR -z
\fBglobalaudit\fR option, is equivalent to the auditor being established
with the
.B LD_AUDIT
environment variable. See
.BR ld.so.1 (1).
.RE

.sp
.ne 2
.mk
.na
\fB-z groupperm\fR | \fBnogroupperm\fR
.ad
.sp .6
.RS 4n
Assigns, or deassigns each dependency that follows to a unique group. The
assignment of a dependency to a group has the same effect as if the
dependency had been built using the
.B "-B group"
option.
.RE

.sp
.ne 2
.mk
.na
.B -z help
.ad
.br
.na
.B --help
.ad
.sp .6
.RS 4n
Print a summary of the command line options on the standard output and
exit.
.RE

.sp
.ne 2
.mk
.na
\fB-z ignore\fR | \fBrecord\fR
.ad
.sp .6
.RS 4n
Ignores, or records, dynamic dependencies that are not referenced as part
of the link-edit. Ignores, or records, unreferenced
.B ELF
sections from
the relocatable objects that are read as part of the link-edit. By default,
\fB-z record\fR is in effect.
.sp
If an
.B ELF
section is ignored, the section is eliminated from the
output file being generated. A section is ignored when three conditions are
true. The eliminated section must contribute to an allocatable segment. The
eliminated section must provide no global symbols. No other section from any
object that contributes to the link-edit, must reference an eliminated
section.
.RE

.sp
.ne 2
.mk
.na
\fB-z\fR \fBinitarray=\fIfunction\fR
.ad
.sp .6
.RS 4n
Appends an entry to the \fB\&.initarray\fR section of the object being
built. If no \fB\&.initarray\fR section is present, a section is created.
The new entry is initialized to point to
.IR function .
See
\fIInitialization and Termination Sections\fR in \fILinker and Libraries
Guide\fR.
.RE

.sp
.ne 2
.mk
.na
\fB-z initfirst\fR
.ad
.sp .6
.RS 4n
Marks the object so that its runtime initialization occurs before the
runtime initialization of any other objects brought into the process at the
same time. In addition, the object runtime finalization occurs after the
runtime finalization of any other objects removed from the process at the
same time. This option is only meaningful when building a shared object.
.RE

.sp
.ne 2
.mk
.na
.B -z interpose
.ad
.sp .6
.RS 4n
Marks the object as an interposer. At runtime, an object is identified as
an explicit interposer if the object has been tagged using the \fB-z
interpose\fR option. An explicit interposer is also established when an
object is loaded using the
.B LD_PRELOAD
environment variable. Implicit
interposition can occur because of the load order of objects, however, this
implicit interposition is unknown to the runtime linker. Explicit
interposition can ensure that interposition takes place regardless of the
order in which objects are loaded. Explicit interposition also ensures that
the runtime linker searches for symbols in any explicit interposers when
direct bindings are in effect.
.RE

.sp
.ne 2
.mk
.na
\fB-z lazyload\fR | \fBnolazyload\fR
.ad
.sp .6
.RS 4n
Enables or disables the marking of dynamic dependencies to be lazily
loaded. Dynamic dependencies which are marked
.B lazyload
are not loaded
at initial process start-up. These dependencies are delayed until the first
binding to the object is made.
.B Note:
Lazy loading requires the correct
declaration of dependencies, together with associated runpaths for each
dynamic object used within a process. See \fILazy Loading of Dynamic
Dependencies\fR in
.IR "Linker and Libraries Guide" .
.RE

.sp
.ne 2
.mk
.na
\fB-z ld32\fR=\fIarg1\fR,\fIarg2\fR,.\|.\|.\fR
.ad
.br
.na
\fB-z ld64\fR=\fIarg1\fR,\fIarg2\fR,.\|.\|.\fR
.ad
.sp .6
.RS 4n
The class of the link-editor is affected by the class of the output file
being created and by the capabilities of the underlying operating system.
The \fB-z ld\fR[\fB32\fR|\fB64\fR] options provide a means of defining
any link-editor argument. The defined argument is only interpreted,
respectively, by the 32-bit class or 64-bit class of the link-editor.
.sp
For example, support libraries are class specific, so the correct class of
support library can be ensured using:
.sp
.in +2
.nf
\fBld .\|.\|. -z ld32=-Saudit32.so.1 -z ld64=-Saudit64.so.1 .\|.\|.\fR
.fi
.in -2
.sp

The class of link-editor that is invoked is determined from the \fBELF\fR
class of the first relocatable file that is seen on the command line. This
determination is carried out
.B prior
to any
.BR -z
\fBld\fR[\fB32\fR|\fB64\fR] processing.
.RE

.sp
.ne 2
.mk
.na
\fB-z loadfltr\fR
.ad
.sp .6
.RS 4n
Marks a filter to indicate that filtees must be processed immediately at
runtime. Normally, filter processing is delayed until a symbol reference is
bound to the filter. The runtime processing of an object that contains this
flag mimics that which occurs if the
.B LD_LOADFLTR
environment variable
is in effect. See the
.BR ld.so.1 (1).
.RE

.sp
.ne 2
.mk
.na
\fB-z muldefs\fR
.ad
.br
.na
\fB--allow-multiple-definition\fR
.ad
.sp .6
.RS 4n
Allows multiple symbol definitions. By default, multiple symbol definitions
that occur between relocatable objects result in a fatal error condition.
This option, suppresses the error condition, allowing the first symbol
definition to be taken.
.RE

.sp
.ne 2
.mk
.na
.B -z nocompstrtab
.ad
.sp .6
.RS 4n
Disables the compression of
.B ELF
string tables. By default, string
compression is applied to
.B SHT_STRTAB
sections, and to
\fBSHT_PROGBITS\fR sections that have their \fBSHF_MERGE\fR and
\fBSHF_STRINGS\fR section flags set.
.RE

.sp
.ne 2
.mk
.na
\fB-z nodefaultlib\fR
.ad
.sp .6
.RS 4n
Marks the object so that the runtime default library search path, used
after any
.B LD_LIBRARY_PATH
or runpaths, is ignored. This option implies
that all dependencies of the object can be satisfied from its runpath.
.RE

.sp
.ne 2
.mk
.na
.B -z nodelete
.ad
.sp .6
.RS 4n
Marks the object as non-deletable at runtime. This mode is similar to
adding the object to the process by using
.BR dlopen "(3C) with the"
\fBRTLD_NODELETE\fR mode.
.RE

.sp
.ne 2
.mk
.na
.B -z nodlopen
.ad
.sp .6
.RS 4n
Marks the object as not available to
.BR dlopen "(3C), either as the object"
specified by the
.BR dlopen() ,
or as any form of dependency required by
the object specified by the
.BR dlopen() .
This option is only meaningful
when building a shared object.
.RE

.sp
.ne 2
.mk
.na
.B -z nodump
.ad
.sp .6
.RS 4n
Marks the object as not available to
.BR dldump (3C).
.RE

.sp
.ne 2
.mk
.na
.B -z noldynsym
.ad
.sp .6
.RS 4n
Prevents the inclusion of a \fB\&.SUNW_ldynsym\fR section in dynamic
executables or sharable libraries. The \fB\&.SUNW_ldynsym\fR section
augments the \fB\&.dynsym\fR section by providing symbols for local
functions. Local function symbols allow debuggers to display local function
names in stack traces from stripped programs. Similarly,
.BR dladdr (3C)
is
able to supply more accurate results.
.sp
The
.B "-z noldynsym"
option also prevents the inclusion of the two
symbol sort sections that are related to the \fB\&.SUNW_ldynsym\fR section.
The \fB\&.SUNW_dynsymsort\fR section provides sorted access to regular
function and variable symbols. The \fB\&.SUNW_dyntlssort\fR section provides
sorted access to thread local storage (\fBTLS\fR) variable symbols.
.sp
The \fB\&.SUNW_ldynsym\fR, \fB\&.SUNW_dynsymsort\fR, and
\fB\&.SUNW_dyntlssort\fR sections, which becomes part of the allocable text
segment of the resulting file, cannot be removed by
.BR strip (1).
Therefore, the
.B "-z noldynsym"
option is the only way to prevent
their inclusion. See the
.B -s
and
.B "-z redlocsym"
options.
.RE

.sp
.ne 2
.mk
.na
.B -z nopartial
.ad
.sp .6
.RS 4n
Partially initialized symbols, that are defined within relocatable object
files, are expanded in the output file being generated.
.RE

.sp
.ne 2
.mk
.na
.B -z noversion
.ad
.sp .6
.RS 4n
Does not record any versioning sections. Any version sections or associated
\fB\&.dynamic\fR section entries are not generated in the output image.
.RE

.sp
.ne 2
.mk
.na
.B -z now
.ad
.sp .6
.RS 4n
Marks the object as requiring non-lazy runtime binding. This mode is
similar to adding the object to the process by using
.BR dlopen "(3C) with"
the
.B RTLD_NOW
mode. This mode is also similar to having the
\fBLD_BIND_NOW\fR environment variable in effect. See \fBld.so.1\fR(1).
.RE

.sp
.ne 2
.mk
.na
.B -z origin
.ad
.sp .6
.RS 4n
Marks the object as requiring immediate
.B $ORIGIN
processing at
runtime. This option is only maintained for historic compatibility, as the
runtime analysis of objects to provide for
.B $ORIGIN
processing is now
default.
.RE

.sp
.ne 2
.mk
.na
\fB-z\fR \fBpreinitarray=\fIfunction\fR
.ad
.sp .6
.RS 4n
Appends an entry to the \fB\&.preinitarray\fR section of the object being
built. If no \fB\&.preinitarray\fR section is present, a section is created.
The new entry is initialized to point to
.IR function .
See
\fIInitialization and Termination Sections\fR in \fILinker and Libraries
Guide\fR.
.RE

.sp
.ne 2
.mk
.na
.B -z redlocsym
.ad
.sp .6
.RS 4n
Eliminates all local symbols except for the
.I SECT
symbols from the
symbol table
.BR SHT_SYMTAB .
All relocations that refer to local symbols
are updated to refer to the corresponding
.I SECT
symbol. This option
allows specialized objects to greatly reduce their symbol table sizes.
Eliminated local symbols can reduce the \fB\&.stab*\fR debugging information
that is generated using the compiler drivers
.B -g
option. See the
\fB-s\fR and \fB-z noldynsym\fR options.
.RE

.sp
.ne 2
.mk
.na
.B -z relaxreloc
.ad
.sp .6
.RS 4n
\fBld\fR normally issues a fatal error upon encountering a relocation using
a symbol that references an eliminated COMDAT section. If \fB-z\fR
\fBrelaxreloc\fR is enabled, \fBld\fR instead redirects such relocations to
.RB "the equivalent symbol in the COMDAT section that was kept." " -z"
\fBrelaxreloc\fR is a specialized option, mainly of interest to compiler
authors, and is not intended for general use.
.RE

.sp
.ne 2
.mk
.na
.B -z rescan-now
.ad
.br
.na
.B -z rescan
.ad
.sp .6
.RS 4n
These options rescan the archive files that are provided to the link-edit.
By default, archives are processed once as the archives appear on the
command line. Archives are traditionally specified at the end of the command
line so that their symbol definitions resolve any preceding references.
However, specifying archives multiple times to satisfy their own
interdependencies can be necessary.
.sp
\fB-z rescan-now\fR is a positional option, and is processed by the
link-editor immediately when encountered on the command line. All archives
seen on the command line up to that point are immediately reprocessed in an
attempt to locate additional archive members that resolve symbol references.
This archive rescanning is repeated until a pass over the archives occurs in
which no new members are extracted.
.sp
\fB-z rescan\fR is a position independent option. The link-editor
defers the rescan operation until after it has processed the entire command
line, and then initiates a final rescan operation over all archives seen on
the command line. The
.B "-z rescan"
operation can interact
incorrectly with objects that contain initialization (.init) or finalization
(.fini) sections, preventing the code in those sections from running. For
this reason,
.B "-z rescan"
is deprecated, and use of \fB-z\fR
\fBrescan-now\fR is advised.
.RE

.sp
.ne 2
.mk
.na
\fB-z rescan-start\fR .\|.\|. \fB-z rescan-end\fR
.ad
.br
.na
\fB--start-group\fR .\|.\|. \fB--end-group\fR
.ad
.br
.na
\fB-(\fR .\|.\|. \fB-)\fR
.ad
.sp .6
.RS 4n
Defines an archive rescan group. This is a positional construct, and is
processed by the link-editor immediately upon encountering the closing
delimiter option.  Archives found within the group delimiter options are
reprocessed as a group in an attempt to locate  additional archive members
that resolve symbol references. This archive rescanning  is repeated until
a pass  over the archives On the occurs in  which no  new  members are
extracted. Archive rescan groups cannot be nested.
.RE

.sp
.ne 2
.mk
.na
.B -z target=sparc|x86
.ad
.sp .6
.RS 4n
Specifies the machine type for the output object. Supported targets are
Sparc and x86. The 32-bit machine type for the specified target is used
unless the
.B -64
option is also present, in which case the corresponding
64-bit machine type is used. By default, the machine type of the object
being generated is determined from the first
.B ELF
object processed from
the command line. If no objects are specified, the machine type is
determined by the first object encountered within the first archive
processed from the command line. If there are no objects or archives, the
link-editor assumes the native machine. This option is useful when creating
an object directly with
.B ld
whose input is solely from a
.BR mapfile .
See the
.B -M
option. It can also be useful in the rare case of linking
entirely from an archive that contains objects of different machine types
for which the first object is not of the desired machine type. See \fIThe
32-bit link-editor and 64-bit link-editor\fR in \fILinker and Libraries
Guide\fR.
.RE

.sp
.ne 2
.mk
.na
.B -z text
.ad
.sp .6
.RS 4n
In dynamic mode only, forces a fatal error if any relocations against
non-writable, allocatable sections remain. For historic reasons, this mode
is not the default when building an executable or shared object. However,
its use is recommended to ensure that the text segment of the dynamic object
being built is shareable between multiple running processes. A shared text
segment incurs the least relocation overhead when loaded into memory. See
\fIPosition-Independent Code\fR in
.IR "Linker and Libraries Guide" .
.RE

.sp
.ne 2
.mk
.na
\fB-z textoff\fR
.ad
.sp .6
.RS 4n
In dynamic mode only, allows relocations against all allocatable sections,
including non-writable ones. This mode is the default when building a shared
object.
.RE

.sp
.ne 2
.mk
.na
.B -z textwarn
.ad
.sp .6
.RS 4n
In dynamic mode only, lists a warning if any relocations against
non-writable, allocatable sections remain. This mode is the default when
building an executable.
.RE

.sp
.ne 2
.mk
.na
.B -z verbose
.ad
.sp .6
.RS 4n
This option provides additional warning diagnostics during a link-edit.
Presently, this option conveys suspicious use of displacement relocations.
This option also conveys the restricted use of static
.B TLS
relocations
when building shared objects. In future, this option might be enhanced to
provide additional diagnostics that are deemed too noisy to be generated by
default.
.RE

.sp
.ne 2
.mk
.na
\fB-z\fBwrap=\fIsymbol\fR
.ad
.br
.na
\fB-wrap=\fR \fIsymbol\fR
.ad
.br
.na
\fB--wrap=\fR \fIsymbol\fR
.ad
.sp .6
.RS 4n
Rename undefined references to
.I symbol
in order to allow wrapper code
to be linked into the output object without having to modify source code.
When
.B "-z wrap"
is specified, all undefined references to \fIsymbol\fR
are modified to reference \fB__wrap_\fIsymbol\fR, and all references to
\fB__real_\fIsymbol\fR are modified to reference \fIsymbol\fR. The user
is expected to provide an object containing the \fB__wrap_\fIsymbol\fR
function. This wrapper function can call \fB__real_\fIsymbol\fR in order
to reference the actual function being wrapped.
.sp
The following is an example of a wrapper for the
.BR malloc (3C)
function:
.sp
.in +2
.nf
void *
__wrap_malloc(size_t c)
{
        (void) printf("malloc called with %zu\en", c);
        return (__real_malloc(c));
}
.fi
.in -2

If you link other code with this file using
.B "-z wrap=malloc"
to
compile all the objects, then all calls to
.B malloc
will call the
function
.B __wrap_malloc
instead. The call to
.B __real_malloc
will
call the real
.B malloc
function.
.sp
The real and wrapped functions should be maintained in separate source
files. Otherwise, the compiler or assembler may resolve the call instead of
leaving that operation for the link-editor to carry out, and prevent the
wrap from occurring.
.RE

.SH ENVIRONMENT VARIABLES
.sp
.ne 2
.mk
.na
.B LD_ALTEXEC
.ad
.sp .6
.RS 4n
An alternative link-editor path name.
.B ld
executes, and passes control
to this alternative link-editor. This environment variable provides a
generic means of overriding the default link-editor that is called from the
various compiler drivers. See the
.B "-z altexec64"
option.
.RE

.sp
.ne 2
.mk
.na
.B LD_LIBRARY_PATH
.ad
.sp .6
.RS 4n
A list of directories in which to search for the libraries specified using
the
.B -l
option. Multiple directories are separated by a colon. In the
most general case, this environment variable contains two directory lists
separated by a semicolon:
.sp
.in +2
.nf
\fIdirlist1\fB;\fIdirlist2\fR
.fi
.in -2
.sp

If
.B ld
is called with any number of occurrences of
.BR -L ,
as in:
.sp
.in +2
.nf
\fBld .\|.\|. -L\fIpath1\fR .\|.\|. -L\fIpathn\fR .\|.\|.\fR
.fi
.in -2
.sp

then the search path ordering is:
.sp
.in +2
.nf
\fIdirlist1 path1\fR .\|.\|. \fIpathn dirlist2\fR LIBPATH\fR
.fi
.in -2
.sp

When the list of directories does not contain a semicolon, the list is
interpreted as
.IR dirlist2 .
.sp
The
.B LD_LIBRARY_PATH
environment variable also affects the runtime
linkers search for dynamic dependencies.
.sp
This environment variable can be specified with a _32 or _64 suffix. This
makes the environment variable specific, respectively, to 32-bit or 64-bit
processes and overrides any non-suffixed version of the environment variable
that is in effect.
.RE

.sp
.ne 2
.mk
.na
.B LD_NOEXEC_64
.ad
.sp .6
.RS 4n
Suppresses the automatic execution of the 64-bit link-editor. By default,
the link-editor executes the 64-bit version when the
.B ELF
class of the
first relocatable file identifies a 64-bit object. The 64-bit image that a
32-bit link-editor can create, has some limitations. However, some
link-edits might find the use of the 32-bit link-editor faster.
.RE

.sp
.ne 2
.mk
.na
.B LD_OPTIONS
.ad
.sp .6
.RS 4n
A default set of options to
.BR ld .
\fBLD_OPTIONS\fR is interpreted by
\fBld\fR just as though its value had been placed on the command line,
immediately following the name used to invoke
.BR ld ,
as in:
.sp
.in +2
.nf
\fBld $LD_OPTIONS .\|.\|. \fIother-arguments\fR .\|.\|.\fR
.fi
.in -2
.sp

.RE

.sp
.ne 2
.mk
.na
.B LD_RUN_PATH
.ad
.sp .6
.RS 4n
An alternative mechanism for specifying a runpath to the link-editor. See
the
.B -R
option. If both
.B LD_RUN_PATH
and the
.B -R
option are
specified,
.B -R
supersedes.
.RE

.sp
.ne 2
.mk
.na
.B SGS_SUPPORT
.ad
.sp .6
.RS 4n
Provides a colon-separated list of shared objects that are loaded with the
link-editor and given information regarding the linking process. This
environment variable can be specified with a _32 or _64 suffix. This makes
the environment variable specific, respectively, to the 32-bit or 64-bit
class of
.B ld
and overrides any non-suffixed version of the environment
variable that is in effect. See the
.B -S
option.
.RE

.sp
.LP
Notice that environment variable-names that begin with the characters
\&'\fBLD_\fR' are reserved for possible future enhancements to \fBld\fR and
.BR ld.so.1 (1).
.SH FILES
.sp
.ne 2
.mk
.na
\fBlib\fIx\fR.so\fR
.ad
.RS 15n
.rt
shared object libraries.
.RE

.sp
.ne 2
.mk
.na
\fBlib\fIx\fR.a\fR
.ad
.RS 15n
.rt
archive libraries.
.RE

.sp
.ne 2
.mk
.na
.B a.out
.ad
.RS 15n
.rt
default output file.
.RE

.sp
.ne 2
.mk
.na
.I LIBPATH
.ad
.RS 15n
.rt
For 32-bit libraries, the default search path is
.BR /usr/ccs/lib ,
followed by
.BR /lib ,
and finally
.BR /usr/lib .
For 64-bit libraries,
the default search path is
.BR /lib/64 ,
followed by
.BR /usr/lib/64 .
.RE

.sp
.ne 2
.mk
.na
.B /usr/lib/ld
.ad
.RS 15n
.rt
A directory containing several \fBmapfiles\fR that can be used during
link-editing. These \fBmapfiles\fR provide various capabilities, such as
defining memory layouts, aligning bss, and defining non-executable stacks.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWtoo
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR as (1),
.BR crle (1),
.BR gprof (1),
.BR ld.so.1 (1),
.BR ldd (1),
.BR mcs (1),
.BR pvs (1),
.BR exec (2),
.BR stat (2),
.BR dlopen (3C),
.BR dldump (3C),
\fBelf\fR(3ELF), \fBar.h\fR(3HEAD), \fBa.out\fR(4),
.BR attributes (5)
.sp
.LP
.I Linker and Libraries Guide
.SH NOTES
.sp
.LP
Default options applied by
.B ld
are maintained for historic reasons. In
today's programming environment, where dynamic objects dominate, alternative
defaults would often make more sense. However, historic defaults must be
maintained to ensure compatibility with existing program development
environments. Historic defaults are called out wherever possible in this
manual. For a description of the current recommended options, see Appendix
A, \fILink-Editor Quick Reference,\fR in
.IR "Linker and Libraries Guide" .
.sp
.LP
If the file being created by
.B ld
already exists, the file is unlinked
after all input files have been processed. A new file with the specified
name is then created. This allows
.B ld
to create a new version of the
file, while simultaneously allowing existing processes that are accessing
the old file contents to continue running. If the old file has no other
links, the disk space of the removed file is freed when the last process
referencing the file terminates.
.sp
.LP
The behavior of
.B ld
when the file being created already exists was
changed with
.B SXCE
build
.BR 43 .
In older versions, the existing file
was rewritten in place, an approach with the potential to corrupt any
running processes that is using the file. This change has an implication for
output files that have multiple hard links in the file system. Previously,
all links would remain intact, with all links accessing the new file
contents. The new
.B ld
behavior
.B breaks
such links, with the result
that only the specified output file name references the new file. All the
other links continue to reference the old file. To ensure consistent
behavior, applications that rely on multiple hard links to linker output
files should explicitly remove and relink the other file names.
