'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH awk 1 "22 Jun 2005" "SunOS 5.11" "User Commands"
.SH NAME
awk \- pattern scanning and processing language
.SH SYNOPSIS
.LP
.nf
\fB/usr/bin/awk\fR [\fB-f\fR \fIprogfile\fR] [\fB-F\fIc\fR] [' \fIprog\fR '] [\fIparameters\fR]
     [\fIfilename\fR].\|.\|.
.fi

.LP
.nf
\fB/usr/xpg4/bin/awk\fR [\fB-F\fIcERE\fR] [\fB-v\fR \fIassignment\fR].\|.\|. \fI\&'program'\fR \fB-f\fR \fIprogfile\fR.\|.\|.
     [\fIargument\fR].\|.\|.
.fi

.SH DESCRIPTION
.sp
.LP
The
.B /usr/xpg4/bin/awk
utility is described on the
.BR nawk (1)
manual page.
.sp
.LP
The
.B /usr/bin/awk
utility scans each input \fIfilename\fR for lines
that match any of a set of patterns specified in
.IR prog .
The
.IR prog
string must be enclosed in single quotes (\fB a\'\fR) to protect it from the
shell. For each pattern in
.I prog
there can be an associated action
performed when a line of a \fIfilename\fR matches the pattern. The set of
pattern-action statements can appear literally as
.I prog
or in a file
specified with the \fB-f\fI progfile\fR option. Input files are read in
order; if there are no files, the standard input is read. The file name
\fB\&'\(mi'\fR means the standard input.
.SH OPTIONS
.sp
.LP
The following options are supported:
.sp
.ne 2
.mk
.na
\fB-f\fI progfile\fR
.ad
.RS 16n
.rt
\fBawk\fR uses the set of patterns it reads from \fIprogfile\fR.
.RE

.sp
.ne 2
.mk
.na
\fB-F\fIc\fR
.ad
.RS 16n
.rt
Uses the character
.I c
as the field separator (FS) character.  See the
discussion of
.B FS
below.
.RE

.SH USAGE
.SS "Input Lines"
.sp
.LP
Each input line is matched against the pattern portion of every
pattern-action statement; the associated action is performed for each
matched pattern. Any \fIfilename\fR of the form
.I var=value
is treated
as an assignment, not a filename, and is executed at the time it would have
been opened if it were a filename.
.I Variables
assigned in this manner
are not available inside a
.B BEGIN
rule, and are assigned after
previously specified files have been read.
.sp
.LP
An input line is normally made up of fields separated by white spaces.
(This default can be changed by using the
.B FS
built-in variable or the
\fB-F\fIc\fR option.) The default is to ignore leading blanks and to
separate fields by blanks and/or tab characters. However, if
.B FS
is
assigned a value that does not include any of the white spaces, then leading
blanks are not ignored. The fields are denoted
.BR $1 ,
.BR $2 ,
\fB\&.\|.\|.\fR\|; \fB$0\fR refers to the entire line.
.SS "Pattern-action Statements"
.sp
.LP
A pattern-action statement has the form:
.sp
.in +2
.nf
\fIpattern\fB { \fIaction\fB } \fR
.fi
.in -2
.sp

.sp
.LP
Either pattern or action can be omitted. If there is no action, the
matching line is printed. If there is no pattern, the action is performed on
every input line. Pattern-action statements are separated by newlines or
semicolons.
.sp
.LP
Patterns are arbitrary Boolean combinations (
.BR ! ,
||,
.BR && ,
and
parentheses) of relational expressions and regular expressions. A relational
expression is one of the following:
.sp
.in +2
.nf
\fIexpression relop expression
expression matchop regular_expression\fR
.fi
.in -2

.sp
.LP
where a
.I relop
is any of the six relational operators in C, and a
\fImatchop\fR is either \fB~\fR (contains) or \fB!~\fR (does not contain).
An
.I expression
is an arithmetic expression, a relational expression,
the special expression
.sp
.in +2
.nf
\fIvar \fRin \fIarray\fR
.fi
.in -2

.sp
.LP
or a Boolean combination of these.
.sp
.LP
Regular expressions are as in
.BR egrep (1).
In patterns they must be
surrounded by slashes. Isolated regular expressions in a pattern apply to
the entire line. Regular expressions can also occur in relational
expressions. A pattern can consist of two patterns separated by a comma; in
this case, the action is performed for all lines between the occurrence of
the first pattern to the occurrence of the second pattern.
.sp
.LP
The special patterns
.B BEGIN
and
.B END
can be used to capture
control before the first input line has been read and after the last input
line has been read respectively. These keywords do not combine with any
other patterns.
.SS "Built-in Variables"
.sp
.LP
Built-in variables include:
.sp
.ne 2
.mk
.na
.B FILENAME
.ad
.RS 13n
.rt
name of the current input file
.RE

.sp
.ne 2
.mk
.na
.B FS
.ad
.RS 13n
.rt
input field separator regular expression (default blank and tab)
.RE

.sp
.ne 2
.mk
.na
.B NF
.ad
.RS 13n
.rt
number of fields in the current record
.RE

.sp
.ne 2
.mk
.na
.B NR
.ad
.RS 13n
.rt
ordinal number of the current record
.RE

.sp
.ne 2
.mk
.na
.B OFMT
.ad
.RS 13n
.rt
output format for numbers (default \fB%.6g\fR)
.RE

.sp
.ne 2
.mk
.na
.B OFS
.ad
.RS 13n
.rt
output field separator (default blank)
.RE

.sp
.ne 2
.mk
.na
.B ORS
.ad
.RS 13n
.rt
output record separator (default new-line)
.RE

.sp
.ne 2
.mk
.na
.B RS
.ad
.RS 13n
.rt
input record separator (default new-line)
.RE

.sp
.LP
An action is a sequence of statements. A statement can be one of the
following:
.sp
.in +2
.nf
if ( \fIexpression\fR ) \fIstatement\fR [ else \fIstatement\fR ]
while ( \fIexpression\fR ) \fIstatement\fR
do \fIstatement\fR while ( \fIexpression\fR )
for ( \fIexpression\fR ; \fIexpression\fR ; \fIexpression\fR ) \fIstatement\fR
for ( \fIvar\fR in \fIarray\fR ) \fIstatement\fR
break
continue
{ [ \fIstatement\fR ] .\|.\|. }
\fIexpression\fR      # commonly variable = expression
print [ \fIexpression-list\fR ] [ >\fIexpression\fR ]
printf format [ ,\fIexpression-list\fR ] [ >\fIexpression\fR ]
next            # skip remaining patterns on this input line
exit [expr]     # skip the rest of the input; exit status is expr
.fi
.in -2

.sp
.LP
Statements are terminated by semicolons, newlines, or right braces. An
empty expression-list stands for the whole input line. Expressions take on
string or numeric values as appropriate, and are built using the operators
.BR + ,
\fB\(mi\fR,
.BR * ,
.BR / ,
.BR % ,
\fB^\fR and concatenation
(indicated by a blank). The operators
.BR ++ ,
\fB\(mi\(mi\fR, \fB+=\fR,
\fB\(mi=\fR,
.BR *= ,
.BR /= ,
.BR %= ,
.BR ^= ,
.BR > ,
.BR >= ,
.BR < ,
.BR <= ,
.BR == ,
.BR != ,
and
.B ?:
are also available in
expressions. Variables can be scalars, array elements (denoted x[i]), or
fields. Variables are initialized to the null string or zero. Array
subscripts can be any string, not necessarily numeric; this allows for a
form of associative memory. String constants are quoted (\fB""\fR), with the
usual C escapes recognized within.
.sp
.LP
The
.B print
statement prints its arguments on the standard output, or
on a file if \fB>\fIexpression\fR is present, or on a pipe if
\&'\fB|\fIcmd\fR' is present. The output resulted from the print
statement is terminated by the output record separator with each argument
separated by the current output field separator. The \fBprintf\fR statement
formats its expression list according to the format (see
\fBprintf\fR(3C)).
.SS "Built-in Functions"
.sp
.LP
The arithmetic functions are as follows:
.sp
.ne 2
.mk
.na
\fBcos\fR(\fIx\fR)\fR
.ad
.RS 11n
.rt
Return cosine of
.IR x ,
where
.I x
is in radians. (In
\fB/usr/xpg4/bin/awk\fR only. See \fBnawk\fR(1).)
.RE

.sp
.ne 2
.mk
.na
\fBsin\fR(\fIx\fR)\fR
.ad
.RS 11n
.rt
Return sine of
.IR x ,
where
.I x
is in radians. (In
\fB/usr/xpg4/bin/awk\fR only. See \fBnawk\fR(1).)
.RE

.sp
.ne 2
.mk
.na
\fBexp\fR(\fIx\fR)\fR
.ad
.RS 11n
.rt
Return the exponential function of
.IR x .
.RE

.sp
.ne 2
.mk
.na
\fBlog\fR(\fIx\fR)\fR
.ad
.RS 11n
.rt
Return the natural logarithm of
.IR x .
.RE

.sp
.ne 2
.mk
.na
\fBsqrt\fR(\fIx\fR)\fR
.ad
.RS 11n
.rt
Return the square root of
.IR x .
.RE

.sp
.ne 2
.mk
.na
\fBint\fR(\fIx\fR)\fR
.ad
.RS 11n
.rt
Truncate its argument to an integer. It is truncated toward
.B 0
when
\fIx\fR >\fB 0\fR.
.RE

.sp
.LP
The string functions are as follows:
.sp
.ne 2
.mk
.na
\fBindex(\fIs\fB, \fIt\fB)\fR
.ad
.sp .6
.RS 4n
Return the position in string
.I s
where string
.I t
first occurs, or
\fB0\fR if it does not occur at all.
.RE

.sp
.ne 2
.mk
.na
\fBint(\fIs\fB)\fR
.ad
.sp .6
.RS 4n
truncates
.I s
to an integer value. If
.I s
is not specified, $0 is
used.
.RE

.sp
.ne 2
.mk
.na
\fBlength(\fIs\fB)\fR
.ad
.sp .6
.RS 4n
Return the length of its argument taken as a string, or of the whole line
if there is no argument.
.RE

.sp
.ne 2
.mk
.na
\fBsplit(\fIs\fR, \fIa\fR, \fIfs\fB)\fR
.ad
.sp .6
.RS 4n
Split the string \fIs\fR into array elements \fIa\fR[\fI1\fR],
\fIa\fR[\fI2\fR], \|.\|.\|. \fIa\fR[\fIn\fR], and returns \fIn\fR. The
separation is done with the regular expression \fIfs\fR or with the field
separator
.B FS
if \fIfs\fR is not given.
.RE

.sp
.ne 2
.mk
.na
\fBsprintf(\fIfmt\fR,
.IR expr ,
.IR expr ,\|.\|.\|.\|\fB)\fR
.ad
.sp .6
.RS 4n
Format the expressions according to the \fBprintf\fR(3C) format given by
\fIfmt\fR and returns the resulting string.
.RE

.sp
.ne 2
.mk
.na
\fBsubstr(\fIs\fR, \fIm\fR, \fIn\fB)\fR
.ad
.sp .6
.RS 4n
returns the \fIn\fR-character substring of
.I s
that begins at position
.IR m .
.RE

.sp
.LP
The input/output function is as follows:
.sp
.ne 2
.mk
.na
.B getline
.ad
.RS 11n
.rt
Set
.B $0
to the next input record from the current input file.
\fBgetline\fR returns \fB1\fR for successful input, \fB0\fR for end of file,
and \fB\(mi1\fR for an error.
.RE

.SS "Large File Behavior"
.sp
.LP
See
.BR largefile (5)
for the description of the behavior of
.BR awk
when encountering files greater than or equal to 2 Gbyte ( 2^31 bytes).
.SH EXAMPLES
.LP
\fBExample 1\fR Printing Lines Longer Than 72 Characters
.sp
.LP
The following example is an
.B awk
script that can be executed by an
\fBawk -f examplescript\fR style command. It prints lines longer than
seventy two characters:

.sp
.in +2
.nf
\fBlength > 72\fR
.fi
.in -2
.sp

.LP
\fBExample 2\fR Printing Fields in Opposite Order
.sp
.LP
The following example is an
.B awk
script that can be executed by an
\fBawk -f examplescript\fR style command. It prints the first two fields in
opposite order:

.sp
.in +2
.nf
\fB{ print $2, $1 }\fR
.fi
.in -2
.sp

.LP
\fBExample 3\fR Printing Fields in Opposite Order with the Input Fields
Separated
.sp
.LP
The following example is an
.B awk
script that can be executed by an
\fBawk -f examplescript\fR style command. It prints the first two input
fields in opposite order, separated by a comma, blanks or tabs:

.sp
.in +2
.nf
\fBBEGIN { FS = ",[ \et]*|[ \et]+" }
      { print $2, $1 }\fR
.fi
.in -2
.sp

.LP
\fBExample 4\fR Adding Up the First Column, Printing the Sum and Average
.sp
.LP
The following example is an
.B awk
script that can be executed by an
\fBawk -f examplescript\fR style command.  It adds up the first column, and
prints the sum and average:

.sp
.in +2
.nf
\fB{ s += $1 }
END  { print "sum is", s, " average is", s/NR }\fR
.fi
.in -2
.sp

.LP
\fBExample 5\fR Printing Fields in Reverse Order
.sp
.LP
The following example is an
.B awk
script that can be executed by an
\fBawk -f examplescript\fR style command. It prints fields in reverse
order:

.sp
.in +2
.nf
\fB{ for (i = NF; i > 0; \(mi\(mii) print $i }\fR
.fi
.in -2
.sp

.LP
\fBExample 6\fR Printing All lines Between \fBstart/stop\fR Pairs
.sp
.LP
The following example is an
.B awk
script that can be executed by an
\fBawk -f examplescript\fR style command. It prints all lines between
start/stop pairs.

.sp
.in +2
.nf
\fB/start/, /stop/\fR
.fi
.in -2
.sp

.LP
\fBExample 7\fR Printing All Lines Whose First Field is Different from the
Previous One
.sp
.LP
The following example is an
.B awk
script that can be executed by an
\fBawk -f examplescript\fR style command. It prints all lines whose first
field is different from the previous one.

.sp
.in +2
.nf
\fB$1 != prev { print; prev = $1 }\fR
.fi
.in -2
.sp

.LP
\fBExample 8\fR Printing a File and Filling in Page numbers
.sp
.LP
The following example is an
.B awk
script that can be executed by an
\fBawk -f examplescript\fR style command. It prints a file and fills in page
numbers starting at 5:

.sp
.in +2
.nf
\fB/Page/	{ $2 = n++; }
     	   { print }\fR
.fi
.in -2
.sp

.LP
\fBExample 9\fR Printing a File and Numbering Its Pages
.sp
.LP
Assuming this program is in a file named
.BR prog ,
the following example
prints the file
.B input
numbering its pages starting at
.BR 5 :

.sp
.in +2
.nf
example% \fBawk -f prog n=5 input\fR
.fi
.in -2
.sp

.SH ENVIRONMENT VARIABLES
.sp
.LP
See
.BR environ (5)
for descriptions of the following environment
variables that affect the execution of
.BR awk :
.BR LANG ,
.BR LC_ALL ,
.BR LC_COLLATE ,
.BR LC_CTYPE ,
.BR LC_MESSAGES ,
.BR NLSPATH ,
and
.BR PATH .
.sp
.ne 2
.mk
.na
.B LC_NUMERIC
.ad
.RS 14n
.rt
Determine the radix character used when interpreting numeric input,
performing conversions between numeric and string values and formatting
numeric output. Regardless of locale, the period character (the
decimal-point character of the POSIX locale) is the decimal-point character
recognized in processing
.B awk
programs (including assignments in
command-line arguments).
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.SS "/usr/bin/awk"
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWesu
_
CSINot Enabled
.TE

.SS "/usr/xpg4/bin/awk"
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWxcu4
_
CSIEnabled
_
Interface StabilityStandard
.TE

.SH SEE ALSO
.sp
.LP
.BR egrep (1),
.BR grep (1),
.BR nawk (1),
.BR sed (1),
\fBprintf\fR(3C), \fBattributes\fR(5),
.BR environ (5),
\fBlargefile\fR(5),
.BR standards (5)
.SH NOTES
.sp
.LP
Input white space is not preserved on output if fields are involved.
.sp
.LP
There are no explicit conversions between numbers and strings. To force an
expression to be treated as a number, add
.B 0
to it. To force an
expression to be treated as a string, concatenate the null string (\fB""\fR)
to it.
