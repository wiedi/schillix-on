'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH des 1 "3 Mar 2008" "SunOS 5.11" "User Commands"
.SH NAME
des \- encrypt or decrypt data using Data Encryption Standard
.SH SYNOPSIS
.LP
.nf
\fBdes\fR \fB-e\fR |  \fB-d\fR [\fB-bfs\fR] [\fB-k\fR \fIkey\fR] [\fIinput-file\fR [\fIoutput-file\fR]]
.fi

.SH DESCRIPTION
.sp
.LP
\fBdes\fR encrypts and decrypts data using the \fBNBS\fR Data Encryption
Standard algorithm. One of
.B -e
(for encrypt) or
.B -d
(for decrypt) must
be specified.
.sp
.LP
The
.B des
command is provided to promote secure exchange of data in a
standard fashion.
.sp
.LP
Two standard encryption modes are supported by the
.B des
program, Cipher
Block Chaining (CBC \(em the default) and Electronic Code Book (ECB \(em
specified with
.BR -b ).
\fBCBC\fR mode treats an entire file as a unit of
encryption, that is, if insertions or deletions are made to the encrypted file
then decryption will not succeed.
.B CBC
mode also ensures that regularities
in clear data do not appear in the encrypted data.
.B ECB
mode treats each 8
bytes as units of encryptions, so if parts of the encrypted file are modified
then other parts may still be decrypted. Identical values of clear text encrypt
to identical values of cipher text.
.sp
.LP
The key used for the
.B DES
algorithm is obtained by prompting the user
unless the `\fB-k\fR \fIkey\fR' option is given. If the key is an argument to the
\fBdes\fR command, it is potentially visible to users executing
.BR ps (1)
or a
derivative. To minimize this possibility,
.B des
takes care to destroy the key
argument immediately upon entry.
.sp
.LP
The
.B des
command attempts to use
.B DES
hardware for its job, but will
use a software implementation of the
.B DES
algorithm if the hardware is
unavailable. Normally, a warning message is printed if the
.B DES
hardware is
unavailable since the software is only about 1/50th as fast.  However, the
\fB-f\fR option will suppress the warning. The \fB-s\fR option may be used to
force use of software instead of hardware
.BR DES.
.sp
.LP
The
.B des
command reads from standard input unless \fIinput-file\fR is
specified and writes to standard output unless \fIoutput-file\fR is given.
.sp
.LP
The following sections give information required to implement compatible
facilities in other environments.
.sp
.LP
Since the
.B CBC
and
.B ECB
modes of
.B DES
require units of 8 bytes to
be encrypted, files being encrypted by the
.B des
command have 1 to 8 bytes
appended to them to cause them to be a multiple of 8 bytes. The last byte, when
decrypted, gives the number of bytes (0 to 7) which are to be saved of the last 8
bytes. The other bytes of those appended to the input are randomized before
encryption. If, when decrypting, the last byte is not in the range of 0 to 7 then
either the encrypted file has been corrupted or an incorrect key was provided for
decryption and an error message is printed.
.sp
.LP
The
.B DES
algorithm requires an 8 byte key whose low order bits are assumed
to be odd-parity bits.  The
.B ASCII
key supplied by the user is zero padded
.RB "to 8 bytes and the high order bits are set to be odd-parity bits.  The" " DES"
algorithm then ignores the low bit of each
.B ASCII
character, but that bit's
information has been preserved in the high bit due to the parity.
.sp
.LP
The
.B CBC
mode of operation always uses an initial value of all zeros for
the initialization vector, so the first 8 bytes of a file are encrypted the same
whether in
.B CBC
or
.B ECB
mode.
.SH OPTIONS
.sp
.ne 2
.mk
.na
.B -b
.ad
.RS 9n
.rt
Select
.B ECB
(eight bytes at a time) encryption mode.
.RE

.sp
.ne 2
.mk
.na
.B -d
.ad
.RS 9n
.rt
Decrypt data.
.RE

.sp
.ne 2
.mk
.na
.B -e
.ad
.RS 9n
.rt
Encrypt data.
.RE

.sp
.ne 2
.mk
.na
\fB-f\fR
.ad
.RS 9n
.rt
Suppress warning message when software implementation is used.
.RE

.sp
.ne 2
.mk
.na
.B -s
.ad
.RS 9n
.rt
Select software implementation for the encryption algorithm.
.RE

.sp
.ne 2
.mk
.na
\fB-k\fIkey\fR
.ad
.RS 9n
.rt
Use the encryption
.I key
specified.
.RE

.SH FILES
.sp
.ne 2
.mk
.na
.B /dev/des?
.ad
.RS 13n
.rt

.RE

.SH SEE ALSO
.sp
.LP
.BR ps (1)
.SH BUGS
.sp
.LP
It would be better to use a real 56-bit key rather than an ASCII-based 56-bit
pattern. Knowing that the key was derived from
.B ASCII
radically reduces the
time necessary for a brute-force cryptographic attack.
