'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1992 X/Open Company Limited
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1982-2007 AT&T Knowledge Ventures
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH wait 1 "13 Mar 2008" "SunOS 5.11" "User Commands"
.SH NAME
wait \- await process completion
.SH SYNOPSIS
.LP
.nf

.fi

.SS "/bin/sh"
.LP
.nf
\fBwait\fR [\fIpid\fR].\|.\|.
.fi

.SS "/bin/jsh /bin/ksh /usr/xpg4/bin/sh"
.LP
.nf
\fBwait\fR [\fIpid\fR].\|.\|.
.fi

.LP
.nf
\fBwait\fR [% \fIjobid\fR.\|.\|.]
.fi

.SS "/bin/csh"
.LP
.nf
\fBwait\fR
.fi

.SS "ksh93"
.LP
.nf
\fBwait\fR [\fIjob.\|.\|.\fR]
.fi

.SH DESCRIPTION
.sp
.LP
The shell itself executes
.BR wait ,
without creating a new process. If
you get the error message
.BR "cannot fork,too many processes" ,
try using
the
.B wait
command to clean up your background processes. If this
doesn't help, the system process table is probably full or you have too many
active foreground processes. There is a limit to the number of process
\fBID\fRs associated with your login, and to the number the system can keep
track of.
.sp
.LP
Not all the processes of a pipeline with three or more stages are children
of the shell, and thus cannot be waited for.
.SS "/bin/sh, /bin/jsh"
.sp
.LP
Wait for your background process whose process
.B ID
is
.I pid
and
report its termination status. If
.I pid
is omitted, all your shell's
currently active background processes are waited for and the return code is
.BR 0 .
The
.B wait
utility accepts a job identifier, when Job Control
is enabled (jsh), and the argument,
.IR jobid ,
is preceded by a percent
sign
.RB ( % ).
.sp
.LP
If
.I pid
is not an active process
.B ID,
the
.B wait
utility
returns immediately and the return code is
.BR 0 .
.SS "csh"
.sp
.LP
Wait for your background processes.
.SS "ksh"
.sp
.LP
When an asynchronous list is started by the shell, the process
.B ID
of
the last command in each element of the asynchronous list becomes known in
the current shell execution environment.
.sp
.LP
If the
.B wait
utility is invoked with no operands, it waits until all
process
.B IDs
known to the invoking shell have terminated and exit with
an exit status of
.BR 0 .
.sp
.LP
If one or more
.I pid
or
.I jobid
operands are specified that
represent known process
.BR ID "s (or jobids), the"
.B wait
utility waits
until all of them have terminated. If one or more
.I pid
or
.IR jobid
operands are specified that represent unknown process
.BR ID "s (or jobids),"
.B wait
treats them as if they were known process
.BR ID "s (or jobids)"
that exited with exit status
.BR 127 .
The exit status returned by the
.B wait
utility is the exit status of the process requested by the last
.I pid
or
.I jobid
operand.
.sp
.LP
The known process
.BR ID s
are applicable only for invocations of
.B wait
in the current shell execution environment.
.SS "ksh93"
.sp
.LP
wait with no operands, waits until all jobs known to the invoking shell
have terminated. If one or more job operands are specified, wait waits until
all of them have completed. Each job can be specified as one of the
following:
.sp
.ne 2
.mk
.na
.I number
.ad
.RS 12n
.rt
.I number
refers to a process ID.
.RE

.sp
.ne 2
.mk
.na
.BI - number
.ad
.RS 12n
.rt
.I number
refers to a process group ID.
.RE

.sp
.ne 2
.mk
.na
.BI % number
.ad
.RS 12n
.rt
.I number
refers to a job number
.RE

.sp
.ne 2
.mk
.na
.BI % string
.ad
.RS 12n
.rt
Refers to a job whose name begins with
.IR string
.RE

.sp
.ne 2
.mk
.na
.BI %? string
.ad
.RS 12n
.rt
Refers to a job whose name contains
.IR string
.RE

.sp
.ne 2
.mk
.na
.B %+
.ad
.br
.na
.B %%
.ad
.RS 12n
.rt
Refers to the current job
.RE

.sp
.ne 2
.mk
.na
.B %-
.ad
.RS 12n
.rt
Refers to the previous job
.RE

.sp
.LP
If one ore more job operands is a process id or process group id not known
by the current shell environment,
.B wait
treats each of them as if it
were a process that exited with status 127.
.SH OPERANDS
.sp
.LP
The following operands are supported:
.sp
.ne 2
.mk
.na
.I pid
.ad
.RS 9n
.rt
The unsigned decimal integer process
.B ID
of a command, for which the
utility is to wait for the termination.
.RE

.sp
.ne 2
.mk
.na
.I jobid
.ad
.RS 9n
.rt
A job control job
.B ID
that identifies a background process group to be
waited for. The job control job
.B ID
notation is applicable only for
invocations of
.B wait
in the current shell execution environment, and
only on systems supporting the job control option.
.RE

.SH USAGE
.sp
.LP
On most implementations,
.B wait
is a shell built-in. If it is called in
a subshell or separate utility execution environment, such as one of the
following,
.sp
.in +2
.nf
(wait)
nohup wait .\|.\|.
find . -exec wait .\|.\|. \e;
.fi
.in -2
.sp

.sp
.LP
it returns immediately because there is no known process
.BR ID "s to wait"
for in those environments.
.SH EXAMPLES
.LP
.B Example 1
Using A Script To Identify The Termination Signal
.sp
.LP
Although the exact value used when a process is terminated by a signal is
unspecified, if it is known that a signal terminated a process, a script can
still reliably figure out which signal is using
.BR kill ,
as shown by the
following (\fB/bin/ksh\fR and
.BR /usr/xpg4/bin/sh ):

.sp
.in +2
.nf
sleep 1000&
pid=$!
kill -kill $pid
wait $pid
echo $pid was terminated by a SIG$(kill -l $(($?\(mi128))) signal.
.fi
.in -2
.sp

.LP
.B Example 2
Returning The Exit Status Of A Process
.sp
.LP
If the following sequence of commands is run in less than 31 seconds
(\fB/bin/ksh\fR and
.BR /usr/xpg4/bin/sh ):

.sp
.in +2
.nf
sleep 257 | sleep 31 &

jobs -l %%
.fi
.in -2
.sp

.sp
.LP
then either of the following commands returns the exit status of the second
.B sleep
in the pipeline:

.sp
.in +2
.nf
wait <\fIpid of sleep 31\fR>
wait %%
.fi
.in -2
.sp

.SH ENVIRONMENT VARIABLES
.sp
.LP
See
.BR environ (5)
for descriptions of the following environment
variables that affect the execution of
.BR wait :
.BR LANG ,
.BR LC_ALL ,
.BR LC_CTYPE ,
.BR LC_MESSAGES ,
and
.BR NLSPATH .
.SH EXIT STATUS
.SS "ksh93"
.sp
.LP
The following exit values are returned by the
.B wait
built-in in
.BR ksh93 :
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 7n
.rt
.B wait
was invoked with no operands. All processes known by the
invoking process have terminated.
.RE

.sp
.ne 2
.mk
.na
.B 127
.ad
.RS 7n
.rt
.I job
is a process id or process group id that is unknown to the
current shell environment.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
_
Interface StabilityCommitted
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
.BR csh (1),
.BR jobs (1),
.BR ksh (1),
.BR ksh93 (1),
.BR sh (1),
.BR attributes (5),
.BR environ (5),
.BR standards (5)
