'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2016, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1992, X/Open Company Limited All Rights Reserved
.\" Portions Copyright (c) 1982-2007 AT&T Knowledge Ventures
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH printf 1 "12 Sept 2016" "SunOS 5.11" "User Commands"
.SH NAME
printf \- write formatted output
.SH SYNOPSIS
.SS "/usr/bin/printf"
.LP
.nf
\fBprintf\fR \fIformat\fR [\fIargument\fR].\|.\|.
.fi

.SS "bosh"
.LP
.nf
\fBprintf\fR \fIformat\fR [\fIargument ...\fR]
.fi

.SS "ksh93"
.LP
.nf
\fBprintf\fR \fIformat\fR [\fIstring\fR.\|.\|.]
.fi

.SH DESCRIPTION
.SS "/usr/bin/printf"
.sp
.LP
The
.B printf
utility writes each string operand to standard output
using
.I format
to control the output format.
.SH OPERANDS
.SS "/usr/bin/printf"
.sp
.LP
The following operands are supported by
.BR /usr/bin/printf :
.sp
.ne 2
.mk
.na
.I format
.ad
.RS 12n
.rt
A string describing the format to use to write the remaining operands. The
.I format
operand is used as the
.I format
string described on the
.BR formats (5)
manual page, with the following exceptions:
.RS +4
.TP
.ie t \(bu
.el o
A
.B SPACE
character in the format string, in any context other than a
flag of a conversion specification, is treated as an ordinary character that
is copied to the output.
.RE
.RS +4
.TP
.ie t \(bu
.el o
A character in the format string is treated as a character, not as a
.B SPACE
character.
.RE
.RS +4
.TP
.ie t \(bu
.el o
In addition to the escape sequences described on the
.BR formats (5)
manual page (\fB\e\e\fR, \fB\ea\fR, \fB\eb\fR, \fB\ef\fR, \fB\en\fR,
\fB\er\fR, \fB\et\fR, \fB\ev\fR), \fB\e\fIddd\fR, where
.I ddd
is a
one-, two- or three-digit octal number, is written as a byte with the
numeric value specified by the octal number.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The program does not precede or follow output from the
.B d
or
.BR u
conversion specifications with blank characters not specified by the
.I format
operand.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The program does not precede output from the
.B o
conversion
specification with zeros not specified by the
.I format
operand.
.RE
.RS +4
.TP
.ie t \(bu
.el o
An additional conversion character,
.BR b ,
is supported as follows. The
argument is taken to be a string that can contain backslash-escape
sequences. The following backslash-escape sequences are supported:
.RS +4
.TP
.ie t \(bu
.el o
the escape sequences listed on the
.BR formats (5)
manual page
(\fB\e\e\fR, \fB\ea\fR, \fB\eb\fR, \fB\ef\fR, \fB\en\fR, \fB\er\fR,
\fB\et\fR, \fB\ev\fR), which are converted to the characters they
represent
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fB\e0\fIddd\fR, where
.I ddd
is a zero-, one-, two- or three-digit
octal number that is converted to a byte with the numeric value specified by
the octal number
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fB\ec\fR, which is written and causes
.B printf
to ignore any remaining
characters in the string operand containing it, any remaining string
operands and any additional characters in the
.I format
operand.
.RE
.RE
The interpretation of a backslash followed by any other sequence of
characters is unspecified.
.sp
Bytes from the converted string are written until the end of the string or
the number of bytes indicated by the precision specification is reached. If
the precision is omitted, it is taken to be infinite, so all bytes up to the
end of the converted string are written. For each specification that
consumes an argument, the next argument operand is evaluated and converted
to the appropriate type for the conversion as specified below. The
.I format
operand is reused as often as necessary to satisfy the argument
operands. Any extra
.B c
or
.B s
conversion specifications are
evaluated as if a null string argument were supplied; other extra conversion
specifications are evaluated as if a zero argument were supplied. If the
.I format
operand contains no conversion specifications and
.I argument
operands are present, the results are unspecified. If a
character sequence in the
.I format
operand begins with a \fB%\fR
character, but does not form a valid conversion specification, the behavior
is unspecified.
.RE

.sp
.ne 2
.mk
.na
.I argument
.ad
.RS 12n
.rt
The strings to be written to standard output, under the control of
.BR format .
The
.I argument
operands are treated as strings if the
corresponding conversion character is
.BR b ,
.B c
or
.BR s .
Otherwise, it is evaluated as a C constant, as described by the ISO C
standard, with the following extensions:
.RS +4
.TP
.ie t \(bu
.el o
A leading plus or minus sign is allowed.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If the leading character is a single- or double-quote, the value is the
numeric value in the underlying codeset of the character following the
single- or double-quote.
.RE
If an argument operand cannot be completely converted into an internal
value appropriate to the corresponding conversion specification, a
diagnostic message is written to standard error and the utility does not
exit with a zero exit status, but continues processing any remaining
operands and writes the value accumulated at the time the error was detected
to standard output.
.RE

.SS "bosh"
.sp
.LP
The
.B printf
command writes formatted operands to the standard output.
The
.I argument
operands are formatted under control of the
.I format
operand.
The
.I format
operand is treated like a
.BR printf (3)
format string and the escape sequences
.BR '\ea' ,
.BR '\eb' ,
.BR '\ef' ,
.BR '\en' ,
.BR '\er' ,
.BR '\et' ,
.BR '\ev' ,
.B '\e\e'
and
.BR '\eddd' ,
where
.I ddd
is one to three octal digits, are expanded as if they were in a C string.
.sp
In addition to the format specifiers
.BR %c ,
.BR %s ,
.BR %d ,
.BR %i ,
.BR %o ,
.BR %u ,
.BR %x ,
.BR %X ,
the format
.BR %b 
is supported.
The integers are handled internally as
.B intmax_t
to avoid range problems
even though only the standard int type specifiers are supported in the
.I format
operand.
The format
.BR %b 
is treated like
.BR %s 
except that escape sequences in the argument string are expanded as with the
.B echo
command.
.sp
Field width and precision may be specified either numerically in the
.I format
operand
or via the
.B '*'
format specifier and related arguments.
.sp
The
.BR printf (3)
flag characters
.BR '+' ,
.BR '\ ' ,
.B '#'
and
.BR '0'
are supported.
.sp
The
.I format
operand is reused as often as necessary to satisfy the
.I argument
operands.
If the
.I format
operand contains more format specifiers than
.I argument
operands have been specified, string formats are treated as if an empty string
has been supplied and integer arguments are treated as if a 0 has been supplied.

.SS "ksh93"
.sp
.LP
The
.I format
operands support the full range of ANSI C/C99/XPG6
formatting specifiers as well as additional specifiers:
.sp
.ne 2
.mk
.na
.B %b
.ad
.RS 6n
.rt
Each character in the string operand is processed specially, as follows:
.sp
.ne 2
.mk
.na
\fB\ea\fR
.ad
.RS 8n
.rt
Alert character.
.RE

.sp
.ne 2
.mk
.na
\fB\eb\fR
.ad
.RS 8n
.rt
Backspace character.
.RE

.sp
.ne 2
.mk
.na
\fB\ec\fR
.ad
.RS 8n
.rt
Terminate output without appending NEWLINE. The remaining string operands
are ignored.
.RE

.sp
.ne 2
.mk
.na
\fB\eE\fR
.ad
.RS 8n
.rt
Escape character (\fBASCII\fR octal
.BR 033 ).
.RE

.sp
.ne 2
.mk
.na
\fB\ef\fR
.ad
.RS 8n
.rt
FORM FEED character.
.RE

.sp
.ne 2
.mk
.na
\fB\en\fR
.ad
.RS 8n
.rt
NEWLINE character.
.RE

.sp
.ne 2
.mk
.na
\fB\et\fR
.ad
.RS 8n
.rt
TAB character.
.RE

.sp
.ne 2
.mk
.na
\fB\ev\fR
.ad
.RS 8n
.rt
Vertical tab character.
.RE

.sp
.ne 2
.mk
.na
\fB\e\e\fR
.ad
.RS 8n
.rt
Backslash character.
.RE

.sp
.ne 2
.mk
.na
\fB\e0\fIx\fR
.ad
.RS 8n
.rt
The 8-bit character whose
.B ASCII
code is the
.BR 1 -,
\fB2\fR-, or
\fB3\fR-digit octal number
.IR x .
.RE

.RE

.sp
.ne 2
.mk
.na
.B %B
.ad
.RS 6n
.rt
Treat the argument as a variable name and output the value without
converting it to a string. This is most useful for variables of type
.BR -b .
.RE

.sp
.ne 2
.mk
.na
.B %H
.ad
.RS 6n
.rt
Output string with characters \fB<\fR, \fB&\fR, \fB>\fR, \fB"\fR, and
non-printable characters, properly escaped for use in HTML and XML
documents.
.RE

.sp
.ne 2
.mk
.na
.B %P
.ad
.RS 6n
.rt
Treat
.I string
as an extended regular expression and convert it to a
shell pattern.
.RE

.sp
.ne 2
.mk
.na
.B %q
.ad
.RS 6n
.rt
Output
.I string
quoted in a manner that it can be read in by the shell
to get back the same string. However, empty strings resulting from missing
string operands are not quoted.
.RE

.sp
.ne 2
.mk
.na
.B %R
.ad
.RS 6n
.rt
Treat
.I string
as an shell pattern expression and convert it to an
extended regular expression.
.RE

.sp
.ne 2
.mk
.na
.B %T
.ad
.RS 6n
.rt
Treat
.I string
as a date/time string and format it. The
.B T
can be
.RI "preceded by (" dformat "), where " dformat " is a date format as defined"
by the
.BR date (1)
command.
.RE

.sp
.ne 2
.mk
.na
.B %Z
.ad
.RS 6n
.rt
Output a byte whose value is
.BR 0 .
.RE

.sp
.LP
When performing conversions of
.I string
to satisfy a numeric format
specifier, if the first character of \fIstring\fR is \fB"or'\fR, the value
is the numeric value in the underlying code set of the character following
the \fB"or'\fR. Otherwise, \fIstring\fR is treated like a shell arithmetic
expression and evaluated.
.sp
.LP
If a
.I string
operand cannot be completely converted into a value
appropriate for that format specifier, an error occurs, but remaining
.I string
operands continue to be processed.
.sp
.LP
In addition to the format specifier extensions, the following extensions of
ANSI C/C99/XPG6 are permitted in format specifiers:
.RS +4
.TP
.ie t \(bu
.el o
The escape sequences \fB\eE\fR and \fB\ee\fR expand to the escape character
which is octal 033 in ASCII.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The escape sequence \fB\ecx\fR expands to CTRL-x.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The escape sequence \fB\eC[.\fIname\fB\&.]\fR expands to the
collating element
.IR name .
.RE
.RS +4
.TP
.ie t \(bu
.el o
The escape sequence \fB\ex{hex}\fRexpands to the character corresponding to
the hexadecimal value
.BR hex .
.RE
.RS +4
.TP
.ie t \(bu
.el o
The format modifier flag = can be used to center a field to a specified
width. When the output is a terminal, the character width is used rather
than the number of bytes.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Each of the integral format specifiers can have a third modifier after
width and precision that specifies the base of the conversion from 2 to 64.
In this case, the
.B #
modifier causes \fIbase\fB#\fR to be prepended
to the value.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The
.B #
modifier can be used with the
.B d
specifier when no base is
specified to cause the output to be written in units of 1000 with a suffix
of one of
.BR "k M G T P E" .
.RE
.RS +4
.TP
.ie t \(bu
.el o
The
.B #
modifier can be used with the
.B i
specifier to cause the
output to be written in units of
.B 1024
with a suffix of one of \fBKi Mi Gi Ti Pi Ei\fR.
.RE
.sp
.LP
If there are more
.I string
operands than format specifiers, the format
string is reprocessed from the beginning. If there are fewer
.I string
operands than format specifiers, then
.I string
specifiers are treated as
if empty strings were supplied, numeric conversions are treated as if
.B 0
was supplied, and time conversions are treated as if
.B now
was
supplied.
.sp
.LP
.B /usr/bin/printf
is equivalent to
.BR ksh93 's
\fBprintf\fR built-in
and
.BR "print -f" ,
which allows additional options to be specified.
.SH USAGE
.SS "/usr/bin/printf"
.sp
.LP
.RB "The " printf " utility, like the " printf (3C)
function on which it is
based, makes no special provision for dealing with multi-byte characters
when using the
.B %c
conversion specification. Applications should be
extremely cautious using either of these features when there are multi-byte
characters in the character set.
.sp
.LP
Field widths and precisions cannot be specified as
.BR * .
.sp
.LP
The
.B %b
conversion specification is not part of the ISO C standard; it
has been added here as a portable way to process backslash escapes expanded
in string operands as provided by the
.B echo
utility. See also the USAGE
section of the
.BR echo (1)
manual page for ways to use
.B printf
as a
replacement for all of the traditional versions of the
.B echo
utility.
.sp
.LP
If an argument cannot be parsed correctly for the corresponding conversion
specification, the
.B printf
utility reports an error. Thus, overflow and
extraneous characters at the end of an argument being used for a numeric
conversion are to be reported as errors.
.sp
.LP
It is not considered an error if an argument operand is not completely used
for a
.B c
or
.B s
conversion or if a string operand's first or second
character is used to get the numeric value of a character.
.SH EXAMPLES
.SS "/usr/bin/printf"
.LP
.B Example 1
Printing a Series of Prompts
.sp
.LP
The following example alerts the user, then prints and reads a series of
prompts:

.sp
.in +2
.nf
example% \fBprintf "\eaPlease fill in the following: \enName: "
read name
printf "Phone number: "
read phone\fR
.fi
.in -2
.sp

.LP
.B Example 2
Printing a Table of Calculations
.sp
.LP
The following example prints a table of calculations. It reads out a list
of right and wrong answers from a file, calculates the percentage correctly,
and prints them out. The numbers are right-justified and separated by a
single tab character. The percentage is written to one decimal place of
accuracy:

.sp
.in +2
.nf
example% \fBwhile read right wrong ; do
   percent=$(echo "scale=1;($right*100)/($right+$wrong)" | bc)
   printf "%2d right\et%2d wrong\et(%s%%)\en" \e
	   $right $wrong $percent
done < database_file\fR
.fi
.in -2
.sp

.LP
.B Example 3
Printing number strings
.sp
.LP
The command:

.sp
.in +2
.nf
example% \fBprintf "%5d%4d\en" 1 21 321 4321 54321\fR
.fi
.in -2
.sp

.sp
.LP
produces:

.sp
.in +2
.nf
    1  21
  3214321
54321   0
.fi
.in -2
.sp

.sp
.LP
The
.I format
operand is used three times to print all of the given
strings and that a
.B 0
was supplied by
.B printf
to satisfy the last
.B %4d
conversion specification.

.LP
.B Example 4
Tabulating Conversion Errors
.sp
.LP
The following example tabulates conversion errors.

.sp
.LP
The
.B printf
utility tells the user when conversion errors are detected
while producing numeric output. These results would be expected on an
implementation with 32-bit twos-complement integers when
.B %d
is
specified as the
.I format
operand:

.sp

.sp
.TS
tab() box;
cw(1.27i) cw(1.27i) cw(2.96i)
lw(1.27i) lw(1.27i) lw(2.96i)
.
ArgumentsStandardDiagnostic
5a5printf: 5a not completely converted
99999999992147483647printf: 9999999999: Results too large
-9999999999-2147483648printf: -9999999999: Results too large
ABC0printf: ABC expected numeric value
.TE

.sp
.LP
The value shown on standard output is what would be expected as the return
value from the function
.BR strtol "(3C). A similar correspondence exists"
between
.B %u
and
.BR strtoul "(3C), and"
.BR %e ,
.B %f
and
.BR %g
and
.BR strtod (3C).

.LP
.B Example 5
Printing Output for a Specific Locale
.sp
.LP
The following example prints output for a specific locale. In a locale
using the ISO/IEC 646:1991 standard as the underlying codeset, the
command:

.sp
.in +2
.nf
example% \fBprintf "%d\en" 3 +3 -3 \e'3 \e"+3 "'-3"\fR
.fi
.in -2
.sp

.sp
.LP
produces:

.sp

.sp
.TS
tab() box;
lw(.5i) lw(5i)
lw(.5i) lw(5i)
.
\fB3\fRNumeric value of constant 3
\fB3\fRNumeric value of constant 3
\fB\(mi3\fRNumeric value of constant \(mi3
\fB51\fRT{
Numeric value of the character `3' in the ISO/IEC 646:1991 standard codeset
T}
\fB43\fRT{
Numeric value of the character `+' in the ISO/IEC 646:1991 standard codeset
T}
\fB45\fRT{
Numeric value of the character `\(mi' in the SO/IEC 646:1991 standard codeset
T}
.TE

.sp
.LP
In a locale with multi-byte characters, the value of a character is
intended to be the value of the equivalent of the
.BR wchar_t
representation of the character.

.sp
.LP
If an argument operand cannot be completely converted into an internal
value appropriate to the corresponding conversion specification, a
diagnostic message is written to standard error and the utility does exit
with a zero exit status, but continues processing any remaining operands and
writes the value accumulated at the time the error was detected to standard
output.

.LP
.B Example 6
Alternative floating point representation 1
.sp
.LP
The
.B printf
utility supports an alternative floating point
representation (see \fBprintf\fR(3C) entry for the "\fB%a\fR"/"\fB%A\fR"),
which allows the output of floating-point values in a format that avoids the
usual base16 to base10 rounding errors.

.sp
.in +2
.nf
example% printf "%a\en" 2 3.1 NaN
.fi
.in -2
.sp

.sp
.LP
produces:

.sp
.in +2
.nf
0x1.0000000000000000000000000000p+01
0x1.8ccccccccccccccccccccccccccdp+01
nan
.fi
.in -2
.sp

.LP
.B Example 7
Alternative floating point representation 2
.sp
.LP
The following example shows two different representations of the same
floating-point value.

.sp
.in +2
.nf
example% x=2 ; printf "%f == %a\en" x x
.fi
.in -2
.sp

.sp
.LP
produces:

.sp
.in +2
.nf
2.000000 == 0x1.0000000000000000000000000000p+01
.fi
.in -2
.sp

.LP
.B Example 8
Output of unicode values
.sp
.LP
The following command will print the EURO unicode symbol (code-point
0x20ac).

.sp
.in +2
.nf
example% LC_ALL=en_US.UTF-8 printf "\u[20ac]\en"
.fi
.in -2
.sp

.sp
.LP
produces:

.sp
.in +2
.nf
<euro>
.fi
.in -2
.sp

.sp
.LP
where "<euro>" represents the EURO currency symbol character.

.LP
.B Example 9
Convert unicode character to unicode code-point value
.sp
.LP
The following command will print the hexadecimal value of a given
character.

.sp
.in +2
.nf
example% export LC_ALL=en_US.UTF-8
example% printf "%x\en" "'<euro>"
.fi
.in -2
.sp

.sp
.LP
where "<euro>" represents the EURO currency symbol character (code-point
0x20ac).

.sp
.LP
produces:

.sp
.in +2
.nf
20ac
.fi
.in -2
.sp

.LP
.B Example 10
Print the numeric value of an ASCII character
.sp
.in +2
.nf
example% printf "%d\en" "'A"
.fi
.in -2
.sp

.sp
.LP
produces:

.sp
.in +2
.nf
65
.fi
.in -2
.sp

.LP
.B Example 11
Print the language-independent date and time format
.sp
.LP
To print the language-independent date and time format, the following
statement could be used:

.sp
.in +2
.nf
example% printf "format" weekday month day hour min
.fi
.in -2
.sp

.sp
.LP
For example,

.sp
.in +2
.nf
$ printf format "Sunday" "July" 3 10 2
.fi
.in -2
.sp

.sp
.LP
For American usage, format could be the string:

.sp
.in +2
.nf
"%s, %s %d, %d:%.2d\en"
.fi
.in -2
.sp

.sp
.LP
producing the message:

.sp
.in +2
.nf
Sunday, July 3, 10:02
.fi
.in -2
.sp

.sp
.LP
Whereas for EU usage, format could be the string:

.sp
.in +2
.nf
"%1$s, %3$d. %2$s, %4$d:%5$.2d\en"
.fi
.in -2
.sp

.sp
.LP
Note that the '$' characters must be properly escaped, such as

.sp
.in +2
.nf
"%1\$s, %3\$d. %2\$s, %4\$d:%5\$.2d\en" in this case
.fi
.in -2
.sp

.sp
.LP
producing the message:

.sp
.in +2
.nf
Sunday, 3. July, 10:02
.fi
.in -2
.sp

.SH ENVIRONMENT VARIABLES
.sp
.LP
See
.BR environ (5)
for descriptions of the following environment
variables that affect the execution of
.BR printf :
.BR LANG ,
.BR LC_ALL ,
.BR LC_CTYPE ,
.BR LC_MESSAGES ,
.BR LC_NUMERIC ,
and
.BR NLSPATH .
.SH EXIT STATUS
.sp
.LP
The following exit values are returned:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 6n
.rt
Successful completion.
.RE

.sp
.ne 2
.mk
.na
.B >0
.ad
.RS 6n
.rt
An error occurred.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp
.ne 15
.SS "/usr/bin/printf, bosh"
.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWloc
_
CSIEnabled
_
Interface StabilityCommitted
_
StandardSee \fBstandards\fR(5).
.TE

.SS "ksh93"
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
_
Interface StabilityUncommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR awk (1),
.BR bc (1),
.BR bosh (1),
.BR date (1),
.BR echo (1),
.BR ksh93 (1),
.BR printf (3C),
.BR strtod (3C),
.BR strtol (3C),
.BR strtoul (3C),
.BR attributes (5),
.BR environ (5),
.BR formats (5),
.BR standards (5)
.SH NOTES
.sp
.LP
Using format specifiers (characters following '%') which are not listed in
the
.BR printf (3C)
or this manual page will result in undefined
behavior.
.sp
.LP
Using escape sequences (the character following a backslash ('\e')) which
are not listed in the
.BR printf (3C)
or this manual page will result in
undefined behavior.
.sp
.LP
Floating-point values follow C99, XPG6 and IEEE 754 standard behavior and
can handle values the same way as the platform's |\fBlong double\fR|
datatype.
.sp
.LP
Floating-point values handle the sign separately which allows signs for
values like NaN (for example, -nan), Infinite (for example, -inf) and zero
(for example, -0.0).
