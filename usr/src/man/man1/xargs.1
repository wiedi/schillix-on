'\" te
.\" Copyright 1989 AT&T
.\" Copyright (c) 1992, X/Open Company Limited All Rights Reserved
.\" Portions Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH xargs 1 "17 Jul 2007" "SunOS 5.11" "User Commands"
.SH NAME
xargs \- construct argument lists and invoke utility
.SH SYNOPSIS
.LP
.nf
\fBxargs\fR [\fB-t\fR] [\fB-p\fR] [\fB-e\fR[\fIeofstr\fR]] [\fB-E\fR \fIeofstr\fR]
     [\fB-I\fR \fIreplstr\fR] [\fB-i\fR[\fIreplstr\fR]] [\fB-L\fR \fInumber\fR] [\fB-l\fR[\fInumber\fR]]
     [\fB-n\fR \fInumber\fR [\fB-x\fR]] [\fB-s\fR \fIsize\fR] [\fIutility\fR [\fIargument\fR.\|.\|.]]
.fi

.SH DESCRIPTION
.sp
.LP
The
.B xargs
utility constructs a command line consisting of the
.I utility
and
.I argument
operands specified followed by as many
arguments read in sequence from standard input as fit in length and number
constraints specified by the options. The
.B xargs
utility then invokes
the constructed command line and waits for its completion. This sequence is
repeated until an end-of-file condition is detected on standard input or an
invocation of a constructed command line returns an exit status of
.BR 255 .
.sp
.LP
Arguments in the standard input must be separated by unquoted blank
characters, or unescaped blank characters or newline characters. A string of
zero or more non-double-quote (\fB"\fR) and non-newline characters can be
quoted by enclosing them in double-quotes. A string of zero or more
non-apostrophe (\fB\&'\fR) and non-newline characters can be quoted by
enclosing them in apostrophes. Any unquoted character can be escaped by
preceding it with a backslash (\fB\e\fR). The
.I utility
are executed one
or more times until the end-of-file is reached. The results are unspecified
if the utility named by
.I utility
attempts to read from its standard
input.
.sp
.LP
The generated command line length is the sum of the size in bytes of the
utility name and each argument treated as strings, including a null byte
terminator for each of these strings. The
.B xargs
utility limits the
command line length such that when the command line is invoked, the combined
argument and environment lists can not exceed \fB{ARG_MAX}\(mi2048\fR bytes.
Within this constraint, if neither the
.B -n
nor the
.B -s
option is
specified, the default command line length is at least
.BR {LINE_MAX} .
.SH OPTIONS
.sp
.LP
The following options are supported:
.sp
.ne 2
.mk
.na
\fB-e[\fIeofstr\fB]\fR
.ad
.RS 15n
.rt
Uses \fIeofstr\fR as the logical end-of-file string. Underscore (\fB_\fR)
is assumed for the logical
.B EOF
string if neither
.B -e
nor
.BR -E
is used. When the
.I eofstr
option-argument is omitted, the logical
.B EOF
string capability is disabled and underscores are taken literally.
The
.B xargs
utility reads standard input until either end-of-file or the
logical
.B EOF
string is encountered.
.RE

.sp
.ne 2
.mk
.na
.B -E
.I eofstr
.ad
.RS 15n
.rt
Specifies a logical end-of-file string to replace the default underscore.
.B xargs
reads standard input until either end-of-file or the logical EOF
string is encountered. When
.I eofstr
is a null string, the logical
end-of-file string capability is disabled and underscore characters are
taken literally.
.RE

.sp
.ne 2
.mk
.na
.B -I
.I replstr
.ad
.RS 15n
.rt
Insert mode.
.I utility
is executed for each line from standard input,
.RI "taking the entire line as a single argument, inserting it in" " argument"
.I s
for each occurrence of
.IR replstr .
A maximum of five arguments in
\fIargument\fRs can each contain one or more instances of
.IR replstr .
Any
blank characters at the beginning of each line are ignored. Constructed
arguments cannot grow larger than 255 bytes. Option
.B -x
is forced on.
The
.B -I
and
.B -i
options are mutually exclusive; the last one
specified takes effect.
.RE

.sp
.ne 2
.mk
.na
\fB-i[\fIreplstr\fB]\fR
.ad
.RS 15n
.rt
This option is equivalent to
.BR -I
.IR replstr .
The string \fB{\|}\fR
is assumed for
.I replstr
if the option-argument is omitted.
.RE

.sp
.ne 2
.mk
.na
.B -L
.I number
.ad
.RS 15n
.rt
The
.I utility
is executed for each non-empty
.I number
lines of
arguments from standard input. The last invocation of
.I utility
is with
fewer lines of arguments if fewer than
.I number
remain. A line is
considered to end with the first newline character unless the last character
of the line is a blank character; a trailing blank character signals
continuation to the next non-empty line, inclusive. The
.BR -L ,
.BR -l ,
and
.B -n
options are mutually exclusive; the last one specified takes
effect.
.RE

.sp
.ne 2
.mk
.na
\fB-l[\fInumber\fB]\fR
.ad
.RS 15n
.rt
.RB "(The letter ell.) This option is equivalent to" " -L"
.IR number .
If
.I number
is omitted,
.B 1
is assumed. Option
.B -x
is forced on.
.RE

.sp
.ne 2
.mk
.na
.B -n
.I number
.ad
.RS 15n
.rt
Invokes
.I utility
using as many standard input arguments as possible,
up to
.I number
(a positive decimal integer) arguments maximum. Fewer
arguments are used if:
.RS +4
.TP
.ie t \(bu
.el o
The command line length accumulated exceeds the size specified by the
.B -s
option (or
.B {LINE_MAX}
if there is no
.B -s
option), or
.RE
.RS +4
.TP
.ie t \(bu
.el o
The last iteration has fewer than
.IR number ,
but not zero, operands
remaining.
.RE
.RE

.sp
.ne 2
.mk
.na
.B -p
.ad
.RS 15n
.rt
Prompt mode. The user is asked whether to execute
.I utility
at each
invocation. Trace mode (\fB-t\fR) is turned on to write the command instance
to be executed, followed by a prompt to standard error. An affirmative
response (specific to the user's locale) read from
.B /dev/tty
executes
the command; otherwise, that particular invocation of
.I utility
is
skipped.
.RE

.sp
.ne 2
.mk
.na
.B -s
.I size
.ad
.RS 15n
.rt
Invokes
.I utility
using as many standard input arguments as possible
yielding a command line length less than
.I size
(a positive decimal
integer) bytes. Fewer arguments are used if:
.RS +4
.TP
.ie t \(bu
.el o
The total number of arguments exceeds that specified by the
.BR -n
option, or
.RE
.RS +4
.TP
.ie t \(bu
.el o
The total number of lines exceeds that specified by the
.B -L
option,
or
.RE
.RS +4
.TP
.ie t \(bu
.el o
End of file is encountered on standard input before
.I size
bytes are
accumulated.
.RE
Values of
.I size
up to at least
.B {LINE_MAX}
bytes are supported,
provided that the constraints specified in DESCRIPTION are met. It is not
considered an error if a value larger than that supported by the
implementation or exceeding the constraints specified in DESCRIPTION is
specified.
.B xargs
uses the largest value it supports within the
constraints.
.RE

.sp
.ne 2
.mk
.na
.B -t
.ad
.RS 6n
.rt
Enables trace mode. Each generated command line is written to standard
error just prior to invocation.
.RE

.sp
.ne 2
.mk
.na
.B -x
.ad
.RS 6n
.rt
Terminates if a command line containing
.I number
arguments (see the
.B -n
option above) or
.I number
lines (see the
.B -L
option above)
does not fit in the implied or specified size (see the
.B -s
option
above).
.RE

.SH OPERANDS
.sp
.LP
The following operands are supported:
.sp
.ne 2
.mk
.na
.I utility
.ad
.RS 12n
.rt
The name of the utility to be invoked, found by search path using the
.B PATH
environment variable. (ee
.BR environ (5).)
If
.I utility
is
omitted, the default is the
.BR echo (1)
utility. If the \fIutility\fR
operand names any of the special built-in utilities in
.BR shell_builtins (1),
the results are undefined.
.RE

.sp
.ne 2
.mk
.na
.I argument
.ad
.RS 12n
.rt
An initial option or operand for the invocation of
.IR utility .
.RE

.SH USAGE
.sp
.LP
The
.B 255
exit status allows a utility being used by
.B xargs
to
tell
.B xargs
to terminate if it knows no further invocations using the
current data stream succeeds. Thus,
.I utility
should explicitly
.B exit
with an appropriate value to avoid accidentally returning with
.BR 255 .
.sp
.LP
Notice that input is parsed as lines. Blank characters separate arguments.
If
.B xargs
is used to bundle output of commands like \fBfind\fR
.I dir
.B -print
or
.B ls
into commands to be executed, unexpected
results are likely if any filenames contain any blank characters or newline
characters. This can be fixed by using
.B find
to call a script that
converts each file found into a quoted string that is then piped to
.BR xargs .
Notice that the quoting rules used by
.B xargs
are not the
same as in the shell. They were not made consistent here because existing
applications depend on the current rules and the shell syntax is not fully
compatible with it. An easy rule that can be used to transform any string
into a quoted form that
.B xargs
interprets correctly is to precede each
character in the string with a backslash (\fB\e\fR).
.sp
.LP
On implementations with a large value for
.BR {ARG_MAX} ,
.B xargs
can
produce command lines longer than
.BR {LINE_MAX} .
For invocation of
utilities, this is not a problem. If
.B xargs
is being used to create a
text file, users should explicitly set the maximum command line length with
the
.B -s
option.
.sp
.LP
The
.B xargs
utility returns exit status
.B 127
if an error occurs so
that applications can distinguish "failure to find a utility" from "invoked
utility exited with an error indication." The value \fB127\fR was chosen
because it is not commonly used for other meanings; most utilities use small
values for "normal error conditions" and the values above \fB128\fR can be
confused with termination due to receipt of a signal. The value \fB126\fR
was chosen in a similar manner to indicate that the utility could be found,
but not invoked.
.SH EXAMPLES
.LP
.B Example 1
Using the xargs command
.sp
.LP
The following example moves all files from directory
.B $1
to directory
.BR $2 ,
and echo each move command just before doing it:

.sp
.in +2
.nf
example% \fBls $1 | xargs -I {} -t mv $1/{} $2/{}\fR
.fi
.in -2
.sp

.sp
.LP
The following command combines the output of the parenthesised commands
onto one line, which is then written to the end of file
.BR log :

.sp
.in +2
.nf
example% \fB(logname; date; printf "%s\en" "$0 $*") | xargs >>log\fR
.fi
.in -2
.sp

.sp
.LP
The following command invokes
.B diff
with successive pairs of arguments
originally typed as command line arguments (assuming there are no embedded
blank characters in the elements of the original argument list):

.sp
.in +2
.nf
example% \fBprintf "%s\en" "$*" | xargs -n 2 -x diff\fR
.fi
.in -2
.sp

.sp
.LP
The user is asked which files in the current directory are to be archived.
The files are archived into
.B "arch ;"
a, one at a time, or b, many
at a time:

.sp
.in +2
.nf
example% \fBls | xargs -p -L 1 ar -r arch
ls | xargs -p -L 1 | xargs ar -r arch\fR
.fi
.in -2
.sp

.sp
.LP
The following executes with successive pairs of arguments originally typed
as command line arguments:

.sp
.in +2
.nf
example% \fBecho $* | xargs -n 2 diff\fR
.fi
.in -2
.sp

.SH ENVIRONMENT VARIABLES
.sp
.LP
See
.BR environ (5)
for descriptions of the following environment
variables that affect the execution of
.BR xargs :
.BR LANG ,
.BR LC_ALL ,
.BR LC_COLLATE ,
.BR LC_CTYPE ,
.BR LC_MESSAGES ,
and
.BR NLSPATH .
.sp
.ne 2
.mk
.na
.B PATH
.ad
.RS 8n
.rt
Determine the location of
.IR utility .
.RE

.sp
.LP
Affirmative responses are processed using the extended regular expression
defined for the
.B yesexpr
keyword in the
.B LC_MESSAGES
category of
the user's locale. The locale specified in the
.B LC_COLLATE
category
defines the behavior of ranges, equivalence classes, and multi-character
collating elements used in the expression defined for
.BR yesexpr .
The
locale specified in
.B LC_CTYPE
determines the locale for interpretation
of sequences of bytes of text data a characters, the behavior of character
classes used in the expression defined for the
.BR yesexpr .
See
.BR locale (5).
.SH EXIT STATUS
.sp
.LP
The following exit values are returned:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 12n
.rt
All invocations of
.I utility
returned exit status
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
\fB1\(mi125\fR
.ad
.RS 12n
.rt
A command line meeting the specified requirements could not be assembled,
one or more of the invocations of
.I utility
returned a non-zero exit
status, or some other error occurred.
.RE

.sp
.ne 2
.mk
.na
.B 126
.ad
.RS 12n
.rt
The utility specified by
.I utility
was found but could not be
invoked.
.RE

.sp
.ne 2
.mk
.na
.B 127
.ad
.RS 12n
.rt
The utility specified by
.I utility
could not be found.
.RE

.sp
.LP
If a command line meeting the specified requirements cannot be assembled,
the utility cannot be invoked, an invocation of the utility is terminated by
a signal, or an invocation of the utility exits with exit status
.BR 255 ,
the
.B xargs
utility writes a diagnostic message and exit without
processing any remaining input.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
_
CSIEnabled
_
Interface StabilityStandard
.TE

.SH SEE ALSO
.sp
.LP
.BR echo (1),
.BR shell_builtins (1),
.BR attributes (5),
.BR environ (5),
.BR standards (5)
