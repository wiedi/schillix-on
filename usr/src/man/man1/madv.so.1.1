'\" te
.\" Copyright (c) 2002, Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH madv.so.1 1 "15 Feb 2002" "SunOS 5.11" "User Commands"
.SH NAME
madv.so.1 \- madv library
.SH SYNOPSIS
.LP
.nf
\fB/usr/lib/madv.so.1\fR
.fi

.SH DESCRIPTION
.sp
.LP
The
.B madv.so.1
shared object provides a means by which the VM advice
can be selectively configured for a launched process (or processes) and its
descendants. To enable
.BR madv.so.1 ,
the following string needs to be
present in the environment (see
.BR ld.so.1 (1))
along with one or more
\fBMADV\fR environment variables:
.sp
.in +2
.nf
\fBLD_PRELOAD=$LD_PRELOAD:madv.so.1\fR
.fi
.in -2
.sp

.SH ENVIRONMENT VARIABLES
.sp
.LP
If the
.B madv.so.1
shared object is specified in the
.BR LD_PRELOAD
list, the following environment variables are read by the
.B madv
shared
object to determine to which created process(es) to apply the specified
advice.
.sp
.ne 2
.mk
.na
\fBMADV\fR=\fIadvice\fR
.ad
.RS 27n
.rt
\fBMADV\fR specifies the VM advice to use for all heap, shared memory, and
mmap regions in the process address                 space. This advice is
applied to all created processes.
.sp
Values for
.I advice
correspond to values in <sys/mman.h> used in
.BR madvise (3C)
to specify memory access patterns:
.br
.in +2
normal
.in -2
.br
.in +2
random
.in -2
.br
.in +2
sequential
.in -2
.br
.in +2
access_lwp
.in -2
.br
.in +2
access_many
.in -2
.br
.in +2
access_default
.in -2
.RE

.sp
.ne 2
.mk
.na
\fBMADVCFGFILE\fR=\fIconfig-file\fR
.ad
.RS 27n
.rt
\fIconfig-file\fR is a text file which contains one or more \fBmadv\fR
configuration entries of the form:
.sp
.in +2
.nf
\fIexec-name\fR \fIexec-args\fR:\fIadvice-opts\fR
.fi
.in -2
.sp

Advice specified in \fIconfig-file\fR takes precedence over that specified
by the
.B MADV
environment variable. When
.B MADVCFGFILE
is not set,
advice is taken from file \fB/etc/madv.conf\fR if it exists.
.sp
\fIexec-name\fR specifies the name of an application or executable. The
corresponding advice is set for newly created processes (see
.BR getexecname (3C))
that match the first
.I exec-name
found in the
file.
.sp
\fIexec-name\fR can be a full pathname, a base name, or a pattern string.
See
.B "File Name Generation"
in
.BR sh (1)
for a discussion of pattern
matching.
.sp
\fIexec-args\fR is an optionally specified pattern string to match against
arguments. Advice is set only if
.I exec-args
is not specified or occurs
within the arguments to
.IR exec-name .
.sp
\fIadvice-opts\fR is a comma-separated list specifying the advice for
various memory region(s):
.sp
.ne 2
.mk
.na
\fBmadv\fR=\fIadvice\fR
.ad
.RS 21n
.rt
Applies to all heap, shared memory, and mmap regions in the process address
space.
.RE

.sp
.ne 2
.mk
.na
\fBheap\fR=\fIadvice\fR
.ad
.RS 21n
.rt
The heap is defined to be the brk area (see
.BR brk (2)).
Applies to the
existing heap and for any additional heap memory allocated in the future.
.RE

.sp
.ne 2
.mk
.na
\fBshm\fR=\fIadvice\fR
.ad
.br
.na
\fBism\fR=\fIadvice\fR
.ad
.br
.na
\fBdism\fR=\fIadvice\fR
.ad
.RS 21n
.rt
Shared memory segments (see
.BR shmat (2))
attached using any flags, flag
.BR SHM_SHARE_MMU ,
or flag
.B SHM_PAGEABLE
respectively. Options
\fBism\fR and \fBdism\fR take precedence over option \fBshm\fR.
.RE

.sp
.ne 2
.mk
.na
\fBmap\fR=\fIadvice\fR
.ad
.br
.na
\fBmapshared\fR=\fIadvice\fR
.ad
.br
.na
\fBmapprivate\fR=\fIadvice\fR
.ad
.br
.na
\fBmapanon\fR=\fIadvice\fR
.ad
.RS 21n
.rt
Mappings established through
.BR mmap (2)
using any flags, flag
.BR MAP_SHARED ,
flag
.BR MAP_PRIVATE ,
or flag
.BR MAP_ANON ,
respectively. Options
.BR mapshared ,
.BR mapprivate ,
and
.BR mapanon
take precedence over option
.BR map .
Option
.B mapanon
takes precedence
over
.B mapshared
and
.BR mapprivate .
.RE

.RE

.sp
.ne 2
.mk
.na
\fBMADVERRFILE\fR=\fIpathname\fR
.ad
.RS 27n
.rt
By default, error messages are logged via
.BR syslog (3C)
using level
\fBLOG_ERR\fR and facility
.BR LOG_USER .
If
.B MADVERRFILE
contains a
valid
.I pathname
(such as
.BR /dev/stderr ),
error messages will be
logged there instead.
.RE

.SH EXAMPLES
.LP
\fBExample 1\fR Applying advice to all ISM segments
.sp
.LP
The following configuration applies advice to all ISM segments for
application
.BR /usr/bin/foo :

.sp
.in +2
.nf
example$ \fBLD_PRELOAD=$LD_PRELOAD:madv.so.1\fR
example$ \fBMADVCFGFILE=madvcfg\fR
example$ \fBexport LD_PRELOAD MADVCFGFILE\fR
example$ \fBcat $MADVCFGFILE\fR
    /usr/bin/foo:ism=access_lwp
.fi
.in -2
.sp

.LP
\fBExample 2\fR Setting advice for all applications with exception
.sp
.LP
The following configuration sets advice for all applications with the
exception of
.BR ls .

.sp
.in +2
.nf
example$ \fBLD_PRELOAD=$LD_PRELOAD:madv.so.1\fR
example$ \fBMADV=access_many\fR
example$ \fBMADVCFGFILE=madvcfg\fR
example$ \fBexport LD_PRELOAD MADV MADVCFGFILE\fR
example$ \fBcat $MADVCFGFILE\fR
    ls:
.fi
.in -2
.sp

.LP
\fBExample 3\fR Precedence rules (continuation from Example 2)
.sp
.LP
Because
.B MADVCFGFILE
takes precedence over
.BR MADV ,
specifying
\&'\fB*\fR' (pattern match all) for the \fIexec-name\fR of the last
\fBmadv\fR configuration entry would be equivalent to setting
.BR MADV .
The
following is equivalent to example 2:

.sp
.in +2
.nf
example$ \fBLD_PRELOAD=$LD_PRELOAD:madv.so.1\fR
example$ \fBMADVCFGFILE=madvcfg\fR
example$ \fBexport LD_PRELOAD MADVCFGFILE\fR
example$ \fBcat $MADVCFGFILE\fR
    ls:
    *:madv=access_many
.fi
.in -2
.sp

.LP
\fBExample 4\fR Applying advice for different regions
.sp
.LP
The following configuration applies one type of advice for mmap regions and
different advice for heap and shared memory regions for a select set of
applications with exec names that begin with
.BR foo :

.sp
.in +2
.nf
example$ \fBLD_PRELOAD=$LD_PRELOAD:madv.so.1\fR
example$ \fBMADVCFGFILE=madvcfg\fR
example$ \fBexport LD_PRELOAD MADVCFGFILE\fR
example$ \fBcat $MADVCFGFILE\fR
    foo*:madv=access_many,heap=sequential,shm=access_lwp
.fi
.in -2
.sp

.LP
\fBExample 5\fR Applying advice selectively
.sp
.LP
The following configuration applies advice for the heap of applications
beginning with
.B ora
that have
.B ora1
as an argument:

.sp
.in +2
.nf
example$ \fBLD_PRELOAD=$LD_PRELOAD:madv.so.1\fR
example$ \fBMADVCFGFILE=madvcfg\fR
example$ \fBexport LD_PRELOAD MADVCFGFILE\fR
example$ \fBcat $MADVCFGFILE\fR
    ora* ora1:heap=access_many
.fi
.in -2
.sp

.SH FILES
.sp
.ne 2
.mk
.na
\fB/etc/madv.conf\fR
.ad
.RS 19n
.rt
Configuration file
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWesu (32-bit)
_
SUNWesxu (64-bit)
_
Interface StabilityUnstable
.TE

.SH SEE ALSO
.sp
.LP
.BR cat (1),
.BR ld.so.1 (1),
.BR proc (1),
.BR sh (1),
.BR brk (2),
.BR exec (2),
.BR fork (2),
.BR mmap (2),
.BR memcntl (2),
.BR shmat (2),
.BR getexecname (3C),
.BR madvise (3C),
.BR syslog (3C),
.BR proc (4),
.BR attributes (5)
.SH NOTES
.sp
.LP
The advice is inherited. A child process has the same advice         as its
parent. On
.B exec()
(see
.BR exec (2)),
the advice is set back to the
default system advice unless different advice has been configured via the
\fBmadv\fR shared object.
.sp
.LP
Advice is only applied to
.B mmap
regions explicitly created by the user
program. Those regions established by the run-time linker or by system
libraries making direct system calls (for example, libthread allocations for
thread stacks) are not affected.
