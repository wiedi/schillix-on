'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH pmadvise 1 "25 Sep 2008" "SunOS 5.11" "User Commands"
.SH NAME
pmadvise \- applies advice about memory to a process
.SH SYNOPSIS
.LP
.nf
\fBpmadvise\fR \fB-o\fR \fIoption\fR[,\fIoption\fR] [\fB-F\fR] [\fB-l\fR] [\fB-v\fR] \fIpid\fR...
.fi

.SH DESCRIPTION
.sp
.LP
.B pmadvise
applies advice about how memory is used in the specified
process using
.BR madvise (3C).
.sp
.LP
.B pmadvise
allows users to apply advice to a specific sub-range at a
specific instant in time.
.B pmadvise
differs from
.BR madv.so.1 (1)
in
that
.BR madv.so.1 (1)
applies the advice throughout execution of the
target program to all segments of a specified type.
.SH OPTIONS
.sp
.LP
The following options are supported:
.sp
.ne 2
.mk
.na
.B -F
.ad
.RS 6n
.rt
Force by grabbing the target process even if another process has control.
.sp
You should exercise caution when using the
.B -F
option. See
.BR proc (1).
.RE

.sp
.ne 2
.mk
.na
.B -l
.ad
.RS 6n
.rt
Show unresolved dynamic linker map names.
.RE

.sp
.ne 2
.mk
.na
.B -o
.ad
.RS 6n
.rt
Specify advice to apply in the following form:
.sp
.in +2
.nf
private=\fBadvice\fR
shared=\fBadvice\fR
heap=\fBadvice\fR
stack=\fBadvice\fR
\fBaddress\fR[:\fBlength\fR]=\fBadvice\fR
.fi
.in -2
.sp

where the
.B advice
can be one of the following:
.sp
.in +2
.nf
normal
random
sequential
willneed
dontneed
free
access_lwp
access_many
access_default
.fi
.in -2
.sp

An
.B address
and
.B length
can be given to specify a subrange to
apply the advice.The
.B address
should be hexadecimal and the
.B length
should be in bytes by default.
.sp
If
.B length
is not specified and the starting address refers to the
start of a segment, the advice is applied to that segment.
.B length
can
be qualified by
.BR K ,
.BR M ,
.BR G ,
.BR T ,
.BR P ,
or
.B E
to
specify kilobytes, megabytes, gigabytes, terabytes, or exabytes respectively
as the unit of measure.
.RE

.sp
.ne 2
.mk
.na
.B -v
.ad
.RS 6n
.rt
Print verbose output. Display output as
.BR pmap (1)
does, showing what
advice is being applied where. This can be useful when the advice is being
applied to a named region (for example, private, shared, and so forth) to
get feedback on exactly where the advice is being applied.
.RE

.sp
.LP
.B pmadvise
tries to process all legal options. If an illegal address
range is specified, an error message is printed and the offending option is
skipped.
.B pmadvise
quits without processing any options and prints a
usage message when there is a syntax error.
.sp
.LP
If conflicting advice is given on a region, the order of precedence is from
most specific advice to least, that is, most general. In other words, advice
specified for a particuliar address range takes precedence over advice for
heap and stack which in turn takes precedence over advice for private and
shared memory.
.sp
.LP
Moreover, the advice in each of the following groups are mutually exclusive
from the other advice within the same group:
.sp
.in +2
.nf
MADV_NORMAL, MADV_RANDOM, MADV_SEQUENTIAL
MADV_WILLNEED, MADV_DONTNEED, MADV_FREE
MADV_ACCESS_DEFAULT, MADV_ACCESS_LWP, MADV_ACCESS_MANY
.fi
.in -2
.sp

.SH OPERANDS
.sp
.LP
The following operands are supported:
.sp
.ne 2
.mk
.na
.I pid
.ad
.RS 7n
.rt
Process ID.
.RE

.SH EXAMPLES
.LP
.B Example 1
Applying Advice to a Segment at Specified Address
.sp
.LP
The following example applies advice to a segment at a specified address:

.sp
.in +2
.nf
% pmap $$
100666: tcsh
00010000     312K r-x--  /usr/bin/tcsh
0006C000      48K rwx--  /usr/bin/tcsh
00078000     536K rwx--    [ heap ]
FF100000     856K r-x--  /lib/libc.so.1
FF1E6000      32K rwx--  /lib/libc.so.1
FF1EE000       8K rwx--  /lib/libc.so.1
FF230000     168K r-x--  /lib/libcurses.so.1
FF26A000      32K rwx--  /lib/libcurses.so.1
FF272000       8K rwx--  /lib/libcurses.so.1
FF280000     576K r-x--  /lib/libnsl.so.1
FF310000      40K rwx--  /lib/libnsl.so.1
FF31A000      24K rwx--  /lib/libnsl.so.1
FF364000       8K rwxs-    [ anon ]
FF370000      48K r-x--  /lib/libsocket.so.1
FF38C000       8K rwx--  /lib/libsocket.so.1
FF3A0000       8K r-x--  /platform/sun4u-us3/lib/libc_psr.so.1
FF3B0000     176K r-x--  /lib/ld.so.1
FF3EC000       8K rwx--  /lib/ld.so.1
FF3EE000       8K rwx--  /lib/ld.so.1
FFBE6000     104K rw---    [ stack ]
%
% pmadvise -o 78000=access_lwp $$

%
.fi
.in -2
.sp

.LP
.B Example 2
Using the
.B -v
Option
.sp
.LP
The following example displays verbose output from
.BR pmadvise :

.sp
.in +2
.nf

% pmadvise -o heap=access_lwp,stack=access_default -v $$
1720:   -sh
00010000      88K r-x--  /sbin/sh
00036000       8K rwx--  /sbin/sh
00038000      16K rwx--    [ heap ]           <= access_lwp
FF250000      24K r-x--  /lib/libgen.so.1
FF266000       8K rwx--  /lib/libgen.so.1
FF272000       8K rwxs-    [ anon ]
FF280000     840K r-x--  /lib/libc.so.1
FF362000      32K rwx--  /lib/libc.so.1
FF36A000      16K rwx--  /lib/libc.so.1
FF380000       8K r-x--  /platform/sun4u-us3/lib/libc_psr.so.1
FF390000      64K rwx--    [ anon ]
FF3B0000     168K r-x--  /lib/ld.so.1
FF3EA000       8K rwx--  /lib/ld.so.1
FF3EC000       8K rwx--  /lib/ld.so.1
FFBFE000       8K rw---    [ stack ]          <= access_default
.fi
.in -2
.sp

.SH EXIT STATUS
.sp
.LP
The following exit values are returned:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 12n
.rt
Successful completion.
.RE

.sp
.ne 2
.mk
.na
.B non-zero
.ad
.RS 12n
.rt
An error occurred.
.RE

.SH FILES
.sp
.ne 2
.mk
.na
.B /proc/*
.ad
.RS 19n
.rt
Process files
.RE

.sp
.ne 2
.mk
.na
.B /usr/prob/lib/*
.ad
.RS 19n
.rt
.B proc
tools support files
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWesu
_
Interface StabilitySee below.
.TE

.sp
.LP
The command syntax is Evolving. The output formats are Unstable.
.SH SEE ALSO
.sp
.LP
.BR madv.so.1 (1),
.BR pmap (1),
.BR proc (1),
.BR madvise (3C),
.BR attributes (5)
