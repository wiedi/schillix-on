'\" te
.\" Copyright 1989 AT&T All Rights Reserved
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ldd 1 "3 Jun 2008" "SunOS 5.11" "User Commands"
.SH NAME
ldd \- list dynamic dependencies of executable files or shared objects
.SH SYNOPSIS
.LP
.nf
\fBldd\fR [\fB-d\fR | \fB-r\fR] [\fB-c\fR] [\fB-e\fR \fIenvar\fR] [\fB-f\fR] [\fB-i\fR] [\fB-L\fR] [\fB-l\fR] [\fB-p\fR] [\fB-s\fR]
    [\fB-U\fR | \fB-u\fR] [\fB-v\fR] [\fB-w\fR] \fIfilename\fR...
.fi

.SH DESCRIPTION
.sp
.LP
The
.B ldd
utility lists the dynamic dependencies of executable files or
shared objects.
.B ldd
uses the runtime linker,
.BR ld.so.1 ,
to generate
the diagnostics. The runtime linker takes the object being inspected and
prepares the object as would occur in a running process. By default,
.B ldd
triggers the loading of any lazy dependencies.
.sp
.LP
.B ldd
lists the path names of all shared objects that would be loaded
when
.I filename
is loaded.
.B ldd
expects the shared objects that are
being inspected to have execute permission. If a shared object does not have
execute permission,
.B ldd
issues a warning before attempting to process
the file.
.sp
.LP
.B ldd
processes its input one file at a time. For each file, \fBldd\fR
performs one of the following:
.RS +4
.TP
.ie t \(bu
.el o
Lists the object dependencies if the dependencies exist.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Succeeds quietly if dependencies do not exist.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Prints an error message if processing fails.
.RE
.sp
.LP
The dynamic objects that are inspected by
.B ldd
are not executed.
Therefore,
.B ldd
does not list any shared objects explicitly attached
using
.BR dlopen "(3C). To display all the objects in use by a process, or a"
core file, use
.BR pldd (1).
.SH OPTIONS
.sp
.LP
.B ldd
can also check the compatibility of
.I filename
with the shared
objects
.I filename
uses. With the following options,
.B ldd
prints
warnings for any unresolved symbol references that would occur when
.I filename
is loaded.
.sp
.ne 2
.mk
.na
.B -d
.ad
.RS 6n
.rt
Check
.B immediate
references.
.RE

.sp
.ne 2
.mk
.na
.B -r
.ad
.RS 6n
.rt
Check both
.B immediate
references and
.B lazy
references.
.RE

.sp
.LP
Only one of the options
.B -d
or
.B -r
can be specified during any
single invocation of
.BR ldd .
.sp
.LP
.B immediate
references are typically to data items used by the
executable or shared object code.
.B immediate
references are also
pointers to functions, and even calls to functions made from a position
.B dependent
shared object.
.B lazy
references are typically calls to
global functions made from a position
.B independent
shared object, or
calls to external functions made from an executable. For more information on
these types of reference, see When Relocations Are Performed in the \fILinker
and Libraries Guide\fR. Object loading can also be affected by relocation
processing. See
.B "Lazy Loading"
under USAGE for more details.
.sp
.LP
Some unresolved symbol references are not reported by default. These
unresolved references can be reported with the following options. These
options are only useful when combined with either the
.B -d
or the
.B -r
options.
.sp
.ne 2
.mk
.na
.B -p
.ad
.RS 6n
.rt
Expose any unresolved symbol errors to explicit
.B parent
and
.B external
references.
.RE

.sp
.ne 2
.mk
.na
.B -w
.ad
.RS 6n
.rt
Expose any unresolved
.B weak
symbol references.
.RE

.sp
.LP
A shared object can make reference to symbols that should be supplied by the
caller of the shared object. These references can be explicitly classified
when the shared object is created, as being available from a
.BR parent ,
or
simply as being
.BR external .
See the
.B "-M mapfile"
option of
.BR ld (1),
and the
.B PARENT
and
.B EXTERN
symbol definition
keywords. When examining a dynamic executable, a
.B parent
or
.B external
reference that can not be resolved is flagged as an error.
However by default, when examining a shared object, a
.B parent
or
.B external
reference that can not be resolved is not flagged as an error.
The
.B -p
option, when used with either the
.B -d
or
.B -r
options,
causes any unresolved
.B parent
or
.B external
reference to be flagged
as a relocation error.
.sp
.LP
Symbols that are used by relocations may be defined as
.BR weak
references. By default, if a weak symbol reference can not be resolved, the
relocation is ignored and a zero written to the relocation offset. The
.B -w
option, when used with either the
.B -d
or the
.B -r
options,
causes any unresolved relocation against a weak symbol reference to be
flagged as a relocation error.
.sp
.LP
.B ldd
can also check dependency use. With each of the following options,
.B ldd
prints warnings for any unreferenced, or unused dependencies that
are loaded when
.I filename
is loaded. Only when a symbol reference is
bound to a dependency, is that dependency deemed used. These options are
therefore only useful when symbol references are being checked. If the
.B -r
option is not in effect, the
.B -d
option is enabled.
.sp
.LP
A dependency that is defined by an object but is not bound to from that
object is an unreferenced dependency. A dependency that is not bound to by
any other object when
.I filename
is loaded is an unused object.
.sp
.LP
Dependencies can be located in default system locations, or in locations
that must be specified by search paths. Search paths may be specified
globally, such as the environment variable
.BR LD_LIBRARY_PATH .
Search
paths can also be defined in dynamic objects as runpaths. See the \fB-R\fR
option to
.BR ld (1).
Search paths that are not used to satisfy any
dependencies cause unnecessary file system processing.
.sp
.ne 2
.mk
.na
.B -U
.ad
.RS 6n
.rt
Displays any unreferenced, or unused dependencies. If an unreferenced
dependency is not bound to by other objects loaded with
.IR filename ,
the
dependency is also flagged as unused. Cyclic dependencies that are not bound
to from objects outside of the cycle are also deemed unreferenced.
.sp
This option also displays any unused search paths.
.RE

.sp
.ne 2
.mk
.na
.B -u
.ad
.RS 6n
.rt
Displays any unused objects.
.RE

.sp
.LP
Only one of the options
.B -U
or
.B -u
can be specified during any
single invocation of
.BR ldd ,
although
.B -U
is a superset of
.BR -u .
Objects that are found to be unreferenced, or unused when using the \fB-r\fR
option, should be removed as dependencies. These objects provide no
references, but result in unnecessary overhead when
.I filename
is loaded.
When using the
.B -d
option, any objects that are found to be
unreferenced, or unused are not immediately required when
.I filename
is
loaded. These objects are candidates for lazy loading. See \fBLazy Loading\fR
under USAGE for more details.
.sp
.LP
The removal of unused dependencies reduces runtime-linking overhead. The
removal of unreferenced dependencies reduces runtime-linking overhead to a
lesser degree. However, the removal of unreferenced dependencies guards
against a dependency being unused when combined with different objects, or as
the other object dependencies evolve.
.sp
.LP
The removal of unused search paths can reduce the work required to locate
dependencies. This can be significant when accessing files from a file server
over a network. Note, a search path can be encoded within an object to
satisfy the requirements of
.BR dlopen "(3C). This search path might not be"
required to obtain the dependencies of this object, and hence will look
unused to
.BR ldd .
.sp
.LP
The following additional options are supported:
.sp
.ne 2
.mk
.na
.B -c
.ad
.RS 12n
.rt
Disables any configuration file use. Configuration files can be employed to
alter default search paths, and provide alternative object dependencies. See
.BR crle (1).
.RE

.sp
.ne 2
.mk
.na
.B -e
.I envar
.ad
.RS 12n
.rt
Sets the environment variable
.IR envar .
.sp
This option is useful for experimenting with environment variables that are
recognized by the runtime linker that can adversely affect
.BR ldd ,
for
example,
.BR LD_PRELOAD .
.sp
This option is also useful for extracting additional information solely from
the object under inspection, for example,
.BR LD_DEBUG .
See
.BR ld.so.1 (1)
and
.BR lari (1).
.RE

.sp
.ne 2
.mk
.na
.B -f
.ad
.RS 12n
.rt
Forces
.B ldd
to check for an executable file that is not secure. When
.B ldd
is invoked by a superuser, by default
.B ldd
does not process
any executable that is not secure. An executable is not considered secure if
the interpreter that the executable specifies does not reside under
.BR /lib ,
.B /usr/lib
or
.BR /etc/lib .
An executable is also not
considered secure if the interpreter cannot be determined. See \fBSecurity\fR
under USAGE.
.RE

.sp
.ne 2
.mk
.na
.B -i
.ad
.RS 12n
.rt
Displays the order of execution of initialization sections. The order that
is discovered can be affected by use of the
.B -d
or
.B -r
options. See
.B Initialization Order
under USAGE.
.RE

.sp
.ne 2
.mk
.na
.B -L
.ad
.RS 12n
.rt
Enables lazy loading. Lazy loading is the default mode of operation when the
object under inspection is loaded as part of a process. In this case, any
lazy dependencies, or filters, are only loaded into the process when
reference is made to a symbol that is defined within the lazy object. The
.B -d
or
.B -r
options, together with the
.B -L
option, can be used
to inspect the dependencies, and their order of loading as would occur in a
running process.
.RE

.sp
.ne 2
.mk
.na
.B -l
.ad
.RS 12n
.rt
Forces the immediate processing of any filters so that all filtees, and
their dependencies, are listed. The immediate processing of filters is now
the default mode of operation for
.BR ldd .
However, under this default any
auxiliary filtees that cannot be found are silently ignored. Under the
.B -l
option, missing auxiliary filtees generate an error message.
.RE

.sp
.ne 2
.mk
.na
.B -s
.ad
.RS 12n
.rt
Displays the search path used to locate shared object dependencies.
.RE

.sp
.ne 2
.mk
.na
.B -v
.ad
.RS 12n
.rt
Displays all dependency relationships incurred when processing
.IR filename .
This option also displays any dependency version
requirements. See
.BR pvs (1).
.RE

.SH USAGE
.SS "Security"
.sp
.LP
A superuser should use the
.B -f
option only if the executable to be
examined is known to be trustworthy. The use of
.B -f
on an untrustworthy
executable while superuser can compromise system security. If an executables
trustworthyness is unknown, a superuser should temporarily become a regular
user. Then invoke
.B ldd
as this regular user.
.sp
.LP
Untrustworthy objects can be safely examined with
.BR dump (1)
and with
.BR mdb (1),
as long as the
.B :r
subcommand is not used. In addition, a
non-superuser can use either the
.B :r
subcommand of
.BR mdb ,
or
.BR truss (1)
to examine an untrustworthy executable without too much risk
of compromise. To minimize risk when using
.BR ldd ,
.BR "adb :r" ,
or
.B truss
on an untrustworthy executable, use the
.B UID
\fB"nobody"\fR.
.SS "Lazy Loading"
.sp
.LP
Lazy loading can be applied directly by specified lazy dependencies. See the
.B -z lazyload
option of
.BR ld (1).
Lazy loading can also be
applied indirectly through filters. See the \fB-f\fR option and \fB-F\fR
option of
.BR ld (1).
Objects that employ lazy loading techniques can
experience variations in
.B ldd
output due to the options used. If an
object expresses all its dependencies as lazy, the default operation of
.B ldd
lists all dependencies in the order in which the dependencies are
recorded in that object:
.sp
.in +2
.nf
example% \fBldd main\fR
        libelf.so.1 =>   /lib/libelf.so.1
        libnsl.so.1 =>   /lib/libnsl.so.1
        libc.so.1 =>     /lib/libc.so.1
.fi
.in -2
.sp

.sp
.LP
The lazy loading behavior that occurs when this object is used at runtime
can be enabled using the
.B -L
option. In this mode, lazy dependencies are
loaded when reference is made to a symbol that is defined within the lazy
object. Therefore, combining the
.B -L
option with use of the
.B -d
and
.B -r
options reveals the dependencies that are needed to satisfy the
immediate, and lazy references respectively:
.sp
.in +2
.nf
example% \fBldd\fR \fB-L\fR \fBmain\fR
example% \fBldd\fR \fB-d\fR \fBmain\fR
        libc.so.1 =>	  /lib/libc.so.1
example% \fBldd\fR \fB-r\fR \fBmain\fR
        libc.so.1 =>	  /lib/libc.so.1
        libelf.so.1 =>	/lib/libelf.so.1
.fi
.in -2
.sp

.sp
.LP
Notice that in this example, the order of the dependencies that are listed
is not the same as displayed from
.B ldd
with no options. Even with the
.B -r
option, the lazy reference to dependencies might not occur in the
same order as would occur in a running program.
.sp
.LP
Observing lazy loading can also reveal objects that are not required to
satisfy any references. These objects, in this example,
.BR libnsl.so.1 ,
are candidates for removal from the link-line used to build the object being
inspected.
.SS "Initialization Order"
.sp
.LP
Objects that do not explicitly define their required dependencies might
observe variations in the initialization section order displayed by
.BR ldd
due to the options used. For example, a simple application might reveal:
.sp
.in +2
.nf
example% \fBldd -i main\fR
        libA.so.1 =>	./libA.so.1
        libc.so.1 =>	/lib/libc.so.1
        libB.so.1 =>	./libB.so.1

    init object=./libB.so.1
    init object=./libA.so.1
    init object=/lib/libc.so.1
.fi
.in -2
.sp

.sp
.LP
whereas, when relocations are applied, the initialization section order
is:
.sp
.in +2
.nf
example% \fBldd -ir main\fR
        .........

    init object=/lib/libc.so.1
    init object=./libB.so.1
    init object=./libA.so.1
.fi
.in -2
.sp

.sp
.LP
In this case,
.B libB.so.1
makes reference to a function in
.BR /usr/lib/libc.so.1 .
However,
.B libB.so.1
has no explicit dependency
on this library. Only after a relocation is discovered is a dependency then
established. This implicit dependency affects the initialization section
order.
.sp
.LP
Typically, the initialization section order established when an application
is executed, is equivalent to
.B ldd
with the
.B -d
option. The optimum
order can be obtained if all objects fully define their dependencies. Use of
the
.BR ld (1)
options \fB-z\|defs\fR and \fB-z\|ignore\fR when building
dynamic objects is recommended.
.sp
.LP
Cyclic dependencies can result when one or more dynamic objects reference
each other. Cyclic dependencies should be avoided, as a unique initialization
sort order for these dependencies can not be established.
.sp
.LP
Users that prefer a more static analysis of object files can inspect
dependencies using tools such as
.BR dump (1)
and
.BR elfdump (1).
.SH FILES
.sp
.ne 2
.mk
.na
.B /usr/lib/lddstub
.ad
.RS 23n
.rt
Fake 32-bit executable loaded to check the dependencies of shared objects.
.RE

.sp
.ne 2
.mk
.na
.B /usr/lib/64/lddstub
.ad
.RS 23n
.rt
Fake 64-bit executable loaded to check the dependencies of shared objects.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWtoo
.TE

.SH SEE ALSO
.sp
.LP
.BR crle (1),
.BR dump (1),
.BR elfdump (1),
.BR lari (1),
.BR ld (1),
.BR ld.so.1 (1),
.BR mdb (1),
.BR pldd (1),
.BR pvs (1),
.BR truss (1),
.BR dlopen (3C),
.BR attributes (5)
.sp
.LP
.I Linker and Libraries Guide
.SH DIAGNOSTICS
.sp
.LP
.B ldd
prints the record of shared object path names to
.BR stdout .
The
optional list of symbol resolution problems is printed to
.BR stderr .
If
.I filename
is not an executable file or a shared object, or if
.I filename
cannot be opened for reading, a non-zero exit status is
returned.
.SH NOTES
.sp
.LP
Use of the
.B -d
or
.B -r
option with shared objects can give
misleading results.
.B ldd
does a worst case analysis of the shared
objects. However, in practice, the symbols reported as unresolved might be
resolved by the executable file referencing the shared object. The runtime
linkers preloading mechanism can be employed to add dependencies to the
object being inspected. See
.BR LD_PRELOAD .
.sp
.LP
.B ldd
uses the same algorithm as the runtime linker to locate shared
objects.
