'\" te
.\" Copyright (C) 2002, Sun Microsystems, Inc.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH eqn 1 "12 Jul 2002" "SunOS 5.11" "User Commands"
.SH NAME
eqn, neqn, checkeq \- typeset mathematics test
.SH SYNOPSIS
.LP
.nf
\fBeqn\fR [\fB-d\fR \fIxy\fR] [\fB -f\fR \fIn\fR] [\fB-p\fR \fIn\fR] [\fB -s\fR \fIn\fR] [\fIfile\fR].\|.\|.
.fi

.LP
.nf
\fBneqn\fR [\fIfile\fR].\|.\|.
.fi

.LP
.nf
\fBcheckeq\fR [\fIfile\fR].\|.\|.
.fi

.SH DESCRIPTION
.sp
.LP
.B eqn
and
.B neqn
are language processors to assist in describing
equations.
.B eqn
is a preprocessor for
.BR troff (1)
and is intended
for devices that can print 
.BR troff 's
output.
.B neqn
is a
preprocessor for
.BR nroff (1)
and is intended for use with terminals.
Usage is almost always:
.sp
.in +2
.nf
example% \fBeqn file .\|.\|. | troff\fR
example% \fBneqn file .\|.\|. | nroff\fR
.fi
.in -2
.sp

.sp
.LP
If no
.IR file s
are specified, \fBeqn\fR and \fBneqn\fR read from the
standard input. A line beginning with \fB\&.EQ\fR marks the start of an
equation. The end of an equation is marked by a line beginning with
\fB\&.EN\fR. Neither of these lines is altered, so they may be defined in
macro packages to get centering, numbering, and so on.  It is also possible
to set two characters as ``delimiters''; subsequent text between delimiters
is also treated as
.B eqn
input.
.sp
.LP
.B checkeq
reports missing or unbalanced delimiters and
\fB\&.EQ\fR/\fB\&.EN\fR pairs.
.SH OPTIONS
.sp
.LP
The following options are supported:
.sp
.ne 2
.mk
.na
.BI -d xy
.ad
.RS 9n
.rt
Sets equation delimiters set to characters
.I x
and
.I y
with the
command-line argument. The more common way to do this is with \fBdelim\fI
xy\fR between \fB\&.EQ\fR and \fB\&.EN\fR. The left and right delimiters may
be identical. Delimiters are turned off by
.B "delim off"
appearing
in the text. All text that is neither between delimiters nor between
\fB\&.EQ\fR and \fB\&.EN\fR is passed through untouched.
.RE

.sp
.ne 2
.mk
.na
.BI -f n
.ad
.RS 9n
.rt
Changes font to
.I n
globally in the document. The font can also be
changed globally in the body of the document by using the \fBgfont\fI n\fR directive, where
.I n
is the font specification.
.RE

.sp
.ne 2
.mk
.na
.BI -p n
.ad
.RS 9n
.rt
Reduces subscripts and superscripts by
.I n
point sizes from the
previous size.  In the absence of the
.B -p
option, subscripts and
superscripts are reduced by 3 point sizes from the previous size.
.RE

.sp
.ne 2
.mk
.na
.BI -s n
.ad
.RS 9n
.rt
Changes point size to
.I n
globally in the document. The point size can
also be changed globally in the body of the document by using the
.BI gsize " n"
directive, where  \fIn\fR is the point size.
.RE

.SH OPERANDS
.sp
.LP
The following operands are supported:
.sp
.ne 2
.mk
.na
.I file
.ad
.RS 9n
.rt
The nroff or troff file processed by
.B eqn
or
.BR neqn .
.RE

.SH EQN LANGUAGE
.sp
.LP
The nroff version of this description depicts the output of
.B neqn
to
the terminal screen exactly as
.B neqn
is able to display it. To see an
accurate depiction of the output, view the printed version of this page.
.sp
.LP
Tokens within
.B eqn
are separated by braces, double quotes, tildes,
circumflexes, SPACE, TAB, or NEWLINE characters. Braces {\|} are used for
grouping. Generally speaking, anywhere a single character like
.I x
could
appear, a complicated construction enclosed in braces may be used instead. A
tilde
.RB ( ~ )
represents a full SPACE in the output; a circumflex
.RB ( ^ )
half as much.
.sp
.ne 2
.mk
.na
.B Subscripts and superscripts:
.ad
.sp .6
.RS 4n
These are produced with the keywords
.B sub
and
.BR sup .
.sp
.ne 2
.mk
.na
.B x sub i
.ad
.RS 29n
.rt
makes
.EQ
delim $$
.EN
$x sub i$
.sp
.RE

.sp
.ne 2
.mk
.na
.B a sub i sup 2
.ad
.RS 29n
.rt
produces
.EQ
delim $$
.EN
$a sub i sup 2$
.sp
.RE

.sp
.ne 2
.mk
.na
.B "e sup {x sup 2 + y sup 2}
.ad
.RS 29n
.rt
gives e^(x^2+y^2)
.sp
.RE

.RE

.sp
.ne 2
.mk
.na
.B Fractions:
.ad
.sp .6
.RS 4n
Fractions are made with
.BR over .
.sp
.ne 2
.mk
.na
.B a over b
.ad
.RS 13n
.rt
yields
.EQ
delim $$
.EN
$a over b$
.sp
.RE

.RE

.sp
.ne 2
.mk
.na
.B Square Roots:
.ad
.sp .6
.RS 4n
These are made with
.BR sqrt
.sp
.ne 2
.mk
.na
.B "1 over sqrt {ax sup 2 +bx+c}
.ad
.sp .6
.RS 4n
results in
.EQ
delim $$
.EN
$1 over sqrt {ax sup 2 +bx+c}$
.sp
.RE

.RE

.sp
.ne 2
.mk
.na
.B Limits:
.ad
.sp .6
.RS 4n
The keywords
.B from
and
.B to
introduce lower and upper limits on
arbitrary things:
.sp
.ne 2
.mk
.na
\fBlim from {n\(-> inf } sum from 0 to n x sub i\fR
.ad
.sp .6
.RS 4n
 makes
.EQ
delim $$
.EN
$lim from {n\(-> inf } sum from 0 to n x sub i$
.sp
.RE

.RE

.sp
.ne 2
.mk
.na
.B Brackets and Braces:
.ad
.sp .6
.RS 4n
Left and right brackets, braces, and the like, of the right height are made
with
.B left
and
.BR right .
.sp
.ne 2
.mk
.na
.B "left [ x sup 2 + y sup 2 over alpha right ] ~=~1
.ad
.sp .6
.RS 4n
produces
.EQ
delim $$
.EN
$left [ x sup 2 + y sup 2 over alpha right ] ~=~1$
.sp
.sp
The
.B right
clause is optional.  Legal characters after
.B left
and
.B right
are braces, brackets, bars,
.B c
and
.B f
for ceiling and
floor, and \fB""\fR for nothing at all (useful for a right-side-only
bracket).
.RE

.RE

.sp
.ne 2
.mk
.na
.B Vertical piles:
.ad
.sp .6
.RS 4n
Vertical piles of things are made with
.BR pile ,
.BR lpile ,
.BR cpile ,
and
.BR rpile .
.sp
.ne 2
.mk
.na
.B "pile {a above b above c}
.ad
.RS 28n
.rt
 produces
.EQ
delim $$
.EN
$pile {a above b above c}$
.sp
.sp
There can be an arbitrary number of elements in a pile. 
.B lpile
left-justifies,
.B pile
and
.B cpile
center, with different vertical
spacing, and
.B rpile
right justifies.
.RE

.RE

.sp
.ne 2
.mk
.na
.B Matrices:
.ad
.sp .6
.RS 4n
Matrices are made with
.BR matrix .
.sp
.ne 2
.mk
.na
.B "matrix { lcol { x sub i above y sub 2 } ccol { 1 above 2 } }
.ad
.sp .6
.RS 4n
produces
.EQ
delim $$
.EN
$matrix { lcol { x sub i above y sub 2 } ccol { 1 above 2 } }$
.sp
.sp
In addition, there is
.B rcol
for a right-justified column.
.RE

.RE

.sp
.ne 2
.mk
.na
.B Diacritical marks:
.ad
.sp .6
.RS 4n
Diacritical marks are made with
.BR dot ,
.BR dotdot ,
.BR hat ,
.BR tilde ,
.BR bar ,
.BR vec ,
.BR dyad ,
and
.BR under .
.sp
.ne 2
.mk
.na
.B x dot = f(t) bar
.ad
.RS 28n
.rt
 is
.EQ
delim $$
.EN
$x dot = f(t) bar$
.sp
.RE

.sp
.ne 2
.mk
.na
.B "y dotdot bar ~=~ n under
.ad
.RS 28n
.rt
 is
.EQ
delim $$
.EN
$y dotdot bar ~=~ n under$
.sp
.RE

.sp
.ne 2
.mk
.na
.B x vec ~=~ y dyad
.ad
.RS 28n
.rt
is
.EQ
delim $$
.EN
$x vec ~=~ y dyad$
.sp
.RE

.RE

.sp
.ne 2
.mk
.na
.B Sizes and Fonts:
.ad
.sp .6
.RS 4n
Sizes and font can be changed with
.B size
.I n
or
.BR size
\fB\(+-\fIn,\fR
.BR roman ,
.BR italic ,
.BR bold ,
and
.B font
.IR n .
Size and fonts can be changed globally in a document by
.BR gsize
.I n
and
.B gfont
.IR n ,
or by the command-line arguments
.BI -s n
and \fB-f\fIn.\fR
.RE

.sp
.ne 2
.mk
.na
.B Successive display arguments:
.ad
.sp .6
.RS 4n
Successive display arguments can be lined up.  Place
.B mark
before the
desired lineup point in the first equation; place
.B lineup
at the place
that is to line up vertically in subsequent equations.
.RE

.sp
.ne 2
.mk
.na
.B Shorthands:
.ad
.sp .6
.RS 4n
Shorthands may be defined or existing keywords redefined with
.BI define :
.sp
.ne 2
.mk
.na
\fBdefine\fI thing \fB%\fI replacement \fB%\fR
.ad
.sp .6
.RS 4n
Defines a new token called
.I thing
which will be replaced by
.I replacement
whenever it appears thereafter. The
.B %
may be any
character that does not occur in
.IR replacement .
.RE

.RE

.sp
.ne 2
.mk
.na
.B Keywords and Shorthands:
.ad
.sp .6
.RS 4n
Keywords like
.B "sum int"
.B inf
and shorthands like
.BR >=
\fB\(->\fR and
.B !=
are recognized.
.RE

.sp
.ne 2
.mk
.na
.B Greek letters:
.ad
.sp .6
.RS 4n
Greek letters are spelled out in the desired case, as in
.B alpha
or
.BR GAMMA .
.RE

.sp
.ne 2
.mk
.na
.B Mathematical words:
.ad
.sp .6
.RS 4n
Mathematical words like  \fBsin\fR,\fB cos\fR, and 
.B log
are made
Roman automatically.
.RE

.sp
.LP
.BR troff (1)
four-character escapes like \(bu (\(bu) can be used
anywhere. Strings enclosed in double quotes \fB"\fR.\|.\|.\fB"\fR are passed
through untouched; this permits keywords to be entered as text, and can be
used to communicate with
.B troff
when all else fails.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWdoc
.TE

.SH SEE ALSO
.sp
.LP
.BR nroff (1),
.BR tbl (1),
.BR troff (1),
.BR attributes (5),
.BR ms (5)
.SH BUGS
.sp
.LP
To embolden characters such as digits and parentheses, it  is necessary to
quote them, as in `\fBbold "12.3"\fR'.
