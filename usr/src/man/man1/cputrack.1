'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH cputrack 1 "19 Apr 2004" "SunOS 5.11" "User Commands"
.SH NAME
cputrack \- monitor process and LWP behavior using CPU performance
counters
.SH SYNOPSIS
.LP
.nf
\fBcputrack\fR \fB-c\fR \fIeventspec\fR [\fB-c\fR \fIeventspec\fR].\|.\|. [\fB-efntvD\fR]
     [\fB-N\fR \fIcount\fR] [\fB-o\fR \fIpathname\fR] [\fB-T\fR \fIinterval\fR] \fIcommand\fR [\fIargs\fR]
.fi

.LP
.nf
\fBcputrack\fR \fB-c\fR \fIeventspec\fR [\fB-c\fR \fIeventspec\fR].\|.\|. \fB-p\fR \fIpid\fR [\fB-efntvD\fR]
     [\fB-N\fR \fIcount\fR] [\fB-o\fR \fIpathname\fR] [\fB-T\fR \fIinterval\fR]
.fi

.LP
.nf
\fBcputrack\fR \fB-h\fR
.fi

.SH DESCRIPTION
.sp
.LP
The
.B cputrack
utility allows
.B CPU
performance counters to be used
to monitor the behavior of a process or family of processes running on the
system. If
.I interval
is specified with the
.B -T
option,
.B cputrack
samples activity every
.I interval
seconds, repeating
forever. If a
.I count
is specified with the
.B -N
option, the
statistics are repeated
.I count
times for each process tracked. If
neither are specified, an interval of one second is used. If
.I command
and optional
.I args
are specified,
.B cputrack
runs the command with
the arguments given while monitoring the specified
.B CPU
performance
events. Alternatively, the process
.B ID
of an existing process can be
specified using the
.B -p
option.
.sp
.LP
Because
.B cputrack
is an unprivileged program, it is subject to the
same restrictions that apply to
.BR truss (1).
For example,
.BR setuid (2)
executables cannot be tracked.
.SH OPTIONS
.sp
.LP
The following options are supported:
.sp
.ne 2
.mk
.na
.B -c
.I eventspec
.ad
.RS 16n
.rt
Specifies a set of events for the
.B CPU
performance counters to
monitor. The syntax of these event specifications is:
.sp
.in +2
.nf
[picn=]\fIeventn\fR[,attr[\fIn\fR][=\fIval\fR]][,[picn=]\fIeventn\fR
     [,attr[n][=\fIval\fR]],.\|.\|.,]
.fi
.in -2
.sp

You can use the
.B -h
option to obtain a list of available events and
attributes. This causes generation of the usage message. You can omit an
explicit counter assignment, in which case
.B cpustat
attempts to choose
a capable counter automatically.
.sp
Attribute values can be expressed in hexadecimal, octal, or decimal
notation, in a format suitable for
.BR strtoll (3C).
An attribute present
in the event specification without an explicit value receives a default
value of
.BR 1 .
An attribute without a corresponding counter number is
applied to all counters in the specification.
.sp
The semantics of these event specifications can be determined by reading
the
.B CPU
manufacturer's documentation for the events.
.sp
Multiple
.B -c
options can be specified, in which case
.B cputrack
cycles between the different event settings on each sample.
.RE

.sp
.ne 2
.mk
.na
.B -D
.ad
.RS 16n
.rt
Enables debug mode.
.RE

.sp
.ne 2
.mk
.na
.B -e
.ad
.RS 16n
.rt
Follows all
.BR exec (2),
or
.BR execve (2)
system calls.
.RE

.sp
.ne 2
.mk
.na
.B -f
.ad
.RS 16n
.rt
Follows all children created by
.BR fork (2),
.BR fork1 (2),
or
.BR vfork (2)
system calls.
.RE

.sp
.ne 2
.mk
.na
.B -h
.ad
.RS 16n
.rt
Prints an extended help message on how to use the utility, how to program
the processor-dependent counters, and where to look for more detailed
information.
.RE

.sp
.ne 2
.mk
.na
.B -n
.ad
.RS 16n
.rt
Omits all header output (useful if
.B cputrack
is the beginning of a
pipeline).
.RE

.sp
.ne 2
.mk
.na
.B -N
.I count
.ad
.RS 16n
.rt
Specifies the maximum number of
.B CPU
performance counter samples to
take before exiting.
.RE

.sp
.ne 2
.mk
.na
.B -o
.I outfile
.ad
.RS 16n
.rt
Specifies file to be used for the
.B cputrack
output.
.RE

.sp
.ne 2
.mk
.na
.B -p
.I pid
.ad
.RS 16n
.rt
Interprets the argument as the process
.B ID
of an existing process to
which process counter context should be attached and monitored.
.RE

.sp
.ne 2
.mk
.na
.B -t
.ad
.RS 16n
.rt
Prints an additional column of processor cycle counts, if available on the
current architecture.
.RE

.sp
.ne 2
.mk
.na
.B -T
.I interval
.ad
.RS 16n
.rt
Specifies the interval between
.B CPU
performance counter samples in
seconds. Very small intervals may cause some samples to be skipped. See
WARNINGS.
.RE

.sp
.ne 2
.mk
.na
.B -v
.ad
.RS 16n
.rt
Enables more verbose output.
.RE

.SH USAGE
.sp
.LP
The operating system enforces certain restrictions on the tracing of
processes. In particular, a command whose object file cannot be read by a
user cannot be tracked by that user; set-uid and set-gid commands can only
be tracked by a privileged user. Unless it is run by a privileged user,
.B cputrack
loses control of any process that performs an
.B exec()
of
a set-id or unreadable object file. Such processes continue normally, though
independently of
.BR cputrack ,
from the point of the
.BR exec() .
.sp
.LP
The system may run out of per-user process slots when the
.B -f
option
is used, since
.B cputrack
runs one controlling process for each process
being tracked.
.sp
.LP
The times printed by
.B cputrack
correspond to the wallclock time when
the hardware counters were actually sample. The time is derived from the
same timebase as
.BR gethrtime (3C).
.sp
.LP
The
.B cputrack
utility attaches performance counter context to each
process that it examines. The presence of this context allows the
performance counters to be multiplexed between different processes on the
system, but it cannot be used at the same time as the
.BR cpustat (1M)
utility.
.sp
.LP
Once an instance of the
.B cpustat
utility is running, further attempts
to run
.B cputrack
will fail until all instances of
.BR cpustat
terminate.
.sp
.LP
Sometimes
.B cputrack
provides sufficient flexibility and prints
sufficient statistics to make adding the observation code to an application
unnecessary. However, more control is occasionally desired. Because the same
performance counter context is used by both the application itself and by
the agent LWP injected into the application by
.BR cputrack ,
it is
possible for an application to interact with the counter context to achieve
some interesting capabilities. See
.BR cpc_enable (3CPC).
.sp
.LP
The processor cycle counts enabled by the
.B -t
option always apply to
both user and system modes, regardless of the settings applied to the
performance counter registers.
.sp
.LP
The output of
.B cputrack
is designed to be readily parseable by
.BR nawk (1)
and
.BR perl (1),
thereby allowing performance tools to be
composed by embedding
.B cputrack
in scripts. Alternatively, tools may be
constructed directly using the same
.BR API "s that"
.B cputrack
is built
upon, using the facilities of
.BR libcpc (3LIB)
and
.BR libpctx (3LIB).
See
.BR cpc (3CPC).
.sp
.LP
Although
.B cputrack
uses performance counter context to maintain
separate performance counter values for each LWP, some of the events that
can be counted will inevitably be impacted by other activities occurring on
the system, particularly for limited resources that are shared between
processes (for example, cache miss rates). For such events, it may also be
interesting to observe overall system behavior with
.BR cpustat (1M).
.sp
.LP
For the
.B -T
.I interval
option, if
.I interval
is specified as
zero, no periodic sampling is performed. The performance counters are only
sampled when the process creates or destroys an
.BR LWP ,
or it invokes
.BR fork (2),
.BR exec (2),
or
.BR exit (2).
.SH EXAMPLES
.SS "SPARC"
.LP
.B Example 1
Using Performance Counters to Count Clock Cycles
.sp
.LP
In this example, the utility is being used on a machine containing an
UltraSPARC-III+ processor. The counters are set to count processor clock
cycles and instructions dispatched in user mode while running the
.BR sleep (1)
command.

.sp
.in +2
.nf
example% \fBcputrack -c pic0=Cycle_cnt,pic1=Instr_cnt sleep 10\fR


  time lwp      event      pic0      pic1
 1.007   1       tick    765308    219233
 2.007   1       tick         0         0
 4.017   1       tick         0         0
 6.007   1       tick         0         0
 8.007   1       tick         0         0
10.007   1       tick         0         0
10.017   1       exit    844703    228058

.fi
.in -2
.sp

.LP
.B Example 2
Counting External Cache References and Misses
.sp
.LP
This example shows more verbose output while following the
.B fork()
and
.B exec()
of a simple shell script on an UltraSPARC machine. The counters
are measuring the number of external cache references and external cache
misses. Notice that the explicit
.B pic0
and
.B pic1
names can be
omitted where there are no ambiguities.

.sp
.in +2
.nf
example% \fBcputrack -fev -c EC_ref,EC_hit /bin/ulimit -c\fR


time    pid lwp      event      pic0      pic1
0.007 101142   1   init_lwp    805286     20023
0.023 101142   1       fork                     # 101143
0.026 101143   1   init_lwp   1015382     24461
0.029 101143   1   fini_lwp   1025546     25074
0.029 101143   1       exec   1025546     25074
0.000 101143   1       exec                     \e
                                      # '/usr/bin/sh /usr/bin/basename\e
                                         /bin/ulimit'
0.039 101143   1   init_lwp   1025546     25074
0.050 101143   1   fini_lwp   1140482     27806
0.050 101143   1       exec   1140482     27806
0.000 101143   1       exec                     # '/usr/bin/expr \e
   //bin/ulimit : \(.*[^/]\)/*$ : .*/\(..*\) : \(.*\)$ | //bin/ulimi'
0.059 101143   1   init_lwp   1140482     27806
0.075 101143   1   fini_lwp   1237647     30207
0.075 101143   1       exit   1237647     30207
unlimited
0.081 101142   1   fini_lwp    953383     23814
0.081 101142   1       exit    953383     23814
.fi
.in -2
.sp

.SS "x86"
.LP
.B Example 3
Counting Instructions
.sp
.LP
This example shows how many instructions were executed in the application
and in the kernel to print the date on a Pentium III machine:

.sp
.in +2
.nf
example% \fBcputrack -c inst_retired,inst_retired,nouser1,sys1 date\fR


   time lwp      event      pic0      pic1
Fri Aug 20 20:03:08 PDT 1999
  0.072   1       exit    246725    339666
.fi
.in -2
.sp

.LP
.B Example 4
Counting TLB Hits
.sp
.LP
This example shows how to use processor-specific attributes to count TLB
hits on a Pentium 4 machine:

.sp
.in +2
.nf
example% \fBcputrack -c ITLB_reference,emask=1 date\fR


    time lwp      event      pic0
      Fri Aug 20 20:03:08 PDT 1999
   0.072   1       exit    246725
.fi
.in -2
.sp

.SH WARNINGS
.sp
.LP
By running any instance of the
.BR cpustat "(1M) utility, all existing"
performance counter context is forcibly invalidated across the machine. This
may in turn cause all invocations of the
.B cputrack
command to exit
prematurely with unspecified errors.
.sp
.LP
If
.B cpustat
is invoked on a system that has
.B CPU
performance
counters which are not supported by Solaris, the following message
appears:
.sp
.in +2
.nf
cputrack: cannot access performance counters - Operation not applicable
.fi
.in -2
.sp

.sp
.LP
This error message implies that
.B cpc_open()
has failed and is
documented in
.BR cpc_open (3CPC).
Review this documentation for more
information about the problem and possible solutions.
.sp
.LP
If a short interval is requested,
.B cputrack
may not be able to keep up
with the desired sample rate. In this case, some samples may be dropped.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcpcu
Interface StabilityEvolving
.TE

.SH SEE ALSO
.sp
.LP
.BR nawk (1),
.BR perl (1),
.BR proc (1),
.BR truss (1),
.BR prstat (1M),
.BR cpustat (1M),
.BR exec (2),
.BR exit (2),
.BR fork (2),
.BR setuid (2),
.BR vfork (2),
.BR gethrtime (3C),
.BR strtoll (3C),
.BR cpc (3CPC),
.BR cpc_bind_pctx (3CPC),
.BR cpc_enable (3CPC),
.BR cpc_open (3CPC),
.BR libcpc (3LIB),
.BR libpctx (3LIB),
.BR proc (4),
.BR attributes (5)
