'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\"  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH pvs 1 "25 Sep 2008" "SunOS 5.11" "User Commands"
.SH NAME
pvs \- display the internal version information of dynamic objects
.SH SYNOPSIS
.LP
.nf
\fBpvs\fR [\fB\-Cdlnorsv\fR] [\fB\-I\fR \fIindex-expr\fR] [\fB\-N\fR \fIname\fR] \fIfile\fR...
.fi

.SH DESCRIPTION
.sp
.LP
The
.B pvs
utility displays any internal version information contained
within an
.B ELF
file. Commonly, these files are dynamic executables and
shared objects, and possibly relocatable objects. This version information
can fall into one of two categories:
.RS +4
.TP
.ie t \(bu
.el o
version definitions
.RE
.RS +4
.TP
.ie t \(bu
.el o
version dependencies
.RE
.sp
.LP
Version
.I definitions
describe the interfaces that are made available by
an
.B ELF
file. Each version definition is associated to a set of global
symbols provided by the file.  Version definitions can be assigned to a file
during its creation by the link-editor using the
.B -M
option and the
.RI "associated " mapfile " directives. See the " "Linker and Libraries Guide" 
for more details.
.sp
.LP
Version
.I dependencies
describe the binding requirements of dynamic
objects on the version definitions of any shared object dependencies. When a
dynamic object is built with a shared object, the link-editor records
information within the dynamic object indicating that the shared object is a
dependency. This dependency must be satisfied at runtime.  If the shared
object also contains version
.IR definitions ,
then those version
definitions that satisfy the global symbol requirements of the dynamic object
are also recorded in the dynamic object being created. At process
initialization, the runtime linker uses any version
.I dependencies
as a
means of validating the interface requirements of the dynamic objects used to
construct the process.
.SH OPTIONS
.sp
.LP
The following options are supported. If neither the
.B -d
or
.BR -r
options are specified, both are enabled.
.sp
.ne 2
.mk
.na
.B -C
.ad
.RS 18n
.rt
Demangles C++ symbol names.
.RE

.sp
.ne 2
.mk
.na
.B -d
.ad
.RS 18n
.rt
Prints version definition information.
.RE

.sp
.ne 2
.mk
.na
.B -I
.I index-expr
.ad
.RS 18n
.rt
Qualifies the versions to examine with a specific version index or index
range. For example, the version with index 3 in an object can be displayed
using:
.sp
.in +2
.nf
example% \fBpvs -I 3 \fIfilename\fR
.fi
.in -2
.sp

An
.I index-expr
can be a single non-negative integer value that
specifies a specific version, as shown in the previous example.
Alternatively, an
.I index-expr
can consist of two such values separated
by a colon (:), indicating a range of versions. The following example
displays the versions 3, 4, and 5 in a file:
.sp
.in +2
.nf
example% \fBpvs -I 3:5 \fIfilename\fR
.fi
.in -2
.sp

When specifying an index range, the second value can be omitted to indicate
the final item in the file. For example, the following statement lists all
versions from the tenth to the end:
.sp
.in +2
.nf
example% \fBpvs -I 10: \fIfilename\fR
.fi
.in -2
.sp

See Matching Options for additional information about the matching options
.RB ( -I ,
.BR \-N ).
.RE

.sp
.ne 2
.mk
.na
.B -l
.ad
.RS 18n
.rt
Prints any symbols that have been reduced from global to local binding due
to versioning. By convention, these symbol entries are located in the
\fI\&.symtab\fR section, and fall between the
.I FILE
symbol representing
the output file, and the
.I FILE
symbol representing the first input file
used to generate the output file.  These reduced symbol entries are assigned
the fabricated version definition
.BR _LOCAL_ .
No reduced symbols will be
printed if the file has been stripped (see
.BR strip (1)),
or if the symbol
entry convention cannot be determined.
.sp
Use of the
.B -l
option implicitly enables the
.B -s
option
.RE

.sp
.ne 2
.mk
.na
.B -n
.ad
.RS 18n
.rt
Normalizes version definition information. By default, all version
definitions within the object are displayed. However, version definitions can
inherit other version definitions. Under normalization, only the head of each
inheritance list is displayed.
.RE

.sp
.ne 2
.mk
.na
\fB\-N\fR \fIname\fR
.ad
.RS 18n
.rt
When used with the
.B -d
option,
.B \-N
prints only the information for
the given version definition
.I name
and any of its inherited version
definitions.
.sp
When used with the
.B \-r
option,
.B \-N
prints only the information for
the given dependency file
.IR name .
It is possible to qualify a specific
version from the dependency file by including the version in parenthesis
following the file name:
.sp
.in +2
.nf
example% \fBpvs \-N 'dependency (version)' \fIfilename\fR
.fi
.in -2
.sp

See Matching Options for additional information about the matching options
.RB ( \-I ,
.BR \-N ).
.RE

.sp
.ne 2
.mk
.na
.B -o
.ad
.RS 18n
.rt
Creates one-line version definition output. By default, file, version
definitions, and any symbol output is indented to ease human inspection. This
option prefixes each output line with the file and version definition name
and can be more useful for analysis with automated tools.
.RE

.sp
.ne 2
.mk
.na
.B -r
.ad
.RS 18n
.rt
Prints version dependency (requirements) information.
.RE

.sp
.ne 2
.mk
.na
.B -s
.ad
.RS 18n
.rt
Prints the symbols associated with each version definition. Any data symbols
from versions defined by the object are accompanied with the size, in bytes,
of the data item.
.RE

.sp
.ne 2
.mk
.na
.B -v
.ad
.RS 18n
.rt
Verbose output. Indicates any weak version definitions, and any version
definition inheritance. When used with the
.B \-N
and
.B -d
options, the
inheritance of the base version definition is also shown. When used with the
.B -s
option, the version symbol definition is also shown.
.RE

.SH OPERANDS
.sp
.LP
The following operands are supported.
.sp
.ne 2
.mk
.na
.I file
.ad
.RS 8n
.rt
The
.B ELF
file about which internal version information is displayed.
.RE

.SH USAGE
.SS "Matching Options"
.sp
.LP
The
.B -I
and
.B -N
options are collectively referred to as the
.BR "matching options" .
These options are used to narrow the range of
versions to examine, by index or by name.
.sp
.LP
Any number and type of matching option can be mixed in a given invocation of
.BR pvs .
In this case,
.B pvs
displays the superset of all versions
matched by any of the matching options used. This feature allows for the
selection of complex groupings of items using the most convenient form for
specifying each item.
.SH EXAMPLES
.LP
.B Example 1
Displaying version definitions
.sp
.LP
The following example displays the version definitions of
.BR libelf.so.1 :

.sp
.in +2
.nf
% \fBpvs -d /lib/libelf.so.1\fR
	libelf.so.1;
	SUNW_1.1
.fi
.in -2
.sp

.LP
.B Example 2
Creating a one-liner display
.sp
.LP
A normalized, one-liner display, suitable for creating a
.I mapfile
version control directive, can be created using the
.B -n
and
.BR -o
options:

.sp
.in +2
.nf
% \fBpvs -don /lib/libelf.so.1\fR
/lib/libelf.so.1 -	SUNW_1.1;
.fi
.in -2
.sp

.LP
.B Example 3
Displaying version requirements
.sp
.LP
The following example displays the version requirements of
.B ldd
and
.BR pvs :

.sp
.in +2
.nf
% \fBpvs -r /usr/bin/ldd /usr/bin/pvs\fR
/usr/bin/ldd:
	libelf.so.1 (SUNW_1.1);
	libc.so.1 (SUNW_1.1);
/usr/bin/pvs:
	libelf.so.1 (SUNW_1.1);
	libc.so.1 (SUNW_1.1);
.fi
.in -2
.sp

.LP
.B Example 4
Determining a dependency symbol version
.sp
.LP
The following example displays the shared object from which the
.BR ldd
command expects to find the printf function at runtime, as well as the
version it belongs to:

.sp
.in +2
.nf
% \fBpvs -ors /usr/bin/ldd | grep ' printf'\fR
/usr/bin/ldd -  libc.so.1 (SYSVABI_1.3): printf;
.fi
.in -2
.sp

.LP
.B Example 5
Determine all dependency symbols from a specific version
.sp
.LP
The
.B -N
option can be used to obtain a list of all the symbols from a
dependency that belong to a specific version. To determine the symbols that
.B ldd
will find from version
.B SYSVABI_1.3
of
.BR libc.so.1 :

.sp
.in +2
.nf
% \fBpvs -s -N 'libc.so.1 (SYSVABI_1.3)' /usr/bin/ldd\fR

       libc.so.1 (SYSVABI_1.3):
               _exit;
               strstr;
               printf;
               __fpstart;
               strncmp;
               lseek;
               strcmp;
               getopt;
               execl;
               close;
               fflush;
               wait;
               strerror;
               putenv;
               sprintf;
               getenv;
               open;
               perror;
               fork;
               strlen;
               geteuid;
               access;
               setlocale;
               atexit;
               fprintf;
               exit;
               read;
               malloc;
.fi
.in -2
.sp

.sp
.LP
Note that the specific list of symbols used by
.B ldd
may change between
Solaris releases.

.LP
.B Example 6
Display base defined version by index
.sp
.LP
By convention, the base global version defined by an object has the name of
the object. For example, the base version of
.B pvs
is named
\fB\&'pvs'\fR. The base version of any object is always version index 1.
Therefore, the
.B -I
option can be used to display the base version of any
object without having to specify its name:

.sp
.in +2
.nf
% \fBpvs -v -I 1 /usr/bin/pvs\fR
       pvs [BASE];
.fi
.in -2
.sp

.SH EXIT STATUS
.sp
.LP
If the requested version information is not found, a non-zero value is
returned. Otherwise, a
.B 0
value is returned.
.sp
.LP
Version information is determined not found when any of the following is
true:
.RS +4
.TP
.ie t \(bu
.el o
the
.B -d
option is specified and no version definitions are found.
.RE
.RS +4
.TP
.ie t \(bu
.el o
the
.B -r
option is specified and no version requirements are found.
.RE
.RS +4
.TP
.ie t \(bu
.el o
neither the
.B -d
nor
.B -r
option is specified and no version
definitions or version requirements are found.
.RE
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWtoo
.TE

.SH SEE ALSO
.sp
.LP
.BR elfdump (1),
.BR ld (1),
.BR ldd (1),
.BR strip (1),
.BR elf (3ELF),
.BR attributes (5)
.sp
.LP
.I Linker and Libraries Guide
