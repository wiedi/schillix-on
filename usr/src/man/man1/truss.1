'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH truss 1 "31 Jul 2004" "SunOS 5.11" "User Commands"
.SH NAME
truss \- trace system calls and signals
.SH SYNOPSIS
.LP
.nf
\fBtruss\fR [\fB-fcaeildDE\fR] [\fB-\fR [tTvx] [!] \fIsyscall\fR ,.\|.\|.]
     [\fB-\fR [sS] [!] \fIsignal\fR ,.\|.\|.] [\fB-\fR [mM] [!] \fIfault\fR ,.\|.\|.]
     [\fB-\fR [rw] [!] \fIfd\fR ,.\|.\|.]
     [\fB-\fR [uU] [!] \fIlib\fR ,.\|.\|. : [:] [!] \fIfunc\fR ,.\|.\|.]
     [\fB-o\fR \fIoutfile\fR] \fIcommand\fR | \fB-p\fR \fIpid\fR[\fI/lwps\fR].\|.\|.
.fi

.SH DESCRIPTION
.sp
.LP
The
.B truss
utility executes the specified command and produces a trace
of the system calls it performs, the signals it receives, and the machine
faults it incurs. Each line of the trace output reports either the fault or
signal name or the system call name with its arguments and return value(s).
System call arguments are displayed symbolically when possible using defines
from relevant system headers. For any path name pointer argument, the
pointed-to string is displayed. Error returns are reported using the error
code names described in
.BR Intro (3).
If, in the case of an error, the
kernel reports a missing privilege, a privilege name as described in
.BR privileges (5)
is reported in square brackets (\fB[ ]\fR) after the
error code name.
.sp
.LP
Optionally (see the
.B -u
option),
.B truss
also produce an entry/exit
trace of user-level function calls executed by the traced process, indented
to indicate nesting.
.SH OPTIONS
.sp
.LP
For those options that take a list argument, the name
.B all
can be used
as a shorthand to specify all possible members of the list. If the list
begins with a
.BR ! ,
the meaning of the option is negated (for example,
exclude rather than trace). Multiple occurrences of the same option can be
specified. For the same name in a list, subsequent options (those to the
right) override previous ones (those to the left).
.sp
.LP
The following options are supported:
.sp
.ne 2
.mk
.na
.B -a
.ad
.sp .6
.RS 4n
Shows the argument strings that are passed in each
.B exec()
system
call.
.RE

.sp
.ne 2
.mk
.na
.B -c
.ad
.sp .6
.RS 4n
Counts traced system calls, faults, and signals rather than displaying the
trace line-by-line. A summary report is produced after the traced command
terminates or when
.B truss
is interrupted. If
.B -f
is also specified,
the counts include all traced system calls, faults, and signals for child
processes.
.RE

.sp
.ne 2
.mk
.na
.B -d
.ad
.sp .6
.RS 4n
Includes a time stamp on each line of trace output. The time stamp appears
as a field containing \fIseconds\fR\|.\|\fIfraction\fR at the start of the
line. This represents a time in seconds relative to the beginning of the
trace. The first line of the trace output shows the base time from which the
individual time stamps are measured, both as seconds since the epoch (see
.BR time (2))
and as a date string (see
.BR ctime (3C)
and
.BR date (1)).
The times that are reported are the times that the event in question
occurred. For all system calls, the event is the completion of the system
call, not the start of the system call.
.RE

.sp
.ne 2
.mk
.na
.B -D
.ad
.sp .6
.RS 4n
Includes a time delta on each line of trace output. The value appears as a
field containing \fIseconds\fR\|.\|\fIfraction\fR and represents the elapsed
time for the
.B LWP
that incurred the event since the last reported event
incurred by that
.B LWP.
Specifically, for system calls, this is not the
time spent within the system call.
.RE

.sp
.ne 2
.mk
.na
.B -e
.ad
.sp .6
.RS 4n
Shows the environment strings that are passed in each
.B exec()
system
call.
.RE

.sp
.ne 2
.mk
.na
.B -E
.ad
.sp .6
.RS 4n
Includes a time delta on each line of trace output. The value appears as a
field containing \fIseconds\fB\&.\fIfraction\fR and represents the
difference in time elapsed between the beginning and end of a system call.
.sp
In contrast to the
.B -D
option, this is the amount of time spent within
the system call.
.RE

.sp
.ne 2
.mk
.na
.B -f
.ad
.sp .6
.RS 4n
Follows all children created by \fBfork()\fR or \fBvfork()\fR and includes
their signals, faults, and system calls in the trace output. Normally, only
the first-level command or process is traced. When
.B -f
is specified, the
process-id is included with each line of trace output to indicate which
process executed the system call or received the signal.
.RE

.sp
.ne 2
.mk
.na
.B -i
.ad
.sp .6
.RS 4n
Does not display interruptible sleeping system calls. Certain system calls,
such as
.B open()
and
.B read()
on terminal devices or pipes, can sleep
for indefinite periods and are interruptible. Normally,
.B truss
reports
such sleeping system calls if they remain asleep for more than one second.
The system call is reported again a second time when it completes. The
.B -i
option causes such system calls to be reported only once, when they
complete.
.RE

.sp
.ne 2
.mk
.na
.B -l
.ad
.sp .6
.RS 4n
Includes the id of the responsible lightweight process (\fILWP\fR) with each
line of trace output. If
.B -f
is also specified, both the process-id and
the LWP-id are included.
.RE

.sp
.ne 2
.mk
.na
\fB-m\fR [\fB!\fR]\fIfault\fR,.\|.\|.\fR
.ad
.sp .6
.RS 4n
Machine faults to trace or exclude. Those faults specified in the
comma-separated list are traced. Faults can be specified by name or number
(see
.BR <sys/fault.h> ).
If the list begins with a
.BR ! ,
the specified
faults are excluded from the trace output. Default is \fB-mall -m\fR
.BR !fltpage .
.RE

.sp
.ne 2
.mk
.na
\fB-M\fR [\fB!\fR]\fIfault\fR,.\|.\|.\fR
.ad
.sp .6
.RS 4n
Machine faults that stop the process. The specified faults are added to the
set specified by
.BR -m .
If one of the specified faults is incurred,
.B truss
leaves the process stopped and abandoned (see the
.B -T
option). Default is
.BR -M!all .
.RE

.sp
.ne 2
.mk
.na
.B -o
.I outfile
.ad
.sp .6
.RS 4n
File to be used for the trace output. By default, the output goes to
standard error.
.RE

.sp
.ne 2
.mk
.na
.B -p
.ad
.sp .6
.RS 4n
Interprets the
.I command
arguments to
.B truss
as a list of
process-ids for existing processes (see
.BR ps (1))
rather than as a command
to be executed.
.B truss
takes control of each process and begins tracing
it provided that the userid and groupid of the process match those of the
user or that the user is a privileged user. Users can trace only selected
threads by appending \fB/\fIthread-id\fR to the process-id. Mutiple
threads can be selected using the
.B -
and
.B ,
delimiters. For example
.B /1,2,7-9
traces threads
.BR 1 ,
.BR 2 ,
.BR 7 ,
.BR 8 ,
and
.BR 9 .
Processes can also be specified by their names in the
.BR /proc
directory, for example,
.BR /proc/12345 .
.RE

.sp
.ne 2
.mk
.na
\fB-r\fR [\fB!\fR]\fIfd\fR,.\|.\|.\fR
.ad
.sp .6
.RS 4n
Shows the full contents of the
.B I/O
buffer for each
.B read()
on any
of the specified file descriptors. The output is formatted 32 bytes per line
and shows each byte as an
.B ASCII
character (preceded by one blank) or as
a 2-character C language escape sequence for control characters such as
horizontal tab (\|\e\|t) and newline (\|\e\|n). If
.B ASCII
interpretation
is not possible, the byte is shown in 2-character hexadecimal representation.
(The first 12 bytes of the
.B I/O
buffer for each traced \fBprint
>read()\fR are shown even in the absence of
.BR -r .)
Default is
.BR -r!all .
.RE

.sp
.ne 2
.mk
.na
\fB-s\fR [\fB!\fR]\fIsignal\fR,.\|.\|.\fR
.ad
.sp .6
.RS 4n
Signals to trace or exclude. Those signals specified in the comma-separated
list are traced. The trace output reports the receipt of each specified
signal, even if the signal is being ignored (not blocked). (Blocked signals
are not received until they are unblocked.) Signals can be specified by name
or number (see
.BR <sys/signal.h> ).
If the list begins with a
.BR ! ,
the
specified signals are excluded from the trace output. Default is
.BR -sall .
.RE

.sp
.ne 2
.mk
.na
\fB\-S\fR [\fB!\fR]\fIsignal\fR,.\|.\|.\fR
.ad
.sp .6
.RS 4n
Signals that stop the process. The specified signals are added to the set
specified by
.BR -s .
If one of the specified signals is received,
.B truss
leaves the process stopped and abandoned (see the
.B -T
option). Default is
.BR \-S!all .
.RE

.sp
.ne 2
.mk
.na
\fB-t\fR [\fB!\fR]\fIsyscall\fR,.\|.\|.\fR
.ad
.sp .6
.RS 4n
System calls to trace or exclude. Those system calls specified in the
comma-separated list are traced. If the list begins with a
.BR ! ,
the
specified system calls are excluded from the trace output. Default is
.BR -tall .
.RE

.sp
.ne 2
.mk
.na
\fB-T\fR [\fB!\fR]\fIsyscall\fR,.\|.\|.\fR
.ad
.sp .6
.RS 4n
Specifies system calls that stop the process. The specified system calls are
added to the set specified by
.BR -t .
If one of the specified system calls
is encountered,
.B truss
leaves the process stopped and abandoned. That
is,
.B truss
releases the process and exits but leaves the process in the
stopped state at completion of the system call in question. A debugger or
other process inspection tool (see
.BR proc (1))
can then be applied to the
stopped process.
.B truss
can be reapplied to the stopped process with the
same or different options to continue tracing. Default is
.BR -T!all .
.sp
A process left stopped in this manner cannot be restarted by the application
of
.B "kill -CONT"
because it is stopped on an event of interest via
.BR /proc ,
not by the default action of a stopping signal (see
.BR signal.h (3HEAD)).
The
.BR prun (1)
command described in
.BR proc (1)
can be used to set the stopped process running again.
.RE

.sp
.ne 2
.mk
.na
.B -u
[\fB!\fR]\fIlib\fR,.\|.\|.\fB:\fR[\fB:\fR][\fB!\fR]\fIfunc\fR,\|.\|.\|.\fR
.ad
.sp .6
.RS 4n
User-level function call tracing.
.IR lib ,\|.\|.\|.
is a comma-separated
list of dynamic library names, excluding the ``\fB\&.so.\fIn\fR'' suffix.
\fIfunc\fR,\|.\|.\|. is a comma-separated list of function names. In both
cases the names can include name-matching metacharacters
\fB*\fR,\fB?\fR,\fB[]\fR with the same meanings as those of \fBsh\fR(1) but
as applied to the library/function name spaces, not to files. An empty
library or function list defaults to
.BR * ,
trace all libraries or
functions in a library. A leading
.B !
on either list specifies an
exclusion list, names of libraries or functions not to be traced. Excluding a
library excludes all functions in that library; any function list following a
library exclusion list is ignored.
.sp
A single
.B :
separating the library list from the function list means to
trace calls into the libraries from outside the libraries, but omit calls
made to functions in a library from other functions in the same library. A
double \fB:\|:\fR means to trace all calls, regardless of origin.
.sp
Library patterns do not match either the executable file or the dynamic
linker unless there is an exact match (\fBl*\fR does not match
.BR ld.so.1 ).
To trace functions in either of these objects, the names must
be specified exactly, as in:
.sp
.in +2
.nf
\fBtruss -u a.out -u ld .\|.\|.\fR
.fi
.in -2
.sp

.B a.out
is the literal name to be used for this purpose; it does not
stand for the name of the executable file. Tracing
.B a.out
function calls
implies all calls (default is
.BR :: ).
.sp
Multiple
.B -u
options can be specified and they are honored
left-to-right. The id of the thread that performed the function call is
included in the trace output for the call.
.B truss
searches the dynamic
symbol table in each library to find function names and also searches the
standard symbol table if it has not been stripped.
.RE

.sp
.ne 2
.mk
.na
.B -U
[\fB!\fR]\fIlib\fR,\|.\|.\|.\|\fB:\fR[\fB:\fR][\fB!\fR]\fIfunc\fR,\|.\|.\|.\fR
.ad
.sp .6
.RS 4n
User-level function calls that stop the process. The specified functions are
added to the set specified by
.BR -u .
If one of the specified functions is
called,
.B truss
leaves the process stopped and abandoned (see the
.B -T
option).
.RE

.sp
.ne 2
.mk
.na
\fB-v\fR [\fB!\fR]\fIsyscall\fR,.\|.\|.\fR
.ad
.sp .6
.RS 4n
Verbose. Displays the contents of any structures passed by address to the
specified system calls (if traced by
.BR -t ).
Input values as well as
values returned by the operating system are shown. For any field used as both
input and output, only the output value is shown. Default is
.BR -v!all .
.RE

.sp
.ne 2
.mk
.na
\fB-w\fR [\fB!\fR]\fIfd\fR,.\|.\|.\fR
.ad
.sp .6
.RS 4n
Shows the contents of the I/O buffer for each
.B write()
on any of the
specified file descriptors (see the
.B -r
option). Default is
.BR -w!all .
.RE

.sp
.ne 2
.mk
.na
\fB-x\fR [\fB!\fR]\fIsyscall\fR,.\|.\|.\fR
.ad
.sp .6
.RS 4n
Displays the arguments to the specified system calls (if traced by
.BR -t )
in raw form, usually hexadecimal, rather than symbolically. This is for
unredeemed hackers who must see the raw bits to be happy. Default is
.BR -x!all .
.RE

.sp
.LP
See
.I "man pages section 2: System Calls"
for system call names accepted
by the
.BR -t ,
.BR -T ,
.BR -v ,
and
.B -x
options. System call
numbers are also accepted.
.sp
.LP
If
.B truss
is used to initiate and trace a specified command and if the
.B -o
option is used or if standard error is redirected to a non-terminal
file, then
.B truss
runs with hangup, interrupt, and quit signals ignored.
This facilitates tracing of interactive programs that catch interrupt and
quit signals from the terminal.
.sp
.LP
If the trace output remains directed to the terminal, or if existing
processes are traced (the
.B -p
option), then
.B truss
responds to
hangup, interrupt, and quit signals by releasing all traced processes and
exiting. This enables the user to terminate excessive trace output and to
release previously-existing processes. Released processes continue normally,
as though they had never been touched.
.SH EXAMPLES
.LP
.B Example 1
Tracing a Command
.sp
.LP
The following example produces a trace of the
.BR find (1)
command on the
terminal:

.sp
.in +2
.nf
example$ \fBtruss find . -print >find.out\fR
.fi
.in -2
.sp

.LP
.B Example 2
Tracing Common System Calls
.sp
.LP
The following example shows only a trace of the open, close, read, and write
system calls:

.sp
.in +2
.nf
example$ \fBtruss -t open,close,read,write find . -print >find.out\fR
.fi
.in -2
.sp

.LP
.B Example 3
Tracing a Shell Script
.sp
.LP
The following example produces a trace of the
.BR spell (1)
command on the
file
.BR truss.out :

.sp
.in +2
.nf
example$ \fBtruss -f -o truss.out spell \fIdocument\fR
.fi
.in -2
.sp

.sp
.LP
.B spell
is a shell script, so the
.B -f
flag is needed to trace not
only the shell but also the processes created by the shell. (The spell script
runs a pipeline of eight processes.)

.LP
.B Example 4
Abbreviating Output
.sp
.LP
The following example abreviates output:

.sp
.in +2
.nf
example$ \fBtruss nroff -mm \fIdocument\fR >nroff.out\fR
.fi
.in -2
.sp

.sp
.LP
because 97% of the output reports
.BR lseek() ,
.BR read() ,
and
.B write()
system calls. To abbreviate it:

.sp
.in +2
.nf
example$ \fBtruss -t !lseek,read,write nroff -mm \fIdocument\fR >nroff.out\fR
.fi
.in -2
.sp

.LP
.B Example 5
Tracing Library Calls From Outside the C Library
.sp
.LP
The following example traces all user-level calls made to any function in
the C library from outside the C library:

.sp
.in +2
.nf
example$ \fBtruss -u libc .\|.\|.\fR
.fi
.in -2
.sp

.LP
.B Example 6
Tracing library calls from within the C library
.sp
.LP
The following example includes calls made to functions in the C library from
within the C library itself:

.sp
.in +2
.nf
example$ \fBtruss -u libc:: .\|.\|.\fR
.fi
.in -2
.sp

.LP
.B Example 7
Tracing Library Calls Other Than the C Library
.sp
.LP
The following example traces all user-level calls made to any library other
than the C library:

.sp
.in +2
.nf
example$ \fBtruss -u '*' -u !libc .\|.\|.\fR
.fi
.in -2
.sp

.LP
.B Example 8
Tracing \fBprintf\fR and \fBscanf\fR Function Calls
.sp
.LP
The following example traces all user-level calls to functions in the printf
and scanf family contained in the C library:

.sp
.in +2
.nf
example$ \fBtruss -u 'libc:*printf,*scanf' .\|.\|.\fR
.fi
.in -2
.sp

.LP
.B Example 9
Tracing Every User-level Function Call
.sp
.LP
The following example traces every user-level function call from anywhere to
anywhere:

.sp
.in +2
.nf
example$ \fBtruss -u a.out -u ld:: -u :: .\|.\|.\fR
.fi
.in -2
.sp

.LP
.B Example 10
Tracing a System Call Verbosely
.sp
.LP
The following example verbosely traces the system call activity of process
#1, \fBinit\fR(1M) (if you are a privileged user):

.sp
.in +2
.nf
example# \fBtruss -p -v all 1\fR
.fi
.in -2
.sp

.sp
.LP
Interrupting
.B truss
returns
.B init
to normal operation.

.SH FILES
.sp
.ne 2
.mk
.na
.B /proc/*
.ad
.RS 11n
.rt
Process files
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWtoo
.TE

.SH SEE ALSO
.sp
.LP
.BR date (1),
.BR find (1),
.BR proc (1),
.BR ps (1),
.BR sh (1),
.BR spell (1),
.BR init (1M),
.BR Intro (3),
.BR exec (2),
.BR fork (2),
.BR lseek (2),
.BR open (2),
.BR read (2),
.BR time (2),
.BR vfork (2),
.BR write (2),
.BR ctime (3C),
.BR signal.h (3HEAD),
.BR proc (4),
.BR attributes (5),
.BR privileges (5),
.BR threads (5)
.sp
.LP
.I "man pages section 2: System Calls
.SH NOTES
.sp
.LP
Some of the system calls described in \fIman pages section 2: System
Calls\fR differ from the actual operating system interfaces. Do not be
surprised by minor deviations of the trace output from the descriptions in
that document.
.sp
.LP
Every machine fault (except a page fault) results in the posting of a signal
to the
.B LWP
that incurred the fault. A report of a received signal
immediately follows each report of a machine fault (except a page fault)
unless that signal is being blocked.
.sp
.LP
The operating system enforces certain security restrictions on the tracing
of processes. In particular, any command whose object file (\fBa.out\fR)
cannot be read by a user cannot be traced by that user; set-uid and set-gid
commands can be traced only by a privileged user. Unless it is run by a
privileged user,
.B truss
loses control of any process that performs an
.B exec()
of a set-id or unreadable object file; such processes continue
normally, though independently of
.BR truss ,
from the point of the
.BR exec() .
.sp
.LP
To avoid collisions with other controlling processes,
.B truss
does not
trace a process that it detects is being controlled by another process via
the
.B /proc
interface. This allows
.B truss
to be applied to
\fBproc\fR(4)-based debuggers as well as to another instance of itself.
.sp
.LP
The trace output contains tab characters under the assumption that standard
tab stops are set (every eight positions).
.sp
.LP
The trace output for multiple processes or for a multithreaded process (one
that contains more than one
.B LWP)
is not produced in strict time order.
For example, a
.B read()
on a pipe can be reported before the
corresponding
.BR write() .
For any one
.B LWP
(a traditional process
contains only one), the output is strictly time-ordered.
.sp
.LP
When tracing more than one process,
.B truss
runs as one controlling
process for each process being traced. For the example of the \fBspell\fR
command shown above,
.B spell
itself uses 9 process slots, one for the
shell and 8 for the 8-member pipeline, while
.B truss
adds another 9
processes, for a total of 18.
.sp
.LP
Not all possible structures passed in all possible system calls are
displayed under the
.B -v
option.
