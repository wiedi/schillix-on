'\" te
.\" Copyright 2008, Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH encrypt 1 "17 Dec 2008" "SunOS 5.11" "User Commands"
.SH NAME
encrypt, decrypt \- encrypt or decrypt files
.SH SYNOPSIS
.LP
.nf
\fB/usr/bin/encrypt\fR \fB-l\fR
.fi

.LP
.nf
\fB/usr/bin/encrypt\fR \fB-a\fR \fIalgorithm\fR [\fB-v\fR]
     [\fB-k\fR \fIkey_file\fR | \fB-K\fR \fIkey_label\fR [\fB-T\fR \fItoken_spec\fR]]
     [\fB-i\fR \fIinput_file\fR] [\fB-o\fR \fIoutput_file\fR]
.fi

.LP
.nf
\fB/usr/bin/decrypt\fR \fB-l\fR
.fi

.LP
.nf
\fB/usr/bin/decrypt\fR \fB-a\fR \fIalgorithm\fR [\fB-v\fR]
     [\fB-k\fR \fIkey_file\fR | \fB-K\fR \fIkey_label\fR [\fB-T\fR \fItoken_spec\fR]]
     [\fB-i\fR \fIinput_file\fR] [\fB-o\fR \fIoutput_file\fR]
.fi

.SH DESCRIPTION
.sp
.LP
This utility encrypts or decrypts the given file or stdin using the
algorithm specified. If no output file is specified, output is to standard
out. If input and output are the same file, the encrypted output is written
to a temporary work file in the same filesystem and then used to replace the
original file.
.sp
.LP
On decryption, if the input and output are the same file, the cleartext
replaces the ciphertext file.
.sp
.LP
The output file of
.B encrypt
and the input file for
.BR decrypt
contains the following information:
.RS +4
.TP
.ie t \(bu
.el o
Output format version number, 4 bytes in network byte order. The current
version is 1.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Iterations used in key generation function, 4 bytes in network byte
order.
.RE
.RS +4
.TP
.ie t \(bu
.el o
IV (\fBivlen\fR bytes)[1]. iv data is generated by random bytes equal to
one block size.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Salt data used in key generation (16 bytes).
.RE
.RS +4
.TP
.ie t \(bu
.el o
Cipher text data.
.RE
.SH OPTIONS
.sp
.LP
The following options are supported:
.sp
.ne 2
.mk
.na
.B -a
.I algorithm
.ad
.RS 18n
.rt
Specify the name of the algorithm to use during the encryption or
decryption process. See USAGE,
.B Algorithms
for details.
.RE

.sp
.ne 2
.mk
.na
.B -i
.I input_file
.ad
.RS 18n
.rt
Specify the input file. Default is stdin if
.I input_file
is not
specified.
.RE

.sp
.ne 2
.mk
.na
.B -k
.I key_file
.ad
.RS 18n
.rt
Specify the file containing the key value for the encryption algorithm.
Each algorithm has specific key material requirements, as stated in the
PKCS#11 specification. If
.B -k
is not specified,
.B encrypt
prompts
for key material using \fBgetpassphrase\fR(3C). The size of the key file
determines the key length, and passphrases set from the terminal are always
used to generate 128 bit long keys for ciphers with a variable key length.
.sp
For information on generating a key file, see the
.B genkey
subcommand
in
.BR pktool (1).
Alternatively,
.BR dd (1M)
can be used.
.RE

.sp
.ne 2
.mk
.na
.B -K
.I key_label
.ad
.RS 18n
.rt
Specify the label of a symmetric token key in a PKCS#11 token.
.RE

.sp
.ne 2
.mk
.na
.B -l
.ad
.RS 18n
.rt
Display the list of algorithms available on the system. This list can
change depending on the configuration of the cryptographic framework. The
keysizes are displayed in bits.
.RE

.sp
.ne 2
.mk
.na
.B -o
.I output_file
.ad
.RS 18n
.rt
Specify output file. Default is stdout if
.I output_file
is not
specified. If stdout is used without redirecting to a file, the terminal
window can appear to hang because the raw encrypted or decrypted data has
disrupted the terminal emulation, much like viewing a binary file can do at
times.
.RE

.sp
.ne 2
.mk
.na
.B -T
.I token_spec
.ad
.RS 18n
.rt
Specify a PKCS#11 token other than the default soft token object store when
the
.B -K
is specified.
.sp
.I token_spec
has the format of:
.sp
.in +2
.nf
\fItoken_name\fR \fB[:\fImanuf_id\fR \fB[:\fIserial_no\fB]]\fR
.fi
.in -2
.sp

When a token label contains trailing spaces, this option does not require
them to be typed as a convenience to the user.
.sp
Colon separates token identification string. If any of the parts have a
literal colon (\fB:\fR) character, it must be escaped by a backslash
(\fB\e\fR). If a colon (\fB:\fR) is not found, the entire string (up to 32
characters) is taken as the token label. If only one colon (\fB:\fR) is
found, the string is the token label and the manufacturer.
.RE

.sp
.ne 2
.mk
.na
.B -v
.ad
.RS 18n
.rt
Display verbose information. See
.BR Verbose .
.RE

.SH USAGE
.SS "Algorithms"
.sp
.LP
The supported algorithms are displayed with their minimum and maximum key
sizes in the
.B -l
option. These algorithms are provided by the
cryptographic framework. Each supported algorithm is an alias of the PKCS
#11 mechanism that is the most commonly used and least restricted version of
a particular algorithm type. For example,
.B des
is an alias to
.B CKM_DES_CBC_PAD
and
.B arcfour
is an alias to
.BR CKM_RC4 .
Algorithm variants with no padding or
.B ECB
are not supported.
.sp
.LP
These aliases are used with the
.B -a
option and are case-sensitive.
.SS "Passphrase"
.sp
.LP
When the
.B -k
option is not used during encryption and decryption
tasks, the user is prompted for a passphrase. The passphrase is manipulated
into a more secure key using the PBKDF2 algorithm specified in PKCS #5.
.sp
.LP
When a passphrase is used with encrypt and decrypt, the user entered
passphrase is turned into an encryption key using the
.B PBKDF2
algorithm
as defined defined in http://www.rsasecurity.com, \fBPKCS #5 v2.0.\fR
.SS "Verbose"
.sp
.LP
If an input file is provided to the command, a progress bar spans the
screen. The progress bar denotes every 25% completed with a pipe sign
(\fB|\fR). If the input is from standard input, a period (\fB\&.\fR) is
displayed each time 40KB is read. Upon completion of both input methods,
.B Done
is printed.
.SH EXAMPLES
.LP
.B Example 1
Listing Available Algorithms
.sp
.LP
The following example lists available algorithms:

.sp
.in +2
.nf
example$ encrypt -l
     Algorithm       Keysize:  Min   Max
     -----------------------------------
     aes                       128   128
     arcfour                     8   128
     des                        64    64
     3des                      192   192
.fi
.in -2
.sp

.LP
.B Example 2
Encrypting Using AES
.sp
.LP
The following example encrypts using AES and prompts for the encryption
key:

.sp
.in +2
.nf
example$ encrypt -a aes -i myfile.txt -o secretstuff
.fi
.in -2
.sp

.LP
.B Example 3
Encrypting Using AES with a Key File
.sp
.LP
The following example encrypts using AES after the key file has been
created:

.sp
.in +2
.nf
example$ pktool genkey keystore=file keytype=aes keylen=128 \e
            outkey=key
example$ encrypt -a aes -k key -i myfile.txt -o secretstuff
.fi
.in -2
.sp

.LP
.B Example 4
Using an In Pipe to Provide Encrypted Tape Backup
.sp
.LP
The following example uses an in pipe to provide encrypted tape backup:

.sp
.in +2
.nf
example$ ufsdump 0f - /var | encrypt -a arcfour \e
     -k /etc/mykeys/backup.k | dd of=/dev/rmt/0
.fi
.in -2
.sp

.LP
.B Example 5
Using an In Pipe to Restore Tape Backup
.sp
.LP
The following example uses and in pipe to restore a tape backup:

.sp
.in +2
.nf
example$ decrypt -a arcfour -k /etc/mykeys/backup.k \e
     -i /dev/rmt/0 | ufsrestore xvf -
.fi
.in -2
.sp

.LP
.B Example 6
Encrypting an Input File Using the 3DES Algorithm
.sp
.LP
The following example encrypts the
.B inputfile
file with the 192-bit
key stored in the
.B des3key
file:

.sp
.in +2
.nf
example$ encrypt -a 3des -k des3key -i inputfile -o outputfile
.fi
.in -2
.sp

.LP
.B Example 7
Encrypting an Input File with a DES token key
.sp
.LP
The following example encrypts the input file file with a DES token key in
the soft token keystore. The DES token key can be generated with
.BR pktool (1):

.sp
.in +2
.nf
example$ encrypt -a des -K mydeskey \e
     -T "Sun Software PKCS#11 softtoken" -i inputfile \e
     -o outputfile
.fi
.in -2
.sp

.SH EXIT STATUS
.sp
.LP
The following exit values are returned:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 6n
.rt
Successful completion.
.RE

.sp
.ne 2
.mk
.na
.B >0
.ad
.RS 6n
.rt
An error occurred.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR digest (1),
.BR pktool (1),
.BR mac (1),
.BR dd (1M),
.BR getpassphrase (3C),
.BR libpkcs11 (3LIB),
.BR attributes (5),
.BR pkcs11_softtoken (5)
.sp
.LP
.I System Administration Guide: Security Services
.sp
.LP
RSA PKCS#11 v2.11: http://www.rsasecurity.com
.sp
.LP
RSA PKCS#5 v2.0: http://www.rsasecurity.com
