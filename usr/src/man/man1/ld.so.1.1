'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ld.so.1 1 "26 Aug 2009" "SunOS 5.11" "User Commands"
.SH NAME
ld.so.1 \- runtime linker for dynamic objects
.SH SYNOPSIS
.LP
.nf
\fB/lib/ld.so.1\fR
.fi

.LP
.nf
\fB/lib/ld.so.1\fR [\fB-e\fR \fIenvar\fR] \fIdynamic-object\fR [\fIobject args\fR]...
.fi

.SH DESCRIPTION
.sp
.LP
Dynamic applications consist of one or more dynamic objects. A dynamic
application is typically a dynamic executable and one or more shared object
dependencies. As part of the initialization and execution of a dynamic
application, an
.B interpreter
is called. This interpreter completes the
binding of the application to its shared object dependencies. In Solaris, this
interpreter is referred to as the runtime linker.
.sp
.LP
During the link-editing of a dynamic executable, a special
.B
\&.interp
section, together with an associated program header, is created. This section
contains a path name specifying the program's interpreter. An interpreter path
name can be specified when the executable is constructed using the
.BR -I
option to
.BR ld (1),
the link-editor. The default name supplied by the
link-editor is the name of the runtime linker,
.BR ld.so.1 .
.sp
.LP
During the process of executing a dynamic executable, the kernel maps the file,
and locates the required interpreter. See
.BR exec (2)
and
.BR mmapobj (2).
The
kernel maps in, and transfers control to, this interpreter. Sufficient
information is passed to the interpretor to allow the interpreter to continue
to
bind, and then execute the application.
.sp
.LP
In addition to initializing an application, the runtime linker provides
services
that allow the application to extend its address space. Additional shared
objects
can be mapped, and symbols within the shared objects can be bound to.
.sp
.LP
The runtime linker performs the following functions:
.RS +4
.TP
.ie t \(bu
.el o
A configuration file, if in existence, is processed. Configuration files can be
employed to alter default search paths, provide a directory cache, and provide
alternative object dependencies. See
.BR crle (1).
By default, for 32-bit
objects, the configuration file
.B /var/ld/ld.config
is used. For 64-bit
objects, the default configuration file
.B /var/ld/64/ld.config
is used.
Alternative configuration files can be specified with the
.BR LD_CONFIG
environment variable. Alternative configuration files can also be encoded
within
a dynamic executable by using the
.B -c
option of
.BR ld (1).
.RE
.RS +4
.TP
.ie t \(bu
.el o
The runtime linker analyzes the application's dynamic information section,
.BR \&.dynamic ,
to determine which shared object dependencies are required.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The runtime linker then locates and maps in these dependencies. The dynamic
information section of each dependency is then analyzed to determine if any
additional dependencies are required.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Once all the shared object dependencies are loaded, the runtime linker performs
any necessary relocations. These relocations bind the shared objects in
preparation for process execution.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Any initialization functions provided by the shared object dependencies and,
possibly, by the dynamic executable are called. The functions are called in the
reverse order of the topologically sorted dependencies. If cyclic dependencies
exist, the initialization functions are called using the sorted order with the
cycle removed.
.BR ldd (1)
can be used to display the initialization order of
shared object dependencies.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Control is passed to the application.
.RE
.RS +4
.TP
.ie t \(bu
.el o
During the application's execution, the runtime linker can be called upon to
perform any delayed function binding.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If any shared objects are deleted from the process, finalization functions are
called. By default, these functions are called in the order of the
topologically
sorted dependencies.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The application can also call upon the services of the runtime linker to
acquire
additional shared objects by using
.BR dlopen "(3C). Symbols provided by these"
objects, can be bound to using
.BR dlsym (3C).
.RE
.sp
.LP
Further details on each of the previous topics can be found in the
.IR "Linker and Libraries Guide" .
.sp
.LP
The runtime linker uses a prescribed search path for locating the dynamic
dependencies of an object. The default search paths are the runpath recorded in
the object, followed by a series of defaults. For 32-bit objects, the defaults
are
.B /lib
followed by
.BR /usr/lib .
For 64-bit objects, the defaults are
.B /lib/64
followed by
.BR /usr/lib/64 .
These defaults component can be
modified using a configuration file that is created with
.BR crle (1).
The
runpath is specified when the dynamic object is constructed using the
.BR -R
option to
.BR ld (1).
The environment variable
.B LD_LIBRARY_PATH
can be used
to indicate directories to be searched before the default directories.
.SS "Command Line Usage"
.sp
.LP
Typically, the runtime linker is invoked indirectly through executing a dynamic
executable that declares the runtime linker as its interpreter. The runtime
linker can also be executed directly from the command line. This mechanism is
most often employed to experiment with new implementations of the runtime
linker.
Arguments that are supplied on the command line consist of options that are
applicable to the runtime linker. Following these options is the name of the
dynamic object to be executed, and any options required by this object.
Effectively, the runtime linker replaces any interpreter specified by the
dynamic
object.
.sp
.LP
The following option is supported:
.sp
.ne 2
.mk
.na
\fB-e\fR\ envar\fR
.ad
.RS 13n
.rt
Specify a runtime linker specific environment variable. See ENVIRONMENT
VARIABLES.
.RE

.SH ENVIRONMENT VARIABLES
.sp
.LP
Each environment variable can be specified with a
.B _32
or
.B _64
suffix.
This makes the environment variable specific, respectively, to 32-bit or 64-bit
processes. This environment variable overrides any non-suffixed version of the
environment variable that might be in effect. Environment variables specified
without a value, that have a
.B _32
or
.B _64
suffix, effectively cancel
any associated generic environment variable setting.
.sp
.ne 2
.mk
.na
.BR LD_AUDIT ,
.BR LD_AUDIT_32 ,
and
.BR LD_AUDIT_64
.ad
.sp .6
.RS 4n
A colon-separated list of objects that are loaded by the runtime linker. As
each
object is loaded, the object is examined for
.I Link-Auditing
interface
routines. The routines that are present are called as specified in the
.I Link-Auditing
interface described in the
.IR "Linker and Libraries Guide" .
Also, see the
.B -p
and
.B -P
options of
.BR ld (1).
.RE

.sp
.ne 2
.mk
.na
.BR LD_BIND_LAZY ,
.BR LD_BIND_LAZY_32 ,
and
.BR LD_BIND_LAZY_64
.ad
.sp .6
.RS 4n
The runtime linker's default mode of performing lazy binding can be enforced by
setting the environment variable
.B LD_BIND_LAZY
to any non-null value. This
setting causes the runtime linker to perform only
.B lazy
reference
relocations for all objects that are loaded into the process. Individual
objects
can request that
.B lazy
reference relocations are performed when the object
is loaded. See the
.B "-z now"
option of
.BR ld (1),
and
.BR dlopen (3C)
with the mode
.BR RTLD_NOW .
Such requests to perform
.B lazy
reference
relocations are suppressed when
.B LD_BIND_LAZY
is in effect.
.sp
If both
.B LD_BIND_LAZY
and
.B LD_BIND_NOW
are specified, then
.B LD_BIND_NOW
takes precedence.
.RE

.sp
.ne 2
.mk
.na
.BR LD_BIND_NOW ,
.BR LD_BIND_NOW_32 ,
and
.BR LD_BIND_NOW_64
.ad
.sp .6
.RS 4n
The runtime linker's default mode of performing lazy binding can be overridden
by setting the environment variable
.B LD_BIND_NOW
to any non-null value. This
setting causes the runtime linker to perform both
.B immediate
reference and
.B lazy
reference relocations for all objects that are loaded into the
process. Individual objects can request that
.B lazy
reference relocations are
performed when the object is loaded. See the
.B "-z now"
option of
.BR ld (1),
and
.BR dlopen "(3C) with the mode"
.BR RTLD_NOW .
.sp
If both
.B LD_BIND_NOW
and
.B LD_BIND_LAZY
are specified, then
.B LD_BIND_NOW
takes precedence.
.RE

.sp
.ne 2
.mk
.na
.BR LD_CONFIG ,
.BR LD_CONFIG_32 ,
and
.BR LD_CONFIG_64
.ad
.sp .6
.RS 4n
Provides an alternative configuration file. Configuration files can be employed
to alter default search paths, provide a directory cache, and provide alternate
object dependencies. See
.BR crle (1).
.RE

.sp
.ne 2
.mk
.na
.BR LD_DEBUG ,
.BR LD_DEBUG_32 ,
and
.BR LD_DEBUG_64
.ad
.sp .6
.RS 4n
Provides a comma, or colon-separated list of tokens to cause the runtime linker
to print debugging information to standard error. The special token
.B help
indicates the full list of tokens available. The environment variable
.B LD_DEBUG_OUTPUT
can also be supplied to specify a file to which the
debugging information is sent. The filename is suffixed with the process
.B ID
of the application generating the debugging information. See
.BR lari (1).
.RE

.sp
.ne 2
.mk
.na
.BR LD_DEMANGLE ,
.BR LD_DEMANGLE_32 ,
and
.BR LD_DEMANGLE_64
.ad
.sp .6
.RS 4n
Any symbol name used as part of a diagnostic message is shown as defined within
an
.B ELF
file. When
.B LD_DEMANGLE
is set to any non-null value, the
runtime linker attempts to decode (demangle) any C++ symbol name.
.RE

.sp
.ne 2
.mk
.na
.BR LD_FLAGS ,
.BR LD_FLAGS_32 ,
and
.BR LD_FLAGS_64
.ad
.sp .6
.RS 4n
Provides an alternative means of supplying environment variable information.
Any
of the \fBLD_\fIXXX\fR environment variables can be specified as a \fIxxx\fR
token. Multiple tokens can be supplied separated by commas. See EXAMPLES.
.RE

.sp
.ne 2
.mk
.na
.BR LD_LIBRARY_PATH ,
.BR LD_LIBRARY_PATH_32 ,
and
.B LD_LIBRARY_PATH_64
.ad
.sp .6
.RS 4n
The
.B LD_LIBRARY_PATH
environment variable, if set, is used to enhance the
search path that the runtime linker uses to find dynamic dependencies.
.B LD_LIBRARY_PATH
specifies a colon-separated list of directories that are
searched before the default directories. Also notice that
.B LD_LIBRARY_PATH
adds additional semantics to
.BR ld (1).
.RE

.sp
.ne 2
.mk
.na
.BR LD_LOADFLTR ,
.BR LD_LOADFLTR_32 ,
and
.BR LD_LOADFLTR_64
.ad
.sp .6
.RS 4n
Filters are a form of shared object. Filters allow an alternative shared object
to be selected at runtime that provide the implementation for any symbols that
are defined within the filter. See the
.BR -f " and "
.B -F
options of
.BR ld (1).
By default, the alternative shared object processing is deferred
until symbol resolution occurs against the filter. When
.B LD_LOADFLTR
is set
to any non-null value, any filters are processed immediately when the filter is
loaded. Also, see the
.B "-z loadfltr"
option of
.BR ld (1).
.RE

.sp
.ne 2
.mk
.na
.BR LD_NOAUDIT ,
.BR LD_NOAUDIT_32 ,
and
.BR LD_NOAUDIT_64
.ad
.sp .6
.RS 4n
Local auditing libraries can be defined within applications and shared objects.
See the
.B -p
and
.B -P
options of
.BR ld (1).
When
.B LD_NOAUDIT
is
set to any non-null value, the runtime linker ignores any local auditing
libraries.
.RE

.sp
.ne 2
.mk
.na
.BR LD_NOAUXFLTR ,
.BR LD_NOAUXFLTR_32 ,
and
.BR LD_NOAUXFLTR_64
.ad
.sp .6
.RS 4n
Auxiliary filters are a form of shared object. Auxiliary filters allow an
alternative shared object to be selected at runtime which provides the
implementation for any symbols that are defined within the filter. See the
.B -f
option of
.BR ld (1).
When
.B LD_NOAUXFLTR
is set to any non-null
value, the runtime linker disables this alternative shared object lookup.
.RE

.sp
.ne 2
.mk
.na
.BR LD_NOCONFIG ,
.BR LD_NOCONFIG_32 ,
and
.BR LD_NOCONFIG_64
.ad
.sp .6
.RS 4n
By default the runtime linker attempts to open and process a configuration
file.
When
.B LD_NOCONFIG
is set to any non-null value, the runtime linker disables
this configuration file processing.
.RE

.sp
.ne 2
.mk
.na
.BR LD_NODIRCONFIG ,
.BR LD_NODIRCONFIG_32 ,
and
.B LD_NODIRCONFIG_64
.ad
.sp .6
.RS 4n
Provides a subset of
.B LD_NOCONFIG
in that any directory cache information
provided in a configuration file is ignored.
.RE

.sp
.ne 2
.mk
.na
.BR LD_NODIRECT ,
.BR LD_NODIRECT_32 ,
and
.BR LD_NODIRECT_64
.ad
.sp .6
.RS 4n
Direct binding information instructs the runtime linker to search directly for
a
symbol in an associated object. See the
.B "-B direct"
option of
.BR ld (1).
Without direct binding, the symbol search performed by the runtime
linker follows the default model. When
.B LD_NODIRECT
is set to any non-null
value, the runtime linker ignores any direct binding information.
.RE

.sp
.ne 2
.mk
.na
.BR LD_NOENVCONFIG ,
.BR LD_NOENVCONFIG_32 ,
and
.B LD_NOENVCONFIG_64
.ad
.sp .6
.RS 4n
Provides a subset of
.B LD_NOCONFIG
in that any environment variables
provided in a configuration file are ignored.
.RE

.sp
.ne 2
.mk
.na
.BR LD_NOLAZYLOAD ,
.BR LD_NOLAZYLOAD_32 ,
and
.BR LD_NOLAZYLOAD_64
.ad
.sp .6
.RS 4n
Dependencies that are labeled for lazy loading are not loaded into memory until
explicit reference to the dependency has been made. See the
.B -z
.B lazyload
option of
.BR ld (1).
When
.B LD_NOLAZYLOAD
is set to any
non-null value, the runtime linker ignores a dependencies lazy loading label
and
loads the dependency immediately.
.RE

.sp
.ne 2
.mk
.na
.BR LD_NOOBJALTER ,
.BR LD_NOOBJALTER_32 ,
and
.BR LD_NOOBJALTER_64
.ad
.sp .6
.RS 4n
Provides a subset of
.B LD_NOCONFIG
in that any alternative object
dependencies provided in a configuration file are ignored.
.RE

.sp
.ne 2
.mk
.na
.BR LD_NOVERSION ,
.BR LD_NOVERSION_32 ,
and
.BR LD_NOVERSION_64
.ad
.sp .6
.RS 4n
By default, the runtime linker verifies version dependencies for the primary
executable and all of its dependencies. When
.B LD_NOVERSION
is set to any
non-null value, the runtime linker disables this version checking.
.RE

.sp
.ne 2
.mk
.na
.BR LD_ORIGIN ,
.BR LD_ORIGIN_32 ,
and
.BR LD_ORIGIN_64
.ad
.sp .6
.RS 4n
The immediate processing of
.B $ORIGIN
can be triggered by setting the
environment variable
.B LD_ORIGIN
to any non-null value. Before Solaris 9,
this option was useful for applications that invoked
.BR chdir (2)
prior to
locating dependencies that employed the
.B $ORIGIN
string token. The
establishment of the current working directory by the runtime linker is now
default thus making this option redundant.
.RE

.sp
.ne 2
.mk
.na
.BR LD_PRELOAD ,
.BR LD_PRELOAD_32 ,
and
.BR LD_PRELOAD_64
.ad
.sp .6
.RS 4n
Provides a list of shared objects, separated by spaces. These objects are
loaded
after the program being executed but before any other shared objects that the
program references. Symbol definitions provided by the preloaded objects
interpose on references made by the shared objects that the program references.
Symbol definitions provided by the preloaded objects do not interpose on the
symbol definitions provided by the program.
.RE

.sp
.ne 2
.mk
.na
.BR LD_PROFILE ,
.BR LD_PROFILE_32 ,
and
.BR LD_PROFILE_64
.ad
.sp .6
.RS 4n
Defines a shared object to be profiled by the runtime linker. When profiling is
enabled, a profiling buffer file is created and mapped. The name of the buffer
file is the name of the shared object being profiled with a \fB\&.profile\fR
extension. By default, this buffer is placed under
.BR /var/tmp .
The
environment variable
.B LD_PROFILE_OUTPUT
can also be supplied to indicate an
alternative directory in which to place the profiling buffer.
.sp
The profiling buffer contains
.BR profil (2)
and call count information. This
information is similar to the
.I gmon.out
information generated by programs
that have been linked with the
.B -xpg
option of
.BR cc .
Any applications
that use the named shared object and run while this environment variable is
set,
accumulate data in the profile buffer. See also NOTES. The profile buffer
information can be examined using
.BR gprof (1).
.sp
The
.B LD_PROFILE
profiling technique is an alternative to other techniques
that might be provided by the compilation system. The shared object being
profiled does not have to be instrumented in any way, and
.B LD_PROFILE
should
not be combined with a profile-instrumented application. See the \fILinker and Libraries Guide\fR for more information on profiling shared objects.
.RE

.sp
.ne 2
.mk
.na
.BR LD_SIGNAL ,
.BR LD_SIGNAL_32 ,
and
.BR LD_SIGNAL_64
.ad
.sp .6
.RS 4n
Provides a
.B numeric
signal number that the runtime linker uses to kill the
process in the event of a fatal runtime error. See
.BR thr_kill (3C).
By
default,
.B SIGKILL
is used. For example, providing the alternative signal
number
.BR 6
.RB ( SIGABRT ),
can provide for the creation of a core file to
aid debugging. See also the
.B RTLD_DI_SETSIGNAL
request to
.BR dlinfo (3C).
.RE

.sp
.LP
Notice that environment variable names beginning with the characters
\&'\fBLD_\fR'
are reserved for possible future enhancements to
.BR ld (1)
and
.BR ld.so.1 .
.SH SECURITY
.sp
.LP
Secure processes have some restrictions applied to the evaluation of their
dependencies and runpaths to prevent malicious dependency substitution or
symbol
interposition.
.sp
.LP
The runtime linker categorizes a process as secure if the
.BR issetugid (2)
system call returns true for the process.
.sp
.LP
For 32-bit objects, the default trusted directories that are known to the
runtime linker are
.B /lib/secure
and
.BR /usr/lib/secure .
For 64-bit
objects, the default trusted directories are
.B /lib/secure/64
and
.BR /usr/lib/secure/64 .
The utility
.BR crle (1)
can be used to specify
additional trusted directories that are applicable for secure applications.
Administrators who use this technique should ensure that the target directories
are suitably protected from malicious intrusion.
.sp
.LP
If an
.B LD_LIBRARY_PATH
family environment variable is in effect for a
secure process, only the
.B trusted
directories specified by this variable are
used to augment the runtime linker's search rules.
.sp
.LP
In a secure process, runpath components that are provided by the application or
any of its dependencies are used, provided the component is a full path name,
that is, the path name starts with a '\fB/\fR'.
.sp
.LP
In a secure process, the expansion of the
.B $ORIGIN
string is allowed only
if the string expands to a
.B trusted
directory. However, should a
.B $ORIGIN
expansion match a directory that has already provided dependencies,
then the directory is implicitly secure. This directory can be used to provide
additional dependencies.
.sp
.LP
In a secure process,
.B LD_CONFIG
is ignored. However, a configuration file
that is recorded in a secure application is used. See the
.B -c
option of
.BR ld (1).
A recorded configuration file must be a full path name, that is, the
path name starts with a '\fB/\fR'. A recorded configuration file that employs
the
.B $ORIGIN
string is restricted to known trusted directories. Developers who
record a configuration file within a secure application should ensure that the
configuration file directory is suitably protected from malicious intrusion. In
the absence of a recorded configuration file, a secure process uses the default
configuration file, if a configuration file exists. See
.BR crle (1).
.sp
.LP
In a secure process,
.B LD_SIGNAL
is ignored.
.sp
.LP
Additional objects can be loaded with a secure process using the
.BR LD_PRELOAD ,
or
.B LD_AUDIT
environment variables. These objects must be
specified as
.BR full " path names or "
.B simple
file names. Full path names
are restricted to known
.B trusted
directories. Simple file names, in which no
\&'\fB/\fR' appears in the name, are located subject to the search path
restrictions previously described. Simple file names resolve only to known
.B trusted
directories.
.sp
.LP
In a secure process, any dependencies that consist of simple filenames are
processed using the path name restrictions previously described. Dependencies
expressed as full path names or relative path names are used as is. Therefore,
the developer of a secure process should ensure that the target directory
referenced as a full path name or relative path name dependency is suitably
protected from malicious intrusion.
.sp
.LP
When creating a secure process, relative path names should
.B not
be used to
express dependencies, or to construct
.BR dlopen (3C)
path names. This
restriction should be applied to the application and to
.B all
dependencies.
.SH EXAMPLES
.LP
.B Example 1
Using LD_FLAGS to group environment variable information
.sp
.LP
The following use of
.B LD_FLAGS
is equivalent to setting the individual
environment variables
.B LD_BIND_NOW
and
.B LD_LIBRARY_PATH
for 32-bit
applications:

.sp
.in +2
.nf
example% \fBLD_FLAGS_32=bind_now,library_path=/lib/one:/lib/two\fR
.fi
.in -2
.sp

.sp
.LP
The following use of
.B LD_FLAGS
is equivalent to setting the individual
environment variables
.B LD_LIBRARY_PATH
and
.B LD_PRELOAD
for 64-bit
applications:

.sp
.in +2
.nf
example% \fBLD_FLAGS_64=library_path=/lib/one/64,preload=foo.so\fR
.fi
.in -2
.sp

.SH FILES
.sp
.ne 2
.mk
.na
.B /lib/ld.so.1
.ad
.sp .6
.RS 4n
Default runtime linker.
.RE

.sp
.ne 2
.mk
.na
.B /lib/libc.so.1
.ad
.sp .6
.RS 4n
Alternate interpreter for
.B "SVID ABI"
compatibility.
.RE

.sp
.ne 2
.mk
.na
.B /usr/lib/ld.so
.ad
.sp .6
.RS 4n
.B AOUT
.RB ( BCP )
runtime linker.
.RE

.sp
.ne 2
.mk
.na
.B /usr/lib/0@0.so.1
.ad
.sp .6
.RS 4n
A compatibility library to support null character pointers. See NOTES.
.RE

.sp
.ne 2
.mk
.na
.B /lib/secure
and
.BR /usr/lib/secure
.ad
.sp .6
.RS 4n
.B LD_PRELOAD
location for secure applications.
.RE

.sp
.ne 2
.mk
.na
.B /lib/secure/64
and
.BR /usr/lib/secure/64
.ad
.sp .6
.RS 4n
.B LD_PRELOAD
location for secure 64-bit applications.
.RE

.sp
.ne 2
.mk
.na
.B /lib/64/ld.so.1
.ad
.sp .6
.RS 4n
Default runtime linker for 64-bit applications.
.RE

.sp
.ne 2
.mk
.na
.B /usr/lib/64/0@0.so.1
.ad
.sp .6
.RS 4n
A 64-bit compatibility library to support null character pointers. See NOTES.
.RE

.sp
.ne 2
.mk
.na
.B /var/ld/ld.config
.ad
.sp .6
.RS 4n
Default configuration file for 32-bit applications.
.RE

.sp
.ne 2
.mk
.na
.B /var/ld/64/ld.config
.ad
.sp .6
.RS 4n
Default configuration file for 64-bit applications.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
.TE

.SH SEE ALSO
.sp
.LP
.BR crle (1),
.BR gprof (1),
.BR lari (1),
.BR ld (1),
.BR ldd (1),
.BR exec (2),
.BR issetugid (2),
.BR mmapobj (2),
.BR profil (2),
.BR dladdr (3C),
.BR dlclose (3C),
.BR dldump (3C),
.BR dlerror (3C),
.BR dlinfo (3C),
.BR dlopen (3C),
.BR dlsym (3C),
.BR thr_kill (3C),
.BR proc (4),
.BR attributes (5)
.sp
.LP
.I Linker and Libraries Guide
.SH NOTES
.sp
.LP
Care should be exercised when using
.B LD_PROFILE
in combination with other
process monitoring techniques, such as users of
.BR proc (4).
Multiple process
monitoring techniques can result in deadlock conditions that leave the profile
buffer locked. A locked buffer blocks any processes that try to record
profiling
information. To reduce this likelihood, the runtime linker's profile
implementation determines if the process is being monitored at startup. If so,
profiling of the process is silently disabled. However, this mechanism can not
catch monitoring processes that attach to the process during its execution.
.sp
.LP
The user compatibility library
.B /usr/lib/0@0.so.1
provides a mechanism that
establishes a value of
.B 0
at location 0. Some applications exist that
erroneously assume a null character pointer should be treated the same as a
pointer to a null string. A segmentation violation occurs in these applications
when a null character pointer is accessed. If this library is added to such an
application at runtime using
.BR LD_PRELOAD ,
the library provides an
environment that is sympathetic to this errant behavior. However, the user
compatibility library is intended neither to enable the generation of such
applications, nor to endorse this particular programming practice.
.sp
.LP
In many cases, the presence of
.B /usr/lib/0@0.so.1
is benign, and it can be
pre-loaded into programs that do not require it. However, there are exceptions.
Some applications, such as the JVM (Java Virtual Machine), require that a
segmentation violation be generated from a null pointer access. Applications
such
as the JVM should not preload
.BR /usr/lib/0@0.so .
