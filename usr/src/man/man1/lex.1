'\" te
.\" Copyright (c) 1992, X/Open Company Limited  All Rights Reserved
.\" Portions Copyright (c) 1997, Sun Microsystems, Inc.  All Rights Reserved
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH lex 1 "22 Aug 1997" "SunOS 5.11" "User Commands"
.SH NAME
lex \- generate programs for lexical tasks
.SH SYNOPSIS
.LP
.nf
\fBlex\fR [\fB-cntv\fR] [\fB-e\fR | \fB-w\fR] [\fB-V\fR \fB-Q\fR [y | n]] [\fIfile\fR].\|.\|.
.fi

.SH DESCRIPTION
.sp
.LP
The
.B lex
utility generates C programs to be used in lexical processing
of character input, and that can be used as an interface to
.BR yacc .
The
C programs are generated from
.B lex
source code and conform to the ISO C
standard. Usually, the
.B lex
utility writes the program it generates to
the file
.BR lex.yy.c .
The state of this file is unspecified if
.BR lex
exits with a non-zero exit status. See
.B "EXTENDED DESCRIPTION"
for a
complete description of the
.B lex
input language.
.SH OPTIONS
.sp
.LP
The following options are supported:
.sp
.ne 2
.mk
.na
.B -c
.ad
.RS 12n
.rt
Indicates C-language action (default option).
.RE

.sp
.ne 2
.mk
.na
.B -e
.ad
.RS 12n
.rt
Generates a program that can handle
.B EUC
characters (cannot be used
with the \fB-w\fR option). \fByytext[\|]\fR is of type \fBunsigned
char[\|]\fR.
.RE

.sp
.ne 2
.mk
.na
.B -n
.ad
.RS 12n
.rt
Suppresses the summary of statistics usually written with the
.BR -v
option. If no table sizes are specified in the
.B lex
source code and the
\fB-v\fR option is not specified, then \fB-n\fR is implied.
.RE

.sp
.ne 2
.mk
.na
.B -t
.ad
.RS 12n
.rt
Writes the resulting program to standard output instead of
.BR lex.yy.c .
.RE

.sp
.ne 2
.mk
.na
.B -v
.ad
.RS 12n
.rt
Writes a summary of
.B lex
statistics to the standard error. (See the
discussion of
.B lex
table sizes under the heading \fBDefinitions in
lex\fR.) If table sizes are specified in the \fBlex\fR source code, and if
the
.B -n
option is not specified, the
.B -v
option may be enabled.
.RE

.sp
.ne 2
.mk
.na
.B -w
.ad
.RS 12n
.rt
Generates a program that can handle
.B EUC
characters (cannot be used
with the \fB-e\fR option). Unlike the \fB-e\fR option, \fByytext[\|]\fR is
of type
.BR wchar_t[\|] .
.RE

.sp
.ne 2
.mk
.na
.B -V
.ad
.RS 12n
.rt
Prints out version information on standard error.
.RE

.sp
.ne 2
.mk
.na
\fB-Q[y|n]\fR
.ad
.RS 12n
.rt
Prints out version information to output file
.B lex.yy.c
by using
.BR -Qy .
The
.B -Qn
option does not print out version information and
is the default.
.RE

.SH OPERANDS
.sp
.LP
The following operand is supported:
.sp
.ne 2
.mk
.na
\fIfile\fR
.ad
.RS 9n
.rt
A pathname of an input file. If more than one such \fIfile\fR is specified,
all files will be concatenated to produce a single
.B lex
program. If no
\fIfile\fR operands are specified, or if a \fIfile\fR operand is \fB\(mi\fR,
the standard input will be used.
.RE

.SH OUTPUT
.sp
.LP
The
.B lex
output files are described below.
.SS "Stdout"
.sp
.LP
If the
.B -t
option is specified, the text file of C source code output
of
.B lex
will be written to standard output.
.SS "Stderr"
.sp
.LP
If the
.B -t
option is specified informational, error and warning
messages concerning the contents of
.B lex
source code input will be
written to the standard error.
.sp
.LP
If the
.B -t
option is not specified:
.RS +4
.TP
1.
Informational error and warning messages concerning the contents of
\fBlex\fR source code input will be written to either the standard output or
standard error.
.RE
.RS +4
.TP
2.
If the
.B -v
option is specified and the
.B -n
option is not
specified,
.B lex
statistics will also be written to standard error.
These statistics may also be generated if table sizes are specified with a
\fB%\fR operator in the \fBDefinitions in\fR \fBlex\fR section (see
.BR "EXTENDED DESCRIPTION" ),
as long as the
.B -n
option is not
specified.
.RE
.SS "Output Files"
.sp
.LP
A text file containing C source code will be written to
.BR lex.yy.c ,
or
to the standard output if the
.B -t
option is present.
.SH EXTENDED DESCRIPTION
.sp
.LP
Each input file contains
.B lex
source code, which is a table of regular
expressions with corresponding actions in the form of C program fragments.
.sp
.LP
When
.B lex.yy.c
is compiled and linked with the
.B lex
library
(using the
.B "-l l"
operand with
.B c89
or
.BR cc ),
the
resulting program reads character input from the standard input and
partitions it into strings that match the given expressions.
.sp
.LP
When an expression is matched, these actions will occur:
.RS +4
.TP
.ie t \(bu
.el o
The input string that was matched is left in
.I yytext
as a
null-terminated string;
.I yytext
is either an external character array
or a pointer to a character string. As explained in \fBDefinitions in
lex\fR, the type can be explicitly selected using the
.B %array
or
\fB%pointer\fR declarations, but the default is
.BR %array .
.RE
.RS +4
.TP
.ie t \(bu
.el o
The external
.B int
\fIyyleng\fR is set to the length of the matching
string.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The expression's corresponding program fragment, or action, is executed.
.RE
.sp
.LP
During pattern matching,
.B lex
searches the set of patterns for the
single longest possible match. Among rules that match the same number of
characters, the rule given first will be chosen.
.sp
.LP
The general format of
.B lex
source is:
.sp
.in +2
.nf
\fIDefinitions\fR
%%
\fIRules\fR
%%
\fIUser Subroutines\fR
.fi
.in -2

.sp
.LP
The first
.B %%
is required to mark the beginning of the rules (regular
expressions and actions); the second
.B %%
is required only if user
subroutines follow.
.sp
.LP
Any line in the \fBDefinitions in\fR
.B lex
section beginning with
a blank character will be assumed to be a C program fragment and will be
copied to the external definition area of the
.B lex.yy.c
file.
Similarly, anything in the \fBDefinitions in\fR
.B lex
section
included between delimiter lines containing only
.B %{
and
.B %}
will
also be copied unchanged to the external definition area of the
\fBlex.yy.c\fR file.
.sp
.LP
Any such input (beginning with a blank character or within
.B %{
and
\fB%}\fR delimiter lines) appearing at the beginning of the \fIRules\fR
section before any rules are specified will be written to
.BR lex.yy.c
after the declarations of variables for the
.B yylex
function and before
the first line of code in
.BR yylex .
Thus, user variables local to
\fByylex\fR can be declared here, as well as application code to execute
upon entry to
.BR yylex .
.sp
.LP
The action taken by
.B lex
when encountering any input beginning with a
blank character or within
.B %{
and
.B %}
delimiter lines appearing in
the
.I Rules
section but coming after one or more rules is undefined. The
presence of such input may result in an erroneous definition of the
\fByylex\fR function.
.SS "Definitions in lex"
.sp
.LP
\fBDefinitions in\fR \fBlex\fR appear before the first \fB%%\fR
delimiter. Any line in this section not contained between
.B %{
and
\fB%}\fR lines and not beginning with a blank character is assumed to define
a
.B lex
substitution string. The format of these lines is:
.sp
.in +2
.nf
\fIname   substitute\fR
.fi
.in -2
.sp

.sp
.LP
If a
.I name
does not meet the requirements for identifiers in the ISO C
standard, the result is undefined. The string
.I substitute
will replace
the string
.IR "{ name"
.I }
when it is used in a rule. The
\fIname\fR string is recognized in this context only when the braces are
provided and when it does not appear within a bracket expression or within
double-quotes.
.sp
.LP
In the \fBDefinitions in\fR
.B lex
section, any line beginning
with a
.B %
(percent sign) character and followed by an alphanumeric word
beginning with either
.B s
or
.B S
defines a set of start conditions.
Any line beginning with a
.B %
followed by a word beginning with either
\fBx\fR or \fBX\fR defines a set of exclusive start conditions. When the
generated scanner is in a
.B %s
state, patterns with no state specified
will be also active; in a
.B %x
state, such patterns will not be active.
The rest of the line, after the first word, is considered to be one or more
blank-character-separated names of start conditions. Start condition names
are constructed in the same way as definition names. Start conditions can be
used to restrict the matching of regular expressions to one or more states
as described in
.BR "Regular expressions in lex" .
.sp
.LP
Implementations accept either of the following two mutually exclusive
declarations in the \fBDefinitions in\fR
.B lex
section:
.sp
.ne 2
.mk
.na
.B %array
.ad
.RS 13n
.rt
Declare the type of
.I yytext
to be a null-terminated character array.
.RE

.sp
.ne 2
.mk
.na
.B %pointer
.ad
.RS 13n
.rt
Declare the type of
.I yytext
to be a pointer to a null-terminated
character string.
.RE

.sp
.LP
\fBNote:\fR When using the \fB%pointer\fR option, you may not also use the
\fByyless\fR function to alter
.IR yytext .
.sp
.LP
\fB%array\fR is the default. If \fB%array\fR is specified (or neither
\fB%array\fR nor \fB%pointer\fR is specified), then the correct way to make
an external reference to
.I yyext
is with a declaration of the form:
.sp
.LP
\fBextern char\fI yytext\fB[\|]\fR
.sp
.LP
If
.B %pointer
is specified, then the correct external reference is of
the form:
.sp
.LP
\fBextern char *\fIyytext\fB;\fR
.sp
.LP
\fBlex\fR will accept declarations in the \fBDefinitions in lex\fR section
for setting certain internal table sizes. The declarations are shown in the
following table.
.sp
.LP
.B "Table Size"
.B "Declaration in"
.B lex
.sp

.sp
.TS
tab() box;
cw(1.28i) cw(2.94i) cw(1.28i)
lw(1.28i) lw(2.94i) lw(1.28i)
.
\fBDeclaration\fR\fBDescription\fR\fBDefault\fR
_
\fB%p\fIn\fRNumber of positions2500
\fB%n\fIn\fRNumber of states500
\fB%a\fI n\fRNumber of transitions2000
\fB%e\fIn\fRNumber of parse tree nodes1000
\fB%k\fIn\fRNumber of packed character classes10000
\fB%o\fIn\fRSize of the output array3000
.TE

.sp
.LP
Programs generated by
.B lex
need either the
.B -e
or
.B -w
option
to handle input that contains
.B EUC
characters from supplementary
codesets. If neither of these options is specified,
.B yytext
is of the
type \fBchar[\|]\fR, and the generated program can handle only \fBASCII\fR
characters.
.sp
.LP
When the
.B -e
option is used,
.B yytext
is of the type
\fBunsigned\fR \fBchar[\|]\fR and \fByyleng\fR gives the total number of
\fIbytes\fR in the matched string. With this option, the macros
\fBinput()\fR, \fBunput(\fIc\fR)\fR, and \fBoutput(\fIc\fR)\fR should do a
byte-based
.B I/O
in the same way as with the regular
.BR ASCII
.BR lex .
Two more variables are available with the
.B -e
option,
\fByywtext\fR and
.BR yywleng ,
which behave the same as
.B yytext
and
\fByyleng\fR would under the \fB-w\fR option.
.sp
.LP
When the
.B -w
option is used,
.B yytext
is of the type
\fBwchar_t[\|]\fR and \fByyleng\fR gives the total number of
\fIcharacters\fR in the matched string.  If you supply your own
\fBinput()\fR, \fBunput(\fIc\fR)\fR, or \fBoutput(\fIc\fB)\fR macros
with this option, they must return or accept
.B EUC
characters in the
form of wide character
.RB ( wchar_t ).
This allows a different interface
between your program and the lex internals, to expedite some programs.
.SS "Rules in lex"
.sp
.LP
The
.B "Rules in"
\fBlex\fR source files are a table in which the
left column contains regular expressions and the right column contains
actions (C program fragments) to be executed when the expressions are
recognized.
.sp
.in +2
.nf
\fIERE action\fR
\fIERE action\fR
\&.\|.\|.
.fi
.in -2

.sp
.LP
The extended regular expression (ERE) portion of a row will be separated
from
.I action
by one or more blank characters. A regular expression
containing blank characters is recognized under one of the following
conditions:
.RS +4
.TP
.ie t \(bu
.el o
The entire expression appears within double-quotes.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The blank characters appear within double-quotes or square brackets.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Each blank character is preceded by a backslash character.
.RE
.SS "User Subroutines in lex"
.sp
.LP
Anything in the user subroutines section will be copied to
.BR lex.yy.c
following
.BR yylex .
.SS "Regular Expressions     in lex"
.sp
.LP
The
.B lex
utility supports the set of Extended Regular Expressions
(EREs) described on
.BR regex (5)
with the following additions and
exceptions to the syntax:
.sp
.ne 2
.mk
.na
\fB\|.\|.\|.\fR
.ad
.RS 14n
.rt
Any string enclosed in double-quotes will represent the characters within
the double-quotes as themselves, except that backslash escapes (which appear
in the following table) are recognized. Any backslash-escape sequence is
terminated by the closing quote. For example, "\|\e\|01""1" represents a
single string: the octal value 1 followed by the character 1.
.RE

.sp
.LP
\fI<\fIstate\fI>\fIr\fR
.sp
.ne 2
.mk
.na
\fB<\fIstate1\fR, \fIstate2\fR, \|.\|.\|.\|>\fIr\fR
.ad
.sp .6
.RS 4n
The regular expression
.I r
will be matched only when the program is in
one of the start conditions indicated by
.IR state ,
.IR state1 ,
and so
forth. For more information, see
.BR "Actions in lex" .
As an exception to
the typographical conventions of the rest of this document, in this case
<\fIstate\fR> does not represent a metavariable, but the literal
angle-bracket characters surrounding a symbol. The start condition is
recognized as such only at the beginning of a regular expression.
.RE

.sp
.ne 2
.mk
.na
\fIr\fR/\fIx\fR
.ad
.sp .6
.RS 4n
The regular expression
.I r
will be matched only if it is followed by an
occurrence of regular expression
.IR x .
The token returned in
.IR yytext
will only match
.IR r .
If the trailing portion of
.I r
matches the
beginning of
.IR x ,
the result is unspecified. The
.I r
expression
cannot include further trailing context or the
.B $
(match-end-of-line)
operator;
.I x
cannot include the
.B ^
(match-beginning-of-line)
operator, nor trailing context, nor the
.B $
operator. That is, only one
occurrence of trailing context is allowed in a
.B lex
regular expression,
and the
.B ^
operator only can be used at the beginning of such an
expression. A further restriction is that the trailing-context operator
\fB/\fR (slash) cannot be grouped within parentheses.
.RE

.sp
.ne 2
.mk
.na
\fB{\fIname\fB}\fR
.ad
.sp .6
.RS 4n
When
.I name
is one of the substitution symbols from the
\fIDefinitions\fR section, the string, including the enclosing braces, will
be replaced by the
.I substitute
value. The
.I substitute
value will
be treated in the extended regular expression as if it were enclosed in
parentheses. No substitution will occur if \fB{\fIname\fB}\fR occurs
within a bracket expression or within double-quotes.
.RE

.sp
.LP
Within an
.B ERE,
a backslash character (\fB\|\e\e\fR, \fB\e\|a\fR,
\fB\e\|b\fR, \fB\e\|f\fR, \fB\e\|n\fR, \fB\e\|r\fR, \fB\e\|t\fR,
\fB\e\|v\fR) is considered to begin an escape sequence. In addition, the
escape sequences in the following table will be recognized.
.sp
.LP
A literal newline character cannot occur within an
.B ERE;
the escape
sequence \fB\e\|n\fR can be used to represent a newline character. A newline
character cannot be matched by a period operator.
.sp
.LP
.B Escape Sequences in lex
.sp

.sp
.TS
tab() box;
cw(1.22i) cw(2.92i) cw(1.36i)
cw(1.22i) cw(2.92i) cw(1.36i)
.
Escape Sequences in lex
_
Escape SequenceDescription Meaning
_
\e\fIdigits\fRT{
A backslash character followed by the longest sequence of one, two or three octal-digit characters (01234567). Ifall of the digits are 0, (that is, representation of the NUL character), the behavior is undefined.
T}T{
The character whose encoding is represented by the one-, two- or three-digit octal integer. Multi-byte characters require multiple, concatenated escape sequences of this type, including the leading \e for each byte.
T}
_
\e\fBx\fIdigits\fRT{
A backslash character followed by the longest sequence of hexadecimal-digit characters (01234567abcdefABCDEF). If all of the digits are 0, (that is, representation of the NUL character), the behavior is undefined.
T}T{
The character whose encoding is represented by the hexadecimal integer.
T}
_
\e\fIc\fRT{
A backslash character followed by any character not described in this table.  (\e\e, \ea, \eb, \ef, \een, \er, \et, \ev).
T}The character c, unchanged.
.TE

.sp
.LP
The order of precedence given to extended regular expressions for
.BR lex
is as shown in the following table, from high to low.
.sp
.ne 2
.mk
.na
\fBNote\fR:\fR
.ad
.RS 10n
.rt
The escaped characters entry is not meant to imply that these are
operators, but they are included in the table to show their relationships to
the true operators. The start condition, trailing context and anchoring
notations have been omitted from the table because of the placement
restrictions described in this section; they can only appear at the
beginning or ending of an
.BR ERE.
.RE

.sp

.sp
.TS
tab() box;
cw(2.75i) cw(2.75i)
lw(2.75i) lw(2.75i)
.
ERE Precedence in lex
_
\fIcollation-related bracket symbols\fR\fB[= =]  [: :]  [. .]\fR
\fIescaped characters\fR\fB\e<\fIspecial character\fR>
\fIbracket expression\fR\fB[ ]\fR
\fIquoting\fR\fB".\|.\|."\fR
\fIgrouping\fR\fB()\fR
\fIdefinition\fR\fB{\fIname\fR}
\fIsingle-character RE duplication\fR\fB* + ?\fR
\fIconcatenation\fR
\fIinterval expression\fR\fB{\fIm\fR,\fIn\fR}
\fIalternation\fR\fB|\fR
.TE

.sp
.LP
The
.B ERE
anchoring operators (\fB\|^\fR and \fB$\fR\|) do not appear
in the table. With
.B lex
regular expressions, these operators are
restricted in their use: the
.B ^
operator can only be used at the
beginning of an entire regular expression, and the
.B $
operator only at
the end. The operators apply to the entire regular expression. Thus, for
example, the pattern (\fB^abc)|(def$\fR) is undefined; it can instead be
.RB "written as two separate rules, one with the regular expression" " ^abc"
and one with
.BR def$ ,
which share a common action via the special
.BR |
action (see below). If the pattern were written
.BR ^abc|def$ ,
it would
match either of
.B abc
or \fBdef\fR on a line by itself.
.sp
.LP
Unlike the general
.B ERE
rules, embedded anchoring is not allowed by
most historical
.B lex
implementations. An example of embedded anchoring
would be for patterns such as (^)foo($) to match \fBfoo\fR when it exists as
a complete word. This functionality can be obtained using existing \fBlex\fR
features:
.sp
.in +2
.nf
^foo/[ \e\|n]|
" foo"/[ \e\|n]    /* found foo as a separate word */
.fi
.in -2

.sp
.LP
Notice also that
.B $
is a form of trailing context (it is equivalent to
\fB/\e\|n\fR and as such cannot be used with regular expressions containing
another instance of the operator (see the preceding discussion of trailing
context).
.sp
.LP
.RB "The additional regular expressions trailing-context operator" " /"
(slash) can be used as an ordinary character if presented within
double-quotes, \fB"\|/\|"\fR; preceded by a backslash, \fB\e\|/\fR; or
within a bracket expression, \fB[\|/\|]\fR. The start-condition
.B <
and
\fB>\fR operators are special only in a start condition at the beginning of
a regular expression; elsewhere in the regular expression they are treated
as ordinary characters.
.sp
.LP
The following examples clarify the differences between
.B lex
regular
expressions and regular expressions appearing elsewhere in this document.
For regular expressions of the form \fIr\fR/\fIx\fR, the string matching
\fIr\fR is always returned; confusion may arise when the beginning of
\fIx\fR matches the trailing portion of
.IR r .
For example, given the
regular expression a*b/cc and the input
.BR aaabcc ,
\fIyytext\fR would
contain the string
.B aaab
on this match. But given the regular
expression x*/xy and the input
.BR xxxy ,
the token
.BR xxx ,
not
.BR xx ,
is returned by some implementations because
.B xxx
matches
x*.
.sp
.LP
In the rule ab*/bc, the b* at the end of
.I r
will extend
.IR r 's
match into the beginning of the trailing context, so the result is
unspecified. If this rule were ab/bc, however, the rule matches the text
\fBab\fR when it is followed by the text
.BR bc .
In this latter case, the
matching of
.I r
cannot extend into the beginning of
.IR x ,
so the
result is specified.
.SS "Actions in lex"
.sp
.LP
The action to be taken when an
.B ERE
is matched can be a C program
fragment or the special actions described below; the program fragment can
contain one or more C statements, and can also include special actions. The
empty C statement
.B ;
is a valid action; any string in the
\fBlex.yy.c\fR input that matches the pattern portion of such a rule is
effectively ignored or skipped. However, the absence of an action is not
valid, and the action
.B lex
takes in such a condition is undefined.
.sp
.LP
The specification for an action, including C statements and special
actions, can extend across several lines if enclosed in braces:
.sp
.in +2
.nf
ERE <one or more blanks> { program statement
program statement }
.fi
.in -2
.sp

.sp
.LP
The default action when a string in the input to a
.B lex.yy.c
program
is not matched by any expression is to copy the string to the output.
Because the default behavior of a program generated by
.B lex
is to read
the input and copy it to the output, a minimal
.B lex
source program that
has just
.B %%
generates a C program that simply copies the input to the
output unchanged.
.sp
.LP
Four special actions are available:
.sp
.in +2
.nf
|       ECHO;      REJECT;      BEGIN
.fi
.in -2
.sp

.sp
.ne 2
.mk
.na
.B |
.ad
.RS 12n
.rt
The action | means that the action for the next rule is the action for this
rule. Unlike the other three actions, | cannot be enclosed in braces or be
semicolon-terminated. It must be specified alone, with no other actions.
.RE

.sp
.ne 2
.mk
.na
.B ECHO;
.ad
.RS 12n
.rt
Writes the contents of the string
.I yytext
on the output.
.RE

.sp
.ne 2
.mk
.na
.B REJECT;
.ad
.RS 12n
.rt
Usually only a single expression is matched by a given string in the input.
\fBREJECT\fR means "continue to the next expression that matches the current
input," and causes whatever rule was the second choice after the current
rule to be executed for the same input. Thus, multiple rules can be matched
and executed for one input string or overlapping input strings. For example,
given the regular expressions
.B xyz
and
.B xy
and the input
.BR xyz ,
usually only the regular expression
.B xyz
would match. The
next attempted match would start after z. If the last action in the
\fBxyz\fR rule is \fBREJECT\fR , both this rule and the \fBxy\fR rule would
be executed. The
.B REJECT
action may be implemented in such a fashion
that flow of control does not continue after it, as if it were equivalent to
a
.B goto
to another part of
.BR yylex .
The use of
.B REJECT
may
result in somewhat larger and slower scanners.
.RE

.sp
.ne 2
.mk
.na
.B BEGIN
.ad
.RS 12n
.rt
The action:
.sp
\fBBEGIN\fR \fInewstate\fB;\fR
.sp
switches the state (start condition) to
.IR newstate .
If the string
\fInewstate\fR has not been declared previously as a start condition in the
\fBDefinitions in\fR \fBlex\fR section, the results are unspecified.
The initial state is indicated by the digit
.B 0
or the token
.BR INITIAL .
.RE

.sp
.LP
The functions or macros described below are accessible to user code
included in the
.B lex
input. It is unspecified whether they appear in
the C code output of
.BR lex ,
or are accessible only through the
\fB-l l\fR operand to \fBc89\fR or \fBcc\fR (the \fBlex\fR
library).
.sp
.ne 2
.mk
.na
.B int yylex(void)
.ad
.RS 21n
.rt
Performs lexical analysis on the input; this is the primary function
generated by the
.B lex
utility. The function returns zero when the end
of input is reached; otherwise it returns non-zero values (tokens)
determined by the actions that are selected.
.RE

.sp
.ne 2
.mk
.na
.B int yymore(void)
.ad
.RS 21n
.rt
When called, indicates that when the next input string is recognized, it is
to be appended to the current value of
.I yytext
rather than replacing
it; the value in
.I yyleng
is adjusted accordingly.
.RE

.sp
.ne 2
.mk
.na
\fBint\fIyyless(int\fB n\fI)\fR
.ad
.RS 21n
.rt
Retains
.I n
initial characters in
.IR yytext ,
NUL-terminated, and
treats the remaining characters as if they had not been read; the value in
\fIyyleng\fR is adjusted accordingly.
.RE

.sp
.ne 2
.mk
.na
.B int input(void)
.ad
.RS 21n
.rt
Returns the next character from the input, or zero on end-of-file. It
obtains input from the stream pointer
.IR yyin ,
although possibly via an
intermediate buffer. Thus, once scanning has begun, the effect of altering
the value of
.I yyin
is undefined. The character read is removed from the
input stream of the scanner without any processing by the scanner.
.RE

.sp
.ne 2
.mk
.na
\fBint unput(int\fR \fIc\fB)\fR
.ad
.RS 21n
.rt
Returns the character
.I c
to the input;
.I yytext
and
.IR yyleng
are undefined until the next expression is matched. The result of using
\fIunput\fR for more characters than have been input is unspecified.
.RE

.sp
.LP
The following functions appear only in the
.B lex
library accessible
through the
.B "-l l"
operand; they can therefore be redefined
by a portable application:
.sp
.ne 2
.mk
.na
.B int yywrap(void)
.ad
.sp .6
.RS 4n
Called by
.B yylex
at end-of-file; the default
.B yywrap
always will
return 1. If the application requires
.B yylex
to continue processing
with another source of input, then the application can include a function
.BR yywrap ,
which associates another file with the external variable
\fBFILE\fR *\fIyyin\fR and will return a value of zero.
.RE

.sp
.ne 2
.mk
.na
\fBint main(int\fR \fIargc\fR,\fR \fBchar\fR
\fB*\fIargv\fR[\|])\fR
.ad
.sp .6
.RS 4n
Calls
.B yylex
to perform lexical analysis, then exits. The user code
can contain
.B main
to perform application-specific operations, calling
\fByylex\fR as applicable.
.RE

.sp
.LP
The reason for breaking these functions into two lists is that only those
functions in
.B libl.a
can be reliably redefined by a portable
application.
.sp
.LP
Except for
.BR input ,
\fBunput\fR and
.BR main ,
all external and static
names generated by
.B lex
begin with the prefix
.B yy
or
.BR YY .
.SH USAGE
.sp
.LP
Portable applications are warned that in the
.B "Rules in lex"
section, an
\fBERE\fR without an action is not acceptable, but need not be detected as
erroneous by
.BR lex .
This may result in compilation or run-time errors.
.sp
.LP
The purpose of
.B input
is to take characters off the input stream and
discard them as far as the lexical analysis is concerned. A common use is to
discard the body of a comment once the beginning of a comment is
recognized.
.sp
.LP
The
.B lex
utility is not fully internationalized in its treatment of
regular expressions in the
.B lex
source code or generated lexical
analyzer. It would seem desirable to have the lexical analyzer interpret the
regular expressions given in the
.B lex
source according to the
environment specified when the lexical analyzer is executed, but this is not
possible with the current
.B lex
technology. Furthermore, the very nature
of the lexical analyzers produced by
.B lex
must be closely tied to the
lexical requirements of the input language being described, which will
frequently be locale-specific anyway. (For example, writing an analyzer that
is used for French text will not automatically be useful for processing
other languages.)
.SH EXAMPLES
.LP
\fBExample 1\fR Using lex
.sp
.LP
The following is an example of a
.B lex
program that implements a
rudimentary scanner for a Pascal-like syntax:

.sp
.in +2
.nf
%{
/* need this for the call to atof() below */
#include <math.h>
/* need this for printf(), fopen() and stdin below */
#include <stdio.h>
%}

DIGIT    [0-9]
ID       [a-z][a-z0-9]*
%%

{DIGIT}+	{
                       printf("An integer: %s (%d)\en", yytext,
                       atoi(yytext));
                       }

{DIGIT}+"."{DIGIT}*    {
                       printf("A float: %s (%g)\en", yytext,
                       atof(yytext));
                       }

if|then|begin|end|procedure|function        {
                       printf("A keyword: %s\en", yytext);
                       }

{ID}                   printf("An identifier: %s\en", yytext);

"+"|"-"|"*"|"/"        printf("An operator: %s\en", yytext);

"{"[^}\en]*"}"         /* eat up one-line comments */

[ \et\en]+               /* eat up white space */

\&.                      printf("Unrecognized character: %s\en", yytext);

%%

int main(int argc, char *argv[\|])
{
                      ++argv, --argc;  /* skip over program name */
                      if (argc > 0)
		                  yyin = fopen(argv[0], "r");
                      else
                      yyin = stdin;

                      yylex();
}
.fi
.in -2
.sp

.SH ENVIRONMENT VARIABLES
.sp
.LP
See
.BR environ (5)
for descriptions of the following environment
variables that affect the execution of
.BR lex :
.BR LANG ,
.BR LC_ALL ,
.BR LC_COLLATE ,
.BR LC_CTYPE ,
.BR LC_MESSAGES ,
and
.BR NLSPATH .
.SH EXIT STATUS
.sp
.LP
The following exit values are returned:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 7n
.rt
Successful completion.
.RE

.sp
.ne 2
.mk
.na
.B >0
.ad
.RS 7n
.rt
An error occurred.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWbtool
_
Interface StabilityStandard
.TE

.SH SEE ALSO
.sp
.LP
.BR yacc (1),
.BR attributes (5),
.BR environ (5),
.BR regex (5),
.BR standards (5)
.SH NOTES
.sp
.LP
If routines such as
.BR yyback() ,
.BR yywrap() ,
and
.B yylock()
in
\&\fB\|.l\fR (ell) files are to be external C functions, the command line to
compile a C++ program must define the
.B __EXTERN_C__
macro. For
example:
.sp
.in +2
.nf
example%  \fBCC -D__EXTERN_C__ .\|.\|. file\fR
.fi
.in -2
.sp

