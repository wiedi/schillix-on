'\" te
.\" Copyright 1989 AT&T
.\" Copyright (c) 2001, Sun Microsystems, Inc.  All Rights Reserved
.\" Portions Copyright (c) 1992, X/Open Company Limited  All Rights Reserved
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH sort 1 "19 Nov 2001" "SunOS 5.11" "User Commands"
.SH NAME
sort \- sort, merge, or sequence check text files
.SH SYNOPSIS
.LP
.nf
\fB/usr/bin/sort\fR [\fB-bcdfimMnru\fR] [\fB-k\fR \fIkeydef\fR] [\fB-o\fR \fIoutput\fR]
     [\fB-S\fR \fIkmem\fR] [\fB-t\fR \fIchar\fR] [\fB-T\fR \fIdirectory\fR] [\fB-y\fR [\fIkmem\fR]]
     [\fB-z\fR \fIrecsz\fR] [+\fIpos1\fR [-\fIpos2\fR]] [\fIfile\fR]...
.fi

.LP
.nf
\fB/usr/xpg4/bin/sort\fR [\fB-bcdfimMnru\fR] [\fB-k\fR \fIkeydef\fR] [\fB-o\fR \fIoutput\fR]
     [\fB-S\fR \fIkmem\fR] [\fB-t\fR \fIchar\fR] [\fB-T\fR \fIdirectory\fR] [\fB-y\fR [\fIkmem\fR]]
     [\fB-z\fR \fIrecsz\fR] [+\fIpos1\fR [-\fIpos2\fR]] [\fIfile\fR]...
.fi

.SH DESCRIPTION
.sp
.LP
The
.B sort
command sorts lines of all the named files together and writes
the result on the standard output.
.sp
.LP
Comparisons are based on one or more sort keys extracted from each line of
input. By default, there is one sort key, the entire input line. Lines are
ordered according to the collating sequence of the current locale.
.SH OPTIONS
.sp
.LP
The following options alter the default behavior:
.SS "/usr/bin/sort"
.sp
.ne 2
.mk
.na
.B -c
.ad
.RS 6n
.rt
Checks that the single input file is ordered as specified by the arguments
and the collating sequence of the current locale. The exit code is set and no
output is produced unless the file is out of sort.
.RE

.SS "/usr/xpg4/bin/sort"
.sp
.ne 2
.mk
.na
.B -c
.ad
.RS 16n
.rt
Same as
.B /usr/bin/sort
except no output is produced under any
circumstances.
.RE

.sp
.ne 2
.mk
.na
.B -m
.ad
.RS 16n
.rt
Merges only. The input files are assumed to be already sorted.
.RE

.sp
.ne 2
.mk
.na
\fB-o\fR \fIoutput\fR
.ad
.RS 16n
.rt
Specifies the name of an output file to be used instead of the standard
output. This file can be the same as one of the input files.
.RE

.sp
.ne 2
.mk
.na
\fB-S\fR \fIkmem\fR
.ad
.RS 16n
.rt
Specifies the maximum amount of swap-based memory used for sorting, in
kilobytes (the default unit).
.I kmem
can also be specified directly as a
number of bytes (b), kilobytes (k), megabytes (m), gigabytes (g), or terabytes
(t); or as a percentage (%) of the installed physical memory.
.RE

.sp
.ne 2
.mk
.na
\fB-T\fR \fIdirectory\fR
.ad
.RS 16n
.rt
Specifies the
.I directory
in which to place temporary files.
.RE

.sp
.ne 2
.mk
.na
.B -u
.ad
.RS 16n
.rt
Unique: suppresses all but one in each set of lines having equal keys. If
used with the
.B -c
option, checks that there are no lines with duplicate
keys in addition to checking that the input file is sorted.
.RE

.sp
.ne 2
.mk
.na
\fB-y\fR \fIkmem\fR
.ad
.RS 16n
.rt
(obsolete). This option was used to specify the amount of main memory
initially used by
.BR sort .
Its functionality is not appropriate for a
virtual memory system; memory usage for
.B sort
is now specified using the
\fB-S\fR option.
.RE

.sp
.ne 2
.mk
.na
\fB-z\fR \fIrecsz\fR
.ad
.RS 16n
.rt
(obsolete). This option was used to prevent abnormal termination when lines
longer than the system-dependent default buffer size are encountered. Because
\fBsort\fR automatically allocates buffers large enough to hold the longest
line, this option has no effect.
.RE

.SS "Ordering Options"
.sp
.LP
The default sort order depends on the value of
.BR LC_COLLATE .
If
\fBLC_COLLATE\fR is set to
.BR C ,
sorting is in
.B ASCII
order. If
\fBLC_COLLATE\fR is set to
.BR en_US ,
sorting is case insensitive except
when the two strings are otherwise equal and one has an uppercase letter
earlier than the other. Other locales have other sort orders.
.sp
.LP
The following options override the default ordering rules. When ordering
options appear independent of any key field specifications, the requested
field ordering rules are applied globally to all sort keys. When attached to a
specific key (see
.BR "Sort Key Options" ),
the specified ordering options
override all global ordering options for that key. In the obsolescent forms,
if one or more of these options follows a
.I +pos1
option, it affects only
the key field specified by that preceding option.
.sp
.ne 2
.mk
.na
.B -d
.ad
.RS 6n
.rt
Dictionary order: only letters, digits, and blanks (spaces and tabs) are
significant in comparisons.
.RE

.sp
.ne 2
.mk
.na
\fB-f\fR
.ad
.RS 6n
.rt
Folds lower-case letters into upper case.
.RE

.sp
.ne 2
.mk
.na
.B -i
.ad
.RS 6n
.rt
Ignores non-printable characters.
.RE

.sp
.ne 2
.mk
.na
.B -M
.ad
.RS 6n
.rt
Compares as months. The first three non-blank characters of the field are
folded to upper case and compared. For example, in English the sorting order
is \fB"JAN" < "FEB" < .\|.\|. < "DEC"\fR. Invalid fields compare low to
\fB"JAN"\fR. The \fB-M\fR option implies the \fB-b\fR option (see below).
.RE

.sp
.ne 2
.mk
.na
.B -n
.ad
.RS 6n
.rt
Restricts the sort key to an initial numeric string, consisting of optional
blank characters, optional minus sign, and zero or more digits with an
optional radix character and thousands separators (as defined in the current
locale), which is sorted by arithmetic value.  An empty digit string is
treated as zero. Leading zeros and signs on zeros do not affect ordering.
.RE

.sp
.ne 2
.mk
.na
.B -r
.ad
.RS 6n
.rt
Reverses the sense of comparisons.
.RE

.SS "Field Separator Options"
.sp
.LP
The treatment of field separators can be altered using the following
options:
.sp
.ne 2
.mk
.na
.B -b
.ad
.RS 11n
.rt
Ignores leading blank characters when determining the starting and ending
positions of a restricted sort key. If the
.B -b
option is specified before
the first sort key option, it is applied to all sort key options. Otherwise,
the
.B -b
option can be attached independently to each
.BR -k
.IR field_start ,
.IR field_end ,
or +\fIpos1\fR or \(mi\fIpos2\fR
option-argument (see below).
.RE

.sp
.ne 2
.mk
.na
\fB-t\fR \fIchar\fR
.ad
.RS 11n
.rt
Use
.I char
as the field separator character.
.I char
is not considered
to be part of a field (although it can be included in a sort key).  Each
occurrence of
.I char
is significant (for example, \fI<char><char>\fR
delimits an empty field). If
.B -t
is not specified, blank characters are
used as default field separators; each maximal non-empty sequence of blank
characters that follows a non-blank character is a field separator.
.RE

.SS "Sort Key Options"
.sp
.LP
Sort keys can be specified using the options:
.sp
.ne 2
.mk
.na
\fB-k\fR \fIkeydef\fR
.ad
.RS 19n
.rt
The \fIkeydef\fR argument is a restricted sort key field definition. The
format of this definition is:
.sp
.in +2
.nf
\fB-k\fR \fIfield_start\fR [\fItype\fR] [\fB,\fIfield_end\fR [\fItype\fR] ]
.fi
.in -2
.sp

where:
.sp
.ne 2
.mk
.na
\fIfield_start\fR and \fIfield_end\fR
.ad
.sp .6
.RS 4n
define a key field restricted to a portion of the line.
.RE

.sp
.ne 2
.mk
.na
.I type
.ad
.sp .6
.RS 4n
is a modifier from the list of characters
.BR bdfiMnr .
The
.B b
modifier
behaves like the
.B -b
option, but applies only to the \fIfield_start\fR or
\fIfield_end\fR to which it is attached and characters within a field are
counted from the first non-blank character in the field. (This applies
separately to \fIfirst_character\fR and
.IR last_character .)
The other
modifiers behave like the corresponding options, but apply only to the key
field to which they are attached. They have this effect if specified with
\fIfield_start\fR, \fIfield_end\fR or both.  If any modifier is attached to a
\fIfield_start\fR or to a
.IR field_end ,
no option applies to either.
.RE

When there are multiple key fields, later keys are compared only after all
earlier keys compare equal. Except when the
.B -u
option is specified,
lines that otherwise compare equal are ordered as if none of the options
.BR -d ,
.BR -f ,
.BR -i ,
\fB-n\fR or \fB-k\fR were present (but with
\fB-r\fR still in effect, if it was specified) and with all bytes in the lines
significant to the comparison.
.sp
The notation:
.sp
.in +2
.nf
\fB-k\fR \fIfield_start\fR[\fItype\fR][\fB,\fIfield_end\fR[\fItype\fR]]
.fi
.in -2
.sp

defines a key field that begins at \fIfield_start\fR and ends at
\fIfield_end\fR inclusive, unless \fIfield_start\fR falls beyond the end of
the line or after
.IR field_end ,
in which case the key field is empty. A
missing \fIfield_end\fR means the last character of the line.
.sp
A field comprises a maximal sequence of non-separating characters and, in the
absence of option
.BR -t ,
any preceding field separator.
.sp
The \fIfield_start\fR portion of the \fIkeydef\fR option-argument has the
form:
.sp
.in +2
.nf
\fIfield_number\fR[\fB\&.\fIfirst_character\fR]
.fi
.in -2
.sp

Fields and characters within fields are numbered starting with 1.
\fIfield_number\fR and
.IR first_character ,
interpreted as positive decimal
integers, specify the first character to be used as part of a sort key. If
\fB\&.\fIfirst_character\fR is omitted, it refers to the first character of
the field.
.sp
The \fIfield_end\fR portion of the \fIkeydef\fR option-argument has the
form:
.sp
.in +2
.nf
\fIfield_number\fR[\fB\&.\fIlast_character\fR]
.fi
.in -2
.sp

The \fIfield_number\fR is as described above for \fIfield_start\fR.
.IR last_character ,
interpreted as a non-negative decimal integer, specifies
the last character to be used as part of the sort key. If \fIlast_character\fR
evaluates to zero or \fB\&.\fIlast_character\fR is omitted, it refers to
the last character of the field specified by
.IR field_number .
.sp
If the
.B -b
option or
.B b
type modifier is in effect, characters
within a field are counted from the first non-blank character in the field.
(This applies separately to \fIfirst_character\fR and
.IR last_character .)
.RE

.sp
.ne 2
.mk
.na
\fB[+\fIpos1\fR [\fB-\fIpos2\fR]]\fR
.ad
.RS 19n
.rt
(obsolete). Provide functionality equivalent to the \fB-k\fIkeydef\fR
option.
.sp
\fIpos1\fR and \fIpos2\fR each have the form \fIm\fB\&.\fIn\fR
optionally followed by one or more of the flags
.BR bdfiMnr .
A starting
position specified by \fB+\fIm\fB\&.\fIn\fR is interpreted to mean
the \fIn\fR+1st character in the \fIm\fR+1st field. A missing \fB\&.\fIn\fR
means \fB\&.0\fR, indicating the first character of the \fIm\fR+1st field. If
the
.B b
flag is in effect
.I n
is counted from the first non-blank in
the \fIm\fR+1st field; \fB+\fIm\fB\&.0b\fR refers to the first non-blank
character in the \fIm\fR+1st field.
.sp
A last position specified by \fB\(mi\fIm\fB\&.\fIn\fR is interpreted
to mean the \fIn\fRth character (including separators) after the last
character of the \fIm\fRth field. A missing \fB\&.\fIn\fR means \fB\&.\fR0,
indicating the last character of the \fIm\fRth field. If the \fBb\fR flag is
in effect
.I n
is counted from the last leading blank in the
.IR m +1st
field; \fB\(mi\fIm\fB\&.\fR1\fBb\fR refers to the first non-blank in the
\fIm\fR+1st field.
.sp
The fully specified
.I +pos1
\fI\(mipos2\fR form with type modifiers
\fBT\fR and
.BR U :
.sp
.in +2
.nf
+\fBw\fR.\fBxT\fR -\fBy\fR.\fBzU\fR
.fi
.in -2
.sp

is equivalent to:
.sp
.in +2
.nf
undefined (z==0 & U contains \fIb\fR & \fI-t\fR is present)
-k w+1.x+1T,y.0U     (z==0 otherwise)
-k w+1.x+1T,y+1.zU   (z > 0)
.fi
.in -2
.sp

Implementations support at least nine occurrences of the sort keys (the
\fB-k\fR option and obsolescent \fB+\fIpos1\fR and
\fB\(mi\fIpos2\fB)\fR which are significant in command line order. If no
sort key is specified, a default sort key of the entire line is used.
.RE

.SH OPERANDS
.sp
.LP
The following operand is supported:
.sp
.ne 2
.mk
.na
\fIfile\fR
.ad
.RS 8n
.rt
A path name of a file to be sorted, merged or checked. If no \fIfile\fR
operands are specified, or if a \fIfile\fR operand is \fB\(mi\fR, the standard
input is used.
.RE

.SH USAGE
.sp
.LP
See
.BR largefile (5)
for the description of the behavior of
.B sort
when
encountering files greater than or equal to 2 Gbyte ( 2^31 bytes).
.SH EXAMPLES
.sp
.LP
In the following examples, first the preferred and then the obsolete way of
specifying
.B sort
keys are given as an aid to understanding the
relationship between the two forms.
.LP
\fBExample 1\fR Sorting with the Second Field as a sort Key
.sp
.LP
Either of the following commands sorts the contents of \fBinfile\fR with the
second field as the sort key:

.sp
.in +2
.nf
example% \fBsort -k 2,2 infile\fR
example% \fBsort +1 \(mi2 infile\fR
.fi
.in -2
.sp

.LP
\fBExample 2\fR Sorting in Reverse Order
.sp
.LP
Either of the following commands sorts, in reverse order, the contents of
\fBinfile1\fR and
.BR infile2 ,
placing the output in \fBoutfile\fR and using
the second character of the second field as the sort key (assuming that the
first character of the second field is the field separator):

.sp
.in +2
.nf
example% \fBsort -r -o outfile -k 2.2,2.2 infile1 infile2\fR
example% \fBsort -r -o outfile +1.1 \(mi1.2 infile1 infile2\fR
.fi
.in -2
.sp

.LP
\fBExample 3\fR Sorting Using a Specified Character in One of the Files
.sp
.LP
Either of the following commands sorts the contents of \fBinfile1\fR and
\fBinfile2\fR using the second non-blank character of the second field as the
sort key:

.sp
.in +2
.nf
example% \fBsort -k 2.2b,2.2b infile1 infile2\fR
example% \fBsort +1.1b \(mi1.2b infile1 infile2\fR
.fi
.in -2
.sp

.LP
\fBExample 4\fR Sorting by Numeric User ID
.sp
.LP
Either of the following commands prints the
.BR passwd (4)
file (user
database) sorted by the numeric user ID (the third colon-separated field):

.sp
.in +2
.nf
example% \fBsort -t : -k 3,3n /etc/passwd\fR
example% \fBsort -t : +2 \(mi3n /etc/passwd\fR
.fi
.in -2
.sp

.LP
\fBExample 5\fR Printing Sorted Lines Excluding Lines that Duplicate a
Field
.sp
.LP
Either of the following commands prints the lines of the already sorted file
\fBinfile\fR, suppressing all but one occurrence of lines having the same
third field:

.sp
.in +2
.nf
example% \fBsort -um -k 3.1,3.0 infile\fR
example% \fBsort -um +2.0 \(mi3.0 infile\fR
.fi
.in -2
.sp

.LP
\fBExample 6\fR Sorting by Host IP Address
.sp
.LP
Either of the following commands prints the
.BR hosts (4)
file (IPv4 hosts
database), sorted by the numeric
.B IP
address (the first four numeric
fields):

.sp
.in +2
.nf
example$ \fBsort -t . -k 1,1n -k 2,2n -k 3,3n -k 4,4n /etc/hosts\fR
example$ \fBsort -t . +0 -1n +1 -2n +2 -3n +3 -4n /etc/hosts\fR
.fi
.in -2
.sp

.sp
.LP
Since '\fB\&.\fR' is both the field delimiter and, in many locales, the
decimal separator, failure to specify both ends of the field leads to results
where the second field is interpreted as a fractional portion of the first,
and so forth.

.SH ENVIRONMENT VARIABLES
.sp
.LP
See
.BR environ (5)
for descriptions of the following environment variables
that affect the execution of
.BR sort :
.BR LANG ,
.BR LC_ALL ,
.BR LC_COLLATE ,
.BR LC_MESSAGES ,
and
.BR NLSPATH .
.sp
.ne 2
.mk
.na
.B LC_CTYPE
.ad
.RS 14n
.rt
Determine the locale for the interpretation of sequences of bytes of text
data as characters (for example, single- versus multi-byte characters in
arguments and input files) and the behavior of character classification for
the
.BR -b ,
.BR -d ,
\fB-f\fR, \fB-i\fR and \fB-n\fR options.
.RE

.sp
.ne 2
.mk
.na
.B LC_NUMERIC
.ad
.RS 14n
.rt
Determine the locale for the definition of the radix character and thousands
separator for the
.B -n
option.
.RE

.SH EXIT STATUS
.sp
.LP
The following exit values are returned:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 6n
.rt
All input files were output successfully, or
.B -c
was specified and the
input file was correctly sorted.
.RE

.sp
.ne 2
.mk
.na
.B 1
.ad
.RS 6n
.rt
Under the
.B -c
option, the file was not ordered as specified, or if the
\fB-c\fR and \fB-u\fR options were both specified, two input lines were found
with equal keys.
.RE

.sp
.ne 2
.mk
.na
.B >1
.ad
.RS 6n
.rt
An error occurred.
.RE

.SH FILES
.sp
.ne 2
.mk
.na
.B /var/tmp/stm???
.ad
.RS 19n
.rt
Temporary files
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.SS "/usr/bin/sort"
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWesu
_
CSIEnabled
.TE

.SS "/usr/xpg4/bin/sort"
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWxcu4
_
CSIEnabled
_
Interface StabilityStandard
.TE

.SH SEE ALSO
.sp
.LP
.BR comm (1),
.BR join (1),
.BR uniq (1),
.BR nl_langinfo (3C),
.BR strftime (3C),
.BR hosts (4),
.BR passwd (4),
.BR attributes (5),
.BR environ (5),
.BR largefile (5),
.BR standards (5)
.SH DIAGNOSTICS
.sp
.LP
Comments and exits with non-zero status for various trouble conditions (for
example, when input lines are too long), and for disorders discovered under
the
.B -c
option.
.SH NOTES
.sp
.LP
When the last line of an input file is missing a
.B new-line
character,
\fBsort\fR appends one, prints a warning message, and continues.
.sp
.LP
\fBsort\fR does not guarantee preservation of relative line ordering on equal
keys.
.sp
.LP
One can tune
.B sort
performance for a specific scenario using the
\fB-S\fR option. However, one should note in particular that \fBsort\fR has
greater knowledge of how to use a finite amount of memory for sorting than the
virtual memory system. Thus, a sort invoked to request an extremely large
amount of memory via the
.B -S
option could perform extremely poorly.
.sp
.LP
As noted, certain of the field modifiers (such as
.B -M
and
.BR -d )
cause the interpretation of input data to be done with reference to
locale-specific settings. The results of this interpretation can be unexpected
if one's expectations are not aligned with the conventions established by the
locale. In the case of the month keys,
.B sort
does not attempt to
compensate for approximate month abbreviations. The precise month
abbreviations from \fBnl_langinfo\fR(3C) or \fBstrftime\fR(3C) are the only
ones recognized. For printable or dictionary order, if these concepts are not
well-defined by the locale, an empty sort key might be the result, leading to
the next key being the significant one for determining the appropriate
ordering.
