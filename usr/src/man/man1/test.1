'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright 1992, X/Open Company Limited All Rights Reserved
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1982-2007 AT&T Knowledge Ventures
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH test 1 "11 Aug 2009" "SunOS 5.11" "User Commands"
.SH NAME
test \- evaluate condition(s)
.SH SYNOPSIS
.LP
.nf
\fB/usr/bin/test\fR [\fIcondition\fR]
.fi

.LP
.nf
\fB[\fR [\fIcondition\fR] ]
.fi

.SS "sh"
.LP
.nf
\fBtest\fR [\fIcondition\fR]
.fi

.LP
.nf
\fB[\fR [\fIcondition\fR] ]
.fi

.SS "csh"
.LP
.nf
\fBtest\fR [\fIcondition\fR]
.fi

.LP
.nf
\fB[\fR [\fIcondition\fR] ]
.fi

.SS "ksh"
.LP
.nf
\fBtest\fR [\fIcondition\fR]
.fi

.LP
.nf
\fB[\fR [\fIcondition\fR] ]
.fi

.SS "ksh93"
.LP
.nf
\fBtest\fR [\fIcondition\fR]
.fi

.LP
.nf
\fB[\fR [\fIcondition\fR] ]
.fi

.SH DESCRIPTION
.sp
.LP
The
.B test
utility evaluates the
.I condition
and indicates the
result of the evaluation by its exit status. An exit status of zero
indicates that the condition evaluated as true and an exit status of 1
indicates that the condition evaluated as false.
.sp
.LP
In the first form of the utility shown using the SYNOPSIS:
.sp
.in +2
.nf
test [\fIcondition\fR]
.fi
.in -2
.sp

.sp
.LP
the square brackets denote that
.I condition
is an optional operand and
are not to be entered on the command line.
.sp
.LP
In the second form of the utility shown using the SYNOPSIS:
.sp
.in +2
.nf
\fB[\fR [ \fIcondition\fR ] \fB]\fR
.fi
.in -2
.sp

.sp
.LP
the first open square bracket,
.BR [ ,
is the required utility name.
.I condition
is optional, as denoted by the inner pair of square
brackets. The final close square bracket,
.BR ] ,
is a required operand.
.sp
.LP
See
.BR largefile (5)
for the description of the behavior of
.BR test
when encountering files greater than or equal to 2 Gbyte (2^31 bytes).
.sp
.LP
The \fBtest\fR and \fB[\fR utilities evaluate the condition \fIcondition\fR
and, if its value is true, set exit status to
.BR 0 .
Otherwise, a non-zero
(false) exit status is set. \fBtest\fR and \fB[\fR also set a non-zero exit
status if there are no arguments. When permissions are tested, the effective
user
.B ID
of the process is used.
.sp
.LP
All operators, flags, and brackets (brackets used as shown in the last
SYNOPSIS line) must be separate arguments to these commands. Normally these
arguments are separated by spaces.
.SH OPERANDS
.sp
.LP
The primaries listed below with two elements of the form:
.sp
.in +2
.nf
\fI-primary_operator primary_operand\fR
.fi
.in -2

.sp
.LP
are known as
.BR "unary primaries" .
The primaries with three elements in
either of the two forms:
.sp
.in +2
.nf
\fIprimary_operand -primary_operator primary_operand
primary_operand primary_operator primary_operand\fR
.fi
.in -2

.sp
.LP
are known as
.BR "binary primaries" .
.sp
.LP
If any file operands except for
.B -h
and
.B -L
primaries refer to
symbolic links, the symbolic link is expanded and the test is performed on
the resulting file.
.sp
.LP
If you test a file you own (the
.B "-r -w"
or
.B -x
tests), but
the permission tested does not have the
.I owner
bit set, a non-zero
(false) exit status is returned even though the file can have the
.B group
or
.B other
bit set for that permission.
.sp
.LP
The
.B =
and
.B !=
primaries have a higher precedence than the unary
primaries. The
.B =
and
.B !=
primaries always expect arguments;
therefore,
.B =
and
.B !=
cannot be used as an argument to the unary
primaries.
.sp
.LP
The following primaries can be used to construct
.IR condition :
.sp
.ne 2
.mk
.na
.B -a
.I file
.ad
.RS 28n
.rt
True if
.I file
exists. (Not available in
.BR sh .)
.RE

.sp
.ne 2
.mk
.na
.B -b
.I file
.ad
.RS 28n
.rt
True if
.I file
exists and is a block special file.
.RE

.sp
.ne 2
.mk
.na
.B -c
.I file
.ad
.RS 28n
.rt
True if
.I file
exists and is a character special file.
.RE

.sp
.ne 2
.mk
.na
.B -d
.I file
.ad
.RS 28n
.rt
True if
.I file
exists and is a directory.
.RE

.sp
.ne 2
.mk
.na
.B -e
.I file
.ad
.RS 28n
.rt
True if
.I file
exists. (Not available in
.BR sh .)
.RE

.sp
.ne 2
.mk
.na
.B -f
.I file
.ad
.RS 28n
.rt
True if
.I file
exists and is a regular file. Alternatively, if
.B /usr/bin/sh
users specify
.B /usr/ucb
before
.B /usr/bin
in
their
.B PATH
environment variable, then
.B test
returns true if
.I file
exists and is (\fBnot\(mia\(midirectory\fR). The \fBcsh\fR
.B test
and
.B [
built-ins always use this alternative behavior.
.RE

.sp
.ne 2
.mk
.na
.B -g
.I file
.ad
.RS 28n
.rt
True if \fIfile\fR exists and its set group \fBID\fR flag is set.
.RE

.sp
.ne 2
.mk
.na
.B -G
.I file
.ad
.RS 28n
.rt
True if
.I file
exists and its group matches the effective group
.B ID
of this process. (Not available in
.BR sh .)
.RE

.sp
.ne 2
.mk
.na
.B -h
.I file
.ad
.RS 28n
.rt
True if
.I file
exists and is a symbolic link.
.RE

.sp
.ne 2
.mk
.na
.B -k
.I file
.ad
.RS 28n
.rt
True if
.I file
exists and has its sticky bit set.
.RE

.sp
.ne 2
.mk
.na
.B -L
.I file
.ad
.RS 28n
.rt
True if
.I file
exists and is a symbolic link.
.RE

.sp
.ne 2
.mk
.na
.B -n
.I string
.ad
.RS 28n
.rt
True if the length of
.I string
is non-zero.
.RE

.sp
.ne 2
.mk
.na
.B -o
.I option
.ad
.RS 28n
.rt
True if option named
.I option
is on. This option is not available in
.B csh
or
.BR sh .
.RE

.sp
.ne 2
.mk
.na
.B -O
.I file
.ad
.RS 28n
.rt
True if \fIfile\fR exists and is owned by the effective user \fBID\fR of
this process. This option is not available in
.BR sh .
.RE

.sp
.ne 2
.mk
.na
.B -p
.I file
.ad
.RS 28n
.rt
True if
.I file
is a named pipe
.RB ( FIFO ).
.RE

.sp
.ne 2
.mk
.na
.B -r
.I file
.ad
.RS 28n
.rt
True if
.I file
exists and is readable.
.RE

.sp
.ne 2
.mk
.na
.B -s
.I file
.ad
.RS 28n
.rt
True if
.I file
exists and has a size greater than zero.
.RE

.sp
.ne 2
.mk
.na
.B -S
.I file
.ad
.RS 28n
.rt
True if
.I file
exists and is a socket. This option is not available in
.BR sh .
.RE

.sp
.ne 2
.mk
.na
\fB-t\fR [\fIfile_descriptor\fR]\fR
.ad
.RS 28n
.rt
True if the file whose file descriptor number is
.I file_descriptor
is
open and is associated with a terminal. If
.I file_descriptor
is not
specified,
.B 1
is used as a default value.
.RE

.sp
.ne 2
.mk
.na
.B -u
.I file
.ad
.RS 28n
.rt
True if
.I file
exists and its set-user-ID flag is set.
.RE

.sp
.ne 2
.mk
.na
.B -w
.I file
.ad
.RS 28n
.rt
True if
.I file
exists and is writable. True indicates only that the
write flag is on. The
.I file
is not writable on a read-only file system
even if this test indicates true.
.RE

.sp
.ne 2
.mk
.na
.B -x
.I file
.ad
.RS 28n
.rt
True if
.I file
exists and is executable. True indicates only that the
execute flag is on. If
.I file
is a directory, true indicates that
.I file
can be searched.
.RE

.sp
.ne 2
.mk
.na
.B -z
.I string
.ad
.RS 28n
.rt
True if the length of string
.I string
is zero.
.RE

.sp
.ne 2
.mk
.na
.I file1
.B -nt
.I file2
.ad
.RS 28n
.rt
True if
.I file1
exists and is newer than
.IR file2 .
This option is
not available in
.BR sh .
.RE

.sp
.ne 2
.mk
.na
.I file1
.B -ot
.I file2
.ad
.RS 28n
.rt
True if
.I file1
exists and is older than
.IR file2 .
This option is
not available in
.BR sh .
.RE

.sp
.ne 2
.mk
.na
.I file1
.B -ef
.I file2
.ad
.RS 28n
.rt
True if \fIfile1\fR and \fIfile2\fR exist and refer to the same file. This
option is not available in
.BR sh .
.RE

.sp
.ne 2
.mk
.na
.I string
.ad
.RS 28n
.rt
True if the string
.I string
is not the null string.
.RE

.sp
.ne 2
.mk
.na
.I string1
.B =
.I string2
.ad
.RS 28n
.rt
True if the strings
.I string1
and
.I string2
are identical.
.RE

.sp
.ne 2
.mk
.na
.I string1
.B !=
.I string2
.ad
.RS 28n
.rt
True if the strings
.I string1
and
.I string2
are not identical.
.RE

.sp
.ne 2
.mk
.na
.I n1
.B -eq
.I n2
.ad
.RS 28n
.rt
True if the numbers
.I n1
and
.I n2
are algebraically equal. A number
may be integer, floating point or floating-point constant (such as [+/-]Inf,
[+/-]NaN) in any format specified by C99/XPG6/SUS.
.RE

.sp
.ne 2
.mk
.na
.I n1
.B -ne
.I n2
.ad
.RS 28n
.rt
True if the numbers
.I n1
and
.I n2
are not algebraically equal. A
number may be integer, floating point or floating-point constant (such as
[+/-]Inf, [+/-]NaN) in any format specified by C99/XPG6/SUS.
.RE

.sp
.ne 2
.mk
.na
.I n1
.B -gt
.I n2
.ad
.RS 28n
.rt
True if the number
.I n1
is algebraically greater than the number
.IR n2 .
A number may be integer, floating point or floating-point constant
(such as [+/-]Inf, [+/-]NaN) in any format specified by C99/XPG6/SUS.
.RE

.sp
.ne 2
.mk
.na
.I n1
.B -ge
.I n2
.ad
.RS 28n
.rt
True if the number
.I n1
is algebraically greater than or equal to the
number
.IR n2 .
A number may be integer, floating point or floating-point
constant (such as [+/-]Inf, [+/-]NaN) in any format specified by
C99/XPG6/SUS.
.RE

.sp
.ne 2
.mk
.na
.I n1
.B -lt
.I n2
.ad
.RS 28n
.rt
True if the number
.I n1
is algebraically less than the number
.IR n2 .
A number may be integer, floating point or floating-point constant (such as
[+/-]Inf, [+/-]NaN) in any format specified by C99/XPG6/SUS.
.RE

.sp
.ne 2
.mk
.na
.I n1
.B -le
.I n2
.ad
.RS 28n
.rt
True if the number
.I n1
is algebraically less than or equal to the
number
.IR n2 .
A number may be integer, floating point or floating-point
constant (such as [+/-]Inf, [+/-]NaN) in any format specified by
C99/XPG6/SUS.
.RE

.sp
.ne 2
.mk
.na
.I condition1
.B -a
.I condition2
.ad
.RS 28n
.rt
True if both
.I condition1
and
.I condition2
.RB "are true. The" " -a"
binary primary is left associative and has higher precedence than the
.B -o
binary primary.
.RE

.sp
.ne 2
.mk
.na
.I condition1
.B -o
.I condition2
.ad
.RS 28n
.rt
True if either
.I condition1
or
.I condition2
.RB "is true. The" " -o"
binary primary is left associative.
.RE

.sp
.LP
These primaries can be combined with the following operators:
.sp
.ne 2
.mk
.na
.B !
.I condition
.ad
.RS 17n
.rt
True if
.I condition
is false.
.RE

.sp
.ne 2
.mk
.na
\fB( \fIcondition\fR )\fR
.ad
.RS 17n
.rt
True if condition is true. The parentheses ( ) can be used to alter the
normal precedence and associativity. The parentheses are meaningful to the
shell and, therefore, must be quoted.
.RE

.sp
.LP
The algorithm for determining the precedence of the operators and the
return value that is generated is based on the number of arguments presented
to \fBtest\fR. (However, when using the \fB[.\|.\|.]\fR form, the right-bracket
final argument is not counted in this algorithm.)
.sp
.LP
In the following list,
.BR $1 ,
.BR $2 ,
.B $3
and
.B $4
represent
the arguments presented to
.B test
as a
.IR condition ,
.IR condition1 ,
or
.IR condition2 .
.sp
.ne 2
.mk
.na
.I 0 arguments:
.ad
.RS 16n
.rt
Exit false (1).
.RE

.sp
.ne 2
.mk
.na
.I 1 argument:
.ad
.RS 16n
.rt
Exit true (0) if
.B $1
is not null. Otherwise, exit false.
.RE

.sp
.ne 2
.mk
.na
.I 2 arguments:
.ad
.RS 16n
.rt
.RS +4
.TP
.ie t \(bu
.el o
If
.B $1
is
.BR ! ,
exit true if
.B $2
is null, false if
.B $2
is
not null.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B $1
is a unary primary, exit true if the unary test is true, false
if the unary test is false.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Otherwise, produce unspecified results.
.RE
.RE

.sp
.ne 2
.mk
.na
.I 3 arguments:
.ad
.RS 16n
.rt
.RS +4
.TP
.ie t \(bu
.el o
If
.B $2
is a binary primary, perform the binary test of
.B $1
and
.BR $3 .
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B $1
is
.BR ! ,
negate the two-argument test of
.B $2
and
.BR $3 .
.RE
.RS +4
.TP
.ie t \(bu
.el o
Otherwise, produce unspecified results.
.RE
.RE

.sp
.ne 2
.mk
.na
.I 4 arguments:
.ad
.RS 16n
.rt
.RS +4
.TP
.ie t \(bu
.el o
If
.B $1
is
.BR ! ,
negate the three-argument test of
.BR $2 ,
.BR $3 ,
and
.BR $4 .
.RE
.RS +4
.TP
.ie t \(bu
.el o
Otherwise, the results are unspecified.
.RE
.RE

.SH USAGE
.sp
.LP
Scripts should be careful when dealing with user-supplied input that could
be confused with primaries and operators. Unless the application writer
knows all the cases that produce input to the script, invocations like
\fBtest "$1" -a "$2"\fR should be written as \fBtest "$1" && test "$2"\fR to
avoid problems if a user supplied values such as
.B $1
set to
.B !
and
.B $2
set to the null string. That is, in cases where maximal portability
is of concern, replace
.B "test expr1 -a expr2"
with \fBtest expr1 && test
expr2\fR, and replace \fBtest expr1 -o expr2\fR with \fBtest expr1 || test
expr2\fR. But notice that, in
.BR test ,
.B -a
has
.BR higher
precedence than
.BR -o ,
while
.B &&
and
.B ||
have
.BR equal
precedence in the shell.
.sp
.LP
Parentheses or braces can be used in the shell command language to effect
grouping.
.sp
.LP
Parentheses must be escaped when using
.BR sh .
For example:
.sp
.in +2
.nf
test \e( expr1 -a expr2 \e) -o expr3
.fi
.in -2

.sp
.LP
This command is not always portable outside XSI-conformant systems. The
following form can be used instead:
.sp
.in +2
.nf
( test expr1 && test expr2 ) || test expr3
.fi
.in -2

.sp
.LP
The two commands:
.sp
.in +2
.nf
test "$1"
test ! "$1"
.fi
.in -2

.sp
.LP
could not be used reliably on some historical systems. Unexpected results
would occur if such a
.I string
condition were used and
.B $1
expanded
to
.BR ! ,
.BR ( ,
or a known unary primary. Better constructs are,
respectively,
.sp
.in +2
.nf
test -n "$1"
test -z "$1"
.fi
.in -2

.sp
.LP
Historical systems have also been unreliable given the common construct:
.sp
.in +2
.nf
test "$response" = "expected string"
.fi
.in -2

.sp
.LP
One of the following is a more reliable form:
.sp
.in +2
.nf
test "X$response" = "Xexpected string"
test "expected string" = "$response"
.fi
.in -2

.sp
.LP
The second form assumes that
.B "expected string"
could not be confused
with any unary primary. If
.B "expected string"
starts with
.BR \(mi ,
.BR ( ,
.B !
or even
.BR = ,
the first form should be used instead.
Using the preceding rules without the marked extensions, any of the three
comparison forms is reliable, given any input. (However, observe that the
strings are quoted in all cases.)
.sp
.LP
Because the string comparison binary primaries,
.B =
and
.BR != ,
have
a higher precedence than any unary primary in the >4 argument case,
unexpected results can occur if arguments are not properly prepared. For
example, in
.sp
.in +2
.nf
test -d $1 -o -d $2
.fi
.in -2

.sp
.LP
If
.B $1
evaluates to a possible directory name of
.BR = ,
the first
three arguments are considered a string comparison, which causes a syntax
error when the second
.B -d
is encountered. is encountered. One of the
following forms prevents this; the second is preferred:
.sp
.in +2
.nf
test \e( -d "$1" \e) -o \e( -d "$2" \e)
test -d "$1" || test -d "$2"
.fi
.in -2

.sp
.LP
Also in the >4 argument case:
.sp
.in +2
.nf
test "$1" = "bat" -a "$2" = "ball"
.fi
.in -2

.sp
.LP
Syntax errors occur if
.B $1
evaluates to
.B (
or
.BR ! .
One of the
following forms prevents this; the third is preferred:
.sp
.in +2
.nf
test "X$1" = "Xbat" -a "X$2" = "Xball"
test "$1" = "bat" && test "$2" = "ball"
test "X$1" = "Xbat" && test "X$2" = "Xball"
.fi
.in -2

.SH EXAMPLES
.sp
.LP
In the
.B if
command examples, three conditions are tested, and if all
three evaluate as true or successful, then their validities are written to
the screen. The three tests are:
.RS +4
.TP
.ie t \(bu
.el o
if a variable set to 1 is greater than 0,
.RE
.RS +4
.TP
.ie t \(bu
.el o
if a variable set to 2 is equal to 2, and
.RE
.RS +4
.TP
.ie t \(bu
.el o
if the word
.B root
is included in the text file
.BR /etc/passwd .
.RE
.SS "/usr/bin/test"
.LP
.B Example 1
Using /usr/bin/test
.sp
.LP
Perform a
.B mkdir
if a directory does not exist:

.sp
.in +2
.nf
test ! -d tempdir && mkdir tempdir
.fi
.in -2

.sp
.LP
Wait for a file to become non-readable:

.sp
.in +2
.nf
while test -r thefile
do
   sleep 30
done
echo'"thefile" is no longer readable'
.fi
.in -2

.sp
.LP
Perform a command if the argument is one of three strings (two variations),
using the open bracket version
.B [
of the
.B test
command:

.sp
.in +2
.nf
if [ "$1" = "pear" ] || [ "$1" = "grape" ] || [ "$1" = "apple" ]
then
    command
fi
case "$1" in
    pear|grape|apple) command;;
esac
.fi
.in -2

.LP
.B Example 2
Using /usr/bin/test for the -e option
.sp
.LP
If one really wants to use the
.B -e
option in
.BR sh ,
use
.BR /usr/bin/test ,
as in the following:

.sp
.in +2
.nf
if [ ! -h $PKG_INSTALL_ROOT$rLink ] && /usr/bin/test -e
$PKG_INSTALL_ROOT/usr/bin/$rFile ; then
    ln -s $rFile $PKG_INSTALL_ROOT$rLink
fi
.fi
.in -2

.SS "The test built-in"
.sp
.LP
The two forms of the
.B test
built-in follow the Bourne shell's \fBif\fR
example.
.LP
.B Example 3
Using the sh built-in
.sp
.in +2
.nf
ZERO=0 ONE=1 TWO=2 ROOT=root

if  [ $ONE \fB-gt\fR $ZERO ]

[ $TWO \fB-eq\fR 2 ]

grep $ROOT  /etc/passwd >&1 > /dev/null  \fI# discard output\fR

then

    echo "$ONE is greater than 0, $TWO equals 2, and $ROOT is" \e
          "a user-name in the password file"

else

    echo "At least one of the three test conditions is false"
fi
.fi
.in -2

.LP
.B Example 4
Using the test built-in
.sp
.LP
Examples of the
.B test
built-in:

.sp
.in +2
.nf
test \(gagrep $ROOT /etc/passwd >&1 /dev/null\(ga   \fI# discard output\fR

echo $?    \fI# test for success\fR
[ \(gagrep nosuchname /etc/passwd >&1 /dev/null\(ga ]

echo $?    \fI# test for failure\fR
.fi
.in -2

.SS "csh"
.LP
.B Example 5
Using the csh built-in
.sp
.in +2
.nf
@ ZERO = 0; @ ONE = 1; @ TWO = 2;  set ROOT = root
grep $ROOT  /etc/passwd >&1 /dev/null  \fI# discard output\fR
    \fI# $status must be tested for immediately following grep\fR
if ( "$status" == "0" && $ONE > $ZERO && $TWO == 2 ) then
       echo "$ONE is greater than 0, $TWO equals 2, and $ROOT is" \e
             "a user-name in the password file"
 endif
.fi
.in -2

.SS "ksh"
.LP
.B Example 6
Using the ksh/ksh93 built-in
.sp
.in +2
.nf
ZERO=0 ONE=1 TWO=$((ONE+ONE)) ROOT=root
if  ((ONE > ZERO))            \fI#  arithmetical comparison\fR
 [[ $TWO = 2 ]]                \fI#  string comparison\fR
 [ \(gagrep $ROOT  /etc/passwd >&1 /dev/null\(ga ] \fI# discard output\fR
then
     echo "$ONE is greater than 0, $TWO equals 2, and $ROOT is" \e
             "a user-name in the password file"

else
     echo "At least one of the three test conditions is false"
fi
.fi
.in -2

.SH ENVIRONMENT VARIABLES
.sp
.LP
See
.BR environ (5)
for descriptions of the following environment
variables that affect the execution of
.BR test :
.BR LANG ,
.BR LC_ALL ,
.BR LC_CTYPE ,
.BR LC_MESSAGES ,
and
.BR NLSPATH .
.SH EXIT STATUS
.sp
.LP
The following exit values are returned:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 6n
.rt
.I condition
evaluated to true.
.RE

.sp
.ne 2
.mk
.na
.B 1
.ad
.RS 6n
.rt
.I condition
evaluated to false or
.I condition
was missing.
.RE

.sp
.ne 2
.mk
.na
.B >1
.ad
.RS 6n
.rt
An error occurred.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.SS "/usr/bin/test, csh, ksh, sh"
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
_
Interface StabilityCommitted
_
StandardSee \fBstandards\fR(5).
.TE

.SS "ksh93"
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
_
Interface StabilityUncommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR csh (1),
.BR ksh (1),
.BR ksh93 (1),
.BR sh (1),
.BR test (1B),
.BR attributes (5),
.BR environ (5),
.BR largefile (5),
.BR standards (5)
.SH NOTES
.sp
.LP
The \fBnot\(mia\(midirectory\fR alternative to the \fB-f\fR option is a
transition aid for
.B BSD
applications and may not be supported in future
releases.
.SS "XPG4 \fBsh\fR, \fBksh\fR, \fBksh93\fR"
.sp
.LP
Use arithmetic expressions such as
.sp
.in +2
.nf
$(( x > 3.1 )) #
.fi
.in -2
.sp

.sp
.LP
instead of
.sp
.in +2
.nf
$ /usr/bin/test "$x" -gt 3.1 # )
.fi
.in -2
.sp

.sp
.LP
when comparing two floating-point variables or a constant and a
floating-point variable to prevent rounding errors (caused by the base16 to
base10 transformation) to affect the result. Additionally the built-in
arithmetic support in XPG4
.BR sh ,
.B ksh
and
.B ksh93
is
significantly faster because it does not require the explicit transformation
to strings for each comparison.
