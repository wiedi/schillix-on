'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH bfs 1 "20 May 1996" "SunOS 5.11" "User Commands"
.SH NAME
bfs \- big file scanner
.SH SYNOPSIS
.LP
.nf
\fB/usr/bin/bfs\fR [\fB-\fR] \fIfilename\fR
.fi

.SH DESCRIPTION
.sp
.LP
The \fBbfs\fR command is (almost) like
.BR ed (1)
except that it is
read-only and processes much larger files. Files can be up to 1024K bytes
and 32K lines, with up to 512 characters, including new-line, per line (255
for 16-bit machines). \fBbfs\fR is usually more efficient than
.BR ed (1)
for scanning a file, since the file is not copied to a buffer. It is most
useful for identifying sections of a large file where
.BR csplit (1)
can be
used to divide it into more manageable pieces for editing.
.sp
.LP
Normally, the size of the file being scanned is printed, as is the size of
any file written with the
.B w
(write) command. The optional \fB\(mi\fR
suppresses printing of sizes. Input is prompted with
.B *
if
.B P
and
a carriage return are typed, as in
.BR ed (1).
Prompting can be turned off
again by inputting another
.B P
and carriage return. Note that messages
are given in response to errors if prompting is turned on.
.sp
.LP
All address expressions described under
.BR ed (1)
are supported. In
addition, regular expressions may be surrounded with two symbols besides
\fB/\fR and
.BR ? :
.sp
.ne 2
.mk
.na
.B >
.ad
.RS 5n
.rt
indicates downward search without wrap-around, and
.RE

.sp
.ne 2
.mk
.na
.B <
.ad
.RS 5n
.rt
indicates upward search without wrap-around.
.RE

.sp
.LP
There is a slight difference in mark names; that is, only the letters
\fBa\fR through \fBz\fR may be used, and all 26 marks are remembered.
.SS "bfs Commands"
.sp
.LP
The
.BR e ,
.BR g ,
.BR v ,
.BR k ,
.BR p ,
.BR q ,
.BR w ,
.BR = ,
.BR ! ,
and null commands operate as described under
.BR ed (1).
Commands
such as \fB\(mi\(mi\(mi\fR, \fB+++\(mi\fR,
.BR +++= ,
.BR \(mi12 ,
and
\fB+4p\fR are accepted. Note that \fB1,10p\fR and \fB1,10\fR will both print
the first ten lines. The \fBf\fR command only prints the name of the file
being scanned; there is no
.I remembered
file name. The
.B " w"
command
is independent of output diversion, truncation, or crunching (see the
\fBxo\fR,\fB xt\fR, and\fB xc\fR commands, below). The following additional
commands are available:
.sp
.ne 2
.mk
.na
\fBxf\fI file\fR
.ad
.sp .6
.RS 4n
Further commands are taken from the named
.BR file .
When an end-of-file
is reached, an interrupt signal is received or an error occurs, reading
resumes with the file containing the
.BR xf .
The \fBxf\fR commands may be
nested to a depth of 10.
.RE

.sp
.ne 2
.mk
.na
.B xn
.ad
.sp .6
.RS 4n
List the marks currently in use (marks are set by the
.B k
command).
.RE

.sp
.ne 2
.mk
.na
\fBxo\fI [\|file\|]\fR
.ad
.sp .6
.RS 4n
Further output from the
.B p
and null commands is diverted to the named
\fBfile\fR, which, if necessary, is created mode 666 (readable and writable
by everyone), unless your
.B umask
setting (see
.BR umask (1))
dictates
otherwise. If \fBfile\fR is missing, output is diverted to the standard
output. Note that each diversion causes truncation or creation of the
file.
.RE

.sp
.ne 2
.mk
.na
.BI : " label"
.ad
.sp .6
.RS 4n
This positions a
.I label
in a command file. The
.I label
is
terminated by new-line, and blanks between the
.B :
(colon) and the start
of the
.I label
are ignored. This command may also be used to insert
comments into a command file, since labels need not be referenced.
.RE

.sp
.ne 2
.mk
.na
\fB( \&.\fR , \fB\&.\fR )\fBxb\fR/\fIregular
expression\fR/\fIlabel\fR
.ad
.sp .6
.RS 4n
A jump (either upward or downward) is made to
.I label
if the command
succeeds. It fails under any of the following conditions:
.RS +4
.TP
1.
Either address is not between
.B 1
and
.BR $ .
.RE
.RS +4
.TP
2.
The second address is less than the first.
.RE
.RS +4
.TP
3.
The regular expression does not match at least one line in the specified
range, including the first and last lines.
.RE
On success, \fB\&.\fR (dot) is set to the line matched and a jump is made
to
.IR label .
This command is the only one that does not issue an error
message on bad addresses, so it may be used to test whether addresses are
bad before other commands are executed. Note that the command, \fBxb/^/
label\fR, is an unconditional jump.
.sp
The
.B xb
command is allowed only if it is read from someplace other
than a terminal. If it is read from a pipe, only a downward jump is
possible.
.RE

.sp
.ne 2
.mk
.na
.BI xt " number"
.ad
.sp .6
.RS 4n
Output from the
.B p
and null commands is truncated to, at most,
\fInumber\fR characters. The initial number is
.BR 255 .
.RE

.sp
.ne 2
.mk
.na
\fBxv\fR[\fIdigit\fR]\|[\fIspaces\fR]\|[\fIvalue\fR]\fR
.ad
.sp .6
.RS 4n
The variable name is the specified
.I digit
following the
.BR xv .
The
commands
.B xv5100
or
.B "xv5 100"
both assign the value
.B 100
to
the variable
.BR 5 .
The command
.B xv61,100p
assigns the value
\fB1,100p\fR to the variable
.BR 6 .
To reference a variable, put a \fB%\fR
in front of the variable name. For example, using the above assignments for
variables
.B 5
and
.BR 6 :
.sp
.in +2
.nf
1,%5p
1,%5
%6
.fi
.in -2
.sp

will all print the first 100 lines.
.sp
.B g/%5/p
.sp
would globally search for the characters
.B 100
and print each line
containing a match. To escape the special meaning of
.BR % ,
a \fB\e\fR
must precede it.
.sp
\fBg/".*\e%\fR[cds]\fB/p\fR
.sp
could be used to match and list %c, %d, or %s formats (for example,
"printf"-like statements) of characters, decimal integers, or strings.
Another feature of the
.B xv
command is that the first line of output
from a
.B UNIX
system command can be stored into a variable. The only
requirement is that the first character of
.I value
be an
.BR ! .
For
example:
.sp
.in +2
.nf
\fB\&.w junk
xv5!cat junk
!rm junk
!echo "%5"
xv6!expr %6 + 1\fR
.fi
.in -2
.sp

would put the current line into variable
.BR 35 ,
print it, and increment
the variable
.B 36
by one. To escape the special meaning of
.B !
as
the first character of
.IR value ,
precede it with a \fB\e\fR\&.
.sp
\fBxv7\e!date\fR
.sp
stores the value
.B !date
into variable
.BR 7 .
.RE

.sp
.ne 2
.mk
.na
.BI xbz " label"
.ad
.br
.na
.BI xbn " label"
.ad
.sp .6
.RS 4n
These two commands will test the last saved
.I "return code"
from the
execution of a
.B UNIX
system command (\fB!command\fR) or nonzero
value, respectively, to the specified label. The two examples below both
search for the next five lines containing the string
.BR size :
.sp
.ne 2
.mk
.na
.B Example 1:
.ad
.RS 14n
.rt
.sp
.in +2
.nf
\fBxv55
: l
/size/
xv5!expr %5 \(mi 1
!if 0%5 != 0 exit 2
xbn l\fR
.fi
.in -2
.sp

.RE

.sp
.ne 2
.mk
.na
.B Example 2:
.ad
.RS 14n
.rt
.sp
.in +2
.nf
\fBxv45
: l
/size/
xv4!expr %4 \(mi 1
!if 0%4 = 0 exit 2
xbz l\fR
.fi
.in -2
.sp

.RE

.RE

.sp
.ne 2
.mk
.na
\fBxc\fR [\fBswitch\fR]\fR
.ad
.sp .6
.RS 4n
If
.B switch
is
.BR 1 ,
output from the
.B p
and null commands is
crunched; if
.B switch
is
.BR 0 ,
it is not. Without an argument,
\fBxc\fR reverses
.BR switch .
Initially,
.B switch
is set for no
crunching. Crunched output has strings of tabs and blanks reduced to one
blank and blank lines suppressed.
.RE

.SH OPERANDS
.sp
.LP
The following operand is supported:
.sp
.ne 2
.mk
.na
\fIfilename\fR
.ad
.RS 12n
.rt
Any file up to 1024K bytes and 32K lines, with up to 512 characters,
including new-line, per line (255 for 16-bit machines). \fIfilename\fR can
be a section of a larger file which has been divided into more manageable
sections for editing by the use of
.BR csplit (1).
.RE

.SH EXIT STATUS
.sp
.LP
The following exit values are returned:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 6n
.rt
Successful completion without any file or command errors.
.RE

.sp
.ne 2
.mk
.na
.B >0
.ad
.RS 6n
.rt
An error occurred.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWesu
.TE

.SH SEE ALSO
.sp
.LP
.BR csplit (1),
.BR ed (1),
.BR umask (1),
.BR attributes (5)
.SH DIAGNOSTICS
.sp
.LP
Message is
.B ?
for errors in commands, if prompting is turned off.
Self-explanatory error messages are displayed when prompting is on.
