'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited All Rights Reserved
.\" Portions Copyright (c) 1982-2007 AT&T Knowledge Ventures
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH jobs 1 "2 Nov 2007" "SunOS 5.11" "User Commands"
.SH NAME
jobs, fg, bg, stop, notify \- control process execution
.SH SYNOPSIS
.SS "sh"
.LP
.nf
\fBjobs\fR [\fB-p\fR | \fB-l\fR] [% \fIjob_id\fR.\|.\|.]
.fi

.LP
.nf
\fBjobs\fR \fB-x\fR \fIcommand\fR [\fIarguments\fR]
.fi

.LP
.nf
\fBfg\fR [% \fIjob_id\fR.\|.\|.]
.fi

.LP
.nf
\fBbg\fR [% \fIjob_id\fR.\|.\|.]
.fi

.LP
.nf
\fBstop\fR % \fIjob_id\fR.\|.\|.
.fi

.LP
.nf
\fBstop\fR \fIpid\fR.\|.\|.
.fi

.SS "csh"
.LP
.nf
\fBjobs\fR [\fB-l\fR]
.fi

.LP
.nf
\fBfg\fR [% \fIjob_id\fR]
.fi

.LP
.nf
\fBbg\fR [% \fIjob_id\fR].\|.\|.
.fi

.LP
.nf
\fBnotify\fR [% \fIjob_id\fR].\|.\|.
.fi

.LP
.nf
\fBstop\fR % \fIjob_id\fR.\|.\|.
.fi

.LP
.nf
\fBstop\fR \fIpid\fR.\|.\|.
.fi

.SS "ksh"
.LP
.nf
\fBjobs\fR [\fB-lnp\fR] [% \fIjob_id\fR.\|.\|.]
.fi

.LP
.nf
\fBfg\fR [% \fIjob_id\fR.\|.\|.]
.fi

.LP
.nf
\fBbg\fR [% \fIjob_id\fR.\|.\|.]
.fi

.LP
.nf
\fBstop\fR % \fIjob_id\fR.\|.\|.
.fi

.LP
.nf
\fBstop\fR \fIpid\fR.\|.\|.
.fi

.SS "ksh93"
.LP
.nf
\fBjobs\fR [\fB-lnp\fR] [\fIjob_id\fR.\|.\|.]
.fi

.LP
.nf
\fBfg\fR [\fIjob_id\fR.\|.\|.]
.fi

.LP
.nf
\fBbg\fR [\fIjob_id\fR.\|.\|.]
.fi

.SH DESCRIPTION
.SS "sh"
.sp
.LP
When Job Control is enabled, the Bourne shell built-in
.B jobs
reports
all jobs that are stopped or executing in the background. If
\fB%\fIjob_id\fR is omitted, all jobs that are stopped or running in the
background is reported. The following options modify or enhance the output
of
.BR jobs :
.sp
.ne 2
.mk
.na
.B -l
.ad
.RS 6n
.rt
Reports the process group
.B ID
and working directory of the jobs.
.RE

.sp
.ne 2
.mk
.na
.B -p
.ad
.RS 6n
.rt
Reports only the process group
.B ID
of the jobs.
.RE

.sp
.ne 2
.mk
.na
.B -x
.ad
.RS 6n
.rt
Replaces any
.I job_id
found in
.I command
or
.I arguments
with
the corresponding process group
.BR ID ,
and then executes
.IR command
passing it
.IR arguments .
.RE

.sp
.LP
When the shell is invoked as
.BR jsh ,
Job Control is enabled in addition
to all of the functionality described previously for
.BR sh .
Typically Job
Control is enabled for the interactive shell only. Non-interactive shells
typically do not benefit from the added functionality of Job Control.
.sp
.LP
With Job Control enabled every command or pipeline the user enters at the
terminal is called a
.IR job_id .
All jobs exist in one of the following
states: foreground, background or stopped. These terms are defined as
follows:
.RS +4
.TP
1.
A job in the
.B foreground
has read and write access to the controlling
terminal.
.RE
.RS +4
.TP
2.
A job in the
.B background
is denied read access and has conditional
write access to the controlling terminal (see
.BR stty (1))
.RE
.RS +4
.TP
3.
A
.B stopped
job is a job that has been placed in a suspended state,
usually as a result of a
.B SIGTSTP
signal (see
.BR signal.h (3HEAD)).
.RE
.sp
.LP
Every job that the shell starts is assigned a positive integer, called a
.I job_id number
which is tracked by the shell and are used as an
identifier to indicate a specific job. Additionally, the shell keeps track
of the
.B current
and
.B previous
jobs. The
.B "current job"
is the
most recent job to be started or restarted. The
.B "previous job"
is the
first non-current job.
.sp
.LP
The acceptable syntax for a Job Identifier is of the form:
.sp
.LP
\fB%\fIjob_id\fR
.sp
.LP
where
.I job_id
can be specified in any of the following formats:
.sp
.ne 2
.mk
.na
.B %
or
.BR +
.ad
.RS 13n
.rt
for the current job
.RE

.sp
.ne 2
.mk
.na
\fB\(mi\fR
.ad
.RS 13n
.rt
for the previous job
.RE

.sp
.ne 2
.mk
.na
\fB?\fI<string>\fR
.ad
.RS 13n
.rt
specify the job for which the command line uniquely contains
.IR string .
.RE

.sp
.ne 2
.mk
.na
.I n
.ad
.RS 13n
.rt
for job number
.IR n ,
where
.I n
is a job number
.RE

.sp
.ne 2
.mk
.na
.I pref
.ad
.RS 13n
.rt
where
.I pref
is a unique prefix of the command name (for example, if
the command \fBls \(mil name\fR were running in the background, it could be
referred to as
.BR %ls );
.I pref
cannot contain blanks unless it is
quoted.
.RE

.sp
.LP
When Job Control is enabled,
.B fg
resumes the execution of a stopped
job in the foreground, also moves an executing background job into the
foreground. If \fB%\fIjob_id\fR is omitted the current job is assumed.
.sp
.LP
When Job Control is enabled,
.B bg
resumes the execution of a stopped
job in the background. If \fB%\fIjob_id\fR is omitted the current job is
assumed.
.sp
.LP
.B stop
stops the execution of a background job(s) by using its
.IR job_id ,
or of any process by using its
.IR pid ;
see
.BR ps (1).
.SS "csh"
.sp
.LP
The C shell built-in,
.BR jobs ,
without an argument, lists the active
jobs under job control.
.sp
.ne 2
.mk
.na
.B -l
.ad
.RS 6n
.rt
List process \fBID\fRs, in addition to the normal information.
.RE

.sp
.LP
The shell associates a numbered
.I job_id
with each command sequence to
keep track of those commands that are running in the background or have been
stopped with
.B TSTP
signals (typically Control-Z). When a command or
command sequence (semicolon-separated list) is started in the background
using the
.B &
metacharacter, the shell displays a line with the job
number in brackets and a list of associated process numbers:
.sp
.LP
.B [1] 1234
.sp
.LP
To see the current list of jobs, use the
.B jobs
built-in command. The
job most recently stopped (or put into the background if none are stopped)
is referred to as the
.B current
job and is indicated with a `\fB+\fR'.
The previous job is indicated with a `\fB\(mi\fR\&'; when the current job is
terminated or moved to the foreground, this job takes its place (becomes the
new current job).
.sp
.LP
To manipulate jobs, refer to the
.BR bg ,
.BR fg ,
.BR kill ,
.BR stop ,
and
.B %
built-in commands.
.sp
.LP
A reference to a job begins with a `\fB%\fR'. By itself, the percent sign
refers to the current job.
.sp
.ne 2
.mk
.na
.B "% %+" %%
.ad
.RS 12n
.rt
The current job.
.RE

.sp
.ne 2
.mk
.na
\fB%\(mi\fR
.ad
.RS 12n
.rt
The previous job.
.RE

.sp
.ne 2
.mk
.na
\fB%\fIj\fR
.ad
.RS 12n
.rt
Refer to job \fIj\fR as in: `\fBkill -9\fR \fB%\fIj\fR'. \fIj\fR
can be a job number, or a string that uniquely specifies the command line by
which it was started; `\fBfg %vi\fR' might bring a stopped
.B vi
job to
the foreground, for instance.
.RE

.sp
.ne 2
.mk
.na
\fB%?\fIstring\fR
.ad
.RS 12n
.rt
Specify the job for which the command line uniquely contains
.IR string .
.RE

.sp
.LP
A job running in the background stops when it attempts to read from the
terminal. Background jobs can normally produce output, but this can be
suppressed using the `\fBstty tostop\fR' command.
.sp
.LP
.B fg
brings the current or specified
.I job_id
into the
foreground.
.sp
.LP
.B bg
runs the current or specified jobs in the background.
.sp
.LP
.B stop
stops the execution of a background job(s) by using its
.IR job_id ,
or of any process by using its
.IR pid ;
see
.BR ps (1).
.sp
.LP
.B notify
notifies the user asynchronously when the status of the
current job or specified jobs changes.
.SS "ksh"
.sp
.LP
.B jobs
displays the status of the jobs that were started in the current
shell environment. When
.B jobs
reports the termination status of a job,
the shell removes its process
.B ID
from the list of those known in the
current shell execution environment.
.sp
.LP
.I job_id
specifies the jobs for which the status is to be displayed. If
no
.I job_id
is specified, the status information for all jobs are
displayed.
.sp
.LP
The following options modify or enhance the output of
.BR jobs :
.sp
.ne 2
.mk
.na
.B -l
.ad
.RS 6n
.rt
(The letter ell.) Provides more information about each job listed. This
information includes the job number, current job, process group
.BR ID ,
state and the command that formed the job.
.RE

.sp
.ne 2
.mk
.na
.B -n
.ad
.RS 6n
.rt
Displays only jobs that have stopped or exited since last notified.
.RE

.sp
.ne 2
.mk
.na
.B -p
.ad
.RS 6n
.rt
Displays only the process \fBID\fRs for the process group leaders of the
selected jobs.
.RE

.sp
.LP
By default,
.B jobs
displays the status of all the stopped jobs, running
background jobs, and all jobs whose status has changed and have not been
reported by the shell.
.sp
.LP
If the
.B monitor
option of the
.B set
command is turned on, an
interactive shell associates a
.B job
with each pipeline. It keeps a
table of current jobs, printed by the
.B jobs
command, and assigns them
small integer numbers. When a job is started asynchronously with
.BR & ,
the shell prints a line which looks like:
.sp
.LP
.B [1] 1234
.sp
.LP
indicating that the job, which was started asynchronously, was job number
.B 1
and had one (top-level) process, whose process id was
.BR 1234 .
.sp
.LP
If you are running a job and wish to do something else you can hit the key
^Z (Control-Z) which sends a
.B STOP
signal to the current job. The shell
then normally indicates that the job has been "\fBStopped\fR" (see
.B OUTPUT
below), and print another prompt. You can then manipulate the
state of this job, putting it in the background with the
.B bg
command,
or run some other commands and then eventually bring the job back into the
foreground with the foreground command
.BR fg .
A ^Z takes effect
immediately and is like an interrupt, in that pending output and unread
input are discarded when it is typed.
.sp
.LP
There are several ways to refer to jobs in the shell. A job can be referred
to by the process id of any process of the job or by one of the following:
.sp
.ne 2
.mk
.na
\fB%\fInumber\fR
.ad
.RS 12n
.rt
The job with the specified number.
.RE

.sp
.ne 2
.mk
.na
\fB%\fIstring\fR
.ad
.RS 12n
.rt
Any job whose command line begins with
.IR string ;
works only in the
interactive mode when the history file is active.
.RE

.sp
.ne 2
.mk
.na
\fB%?\fIstring\fR
.ad
.RS 12n
.rt
Any job whose command line contains
.IR string ;
works only in the
interactive mode when the history file is active.
.RE

.sp
.ne 2
.mk
.na
.B %%
.ad
.RS 12n
.rt
Current job.
.RE

.sp
.ne 2
.mk
.na
.B %+
.ad
.RS 12n
.rt
Equivalent to
.BR %% .
.RE

.sp
.ne 2
.mk
.na
\fB%\(mi\fR
.ad
.RS 12n
.rt
Previous job.
.RE

.sp
.LP
The shell learns immediately whenever a process changes state. It normally
informs you whenever a job becomes blocked so that no further progress is
possible, but only just before it prints a prompt. This is done so that it
does not otherwise disturb your work. When the monitor mode is on, each
background job that completes triggers any trap set for
.BR CHLD .
When you
try to leave the shell while jobs are running or stopped, you are warned
that `You have stopped (running) jobs.' You can use the
.B jobs
command
to see what they are. If you do this or immediately try to exit again, the
shell does not warn you a second time, and the stopped jobs are
terminated.
.sp
.LP
.B fg
moves a background job from the current environment into the
foreground. Using
.B fg
to place a job in the foreground removes its
process
.B ID
from the list of those known in the current shell execution
environment. The
.B fg
command is available only on systems that support
job control. If
.I job_id
is not specified, the current job is brought
into the foreground.
.sp
.LP
.B bg
resumes suspended jobs from the current environment by running
them as background jobs. If the job specified by
.I job_id
is already a
running background job,
.B bg
has no effect and exits successfully. Using
.B bg
to place a job into the background causes its process
.B ID
to
become `known in the current shell execution environment, as if it had been
started as an asynchronous list. The
.B bg
command is available only on
systems that support job control. If
.I job_id
is not specified, the
current job is placed in the background.
.sp
.LP
.B stop
stops the execution of a background job(s) by using its
.IR job_id ,
or of any process by using its
.IR pid .
See
.BR ps (1).
.SS "ksh93"
.sp
.LP
.B jobs
displays information about specified jobs that were started by
the current shell environment on standard output. The information contains
the job number enclosed in \fB[.\|.\|.]\fR, the status, and the command line
that started the job.
.sp
.LP
If
.I job_id
is omitted,
.B jobs
displays the status of all stopped
jobs, background jobs, and all jobs whose status has changed since last
reported by the shell.
.sp
.LP
When
.B jobs
reports the termination status of a job, the shell removes
the job from the list of known jobs in the current shell environment.
.sp
.LP
The following options modify or enhances the output of
.BR jobs :
.sp
.ne 2
.mk
.na
.B -l
.ad
.RS 6n
.rt
Displays process IDs after the job number in addition to the usual
information.
.RE

.sp
.ne 2
.mk
.na
.B -n
.ad
.RS 6n
.rt
Displays only the jobs whose status has changed since the last prompt was
displayed.
.RE

.sp
.ne 2
.mk
.na
.B -p
.ad
.RS 6n
.rt
Displays the process group leader IDs for the specified jobs.
.RE

.sp
.LP
.I job_id
can be specified to
.BR jobs ,
.BR fg ,
and
.B bg
as one
of the following:
.sp
.ne 2
.mk
.na
.I number
.ad
.RS 12n
.rt
The process id of
.BR job .
.RE

.sp
.ne 2
.mk
.na
\fB-\fInumber\fR
.ad
.RS 12n
.rt
The process group id of
.BR job .
.RE

.sp
.ne 2
.mk
.na
\fB%\fInumber\fR
.ad
.RS 12n
.rt
The job number.
.RE

.sp
.ne 2
.mk
.na
\fB%\fIstring\fR
.ad
.RS 12n
.rt
The job whose name begins with
.IR string .
.RE

.sp
.ne 2
.mk
.na
\fB%?\fIstring\fR
.ad
.RS 12n
.rt
The job whose name contains
.IR string .
.RE

.sp
.ne 2
.mk
.na
.B %+
.ad
.br
.na
.B %%
.ad
.RS 12n
.rt
The current job.
.RE

.sp
.ne 2
.mk
.na
.B %-
.ad
.RS 12n
.rt
The previous job.
.RE

.sp
.LP
.B fg
places the specified jobs into the foreground in sequence and
sends a
.B CONT
signal to start each running. If
.I job_id
is omitted,
the most recently started or stopped background job is moved to the
foreground.
.sp
.LP
.B bg
places the specified jobs into the background and sends a
.B CONT
signal to start them running. If
.I job_id
is omitted, the
most recently started or stopped background job is resumed or continued in
the background.
.SH OUTPUT
.sp
.LP
If the
.B -p
option is specified, the output consists of one line for
each process
.BR ID :
.sp
.LP
\fB"%d\en",\fR \fI"process ID"\fR
.sp
.LP
Otherwise, if the
.B -l
option is not specified, the output is a series
of lines of the form:
.sp
.LP
\fB"[%d] %c %s %s\en"\fR, \fIjob-number\fR, \fIcurrent\fR, \fIstate\fR,
.I command
.sp
.LP
where the fields are as follows:
.sp
.ne 2
.mk
.na
.I current
.ad
.RS 14n
.rt
The character
.B +
identifies the job that would be used as a default
for the \fBfg\fR or \fBbg\fR commands. This job can also be specified using
the
.I job_id
.B %+
or
.B %%
\fB\&.\fR The character \fB\(mi\fR
identifies the job that would become the default if the current default job
were to exit; this job can also be specified using the \fIjob_id\fR
\fB%\(mi\fR \fB\&.\fR For other jobs, this field is a space character. At
most, one job can be identified with
.B +
and at most one job can be
identified with \fB\(mi\fR\&. If there is any suspended job, then the
current job is a suspended job. If there are at least two suspended jobs,
then the previous job is also a suspended job.
.RE

.sp
.ne 2
.mk
.na
.I job-number
.ad
.RS 14n
.rt
A number that can be used to identify the process group to the
.BR wait ,
.BR fg ,
.B bg,
and
.B kill
utilities. Using these utilities, the job
can be identified by prefixing the job number with
.BR % .
.RE

.sp
.ne 2
.mk
.na
.I state
.ad
.RS 14n
.rt
One of the following strings in the POSIX Locale:
.sp
.ne 2
.mk
.na
.B Running
.ad
.RS 20n
.rt
Indicates that the job has not been suspended by a signal and has not
exited.
.RE

.sp
.ne 2
.mk
.na
.B Done
.ad
.RS 20n
.rt
Indicates that the job completed and returned exit status zero.
.RE

.sp
.ne 2
.mk
.na
\fBDone\fR(\fIcode\fR)\fR
.ad
.RS 20n
.rt
Indicates that the job completed normally and that it exited with the
specified
.B non-zero
exit status,
.IR code ,
expressed as a decimal
number.
.RE

.sp
.ne 2
.mk
.na
.B Stopped
.ad
.RS 20n
.rt
Indicates that the job was stopped.
.RE

.sp
.ne 2
.mk
.na
.B Stopped(SIGTSTP)
.ad
.RS 20n
.rt
Indicates that the job was suspended by the
.B SIGTSTP
signal.
.RE

.sp
.ne 2
.mk
.na
.B Stopped(SIGSTOP)
.ad
.RS 20n
.rt
Indicates that the job was suspended by the
.B SIGSTOP
signal.
.RE

.sp
.ne 2
.mk
.na
.B Stopped(SIGTTIN)
.ad
.RS 20n
.rt
Indicates that the job was suspended by the
.B SIGTTIN
signal.
.RE

.sp
.ne 2
.mk
.na
.B Stopped(SIGTTOU)
.ad
.RS 20n
.rt
Indicates that the job was suspended by the
.B SIGTTOU
signal.
.RE

The implementation can substitute the string
.B Suspended
in place of
.BR Stopped .
If the job was terminated by a signal, the format of
.B state
is unspecified, but it is visibly distinct from all of the other
.B state
formats shown here and indicates the name or description of the
signal causing the termination.
.RE

.sp
.ne 2
.mk
.na
.I command
.ad
.RS 14n
.rt
The associated command that was specified to the shell.
.RE

.sp
.LP
If the
.B -l
option is specified, a field containing the process group
.B ID
is inserted before the
.B state
field. Also, more processes in a
process group can be output on separate lines, using only the process
.B ID
and
.B command
fields.
.SH ENVIRONMENT VARIABLES
.sp
.LP
See
.BR environ (5)
for descriptions of the following environment
variables that affect the execution of
.BR jobs ,
.BR fg ,
and
.BR bg :
.BR LANG ,
.BR LC_ALL ,
.BR LC_CTYPE ,
.BR LC_MESSAGES ,
and
.BR NLSPATH .
.SH EXIT STATUS
.SS "sh, csh, ksh"
.sp
.LP
The following exit values are returned for
.BR jobs ,
.BR fg ,
and
.BR bg :
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 6n
.rt
Successful completion.
.RE

.sp
.ne 2
.mk
.na
.B >0
.ad
.RS 6n
.rt
An error occurred.
.RE

.SS "ksh93"
.sp
.LP
The following exit values are returned for
.BR jobs :
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 6n
.rt
The information for each job is written to standard output.
.RE

.sp
.ne 2
.mk
.na
.B >0
.ad
.RS 6n
.rt
One or more jobs does not exist.
.RE

.sp
.LP
The following exit values are returned for
.BR fg :
.sp
.ne 2
.mk
.na
.B exit status of last job
.ad
.RS 27n
.rt
One or more jobs has been brought into the foreground.
.RE

.sp
.ne 2
.mk
.na
.B non-zero
.ad
.RS 27n
.rt
One or more jobs does not exist or has completed.
.RE

.sp
.LP
The following exit values are returned for
.BR bg :
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 6n
.rt
All background jobs are started.
.RE

.sp
.ne 2
.mk
.na
.B >0
.ad
.RS 6n
.rt
One more jobs does not exist or there are no background jobs.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.SS "csh, sh, ksh"
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
_
Interface StabilityCommitted
_
StandardSee \fBstandards\fR(5).
.TE

.SS "ksh93"
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
_
Interface StabilityUncommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR csh (1),
.BR kill (1),
.BR ksh (1),
.BR ksh93 (1),
.BR ps (1),
.BR sh (1),
.BR stop (1),
.BR shell_builtins (1),
.BR stty (1),
.BR wait (1),
.BR signal.h (3HEAD),
.BR attributes (5),
.BR environ (5),
.BR standards (5)
