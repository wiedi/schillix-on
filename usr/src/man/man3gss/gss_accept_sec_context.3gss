'\" te
.\" Copyright (C) 2006, Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH gss_accept_sec_context 3GSS "22 May 2006" "SunOS 5.11" "Generic Security Services API Library Functions"
.SH NAME
gss_accept_sec_context \- accept a security context initiated by a peer
application
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lgss\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <gssapi/gssapi.h>

\fBOM_uint32\fR \fBgss_accept_sec_context\fR(\fBOM_uint32 *\fIminor_status\fR,
     \fBgss_ctx_id_t *\fIcontext_handle\fR,
     \fBconst gss_cred_id_t\fR \fIacceptor_cred_handle\fR,
     \fBconst gss_buffer_t\fR \fIinput_token\fR,
     \fBconst gss_channel_bindings_t\fR \fIinput_chan_bindings\fR,
     \fBconst gss_name_t *\fR \fIsrc_name\fR, \fBgss_OID *\fR \fImech_type\fR,
     \fBgss_buffer_t\fR \fIoutput_token\fR, \fBOM_uint32 *\fIret_flags\fR,
     \fBOM_uint32 *\fR \fItime_rec\fR, \fBgss_cred_id_t *\fIdelegated_cred_handle\fR);
.fi

.SH PARAMETERS
.sp
.LP
The parameter descriptions for
.B gss_accept_sec_context()
follow:
.sp
.ne 2
.mk
.na
.I minor_status
.ad
.sp .6
.RS 4n
The status code returned by the underlying mechanism.
.RE

.sp
.ne 2
.mk
.na
.I context_handle
.ad
.sp .6
.RS 4n
The context handle to return to the initiator. This should be set to
\fBGSS_C_NO_CONTEXT\fR before the loop begins.
.RE

.sp
.ne 2
.mk
.na
.I acceptor_cred_handle
.ad
.sp .6
.RS 4n
The handle for the credentials acquired by the acceptor, typically through
.BR gss_acquire_cred() .
It may be initialized to
.BR GSS_C_NO_CREDENTIAL
to indicate a default credential to use. If no default credential is
defined, the function returns
.BR GSS_C_NO_CRED .
.RE

.sp
.ne 2
.mk
.na
\fIinput_token_buffer\fR
.ad
.sp .6
.RS 4n
Token received from the context initiative.
.RE

.sp
.ne 2
.mk
.na
.I input_chan_bindings
.ad
.sp .6
.RS 4n
Optional application-specified bindings. Allows application to securely
bind channel identification information to the security context. Set to
\fBGSS_C_NO_CHANNEL_BINDINGS\fR if you do not want to use channel
bindings.
.RE

.sp
.ne 2
.mk
.na
.I src_name
.ad
.sp .6
.RS 4n
The authenticated name of the context initiator. After use, this name
should be deallocated by passing it to
.BR gss_release_name() .
See
.BR gss_release_name (3GSS).
If not required, specify
.BR NULL .
.RE

.sp
.ne 2
.mk
.na
.I mech_type
.ad
.sp .6
.RS 4n
The security mechanism used. Set to
.B NULL
if it does not matter which
mechanism is used.
.RE

.sp
.ne 2
.mk
.na
.I output_token
.ad
.sp .6
.RS 4n
.RB "The token to send to the acceptor. Initialize it to" " GSS_C_NO_BUFFER"
before the function is called (or its length field set to zero). If the
length is zero, no token need be sent.
.RE

.sp
.ne 2
.mk
.na
\fIret_flags\fR
.ad
.sp .6
.RS 4n
Contains various independent flags, each of which indicates that the
context supports a specific service option. If not needed, specify
.BR NULL .
Test the returned bit-mask \fIret_flags\fR value against its
symbolic name to determine if the given option is supported by the context.
\fIret_flags\fR may contain one of the following values:
.sp
.ne 2
.mk
.na
.B GSS_C_DELEG_FLAG
.ad
.sp .6
.RS 4n
If true, delegated credentials are available by means of the
\fIdelegated_cred_handle\fR parameter. If false, no credentials were
delegated.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_MUTUAL_FLAG
.ad
.sp .6
.RS 4n
If true, a remote peer asked for mutual authentication. If false, no remote
peer asked for mutual authentication.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_REPLAY_FLAG
.ad
.sp .6
.RS 4n
If true, replay of protected messages will be detected. If false, replayed
messages will not be detected.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_SEQUENCE_FLAG
.ad
.sp .6
.RS 4n
If true, out of sequence protected messages will be detected. If false,
they will not be detected.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_CONF_FLAG
.ad
.sp .6
.RS 4n
If true, confidentiality service may be invoked by calling the
\fBgss_wrap()\fR routine. If false, no confidentiality service is available
by means of
.BR gss_wrap() .
\fBgss_wrap()\fR will provide message
encapsulation, data-origin authentication and integrity services only.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_INTEG_FLAG
.ad
.sp .6
.RS 4n
If true, integrity service may be invoked by calling either the
.BR gss_get_mic (3GSS)
or the \fBgss_wrap\fR(3GSS) routine. If false,
per-message integrity service is not available.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_ANON_FLAG
.ad
.sp .6
.RS 4n
If true, the initiator does not wish to be authenticated. The
\fIsrc_name\fR parameter, if requested, contains an anonymous internal name.
If false, the initiator has been authenticated normally.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_PROT_READY_FLAG
.ad
.sp .6
.RS 4n
If true, the protection services specified by the states of
\fBGSS_C_CONF_FLAG\fR and \fBGSS_C_INTEG_FLAG\fR are available if the
accompanying major status return value is either
.B GSS_S_COMPLETE
or
.BR GSS_S_CONTINUE_NEEDED .
If false, the protection services are available
only if the accompanying major status return value is
.BR GSS_S_COMPLETE .
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_TRANS_FLAG
.ad
.sp .6
.RS 4n
If true, the resultant security context may be transferred to other
processes by means of a call to \fBgss_export_sec_context\fR(3GSS). If
false, the security context cannot be transferred.
.RE

.RE

.sp
.ne 2
.mk
.na
.I time_rec
.ad
.sp .6
.RS 4n
The number of sections for which the context will remain value Specify
\fBNULL\fR if not required.
.RE

.sp
.ne 2
.mk
.na
.I delegated_cred_handle
.ad
.sp .6
.RS 4n
The credential value for credentials received from the context's initiator.
It is valid only if the initiator has requested that the acceptor act as a
proxy: that is, if the \fIret_flag\fR argument resolves to
.BR GSS_C_DELEG_FLAG .
.RE

.SH DESCRIPTION
.sp
.LP
The
.B gss_accept_sec_context()
function allows a remotely initiated
security context between the application and a remote peer to be
established. The routine may return an
.IR output_token ,
which should be
transferred to the peer application, where the peer application will present
it to
.BR gss_init_sec_context() .
See
.BR gss_init_sec_context (3GSS).
If
no token need be sent,
.B gss_accept_sec_context()
will indicate this by
setting the length field of the
.I output_token
argument to zero. To
complete the context establishment, one or more reply tokens may be required
from the peer application; if so,
.B gss_accept_sec_context()
will return
a status flag of
.BR GSS_S_CONTINUE_NEEDED ,
in which case it should be
called again when the reply token is received from the peer application,
passing the token to
.B gss_accept_sec_context()
by means of the
\fIinput_token\fR parameters.
.sp
.LP
Portable applications should be constructed to use the token length and
return status to determine whether to send or to wait for a token.
.sp
.LP
Whenever
.B gss_accept_sec_context()
returns a major status that
includes the value
.BR GSS_S_CONTINUE_NEEDED ,
the context is not fully
established, and the following restrictions apply to the output
parameters:
.RS +4
.TP
.ie t \(bu
.el o
The value returned by means of the
.I time_rec
parameter is undefined.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Unless the accompanying \fIret_flags\fR parameter contains the bit
.BR GSS_C_PROT_READY_FLAG ,
which indicates that per-message services may
be applied in advance of a successful completion status, the value returned
by the
.I mech_type
parameter may be undefined until
\fBgss_accept_sec_context()\fR returns a major status value of
.BR GSS_S_COMPLETE .
.RE
.sp
.LP
The values of the
.BR GSS_C_DELEG_FLAG ,
.BR GSS_C_MUTUAL_FLAG ,
.BR GSS_C_REPLAY_FLAG ,
.BR GSS_C_SEQUENCE_FLAG ,
.BR GSS_C_CONF_FLAG ,
\fBGSS_C_INTEG_FLAG\fR and \fBGSS_C_ANON_FLAG\fR bits returned by means of
the \fIret_flags\fR parameter are values that would be valid if context
establishment were to succeed.
.sp
.LP
The values of the
.B GSS_C_PROT_READY_FLAG
and
.BR GSS_C_TRANS_FLAG
bits within \fIret_flags\fR indicate the actual state at the time
\fBgss_accept_sec_context()\fR returns, whether or not the context is fully
established. However, applications should not rely on this behavior, as
\fBGSS_C_PROT_READY_FLAG\fR was not defined in Version 1 of the
.BR GSS-API .
Instead, applications should be prepared to use per-message
services after a successful context establishment, based upon the
\fBGSS_C_INTEG_FLAG\fR and \fBGSS_C_CONF_FLAG\fR values.
.sp
.LP
All other bits within the \fIret_flags\fR argument are set to zero.
.sp
.LP
While
.B gss_accept_sec_context()
returns
.BR GSS_S_CONTINUE_NEEDED ,
the values returned by means of the the \fIret_flags\fR argument indicate
the services available from the established context. If the initial call of
\fBgss_accept_sec_context()\fR fails, no context object is created, and the
value of the
.I context_handle
parameter is set to
.BR GSS_C_NO_CONTEXT .
In the event of a failure on a subsequent call, the
security context and the
.I context_handle
parameter are left untouched
for the application to delete using
.BR gss_delete_sec_context (3GSS).
During context establishment, the informational status bits
\fBGSS_S_OLD_TOKEN\fR and \fBGSS_S_DUPLICATE_TOKEN\fR indicate fatal errors;
\fBGSS-API\fR mechanisms always return them in association with a  routine
error of
.BR GSS_S_FAILURE .
This pairing requirement did not exist in
version 1 of the
.B GSS-API
specification, so applications that wish to
run over version 1 implementations must special-case these codes.
.SH ERRORS
.sp
.LP
\fBgss_accept_sec_context()\fR may return the following status codes:
.sp
.ne 2
.mk
.na
.B GSS_S_COMPLETE
.ad
.RS 30n
.rt
Successful completion.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_CONTINUE_NEEDED
.ad
.RS 30n
.rt
A token from the peer application is required to complete the context, and
that
.B gss_accept_sec_context()
must be called again with that token.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_DEFECTIVE_TOKEN
.ad
.RS 30n
.rt
Consistency checks performed on the
.I input_token
failed.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_DEFECTIVE_CREDENTIAL
.ad
.RS 30n
.rt
Consistency checks performed on the credential failed.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_NO_CRED
.ad
.RS 30n
.rt
The supplied credentials were not valid for context acceptance, or the
credential handle did not reference any credentials.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_CREDENTIALS_EXPIRED
.ad
.RS 30n
.rt
The referenced credentials have expired.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_BAD_BINDINGS
.ad
.RS 30n
.rt
The
.I input_token
contains different channel bindings than those
specified by means of the
.I input_chan_bindings
parameter.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_NO_CONTEXT
.ad
.RS 30n
.rt
The supplied context handle did not refer to a valid context.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_BAD_SIG
.ad
.RS 30n
.rt
The
.I input_token
contains an invalid
.BR MIC .
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_OLD_TOKEN
.ad
.RS 30n
.rt
The
.I input_token
was too old. This is a fatal error while establishing
context.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_DUPLICATE_TOKEN
.ad
.RS 30n
.rt
The
.I input_token
is valid, but it is duplicate of a token already
processed. This is a fatal error while establishing context.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_BAD_MECH
.ad
.RS 30n
.rt
The token received specified a mechanism that is not supported by the
implementation or the provided credential.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_FAILURE
.ad
.RS 30n
.rt
The underlying mechanism detected an error for which no specific
.BR GSS
status code is defined. The mechanism-specific status code reported by means
of the
.I minor_status
parameter details the error condition.
.RE

.SH EXAMPLES
.LP
\fBExample 1\fR Invoking \fBgss_accept_sec_context()\fR Within a Loop
.sp
.LP
A typical portable caller should always invoke
\fBgss_accept_sec_context()\fR within a loop:

.sp
.in +2
.nf
gss_ctx_id_t context_hdl = GSS_C_NO_CONTEXT;

do {
   receive_token_from_peer(input_token);
   maj_stat = gss_accept_sec_context(&min_stat,
                                     &context_hdl,
                                     cred_hdl,
                                     input_token,
                                     input_bindings,
                                     &client_name,
                                     &mech_type,
                                     output_token,
                                     &ret_flags,
                                     &time_rec,
                                     &deleg_cred);
   if (GSS_ERROR(maj_stat)) {
      report_error(maj_stat, min_stat);
   };
   if (output_token->length != 0) {
      send_token_to_peer(output_token);
      gss_release_buffer(&min_stat, output_token);
   };
   if (GSS_ERROR(maj_stat)) {
      if (context_hdl != GSS_C_NO_CONTEXT)
         gss_delete_sec_context(&min_stat,
                                &context_hdl,
                                GSS_C_NO_BUFFER);
      break;
   };
} while (maj_stat & GSS_S_CONTINUE_NEEDED);

/* Check client_name authorization */
\&...

(void) gss_release_name(&min_stat, &client_name);

/* Use and/or store delegated credential */
\&...

(void) gss_release_cred(&min_stat, &deleg_cred);
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR gss_delete_sec_context (3GSS),
.BR gss_export_sec_context (3GSS),
.BR gss_get_mic (3GSS),
.BR gss_init_sec_context (3GSS),
.BR gss_release_cred (3GSS),
.BR gss_release_name (3GSS),
.BR gss_store_cred (3GSS),
.BR gss_wrap (3GSS),
.BR attributes (5)
.sp
.LP
\fISolaris Security for Developers Guide\fR
