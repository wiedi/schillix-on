'\" te
.\" Copyright (C) 2006, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH gss_init_sec_context 3GSS "22 May 2006" "SunOS 5.11" "Generic Security Services API Library Functions"
.SH NAME
gss_init_sec_context \- initiate a GSS-API security context with a peer
application
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lgss\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <gssapi/gssapi.h>

\fBOM_uint32\fR \fBgss_init_sec_context\fR(\fBOM_uint32 *\fIminor_status\fR,
     \fBconst gss_cred_id_t\fR \fIinitiator_cred_handle\fR,
     \fBgss_ctx_id_t *\fIcontext_handle\fR, \fBconst gss_name_t *\fItarget_name\fR,
     \fBconst gss_OID\fR \fImech_type\fR, \fBOM_uint32\fR \fIreq_flags\fR,
     \fBOM_uint32\fR \fItime_req\fR, \fBconst gss_channel_bindings_t\fR \fIinput_chan_bindings\fR,
     \fBconst gss_buffer_t\fR \fIinput_token\fR, \fBgss_OID *\fIactual_mech_type\fR,
     \fBgss_buffer_t\fR \fIoutput_token\fR, \fBOM_uint32 *\fIret_flags\fR,
     \fBOM_uint32 *\fItime_rec\fR);
.fi

.SH PARAMETERS
.sp
.LP
The parameter descriptions for
.B gss_init_sec_context()
follow:
.sp
.ne 2
.mk
.na
.I minor_status
.ad
.RS 25n
.rt
A mechanism specific status code.
.RE

.sp
.ne 2
.mk
.na
.I initiator_cred_handle
.ad
.RS 25n
.rt
The handle for the credentials claimed. Supply
.B GSS_C_NO_CREDENTIAL
to act
as a default initiator principal. If no default initiator is defined, the
function returns
.BR GSS_S_NO_CRED .
.RE

.sp
.ne 2
.mk
.na
.I context_handle
.ad
.RS 25n
.rt
The context handle for a new context. Supply the value \fBGSS_C_NO_CONTEXT\fR
for the first call, and use the value returned in any continuation calls. The
resources associated with
.I context_handle
must be released by the
application after use by a call to
.BR gss_delete_sec_context (3GSS).
.RE

.sp
.ne 2
.mk
.na
.I target_name
.ad
.RS 25n
.rt
The name of the context acceptor.
.RE

.sp
.ne 2
.mk
.na
.I mech_type
.ad
.RS 25n
.rt
The object
.B ID
of the desired mechanism. To obtain a specific default,
supply the value
.BR GSS_C_NO_ID .
.RE

.sp
.ne 2
.mk
.na
.I req_flags
.ad
.RS 25n
.rt
Contains independent flags, each of which will request that the context support
a specific service option. A symbolic name is provided for each flag.
Logically-\fBOR\fR the symbolic name to the corresponding required flag to form
the bit-mask value.
.I req_flags
may contain one of the following values:
.sp
.ne 2
.mk
.na
.B GSS_C_DELEG_FLAG
.ad
.RS 23n
.rt
If true, delegate credentials to a remote peer. Do not delegate the credentials
if the value is false.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_MUTUAL_FLAG
.ad
.RS 23n
.rt
If true, request that the peer authenticate itself. If false, authenticate to
the remote peer only.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_REPLAY_FLAG
.ad
.RS 23n
.rt
If true, enable replay detection for messages protected with
.BR gss_wrap (3GSS)
or
.BR gss_get_mic "(3GSS). Do not attempt to detect"
replayed messages if false.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_SEQUENCE_FLAG
.ad
.RS 23n
.rt
If true, enable detection of out-of-sequence protected messages. Do not attempt
to detect out-of-sequence messages if false.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_CONF_FLAG
.ad
.RS 23n
.rt
If true, request that confidential service be made available by means of
.BR gss_wrap (3GSS).
If false, no per-message confidential service is
required.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_INTEG_FLAG
.ad
.RS 23n
.rt
If true, request that integrity service be made available by means of
.BR gss_wrap (3GSS)
or \fBgss_get_mic\fR(3GSS). If false, no per-message
integrity service is required.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_ANON_FLAG
.ad
.RS 23n
.rt
If true, do not reveal the initiator's identify to the acceptor. If false,
authenticate normally.
.RE

.RE

.sp
.ne 2
.mk
.na
.I time_req
.ad
.RS 25n
.rt
The number of seconds for which the context will remain valid. Supply a zero
value to
.I time_req
to request a default validity period.
.RE

.sp
.ne 2
.mk
.na
.I input_chan_bindings
.ad
.RS 25n
.rt
Optional application-specified bindings. Allows application to securely bind
channel identification information to the security context. Set to
.B GSS_C_NO_CHANNEL_BINDINGS
if you do not want to use channel bindings.
.RE

.sp
.ne 2
.mk
.na
.I input_token
.ad
.RS 25n
.rt
Token received from the peer application. On the initial call, supply
.B GSS_C_NO_BUFFER
or a pointer to a buffer containing the value
.BR GSS_C_EMPTY_BUFFER .
.RE

.sp
.ne 2
.mk
.na
.I actual_mech_type
.ad
.RS 25n
.rt
The actual mechanism used. The
.B OID
returned by means of this parameter
will be pointer to static storage that should be treated as read-only. The
application should not attempt to free it. To obtain a specific default, supply
the value
.BR GSS_C_NO_ID .
Specify
.B NULL
if the parameter is not
required.
.RE

.sp
.ne 2
.mk
.na
.I output_token
.ad
.RS 25n
.rt
The token to send to the peer application. If the length field of the returned
buffer is zero, no token need be sent to the peer application. After use storage
associated with this buffer must be freed by the application by a call to
.BR gss_release_buffer (3GSS).
.RE

.sp
.ne 2
.mk
.na
.I ret_flags
.ad
.RS 25n
.rt
Contains various independent flags, each of which indicates that the context
supports a specific service option. If not needed, specify
.BR NULL .
Test the
returned bit-mask
.I ret_flags
value against its symbolic name to determine if
the given option is supported by the context.
.I ret_flags
may contain one of
the following values:
.sp
.ne 2
.mk
.na
.B GSS_C_DELEG_FLAG
.ad
.RS 25n
.rt
If true, credentials were delegated to the remote peer. If false, no credentials
were delegated.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_MUTUAL_FLAG
.ad
.RS 25n
.rt
If true, the remote peer authenticated itself. If false, the remote peer did not
authenticate itself.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_REPLAY_FLAG
.ad
.RS 25n
.rt
If true, replay of protected messages will be detected. If false, replayed
messages will not be detected.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_SEQUENCE_FLAG
.ad
.RS 25n
.rt
If true, out of sequence protected messages will be detected. If false, they
will not be detected.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_CONF_FLAG
.ad
.RS 25n
.rt
If true, confidential service may be invoked by calling the \fBgss_wrap()\fR
routine. If false, no confidentiality service is available by means of
.BR gss_wrap (3GSS).
.B gss_wrap()
will provide message encapsulation,
data-origin authentication and integrity services only.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_INTEG_FLAG
.ad
.RS 25n
.rt
If true, integrity service may be invoked by calling either the
.BR gss_wrap (3GSS)
or \fBgss_get_mic\fR(3GSS) routine. If false, per-message
integrity service is not available.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_ANON_FLAG
.ad
.RS 25n
.rt
If true, the initiator's identity has not been revealed; it will not be revealed
if any emitted token is passed to the acceptor. If false, the initiator has been
or will be authenticated normally.
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_PROT_READY_FLAG
.ad
.RS 25n
.rt
If true, the protection services specified by the states of
.B GSS_C_CONF_FLAG
and
.B GSS_C_INTEG_FLAG
are available if the
accompanying major status return value is either
.B GSS_S_COMPLETE
or
.BR GSS_S_CONTINUE_NEEDED .
If false, the protection services are available only
if the accompanying major status return value is
.BR GSS_S_COMPLETE .
.RE

.sp
.ne 2
.mk
.na
.B GSS_C_TRANS_FLAG
.ad
.RS 25n
.rt
If true, the resultant security context may be transferred to other processes by
means of a call to \fBgss_export_sec_context\fR(3GSS). If false, the security
context cannot be transferred.
.RE

.RE

.sp
.ne 2
.mk
.na
.I time_rec
.ad
.RS 25n
.rt
The number of seconds for which the context will remain valid. Specify
.B NULL
if the parameter is not required.
.RE

.SH DESCRIPTION
.sp
.LP
The
.B gss_init_sec_context()
function initiates the establishment of a
security context between the application and a remote peer. Initially, the
.I input_token
parameter should be specified either as
.BR GSS_C_NO_BUFFER ,
or as a pointer to a \fBgss_buffer_desc\fR object with a \fBlength\fR field that
contains a zero value. The routine may return a
.IR output_token ,
which should
be transferred to the peer application, which will present it to
.BR gss_accept_sec_context (3GSS).
If no token need be sent,
.B gss_init_sec_context()
will indicate this by setting the
.B length
field
of the
.I output_token
argument to zero. To complete context establishment,
one or more reply tokens may be required from the peer application; if so,
.B gss_init_sec_context()
will return a status code that contains the
supplementary information bit
.BR GSS_S_CONTINUE_NEEDED .
In this case, make
another call to
.B gss_init_sec_context()
when the reply token is received
from the peer application and pass the reply token to
.B gss_init_sec_context()
by means of the
.I input_token
parameter.
.sp
.LP
Construct portable applications to use the token length and return status to
determine whether to send or wait for a token.
.sp
.LP
Whenever the routine returns a major status that includes the value
.BR GSS_S_CONTINUE_NEEDED ,
the context is not fully established, and the
following restrictions apply to the output parameters:
.RS +4
.TP
.ie t \(bu
.el o
The value returned by means of the
.I time_rec
parameter is undefined. Unless
the accompanying
.I ret_flags
parameter contains the bit
.BR GSS_C_PROT_READY_FLAG ,
which indicates that per-message services may be
applied in advance of a successful completion status, the value returned by means
of the
.I actual_mech_type
parameter is undefined until the routine returns a
major status value of
.BR GSS_S_COMPLETE .
.RE
.RS +4
.TP
.ie t \(bu
.el o
The values of the
.BR GSS_C_DELEG_FLAG ,
.BR GSS_C_MUTUAL_FLAG ,
.BR GSS_C_REPLAY_FLAG ,
.BR GSS_C_SEQUENCE_FLAG ,
.BR GSS_C_CONF_FLAG ,
.B GSS_C_INTEG_FLAG
and
.B GSS_C_ANON_FLAG
bits returned by the
.I ret_flags
parameter contain values that will be valid if context
establishment succeeds. For example, if the application requests a service such
as delegation or anonymous authentication by means of the \fIreq_flags\fR
argument, and the service is unavailable from the underlying mechanism,
.B gss_init_sec_context()
generates a token that will not provide the service,
and it indicate by means of the
.I ret_flags
argument that the service will
not be supported. The application may choose to abort context establishment by
calling \fBgss_delete_sec_context\fR(3GSS) if it cannot continue without the
service, or if the service was merely desired but not mandatory, it may transmit
the token and continue context establishment.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The values of the
.B GSS_C_PROT_READY_FLAG
and
.B GSS_C_TRANS_FLAG
bits
within
.I ret_flags
indicate the actual state at the time
.B gss_init_sec_context()
returns, whether or not the context is fully
established.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The
.B GSS-API
sets the
.B GSS_C_PROT_READY_FLAG
in the final
.I ret_flags
returned to a caller, for example, when accompanied by a
.B GSS_S_COMPLETE
status code. However, applications should not rely on this
behavior, as the flag was not defined in Version 1 of the
.BR GSS-API .
Instead, applications should determine what per-message services are available
after a successful context establishment according to the
.BR GSS_C_INTEG_FLAG
and
.B GSS_C_CONF_FLAG
values.
.RE
.RS +4
.TP
.ie t \(bu
.el o
All other bits within the
.I ret_flags
argument are set to zero.
.RE
.sp
.LP
If the initial call of
.B gss_init_sec_context()
fails, the \fBGSS-API\fR
does not create a context object; it leaves the value of the \fIcontext_handle\fR
parameter set to
.B GSS_C_NO_CONTEXT
to indicate this.  In the event of
failure on a subsequent call, the
.B GSS-API
leaves the security context
untouched for the application to delete using
.BR gss_delete_sec_context (3GSS).
.sp
.LP
During context establishment, the informational status bits
.B GSS_S_OLD_TOKEN
and
.B GSS_S_DUPLICATE_TOKEN
indicate fatal errors, and
.B GSS-API
mechanisms should always return them in association with a status
code of
.BR GSS_S_FAILURE .
This pairing requirement was not part of Version 1
of the GSS-API specification, so applications that wish to run on Version 1
implementations must special-case these codes.
.SH ERRORS
.sp
.LP
.B gss_init_sec_context()
may return the following status codes:
.sp
.ne 2
.mk
.na
.B GSS_S_COMPLETE
.ad
.RS 30n
.rt
Successful completion.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_CONTINUE_NEEDED
.ad
.RS 30n
.rt
A token from the peer application is required to complete the context, and
.B gss_init_sec_context()
must be called again with that token.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_DEFECTIVE_TOKEN
.ad
.RS 30n
.rt
Consistency checks performed on the
.I input_token
failed.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_DEFECTIVE_CREDENTIAL
.ad
.RS 30n
.rt
Consistency checks performed on the credential failed.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_NO_CRED
.ad
.RS 30n
.rt
The supplied credentials are not valid for context acceptance, or the credential
handle does not reference any credentials.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_CREDENTIALS_EXPIRED
.ad
.RS 30n
.rt
The referenced credentials have expired.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_BAD_BINDINGS
.ad
.RS 30n
.rt
The
.I input_token
contains different channel bindings than those specified
by means of the
.I input_chan_bindings
parameter.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_BAD_SIG
.ad
.RS 30n
.rt
The
.I input_token
contains an invalid
.B MIC
or a
.B MIC
that cannot
be verified.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_OLD_TOKEN
.ad
.RS 30n
.rt
The
.I input_token
is too old. This is a fatal error while establishing
context.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_DUPLICATE_TOKEN
.ad
.RS 30n
.rt
The
.I input_token
is valid, but it is a duplicate of a token already
processed. This is a fatal error while establishing context.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_NO_CONTEXT
.ad
.RS 30n
.rt
The supplied context handle does not refer to a valid context.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_BAD_NAMETYPE
.ad
.RS 30n
.rt
The provided
.I target_name
parameter contains an invalid or unsupported
.I name
type.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_BAD_NAME
.ad
.RS 30n
.rt
The supplied
.I target_name
parameter is ill-formed.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_BAD_MECH
.ad
.RS 30n
.rt
The token received specifies a mechanism that is not supported by the
implementation or the provided credential.
.RE

.sp
.ne 2
.mk
.na
.B GSS_S_FAILURE
.ad
.RS 30n
.rt
The underlying mechanism detected an error for which no specific
.BR GSS
status code is defined. The mechanism-specific status code reported by means of
the
.I minor_status
parameter details the error condition.
.RE

.SH EXAMPLES
.LP
.B Example 1
Invoking
.B gss_init_sec_context()
Within a Loop
.sp
.LP
A typical portable caller should always invoke
.BR gss_init_sec_context()
within a loop:

.sp
.in +2
.nf
int context_established = 0;
gss_ctx_id_t context_hdl = GSS_C_NO_CONTEXT;
       ...
input_token->length = 0;

while (!context_established) {
  maj_stat = gss_init_sec_context(&min_stat,
                                  cred_hdl,
                                  &context_hdl,
                                  target_name,
                                  desired_mech,
                                  desired_services,
                                  desired_time,
                                  input_bindings,
                                  input_token,
                                  &actual_mech,
                                  output_token,
                                  &actual_services,
                                  &actual_time);
  if (GSS_ERROR(maj_stat)) {
    report_error(maj_stat, min_stat);
  };

  if (output_token->length != 0) {
    send_token_to_peer(output_token);
    gss_release_buffer(&min_stat, output_token)
  };
  if (GSS_ERROR(maj_stat)) {

    if (context_hdl != GSS_C_NO_CONTEXT)
      gss_delete_sec_context(&min_stat,
                             &context_hdl,
                             GSS_C_NO_BUFFER);
    break;
  };
  if (maj_stat & GSS_S_CONTINUE_NEEDED) {
    receive_token_from_peer(input_token);
  } else {
    context_established = 1;
  };
};
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR gss_delete_sec_context (3GSS),
.BR gss_export_sec_context (3GSS),
.BR gss_get_mic (3GSS),
.BR gss_wrap (3GSS),
.BR attributes (5)
.sp
.LP
.I Solaris Security for Developers Guide
