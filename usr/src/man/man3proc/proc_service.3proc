'\" te
.\" Copyright (c) 2007 by Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH proc_service 3PROC "12 Oct 2007" "SunOS 5.11" "Process Control Library Functions"
.SH NAME
proc_service \- process service interfaces
.SH SYNOPSIS
.LP
.nf
#include <proc_service.h>

\fBps_err_e\fR \fBps_pdmodel\fR(\fBstruct ps_prochandle *\fIph\fR,
     \fBint *\fIdata_model\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_pglobal_lookup\fR(\fBstruct ps_prochandle *\fIph\fR,
     \fBconst char *\fIobject_name\fR, \fBconst char *\fIsym_name\fR,
     \fBpsaddr_t *\fIsym_addr\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_pglobal_sym\fR(\fBstruct ps_prochandle *\fIph\fR,
     \fBconst char *\fIobject_name\fR, \fBconst char *\fIsym_name\fR,
     \fBps_sym_t *\fIsym\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_pread\fR(\fBstruct ps_prochandle *\fIph\fR, \fBpsaddr_t\fR \fIaddr\fR,
     \fBvoid *\fIbuf\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_pwrite\fR(\fBstruct ps_prochandle *\fIph\fR, \fBpsaddr_t\fR \fIaddr\fR,
     \fBconst void *\fIbuf\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_pdread\fR(\fBstruct ps_prochandle *\fIph\fR, \fBpsaddr_t\fR \fIaddr\fR,
     \fBvoid *\fIbuf\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_pdwrite\fR(\fBstruct ps_prochandle *\fIph\fR, \fBpsaddr_t\fR \fIaddr\fR,
     \fBconst void *\fIbuf\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_ptread\fR(\fBstruct ps_prochandle *\fIph\fR, \fBpsaddr_t\fR \fIaddr\fR,
     \fBvoid *\fIbuf\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_ptwrite\fR(\fBstruct ps_prochandle *\fIph\fR, \fBpsaddr_t\fR \fIaddr\fR,
     \fBconst void *\fIbuf\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_pstop\fR(\fBstruct ps_prochandle *\fIph\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_pcontinue\fR(\fBstruct ps_prochandle *\fIph\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_lstop\fR(\fBstruct ps_prochandle *\fIph\fR, \fBlwpid_t\fR \fIlwpid\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_lcontinue\fR(\fBstruct ps_prochandle *\fIph\fR, \fBlwpid_t\fR \fIlwpid\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_lgetregs\fR(\fBstruct ps_prochandle *\fIph\fR, \fBlwpid_t\fR \fIlwpid\fR,
     \fBprgregset_t\fR \fIgregset\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_lsetregs\fR(\fBstruct ps_prochandle *\fIph\fR, \fBlwpid_t\fR \fIlwpid\fR,
     \fBconst prgregset_t\fR \fIgregset\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_lgetfpregs\fR(\fBstruct ps_prochandle *\fIph\fR, \fBlwpid_t\fR \fIlwpid\fR,
     \fBprfpregset_t *\fIfpregset\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_lsetfpregs\fR(\fBstruct ps_prochandle *\fIph\fR, \fBlwpid_t\fR \fIlwpid\fR,
     \fBconst prfpregset_t *\fIfpregset\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_pauxv\fR(\fBstruct ps_prochandle *\fIph\fR,
     \fBconst auxv_t **\fIauxp\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_kill\fR(\fBstruct ps_prochandle *\fIph\fR, \fBint\fR \fIsig\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_lrolltoaddr\fR(\fBstruct ps_prochandle *\fIph\fR,
     \fBlwpid_t\fR \fIlwpid\fR, \fBpsaddr_t\fR \fIgo_addr\fR, \fBpsaddr_t\fR \fIstop_addr\fR);
.fi

.LP
.nf
\fBvoid\fR \fBps_plog\fR(\fBconst char *\fIfmt\fR);
.fi

.SS "SPARC"
.LP
.nf
\fBps_err_e\fR \fBps_lgetxregsize\fR(\fBstruct ps_prochandle *\fIph\fR,
     \fBlwpid_t\fR \fIlwpid\fR, \fBint *\fIxregsize\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_lgetxregs\fR(\fBstruct ps_prochandle *\fIph\fR,
     \fBlwpid_t\fR \fIlwpid\fR, \fBcaddr_t\fR \fIxregset\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_lsetxregs\fR(\fBstruct ps_prochandle *\fIph\fR,
     \fBlwpid_t\fR \fIlwpid\fR, \fBcaddr_t\fR \fIxregset\fR);
.fi

.SS "x86"
.LP
.nf
\fBps_err_e\fR \fBps_lgetLDT\fR(\fBstruct ps_prochandle *\fIph\fR, \fBlwpid_t\fR \fIlwpid\fR,
     \fBstruct ssd *\fIldt\fR);
.fi

.SH DESCRIPTION
.sp
.LP
Every program that links
.B libthread_db
or
.B librtld_db
must
provide a set of process control primitives that allow
.BR libthread_db
and
.B librtld_db
to access memory and registers in the target process,
to start and to stop the target process, and to look up symbols in the
target process.  See
.BR libc_db (3LIB).
For information on
.BR librtld_db ,
refer to the
.IR "Linker and Libraries Guide" .
.sp
.LP
Refer to the individual reference manual pages that describe these routines
for a functional specification that clients of
.B libthread_db
and
.B librtld_db
can use to implement this required interface. The
.RB < proc_service.h >
header lists the C declarations of these routines.
.SH FUNCTIONS
.sp
.ne 2
.mk
.na
.B ps_pdmodel()
.ad
.RS 23n
.rt
Returns the data model of the target process.
.RE

.sp
.ne 2
.mk
.na
.B ps_pglobal_lookup()
.ad
.RS 23n
.rt
Looks up the symbol in the symbol table of the load object in the target
process and returns its address.
.RE

.sp
.ne 2
.mk
.na
.B ps_pglobal_sym()
.ad
.RS 23n
.rt
Looks up the symbol in the symbol table of the load object in the target
process and returns its symbol table entry.
.RE

.sp
.ne 2
.mk
.na
.B ps_pread()
.ad
.RS 23n
.rt
Copies
.I size
bytes from the target process to the controlling
process.
.RE

.sp
.ne 2
.mk
.na
.B ps_pwrite()
.ad
.RS 23n
.rt
Copies
.I size
bytes from the controlling process to the target
process.
.RE

.sp
.ne 2
.mk
.na
.B ps_pdread()
.ad
.RS 23n
.rt
Identical to
.BR ps_pread() .
.RE

.sp
.ne 2
.mk
.na
.B ps_pdwrite()
.ad
.RS 23n
.rt
Identical to
.BR ps_pwrite() .
.RE

.sp
.ne 2
.mk
.na
.B ps_ptread()
.ad
.RS 23n
.rt
Identical to
.BR ps_pread() .
.RE

.sp
.ne 2
.mk
.na
.B ps_ptwrite()
.ad
.RS 23n
.rt
Identical to
.BR ps_pwrite() .
.RE

.sp
.ne 2
.mk
.na
.B ps_pstop()
.ad
.RS 23n
.rt
Stops the target process.
.RE

.sp
.ne 2
.mk
.na
.B ps_pcontinue()
.ad
.RS 23n
.rt
Resumes target process.
.RE

.sp
.ne 2
.mk
.na
.B ps_lstop()
.ad
.RS 23n
.rt
Stops a single lightweight process (
.B LWP
) within the target
process.
.RE

.sp
.ne 2
.mk
.na
.B ps_lcontinue()
.ad
.RS 23n
.rt
Resumes a single
.B LWP
within the target process.
.RE

.sp
.ne 2
.mk
.na
.B ps_lgetregs()
.ad
.RS 23n
.rt
Gets the general registers of the
.BR LWP .
.RE

.sp
.ne 2
.mk
.na
.B ps_lsetregs()
.ad
.RS 23n
.rt
Sets the general registers of the
.BR LWP .
.RE

.sp
.ne 2
.mk
.na
.B ps_lgetfpregs()
.ad
.RS 23n
.rt
Gets the
.B LWP`s
floating point register set.
.RE

.sp
.ne 2
.mk
.na
.B ps_lsetfpregs()
.ad
.RS 23n
.rt
Sets the
.B LWP`s
floating point register set.
.RE

.sp
.ne 2
.mk
.na
.B ps_pauxv()
.ad
.RS 23n
.rt
Returns a pointer to a read-only copy of the target process's auxiliary
vector.
.RE

.sp
.ne 2
.mk
.na
.B ps_kill()
.ad
.RS 23n
.rt
Sends signal to target process.
.RE

.sp
.ne 2
.mk
.na
.B ps_lrolltoaddr()
.ad
.RS 23n
.rt
Rolls the
.B LWP
out of a critical section when the process is
stopped.
.RE

.sp
.ne 2
.mk
.na
.B ps_plog()
.ad
.RS 23n
.rt
Logs a message.
.RE

.SS "SPARC"
.sp
.ne 2
.mk
.na
.B ps_lgetxregsize()
.ad
.RS 21n
.rt
Returns the size of the architecture-dependent extra state registers.
.RE

.sp
.ne 2
.mk
.na
.B ps_lgetxregs()
.ad
.RS 21n
.rt
Gets the extra state registers of the
.BR LWP .
.RE

.sp
.ne 2
.mk
.na
.B ps_lsetxregs()
.ad
.RS 21n
.rt
Sets the extra state registers of the
.BR LWP .
.RE

.SS "x86"
.sp
.ne 2
.mk
.na
.B ps_lgetLDT()
.ad
.RS 16n
.rt
Reads the local descriptor table of the
.BR LWP .
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libc_db (3LIB),
.BR librtld_db (3LIB),
.BR ps_pread (3PROC),
.BR rtld_db (3EXT),
.BR attributes (5)
.sp
.LP
.I Linker and Libraries Guide
