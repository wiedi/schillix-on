'\" te
.\" Copyright (c) 2001 Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ps_pstop 3PROC "22 Mar 2001" "SunOS 5.11" "Process Control Library Functions"
.SH NAME
ps_pstop, ps_pcontinue, ps_lstop, ps_lcontinue, ps_lrolltoaddr, ps_kill \-
process and LWP control in libthread_db
.SH SYNOPSIS
.LP
.nf
#include <proc_service.h>

\fBps_err_e\fR \fBps_pstop\fR(\fBstruct ps_prochandle *\fIph\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_pcontinue\fR(\fBstruct ps_prochandle *\fIph\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_lstop\fR(\fBstruct ps_prochandle *\fIph\fR, \fBlwpid_t\fR \fIlwpid\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_lcontinue\fR(\fBstruct ps_prochandle *\fIph\fR,
     \fBlwpid_t\fR \fIlwpid\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_lrolltoaddr\fR(\fBstruct ps_prochandle *\fIph\fR,
     \fBlwpid_t\fR \fIlwpid\fR, \fBpsaddr_t\fR \fIgo_addr\fR, \fBpsaddr_t\fR \fIstop_addr\fR);
.fi

.LP
.nf
\fBps_err_e\fR \fBps_kill\fR(\fBstruct ps_prochandle *\fIph\fR, \fBint\fR \fIsignum\fR);
.fi

.SH DESCRIPTION
.sp
.LP
.B The ps_pstop()
function stops the target process identified by
.IR ph ,
while the
.B ps_pcontinue()
function allows it to resume.
.sp
.LP
The
.B libthread_db()
function uses
.B ps_pstop()
to freeze the
target process while it is under inspection. Within the scope of any single
call from outside
.B libthread_db
to a
.B libthread_db
routine,
.B libthread_db
will call
.BR ps_pstop() ,
at most once. If it does, it
will call
.B ps_pcontinue()
within the scope of the same routine.
.sp
.LP
The controlling process may already have stopped the target process when it
calls
.BR libthread_db .
In that case, it is not obligated to resume the
target process when
.B libthread_db
calls
.BR ps_pcontinue() .
In other
words,
.B ps_pstop()
is mandatory, while
.B ps_pcontinue()
is
advisory. After
.BR ps_pstop() ,
the target process must be stopped; after
.BR ps_pcontinue() ,
the target process may be running.
.sp
.LP
The
.B ps_lstop()
and
.B ps_lcontinue()
functions stop and resume a
single lightweight process (\fBLWP\fR) within the target process
.IR ph .
.sp
.LP
The
.B ps_lrolltoaddr()
function is used to roll an
.B LWP
forward
out of a critical section when the process is stopped. It is also used to
run the
.B libthread_db
agent thread on behalf of
.BR libthread .
The
.B ps_lrolltoaddr()
function is always called with the target process
stopped, that is, there has been a preceding call to
.BR ps_pstop() .
The
specified
.B LWP
must be continued at the address
.IR go_addr ,
or at
its current address if
.I go_addr
is
.IR NULL .
It should then be
stopped when its execution reaches
.IR stop_addr .
This routine does not
return until the
.B LWP
has stopped at
.IR stop_addr .
.sp
.LP
The
.B ps_kill()
function directs the signal
.I signum
to the target
process for which the handle is
.IR ph .
It has the same semantics as
.BR kill (2).
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B PS_OK
.ad
.RS 14n
.rt
The call completed successfully. In the case of
.BR ps_pstop() ,
the
target process is stopped.
.RE

.sp
.ne 2
.mk
.na
.B PS_BADLID
.ad
.RS 14n
.rt
For
.BR ps_lstop() ,
.B ps_lcontinue()
and
.BR ps_lrolltoaddr() ;
there is no
.B LWP
with id
.I lwipd
in the target process.
.RE

.sp
.ne 2
.mk
.na
.B PS_ERR
.ad
.RS 14n
.rt
The function did not return successfully.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR kill (2),
.BR libc_db (3LIB),
.BR proc_service (3PROC),
.BR attributes (5),
.BR threads (5)
