'\" te
.\" Copyright 1989 AT&T  Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH regexpr 3GEN "29 Dec 1996" "SunOS 5.11" "String Pattern-Matching Library Functions"
.SH NAME
regexpr, compile, step, advance \- regular expression compile and match
routines
.SH SYNOPSIS
.LP
.nf
\fBcc\fR  [\fIflag\fR].\|.\|. [\fIfile\fR].\|.\|. \fB-lgen\fR [\fIlibrary\fR].\|.\|.
.fi

.LP
.nf
#include <regexpr.h>

\fBchar *\fBcompile\fR(\fBchar *\fIinstring\fR, \fBchar *\fIexpbuf\fR, \fBconst char *\fIendbuf\fR);
.fi

.LP
.nf
\fBint\fR
\fBstep\fR(\fBconst char *\fIstring\fR, \fBconst char *\fIexpbuf\fR);
.fi

.LP
.nf
\fBint\fR
\fBadvance\fR(\fBconst char *\fIstring\fR, \fBconst char *\fIexpbuf\fR);
.fi

.LP
.nf
\fBextern char *\fRloc1\fB, \fRloc2\fB, \fRlocs\fB;\fR
.fi

.LP
.nf
\fBextern int \fRnbra\fB, \fRregerrno\fB, \fRreglength\fB;\fR
.fi

.LP
.nf
\fBextern char *\fRbraslist\fB[], *\fRbraelist\fB[];\fR
.fi

.SH DESCRIPTION
.sp
.LP
These routines are used to compile regular expressions and match the
compiled expressions against lines.  The regular expressions compiled are in
the form used by
.BR ed (1).
.sp
.LP
The parameter
.I instring
is a null-terminated string representing the
regular expression.
.sp
.LP
The parameter
.I expbuf
points to the place where the compiled regular
expression is to be placed.  If
.I expbuf
is
.IR NULL ,
.B compile()
uses
.BR malloc (3C)
to allocate the space for the compiled regular
expression. If an error occurs, this space is freed.  It is the user's
responsibility to free unneeded space after the compiled regular expression
is no longer needed.
.sp
.LP
The parameter
.I endbuf
is one more than the highest address where the
compiled regular expression may be placed.  This argument is ignored if
.I expbuf
is
.IR NULL .
If the compiled expression cannot fit in
.RI ( endbuf \(mi expbuf )
bytes,
.B
compile()
returns
.I NULL
and
.B regerrno
(see below) is set to 50.
.sp
.LP
The parameter
.I string
is a pointer to a string of characters to be
checked for a match. This string should be null-terminated.
.sp
.LP
The parameter
.I expbuf
is the compiled regular expression obtained by a
call of the function
.BR compile() .
.sp
.LP
The function
.B step()
returns non-zero if the given string matches the
regular expression, and zero if the expressions do not match.  If there is a
match, two external character pointers are set as a side effect to the call
to
.BR step() .
The variables set in
.B step()
are
.I loc1
and
.IR loc2 .
.I loc1
is a pointer to the first character that matched the
regular expression. The variable
.I loc2
points to the character after
the last character that matches the regular expression.  Thus if the regular
expression matches the entire line,
.I loc1
points to the first character
of
.I string
and
.I loc2
points to the null at the end of
.IR string .
.sp
.LP
The purpose of
.B step()
is to step through the
.I string
argument
until a match is found or until the end of
.I string
is reached. If the
regular expression begins with
.BR ^ ,
.B step()
tries to match the
regular expression at the beginning of the string only.
.sp
.LP
The
.B advance()
function is similar to
.BR step() ;
but, it only sets
the variable
.I loc2
and always restricts  matches to the beginning of
the string.
.sp
.LP
If one is looking for successive matches in the same string of characters,
.B locs
should be set equal to
.IR loc2 ,
and
.B step()
should be
called with
.I string
equal to
.IR loc2 .
.I locs
is used by
commands like
.B ed
and
.B sed
so that global substitutions like
.B s/y*//g
do not loop forever, and is
.I NULL
by default.
.sp
.LP
The external variable
.B nbra
is used to determine the number of
subexpressions in the compiled regular expression.
.B braslist
and
.B braelist
are arrays of character pointers that point to the start and
end of the
.B nbra
subexpressions in the matched string.   For example,
after calling
.B step()
or
.B advance()
with string
.B sabcdefg
and
regular expression \fB\e(abcdef\e)\fR,
.B braslist[0]
will point at
.B a
and
.B braelist[0]
will point at
.BR g .
These arrays are used
by commands like
.B ed
and
.B sed
for substitute replacement patterns
that contain the
.BI \e n
notation for subexpressions.
.sp
.LP
Note that it is not necessary to use the external variables
.BR regerrno ,
.BR nbra ,
.BR loc1 ,
.BR "loc2 locs" ,
.BR braelist ,
and
.B braslist
if one is only checking whether or not a string matches a
regular expression.
.SH EXAMPLES
.LP
.B Example 1
The following is similar to the regular expression code
from
.BR grep :
.sp
.in +2
.nf
#include<regexpr.h>
 . . .
if(compile(*argv, (char *)0, (char *)0) == (char *)0)
 	regerr(regerrno);
 . . .
if (step(linebuf, expbuf)) 	
   succeed(\|);
.fi
.in -2

.SH RETURN VALUES
.sp
.LP
If
.B compile()
succeeds, it returns a
.RI non- NULL
pointer whose
value depends on
.IR expbuf .
.RI "If " expbuf " is non-" NULL ,
.B compile()
returns a pointer to  the byte after the last byte in the
compiled regular expression.   The length of the compiled regular expression
is stored in
.BR reglength .
Otherwise,
.B compile()
returns a pointer
to the space allocated by
.BR malloc (3C).
.sp
.LP
The functions
.B step()
and
.B advance()
return non-zero if the given
string matches the regular expression, and zero if the expressions do not
match.
.SH ERRORS
.sp
.LP
If an error is detected when compiling the regular expression, a
.I NULL
pointer is returned from
.B compile()
and
.B regerrno
is set to one of
the non-zero error numbers indicated below:
.sp

.sp
.TS
tab();
cw(2.75i) cw(2.75i)
lw(2.75i) lw(2.75i)
.
ERRORMEANING
11Range endpoint too large.
16Bad Number.
25"\edigit" out or range.
36Illegal or missing delimiter.
41No remembered string search.
42\e(~\e) imbalance.
43Too many \e(.
44More than 2 numbers given in \e[~\e}.
45} expected after \e.
46First number exceeds second in \e{~\e}.
49[] imbalance.
50 Regular expression overflow.
.TE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR ed (1),
.BR grep (1),
.BR sed (1),
.BR malloc (3C),
.BR attributes (5),
.BR regexp (5)
.SH NOTES
.sp
.LP
When compiling multi-threaded applications, the
.B _REENTRANT
flag must
be defined on the compile line.  This flag should only be used in
multi-threaded applications.
