'\" te
.\" Copyright 1989 AT&T.
.\" Copyright (c) 2003, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH sigaltstack 2 "1 Nov 2003" "SunOS 5.11" "System Calls"
.SH NAME
sigaltstack \- set or get signal alternate stack context
.SH SYNOPSIS
.LP
.nf
#include <signal.h>

\fBint\fR \fBsigaltstack\fR(\fBconst stack_t *restrict\fR \fIss\fR, \fBstack_t *restrict\fR \fIoss\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B sigaltstack()
function allows a thread to define and examine the
state of an alternate stack area on which signals are processed. If
.I ss
is non-zero, it specifies a pointer to and the size of a stack area on which
to deliver signals, and informs the system whether the thread is currently
executing on that stack.  When a signal's action indicates its handler
should execute on the alternate signal stack (specified with a
.BR sigaction (2)
call), the system checks whether the thread chosen to
execute the signal handler is currently executing on that stack. If the
thread is not currently executing on the signal stack, the system arranges a
switch to the alternate signal stack for the duration of the signal
handler's execution.
.sp
.LP
The
.B stack_t
structure includes the following members:
.sp
.in +2
.nf
int   *ss_sp
long  ss_size
int   ss_flags
.fi
.in -2

.sp
.LP
If
.I ss
is not
.IR NULL ,
it points to a structure specifying the
alternate signal stack that will take effect upon successful return from
.BR sigaltstack() .
The
.B ss_sp
and
.B ss_size
members specify the
new base and size of the stack, which is automatically adjusted for
direction of growth and alignment.  The
.B ss_flags
member specifies the
new stack state  and may be set to the following:
.sp
.ne 2
.mk
.na
.B SS_DISABLE
.ad
.RS 14n
.rt
The stack is to be disabled and
.B ss_sp
and
.B ss_size
are ignored.
If
.B SS_DISABLE
is not set, the stack will be enabled.
.RE

.sp
.LP
If
.I oss
is not
.IR NULL ,
it points to a structure specifying the
alternate signal stack that was in effect prior to the call to
.BR sigaltstack() .
The
.B ss_sp
and
.B ss_size
members specify the
base and size of that stack.  The
.B ss_flags
member specifies the
stack's state, and may contain the following values:
.sp
.ne 2
.mk
.na
.B SS_ONSTACK
.ad
.RS 14n
.rt
The thread is currently executing on the alternate signal stack. Attempts
to modify the alternate signal stack while the thread is executing on it
will fail.
.RE

.sp
.ne 2
.mk
.na
.B SS_DISABLE
.ad
.RS 14n
.rt
The alternate signal stack is currently disabled.
.RE

.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B 0
is return. Otherwise,
.B \(mi1
is
returned and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B sigaltstack()
function will fail if:
.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The
.I ss
or
.I oss
argument points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I ss
argument is not a null pointer, and the
.B ss_flags
member
pointed to by
.I ss
contains flags other than
.BR SS_DISABLE .
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
The size of the alternate stack area is less than
.BR MINSIGSTKSZ .
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 10n
.rt
An attempt was made to modify an active stack.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelAsync-Signal-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR getcontext (2),
.BR mmap (2),
.BR sigaction (2),
.BR ucontext.h (3HEAD),
.BR attributes (5),
.BR standards (5)
.SH NOTES
.sp
.LP
The value
.B SIGSTKSZ
is defined to be the number of bytes that would be
used to cover the usual case when allocating an alternate  stack area.  The
value
.B MINSIGSTKSZ
is defined to be the minimum stack size for a signal
handler. In computing an alternate stack size, a program  should add that
amount to its stack requirements to allow for the operating system
overhead.
.sp
.LP
The following code fragment is typically used to allocate an alternate
stack with an adjacent red zone (an unmapped page) to guard against stack
overflow, as with default stacks:
.sp
.in +2
.nf
#include <signal.h>
#include <sys/mman.h>

stack_t sigstk;
sigstk.ss_sp = mmap(NULL, SIGSTKSZ, PROT_READ | PROT_WRITE,
        MAP_PRIVATE | MAP_ANON, -1, 0);
if (sigstk.ss_sp == MAP_FAILED)
        /* error return */;
sigstk.ss_size = SIGSTKSZ;
sigstk.ss_flags = 0;
if (sigaltstack(&sigstk, NULL) < 0)
        perror("sigaltstack");
.fi
.in -2

