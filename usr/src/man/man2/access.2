'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited  All Rights Reserved
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH access 2 "16 Jun 2009" "SunOS 5.11" "System Calls"
.SH NAME
access, faccessat \- determine accessibility of a file
.SH SYNOPSIS
.LP
.nf
#include <unistd.h>
#include <sys/fcntl.h>

\fBint\fR \fBaccess\fR(\fBconst char *\fIpath\fR, \fBint\fR \fIamode\fR);
.fi

.LP
.nf
\fBint\fR \fBfaccessat\fR(\fBint\fR \fIfd\fR, \fBconst char *\fIpath\fR, \fBint\fR \fIamode\fR, \fBint\fR \fIflag\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B access()
function checks the file named by the pathname pointed
to by the
.I path
argument for accessibility according to the bit pattern
contained in
.IR amode ,
using the real user
.B ID
in place of the
effective user
.B ID
and the real group
.B ID
in place of the
effective group ID. This allows a setuid process to verify that the user
running it would have had permission to access this file.
.sp
.LP
The value of
.I amode
is either the bitwise inclusive
.B OR
of the
access permissions to be checked (\fBR_OK\fR,
.BR W_OK ,
.BR X_OK )
or the
existence test,
.BR F_OK .
.sp
.LP
These constants are defined in <\fBunistd.h\fR> as follows:
.sp
.ne 2
.mk
.na
.B R_OK
.ad
.RS 8n
.rt
Test for read permission.
.RE

.sp
.ne 2
.mk
.na
.B W_OK
.ad
.RS 8n
.rt
Test for write permission.
.RE

.sp
.ne 2
.mk
.na
.B X_OK
.ad
.RS 8n
.rt
Test for execute or search permission.
.RE

.sp
.ne 2
.mk
.na
.B F_OK
.ad
.RS 8n
.rt
Check existence of file
.RE

.sp
.LP
See \fBIntro\fR(2) for additional information about "File Access
Permission".
.sp
.LP
If any access permissions are to be checked, each will be checked
individually, as described in
.BR Intro (2).
If the process has appropriate
privileges, an implementation may indicate success for
.B X_OK
even if
none of the execute file permission bits are set.
.sp
.LP
The \fBfaccessat()\fR function is equivalent to the \fBaccess()\fR
function, except in the case where
.I path
specifies a relative path. In
this case the file whose accessibility is to be determined is located
relative to the directory associated with the file descriptor \fIfd\fR
instead of the current working directory.
.sp
.LP
If \fBfaccessat()\fR is passed in the \fIfd\fR parameter the special value
.BR AT_FDCWD ,
defined in
.BR <fcntl.h> ,
the current working directory is
used and the behavior is identical to a call to
.BR access() .
.sp
.LP
Values for
.I flag
are constructed by a bitwise-inclusive OR of flags
from the following list, defined in
.BR <fcntl.h> :
.sp
.ne 2
.mk
.na
.B AT_EACCESS
.ad
.RS 14n
.rt
The checks for accessibility are performed using the effective user and
group IDs instead of the real user and group ID as required in a call to
.BR access() .
.RE

.SH RETURN VALUES
.sp
.LP
If the requested access is permitted,
.B access()
and
\fBfaccessat()\fRsucceed and return
.BR 0 .
Otherwise,
.B \(mi1
is
returned and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B access()
and
.B faccessat()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 16n
.rt
Permission bits of the file mode do not permit the requested access, or
search permission is denied on a component of the path prefix.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 16n
.rt
The
.I path
argument points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 16n
.rt
A signal was caught during the
.B access()
function.
.RE

.sp
.ne 2
.mk
.na
.B ELOOP
.ad
.RS 16n
.rt
Too many symbolic links were encountered in resolving
.IR path ,
or loop
exists in symbolic links encountered during resolution of the
.IR path
argument.
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
The length of the
.I path
argument exceeds {\fBPATH_MAX\fR}, or a
pathname component is longer than {\fBNAME_MAX\fR} while
.B _POSIX_NO_TRUNC
is in effect.
.RE

.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 16n
.rt
A component of
.I path
does not name an existing file or
.I path
is
an empty string.
.RE

.sp
.ne 2
.mk
.na
.B ENOLINK
.ad
.RS 16n
.rt
The
.I path
argument points to a remote machine and the link to that
machine is no longer active.
.RE

.sp
.ne 2
.mk
.na
.B ENOTDIR
.ad
.RS 16n
.rt
A component of the path prefix is not a directory.
.RE

.sp
.ne 2
.mk
.na
.B ENXIO
.ad
.RS 16n
.rt
The
.I path
argument points to a character or block device special file
and the corresponding device has been retired by the fault management
framework.
.RE

.sp
.ne 2
.mk
.na
.B EROFS
.ad
.RS 16n
.rt
Write access is requested for a file on a read-only file system.
.RE

.sp
.LP
The
.B faccessat()
function will fail if:
.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 9n
.rt
The
.I path
argument does not specify an absolute path and the \fIfd\fR
argument is neither
.B AT_FDCWD
nor a valid file descriptor open for
reading or searching.
.RE

.sp
.LP
The
.B access()
and
.B faccessat()
functions may fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 16n
.rt
The value of the
.I amode
argument is invalid.
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
Pathname resolution of a symbolic link produced an intermediate result
whose length exceeds {\fBPATH_MAX\fR}.
.RE

.sp
.ne 2
.mk
.na
.B ETXTBSY
.ad
.RS 16n
.rt
Write access is requested for a pure procedure (shared text) file that is
being executed.
.RE

.sp
.LP
The
.B faccessat()
function may fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 11n
.rt
The value of the
.I flag
argument is not valid.
.RE

.sp
.ne 2
.mk
.na
.B ENOTDIR
.ad
.RS 11n
.rt
The
.I path
argument is not an absolute path and
.I fd
is neither
.B AT_FDCWD
nor a file descriptor associated with a directory.
.RE

.SH USAGE
.sp
.LP
Additional values of
.I amode
other than the set defined in the
description might be valid, for example, if a system has extended access
controls.
.sp
.LP
The purpose of the
.B faccessat()
function is to enable the checking of
the accessibility of files in directories other than the current working
directory without exposure to race conditions. Any part of the path of a
file could be changed in parallel to a call to
.BR access() ,
resulting in
unspecified behavior. By opening a file descriptor for the target directory
and using the
.B faccessat()
function, it can be guaranteed that the file
tested for accessibility is located relative to the desired directory.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelAsync-Signal-Safe
_
StandardSee below.
.TE

.sp
.LP
For
.BR access() ,
see
.BR standards (5).
.SH SEE ALSO
.sp
.LP
.BR Intro (2),
.BR chmod (2),
.BR stat (2),
.BR attributes (5),
.BR standards (5)
