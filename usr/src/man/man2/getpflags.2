'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH getpflags 2 "4 Jun 2009" "SunOS 5.11" "System Calls"
.SH NAME
getpflags, setpflags \- get or set process flags
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <priv.h>

\fBuint_t\fR \fBgetpflags\fR(\fBuint_t\fR \fIflag\fR);
.fi

.LP
.nf
\fBint\fR \fBsetpflags\fR(\fBuint_t\fR \fIflag\fR, \fBuint_t\fR \fIvalue\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.BR getpflags() " and "
.B setpflags()
functions obtain and modify the
current per-process flags.
.sp
.LP
The following values for
.I flag
are supported:
.sp
.ne 2
.mk
.na
.B PRIV_AWARE
.ad
.sp .6
.RS 4n
This one bit flag takes the value of 0 (unset) or 1 (set).  Only if this flag
is set is the current process privilege-aware. A process can attempt to unset
this flag but might fail silently if the observed set invariance condition
cannot be met. Setting this flag is always successful. See
.BR privileges (5)
for a discussion of this flag.
.RE

.sp
.ne 2
.mk
.na
.B PRIV_AWARE_RESET
.ad
.sp .6
.RS 4n
This one bit flag takes the value of 0 (unset) or 1 (set). This causes a
process to pretend it is non- privilege aware. The effective and permitted
privilege set change on the change of the effective uid. When all the uid sets
become the same through \fBsetuid\fR(\fIuid\fR) or through
\fBsetreuid\fR(\fIuid\fR,
.IR uid ),
the effective and permitted set are set
to the intersection between the limit set and the inheritable set. At that
point, both
.B PRIV_AWARE
and
.B PRIV_AWARE_RESET
are unset.
.sp
This flag gets automatically reset when a file becomes privilege aware,
either through calling
.BR setppriv (2)
or by setting
.B PRIV_AWARE
to
1.
.RE

.sp
.ne 2
.mk
.na
.B PRIV_DEBUG
.ad
.sp .6
.RS 4n
This one bit flag takes the value of 0 (unset) or 1 (set).  Only if this flag
is set does the current process have privilege debugging enabled. Processes
can set and unset this flag at will.
.RE

.sp
.ne 2
.mk
.na
.B NET_MAC_AWARE
.ad
.br
.na
.B NET_MAC_AWARE_INHERIT
.ad
.sp .6
.RS 4n
These flags are available only if the system is configured with Trusted
Extensions. These one bit flags each take the value of 0 (unset) or 1 (set).
If the
.B NET_MAC_AWARE
flag is set then the current process is allowed to
communicate with peers at labels that are different than its own, subject to
MAC policy.
.sp
The
.B NET_MAC_AWARE_INHERIT
flag controls the propagation of the
.B NET_MAC_AWARE
flag. When a process performs one of the
.BR exec (2)
functions, the
.B NET_MAC_AWARE
flag is unset unless the
.B NET_MAC_AWARE_INHERIT
is set.
.B NET_MAC_AWARE_INHERIT
is always
unset on one of the
.B exec
functions. The
.B PRIV_NET_MAC_AWARE
privilege is required to set either of these flags.
.RE

.SH RETURN VALUES
.sp
.LP
The
.B getpflags()
returns the value associated with a given per-process
flag. If the
.I flag
argument is invalid, (\fBuint_t\fR)-1 is returned and
.B errno
is set to indicate the error.
.sp
.LP
Upon successful completion,
.B setpflags()
returns 0. Otherwise, -1 is
returned and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.BR getpflags() " and "
.B setpflags()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The value of
.IR flag " or the value to which the "
.I flag
is set is out of
range.
.RE

.sp
.LP
The
.B setpflags()
function will fail if:
.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 9n
.rt
An attempt was made to unset
.B PRIV_AWARE
but the observed set invariance
condition was not met.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelAsync-Signal-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR ppriv (1),
.BR setppriv (2),
.BR attributes (5),
.BR privileges (5)
