'\" te
.\" Copyright 1989 AT&T
.\" Copyright (c) 2001, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Portions Copyright (c) 1992, X/Open Company Limited  All Rights Reserved
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH getcontext 2 "5 Feb 2001" "SunOS 5.11" "System Calls"
.SH NAME
getcontext, setcontext \- get and set current user context
.SH SYNOPSIS
.LP
.nf
#include <ucontext.h>

\fBint\fR \fBgetcontext\fR(\fBucontext_t *\fIucp\fR);
.fi

.LP
.nf
\fBint\fR \fBsetcontext\fR(\fBconst ucontext_t *\fIucp\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B getcontext()
function initializes the structure pointed to by
.I ucp
to the current user context of the calling process.  The
.B ucontext_t
type that
.I ucp
points to defines the user context and
includes the contents of the calling process' machine registers, the signal
mask, and the current execution stack.
.sp
.LP
The
.B setcontext()
function restores the user context pointed to by
.IR ucp .
A successful call to
.B setcontext()
does not return; program
execution resumes at the point specified by the
.I ucp
argument passed to
.BR setcontext() .
The
.I ucp
argument should be created either by a
prior call to
.BR getcontext() ,
or by being passed as an argument to a
signal handler. If the
.I ucp
argument was created with
.BR getcontext() ,
program execution continues as if the corresponding call
of
.B getcontext()
had just returned.  If the
.I ucp
argument was
created with
.BR makecontext "(3C), program execution continues with the"
function passed to
.BR makecontext (3C).
When that function returns, the
process continues as if after a call to
.B setcontext()
with the
.I ucp
argument that was input to
.BR makecontext (3C).
If the
.I
ucp
argument was passed to a signal handler, program execution continues with
the program instruction following the instruction interrupted by the signal.
If the
.B uc_link
member of the
.B ucontext_t
structure pointed to by
the
.I ucp
argument is equal to 0, then this context is the main context,
and the process will exit when this context returns.  The effects of passing
a
.I ucp
argument obtained from any other source are unspecified.
.SH RETURN VALUES
.sp
.LP
On successful completion,
.B setcontext()
does not return and
.B getcontext()
returns
.BR 0 .
Otherwise,
.B \(mi1
is returned.
.SH ERRORS
.sp
.LP
No errors are defined.
.SH USAGE
.sp
.LP
When a signal handler is executed, the current user context is saved and a
new context is created.  If the thread leaves the signal handler via
.BR longjmp (3UCB),
then it is unspecified whether the context at the time
of the corresponding
.BR setjmp "(3UCB) call is restored and thus whether"
future calls to
.B getcontext()
will provide an accurate representation
of the current context, since the context restored by
.BR longjmp (3UCB)
may not contain all the information that
.B setcontext()
requires.
Signal handlers should use
.BR siglongjmp "(3C) instead."
.sp
.LP
Portable applications should not modify or access the
.BR uc_mcontext
member of
.BR ucontext_t .
A portable application cannot assume that
context includes any process-wide static data, possibly including
.BR errno .
Users manipulating contexts should take care to handle these
explicitly when required.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
\fBATTRIBUTE TYPE\fRATTRIBUTE VALUE
_
Interface StabilityStandard
.TE

.SH SEE ALSO
.sp
.LP
.BR sigaction (2),
.BR sigaltstack (2),
.BR sigprocmask (2),
.BR bsd_signal (3C),
.BR makecontext (3C),
.BR setjmp (3UCB),
.BR sigsetjmp (3C),
.BR ucontext.h (3HEAD),
.BR attributes (5),
.BR standards (5)
