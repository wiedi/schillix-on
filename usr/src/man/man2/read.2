'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH read 2 "13 Sep 2007" "SunOS 5.11" "System Calls"
.SH NAME
read, readv, pread \- read from file
.SH SYNOPSIS
.LP
.nf
#include <unistd.h>

\fBssize_t\fR \fBread\fR(\fBint\fR \fIfildes\fR, \fBvoid *\fIbuf\fR, \fBsize_t\fR \fInbyte\fR);
.fi

.LP
.nf
\fBssize_t\fR \fBpread\fR(\fBint\fR \fIfildes\fR, \fBvoid *\fIbuf\fR, \fBsize_t\fR \fInbyte\fR, \fBoff_t\fR \fIoffset\fR);
.fi

.LP
.nf
#include <sys/uio.h>

\fBssize_t\fR \fBreadv\fR(\fBint\fR \fIfildes\fR, \fBconst struct iovec *\fIiov\fR, \fBint\fR \fIiovcnt\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B read()
function attempts to read
.I nbyte
bytes from the file
associated with the open file descriptor,
.IR fildes ,
into the buffer
pointed to by
.IR buf .
.sp
.LP
If
.I nbyte
is 0,
.B read()
returns
.B 0
and has no other
results.
.sp
.LP
On files that support seeking (for example, a regular file), the
.B read()
starts at a position in the file given by the file offset
associated with
.IR fildes .
The file offset is incremented by the number of
bytes actually read.
.sp
.LP
Files that do not support seeking (for example, terminals) always read from
the current position. The value of a file offset associated with such a file
is undefined.
.sp
.LP
If
.I fildes
refers to a socket,
.B read()
is equivalent to
.BR recv (3SOCKET)
with no flags set.
.sp
.LP
No data transfer will occur past the current end-of-file.  If the starting
position is at or after the end-of-file,
.B 0
will be returned. If the
file refers to a device special file, the result of subsequent
.B read()
requests is implementation-dependent.
.sp
.LP
When attempting to read from a regular file with mandatory file/record
locking set (see
.BR chmod (2)),
and there is a write lock owned by another
process on the segment of the file to be read:
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NDELAY
or
.B O_NONBLOCK
is set,
.B read()
returns
\fB\(mi1\fR and sets
.B errno
to
.BR EAGAIN .
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NDELAY
and
.B O_NONBLOCK
are clear,
.B read()
sleeps until
the blocking record lock is removed.
.RE
.sp
.LP
When attempting to read from an empty pipe (or FIFO):
.RS +4
.TP
.ie t \(bu
.el o
If no process has the pipe open for writing,
.B read()
returns
.B 0
to
indicate end-of-file.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If some process has the pipe open for writing and
.B O_NDELAY
is set,
.B read()
returns
.BR 0 .
.RE
.RS +4
.TP
.ie t \(bu
.el o
If some process has the pipe open for writing and
.B O_NONBLOCK
is set,
.B read()
returns \fB\(mi1\fR and sets
.B errno
to
.BR EAGAIN .
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NDELAY
and
.B O_NONBLOCK
are clear,
.B read()
blocks until
data is written to the pipe or the pipe is closed by all processes that had
opened the pipe for writing.
.RE
.sp
.LP
When attempting to read a file associated with a terminal that has no data
currently available:
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NDELAY
is set,
.B read()
returns
.BR 0 .
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NONBLOCK
is set,
.B read()
returns \fB\(mi1\fR and sets
.B errno
to
.BR EAGAIN .
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NDELAY
and
.B O_NONBLOCK
are clear,
.B read()
blocks until
data become available.
.RE
.sp
.LP
When attempting to read a file associated with a socket or a stream that is
not a pipe, a FIFO, or a terminal,  and the file has no data currently
available:
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NDELAY
or
.B O_NONBLOCK
is set,
.B read()
returns
\fB\(mi1\fR and sets
.B errno
to
.BR EAGAIN .
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NDELAY
and
.B O_NONBLOCK
are clear,
.B read()
blocks until
data becomes available.
.RE
.sp
.LP
The
.B read()
function reads data previously written to a file.  If any
portion of a regular file prior to the end-of-file has not been written,
.B read()
returns bytes with value 0.  For example,
.BR lseek (2)
allows
the file offset to be set beyond the end of existing data in the file. If
data is later written at this point, subsequent reads in the gap between the
previous end of data and the newly written data will return bytes with value
0 until data is written into the gap.
.sp
.LP
For regular files, no data transfer will occur past the offset maximum
established in the open file description associated with
.IR fildes .
.sp
.LP
Upon successful completion, where
.I nbyte
is greater than 0,
.B read()
will mark for update the
.B st_atime
field of the file, and
return the number of bytes read. This number will never be greater than
.IR nbyte .
The value returned may be less than
.I nbyte
if the number of
bytes left in the file is less than
.IR nbyte ,
if the
.B read()
request
was interrupted by a signal, or if the file is a pipe or FIFO or special file
and has fewer than
.I nbyte
bytes immediately available for reading.  For
example, a
.B read()
from a file associated with a terminal may return one
typed line of data.
.sp
.LP
If a
.B read()
is interrupted by a signal before it reads any data, it
will return \fB\(mi1\fR with
.B errno
set to
.BR EINTR .
.sp
.LP
If a
.B read()
is interrupted by a signal after it has successfully read
some data, it will return the number of bytes read.
.sp
.LP
A
.B read()
from a streams file can read data in three different modes:
byte-stream mode, message-nondiscard mode, and message-discard mode.  The
default is byte-stream mode.  This can be changed using the
.B I_SRDOPT
.BR ioctl (2)
.RB "request, and can be tested with the" " I_GRDOPT"
.BR ioctl() .
In byte-stream mode,
.B read()
retrieves data from the
stream until as many bytes as were requested are transferred, or until there
is no more data to be retrieved.  Byte-stream mode ignores message
boundaries.
.sp
.LP
In streams message-nondiscard mode,
.B read()
retrieves data until as
many bytes as were requested are transferred, or until a message boundary is
reached. If
.B read()
does not retrieve all the data in a message, the
remaining data is left on the stream, and can be retrieved by the next
.B read()
call.  Message-discard mode also retrieves data until as many
bytes as were requested are transferred, or a message boundary is reached.
However, unread data remaining in a message after the
.B read()
returns
is discarded, and is not available for a subsequent
.BR read() ,
.B readv()
or
.BR getmsg (2)
call.
.sp
.LP
How
.B read()
handles zero-byte streams messages is determined by the
current read mode setting.  In byte-stream mode,
.B read()
accepts data
until it has read
.I nbyte
bytes, or until there is no more data to read,
or until a zero-byte message block is encountered. The
.B read()
function
then returns the number of bytes read, and places the zero-byte message back
on the stream to be retrieved by the next
.BR read() ,
.B readv()
or
.BR getmsg (2).
In message-nondiscard mode or message-discard mode, a
zero-byte message returns
.B 0
and the message is removed from the stream.
When a zero-byte message is read as the first message on a stream, the
message is removed from the stream and
.B 0
is returned, regardless of the
read mode.
.sp
.LP
A
.B read()
from a streams file returns the data in the message at the
front of the stream head read queue, regardless of the priority band of the
message.
.sp
.LP
By default, streams are in control-normal mode, in which a
.B read()
from
a streams file can only process messages that contain a data part but do not
contain a control part.  The
.B read()
fails if a message containing a
control part is encountered at the stream head.  This default action can be
changed by placing the stream in either control-data mode or control-discard
mode with the
.B "I_SRDOPT ioctl()"
command.  In control-data mode,
.B read()
converts any control part to data and passes it to the
application before passing any data part originally present in the same
message. In control-discard mode,
.B read()
discards message control parts
but returns to the process any data part in the message.
.sp
.LP
In addition,
.B read()
and
.B readv()
will fail if the stream head had
processed an asynchronous error before the call.  In this case, the value of
.B errno
does not reflect the result of
.B read()
or
.B readv()
but
reflects the prior error. If a hangup occurs on the stream being read,
.B read()
continues to operate normally until the stream head read queue
is empty. Thereafter, it returns
.BR 0 .
.SS "\fBreadv()\fR"
.sp
.LP
The
.B readv()
function is equivalent to
.BR read() ,
but places the
input data into the
.I iovcnt
buffers specified by the members of the
\fIiov\fR array: \fIiov\fR[\fB0\fR], \fIiov\fR[\fB1\fR], \&.\|.\|.,
\fIiov\fR[\fIiovcnt\fR\(mi1]. The
.I iovcnt
argument is valid if greater
than 0 and less than or equal to
.RB { IOV_MAX }.
.sp
.LP
The
.B iovec
structure contains the following members:
.sp
.in +2
.nf
caddr_t   iov_base;
int       iov_len;
.fi
.in -2

.sp
.LP
Each
.B iovec
entry specifies the base address and length of an area in
memory where data should be placed.  The
.B readv()
function always fills
an area completely before proceeding to the next.
.sp
.LP
Upon successful completion,
.B readv()
marks for update the
.B st_atime
field of the file.
.SS "\fBpread()\fR"
.sp
.LP
The
.B pread()
function performs the same action as
.BR read() ,
except
that it reads from a given position in the file without changing the file
pointer. The first three arguments to
.B pread()
are the same as
.B read()
with the addition of a fourth argument
.I offset
for the
desired position inside the file.
.B pread()
will read up to the maximum
offset value that can be represented in an
.B off_t
for regular files. An
attempt to perform a
.B pread()
on a file that is incapable of seeking
results in an error.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B read()
and
.B readv()
return a
non-negative integer indicating the number of bytes actually read. Otherwise,
the functions return \fB\(mi1\fR and set
.B errno
to indicate the error.
.SH ERRORS
.sp
.LP
The
.BR read() ,
.BR readv() ,
and
.B pread()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 11n
.rt
Mandatory file/record locking was set,
.B O_NDELAY
or
.BR O_NONBLOCK
was set, and there was a blocking record lock; total amount of system memory
available when reading using raw I/O is temporarily insufficient; no data is
waiting to be read on a file associated with a tty device and
.B O_NONBLOCK
was set; or no message is waiting to be read on a stream and
.B O_NDELAY
or
.B O_NONBLOCK
was set.
.RE

.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 11n
.rt
The
.I fildes
argument is not a valid file descriptor open for reading.
.RE

.sp
.ne 2
.mk
.na
.B EBADMSG
.ad
.RS 11n
.rt
Message waiting to be read on a stream is not a data message.
.RE

.sp
.ne 2
.mk
.na
.B EDEADLK
.ad
.RS 11n
.rt
The read was going to go to sleep and cause a deadlock to occur.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 11n
.rt
A signal was caught during the read operation and no data was transferred.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 11n
.rt
An attempt was made to read from a stream linked to a multiplexor.
.RE

.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 11n
.rt
A physical I/O error has occurred, or the process is in a background process
group and is attempting to read from its controlling terminal, and either the
process is ignoring or blocking the
.B SIGTTIN
signal or the process group
of the process is orphaned.
.RE

.sp
.ne 2
.mk
.na
.B EISDIR
.ad
.RS 11n
.rt
The
.I fildes
argument refers to a directory on a file system type that
does not support read operations on directories.
.RE

.sp
.ne 2
.mk
.na
.B ENOLCK
.ad
.RS 11n
.rt
The system record lock table was full, so the
.B read()
or
.BR readv()
could not go to sleep until the blocking record lock was removed.
.RE

.sp
.ne 2
.mk
.na
.B ENOLINK
.ad
.RS 11n
.rt
The
.I fildes
argument is on a remote machine and the link to that
machine is no longer active.
.RE

.sp
.ne 2
.mk
.na
.B ENXIO
.ad
.RS 11n
.rt
The device associated with
.I fildes
is a block special or character
special file and the value of the file pointer is out of range.
.RE

.sp
.LP
The
.B read()
and
.B pread()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The
.I buf
argument points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I nbyte
argument overflowed an
.BR ssize_t .
.RE

.sp
.LP
The
.B read()
and
.B readv()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EOVERFLOW
.ad
.RS 13n
.rt
The file is a regular file,
.I nbyte
is greater than 0, the starting
position is before the end-of-file, and the starting position is greater than
or equal to the offset maximum established in the open file description
associated with
.IR fildes .
.RE

.sp
.LP
The
.B readv()
function may fail if:
.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The
.I iov
argument points outside the allocated address space.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I iovcnt
argument was less than or equal to
.B 0
or greater than
.RB { IOV_MAX }.
See
.BR Intro (2)
for a definition of
.RB { IOV_MAX }).
.sp
One of the
.B iov_len
values in the
.I iov
array was negative, or the
sum of the
.B iov_len
values in the
.I iov
array overflowed an
.BR ssize_t .
.RE

.sp
.LP
The
.B pread()
function will fail and the file pointer remain unchanged
if:
.sp
.ne 2
.mk
.na
.B ESPIPE
.ad
.RS 10n
.rt
The
.I fildes
argument is associated with a pipe or FIFO.
.RE

.SH USAGE
.sp
.LP
The
.B pread()
function has a transitional interface for 64-bit file
offsets. See
.BR lf64 (5).
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-Level\fBread()\fR is Async-Signal-Safe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
.BR Intro (2),
.BR chmod (2),
.BR creat (2),
.BR dup (2),
.BR fcntl (2),
.BR getmsg (2),
.BR ioctl (2),
.BR lseek (2),
.BR open (2),
.BR pipe (2),
.BR recv (3SOCKET),
.BR attributes (5),
.BR lf64 (5),
.BR standards (5),
.BR streamio (7I),
.BR termio (7I)
