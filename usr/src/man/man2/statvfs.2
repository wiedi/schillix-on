'\" te
.\" Copyright 1989 AT&T.  Copyright (c) 2004, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH statvfs 2 "22 Mar 2004" "SunOS 5.11" "System Calls"
.SH NAME
statvfs, fstatvfs \- get file system information
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/statvfs.h>

\fBint\fR \fBstatvfs\fR(\fBconst char *restrict\fR \fIpath\fR, \fBstruct statvfs *restrict\fR \fIbuf\fR);
.fi

.LP
.nf
\fBint\fR \fBfstatvfs\fR(\fBint\fR \fIfildes\fR, \fBstruct statvfs *\fIbuf\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B
statvfs()
function returns a "generic superblock" describing a
file system; it can be used to acquire information about mounted file
systems. The
.I buf
argument is a pointer to a structure (described
below) that is filled by the function.
.sp
.LP
The
.I path
argument should name a file that resides on that file
system. The file system type is known to the operating system. Read, write,
or execute permission for the named file is not required, but all
directories listed in the path name leading to the file must be
searchable.
.sp
.LP
The
.BR statvfs " structure pointed to by "
.I buf
includes the following
members:
.sp
.in +2
.nf
u_long      f_bsize;             /* preferred file system block size */
u_long      f_frsize;            /* fundamental filesystem block
                                    (size if supported) */
fsblkcnt_t  f_blocks;            /* total # of blocks on file system
                                    in units of f_frsize */
fsblkcnt_t  f_bfree;             /* total # of free blocks */
fsblkcnt_t  f_bavail;            /* # of free blocks avail to
                                    non-privileged user */
fsfilcnt_t  f_files;             /* total # of file nodes (inodes) */
fsfilcnt_t  f_ffree;             /* total # of free file nodes */
fsfilcnt_t  f_favail;            /* # of inodes avail to
                                    non-privileged user*/
u_long      f_fsid;              /* file system id (dev for now) */
char        f_basetype[FSTYPSZ]; /* target fs type name,
                                    null-terminated */
u_long      f_flag;              /* bit mask of flags */
u_long      f_namemax;           /* maximum file name length */
char        f_fstr[32];          /* file system specific string */
u_long      f_filler[16];        /* reserved for future expansion */
.fi
.in -2

.sp
.LP
The
.B f_basetype
member contains a null-terminated FSType name of the
mounted target.
.sp
.LP
The following values can be returned in the
.B f_flag
field:
.sp
.in +2
.nf
ST_RDONLY    0x01    /* read-only file system */
ST_NOSUID    0x02    /* does not support setuid/setgid semantics */
ST_NOTRUNC   0x04    /* does not truncate file names longer than
                        NAME_MAX */
.fi
.in -2

.sp
.LP
The
.B fstatvfs()
function is similar to
.BR statvfs() ,
except that
the file named by
.I path
in
.B statvfs()
is instead identified by an
open file descriptor
.I fildes
obtained from a successful
.BR open (2),
.BR creat (2),
.BR dup (2),
.BR fcntl (2),
or
.BR pipe (2)
function
call.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B 0
is returned. Otherwise,
.B \(mi1
is
returned and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.BR statvfs() " and "
.B fstatvfs()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EOVERFLOW
.ad
.RS 13n
.rt
One of the values to be returned cannot be represented correctly in the
structure pointed to by
.IR buf .
.RE

.sp
.LP
The
.B statvfs()
function will fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 16n
.rt
Search permission is denied on a component of the path prefix.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 16n
.rt
The
.I path
or
.I buf
argument points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 16n
.rt
A signal was caught during the execution of the
.B statvfs()
function.
.RE

.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 16n
.rt
An I/O error occurred while reading the file system.
.RE

.sp
.ne 2
.mk
.na
.B ELOOP
.ad
.RS 16n
.rt
Too many symbolic links were encountered in translating
.IR path .
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
The length of a
.I path
component exceeds
.B NAME_MAX
characters, or
the length of
.I path
The exceeds
.B PATH_MAX
characters.
.RE

.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 16n
.rt
Either a component of the path prefix or the file referred to by
.IR path
does not exist.
.RE

.sp
.ne 2
.mk
.na
.B ENOLINK
.ad
.RS 16n
.rt
The
.I path
argument points to a remote machine and the link to that
machine is no longer active.
.RE

.sp
.ne 2
.mk
.na
.B ENOTDIR
.ad
.RS 16n
.rt
A component of the path prefix of
.I path
is not a directory.
.RE

.sp
.LP
The
.B fstatvfs()
function will fail if:
.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 10n
.rt
The
.I fildes
argument is not an open file descriptor.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The
.I buf
argument points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 10n
.rt
A signal was caught during the execution of the
.B fstatvfs()
function.
.RE

.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 10n
.rt
An I/O error occurred while reading the file system.
.RE

.SH USAGE
.sp
.LP
The
.BR statvfs() " and "
.B fstatvfs()
functions have transitional
interfaces for 64-bit file offsets.  See
.BR lf64 (5).
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
.TE

.SH SEE ALSO
.sp
.LP
.BR chmod (2),
.BR chown (2),
.BR creat (2),
.BR dup (2),
.BR fcntl (2),
.BR link (2),
.BR mknod (2),
.BR open (2),
.BR pipe (2),
.BR read (2),
.BR time (2),
.BR unlink (2),
.BR utime (2),
.BR write (2),
.BR attributes (5),
.BR lf64 (5),
.BR standards (5)
.SH BUGS
.sp
.LP
The values returned for
.BR f_files ,
.BR f_ffree ,
and
.B f_favail
may not be valid for
.B NFS
mounted file systems.
