'\" te
.\" Copyright 1989, AT&.T. Copyright (c) 2005, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH lseek 2 "4 May 2005" "SunOS 5.11" "System Calls"
.SH NAME
lseek \- move read/write file pointer
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <unistd.h>

\fBoff_t\fR \fBlseek\fR(\fBint\fR \fIfildes\fR, \fBoff_t\fR \fIoffset\fR, \fBint\fR \fIwhence\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B lseek()
function sets the file pointer associated with the open
file descriptor specified by
.I fildes
as follows:
.RS +4
.TP
.ie t \(bu
.el o
If
.I whence
is
.BR SEEK_SET ,
the pointer is set to
.I offset
bytes.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.I whence
is
.BR SEEK_CUR ,
the pointer is set to its current
location plus
.IR offset .
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.I whence
is
.BR SEEK_END ,
the pointer is set to the size of the
file plus
.IR offset .
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.I whence
is
.BR SEEK_HOLE ,
the offset of the start of the next
hole greater than or equal to the supplied offset is returned. The
definition of a hole is provided near the end of the DESCRIPTION.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.I whence
is
.BR SEEK_DATA ,
the file pointer is set to the start of
the next non-hole file region greater than or equal to the supplied
offset.
.RE
.sp
.LP
The symbolic constants
.BR SEEK_SET ,
.BR SEEK_CUR ,
.BR SEEK_END ,
.BR SEEK_HOLE ,
and
.B SEEK_DATA
are defined in the header
.RB < unistd.h >.
.sp
.LP
Some devices are incapable of seeking. The value of the file pointer
associated with such a device is undefined.
.sp
.LP
The
.B lseek()
function allows the file pointer to be set beyond the
existing data in the file. If data are later written at this point,
subsequent reads in the gap between the previous end of data and the newly
written data will return bytes of value 0 until data are written into the
gap.
.sp
.LP
If
.IR fildes " is a remote file descriptor and "
.I offset
is negative,
.B lseek()
returns the file pointer  even if it is negative. The
.B lseek()
function will not, by itself, extend the size of a file.
.sp
.LP
If
.I fildes
refers to a shared memory object,
.B lseek()
behaves as
if
.I fildes
referred to a regular file.
.sp
.LP
A "hole" is defined as a contiguous range of bytes in a file, all having
the value of zero, but not all zeros in a file are guaranteed to be
represented as holes returned with
.BR SEEK_HOLE .
Filesystems are allowed
to expose ranges of zeros with
.BR SEEK_HOLE ,
but not required to.
Applications can use
.B SEEK_HOLE
to optimise their behavior for ranges
of zeros, but must not depend on it to find all such ranges in a file. The
existence of a hole at the end of every data region allows for easy
programming and implies that a virtual hole exists at the end of the file.
.RB "Applications should use " fpathconf ( _PC_MIN_HOLE_SIZE )
or
\fBpathconf\fR(\fB_PC_MIN_HOLE_SIZE\fR) to determine if a filesystem
supports
.BR SEEK_HOLE .
See
.BR fpathconf (2).
.sp
.LP
For filesystems that do not supply information about holes, the file will
be represented as one entire data region.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, the resulting offset, as measured in bytes from
the beginning of the file, is returned. Otherwise, \fB(off_t)\(mi1\fR is
returned, the file offset remains unchanged, and
.B errno
is set to
indicate the error.
.SH ERRORS
.sp
.LP
The
.B lseek()
function will fail if:
.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 13n
.rt
The
.I fildes
argument is not an open file descriptor.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 13n
.rt
The
.I whence
argument is not
.BR SEEK_SET ,
.BR SEEK_CUR ,
or
.BR SEEK_END ;
or the
.I fildes
argument is not a remote file descriptor
and the resulting file pointer would be negative.
.RE

.sp
.ne 2
.mk
.na
.B ENXIO
.ad
.RS 13n
.rt
For
.BR SEEK_DATA ,
there are no more data regions past the supplied
offset. For
.BR SEEK_HOLE ,
there are no more holes past the supplied
offset.
.RE

.sp
.ne 2
.mk
.na
.B EOVERFLOW
.ad
.RS 13n
.rt
The resulting file offset would be a value which cannot be represented
correctly in an object of type
.B off_t
for regular files.
.RE

.sp
.ne 2
.mk
.na
.B ESPIPE
.ad
.RS 13n
.rt
The
.I fildes
argument is associated with a pipe, a FIFO, or a socket.
.RE

.SH USAGE
.sp
.LP
The
.B lseek()
function has a transitional interface for 64-bit file
offsets. See
.BR lf64 (5).
.sp
.LP
In multithreaded applications, using
.B lseek()
in conjunction with a
.BR read (2)
or
.BR write (2)
call on a file descriptor shared by more
than one thread is not an atomic operation.  To ensure atomicity, use
.B pread()
or
.BR pwrite() .
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelAsync-Signal-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR creat (2),
.BR dup (2),
.BR fcntl (2),
.BR fpathconf (2),
.BR open (2),
.BR read (2),
.BR write (2),
.BR attributes (5),
.BR lf64 (5),
.BR standards (5)
