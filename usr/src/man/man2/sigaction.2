'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH sigaction 2 "23 Mar 2005" "SunOS 5.11" "System Calls"
.SH NAME
sigaction \- detailed signal management
.SH SYNOPSIS
.LP
.nf
#include <signal.h>

\fBint\fR \fBsigaction\fR(\fBint\fR \fIsig\fR, \fBconst struct sigaction *restrict\fR \fIact\fR,
     \fBstruct sigaction *restrict\fR \fIoact\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B sigaction()
function allows the calling process to examine or
specify the action to be taken on delivery of a specific signal. See
.BR signal.h (3HEAD)
for an explanation of general signal concepts.
.sp
.LP
The
.I sig
argument specifies the signal and can be assigned any of the
signals specified in
.BR signal.h "(3HEAD) except "
.B SIGKILL
and
.BR SIGSTOP .
.sp
.LP
If the argument
.I act
is not
.IR NULL ,
it points to a structure
specifying the new action to be taken when delivering
.IR sig .
If the
argument
.I oact
is not
.IR NULL ,
it points to a structure where the
action previously associated with
.I sig
is to be stored on return from
.BR sigaction() .
.sp
.LP
The
.B sigaction
structure includes the following members:
.sp
.in +2
.nf
void      (*sa_handler)(\|);
void      (*sa_sigaction)(int, siginfo_t *, void *);
sigset_t  sa_mask;
int       sa_flags;
.fi
.in -2

.sp
.LP
The storage occupied by
.B sa_handler
and
.B sa_sigaction
may
overlap, and a standard-conforming application (see
.BR standards (5))
must
not use both simultaneously.
.sp
.LP
The
.B sa_handler
member identifies the action to be associated with the
specified signal, if the
.B SA_SIGINFO
flag (see below) is cleared in
the \fBsa_flags\fR field of the sigaction structure. It may take any of the
values specified in \fBsignal.h\fR(3HEAD) or that of a user specified signal
handler. If the
.B SA_SIGINFO
flag is set in the \fBsa_flags\fR field,
the
.B sa_sigaction
field specifies a signal-catching function.
.sp
.LP
The
.B sa_mask
member specifies a set of signals to be blocked while the
signal handler is active. On entry to the signal handler, that set of
signals is added to the set of signals already being blocked when the signal
is delivered. In addition, the signal that caused the handler to be executed
will also be blocked, unless the
.B SA_NODEFER
flag has been specified.
\fBSIGSTOP\fR and  \fBSIGKILL\fR cannot be blocked (the system silently
enforces this restriction).
.sp
.LP
The \fBsa_flags\fR member specifies a set of flags used to modify the
delivery of the signal. It is formed by a logical
.B OR
of any of the
following values:
.sp
.ne 2
.mk
.na
.B SA_ONSTACK
.ad
.RS 16n
.rt
If set and the signal is caught, and if the thread that is chosen to
processes a delivered signal has an alternate signal stack declared with
.BR sigaltstack (2),
then it will process the signal on that stack.
Otherwise, the signal is delivered on the thread's normal stack.
.RE

.sp
.ne 2
.mk
.na
.B SA_RESETHAND
.ad
.RS 16n
.rt
If set and the signal is caught, the disposition of the signal is reset to
\fBSIG_DFL\fR and the signal will not be blocked on entry to the signal
handler (\fBSIGILL\fR,
.BR SIGTRAP ,
and
.B SIGPWR
cannot be
automatically reset when delivered; the system silently enforces this
restriction).
.RE

.sp
.ne 2
.mk
.na
.B SA_NODEFER
.ad
.RS 16n
.rt
If set and the signal is caught, the signal will not be automatically
blocked by the kernel while it is being caught.
.RE

.sp
.ne 2
.mk
.na
.B SA_RESTART
.ad
.RS 16n
.rt
If set and the signal is caught, functions that are interrupted by the
execution of this signal's handler are transparently restarted by the
system, namely
.BR fcntl (2),
.BR ioctl (2),
.BR wait (3C),
.BR waitid (2),
and the following functions on slow devices like terminals:
\fBgetmsg()\fR and \fBgetpmsg()\fR (see
.BR getmsg (2));
.B putmsg()
and
.B putpmsg()
(see
.BR putmsg (2));
.BR pread() ,
.BR read() ,
and
\fBreadv()\fR (see
.BR read (2));
.BR pwrite() ,
.BR write() ,
and
\fBwritev()\fR (see
.BR write (2));
.BR recv() ,
.BR recvfrom() ,
and
\fBrecvmsg()\fR (see \fBrecv\fR(3SOCKET)); and
.BR send() ,
.BR sendto() ,
and
.B sendmsg()
(see \fBsend\fR(3SOCKET)). Otherwise, the function
returns an
.B EINTR
error.
.RE

.sp
.ne 2
.mk
.na
.B SA_SIGINFO
.ad
.RS 16n
.rt
If cleared and the signal is caught,
.I sig
is passed as the only
argument to the signal-catching function. If set and the signal is caught,
two additional arguments are passed to the signal-catching function.  If the
second argument is not equal to
.IR NULL ,
it points to a \fBsiginfo_t\fR
structure containing the reason why the signal was generated (see
\fBsiginfo.h\fR(3HEAD)); the third argument points to a \fBucontext_t\fR
structure containing the receiving process's context when the signal was
delivered (see
.BR ucontext.h (3HEAD)).
.RE

.sp
.ne 2
.mk
.na
.B SA_NOCLDWAIT
.ad
.RS 16n
.rt
If set and
.I sig
equals
.BR SIGCHLD ,
the system will not create
zombie processes when children of the calling process exit. If the calling
process subsequently issues a \fBwait\fR(3C), it blocks until all of the
calling process's child processes terminate, and then returns \fB\(mi1\fR
with
.B errno
set to
.BR ECHILD .
.RE

.sp
.ne 2
.mk
.na
.B SA_NOCLDSTOP
.ad
.RS 16n
.rt
If set and
.I sig
equals
.BR SIGCHLD ,
\fBSIGCHLD\fR will not be sent
to the calling process when its child processes stop or continue.
.RE

.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B 0
is returned. Otherwise,
.B \(mi1
is
returned,
.B errno
is set to indicate the error, and no new signal
handler is installed.
.SH ERRORS
.sp
.LP
The
.B sigaction()
function will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The value of the
.I sig
argument is not a valid signal number or is
equal to
.B SIGKILL
or
.BR SIGSTOP .
In addition, if in a multithreaded
process, it is equal to
.BR SIGWAITING ,
.BR SIGCANCEL ,
or
.BR SIGLWP .
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelAsync-Signal-Safe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
.BR kill (1),
.BR Intro (2),
.BR exit (2),
.BR fcntl (2),
.BR getmsg (2),
.BR ioctl (2),
.BR kill (2),
.BR pause (2),
.BR putmsg (2),
.BR read (2),
.BR sigaltstack (2),
.BR sigprocmask (2),
.BR sigsend (2),
.BR sigsuspend (2),
.BR waitid (2),
.BR write (2),
.BR recv (3SOCKET),
.BR send (3SOCKET),
.BR siginfo.h (3HEAD),
.BR signal (3C),
.BR signal.h (3HEAD),
.BR sigsetops (3C),
.BR ucontext.h (3HEAD),
.BR wait (3C),
.BR attributes (5),
.BR standards (5)
.SH NOTES
.sp
.LP
The handler routine can be declared:
.sp
.in +2
.nf
void handler (int \fIsig\fR, siginfo_t *\fIsip\fR, ucontext_t *\fIucp\fR);
.fi
.in -2

.sp
.LP
The
.I sig
argument is the signal number. The
.I sip
argument is a
pointer (to space on the stack) to a \fBsiginfo_t\fR structure, which
provides additional detail about the delivery of the signal. The \fIucp\fR
.RB "argument is a pointer (again to space on the stack) to a" " ucontext_t"
structure (defined in <\fBsys/ucontext.h\fR>) which contains the context
from before the signal.  It is not recommended that
.I ucp
be used by the
handler to restore the context from before the signal delivery.
