'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1994, X/Open Company Limited.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH getrlimit 2 "21 Aug 2006" "SunOS 5.11" "System Calls"
.SH NAME
getrlimit, setrlimit \- control maximum system resource consumption
.SH SYNOPSIS
.LP
.nf
#include <sys/resource.h>

\fBint\fR \fBgetrlimit\fR(\fBint\fR \fIresource\fR, \fBstruct rlimit *\fIrlp\fR);
.fi

.LP
.nf
\fBint\fR \fBsetrlimit\fR(\fBint\fR \fIresource\fR, \fBconst struct rlimit *\fIrlp\fR);
.fi

.SH DESCRIPTION
.sp
.LP
Limits on the consumption of a variety of system resources by a process and
each process it creates may be obtained with the
.B getrlimit()
and set
with
.B setrlimit()
functions.
.sp
.LP
Each call to either
.B getrlimit()
or
.B setrlimit()
identifies a
specific resource to be operated upon as well as a resource limit. A resource
limit is a pair of values:  one specifying the current (soft) limit, the other
a maximum (hard) limit. Soft limits may be changed by a process to any value
that is less than or equal to the hard limit. A process may (irreversibly)
lower its hard limit to any value that is greater than or equal to the soft
limit. Only a process with {\fBPRIV_SYS_RESOURCE\fR} asserted in the effective
set can raise a hard limit. Both hard and soft limits can be changed in a
single call to
.B setrlimit()
subject to the constraints described above.
Limits may have an "infinite" value of \fBRLIM_INFINITY\fR. The \fIrlp\fR
argument is a pointer to
.B "struct rlimit"
that includes the following
members:
.sp
.in +2
.nf
rlim_t    rlim_cur;     /* current (soft) limit */
rlim_t    rlim_max;     /* hard limit */
.fi
.in -2

.sp
.LP
The type
.B rlim_t
is an arithmetic data type to which objects of type
.BR int ,
.BR size_t ,
and  \fBoff_t\fR can be cast without loss of
information.
.sp
.LP
The possible resources, their descriptions, and the actions taken when the
current limit is exceeded are summarized as follows:
.sp
.ne 2
.mk
.na
.B RLIMIT_CORE
.ad
.RS 17n
.rt
The maximum size of a core file in bytes that may be created by a process. A
limit of 
.B 0
will prevent the creation of a core file. The writing of a
core file will terminate at this size.
.RE

.sp
.ne 2
.mk
.na
.B RLIMIT_CPU
.ad
.RS 17n
.rt
The maximum amount of CPU time in seconds used by a process. This is a soft
limit only.  The
.B SIGXCPU
signal is sent to the process. If the process
is holding or ignoring
.BR SIGXCPU ,
the behavior is scheduling class
defined.
.RE

.sp
.ne 2
.mk
.na
.B RLIMIT_DATA
.ad
.RS 17n
.rt
The maximum size of a process's heap in bytes.  The
.BR brk (2)
function
will fail with 
.B errno
set to 
.BR ENOMEM .
.RE

.sp
.ne 2
.mk
.na
.B RLIMIT_FSIZE
.ad
.RS 17n
.rt
The maximum size of a file in bytes that may be created by a process. A limit
of
.B 0
will prevent the creation of a file.  The
.B SIGXFSZ
signal is
sent to the process. If the process is holding or ignoring  \fBSIGXFSZ\fR,
continued attempts to increase the size of a file beyond the limit will fail
with
.B errno
set to 
.BR EFBIG .
.RE

.sp
.ne 2
.mk
.na
.B RLIMIT_NOFILE
.ad
.RS 17n
.rt
One more than the maximum value that the system may assign to a newly created
descriptor. This limit constrains the number of file descriptors that a
process may create.
.RE

.sp
.ne 2
.mk
.na
.B RLIMIT_STACK
.ad
.RS 17n
.rt
The maximum size of a process's stack in bytes. The system will not
automatically grow the stack beyond this limit.
.sp
Within a process,
.B setrlimit()
will increase the limit on the size of
your stack, but will not move current memory segments to allow for that
growth. To guarantee that the process stack can grow to the limit, the limit
must be altered prior to the execution of the process in which the new stack
size is to be used.
.sp
Within a multithreaded process,
.B setrlimit()
has no impact on the stack
size limit for the calling thread if the calling thread is not the main
thread. A call to
.B setrlimit()
for
.B RLIMIT_STACK
impacts only the
main thread's stack, and should be made only from the main thread, if at
all.
.sp
The
.B SIGSEGV
signal is sent to the process. If the process is holding or
ignoring
.BR SIGSEGV ,
or is catching 
.B SIGSEGV
and has not made
arrangements to use an alternate stack (see
.BR sigaltstack (2)),
the
disposition of 
.B SIGSEGV
will be set to 
.B SIG_DFL
before it is
sent.
.RE

.sp
.ne 2
.mk
.na
.B RLIMIT_VMEM
.ad
.RS 17n
.rt
The maximum size of a process's mapped address space in bytes.  If this limit
is exceeded, the
.BR brk (2)
and 
.BR mmap (2)
functions will fail with
\fBerrno\fR set to
.BR ENOMEM .
In addition, the automatic stack growth will
fail with the effects outlined above.
.RE

.sp
.ne 2
.mk
.na
.B RLIMIT_AS
.ad
.RS 17n
.rt
This is the maximum size of a process's total available memory, in bytes.  If
this limit is exceeded, the
.BR brk (2),
.BR malloc (3C),
.BR mmap (2)
and
.BR sbrk (2)
functions will fail with
.B errno
set to
.BR ENOMEM .
In
addition, the automatic stack growth will fail with the effects outlined
above.
.RE

.sp
.LP
Because limit information is stored in the per-process information, the shell
builtin
.B ulimit
command must directly execute this system call if it is
to affect all future processes created by the shell.
.sp
.LP
The value of the current limit of the following resources affect these
implementation defined parameters:
.sp

.sp
.TS
tab();
cw(2.75i) cw(2.75i)
lw(2.75i) lw(2.75i)
.
LimitImplementation Defined Constant
\fBRLIMIT_FSIZE\fR\fBFCHR_MAX\fR
\fBRLIMIT_NOFILE\fR\fBOPEN_MAX\fR
.TE

.sp
.LP
When using the
.B getrlimit()
function, if a resource limit can be
represented correctly in an object of type
.BR rlim_t ,
then its
representation is returned; otherwise, if the value of the resource limit is
equal to that of the corresponding saved hard limit, the value returned is
.BR RLIM_SAVED_MAX ;
otherwise the value returned is
.BR RLIM_SAVED_CUR .
.sp
.LP
When using the
.B setrlimit()
function, if the requested new limit is
\fBRLIM_INFINITY\fR, the new limit will be "no limit"; otherwise if the
requested new limit is
.BR RLIM_SAVED_MAX ,
the new limit will be the
corresponding saved hard limit; otherwise, if the requested new limit is
.BR RLIM_SAVED_CUR ,
the new limit will be the corresponding saved soft
limit; otherwise, the new limit will be the requested value. In addition, if
the corresponding saved limit can be represented correctly in an object of
type
.BR rlim_t ,
then it will be overwritten with the new limit.
.sp
.LP
The result of setting a limit to
.B RLIM_SAVED_MAX
or
.BR RLIM_SAVED_CUR
is unspecified unless a previous call to 
.B getrlimit()
returned that
value as the soft or hard limit for the corresponding resource limit.
.sp
.LP
A limit whose value is greater than
.B RLIM_INFINITY
is permitted.
.sp
.LP
The
.B exec
family of functions also cause resource limits to be saved.
See
.BR exec (2).
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B getrlimit()
and
.B setrlimit()
return
.BR 0 .
Otherwise, these functions return \fB\(mi1\fR and set
.B errno
to
indicate the error.
.SH ERRORS
.sp
.LP
The
.B getrlimit()
and
.B setrlimit()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The
.I rlp
argument points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
An invalid
.I resource
was specified; or in a
.B setrlimit()
call, the
new
.B rlim_cur
exceeds the new
.BR rlim_max .
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 10n
.rt
The limit specified to
.B setrlimit()
would have raised the maximum limit
value and {\fBPRIV_SYS_RESOURCE\fR} is not asserted in the effective set of
the current process.
.RE

.sp
.LP
The
.B setrlimit()
function may fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The limit specified cannot be lowered because current usage is already higher
than the limit.
.RE

.SH USAGE
.sp
.LP
The
.B getrlimit()
and
.B setrlimit()
functions have transitional
interfaces for 64-bit file offsets.  See \fBlf64\fR(5).
.sp
.LP
The rlimit functionality is now provided by the more general resource control
facility described on the
.BR setrctl (2)
manual page. The actions associated
with the resource limits described above are true at system boot, but an
administrator can modify the local configuration to modify signal delivery or
type. Application authors that utilize rlimits for the purposes of resource
awareness should investigate the resource controls facility.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
\fBATTRIBUTE TYPE\fRATTRIBUTE VALUE
_
Interface StabilityStandard
.TE

.SH SEE ALSO
.sp
.LP
.BR rctladm (1M),
.BR brk (2),
.BR exec (2),
\fBfork\fR(2), \fBopen\fR(2),
.BR setrctl (2),
.BR sigaltstack (2),
.BR ulimit (2),
.BR getdtablesize (3C),
.BR malloc (3C),
.BR signal (3C),
.BR signal.h (3HEAD),
\fBsysconf\fR(3C),
.BR attributes (5),
\fBlf64\fR(5),
.BR privileges (5),
.BR resource_controls (5),
.BR standards (5)
