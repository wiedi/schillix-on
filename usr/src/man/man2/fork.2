'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1994, X/Open Company Limited.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH fork 2 "28 Oct 2008" "SunOS 5.11" "System Calls"
.SH NAME
fork, fork1, forkall, forkx, forkallx \- create a new process
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <unistd.h>

\fBpid_t\fR \fBfork\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBpid_t\fR \fBfork1\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBpid_t\fR \fBforkall\fR(\fBvoid\fR);
.fi

.LP
.nf
#include <sys/fork.h>

\fBpid_t\fR \fBforkx\fR(\fBint\fR \fIflags\fR);
.fi

.LP
.nf
\fBpid_t\fR \fBforkallx\fR(\fBint\fR \fIflags\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.BR fork() ,
.BR fork1() ,
.BR forkall() ,
.BR forkx() ,
and
.B forkallx()
functions create a new process. The address space of the
new process (child process) is an exact copy of the address space of the
calling process (parent process). The child process inherits the following
attributes from the parent process:
.RS +4
.TP
.ie t \(bu
.el o
real user ID, real group ID, effective user ID, effective group ID
.RE
.RS +4
.TP
.ie t \(bu
.el o
environment
.RE
.RS +4
.TP
.ie t \(bu
.el o
open file descriptors
.RE
.RS +4
.TP
.ie t \(bu
.el o
close-on-exec flags (see
.BR exec (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
signal handling settings (that is,
.BR SIG_DFL ,
.BR SIG_IGN ,
.BR SIG_HOLD ,
function address)
.RE
.RS +4
.TP
.ie t \(bu
.el o
supplementary group IDs
.RE
.RS +4
.TP
.ie t \(bu
.el o
set-user-ID mode bit
.RE
.RS +4
.TP
.ie t \(bu
.el o
set-group-ID mode bit
.RE
.RS +4
.TP
.ie t \(bu
.el o
profiling on/off status
.RE
.RS +4
.TP
.ie t \(bu
.el o
nice value (see
.BR nice (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
scheduler class (see
.BR priocntl (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
all attached shared memory segments (see
.BR shmop (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
process group
.B ID
-- memory mappings (see
.BR mmap (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
session
.B ID
(see
.BR exit (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
current working directory
.RE
.RS +4
.TP
.ie t \(bu
.el o
root directory
.RE
.RS +4
.TP
.ie t \(bu
.el o
file mode creation mask (see
.BR umask (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
resource limits (see
.BR getrlimit (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
controlling terminal
.RE
.RS +4
.TP
.ie t \(bu
.el o
saved user
.B ID
and group
.BR ID
.RE
.RS +4
.TP
.ie t \(bu
.el o
task ID and project ID
.RE
.RS +4
.TP
.ie t \(bu
.el o
processor bindings (see
.BR processor_bind (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
processor set bindings (see
.BR pset_bind (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
process privilege sets (see
.BR getppriv (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
process flags (see
.BR getpflags (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
active contract templates (see
.BR contract (4))
.RE
.sp
.LP
Scheduling priority and any per-process scheduling parameters that are
specific to a given scheduling class might or might not be inherited
according to the policy of that particular class (see
.BR priocntl (2)).
The child process might or might not be in the same process contract as the
parent (see
.BR process (4)).
The child process differs from the parent
process in the following ways:
.RS +4
.TP
.ie t \(bu
.el o
The child process has a unique process
.B ID
which does not match any
active process group
.BR ID .
.RE
.RS +4
.TP
.ie t \(bu
.el o
The child process has a different parent process
.B ID
(that is, the
process
.B ID
of the parent process).
.RE
.RS +4
.TP
.ie t \(bu
.el o
The child process has its own copy of the parent's file descriptors and
directory streams. Each of the child's file descriptors shares a common file
pointer with the corresponding file descriptor of the parent.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Each shared memory segment remains attached and the value of
.B shm_nattach
is incremented by 1.
.RE
.RS +4
.TP
.ie t \(bu
.el o
All
.B semadj
values are cleared (see
.BR semop (2)).
.RE
.RS +4
.TP
.ie t \(bu
.el o
Process locks, text locks, data locks, and other memory locks are not
inherited by the child (see
.BR plock (3C)
and
.BR memcntl (2)).
.RE
.RS +4
.TP
.ie t \(bu
.el o
The child process's
.B tms
structure is cleared:
.BR tms_utime ,
.BR stime ,
.BR cutime ,
and
.B cstime
are set to 0 (see
.BR times (2)).
.RE
.RS +4
.TP
.ie t \(bu
.el o
The child processes resource utilizations are set to 0; see
.BR getrlimit (2).
The
.B it_value
and
.B it_interval
values for the
.B ITIMER_REAL
timer are reset to 0; see
.BR getitimer (2).
.RE
.RS +4
.TP
.ie t \(bu
.el o
The set of signals pending for the child process is initialized to the
empty set.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Timers created by
.BR timer_create "(3C) are not inherited by the child"
process.
.RE
.RS +4
.TP
.ie t \(bu
.el o
No asynchronous input or asynchronous output operations are inherited by
the child.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Any preferred hardware address tranlsation sizes (see
.BR memcntl (2))
are
inherited by the child.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The child process holds no contracts (see
.BR contract (4)).
.RE
.sp
.LP
Record locks set by the parent process are not inherited by the child
process (see
.BR fcntl (2)).
.sp
.LP
Although any open door descriptors in the parent are shared by the child,
only the parent will receive a door invocation from clients even if the door
descriptor is open in the child. If a descriptor is closed in the parent,
attempts to operate on the door descriptor will fail even if it is still
open in the child.
.SS "Threads"
.sp
.LP
A call to \fBforkall()\fR or \fBforkallx()\fR replicates in the child
process all of the threads (see
.BR thr_create (3C)
and
.BR pthread_create (3C))
in the parent process. A call to
.B fork1()
or
.B forkx()
replicates only the calling thread in the child process.
.sp
.LP
A call to
.B fork()
is identical to a call to
.BR fork1() ;
only the
calling thread is replicated in the child process. This is the
POSIX-specified behavior for
.BR fork() .
.sp
.LP
In releases of Solaris prior to Solaris 10, the behavior of \fBfork()\fR
depended on whether or not the application was linked with the POSIX threads
library. When linked with
.B -lthread
(Solaris Threads) but not linked
with
.B -lpthread
(POSIX Threads),
.B fork()
was the same as
.BR forkall() .
When linked with
.BR -lpthread ,
whether or not also
linked with
.BR -lthread ,
.B fork()
was the same as \fBfork1()\fR.
.sp
.LP
Prior to Solaris 10, either
.B -lthread
or
.B -lpthread
was required
for multithreaded applications. This is no longer the case. The standard C
library provides all threading support for both sets of application
programming interfaces.  Applications that require replicate-all fork
semantics must call \fBforkall()\fR or \fBforkallx()\fR.
.SS "Fork Extensions"
.sp
.LP
The \fBforkx()\fR and \fBforkallx()\fR functions accept a \fIflags\fR
argument consisting of a bitwise inclusive-OR of zero or more of the
following flags, which are defined in the header
.BR <sys/fork.h> :
.sp
.ne 2
.mk
.na
.B FORK_NOSIGCHLD
.ad
.sp .6
.RS 4n
Do not post a
.B SIGCHLD
signal to the parent process when the child
process terminates, regardless of the disposition of the \fBSIGCHLD\fR
signal in the parent.
.B SIGCHLD
signals are still possible for job
control stop and continue actions if the parent has requested them.
.RE

.sp
.ne 2
.mk
.na
.B FORK_WAITPID
.ad
.sp .6
.RS 4n
Do not allow wait-for-multiple-pids by the parent, as in
.BR wait() ,
\fBwaitid\fR(\fBP_ALL\fR), or \fBwaitid\fR(\fBP_PGID\fR), to reap the child
and do not allow the child to be reaped automatically due the disposition of
the SIGCHLD signal being set to be ignored in the parent.  Only a specific
wait for the child, as in \fBwaitid\fR(\fBP_PID\fR, \fBpid\fR), is allowed
and it is required, else when the child exits it will remain a zombie until
the parent exits.
.RE

.sp
.LP
If the \fIflags\fR argument is 0 \fBforkx()\fR is identical to \fBfork()\fR
and \fBforkallx()\fR is identical to \fBforkall()\fR.
.SS "\fBfork()\fR Safety"
.sp
.LP
If a multithreaded application calls
.BR fork() ,
.BR fork1() ,
or
.BR forkx() ,
and the child does more than simply call one of the
.BR exec (2)
functions, there is a possibility of deadlock occurring in the
child. The application should use \fBpthread_atfork\fR(3C) to ensure safety
with respect to this deadlock. Should there be any outstanding mutexes
throughout the process, the application should call \fBpthread_atfork()\fR
to wait for and acquire those mutexes prior to calling
.BR fork() ,
\fBfork1()\fR, or \fBforkx()\fR. See  "MT-Level of Libraries" on the
.BR attributes (5)
manual page.
.sp
.LP
The
.B pthread_atfork()
mechanism is used to protect the locks that
.BR libc (3LIB)
uses to implement interfaces such as
.BR malloc "(3C).  All"
interfaces provided by
.B libc
are safe to use in a child process
following a
.BR fork() ,
except when
.B fork()
is executed within a
signal handler.
.sp
.LP
The POSIX standard (see
.BR standards (5))
requires fork to be
Async-Signal-Safe (see
.BR attributes (5)).
This cannot be made to happen
with fork handlers in place, because they acquire locks. To be in nominal
compliance, no fork handlers are called when
.B fork()
is executed within
a signal context.  This leaves the child process in a questionable state
with respect to its locks, but at least the calling thread will not deadlock
itself attempting to acquire a lock that it already owns.  In this
situation, the application should strictly adhere to the advice given in the
POSIX specification: "To avoid errors, the child process may only execute
Async-Signal-Safe operations until such time as one of the
.BR exec (2)
functions is called."
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.BR fork() ,
.BR fork1() ,
.BR forkall() ,
.BR forkx() ,
and
.B forkallx()
return
.B 0
to the child process and
return the process
.B ID
of the child process to the parent process.
Otherwise, \fB(pid_t)\(mi1\fR is returned to the parent process, no child
process is created, and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.BR fork() ,
.BR fork1() ,
.BR forkall() ,
.BR forkx() ,
and
.B forkallx()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
A resource control or  limit on the total number of processes, tasks or
LWPs under execution by a single user, task, project, or zone has been
exceeded, or the total amount of system memory available is temporarily
insufficient to duplicate this process.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
There is not enough swap space.
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 10n
.rt
The {\fBPRIV_PROC_FORK\fR} privilege is not asserted in the effective set
of the calling process.
.RE

.sp
.LP
The \fBforkx()\fR and \fBforkallx()\fR functions will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I flags
argument is invalid.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelAsync-Signal-Safe.
_
StandardSee below.
.TE

.sp
.LP
For
.BR fork() ,
see
.BR standards (5).
.SH SEE ALSO
.sp
.LP
.BR alarm (2),
.BR exec (2),
.BR exit (2),
.BR fcntl (2),
.BR getitimer (2),
.BR getrlimit (2),
.BR memcntl (2),
.BR mmap (2),
.BR nice (2),
.BR priocntl (2),
.BR semop (2),
.BR shmop (2),
.BR times (2),
.BR umask (2),
.BR waitid (2),
.BR door_create (3C),
.BR exit (3C),
.BR plock (3C),
.BR pthread_atfork (3C),
.BR pthread_create (3C),
.BR signal (3C),
.BR system (3C),
.BR thr_create (3C)
.BR timer_create (3C),
.BR wait (3C),
.BR contract (4),
.BR process (4),
.BR attributes (5),
.BR privileges (5),
.BR standards (5)
.SH NOTES
.sp
.LP
An application should call
.B _exit()
rather than \fBexit\fR(3C) if it
cannot
.BR execve() ,
since
.B exit()
will flush and close standard I/O
channels and thereby corrupt the parent process's standard I/O data
structures. Using \fBexit\fR(3C) will flush buffered data twice. See
.BR exit (2).
.sp
.LP
The thread in the child that calls
.BR fork() ,
.BR fork1() ,
or
.B fork1x()
must not depend on any resources held by threads that no
longer exist in the child. In particular, locks held by these threads will
not be released.
.sp
.LP
In a multithreaded process,
.B forkall()
in one thread can cause
blocking system calls to be interrupted and return with an
.BR EINTR
error.
