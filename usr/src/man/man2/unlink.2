'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH unlink 2 "18 May 2007" "SunOS 5.11" "System Calls"
.SH NAME
unlink, unlinkat \- remove directory entry
.SH SYNOPSIS
.LP
.nf
#include <unistd.h>

\fBint\fR \fBunlink\fR(\fBconst char *\fIpath\fR);
.fi

.LP
.nf
\fBint\fR \fBunlinkat\fR(\fBint\fR \fIdirfd\fR, \fBconst char *\fIpath\fR, \fBint\fR \fIflag\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B unlink()
function removes a link to a file. If
.I path
names a
symbolic link,
.B unlink()
removes the symbolic link named by
.IR path
and does not affect any file or directory named by the contents of the
symbolic link.  Otherwise,
.B unlink()
removes the link named by the
pathname pointed to by
.I path
and decrements the link count of the file
referenced by the link.
.sp
.LP
The
.B unlinkat()
function also removes a link to a file. See
.BR fsattr (5).
If the
.I flag
argument is 0, the behavior of
.B unlinkat()
is the same as
.B unlink()
except in the processing of
its
.I path
argument. If
.I path
is absolute,
.B unlinkat()
behaves
the same as
.B unlink()
and the
.I dirfd
argument is unused. If
.I path
is relative and
.I dirfd
has the value
.BR AT_FDCWD ,
defined
in
.RB < fcntl.h >,
.B unlinkat()
also behaves the same as
.BR unlink() .
Otherwise,
.I path
is resolved relative to the directory
referenced by the
.I dirfd
argument.
.sp
.LP
If the
.I flag
argument is set to the value
.BR AT_REMOVEDIR ,
defined
in
.RB < fcntl.h >,
.B unlinkat()
behaves the same as
.BR rmdir (2)
except in the processing of the
.I path
argument as described above.
.sp
.LP
When the file's link count becomes 0 and no process has the file open, the
space occupied by the file will be freed and the file is no longer
accessible. If one or more processes have the file open when the last link
is removed, the link is removed before
.B unlink()
or
.BR unlinkat()
returns, but the removal of the file contents is postponed until all
references to the file are closed.
.sp
.LP
If the
.I path
argument is a directory and the filesystem supports
.B unlink()
and
.B unlinkat()
on directories, the directory is
unlinked from its parent with no cleanup being performed.  In UFS, the
disconnected directory will be found the next time the filesystem is checked
with
.BR fsck (1M).
The
.B unlink()
and
.B
unlinkat()
functions will
not fail simply because a directory is not empty. The user with appropriate
privileges can orphan a non-empty directory without generating an error
message.
.sp
.LP
If the
.I path
argument is a directory and the filesystem does not
support
.B unlink()
and
.B unlink()
on directories (for example, ZFS),
the call will fail with
.B errno
set to
.BR EPERM .
.sp
.LP
Upon successful completion,
.B unlink()
and
.B unlinkat()
will mark
for update the
.B st_ctime
and
.B st_mtime
fields of the parent
directory. If the file's link count is not 0, the
.B st_ctime
field of
the file will be marked for update.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B 0
is returned.  Otherwise,
.B \(mi1
is
returned,
.B errno
is set to indicate the error, and the file is not
unlinked.
.SH ERRORS
.sp
.LP
The
.B unlink()
and
.B unlinkat()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 16n
.rt
Search permission is denied for a component of the
.I path
prefix, or
write permission is denied on the directory containing the link to be
removed.
.RE

.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 16n
.rt
The parent directory has the sticky bit set and the file is not writable by
the user, the user does not own the parent directory, the user does not own
the file, and the user is not a privileged user.
.RE

.sp
.ne 2
.mk
.na
.B EBUSY
.ad
.RS 16n
.rt
The entry to be unlinked is the mount point for a mounted file system.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 16n
.rt
The
.I path
argument points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EILSEQ
.ad
.RS 16n
.rt
The path argument includes non-UTF8 characters and the file system accepts
only file names where all characters are part of the UTF-8 character
codeset.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 16n
.rt
A signal was caught during the execution of the
.B unlink()
function.
.RE

.sp
.ne 2
.mk
.na
.B ELOOP
.ad
.RS 16n
.rt
Too many symbolic links were encountered in translating
.IR path .
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
The length of the
.I path
argument exceeds
.BR PATH_MAX ,
or the length
of a
.I path
component exceeds
.B NAME_MAX
while
.BR _POSIX_NO_TRUNC
is in effect.
.RE

.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 16n
.rt
The named file does not exist or is a null pathname.
.RE

.sp
.ne 2
.mk
.na
.B ENOLINK
.ad
.RS 16n
.rt
The
.I path
argument points to a remote machine and the link to that
machine is no longer active.
.RE

.sp
.ne 2
.mk
.na
.B ENOTDIR
.ad
.RS 16n
.rt
A component of the
.I path
prefix is not a directory or the provided
directory descriptor for
.B unlinkat()
is not
.B AT_FDCWD
or does not
reference a directory.
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 16n
.rt
The named file is a directory and
.RB { PRIV_SYS_LINKDIR }
is not asserted
in the effective set of the calling process, or the filesystem
implementation does not support
.B unlink()
or
.B unlinkat()
on
directories.
.RE

.sp
.ne 2
.mk
.na
.B EROFS
.ad
.RS 16n
.rt
The directory entry to be unlinked is part of a read-only file system.
.RE

.sp
.LP
The
.B unlink()
and
.B unlinkat()
functions may fail if:
.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
Pathname resolution of a symbolic link produced an intermediate result
whose length exceeds
.RB { PATH_MAX }.
.RE

.sp
.ne 2
.mk
.na
.B ETXTBSY
.ad
.RS 16n
.rt
The entry to be unlinked is the last directory entry to a pure procedure
(shared text) file that is being executed.
.RE

.SH USAGE
.sp
.LP
Applications should use
.BR rmdir (2)
to remove a directory.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityT{
\fBunlink()\fR is Standard; \fBunlinkat()\fR is Evolving
T}
_
MT-LevelAsync-Signal-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR rm (1),
.BR close (2),
.BR link (2),
.BR open (2),
.BR rmdir (2),
.BR remove (3C),
.BR attributes (5),
.BR privileges (5),
.BR fsattr (5)
