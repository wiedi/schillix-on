'\" te
.\" Copyright 1989 AT&T.  Copyright (c) 2003, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH getmsg 2 "1 Nov 2001" "SunOS 5.11" "System Calls"
.SH NAME
getmsg, getpmsg \- get next message off a stream
.SH SYNOPSIS
.LP
.nf
#include <stropts.h>

\fBint\fR \fBgetmsg\fR(\fBint\fR \fIfildes\fR, \fBstruct strbuf *restrict\fR \fIctlptr\fR,
     \fBstruct strbuf *restrict\fR \fIdataptr\fR, \fBint *restrict\fR \fIflagsp\fR);
.fi

.LP
.nf
\fBint\fR \fBgetpmsg\fR(\fBint\fR \fIfildes\fR, \fBstruct strbuf *restrict\fR \fIctlptr\fR,
     \fBstruct strbuf *restrict\fR \fIdataptr\fR, \fBint *restrict\fR \fIbandp\fR,
     \fBint *restrict\fR \fIflagsp\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B getmsg()
function retrieves the contents of a message (see
.BR Intro (2))
located at  the stream head read queue from a STREAMS file,
and places the contents into user specified buffer(s). The message must
contain either a data part, a control part, or both. The data and control
parts of the message are placed into separate buffers,  as described below.
The semantics of each part is defined by the STREAMS module that generated
the message.
.sp
.LP
The
.B getpmsg()
function behaved like
.BR getmsg() ,
but provides
finer control over the priority of the messages received. Except where
noted, all information pertaining to
.B getmsg()
also pertains to
.BR getpmsg() .
.sp
.LP
The
.I fildes
argument specifies a file descriptor referencing an open
stream. The
.I ctlptr
and
.I dataptr
arguments each point to a
.B strbuf
structure, which contains the following members:
.sp
.in +2
.nf
int    maxlen;      /* maximum buffer length */
int    len;         /* length of data */
char   *buf;        /* ptr to buffer */
.fi
.in -2

.sp
.LP
The
.B buf
member points to a buffer into which the data or control
information is to be placed, and the
.B maxlen
member indicates the
maximum number of bytes this buffer can hold. On return, the
.B len
member contains the number of bytes of data or control information actually
received; 0 if there is a zero-length control or data part; or \(mi1 if no
data or control information is present in the message. The
.I flagsp
argument should point to an integer that indicates the type of message the
user is able to receive, as described below.
.sp
.LP
The
.I ctlptr
argument holds the control part from the message and the
.I dataptr
argument  holds the data part from the message. If
.I ctlptr
(or
.IR dataptr )
is
.I NULL
or the
.B maxlen
member is
\(mi1, the control (or data) part of the message is not processed and is
left on the stream head read queue. If
.I ctlptr
(or
.IR dataptr )
is
not
.I NULL
and there is no corresponding control (or data) part of the
messages on the stream head read queue,
.B len
is set to \(mi1. If the
.B maxlen
member is set to 0 and there is a zero-length control (or data)
part, that zero-length part is removed from the read queue and
.B len
is
set to 0. If the
.B maxlen
member is set to 0 and there are more than
zero bytes of control (or data) information, that information is left on the
read queue and
.B len
is set to 0. If the
.B maxlen
member in
.I ctlptr
or
.I dataptr
is less than,  respectively, the control or
data part of the message,
.B maxlen
bytes are  retrieved. In this case,
the remainder of the message is left on the stream head read  queue and a
non-zero return value is provided, as described below under
.BR "RETURN VALUES" .
.sp
.LP
By default,
.B getmsg()
processes the first available message on the
stream head read queue. A user may, however, choose to retrieve only high
priority messages by setting  the integer pointed to by
.I flagsp
to
.BR RS_HIPRI .
In this case,
.B getmsg()
processes the next message only
if it is a high priority message.
.sp
.LP
If the integer pointed to by
.I flagsp
is 0,
.B getmsg()
retrieves
any message available on the stream head read queue. In this case, on
return, the integer pointed to by
.I flagsp
will be set to
.B RS_HIPRI
if a high priority message was retrieved, or to 0
otherwise.
.sp
.LP
For
.BR getpmsg() ,
the
.I flagsp
argument points to a bitmask with the
following mutually-exclusive flags defined:
.BR MSG_HIPRI ,
.BR MSG_BAND ,
and
.BR MSG_ANY .
Like
.BR getmsg() ,
.B getpmsg()
processes the first
available message on the stream head read queue. A user may choose to
retrieve only high-priority messages by setting the integer pointed to by
.I flagsp
to
.B MSG_HIPRI
and the integer pointed to by
.I bandp
to
0. In this case,
.B getpmsg()
will only process the next message if it is
a high-priority message. In a similar manner, a user may choose to retrieve
a message from a particular priority band by setting the integer pointed to
by
.I flagsp
to
.B MSG_BAND
and the integer pointed to by
.I
bandp
to the priority band of interest. In this case,
.B getpmsg()
will only
process the next message if it is in a priority band equal to, or greater
than, the integer pointed to by
.IR bandp ,
or if it is a high-priority
message. If a user just wants to get the first message off the queue, the
integer pointed to by
.I flagsp
should be set to
.B MSG_ANY
and the
integer pointed to by
.I bandp
should be set to 0. On return, if the
message retrieved was a high-priority message, the integer pointed to by
.I flagsp
will be set to
.B MSG_HIPRI
and the integer pointed to by
.I bandp
will be set to 0. Otherwise, the integer pointed to by
.I flagsp
will be set to
.B MSG_BAND
and the integer pointed to by
.I bandp
will be set to the priority band of the message.
.sp
.LP
If
.B O_NDELAY
and
.B O_NONBLOCK
are clear,
.B getmsg()
blocks
until a message of the type specified by
.I flagsp
is available on the
stream head read queue. If
.B O_NDELAY
or
.B O_NONBLOCK
has been set
and a message of the specified type is not present on the read queue,
.B getmsg()
fails and sets
.B errno
to
.BR EAGAIN .
.sp
.LP
If a hangup occurs on the stream from which messages are to be retrieved,
.B getmsg()
continues to operate normally, as described above, until the
stream head read queue is empty. Thereafter, it returns 0 in the
.B len
member of
.I ctlptr
and
.IR dataptr .
.SH RETURN VALUES
.sp
.LP
Upon successful completion, a non-negative value is returned. A return
value of
.B 0
indicates that a full message was read successfully. A
return value of
.B MORECTL
indicates that more control information is
waiting for retrieval. A return value of
.B MOREDATA
indicates that more
data are waiting for retrieval. A return value of
.B MORECTL
|
.B MOREDATA
indicates that both types of information remain. Subsequent
.B getmsg()
calls retrieve the remainder of the message. However, if a
message of higher priority has been received by the stream head read queue,
the next call to
.B getmsg()
will retrieve that higher priority message
before retrieving the remainder of the previously received partial
message.
.SH ERRORS
.sp
.LP
The
.B getmsg()
and
.B getpmsg()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 11n
.rt
The
.B O_NDELAY
or
.B O_NONBLOCK
flag is set and no messages are
available.
.RE

.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 11n
.rt
The
.I fildes
argument is not a valid file descriptor open for
reading.
.RE

.sp
.ne 2
.mk
.na
.B EBADMSG
.ad
.RS 11n
.rt
Queued message to be read is not valid for
.BR getmsg .
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 11n
.rt
The
.IR ctlptr ,
.IR dataptr ,
.IR bandp ,
or
.I flagsp
argument
points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 11n
.rt
A signal was caught during the execution of the
.B getmsg
function.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 11n
.rt
An illegal value was specified in
.IR flagsp ,
or the stream referenced by
.I fildes
is linked under a multiplexor.
.RE

.sp
.ne 2
.mk
.na
.B ENOSTR
.ad
.RS 11n
.rt
A stream is not associated with
.IR fildes .
.RE

.sp
.LP
The
.B getmsg()
function can also fail if a STREAMS error message had
been received at the stream head before the call to
.BR getmsg() .
The
error returned is the value contained in the STREAMS error message.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
\fBATTRIBUTE TYPE\fRATTRIBUTE VALUE
_
Interface StabilityStandard
.TE

.SH SEE ALSO
.sp
.LP
.BR Intro (2),
.BR poll (2),
.BR putmsg (2),
.BR read (2),
.BR write (2),
.BR attributes (5),
.BR standards (5)
.sp
.LP
.I STREAMS Programming Guide
