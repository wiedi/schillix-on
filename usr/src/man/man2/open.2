'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH open 2 "16 Jun 2008" "SunOS 5.11" "System Calls"
.SH NAME
open, openat \- open a file
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

\fBint\fR \fBopen\fR(\fBconst char *\fIpath\fR, \fBint\fR \fIoflag\fR, \fB/* mode_t\fR \fImode\fR */);
.fi

.LP
.nf
\fBint\fR \fBopenat\fR(\fBint\fR \fIfildes\fR, \fBconst char *\fIpath\fR, \fBint\fR \fIoflag\fR,
     \fB/* mode_t\fR \fImode\fR */);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B open()
function establishes the connection between a file and a
file descriptor. It creates an open file description that refers to a file
and a file descriptor that refers to that open file description. The file
descriptor is used by other I/O functions to refer to that file. The
\fIpath\fR argument points to a pathname naming the file.
.sp
.LP
The
.B openat()
function is identical to the
.B open()
function
except that the
.I path
argument is interpreted relative to the starting
point implied by the \fIfildes\fR argument. If the \fIfildes\fR argument has
the special value
.BR AT_FDCWD ,
a relative path argument will be resolved
relative to the current working directory. If the
.I path
argument is
absolute, the \fIfildes\fR argument is ignored.
.sp
.LP
The
.B open()
function returns a file descriptor for the named file that
is the lowest file descriptor not currently open for that process. The open
file description is new, and therefore the file descriptor does not share it
with any other process in the system. The
.B FD_CLOEXEC
file descriptor
flag associated with the new file descriptor is cleared.
.sp
.LP
The file offset used to mark the current position within the file is set to
the beginning of the file.
.sp
.LP
The file status flags and file access modes of the open file description
are set according to the value of
.IR oflag .
The
.I mode
argument is
used only when
.B O_CREAT
is specified (see below.)
.sp
.LP
Values for \fIoflag\fR are constructed by a bitwise-inclusive-OR of flags
from the following list, defined in <\fBfcntl.h\fR>. Applications must
specify exactly one of the first three values (file access modes) below in
the value of
.IR oflag :
.sp
.ne 2
.mk
.na
.B O_RDONLY
.ad
.RS 12n
.rt
Open for reading only.
.RE

.sp
.ne 2
.mk
.na
.B O_WRONLY
.ad
.RS 12n
.rt
Open for writing only.
.RE

.sp
.ne 2
.mk
.na
.B O_RDWR
.ad
.RS 12n
.rt
Open for reading and writing. The result is undefined if this flag is
applied to a FIFO.
.RE

.sp
.LP
Any combination of the following may be used:
.sp
.ne 2
.mk
.na
.B O_APPEND
.ad
.sp .6
.RS 4n
If set, the file offset is set to the end of the file prior to each
write.
.RE

.sp
.ne 2
.mk
.na
.B O_CREAT
.ad
.sp .6
.RS 4n
Create the file if it does not exist. This flag requires that the
\fImode\fR argument be specified.
.sp
If the file exists, this flag has no effect except as noted under
\fBO_EXCL\fR below.  Otherwise, the file is created with the user \fBID\fR
of the file set to the effective user
.B ID
of the process. The group
\fBID\fR of the file is set to the effective group \fBIDs\fR of the process,
or if the
.B S_ISGID
bit is set in the directory in which the file is
being created, the file's group
.B ID
is set to the group
.B ID
of its
parent directory.  If the group
.B ID
of the new file does not match the
effective group
.B ID
or one of the supplementary groups IDs, the
\fBS_ISGID\fR bit is cleared. The access permission bits (see
.BR <sys/stat.h> )
of the file mode are set to the value of
.IR mode ,
modified as follows (see
.BR creat (2)):
a bitwise-AND is performed on the
file-mode bits and the corresponding bits in the complement of the process's
file mode creation mask. Thus, all bits set in the process's file mode
creation mask (see
.BR umask (2))
are correspondingly cleared in the file's
permission mask. The "save text image after execution bit" of the mode is
cleared (see
.BR chmod (2)).
\fBO_SYNC\fR Write I/O operations on the file
descriptor complete as defined by synchronized I/O file integrity completion
(see \fBfcntl.h\fR(3HEAD) definition of
.BR O_SYNC .)
When bits other than
the file permission bits are set, the effect is unspecified. The \fImode\fR
argument does not affect whether the file is open for reading, writing or
for both.
.RE

.sp
.ne 2
.mk
.na
.B O_DSYNC
.ad
.sp .6
.RS 4n
Write I/O operations on the file descriptor complete as defined by
synchronized I/O data integrity completion.
.RE

.sp
.ne 2
.mk
.na
.B O_EXCL
.ad
.sp .6
.RS 4n
If
.B O_CREAT
and
.B O_EXCL
are set,
.B open()
fails if the file
exists. The check for the existence of the file and the creation of the file
if it does not exist is atomic with respect to other threads executing
\fBopen()\fR naming the same filename in the same directory with
\fBO_EXCL\fR and \fBO_CREAT\fR set. If \fBO_EXCL\fR and \fBO_CREAT\fR are
set, and path names a symbolic link,
.B open()
fails and sets
.BR errno
to
.BR EEXIST ,
regardless of the contents of the symbolic link. If
\fBO_EXCL\fR is set and \fBO_CREAT\fR is not set, the result is undefined.
.RE

.sp
.ne 2
.mk
.na
.B O_LARGEFILE
.ad
.sp .6
.RS 4n
If set, the offset maximum in the open file description is the largest
value that can be represented correctly in an object of type
.BR off64_t .
.RE

.sp
.ne 2
.mk
.na
.B O_NOCTTY
.ad
.sp .6
.RS 4n
If set and
.I path
identifies a terminal device,
.B open()
does not
cause the terminal device to become the controlling terminal for the
process.
.RE

.sp
.ne 2
.mk
.na
.B O_NOFOLLOW
.ad
.sp .6
.RS 4n
If the path names a symbolic link,
.B open()
fails and sets
.BR errno
to
.BR ELOOP .
.RE

.sp
.ne 2
.mk
.na
.B O_NOLINKS
.ad
.sp .6
.RS 4n
If the link count of the named file is greater than 1,
.B open()
fails
and sets
.B errno
to
.BR EMLINK .
.RE

.sp
.ne 2
.mk
.na
\fBO_NONBLOCK\fR or \fBO_NDELAY\fR
.ad
.sp .6
.RS 4n
These flags can affect subsequent reads and writes (see
.BR read (2)
and
.BR write (2)).
If both
.B O_NDELAY
and
.B O_NONBLOCK
are set,
\fBO_NONBLOCK\fR takes precedence.
.sp
When opening a
.B FIFO
with
.B O_RDONLY
or
.B O_WRONLY
set:
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NONBLOCK
or
.B O_NDELAY
is set, an
.B open()
for reading
only returns without delay.  An
.B open()
for writing only returns an
error if no process currently has the file open for reading.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NONBLOCK
and
.B O_NDELAY
are clear, an
.B open()
for
reading only blocks until a thread opens the file for writing. An
\fBopen()\fR for writing only blocks the calling thread until a thread opens
the file for reading.
.RE
After both ends of a
.B FIFO
have been opened, there is no guarantee
that further calls to
.B "open() O_RDONLY"
(\fBO_WRONLY\fR) will
synchronize with later calls to
.B "open() O_WRONLY"
(\fBO_RDONLY\fR)
until both ends of the
.B FIFO
have been closed by all readers and
writers. Any data written into a
.B FIFO
will be lost if both ends of the
\fBFIFO\fR are closed before the data is read.
.sp
When opening a block special or character special file that supports
non-blocking opens:
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NONBLOCK
or
.B O_NDELAY
is set, the
.B open()
function
returns without blocking for the device to be ready or available. Subsequent
behavior of the device is device-specific.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NONBLOCK
and
.B O_NDELAY
are clear, the
.B open()
function
blocks the calling thread until the device is ready or available before
returning.
.RE
Otherwise, the behavior of
.B O_NONBLOCK
and
.B O_NDELAY
is
unspecified.
.RE

.sp
.ne 2
.mk
.na
.B O_RSYNC
.ad
.sp .6
.RS 4n
Read I/O operations on the file descriptor complete at the same level of
integrity as specified by the
.B O_DSYNC
and
.B O_SYNC
flags. If both
\fBO_DSYNC\fR and \fBO_RSYNC\fR are set in
.IR oflag ,
all I/O operations
on the file descriptor complete as defined by synchronized I/O data
integrity completion.  If both
.B O_SYNC
and
.B O_RSYNC
are set in
\fIoflag\fR, all I/O operations on the file descriptor complete as defined
by synchronized I/O file integrity completion.
.RE

.sp
.ne 2
.mk
.na
.B O_SYNC
.ad
.sp .6
.RS 4n
Write I/O operations on the file descriptor complete as defined by
synchronized I/O file integrity completion.
.RE

.sp
.ne 2
.mk
.na
.B O_TRUNC
.ad
.sp .6
.RS 4n
If the file exists and is a regular file, and the file is successfully
opened
.B O_RDWR
or
.BR O_WRONLY ,
its length is truncated to 0 and the
mode and owner are unchanged. It has no effect on
.B FIFO
special files
or terminal device files. Its effect on other file types is
implementation-dependent. The result of using
.B O_TRUNC
with
\fBO_RDONLY\fR is undefined.
.RE

.sp
.ne 2
.mk
.na
.B O_XATTR
.ad
.sp .6
.RS 4n
If set in
.BR openat() ,
a relative path argument is interpreted as a
reference to an extended attribute of the file associated with the supplied
file descriptor.  This flag therefore requires the presence of a legal
\fIfildes\fR argument. If set in
.BR open() ,
the implied file descriptor
is that for the current working directory. Extended attributes must be
referenced with a relative path; providing an absolute path results in a
normal file reference.
.RE

.sp
.LP
If
.B O_CREAT
is set and the file did not previously exist, upon
successful completion,
.B open()
marks for update the
.BR st_atime ,
.BR st_ctime ,
and
.B st_mtime
fields of the file and the
.BR st_ctime
and
.B st_mtime
fields of the parent directory.
.sp
.LP
If
.B O_TRUNC
is set and the file did previously exist, upon successful
completion,
.B open()
marks for update the
.B st_ctime
and
\fBst_mtime\fR fields of the file.
.sp
.LP
If both the
.B O_SYNC
and
.B O_DSYNC
flags are set, the effect is as
if only the
.B O_SYNC
flag was set.
.sp
.LP
If
.I path
refers to a
.B STREAMS
file, \fIoflag\fR may be
constructed from
.B O_NONBLOCK
or
.B O_NODELAY
OR-ed with either
.BR O_RDONLY ,
.BR O_WRONLY ,
or
.BR O_RDWR .
Other flag values are not
applicable to
.B STREAMS
devices and have no effect on them.  The values
\fBO_NONBLOCK\fR and \fBO_NODELAY\fR affect the operation of \fBSTREAMS\fR
drivers and certain functions (see
.BR read (2),
.BR getmsg (2),
.BR putmsg (2),
and
.BR write (2))
applied to file descriptors associated
with
.B STREAMS
files.  For
.B STREAMS
drivers, the implementation of
\fBO_NONBLOCK\fR and \fBO_NODELAY\fR is device-specific.
.sp
.LP
When
.B open()
.RB "is invoked to open a named stream, and the" " connld"
module (see \fBconnld\fR(7M)) has been pushed on the pipe, \fBopen()\fR
blocks until the server process has issued an
.BR "I_RECVFD ioctl()"
(see \fBstreamio\fR(7I)) to receive the file descriptor.
.sp
.LP
If
.I path
names the master side of a pseudo-terminal device, then it is
unspecified whether
.B open()
locks the slave side so that it cannot be
opened. Portable applications must call \fBunlockpt\fR(3C) before opening
the slave side.
.sp
.LP
If the file is a regular file and the local file system is mounted with the
\fBnbmand\fR mount option, then a mandatory share reservation is
automatically obtained on the file. The share reservation is obtained as if
\fBfcntl\fR(2) were called with \fIcmd\fR \fBF_SHARE_NBMAND\fR and the
\fBfshare_t\fR values set as follows:
.sp
.ne 2
.mk
.na
\fBf_access\fR
.ad
.RS 12n
.rt
Set to the type of read/write access for which the file is opened.
.RE

.sp
.ne 2
.mk
.na
\fBf_deny\fR
.ad
.RS 12n
.rt
.B F_NODNY
.RE

.sp
.ne 2
.mk
.na
\fBf_id\fR
.ad
.RS 12n
.rt
The file descriptor value returned from
.BR open() .
.RE

.sp
.LP
If
.I path
is a symbolic link and
.B O_CREAT
and
.B O_EXCL
are
set, the link is not followed.
.sp
.LP
Certain flag values can be set following
.B open()
as described in
.BR fcntl (2).
.sp
.LP
The largest value that can be represented correctly in an object of type
\fBoff_t\fR is established as the offset maximum in the open file
description.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, the
.B open()
function opens the file and
return a non-negative integer representing the lowest numbered unused file
descriptor. Otherwise, \fB\(mi1\fR is returned,
.B errno
is set to
indicate the error, and no files are created or modified.
.SH ERRORS
.sp
.LP
The
.B open()
and
.B openat()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 16n
.rt
Search permission is denied on a component of the path prefix.
.sp
The file exists and the permissions specified by \fIoflag\fR are denied.
.sp
The file does not exist and write permission is denied for the parent
directory of the file to be created.
.sp
\fBO_TRUNC\fR is specified and write permission is denied.
.sp
The {\fBPRIV_FILE_DAC_SEARCH\fR} privilege allows processes to search
directories regardless of permission bits. The {\fBPRIV_FILE_DAC_WRITE\fR}
privilege allows processes to open files for writing regardless of
permission bits. See
.BR privileges (5)
for special considerations when
opening files owned by UID 0 for writing. The {\fBPRIV_FILE_DAC_READ\fR}
privilege allows processes to open files for reading regardless of
permission bits.
.RE

.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 16n
.rt
A mandatory share reservation could not be obtained because the desired
access conflicts with an existing \fBf_deny\fR share reservation.
.RE

.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 16n
.rt
The file descriptor provided to
.B openat()
is invalid.
.RE

.sp
.ne 2
.mk
.na
.B EDQUOT
.ad
.RS 16n
.rt
The file does not exist,
.B O_CREAT
is specified, and either the
directory where the new file entry is being placed cannot be extended
because the user's quota of disk blocks on that file system has been
exhausted, or the user's quota of inodes on the file system where the file
is being created has been exhausted.
.RE

.sp
.ne 2
.mk
.na
.B EEXIST
.ad
.RS 16n
.rt
The
.B O_CREAT
and
.B O_EXCL
flags are set and the named file
exists.
.RE

.sp
.ne 2
.mk
.na
.B EILSEQ
.ad
.RS 16n
.rt
The
.I path
argument includes non-UTF8 characters and the file system
accepts only file names where all characters are part of the UTF-8 character
codeset.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 16n
.rt
A signal was caught during
.BR open() .
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 16n
.rt
The
.I path
argument points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 16n
.rt
The system does not support synchronized I/O for this file, or the
\fBO_XATTR\fR flag was supplied and the underlying file system does not
support extended file attributes.
.RE

.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 16n
.rt
The
.I path
argument names a
.B STREAMS
file and a hangup or error
occurred during the
.BR open() .
.RE

.sp
.ne 2
.mk
.na
.B EISDIR
.ad
.RS 16n
.rt
The named file is a directory and \fIoflag\fR includes
.B O_WRONLY
or
.BR O_RDWR .
.RE

.sp
.ne 2
.mk
.na
.B ELOOP
.ad
.RS 16n
.rt
Too many symbolic links were encountered in resolving
.IR path .
.sp
A loop exists in symbolic links encountered during resolution of the
\fIpath\fR argument.
.sp
The
.B O_NOFOLLOW
flag is set and the final component of path is a
symbolic link.
.RE

.sp
.ne 2
.mk
.na
.B EMFILE
.ad
.RS 16n
.rt
There are currently {\fBOPEN_MAX\fR} file descriptors open in the calling
process.
.RE

.sp
.ne 2
.mk
.na
.B EMLINK
.ad
.RS 16n
.rt
The
.B O_NOLINKS
flag is set and the named file has a link count greater
than 1.
.RE

.sp
.ne 2
.mk
.na
.B EMULTIHOP
.ad
.RS 16n
.rt
Components of
.I path
require hopping to multiple remote machines and
the file system does not allow it.
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
The length of the
.I path
argument exceeds {\fBPATH_MAX\fR} or a
pathname component is longer than {\fBNAME_MAX\fR}.
.RE

.sp
.ne 2
.mk
.na
.B ENFILE
.ad
.RS 16n
.rt
The maximum allowable number of files is currently open in the system.
.RE

.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 16n
.rt
The
.B O_CREAT
flag is not set and the named file does not exist; or the
\fBO_CREAT\fR flag is set and either the path prefix does not exist or the
\fIpath\fR argument points to an empty string.
.RE

.sp
.ne 2
.mk
.na
.B ENOLINK
.ad
.RS 16n
.rt
The
.I path
argument points to a remote machine, and the link to that
machine is no longer active.
.RE

.sp
.ne 2
.mk
.na
.B ENOSR
.ad
.RS 16n
.rt
The
.I path
argument names a STREAMS-based file and the system is unable
to allocate a STREAM.
.RE

.sp
.ne 2
.mk
.na
.B ENOSPC
.ad
.RS 16n
.rt
The directory or file system that would contain the new file cannot be
expanded, the file does not exist, and
.B O_CREAT
is specified.
.RE

.sp
.ne 2
.mk
.na
.B ENOSYS
.ad
.RS 16n
.rt
The device specified by
.I path
does not support the open operation.
.RE

.sp
.ne 2
.mk
.na
.B ENOTDIR
.ad
.RS 16n
.rt
A component of the path prefix is not a directory or a relative path was
supplied to
.BR openat() ,
the
.B O_XATTR
flag was not supplied, and the
file descriptor does not refer to a directory.
.RE

.sp
.ne 2
.mk
.na
.B ENXIO
.ad
.RS 16n
.rt
The
.B O_NONBLOCK
flag is set, the named file is a FIFO, the
\fBO_WRONLY\fR flag is set, and no process has the file open for reading; or
the named file is a character special or block special file and the device
associated with this special file does not exist or has been retired by the
fault management framework .
.RE

.sp
.ne 2
.mk
.na
.B EOPNOTSUPP
.ad
.RS 16n
.rt
An attempt was made to open a path that corresponds to a
.BR AF_UNIX
socket.
.RE

.sp
.ne 2
.mk
.na
.B EOVERFLOW
.ad
.RS 16n
.rt
The named file is a regular file and either
.B O_LARGEFILE
is not set
and the size of the file cannot be represented correctly in an object of
type \fBoff_t\fR or \fBO_LARGEFILE\fR is set and the size of the file cannot
be represented correctly in an object of type
.BR off64_t .
.RE

.sp
.ne 2
.mk
.na
.B EROFS
.ad
.RS 16n
.rt
The named file resides on a read-only file system and either
.BR O_WRONLY ,
.BR O_RDWR ,
\fBO_CREAT\fR (if file does not exist), or
\fBO_TRUNC\fR is set in the \fIoflag\fR argument.
.RE

.sp
.LP
The
.B openat()
function will fail if:
.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 9n
.rt
The \fIfildes\fR argument is not a valid open file descriptor or is not
.BR AT_FTCWD .
.RE

.sp
.LP
The
.B open()
function may fail if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 16n
.rt
The
.I path
argument names the slave side of a pseudo-terminal device
that is locked.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 16n
.rt
The value of the \fIoflag\fR argument is not valid.
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
Pathname resolution of a symbolic link produced an intermediate result
whose length exceeds {\fBPATH_MAX\fR}.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 16n
.rt
The
.I path
argument names a
.B STREAMS
file and the system is unable
to allocate resources.
.RE

.sp
.ne 2
.mk
.na
.B ETXTBSY
.ad
.RS 16n
.rt
The file is a pure procedure (shared text) file that is being executed and
\fIoflag\fR is \fBO_WRONLY\fR or \fBO_RDWR\fR.
.RE

.SH EXAMPLES
.LP
\fBExample 1\fR Open a file for writing by the owner.
.sp
.LP
The following example opens the file
.BR /tmp/file ,
either by creating it
if it does not already exist, or by truncating its length to 0 if it does
exist. If the call creates a new file, the access permission bits in the
file mode of the file are set to permit reading and writing by the owner,
and to permit reading only by group members and others.

.sp
.LP
If the call to
.B open()
is successful, the file is opened for
writing.

.sp
.in +2
.nf
#include <fcntl.h>
\&...
int fd;
mode_t mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH;
char *filename = "/tmp/file";
\&...
fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, mode);
\&...
.fi
.in -2

.LP
\fBExample 2\fR Open a file using an existence check.
.sp
.LP
The following example uses the
.B open()
function to try to create the
\fBLOCKFILE\fR file and open it for writing. Since the \fBopen()\fR function
specifies the
.B O_EXCL
flag, the call fails if the file already exists.
In that case, the application assumes that someone else is updating the
password file and exits.

.sp
.in +2
.nf
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#define LOCKFILE "/etc/ptmp"
\&...
int pfd; /* Integer for file descriptor returned by open() call. */
\&...
if ((pfd = open(LOCKFILE, O_WRONLY | O_CREAT | O_EXCL,
        S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)) == -1)
{
        fprintf(stderr, "Cannot open /etc/ptmp. Try again later.\en");
        exit(1);
}
\&...
.fi
.in -2

.LP
\fBExample 3\fR Open a file for writing.
.sp
.LP
The following example opens a file for writing, creating the file if it
does not already exist. If the file does exist, the system truncates the
file to zero bytes.

.sp
.in +2
.nf
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#define LOCKFILE "/etc/ptmp"
\&...
int pfd;
char filename[PATH_MAX+1];
\&...
if ((pfd = open(filename, O_WRONLY | O_CREAT | O_TRUNC,
        S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)) == -1)
{
        perror("Cannot open output file\en"); exit(1);
}
\&...
.fi
.in -2

.SH USAGE
.sp
.LP
The
.B open()
function has a transitional interface for 64-bit file
offsets. See
.BR lf64 (5).
Note that using
.B open64()
is equivalent to
using
.B open()
with
.B O_LARGEFILE
set in
.IR oflag .
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelAsync-Signal-Safe
_
StandardFor \fBopen()\fR, see \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
.BR Intro (2),
.BR chmod (2),
.BR close (2),
.BR creat (2),
.BR dup (2),
.BR exec (2),
\fBfcntl\fR(2), \fBgetmsg\fR(2),
.BR getrlimit (2),
.BR lseek (2),
.BR putmsg (2),
.BR read (2),
.BR stat (2),
.BR umask (2),
.BR write (2),
.BR attropen (3C),
\fBfcntl.h\fR(3HEAD), \fBstat.h\fR(3HEAD), \fBunlockpt\fR(3C),
.BR attributes (5),
.BR lf64 (5),
.BR privileges (5),
.BR standards (5),
.BR connld (7M),
.BR streamio (7I)
.SH NOTES
.sp
.LP
Hierarchical Storage Management (HSM) file systems can sometimes cause long
delays when opening a file, since HSM files must be recalled from secondary
storage.
