'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 1989 AT&T.
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH exec 2 "16 Jun 2008" "SunOS 5.11" "System Calls"
.SH NAME
exec, execl, execle, execlp, execv, execve, execvp \- execute a file
.SH SYNOPSIS
.LP
.nf
#include <unistd.h>

\fBint\fR \fBexecl\fR(\fBconst char *\fIpath\fR, \fBconst char *\fIarg0\fR, \fB\&...
     /* const char *\fIargn\fR, \fB(char *)0 */);\fR
.fi

.LP
.nf
\fBint\fR \fBexecv\fR(\fBconst char *\fIpath\fR, \fBchar *const\fR \fIargv[]\fR);
.fi

.LP
.nf
\fBint\fR \fBexecle\fR(\fBconst char *\fIpath\fR, \fBconst char *\fIarg0\fR, \fB\&...
     /* const char *\fIargn\fR, \fB(char *)0\fR,\fBchar *const\fR \fIenvp\fR[]*/);
.fi

.LP
.nf
\fBint\fR \fBexecve\fR(\fBconst char *\fIpath\fR, \fBchar *const\fR \fIargv[]\fR,
     \fBchar *const\fR \fIenvp[]\fR);
.fi

.LP
.nf
\fBint\fR \fBexeclp\fR(\fBconst char *\fIfile\fR, \fBconst char *\fIarg0\fR, \fB\&...
     /* const char *\fIargn\fR, \fB(char *)0 */);\fR
.fi

.LP
.nf
\fBint\fR \fBexecvp\fR(\fBconst char *\fIfile\fR, \fBchar *const\fR \fIargv[]\fR);
.fi

.SH DESCRIPTION
.sp
.LP
Each of the functions in the
.B exec
family replaces the current process
image with a new process image. The new image is constructed from a regular,
executable file called the
.BR "new process image file" .
This file is either
an executable object file or a file of data for an interpreter. There is no
return from a successful call to one of these functions because the calling
process image is overlaid by the new process image.
.sp
.LP
An interpreter file begins with a line of the form
.sp
.in +2
.nf
#! pathname [\fIarg\fR]
.fi
.in -2

.sp
.LP
where
.I pathname
is the path of the interpreter, and
.I arg
is an
optional argument. When an interpreter file is executed, the system invokes
the specified interpreter. The pathname specified in the interpreter file is
passed as
.I arg0
to the interpreter. If
.I arg
was specified in the
interpreter file, it is passed as
.I arg1
to the interpreter. The
remaining arguments to the interpreter are
.I arg0
through
.I argn
of
the originally exec'd file. The interpreter named by
.I pathname
must not
be an interpreter file.
.sp
.LP
When a C-language program is executed as a result of this call, it is
entered as a C-language function call as follows:
.sp
.in +2
.nf
int main (int argc, char *argv[]);
.fi
.in -2

.sp
.LP
where
.I argc
is the argument count and
.I argv
is an array of
character pointers to the arguments themselves. In addition, the following
variable:
.sp
.in +2
.nf
extern char **environ;
.fi
.in -2

.sp
.LP
is initialized as a pointer to an array of character pointers to the
environment strings. The
.I argv
and
.I environ
arrays are each
.RI "terminated by a null pointer. The null pointer terminating the" " argv"
array is not counted in
.IR argc .
.sp
.LP
The value of
.I argc
is non-negative, and if greater than 0,
\fIargv\fR[0] points to a string containing the name of the file. If
\fIargc\fR is 0, \fIargv\fR[0] is a null pointer, in which case there are no
arguments. Applications should verify that
.I argc
is greater than 0 or
that \fIargv\fR[0] is not a null pointer before dereferencing
.IR argv [0].
.sp
.LP
The arguments specified by a program with one of the
.B exec
functions
are passed on to the new process image in the
.B main()
arguments.
.sp
.LP
The
.I path
argument points to a path name that identifies the new
process image file.
.sp
.LP
The \fIfile\fR argument is used to construct a pathname that identifies the
new process image file. If the \fIfile\fR argument contains a slash
character, it is used as the pathname for this file. Otherwise, the path
prefix for this file is obtained by a search of the directories passed in
the
.B PATH
environment variable (see
.BR environ (5)).
The environment
is supplied typically by the shell. If the process image file is not a valid
executable object file,
.B execlp()
and
.B execvp()
use the contents
of that file as standard input to the shell. In this case, the shell becomes
the new process image. The standard to which the caller conforms determines
which shell is used. See
.BR standards (5).
.sp
.LP
The arguments represented by
.IR arg0 \&.\|.\|.
are pointers to
null-terminated character strings. These strings constitute the argument
list available to the new process image. The list is terminated by a null
pointer. The
.I arg0
argument should point to a filename that is
associated with the process being started by one of the
.BR exec
functions.
.sp
.LP
The
.I argv
argument is an array of character pointers to
null-terminated strings. The last member of this array must be a null
pointer. These strings constitute the argument list available to the new
process image. The value in \fIargv\fR[0] should point to a filename that is
associated with the process being started by one of the
.BR exec
functions.
.sp
.LP
The
.I envp
argument is an array of character pointers to
null-terminated strings. These strings constitute the environment for the
new process image.  The
.I envp
array is terminated by a null pointer.
For
.BR execl() ,
.BR execv() ,
.BR execvp() ,
and
.BR execlp() ,
the
C-language run-time start-off routine places a pointer to the environment of
the calling process in the global object
.BR "extern char **environ" ,
and it
is used to pass the environment of the calling process to the new process
image.
.sp
.LP
The number of bytes available for the new process's combined argument and
environment lists is
.BR ARG_MAX .
It is implementation-dependent whether
null terminators, pointers, and/or any alignment bytes are included in this
total.
.sp
.LP
File descriptors open in the calling process image remain open in the new
process image, except for those whose close-on-exec flag
.B FD_CLOEXEC
is
set; see
.BR fcntl (2).
For those file descriptors that remain open, all
attributes of the open file description, including file locks, remain
unchanged.
.sp
.LP
The preferred hardware address translation size (see
.BR memcntl (2))
for
the stack and heap of the new process image are set to the default system
page size.
.sp
.LP
Directory streams open in the calling process image are closed in the new
process image.
.sp
.LP
The state of conversion descriptors and message catalogue descriptors in
the new process image is undefined. For the new process, the equivalent
of:
.sp
.in +2
.nf
setlocale(LC_ALL, "C")
.fi
.in -2

.sp
.LP
is executed at startup.
.sp
.LP
Signals set to the default action (\fBSIG_DFL\fR) in the calling process
image are set to the default action in the new process image (see
.BR signal (3C)).
Signals set to be ignored (\fBSIG_IGN\fR) by the calling
process image are set to be ignored by the new process image. Signals set to
be caught by the calling process image are set to the default action in the
new process image (see \fBsignal.h\fR(3HEAD)). After a successful call to
any of the
.B exec
functions, alternate signal stacks are not preserved
and the
.B SA_ONSTACK
flag is cleared for all signals.
.sp
.LP
After a successful call to any of the
.B exec
functions, any functions
previously registered by
.BR atexit "(3C) are no longer registered."
.sp
.LP
The saved resource limits in the new process image are set to be a copy of
the process's corresponding hard and soft resource limits.
.sp
.LP
If the
.B ST_NOSUID
bit is set for the file system containing the new
process image file, then the effective user
.B ID
and effective group
\fBID\fR are unchanged in the new process image. If the set-user-\fBID\fR
mode bit of the new process image file is set (see
.BR chmod (2)),
the
effective user
.B ID
of the new process image is set to the owner
\fBID\fR of the new process image file. Similarly, if the set-group-\fBID\fR
mode bit of the new process image file is set, the effective group \fBID\fR
of the new process image is set to the group
.B ID
of the new process
image file. The real user
.B ID
and real group
.B ID
of the new
process image remain the same as those of the calling process image. The
effective user ID and effective group ID of the new process image are saved
(as the saved set-user-ID and the saved set-group-ID for use by
.BR setuid (2).
.sp
.LP
The privilege sets are changed according to the following rules:
.RS +4
.TP
1.
The inheritable set, I, is intersected with the limit set, L.  This
mechanism enforces the limit set for processes.
.RE
.RS +4
.TP
2.
The effective set, E, and the permitted set, P, are made equal to the new
inheritable set.
.RE
.sp
.LP
The system attempts to set the privilege-aware state to non-PA both before
performing any modifications to the process IDs and privilege sets as well
as after completing the transition to new UIDs and privilege sets, following
the rules outlined in
.BR privileges (5).
.sp
.LP
If the {\fBPRIV_PROC_OWNER\fR} privilege is asserted in the effective set,
the set-user-ID and set-group-ID bits will be honored when the process is
being controlled by
.BR ptrace "(3C). Additional restriction can apply when"
the traced process has an effective UID of 0. See
.BR privileges (5).
.sp
.LP
Any shared memory segments attached to the calling process image will not
be attached to the new process image (see
.BR shmop (2)).
Any mappings
established through
.B mmap()
are not preserved across an
.BR exec .
Memory mappings created in the process are unmapped before the address space
is rebuilt for the new process image. See
.BR mmap (2).
.sp
.LP
Memory locks established by the calling process via calls to
.BR mlockall (3C)
or \fBmlock\fR(3C) are removed. If locked pages in the
address space of the calling process are also mapped into the address spaces
the locks established by the other processes will be unaffected by the call
by this process to the
.B exec
function. If the
.B exec
function
fails, the effect on memory locks is unspecified.
.sp
.LP
If
.B _XOPEN_REALTIME
is defined and has a value other than \(mi1, any
named semaphores open in the calling process are closed as if by appropriate
calls to
.BR sem_close (3C)
.sp
.LP
Profiling is disabled for the new process; see
.BR profil (2).
.sp
.LP
Timers created by the calling process with
.BR timer_create "(3C) are"
deleted before replacing the current process image with the new process
image.
.sp
.LP
For the
.B SCHED_FIFO
and
.B SCHED_RR
scheduling policies, the policy
and priority settings are not changed by a call to an
.B exec
function.

.sp
.LP
All open message queue descriptors in the calling process are closed, as
described in
.BR mq_close (3C).
.sp
.LP
Any outstanding asynchronous I/O operations may be cancelled. Those
asynchronous I/O operations that are not canceled will complete as if the
\fBexec\fR function had not yet occurred, but any associated signal
notifications are suppressed. It is unspecified whether the \fBexec\fR
function itself blocks awaiting such I/O completion. In no event, however,
will the new process image created by the
.B exec
function be affected by
the presence of outstanding asynchronous I/O operations at the time the
\fBexec\fR function is called.
.sp
.LP
All active contract templates are cleared (see
.BR contract (4)).
.sp
.LP
The new process also inherits the following attributes from the calling
process:
.RS +4
.TP
.ie t \(bu
.el o
controlling terminal
.RE
.RS +4
.TP
.ie t \(bu
.el o
current working directory
.RE
.RS +4
.TP
.ie t \(bu
.el o
file-locks (see
.BR fcntl (2)
and
.BR lockf (3C))
.RE
.RS +4
.TP
.ie t \(bu
.el o
file mode creation mask (see
.BR umask (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
file size limit (see
.BR ulimit (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
limit privilege set
.RE
.RS +4
.TP
.ie t \(bu
.el o
nice value (see
.BR nice (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
parent process
.BR ID
.RE
.RS +4
.TP
.ie t \(bu
.el o
pending signals (see
.BR sigpending (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
privilege debugging flag (see
.BR privileges (5)
and
.BR getpflags (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
process
.BR ID
.RE
.RS +4
.TP
.ie t \(bu
.el o
process contract (see
.BR contract (4)
and
.BR process (4))
.RE
.RS +4
.TP
.ie t \(bu
.el o
process group
.BR ID
.RE
.RS +4
.TP
.ie t \(bu
.el o
process signal mask (see
.BR sigprocmask (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
processor bindings (see
.BR processor_bind (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
processor set bindings (see
.BR pset_bind (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
project
.BR ID
.RE
.RS +4
.TP
.ie t \(bu
.el o
real group
.BR ID
.RE
.RS +4
.TP
.ie t \(bu
.el o
real user
.BR ID
.RE
.RS +4
.TP
.ie t \(bu
.el o
resource limits (see
.BR getrlimit (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
root directory
.RE
.RS +4
.TP
.ie t \(bu
.el o
scheduler class and priority (see
.BR priocntl (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBsemadj\fR values (see \fBsemop\fR(2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
session membership (see
.BR exit (2)
and
.BR signal (3C))
.RE
.RS +4
.TP
.ie t \(bu
.el o
supplementary group
.BR IDs
.RE
.RS +4
.TP
.ie t \(bu
.el o
task
.BR ID
.RE
.RS +4
.TP
.ie t \(bu
.el o
time left until an alarm clock signal (see
.BR alarm (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
.BR tms_utime ,
.BR tms_stime ,
.BR tms_cutime ,
and
.BR tms_cstime
(see
.BR times (2))
.RE
.RS +4
.TP
.ie t \(bu
.el o
trace flag (see
.BR ptrace (3C)
request 0)
.RE
.sp
.LP
A call to any
.B exec
function from a process with more than one thread
results in all threads being terminated and the new executable image being
loaded and executed. No destructor functions will be called.
.sp
.LP
Upon successful completion, each of the functions in the
.B exec
family
marks for update the
.B st_atime
field of the file.  If an \fBexec\fR
function failed but was able to locate the
.BR "process image file" ,
whether
the
.B st_atime
field is marked for update is unspecified. Should the
function succeed, the process image file is considered to have been opened
with
.BR open (2).
The corresponding
.BR close (2)
is considered to occur
at a time after this open, but before process termination or successful
completion of a subsequent call to one of the
.B exec
functions. The
\fIargv\fR[\|] and \fIenvp\fR[\|] arrays of pointers and the strings to
which those arrays point will not be modified by a call to one of the
\fBexec\fR functions, except as a consequence of replacing the process
image.
.sp
.LP
The saved resource limits in the new process image are set to be a copy of
the process's corresponding hard and soft limits.
.SH RETURN VALUES
.sp
.LP
If a function in the
.B exec
family returns to the calling process
image, an error has occurred; the return value is \fB\(mi1\fR and
\fBerrno\fR is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B exec
functions will fail if:
.sp
.ne 2
.mk
.na
.B E2BIG
.ad
.RS 16n
.rt
The number of bytes in the new process's argument list is greater than the
system-imposed limit of {\fBARG_MAX\fR} bytes. The argument list limit is
sum of the size of the argument list plus the size of the environment's
exported shell variables.
.RE

.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 16n
.rt
Search permission is denied for a directory listed in the new process
file's path prefix.
.sp
The new process file is not an ordinary file.
.sp
The new process file mode denies execute permission.
.sp
The {\fBFILE_DAC_SEARCH\fR} privilege overrides the restriction on
directory searches.
.sp
The {\fBFILE_DAC_EXECUTE\fR} privilege overrides the lack of execute
permission.
.RE

.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 16n
.rt
Total amount of system memory available when reading using raw I/O is
temporarily insufficient.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 16n
.rt
An argument points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 16n
.rt
The new process image file has the appropriate permission and has a
recognized executable binary format, but the system does not support
execution of a file with this format.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 16n
.rt
A signal was caught during the execution of one of the functions in the
\fIexec\fR family.
.RE

.sp
.ne 2
.mk
.na
.B ELOOP
.ad
.RS 16n
.rt
Too many symbolic links were encountered in translating
.I path
or
.IR file .
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
The length of the \fIfile\fR or
.I path
argument exceeds
{\fBPATH_MAX\fR}, or the length of a \fIfile\fR or \fIpath\fR component
exceeds {\fBNAME_MAX\fR} while {\fB_POSIX_NO_TRUNC\fR} is in effect.
.RE

.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 16n
.rt
One or more components of the new process path name of the file do not
exist or is a null pathname.
.RE

.sp
.ne 2
.mk
.na
.B ENOLINK
.ad
.RS 16n
.rt
The
.I path
argument points to a remote machine and the link to that
machine is no longer active.
.RE

.sp
.ne 2
.mk
.na
.B ENOTDIR
.ad
.RS 16n
.rt
A component of the new process path of the file prefix is not a
directory.
.RE

.sp
.LP
The
.B exec
functions, except for
.B execlp()
and
.BR execvp() ,
will fail if:
.sp
.ne 2
.mk
.na
.B ENOEXEC
.ad
.RS 11n
.rt
The new process image file has the appropriate access permission but is not
in the proper format.
.RE

.sp
.LP
The
.B exec
functions may fail if:
.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
Pathname resolution of a symbolic link produced an intermediate result
whose length exceeds {\fBPATH_MAX\fR}.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 16n
.rt
The new process image requires more memory than is allowed by the hardware
or system-imposed by memory management constraints. See
.BR brk (2).
.RE

.sp
.ne 2
.mk
.na
.B ETXTBSY
.ad
.RS 16n
.rt
The new process image file is a pure procedure (shared text) file that is
currently open for writing by some process.
.RE

.SH USAGE
.sp
.LP
As the state of conversion descriptors and message catalogue descriptors in
the new process image is undefined, portable applications should not rely on
their use and should close them prior to calling one of the
.BR exec
functions.
.sp
.LP
Applications that require other than the default POSIX locale should call
.BR setlocale (3C)
with the appropriate parameters to establish the locale
of thenew process.
.sp
.LP
The
.I environ
array should not be accessed directly by the
application.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelSee below.
_
StandardSee \fBstandards\fR(5).
.TE

.sp
.LP
The
.B execle()
and
.B execve()
fucntions are Async-Signal-Safe.
.SH SEE ALSO
.sp
.LP
.BR ksh (1),
.BR ps (1),
.BR sh (1),
.BR alarm (2),
.BR brk (2),
.BR chmod (2),
.BR exit (2),
\fBfcntl\fR(2), \fBfork\fR(2),
\fBgetpflags\fR(2), \fBgetrlimit\fR(2),
.BR memcntl (2),
.BR mmap (2),
.BR nice (2),
.BR priocntl (2),
\fBprofil\fR(2), \fBsemop\fR(2),
.BR shmop (2),
.BR sigpending (2),
.BR sigprocmask (2),
.BR times (2),
.BR umask (2),
\fBlockf\fR(3C), \fBptrace\fR(3C), \fBsetlocale\fR(3C),
.BR signal (3C),
.BR system (3C),
.BR timer_create (3C),
.BR a.out (4),
.BR contract (4),
.BR process (4),
.BR attributes (5),
.BR environ (5),
.BR privileges (5),
.BR standards (5)
.SH WARNINGS
.sp
.LP
If a program is
.B setuid
to a user
.B ID
other than the superuser,
and the program is executed when the real user
.B ID
is super-user, then
the program has some of the powers of a super-user as well.
