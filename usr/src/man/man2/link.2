'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH link 2 "18 May 2007" "SunOS 5.11" "System Calls"
.SH NAME
link \- link to a file
.SH SYNOPSIS
.LP
.nf
#include <unistd.h>

\fBint\fR \fBlink\fR(\fBconst char *\fIexisting\fR, \fBconst char *\fInew\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B link()
function creates a new link (directory entry) for the
existing file and increments its link count by one.  The
.I existing
argument points to a path name naming an existing file.  The
.I new
argument points to a pathname naming the new directory entry to be
created.
.sp
.LP
To create hard links, both files must be on the same file system. Both the
old and the new link share equal access and rights to the underlying object.
Privileged processes can make multiple links to a directory. Unless the
caller is privileged, the file named by
.I existing
must not be a
directory.
.sp
.LP
Upon successful completion,
.B link()
marks for update the
.B st_ctime
field of the file. Also, the
.B st_ctime
and
.B st_mtime
fields of the directory that contains the new entry are
marked for update.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B 0
is returned. Otherwise,
.B \(mi1
is
returned, no link is created, and
.B errno
is set to indicate the
error.
.SH ERRORS
.sp
.LP
The
.B link()
function will fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 16n
.rt
A component of either path prefix denies search permission, or the
requested link requires writing in a directory with a mode that denies write
permission.
.RE

.sp
.ne 2
.mk
.na
.B EDQUOT
.ad
.RS 16n
.rt
The directory where the entry for the new link is being placed cannot be
extended because the user's quota of disk blocks on that file system has
been exhausted.
.RE

.sp
.ne 2
.mk
.na
.B EEXIST
.ad
.RS 16n
.rt
The link named by
.I new
exists.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 16n
.rt
The
.I existing
or
.I new
argument points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EILSEQ
.ad
.RS 16n
.rt
The path argument includes non-UTF8 characters and the file system accepts
only file names where all characters are part of the UTF-8 character
codeset.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 16n
.rt
A signal was caught during the execution of the
.B link()
function.
.RE

.sp
.ne 2
.mk
.na
.B ELOOP
.ad
.RS 16n
.rt
Too many symbolic links were encountered in translating
.IR path .
.RE

.sp
.ne 2
.mk
.na
.B EMLINK
.ad
.RS 16n
.rt
The maximum number of links to a file would be exceeded.
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
The length of the
.I existing
or
.I new
argument exceeds
.BR PATH_MAX ,
or the length of a
.I existing
or
.I new
component
exceeds
.B NAME_MAX
while
.B _POSIX_NO_TRUNC
is in effect.
.RE

.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 16n
.rt
The
.I existing
or
.I new
argument is a null pathname; a component of
either path prefix does not exist; or the file named by
.I existing
does
not exist.
.RE

.sp
.ne 2
.mk
.na
.B ENOLINK
.ad
.RS 16n
.rt
The
.I existing
or
.I new
argument points to a remote machine and the
link to that machine is no longer active.
.RE

.sp
.ne 2
.mk
.na
.B ENOSPC
.ad
.RS 16n
.rt
The directory that would contain the link cannot be extended.
.RE

.sp
.ne 2
.mk
.na
.B ENOTDIR
.ad
.RS 16n
.rt
A component of either path prefix is not a directory.
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 16n
.rt
The file named by
.I existing
is a directory and the
.RB { PRIV_SYS_LINKDIR }
privilege is not asserted in the effective set of
the calling process.
.sp
The effective user ID does not match the owner of the file and the
.RB { PRIV_FILE_LINK_ANY }
privilege is not asserted in the effective set of
the calling process.
.RE

.sp
.ne 2
.mk
.na
.B EROFS
.ad
.RS 16n
.rt
The requested link requires writing in a directory on a read-only file
system.
.RE

.sp
.ne 2
.mk
.na
.B EXDEV
.ad
.RS 16n
.rt
The link named by
.I new
and the file named by
.I existing
are on
different logical devices (file systems).
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelAsync-Signal-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR symlink (2),
.BR unlink (2),
.BR attributes (5),
.BR privileges (5),
.BR standards (5)
