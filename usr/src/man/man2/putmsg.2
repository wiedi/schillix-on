'\" te
.\" Copyright 1989 AT&T.
.\" Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH putmsg 2 "1 Nov 2003" "SunOS 5.11" "System Calls"
.SH NAME
putmsg, putpmsg \- send a message on a stream
.SH SYNOPSIS
.LP
.nf
#include <stropts.h>

\fBint\fR \fBputmsg\fR(\fBint\fR \fIfildes\fR, \fBconst struct strbuf *\fIctlptr\fR,
     \fBconst struct strbuf *\fIdataptr\fR, \fBint\fR \fIflags\fR);
.fi

.LP
.nf
\fBint\fR \fBputpmsg\fR(\fBint\fR \fIfildes\fR, \fBconst struct strbuf *\fIctlptr\fR,
     \fBconst struct strbuf *\fIdataptr\fR,\fBint\fR \fIband\fR, \fBint\fR \fIflags\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B putmsg()
function creates a message  from user-specified
buffer(s) and sends the message to a streams file. The message may contain
either a data part, a control part, or both. The data and control parts to
be sent are distinguished by placement in separate  buffers, as described
below. The semantics of each part is defined by the streams module that
receives the message.
.sp
.LP
The
.B putpmsg()
function does the same thing as
.BR putmsg() ,
but
provides the user the ability to send messages in different priority bands.
Except where noted, all information pertaining to
.B putmsg()
also
pertains to
.BR putpmsg() .
.sp
.LP
The
.I fildes
argument specifies a file descriptor referencing an open
stream. The
.I ctlptr
and
.I dataptr
arguments each point to a
.B strbuf
structure, which contains the following members:
.sp
.in +2
.nf
int      maxlen;     /* not used here */
int      len;        /* length of data */
void     *buf;       /* ptr to buffer */
.fi
.in -2

.sp
.LP
The
.I ctlptr
argument points to the structure describing the control
part, if any, to be included in the message. The
.B buf
member in the
.B strbuf
structure points to the buffer where the control information
resides, and the
.B len
member indicates the number of bytes to be sent.
The
.B maxlen
member is not used in
.B putmsg()
(see
.BR getmsg (2)).
In a similar manner,
.I dataptr
specifies the data, if any, to be
included in  the message.  The
.I flags
argument indicates what type of
message should be sent and is described later.
.sp
.LP
To send the data part of a message,
.I dataptr
must not be
.IR NULL ,
and the
.B len
member of
.I dataptr
must have a value of 0 or greater.
To send the control part of a message, the corresponding values must be set
for
.IR ctlptr .
No data (control) part is sent if either \fIdataptr\fR
(\fIctlptr\fR) is  \fINULL\fR or the \fBlen\fR member of \fIdataptr\fR
(\fIctlptr\fR) is negative.
.sp
.LP
For
.BR putmsg() ,
if a control part is specified, and
.I flags
is set
to
.BR RS_HIPRI ,
a high priority message is sent. If no control part is
specified, and
.I flags
is set to
.BR RS_HIPRI ,
.B putmsg()
fails
and sets
.B errno
to
.BR EINVAL .
If
.I flags
is set to 0, a normal
(non-priority) message is sent. If no control part and no data part are
specified, and
.I flags
is set to 0,  no message is sent, and 0 is
returned.
.sp
.LP
The stream head guarantees that the control part of a message generated by
.B putmsg()
is at least 64 bytes in length.
.sp
.LP
For
.BR putpmsg() ,
the flags are different.  The
.I flags
argument is
a bitmask with the following mutually-exclusive flags defined:
.B MSG_HIPRI
and
.BR MSG_BAND .
If
.I flags
is set to 0,
.B putpmsg()
fails and sets
.B errno
to
.BR EINVAL .
If a control
part is specified and \fIflags\fR is set to \fBMSG_HIPRI\fR and \fIband\fR
is set to 0, a high-priority message is sent. If
.I flags
is set to
.B MSG_HIPRI
and either no control part is specified or
.I band
is set
to a non-zero value,
.B putpmsg()
fails and sets
.B errno
to
.BR EINVAL .
If flags is set to
.BR MSG_BAND ,
then a message is sent in
the priority band specified by
.IR band .
If a control part and data part
are not specified and
.I flags
is set to
.BR MSG_BAND ,
no message is
sent and 0 is returned.
.sp
.LP
Normally,
.B putmsg()
will block if the stream write queue is full due
to internal flow control conditions. For high-priority messages,
.B putmsg()
does not block on this condition. For other messages,
.B putmsg()
does not block when the write queue is full and
.B O_NDELAY
or
.B O_NONBLOCK
is set. Instead, it fails and sets
.B errno
to
.BR EAGAIN .
.sp
.LP
The
.B putmsg()
or
.B putpmsg()
function also blocks, unless
prevented by lack of internal resources, waiting  for the availability of
message blocks in the stream, regardless of priority  or whether
.B O_NDELAY
or
.B O_NONBLOCK
has been specified. No partial message is
sent.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B 0
is returned. Otherwise,
.B \(mi1
is
returned and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B putmsg()
and
.B putpmsg()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 16n
.rt
A non-priority message was specified, the
.B O_NDELAY
or
.B O_NONBLOCK
flag is  set and the stream write queue is full due to
internal flow control conditions.
.RE

.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 16n
.rt
The
.I fildes
argument is not a valid file descriptor open for
writing.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 16n
.rt
The
.I ctlptr
or
.I dataptr
argument points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 16n
.rt
A signal was caught during the execution of the
.B putmsg()
function.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 16n
.rt
An undefined value was specified in
.IR flags ;
.I flags
is set to
.B RS_HIPRI
and no control part was supplied; or the stream referenced by
.I fildes
is linked below a multiplexor.
.RE

.sp
.ne 2
.mk
.na
.B ENOSR
.ad
.RS 16n
.rt
Buffers could not be allocated for the message that was to be created due
to insufficient streams memory resources.
.RE

.sp
.ne 2
.mk
.na
.B ENOSTR
.ad
.RS 16n
.rt
The
.I fildes
argument is not associated with a stream.
.RE

.sp
.ne 2
.mk
.na
.B ENXIO
.ad
.RS 16n
.rt
A hangup condition was generated downstream for the specified stream, or
the other end of the pipe is closed.
.RE

.sp
.ne 2
.mk
.na
.B EPIPE
or
.BR EIO
.ad
.RS 16n
.rt
The
.I fildes
argument refers to a streams-based pipe and the other end
of the pipe is closed.  A
.B SIGPIPE
signal is generated for the calling
thread. This error condition occurs only with SUS-conforming applications.
See
.BR standards (5).
.RE

.sp
.ne 2
.mk
.na
.B ERANGE
.ad
.RS 16n
.rt
The size of the data part of the message does not fall within the range
specified by the maximum and minimum packet sizes of the topmost stream
module. This value is also returned if the control part of the message is
larger than the maximum configured size of the control part of a message, or
if the data part of a message is larger than the maximum configured size of
the data part of a message.
.RE

.sp
.LP
In addition,
.B putmsg()
and
.B putpmsg()
will fail if the stream
head had processed an asynchronous error before the call.  In this case, the
value of
.B errno
does not reflect the result of
.B putmsg()
or
.B putpmsg()
but reflects the prior error.
.sp
.LP
The
.B putpmsg()
function will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I flags
argument is set to
.B MSG_HIPRI
and
.I band
is
non-zero.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
.TE

.SH SEE ALSO
.sp
.LP
.BR Intro (2),
.BR getmsg (2),
.BR poll (2),
.BR read (2),
.BR write (2),
.BR attributes (5),
.BR standards (5)
.sp
.LP
.I STREAMS Programming Guide
