'\" te
.\" Copyright (c) 2008, Sun Microsystems Inc. All
.\" Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH mmapobj 2 "1 Dec 2008" "SunOS 5.11" "System Calls"
.SH NAME
mmapobj \- map a file object in the appropriate manner
.SH SYNOPSIS
.LP
.nf
#include <sys/mman.h>

\fBint\fR \fBmmapobj\fR(\fBint\fR \fIfd\fR, \fBuint_t\fR \fIflags\fR, \fBmmapobj_result_t *\fIstorage\fR,
     \fBuint_t *\fIelements\fR, \fBvoid *\fIarg\fR);
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
\fIfd\fR
.ad
.RS 12n
.rt
The open file descriptor for the file to be mapped.
.RE

.sp
.ne 2
.mk
.na
\fIflags\fR
.ad
.RS 12n
.rt
Indicates that the default behavior of
.B mmapobj()
should be modified
accordingly. Available flags are:
.sp
.ne 2
.mk
.na
.B MMOBJ_INTERPRET
.ad
.sp .6
.RS 4n
Interpret the contents of the file descriptor instead of just mapping it as
a single image. This flag can be used only with
.B ELF
and
.BR AOUT
files.
.RE

.sp
.ne 2
.mk
.na
.B MMOBJ_PADDING
.ad
.sp .6
.RS 4n
When mapping in the file descriptor, add an additional mapping before the
lowest mapping and after the highest mapping. The size of this padding is at
least as large as the amount pointed to by
.IR arg .
These mappings will be
private to the process, will not reserve any swap space and will have no
protections. To use this address space, the protections for it will need to
be changed. This padding request will be ignored for the \fBAOUT\fR
format.
.RE

.RE

.sp
.ne 2
.mk
.na
.I storage
.ad
.RS 12n
.rt
A pointer to the
.B mmapobj_result_t
array where the mapping data will
be copied out after a successful mapping of
.IR fd .
.RE

.sp
.ne 2
.mk
.na
.I elements
.ad
.RS 12n
.rt
A pointer to the number of
.B mmapobj_result_t
elements pointed to by
.IR storage .
On return,
.I elements
contains the number of mappings
required to fully map the requested object.  If the original value of
\fIelements\fR is too small, \fBE2BIG\fR is returned and \fIelements\fR is
modified to contain the number of mappings necessary.
.RE

.sp
.ne 2
.mk
.na
.I arg
.ad
.RS 12n
.rt
A pointer to additional information that might be associated with the
specific request. Only the
.B MMOBJ_PADDING
request uses this argument.
If
.B MMOBJ_PADDING
is not specified,
.I arg
must be
.IR NULL .
.RE

.SH DESCRIPTION
.sp
.LP
The
.B mmapobj()
function establishes a set of mappings between a
process's address space and a file.  By default,
.B mmapobj()
maps the
whole file as a single, private, read-only mapping.  The
\fBMMOBJ_INTERPRET\fR flag instructs \fBmmapobj()\fR to attempt to interpret
the file and map the file according to the rules for that file format.  The
following
.B ELF
and
.B AOUT
formats are supported:
.sp
.ne 2
.mk
.na
\fBET_EXEC\fR and \fBAOUT\fR executables\fR
.ad
.sp .6
.RS 4n
This format results in one or more mappings whose size, alignment and
protections are as described by the file's program header information. The
address of each mapping is explicitly defined by the file's program
headers.
.RE

.sp
.ne 2
.mk
.na
\fBET_DYN\fR and \fBAOUT\fR shared objects\fR
.ad
.sp .6
.RS 4n
This format results in one or more mappings whose size, alignment and
protections are as described by the file's program header information. The
base address of the initial mapping is chosen by
.BR mmapobj() .
The
addresses of adjacent mappings are based off of this base address as defined
by the file's program headers.
.RE

.sp
.ne 2
.mk
.na
\fBET_REL\fR and \fBET_CORE\fR
.ad
.sp .6
.RS 4n
This format results in a single, read-only mapping that covers the whole
file. The base address of this mapping is chosen by
.BR mmapobj() .
.RE

.sp
.LP
The
.B mmapobj()
function will not map over any currently used mappings
within the process, except for the case of an
.B "ELF ET_EXEC"
file for
which a previous reservation has been made via
.BR /dev/null .
The most
common way to make such a reservation would be with an
.B mmap()
of
.BR /dev/null .
.sp
.LP
Mappings created with
.B mmapobj()
can be processed individually by
other system calls such as
.BR munmap (2).
.sp
.LP
The
.B mmapobj_result
structure contains the following members:
.sp
.in +2
.nf
typedef struct mmapobj_result {
      caddr_t         mr_addr;         /* mapping address */
      size_t          mr_msize;        /* mapping size */
      size_t          mr_fsize;        /* file size */
      size_t          mr_offset;       /* offset into file */
      uint_t          mr_prot;         /* the protections provided */
      uint_t          mr_flags;        /* info on the mapping */
} mmapobj_result_t;
.fi
.in -2

.sp
.LP
The macro \fBMR_GET_TYPE\fR(\fImr_flags\fR) must be used when looking for
the above flags in the value of
.IR mr_flags .
.sp
.LP
Values for \fImr_flags\fR include:
.sp
.in +2
.nf
MR_PADDING   0x1  /* this mapping represents requested padding */
MR_HDR_ELF   0x2  /* the ELF header is mapped at mr_addr */
MR_HDR_AOU   0x3  /* the AOUT header is mapped at mr_addr */
.fi
.in -2

.sp
.LP
When
.B MR_PADDING
is set, \fImr_fsize\fR and \fImr_offset\fR will both
be 0.
.sp
.LP
The \fImr_fsize\fR member represents the amount of the file that is mapped
into memory with this mapping.
.sp
.LP
The \fImr_offset\fR member is the offset into the mapping where valid data
begins.
.sp
.LP
The
.I mr_msize
member represents the size of the memory mapping
starting at
.IR mr_addr .
This size may include unused data prior to
\fImr_offset\fR that exists to satisfy the alignment requirements of this
segment. This size may also include any non-file data that are required to
provide
.B NOBITS
data (typically .\fBbss\fR). The system reserves the
right to map more than
.I mr_msize
bytes of memory but only
\fImr_msize\fR bytes will be available to the caller of \fBmmapobj()\fR.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, 0 is returned and
.I elements
contains the
number of program headers that are mapped for
.IR fd .
The data describing
these elements are copied to storage such that the first
.IR elements
members of the storage array contain valid mapping data.
.sp
.LP
On failure, -1 is returned and
.B errno
is set to indicate the error. No
data is copied to storage.
.SH ERRORS
.sp
.LP
The
.B mmapobj()
function will fail if:
.sp
.ne 2
.mk
.na
.B E2BIG
.ad
.RS 14n
.rt
The
.I elements
argument was not large enough to hold the number of
loadable segments in
.IR fd .
The
.I elements
argument will be modified
to contain the number of segments required.
.RE

.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 14n
.rt
The file system containing the \fIfd\fR to be mapped does not allow execute
access, or the file descriptor pointed to by \fIfd\fR is not open for
reading.
.RE

.sp
.ne 2
.mk
.na
.B EADDRINUSE
.ad
.RS 14n
.rt
The mapping requirements overlap an object that is already used by the
process.
.RE

.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 14n
.rt
There is insufficient room to reserve swap space for the mapping.
.sp
The file to be mapped is already locked using advisory or mandatory record
locking. See
.BR fcntl (2).
.RE

.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 14n
.rt
The \fIfd\fR argument is not a valid open file descriptor.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 14n
.rt
The
.IR storage ,
.IR arg ,
or
.I elements
argument points to an
invalid address.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 14n
.rt
The \fIflags\fR argument contains an invalid flag.
.sp
\fBMMOBJ_PADDING\fR was not specified in \fIflags\fRand \fIarg\fR was
non-null.
.RE

.sp
.ne 2
.mk
.na
.B ENODEV
.ad
.RS 14n
.rt
The \fIfd\fR argument refers to an object for which
.B mmapobj()
is
meaningless, such as a terminal.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 14n
.rt
Insufficient memory is available to hold the program headers.
.sp
Insufficient memory is available in the address space to create the
mapping.
.RE

.sp
.ne 2
.mk
.na
.B ENOTSUP
.ad
.RS 14n
.rt
The current user data model does not match the \fIfd\fR to be interpreted;
thus, a 32-bit process that tried to use
.B mmapobj()
to interpret a
64-bit object would return
.BR ENOTSUP .
.sp
The \fIfd\fR argument is a file whose type can not be interpreted and
\fBMMOBJ_INTERPRET\fR was specified in \fIflags\fR.
.sp
The
.B ELF
header contains an unaligned
.I e_phentsize
value.
.RE

.sp
.ne 2
.mk
.na
.B ENOSYS
.ad
.RS 14n
.rt
An unsupported filesystem operation was attempted while trying to map in
the object.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityPrivate
_
MT-LevelAsync-Signal-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR ld.so.1 (1),
.BR fcntl (2),
.BR memcntl (2),
.BR mmap (2),
.BR mprotect (2),
.BR munmap (2),
\fBelf\fR(3ELF), \fBmadvise\fR(3C),
.BR mlockall (3C),
.BR msync (3C),
.BR a.out (4),
.BR attributes (5)
.sp
.LP
.I Linker and Libraries Guide
