'\" te
.\" Copyright (c) 1997, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH _lwp_mutex_lock 2 "30 Jul 1992" "SunOS 5.11" "System Calls"
.SH NAME
_lwp_mutex_lock, _lwp_mutex_unlock, _lwp_mutex_trylock \- mutual
exclusion
.SH SYNOPSIS
.LP
.nf
#include <sys/lwp.h>

\fBint\fR \fB_lwp_mutex_lock\fR(\fBlwp_mutex_t *\fImp\fR);
.fi

.LP
.nf
\fBint\fR \fB_lwp_mutex_trylock\fR(\fBlwp_mutex_t *\fImp\fR);
.fi

.LP
.nf
\fBint\fR \fB_lwp_mutex_unlock\fR(\fBlwp_mutex_t *\fImp\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions serialize the execution of lightweight processes. They are
useful for ensuring that only one lightweight process can execute a critical
section of code at any one time (mutual exclusion). LWP mutexes must be
initialized to 0 before use.
.sp
.LP
The
.B _lwp_mutex_lock()
function locks the LWP mutex pointed to by
.IR mp .
If the mutex is already locked, the calling LWP blocks until the
mutex becomes available. When
.B _lwp_mutex_lock()
returns, the mutex is
locked and the calling LWP is the "owner".
.sp
.LP
The
.B _lwp_mutex_trylock()
function attempts to lock the mutex. If the
mutex is already locked it returns with an error. If the mutex is unlocked,
it is locked and
.B _lwp_mutex_trylock()
returns.
.sp
.LP
The
.B _lwp_mutex_unlock()
function unlocks a locked mutex. The mutex
must be locked and the calling LWP must be the one that last locked the
mutex (the owner). If any other LWPs are waiting for the mutex to become
available, one of them is unblocked.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B 0
is returned. A non-zero value indicates
an error.
.SH ERRORS
.sp
.LP
If any of the following conditions are detected,
.BR _lwp_mutex_lock() ,
.BR _lwp_mutex_trylock() ,
and
.B _lwp_mutex_unlock()
fail and return
the corresponding value:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I mp
argument points to an invalid LWP mutex.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The
.I mp
argument points to an illegal address.
.RE

.sp
.LP
If any of the following conditions occur,
.B _lwp_mutex_trylock()
fails
and returns the corresponding value:
.sp
.ne 2
.mk
.na
.B EBUSY
.ad
.RS 9n
.rt
The
.I mp
argument points to a locked mutex.
.RE

.SH SEE ALSO
.sp
.LP
.BR Intro (2),
.BR _lwp_cond_wait (2)
