'\" te
.\" Copyright 1989 AT&T.
.\" Copyright (c) 2004 Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH mknod 2 "19 Feb 2004" "SunOS 5.11" "System Calls"
.SH NAME
mknod \- make a directory, a special file, or a regular file
.SH SYNOPSIS
.LP
.nf
#include <sys/stat.h>

\fBint\fR \fBmknod\fR(\fBconst char *\fIpath\fR, \fBmode_t\fR \fImode\fR, \fBdev_t\fR \fIdev\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B mknod()
function creates a new file named by the path name
pointed to by
.IR path .
The file type and permissions of the new file are
initialized from
.IR mode .
.sp
.LP
The file type is specified in
.I mode
by the
.B S_IFMT
bits, which
must be set to one of the following values:
.sp
.ne 2
.mk
.na
.B S_IFIFO
.ad
.RS 11n
.rt
fifo special
.RE

.sp
.ne 2
.mk
.na
.B S_IFCHR
.ad
.RS 11n
.rt
character special
.RE

.sp
.ne 2
.mk
.na
.B S_IFDIR
.ad
.RS 11n
.rt
directory
.RE

.sp
.ne 2
.mk
.na
.B S_IFBLK
.ad
.RS 11n
.rt
block special
.RE

.sp
.ne 2
.mk
.na
.B S_IFREG
.ad
.RS 11n
.rt
ordinary file
.RE

.sp
.LP
The file access permissions are specified in
.I mode
by the 0007777
bits, and may be constructed by a bitwise
.B OR
operation of the
following values:
.sp

.sp
.TS
tab();
lw(1.08i) lw(.89i) lw(3.53i)
lw(1.08i) lw(.89i) lw(3.53i)
.
\fBS_ISUID\fR04000Set user ID on execution.
\fBS_ISGID\fR020#0T{
Set group ID on execution if # is \fB7\fR, \fB5\fR, \fB3\fR, or \fB1\fR. Enable mandatory file/record locking if # is \fB6\fR, \fB4\fR, \fB2\fR, or \fB0\fR
T}
\fBS_ISVTX\fR01000T{
On directories, restricted deletion flag; on regular files on a UFS file system, do not cache flag.
T}
\fBS_IRWXU\fR00700Read, write, execute by owner.
\fBS_IRUSR\fR00400Read by owner.
\fBS_IWUSR\fR00200Write by owner.
\fBS_IXUSR\fR00100T{
Execute (search if a directory) by owner.
T}
\fBS_IRWXG\fR00070Read, write, execute by group.
\fBS_IRGRP\fR00040Read by group.
\fBS_IWGRP\fR00020Write by group.
\fBS_IXGRP\fR00010Execute by group.
\fBS_IRWXO\fR00007Read, write, execute (search) by others.
\fBS_IROTH\fR00004Read by others.
\fBS_IWOTH\fR00002Write by others
\fBS_IXOTH\fR00001Execute by others.
.TE

.sp
.LP
The owner
.B ID
of the file is set to the effective user
.B ID
of the
process. The group
.B ID
of the file is set to the effective group
.B ID
of the process.  However, if the
.B S_ISGID
bit is set in the
parent directory, then the group
.B ID
of the file is inherited from the
parent. If the group
.B ID
of the new file does not match the effective
group
.B ID
or one of the supplementary group IDs, the
.B S_ISGID
bit
is cleared.
.sp
.LP
The access permission bits of
.I mode
are modified by the process's file
mode creation mask: all bits set in the process's file mode creation mask
are cleared (see
.BR umask (2)).
If
.I mode
indicates a block or
character special file,
.I dev
is a configuration-dependent specification
of a character or block I/O device. If
.I mode
does not indicate a block
special or character special device,
.I dev
is ignored. See
.BR makedev (3C).
.sp
.LP
If
.I path
is a symbolic link, it is not followed.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B mknod()
returns
.BR 0 .
Otherwise, it
returns \fB\(mi1\fR, the new file is not created, and
.B errno
is set to
indicate the error.
.SH ERRORS
.sp
.LP
The
.B mknod()
function will fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 16n
.rt
A component of the path prefix denies search permission, or write
permission is denied on the parent directory.
.RE

.sp
.ne 2
.mk
.na
.B EDQUOT
.ad
.RS 16n
.rt
The directory where the new file entry is being placed cannot be extended
because the user's quota of disk blocks on that file system has been
exhausted, or the user's quota of inodes on the file system where the file
is being created has been exhausted.
.RE

.sp
.ne 2
.mk
.na
.B EEXIST
.ad
.RS 16n
.rt
The named file exists.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 16n
.rt
The
.I path
argument points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 16n
.rt
A signal was caught during the execution of the
.B mknod()
function.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 16n
.rt
An invalid argument exists.
.RE

.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 16n
.rt
An I/O error occurred while accessing the file system.
.RE

.sp
.ne 2
.mk
.na
.B ELOOP
.ad
.RS 16n
.rt
Too many symbolic links were encountered in translating
.IR path .
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
The length of the
.I path
argument exceeds
.RB { PATH_MAX },
or
the length of a
.I path
component exceeds
.RB { NAME_MAX }
while
.B _POSIX_NO_TRUNC
is in effect.
.RE

.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 16n
.rt
A component of the path prefix specified by
.I path
does not name an
existing directory or
.I path
is an empty string.
.RE

.sp
.ne 2
.mk
.na
.B ENOLINK
.ad
.RS 16n
.rt
The
.I path
argument points to a remote machine and the link to that
machine is no longer active.
.RE

.sp
.ne 2
.mk
.na
.B ENOSPC
.ad
.RS 16n
.rt
The directory that would contain the new file cannot be extended or the
file system is out of file allocation resources.
.RE

.sp
.ne 2
.mk
.na
.B ENOTDIR
.ad
.RS 16n
.rt
A component of the path prefix is not a directory.
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 16n
.rt
Not all privileges are asserted in the effective set of the calling
process.
.RE

.sp
.ne 2
.mk
.na
.B EROFS
.ad
.RS 16n
.rt
The directory in which the file is to be created is located on a read-only
file system.
.RE

.sp
.LP
The
.B mknod()
function may fail if:
.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
Pathname resolution of a symbolic link produced an intermediate result
whose length exceeds
.RB { PATH_MAX }.
.RE

.SH USAGE
.sp
.LP
Applications should use the
.BR mkdir (2)
function to create a directory
because appropriate permissions are not required and because
.BR mknod()
might not establish directory entries for the directory itself
.RB ( \&. )
and the parent directory (\fB\&.\|.\fR). The
.B mknod()
function can be
invoked only by a privileged user for file types other than FIFO special.
The
.BR mkfifo (3C)
function should be used to create FIFOs.
.sp
.LP
Doors are created using
.BR door_create "(3C) and can be attached to the"
file system using
.BR fattach (3C).
Symbolic links can be created using
.BR symlink (2).
An endpoint for communication can be created using
.BR socket (3SOCKET).
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelAsync-Signal-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR chmod (2),
.BR creat (2),
.BR exec (2),
.BR mkdir (2),
.BR open (2),
.BR stat (2),
.BR symlink (2),
.BR umask (2),
.BR door_create (3C),
.BR fattach (3C),
.BR makedev (3C),
.BR mkfifo (3C),
.BR socket (3SOCKET),
.BR stat.h (3HEAD),
.BR attributes (5),
.BR privileges (5),
.BR standards (5)
