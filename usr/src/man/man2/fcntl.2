'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH fcntl 2 "17 Jan 2007" "SunOS 5.11" "System Calls"
.SH NAME
fcntl \- file control
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>

\fBint\fR \fBfcntl\fR(\fBint\fR \fIfildes\fR, \fBint\fR \fIcmd\fR, \fB/*\fR \fIarg\fR */ .\|.\|.);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B fcntl()
function provides for control over open files. The
.I fildes
argument is an open file descriptor.
.sp
.LP
The
.B fcntl()
function can take a third argument,
.IR arg ,
whose data
type, value, and use depend upon the value of
.IR cmd .
The
.IR cmd
argument specifies the operation to be performed by
.BR fcntl() .
.sp
.LP
The values for
.I cmd
are defined in
.RB < fcntl.h >
and include:
.sp
.ne 2
.mk
.na
.B F_DUPFD
.ad
.RS 15n
.rt
Return a new file descriptor which is the lowest numbered available (that
is, not already open) file descriptor greater than or equal to the third
argument,
.IR arg ,
taken as an integer of type
.BR int .
The new file
descriptor refers to the same open file description as the original file
descriptor, and shares any locks. The
.B FD_CLOEXEC
flag associated with
the new file descriptor is cleared to keep the file open across calls to one
of the
.BR exec (2)
functions.
.RE

.sp
.ne 2
.mk
.na
.B F_DUP2FD
.ad
.RS 15n
.rt
Similar to
.BR F_DUPFD ,
but always returns
.IR arg .
.B F_DUP2FD
closes
.I arg
if it is open and not equal to
.I fildes.
\fBF_DUP2FD\fR
is equivalent to \fBdup2\fR(\fIfildes\fR, \fIarg\fR).
.RE

.sp
.ne 2
.mk
.na
.B F_FREESP
.ad
.RS 15n
.rt
Free storage space associated with a section of the ordinary file
.IR fildes .
The section is specified by a variable of data type \fBstruct flock\fR pointed to by
.IR arg .
The data type
.B "struct flock"
is defined
.RB "in the <" fcntl.h "> header (see " fcntl.h (3HEAD))
and is described
below. Note that all file systems might not support all possible variations
of
.B F_FREESP
arguments. In particular, many file systems allow space to
be freed only at the end of a file.
.RE

.sp
.ne 2
.mk
.na
.B F_FREESP64
.ad
.RS 15n
.rt
Equivalent to
.BR F_FREESP ,
but takes a
.B "struct flock64"
argument
rather than a
.B "struct flock"
argument.
.RE

.sp
.ne 2
.mk
.na
.B F_ALLOCSP
.ad
.RS 15n
.rt
Allocate space for a section of the ordinary file
.IR fildes .
The section
is specified by a variable of data type
.B "struct flock"
pointed to by
.IR arg .
.RB "The data type " "struct flock" " is defined in the <" fcntl.h >
header (see
.BR fcntl.h (3HEAD)
and is described below.
.RE

.sp
.ne 2
.mk
.na
.B F_ALLOCSP64
.ad
.RS 15n
.rt
Equivalent to
.BR F_ALLOCSP ,
but takes a
.B "struct flock64"
argument
rather than a
.B "struct flock"
argument.
.RE

.sp
.ne 2
.mk
.na
.B F_GETFD
.ad
.RS 15n
.rt
Get the file descriptor flags defined in
.RB < fcntl.h >
that are associated
with the file descriptor
.IR fildes .
File descriptor flags are associated
with a single file descriptor and do not affect other file descriptors that
refer to the same file.
.RE

.sp
.ne 2
.mk
.na
.B F_GETFL
.ad
.RS 15n
.rt
Get the file status flags and file access modes, defined in
.RB < fcntl.h >,
for the file descriptor specified by
.IR fildes .
The file access modes can
be extracted from the return value using the mask
.BR O_ACCMODE ,
which is
defined in
.RB < fcntl.h >.
File status flags and file access modes do not
affect other file descriptors that refer to the same file with different open
file descriptions.
.RE

.sp
.ne 2
.mk
.na
.B F_GETOWN
.ad
.RS 15n
.rt
If
.I fildes
refers to a socket, get the process or process group
.B ID
specified to receive
.B SIGURG
signals when out-of-band data is
available. Positive values indicate a process ID; negative values, other than
\(mi1, indicate a process group ID. If
.I fildes
does not refer to a
socket, the results are unspecified.
.RE

.sp
.ne 2
.mk
.na
.B F_GETXFL
.ad
.RS 15n
.rt
Get the file status flags, file access modes, and file creation and
assignment flags, defined in
.RB < fcntl.h >,
for the file descriptor
specified by
.IR fildes .
The file access modes can be extracted from the
return value using the mask
.BR O_ACCMODE ,
which is defined in
.RB < fcntl.h >.
File status flags, file access modes, and file creation and
assignment flags do not affect other file descriptors that refer to the same
file with different open file descriptions.
.RE

.sp
.ne 2
.mk
.na
.B F_SETFD
.ad
.RS 15n
.rt
Set the file descriptor flags defined in
.RB < fcntl.h >,
that are
associated with
.IR fildes ,
to the third argument,
.IR arg ,
taken as type
.BR int .
If the
.B FD_CLOEXEC
flag in the third argument is 0, the file
will remain open across the
.B exec()
functions; otherwise the file will
be closed upon successful execution of one of the
.B exec()
functions.
.RE

.sp
.ne 2
.mk
.na
.B F_SETFL
.ad
.RS 15n
.rt
Set the file status flags, defined in
.RB < fcntl.h >,
for the file
descriptor specified by
.I fildes
from the corresponding bits in the
.I arg
argument, taken as type
.BR int .
Bits corresponding to the file
access mode and file creation and assignment flags that are set in
.IR arg
are ignored. If any bits in
.I arg
other than those mentioned here are
changed by the application, the result is unspecified.
.RE

.sp
.ne 2
.mk
.na
.B F_SETOWN
.ad
.RS 15n
.rt
If
.I fildes
refers to a socket, set the process or process group
.B ID
specified to receive
.B SIGURG
signals when out-of-band data is
available, using the value of the third argument,
.IR arg ,
taken as type
.BR int .
Positive values indicate a process ID; negative values, other than
\(mi1, indicate a process group ID. If
.I fildes
does not refer to a
socket, the results are unspecified.
.RE

.sp
.LP
The following commands are available for advisory record locking. Record
locking is supported for regular files, and may be supported for other
files.
.sp
.ne 2
.mk
.na
.B F_GETLK
.ad
.RS 14n
.rt
Get the first lock which blocks the lock description pointed to by the third
argument,
.IR arg ,
taken as a pointer to type
.BR "struct flock" ,
defined
in
.RB < fcntl.h >.
The information retrieved overwrites the information
passed to
.B fcntl()
in the structure
.BR flock .
If no lock is found
that would prevent this lock from being created, then the structure will be
left unchanged except for the lock type which will be set to
.BR F_UNLCK .
.RE

.sp
.ne 2
.mk
.na
.B F_GETLK64
.ad
.RS 14n
.rt
Equivalent to
.BR F_GETLK ,
but takes a
.B "struct flock64"
argument
rather than a
.B "struct flock"
argument.
.RE

.sp
.ne 2
.mk
.na
.B F_SETLK
.ad
.RS 14n
.rt
Set or clear a file segment lock according to the lock description pointed
to by the third argument,
.IR arg ,
taken as a pointer to type \fBstruct flock\fR, defined in <\fBfcntl.h\fR>.
.B F_SETLK
is used to establish
shared (or read) locks
.RB ( F_RDLCK )
or exclusive (or write) locks
.RB ( F_WRLCK ),
as well as to remove either type of lock
.RB ( F_UNLCK ).
.BR F_RDLCK ,
.B F_WRLCK
and
.B F_UNLCK
are defined in
.RB < fcntl.h ">. If a shared or exclusive lock cannot be set, " fcntl() 
will return immediately with a return value of \fB\(mi1\fR\&.
.RE

.sp
.ne 2
.mk
.na
.B F_SETLK64
.ad
.RS 14n
.rt
Equivalent to
.BR F_SETLK ,
but takes a
.B "struct flock64"
argument
rather than a
.B "struct flock"
argument.
.RE

.sp
.ne 2
.mk
.na
.B F_SETLKW
.ad
.RS 14n
.rt
This command is the same as
.B F_SETLK
except that if a shared or
exclusive lock is blocked by other locks, the process will wait until the
request can be satisfied. If a signal that is to be caught is received while
.B fcntl()
is waiting for a region,
.B fcntl()
will be interrupted.
Upon return from the process' signal handler,
.B fcntl()
will return
\fB\(mi1\fR with
.B errno
set to
.BR EINTR ,
and the lock operation will
not be done.
.RE

.sp
.ne 2
.mk
.na
.B F_SETLKW64
.ad
.RS 14n
.rt
Equivalent to
.BR F_SETLKW ,
but takes a
.B "struct flock64"
argument
rather than a
.B "struct flock"
argument.
.RE

.sp
.LP
When a shared lock is set on a segment of a file, other processes will be
able to set shared locks on that segment or a portion of it. A shared lock
prevents any other process from setting an exclusive lock on any portion of
the protected area. A request for a shared lock will fail if the file
descriptor was not opened with read access.
.sp
.LP
An exclusive lock will prevent any other process from setting a shared lock
or an exclusive lock on any portion of the protected area. A request for an
exclusive lock will fail if the file descriptor was not opened with write
access.
.sp
.LP
The
.B flock
structure contains at least the following elements:
.sp
.in +2
.nf
short   l_type;       /* lock operation type */
short   l_whence;     /* lock base indicator */
off_t   l_start;      /* starting offset from base */
off_t   l_len;        /* lock length; l_len == 0 means
                         until end of file */
int     l_sysid;      /* system ID running process holding lock */
pid_t   l_pid;        /* process ID of process holding lock */
.fi
.in -2

.sp
.LP
The value of
.B l_whence
is
.BR SEEK_SET ,
.BR SEEK_CUR ,
or
.BR SEEK_END ,
to indicate that the relative offset
.B l_start
bytes will
be measured from the start of the file, current position or end of the file,
respectively. The value of
.B l_len
is the number of consecutive bytes to
be locked. The value of
.B l_len
may be negative (where the definition of
.B off_t
permits negative values of
.BR l_len ).
After a successful
.B F_GETLK
or
.B F_GETLK64
request, that is, one in which a lock was
found, the value of
.B l_whence
will be
.BR SEEK_SET .
.sp
.LP
The
.B l_pid
and
.B l_sysid
fields are used only with
.B F_GETLK
or
.B F_GETLK64
to return the process
.B ID
of the process holding a
blocking lock and to indicate which system is running that process.
.sp
.LP
If
.B l_len
is positive, the area affected starts at
.B l_start
and
ends at
.B l_start
+ \fBl_len \(mi 1\fR. If
.B l_len
is negative, the
area affected starts at
.B l_start
+
.B l_len
and ends at \fBl_start \(mi 1\fR. Locks may start and extend beyond the current end of a file, but
must not be negative relative to the beginning of the file. A lock will be
set to extend to the largest possible value of the file offset for that file
by setting
.B l_len
to 0. If such a lock also has
.B l_start
set to 0
and
.B l_whence
is set to
.BR SEEK_SET ,
the whole file will be locked.
.sp
.LP
If a process has an existing lock in which
.B l_len
is 0 and which
includes the last byte of the requested segment, and an unlock
.RB ( F_UNLCK ") request is made in which " l_len " is non-zero and the"
offset of the last byte of the requested segment is the maximum value for an
object of type
.BR off_t ,
then the
.B F_UNLCK
request will be treated as
a request to unlock from the start of the requested segment with an
.B l_len
equal to 0. Otherwise, the request will attempt to unlock only
the requested segment.
.sp
.LP
There will be at most one type of lock set for each byte in the file. Before
a successful return from an
.BR F_SETLK ,
.BR F_SETLK64 ,
.BR F_SETLKW ,
or
.B F_SETLKW64
request when the calling process has previously existing
locks on bytes in the region specified by the request, the previous lock type
for each byte in the specified region will be replaced by the new lock type.
As specified above under the descriptions of shared locks and exclusive
locks, an
.BR F_SETLK ,
.BR F_SETLK64 ,
.BR F_SETLKW ,
or
.BR F_SETLKW64
request will (respectively) fail or block when another process has existing
locks on bytes in the specified region and the type of any of those locks
conflicts with the type specified in the request.
.sp
.LP
All locks associated with a file for a given process are removed when a file
descriptor for that file is closed by that process or the process holding
that file descriptor terminates. Locks are not inherited by a child process
created using
.BR fork (2).
.sp
.LP
A potential for deadlock occurs if a process controlling a locked region is
put to sleep by attempting to lock another process' locked region. If the
system detects that sleeping until a locked region is unlocked would cause a
deadlock,
.B fcntl()
will fail with an
.B EDEADLK
error.
.sp
.LP
The following values for
.I cmd
are used for file share reservations. A
share reservation is placed on an entire file to allow cooperating processes
to control access to the file.
.sp
.ne 2
.mk
.na
.B F_SHARE
.ad
.RS 13n
.rt
Sets a share reservation on a file with the specified access mode and
designates which types of access to deny.
.RE

.sp
.ne 2
.mk
.na
.B F_UNSHARE
.ad
.RS 13n
.rt
Remove an existing share reservation.
.RE

.sp
.LP
File share reservations are an advisory form of access control among
cooperating processes, on both local and remote machines. They are most often
used by
.B DOS
or Windows emulators and
.B "DOS based"
.B NFS
clients.
However, native UNIX versions of
.B DOS
or Windows applications may also
choose to use this form of access control.
.sp
.LP
A share reservation is described by an
.B fshare
structure defined in
.RB < sys/fcntl.h ">, which is included in <" fcntl.h >
as follows:
.sp
.in +2
.nf
typedef struct fshare {
        short   f_access;
        short   f_deny;
        int     f_id;
} fshare_t;
.fi
.in -2

.sp
.LP
A share reservation specifies the type of access,
.BR f_access ,
to be
requested on the open file descriptor. If access is granted, it further
specifies what type of access to deny other processes,
.BR f_deny .
A single
process on the same file may hold multiple non-conflicting reservations by
specifying an identifier,
.BR f_id ,
unique to the process, with each
request.
.sp
.LP
An
.B F_UNSHARE
request releases the reservation with the specified
.BR f_id .
The
.BR f_access " and "
.B f_deny
fields are ignored.
.sp
.LP
Valid
.B f_access
values are:
.sp
.ne 2
.mk
.na
.B F_RDACC
.ad
.RS 11n
.rt
Set a file share reservation for read-only access.
.RE

.sp
.ne 2
.mk
.na
.B F_WRACC
.ad
.RS 11n
.rt
Set a file share reservation for write-only access.
.RE

.sp
.ne 2
.mk
.na
.B F_RWACC
.ad
.RS 11n
.rt
Set a file share reservation for read and write access.
.RE

.sp
.LP
Valid
.B f_deny
values are:
.sp
.ne 2
.mk
.na
.B F_COMPAT
.ad
.RS 12n
.rt
Set a file share reservation to compatibility mode.
.RE

.sp
.ne 2
.mk
.na
.B F_RDDNY
.ad
.RS 12n
.rt
Set a file share reservation to deny read access to other processes.
.RE

.sp
.ne 2
.mk
.na
.B F_WRDNY
.ad
.RS 12n
.rt
Set a file share reservation to deny write access to other processes.
.RE

.sp
.ne 2
.mk
.na
.B F_RWDNY
.ad
.RS 12n
.rt
Set a file share reservation to deny read and write access to other
processes.
.RE

.sp
.ne 2
.mk
.na
.B F_NODNY
.ad
.RS 12n
.rt
Do not deny read or write access to any other process.
.RE

.SH RETURN VALUES
.sp
.LP
Upon successful completion, the value returned depends on
.I cmd
as
follows:
.sp
.ne 2
.mk
.na
.B F_DUPFD
.ad
.RS 14n
.rt
A new file descriptor.
.RE

.sp
.ne 2
.mk
.na
.B F_FREESP
.ad
.RS 14n
.rt
Value of
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
.B F_GETFD
.ad
.RS 14n
.rt
Value of flags defined in \fB<fcntl.h>\fR\&. The return value will not be
negative.
.RE

.sp
.ne 2
.mk
.na
.B F_GETFL
.ad
.RS 14n
.rt
Value of file status flags and access modes. The return value will not be
negative.
.RE

.sp
.ne 2
.mk
.na
.B F_GETLK
.ad
.RS 14n
.rt
Value other than \fB\(mi1\fR\&.
.RE

.sp
.ne 2
.mk
.na
.B F_GETLK64
.ad
.RS 14n
.rt
Value other than \fB\(mi1\fR\&.
.RE

.sp
.ne 2
.mk
.na
.B F_GETOWN
.ad
.RS 14n
.rt
Value of the socket owner process or process group; this will not be
.BR \(mi1 \&.
.RE

.sp
.ne 2
.mk
.na
.B F_GETXFL
.ad
.RS 14n
.rt
Value of file status flags, access modes, and creation and assignment flags.
The return value will not be negative.
.RE

.sp
.ne 2
.mk
.na
.B F_SETFD
.ad
.RS 14n
.rt
Value other than \fB\(mi1\fR\&.
.RE

.sp
.ne 2
.mk
.na
.B F_SETFL
.ad
.RS 14n
.rt
Value other than \fB\(mi1\fR\&.
.RE

.sp
.ne 2
.mk
.na
.B F_SETLK
.ad
.RS 14n
.rt
Value other than \fB\(mi1\fR\&.
.RE

.sp
.ne 2
.mk
.na
.B F_SETLK64
.ad
.RS 14n
.rt
Value other than \fB\(mi1\fR\&.
.RE

.sp
.ne 2
.mk
.na
.B F_SETLKW
.ad
.RS 14n
.rt
Value other than \fB\(mi1\fR\&.
.RE

.sp
.ne 2
.mk
.na
.B F_SETLKW64
.ad
.RS 14n
.rt
Value other than \fB\(mi1\fR\&.
.RE

.sp
.ne 2
.mk
.na
.B F_SETOWN
.ad
.RS 14n
.rt
Value other than \fB\(mi1\fR\&.
.RE

.sp
.ne 2
.mk
.na
.B F_SHARE
.ad
.RS 14n
.rt
Value other than \fB\(mi1\fR\&.
.RE

.sp
.ne 2
.mk
.na
.B F_UNSHARE
.ad
.RS 14n
.rt
Value other than \fB\(mi1\fR\&.
.RE

.sp
.LP
Otherwise, \fB\(mi1\fR is returned and
.B errno
is set to indicate the
error.
.SH ERRORS
.sp
.LP
The
.B fcntl()
function will fail if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 13n
.rt
The
.I cmd
argument is
.B F_SETLK
or
.BR F_SETLK64 ,
the type of lock
.B (l_type)
.RB "is a shared (" F_RDLCK ") or exclusive (" F_WRLCK )
lock,
and the segment of a file to be locked is already exclusive-locked by another
process; or the type is an exclusive lock and some portion of the segment of
a file to be locked is already shared-locked or exclusive-locked by another
process.
.sp
The
.I cmd
argument is
.BR F_FREESP ,
the file exists, mandatory
file/record locking is set, and there are outstanding record locks on the
file; or the
.I cmd
argument is
.BR F_SETLK ,
.BR F_SETLK64 ,
.BR F_SETLKW ,
or
.BR F_SETLKW64 ,
mandatory file/record locking is set,
and the file is currently being mapped to virtual memory using
.BR mmap (2).
.sp
The
.I cmd
argument is
.B F_SHARE
and
.B f_access
conflicts with an
existing
.B f_deny
share reservation.
.RE

.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 13n
.rt
The
.I fildes
argument is not a valid open file descriptor; or the
.I cmd
argument is
.BR F_SETLK ,
.BR F_SETLK64 ,
.BR F_SETLKW ,
or
.BR F_SETLKW64 ,
the type of lock,
.BR l_type ,
is a shared lock
(\fBF_RDLCK\fR), and
.I fildes
is not a valid file descriptor open for
reading; or the type of lock
.B l_type
is an exclusive lock
(\fBF_WRLCK\fR) and
.I fildes
is not a valid file descriptor open for
writing.
.sp
The
.I cmd
argument is
.B F_FREESP
and
.I fildes
is not a valid
file descriptor open for writing.
.sp
The
.I cmd
argument is
.BR F_DUP2FD ,
and
.I arg
is negative or is
not less than the current resource limit for
.BR RLIMIT_NOFILE.
.sp
The
.I cmd
argument is
.B F_SHARE,
the
.B f_access
share
reservation is for write access, and
.I fildes
is not a valid file
descriptor open for writing.
.sp
The
.I cmd
argument is
.B F_SHARE,
the
.B f_access
share
reservation is for read access, and
.I fildes
is not a valid file
descriptor open for reading.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 13n
.rt
The
.I cmd
argument is
.BR F_GETLK ,
.BR F_GETLK64 ,
.BR F_SETLK ,
.BR F_SETLK64 ,
.BR F_SETLKW ,
.BR F_SETLKW64 ,
or
.B F_FREESP
and the
.I arg
argument points to an illegal address.
.sp
The
.I cmd
argument is
.B F_SHARE
or
.B F_UNSHARE
and
.IR arg
points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 13n
.rt
The
.I cmd
argument is
.B F_SETLKW
or
.B F_SETLKW64
and the
function was interrupted by a signal.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 13n
.rt
The
.I cmd
argument is invalid or not supported by the file system; or
the
.I cmd
argument is
.B F_DUPFD
and
.I arg
is negative or greater
than or equal to
.BR OPEN_MAX ;
or the
.I cmd
argument is
.BR F_GETLK ,
.BR F_GETLK64 ,
.BR F_SETLK ,
.BR F_SETLK64 ,
.BR F_SETLKW ,
or
.B F_SETLKW64
and the data pointed to by
.I arg
is not valid; or
.I fildes
refers to a file that does not support locking.
.sp
The
.I cmd
argument is
.B F_UNSHARE
and a reservation with this
.B f_id
for this process does not exist.
.RE

.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 13n
.rt
An I/O error occurred while reading from or writing to the file system.
.RE

.sp
.ne 2
.mk
.na
.B EMFILE
.ad
.RS 13n
.rt
The
.I cmd
argument is
.B F_DUPFD
and either
.B OPEN_MAX
file
descriptors are currently open in the calling process, or no file descriptors
greater than or equal to
.I arg
are available.
.RE

.sp
.ne 2
.mk
.na
.B ENOLCK
.ad
.RS 13n
.rt
The
.I cmd
argument is
.BR F_SETLK ,
.BR F_SETLK64 ,
.BR F_SETLKW ,
or
.B F_SETLKW64
and satisfying the lock or unlock request would result in
the number of locked regions in the system exceeding a system-imposed
limit.
.RE

.sp
.ne 2
.mk
.na
.B ENOLINK
.ad
.RS 13n
.rt
Either the
.I fildes
argument is on a remote machine and the link to that
machine is no longer active; or the
.I cmd
argument is
.BR F_FREESP ,
the
file is on a remote machine, and the link to that machine is no longer
active.
.RE

.sp
.ne 2
.mk
.na
.B EOVERFLOW
.ad
.RS 13n
.rt
One of the values to be returned cannot be represented correctly.
.sp
The
.I cmd
argument is
.BR F_GETLK ,
.BR F_SETLK ,
or
.BR F_SETLKW
and the smallest or, if
.B l_len
is non-zero, the largest, offset of any
byte in the requested segment cannot be represented correctly in an object of
type
.BR off_t .
.sp
The
.I cmd
argument is
.BR F_GETLK64 ,
.BR F_SETLK64 ,
or
.B F_SETLKW64
and the smallest or, if
.B l_len
is non-zero, the
largest, offset of any byte in the requested segment cannot be represented
correctly in an object of type
.BR off64_t .
.RE

.sp
.LP
The
.B fcntl()
function may fail if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 11n
.rt
The
.I cmd
argument is
.BR F_SETLK ,
.BR F_SETLK64 ,
.BR F_SETLKW ,
or
.BR F_SETLKW64 ,
and the file is currently being mapped to virtual memory
using
.BR mmap (2).
.RE

.sp
.ne 2
.mk
.na
.B EDEADLK
.ad
.RS 11n
.rt
The
.I cmd
argument is
.B F_SETLKW
or
.BR F_SETLKW64 ,
the lock is
blocked by some lock from another process and putting the calling process to
sleep, waiting for that lock to become free would cause a deadlock.
.sp
The
.I cmd
argument is
.B F_FREESP,
mandatory record locking is
enabled,
.B O_NDELAY
and
.B O_NONBLOCK
are clear and a deadlock
condition was detected.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelAsync-Signal Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR lockd (1M),
.BR chmod (2),
.BR close (2),
.BR creat (2),
.BR dup (2),
.BR exec (2),
.BR fork (2),
.BR mmap (2),
.BR open (2),
.BR pipe (2),
.BR read (2),
.BR sigaction (2),
.BR write (2),
.BR dup2 (3C),
.BR fcntl.h (3HEAD),
.BR attributes (5),
.BR standards (5)
.sp
.LP
.I Programming Interfaces Guide
.SH NOTES
.sp
.LP
In the past, the variable
.B errno
was set to
.B EACCES
rather than
.B EAGAIN
when a section of a file is already locked by another process.
Therefore, portable application programs should expect and test for either
value.
.sp
.LP
Advisory locks allow cooperating processes to perform consistent operations
on files, but do not guarantee exclusive access. Files can be accessed
without advisory locks, but inconsistencies may result. The network share
locking protocol does not support the
.B f_deny
value of
.BR F_COMPAT .
For network file systems, if
.B f_access
is
.BR F_RDACC ,
.B f_deny
is
mapped to
.BR F_RDDNY .
Otherwise, it is mapped to
.BR F_RWDNY .
.sp
.LP
To prevent possible file corruption, the system may reject
.B mmap()
requests for advisory locked files, or it may reject advisory locking
requests for mapped files. Applications that require a file be both locked
and mapped should lock the entire file (\fBl_start\fR and
.B l_len
both
set to 0). If a file is mapped, the system may reject an unlock request,
resulting in a lock that does not cover the entire file.
.sp
.LP
The process ID returned for locked files on network file systems might not
be meaningful.
.sp
.LP
If the file server crashes and has to be rebooted, the lock manager (see
.BR lockd (1M))
attempts to recover all locks that were associated with that
server. If a lock cannot be reclaimed, the process that held the lock is
issued a
.B SIGLOST
signal.
