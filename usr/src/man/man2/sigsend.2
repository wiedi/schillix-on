'\" te
.\" Copyright 1989 AT&T.  Copyright (c) 2004, Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH sigsend 2 "19 Jul 2004" "SunOS 5.11" "System Calls"
.SH NAME
sigsend, sigsendset \- send a signal to a process or a group of processes
.SH SYNOPSIS
.LP
.nf
#include <signal.h>

\fBint\fR \fBsigsend\fR(\fBidtype_t\fR \fIidtype\fR, \fBid_t\fR \fIid\fR, \fBint\fR \fIsig\fR);
.fi

.LP
.nf
\fBint\fR \fBsigsendset\fR(\fBprocset_t *\fIpsp\fR, \fBint\fR \fIsig\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B sigsend()
function sends a signal to the process or group of
processes specified by
.I id
and
.IR idtype .
The signal to be sent is
specified by
.I sig
and is either  0 or one of the values listed in
.BR signal.h (3HEAD).
If
.I sig
is  0 (the null signal), error checking
is performed but no signal is actually sent.  This value can be used to
check the validity of
.I id
and
.IR idtype .
.sp
.LP
The real or effective user
.B ID
of the sending process must match the
real or saved user ID of the receiving process, unless the
{\fBPRIV_PROC_OWNER\fR} privilege is asserted in the effective set of the
sending process or
.I sig
is
.B SIGCONT
and the sending  process has
the same session ID as the receiving process.
.sp
.LP
If
.I idtype
is
.BR P_PID ,
.I sig
is sent to the process with
process
.B ID
.IR id .
.sp
.LP
If
.I idtype
is
.BR P_PGID ,
.I sig
is sent to all processes with
process group
.B ID
.IR id .
.sp
.LP
If
.I idtype
is
.BR P_SID ,
.I sig
is sent to all processes with
session
.B ID
.IR id .
.sp
.LP
If
.I idtype
is
.BR P_TASKID ,
.I sig
is sent to all processes with
task
.B ID
.IR id .
.sp
.LP
If
.I idtype
is
.BR P_UID ,
.I sig
is sent to any process with
effective user
.B ID
.IR id .
.sp
.LP
If
.I idtype
is
.BR P_GID ,
.I sig
is sent to any process with
effective group
.B ID
.IR id .
.sp
.LP
If
.I idtype
is
.BR P_PROJID ,
.I sig
is sent to any process with
project
.B ID
.IR id .
.sp
.LP
If
.I idtype
is
.BR P_CID ,
.I sig
is sent to any process with
scheduler class
.B ID
.I id
(see
.BR priocntl (2)).
.sp
.LP
If
.I idtype
is
.BR P_CTID ,
.I sig
is sent to any process with
process contract ID
.IR id .
.sp
.LP
If
.I idtype
is
.BR P_ALL ,
.I sig
is sent to all processes and
.I id
is ignored.
.sp
.LP
If
.I id
is
.BR P_MYID ,
the value of
.I id
is taken from the
calling process.
.sp
.LP
The process with a process
.B ID
of 0 is always excluded.  The process
with a process
.B ID
of 1 is excluded unless
.I idtype
is equal to
.BR P_PID .
.sp
.LP
The
.B sigsendset()
function provides an alternate interface for sending
signals to sets of processes. This function sends signals to the set of
processes specified by
.IR psp .
.I psp
is a pointer to a structure of
type
.BR procset_t ,
defined in <\fBsys/procset.h\fR>, which includes the
following members:
.sp
.in +2
.nf
idop_t    p_op;
idtype_t  p_lidtype;
id_t      p_lid;
idtype_t  p_ridtype;
id_t      p_rid;
.fi
.in -2

.sp
.LP
The
.B p_lidtype
and
.B p_lid
members specify the
.B ID
type and
\fBID\fR of one ("left") set of processes; the \fBp_ridtype\fR and
.B p_rid
members specify the
.B ID
type and
.B ID
of a second
("right") set of processes. \fBID\fR types and \fBID\fRs are specified just
as for the
.I idtype
and
.I id
arguments to
.BR sigsend() .
The
.B p_op
member specifies the operation to be performed on the two sets of
processes to get the set of processes the function is to apply to. The valid
values for
.B p_op
and the processes they specify are:
.sp
.ne 2
.mk
.na
.B POP_DIFF
.ad
.RS 12n
.rt
Set difference: processes in left set and not in right set.
.RE

.sp
.ne 2
.mk
.na
.B POP_AND
.ad
.RS 12n
.rt
Set intersection: processes in both left and right sets.
.RE

.sp
.ne 2
.mk
.na
.B POP_OR
.ad
.RS 12n
.rt
Set union: processes in either left or right set or both.
.RE

.sp
.ne 2
.mk
.na
.B POP_XOR
.ad
.RS 12n
.rt
Set exclusive-or: processes in left or right set but not in both.
.RE

.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B 0
is return.  Otherwise,
.B \(mi1
is
returned and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B sigsend()
and
.B sigsendset()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I sig
.RI "argument is not a valid signal number, or the" " idtype"
argument is not a valid idtype field.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I sig
argument is
.B SIGKILL,
.I idtype
is
.B P_PID
and
.I id
is
.B 1
(proc1).
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 10n
.rt
The effective user of the calling process does not match the real or saved
user ID of the receiving process, the calling process does not have the
{\fBPRIV_PROC_OWNER\fR} privilege asserted in the effective set, and the
calling process is not sending
.B SIGCONT
to a process that shares the
same session ID.
.sp
The calling process does not have the {\fBPRIV_PROC_SESSION\fR} privilege
asserted and is trying to send a signal to a process with a different
session ID, even though the effective user ID matches the real or saved ID
of the receiving process.
.RE

.sp
.ne 2
.mk
.na
.B ESRCH
.ad
.RS 10n
.rt
No process can be found corresponding to that specified by
.I id
and
.IR idtype .
.RE

.sp
.LP
The
.B sigsendset()
function will fail if:
.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The
.I psp
argument points to an illegal address.
.RE

.SH SEE ALSO
.sp
.LP
.BR kill (1),
.BR getpid (2),
.BR kill (2),
.BR priocntl (2),
.BR signal (3C),
.BR signal.h (3HEAD),
.BR process (4),
.BR privileges (5)
