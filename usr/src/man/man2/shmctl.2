'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH shmctl 2 "10 Apr 2007" "SunOS 5.11" "System Calls"
.SH NAME
shmctl \- shared memory control operations
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>

\fBint\fR \fBshmctl\fR(\fBint\fR \fIshmid\fR, \fBint\fR \fIcmd\fR, \fBstruct shmid_ds *\fIbuf\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B shmctl()
function provides a variety of shared memory control
operations as specified by
.IR cmd .
The permission required for a shared
memory control operation is given as {\fItoken\fR}, where
.I token
is the
type of permission needed. The types of permission are interpreted as
follows:
.sp
.in +2
.nf
00400    READ by user
00200    WRITE by user
00040    READ by group
00020    WRITE by group
00004    READ by others
00002    WRITE by others
.fi
.in -2

.sp
.LP
See the
.I "Shared Memory Operation Permissions"
section of
.BR Intro (2)
for more information.
.sp
.LP
The following operations require the specified tokens:
.sp
.ne 2
.mk
.na
.B IPC_STAT
.ad
.RS 14n
.rt
Place the current value of each member of the data structure associated
with
.I shmid
into the structure pointed to by
.IR buf .
The contents of
this structure are defined in
.BR Intro (2).
{\fBREAD\fR}
.RE

.sp
.ne 2
.mk
.na
.B IPC_SET
.ad
.RS 14n
.rt
Set the value of the following members of the data structure associated
with
.I shmid
to the corresponding value found in the structure pointed
to by
.IR buf :
.sp
.in +2
.nf
shm_perm.uid
shm_perm.gid
shm_perm.mode	/* access permission bits only */
.fi
.in -2

This command can be executed only by a process that has appropriate
privileges or an effective user
.B ID
equal to the value of
.B shm_perm.cuid
or
.B shm_perm.uid
in the data structure associated
with
.IR shmid .
.RE

.sp
.ne 2
.mk
.na
.B IPC_RMID
.ad
.RS 14n
.rt
Remove the shared memory identifier specified by
.I shmid
from the
system. The segment referenced by the identifier will be destroyed when all
processes with the segment attached have either detached the segment or
exited. If the segment is not attached to any process when
.B IPC_RMID
is
invoked, it will be destroyed immediately. This command can be executed only
by a process that has appropriate privileges or an effective user ID equal
to the value of
.B shm_perm.cuid
or
.B shm_perm.uid
in the data
structure associated with
.IR shmid .
.RE

.sp
.ne 2
.mk
.na
.B SHM_LOCK
.ad
.RS 14n
.rt
Lock the shared memory segment specified by
.I shmid
in memory. This
command can be executed only by a process that has appropriate privileges.
.RE

.sp
.ne 2
.mk
.na
.B SHM_UNLOCK
.ad
.RS 14n
.rt
Unlock the shared memory segment specified by
.IR shmid .
This command can
be executed only by a process that has appropriate privileges.
.RE

.sp
.LP
A shared memory segment must be explicitly removed using
.BR IPC_RMID
before the system can deallocate it and the resources it uses.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B 0
is returned. Otherwise,
.B \(mi1
is
returned and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B shmctl()
function will fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 13n
.rt
The
.I cmd
argument is equal to
.B IPC_STAT
and
.BR {READ}
operation permission is denied to the calling process.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 13n
.rt
The
.I buf
argument points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 13n
.rt
The
.I shmid
argument is not a valid shared memory identifier; or the
.I cmd
argument is not a valid command or is
.B IPC_SET
and
.B shm_perm.uid
or
.B shm_perm.gid
is not valid.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 13n
.rt
The
.I cmd
argument is equal to
.B SHM_LOCK
and there is not enough
memory, or the operation would exceed a limit or resource control on locked
memory.
.RE

.sp
.ne 2
.mk
.na
.B EOVERFLOW
.ad
.RS 13n
.rt
The
.I cmd
argument is
.B IPC_STAT
and
.I uid
or
.I gid
is too
large to be stored in the structure pointed to by
.IR buf .
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 13n
.rt
The
.I cmd
argument is equal to
.B IPC_RMID
or
.BR IPC_SET ,
the
effective user ID of the calling process is not equal to the value of
.B shm_perm.cuid
or
.B shm_perm.uid
in the data structure associated
with
.IR shmid ,
and {\fBPRIV_IPC_OWNER\fR} is not asserted in the
effective set of the calling process.
.sp
The
.I cmd
argument is equal to
.B SHM_LOCK
or
.B SHM_UNLOCK
and
{\fBPRIV_PROC_LOCK_MEMORY\fR} is not asserted in the effective set of the
calling process.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
.TE

.SH SEE ALSO
.sp
.LP
.BR ipcs (1),
.BR Intro (2),
.BR shmget (2),
.BR shmop (2),
.BR attributes (5),
.BR privileges (5),
.BR standards (5)
