'\" te
.\" Copyright (c) 2000, Sun Microsystems, Inc.
.\" All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH msgsnap 2 "8 Mar 2000" "SunOS 5.11" "System Calls"
.SH NAME
msgsnap \- message queue snapshot operation
.SH SYNOPSIS
.LP
.nf
#include <sys/msg.h>

\fBmsgsnap\fR(\fBint\fR \fImsqid\fR, \fBvoid *\fIbuf\fR, \fBsize_t\fR \fIbufsz\fR, \fBlong\fR \fImsgtyp\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B msgsnap()
function reads all of the messages of type
.IR msgtyp
from the queue associated with the message queue identifier specified by
.I msqid
and places them in the user-defined buffer pointed to by
.IR buf .
.sp
.LP
The
.I buf
argument points to a user-defined buffer that on return will
contain first a buffer header structure:
.sp
.in +2
.nf
struct msgsnap_head {
     size_t  msgsnap_size;   /* bytes used/required in the buffer */
     size_t  msgsnap_nmsg;   /* number of messages in the buffer */
};
.fi
.in -2

.sp
.LP
followed by
.B msgsnap_nmsg
messages, each of which starts with a
message header:
.sp
.in +2
.nf
struct msgsnap_mhead {
     size_t  msgsnap_mlen;   /* number of bytes in the message */
     long    msgsnap_mtype;  /* message type */
};
.fi
.in -2

.sp
.LP
and followed by
.B msgsnap_mlen
bytes containing the message contents.
.sp
.LP
Each subsequent message header is located at the first byte following the
previous message contents, rounded up to a
.B sizeof(size_t)
boundary.
.sp
.LP
The \fIbufsz\fR argument specifies the size  of \fIbuf\fR in bytes.  If
.I bufsz
is less than
.BR sizeof(msgsnap_head) ,
.B msgsnap()
fails
with
.BR EINVAL .
If
.I bufsz
is insufficient to contain all of the
requested messages,
.B msgsnap()
succeeds but returns with
.B msgsnap_nmsg
set to 0 and with
.B msgsnap_size
set to the required
size of the buffer in bytes.
.sp
.LP
The
.I msgtyp
argument specifies the types of messages requested as
follows:
.RS +4
.TP
.ie t \(bu
.el o
If
.I msgtyp
is 0, all of the messages on the queue are read.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.I msgtyp
is greater than 0, all messages of type
.I msgtyp
are
read.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.I msgtyp
is less than 0, all messages with type less than or equal
to the absolute value of
.I msgtyp
are read.
.RE
.sp
.LP
The
.B msgsnap()
function is a non-destructive operation. Upon
completion, no changes are made to the data structures associated with
.IR msqid .
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B msgsnap()
returns
.BR 0 .
Otherwise,
\fB\(mi1\fR is returned and \fBerrno\fR is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B msgsnap()
function will fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 10n
.rt
Operation permission is denied to the calling process.  See
.BR Intro (2).
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I msqid
argument is not a valid message queue identifier or the
value of
.I bufsz
is less than
.BR "sizeof(struct msgsnap_head)" .
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The
.I buf
argument points to an illegal address.
.RE

.SH USAGE
.sp
.LP
The
.B msgsnap()
function returns a snapshot of messages on a message
queue at one point in time.  The queue contents can change immediately
following return from
.BR msgsnap() .
.SH EXAMPLES
.LP
.B Example 1 msgsnap()
example
.sp
.LP
This is sample C code indicating how to use the msgsnap function (see
.BR msgids (2)).

.sp
.in +2
.nf
void
process_msgid(int msqid)
{
     size_t bufsize;
     struct msgsnap_head *buf;
     struct msgsnap_mhead *mhead;
     int i;

     /* allocate a minimum-size buffer */
     buf = malloc(bufsize = sizeof(struct msgsnap_head));

     /* read all of the messages from the queue */
     for (;;) {
          if (msgsnap(msqid, buf, bufsize, 0) != 0) {
               perror("msgsnap");
                    free(buf);
                    return;
          }
          if (bufsize >= buf->msgsnap_size)  /* we got them all */
               break;
          /* we need a bigger buffer */
          buf = realloc(buf, bufsize = buf->msgsnap_size);
     }

     /* process each message in the queue (there may be none) */
     mhead = (struct msgsnap_mhead *)(buf + 1);  /* first message */
     for (i = 0; i < buf->msgsnap_nmsg; i++) {
          size_t mlen = mhead->msgsnap_mlen;

          /* process the message contents */
          process_message(mhead->msgsnap_mtype, (char *)(mhead+1), mlen);

          /* advance to the next message header */
          mhead = (struct msgsnap_mhead *)
               ((char *)mhead + sizeof(struct msgsnap_mhead) +
               ((mlen + sizeof(size_t) - 1) & ~(sizeof(size_t) - 1)));
     }

     free(buf);
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelAsync-Signal-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR ipcrm (1),
.BR ipcs (1),
.BR Intro (2),
.BR msgctl (2),
.BR msgget (2),
.BR msgids (2),
.BR msgrcv (2),
.BR msgsnd (2),
.BR attributes (5)
