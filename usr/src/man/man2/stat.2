'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 1989 AT&T.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH stat 2 "10 Oct 2007" "SunOS 5.11" "System Calls"
.SH NAME
stat, lstat, fstat, fstatat \- get file status
.SH SYNOPSIS
.LP
.nf
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>

\fBint\fR \fBstat\fR(\fBconst char *restrict\fR \fIpath\fR, \fBstruct stat *restrict\fR \fIbuf\fR);
.fi

.LP
.nf
\fBint\fR \fBlstat\fR(\fBconst char *restrict\fR \fIpath\fR, \fBstruct stat *restrict\fR \fIbuf\fR);
.fi

.LP
.nf
\fBint\fR \fBfstat\fR(\fBint\fR \fIfildes\fR, \fBstruct stat *\fIbuf\fR);
.fi

.LP
.nf
\fBint\fR \fBfstatat\fR(\fBint\fR \fIfildes\fR, \fBconst char *\fIpath\fR, \fBstruct stat *\fIbuf\fR,
     \fBint\fR \fIflag\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B stat()
function obtains information about the file pointed to by
.IR path .
Read, write, or execute permission of the named file is not
required, but all directories listed in the path name leading to the file
must be searchable.
.sp
.LP
The
.B lstat()
function obtains file attributes similar to
.BR stat() ,
except when the named file is a symbolic link; in that case \fBlstat()\fR
returns information about the link, while
.B stat()
returns information
about the file the link references.
.sp
.LP
The
.B fstat()
function obtains information about an open file known by
the file descriptor
.IR fildes ,
obtained from a successful
.BR open (2),
.BR creat (2),
.BR dup (2),
.BR fcntl (2),
or
.BR pipe (2)
function. If
.I fildes
references a shared memory object, the system updates in the
.B stat
structure pointed to by the
.I buf
argument only the
.BR st_uid ,
.BR st_gid ,
.BR st_size ,
and
.B st_mode
fields, and
only the
.BR S_IRUSR ,
.BR S_IWUSR ,
.BR S_IRGRP ,
.BR S_IWGRP ,
.BR S_IROTH ,
and
.B S_IWOTH
file permission bits need be valid. The
system can update other fields and flags. The
.B fstat()
function updates
any pending time-related fields before writing to the \fBstat\fR
structure.
.sp
.LP
The
.B fstatat()
function obtains file attributes similar to the
.BR stat() ,
.BR lstat() ,
and \fBfstat()\fR functions.  If the \fIpath\fR
argument is a relative path, it is resolved relative to the \fIfildes\fR
argument rather than the current working directory.  If
.I path
is
absolute, the \fIfildes\fR argument is unused.  If the \fIfildes\fR argument
has the special value
.BR AT_FDCWD ,
relative paths are resolved from the
current working directory. If
.B AT_SYMLINK_NOFOLLOW
is set in the
.I flag
argument, the function behaves like
.B lstat()
and does not
automatically follow symbolic links. See
.BR fsattr (5).
If
.B _ATTR_TRIGGER
is set in the
.I flag
argument and the vnode is a
trigger mount point, the mount is performed and the function returns the
attributes of the root of the mounted filesystem.
.sp
.LP
The
.I buf
argument is a pointer to a
.B stat
structure into which
information is placed concerning the file. A
.B stat
structure includes
the following members:
.sp
.in +2
.nf
mode_t   st_mode;          /* File mode (see mknod(2)) */
ino_t    st_ino;           /* Inode number */
dev_t    st_dev;           /* ID of device containing */
                           /* a directory entry for this file */
dev_t    st_rdev;          /* ID of device */
                           /* This entry is defined only for */
                           /* char special or block special files */
nlink_t  st_nlink;         /* Number of links */
uid_t    st_uid;           /* User ID of the file's owner */
gid_t    st_gid;           /* Group ID of the file's group */
off_t    st_size;          /* File size in bytes */
time_t   st_atime;         /* Time of last access */
time_t   st_mtime;         /* Time of last data modification */
time_t   st_ctime;         /* Time of last file status change */
                           /* Times measured in seconds since */
                           /* 00:00:00 UTC, Jan. 1, 1970 */
long     st_blksize;       /* Preferred I/O block size */
blkcnt_t st_blocks;        /* Number of 512 byte blocks allocated*/
char     st_fstype[_ST_FSTYPSZ];
                           /* Null-terminated type of filesystem */
.fi
.in -2

.sp
.LP
Descriptions of structure members are as follows:
.sp
.ne 2
.mk
.na
.B st_mode
.ad
.RS 14n
.rt
The mode of the file as described for the
.B mknod()
function. In
addition to the modes described on the
.BR mknod (2)
manual page, the mode
of a file can also be
.B S_IFSOCK
if the file is a socket, \fBS_IFDOOR\fR
if the file is a door,
.B S_IFPORT
if the file is an event port, or
.B S_IFLNK
if the file is a symbolic link.
.B S_IFLNK
can be returned
either by
.B lstat()
or by
.B fstat()
when the
.B AT_SYMLINK_NOFOLLOW
flag is set.
.RE

.sp
.ne 2
.mk
.na
.B st_ino
.ad
.RS 14n
.rt
This field uniquely identifies the file in a given file system. The pair
.B st_ino
and
.B st_dev
uniquely identifies regular files.
.RE

.sp
.ne 2
.mk
.na
.B st_dev
.ad
.RS 14n
.rt
This field uniquely identifies the file system that contains the file. Its
value may be used as input to the
.B ustat()
function to determine more
information about this file system. No other meaning is associated with this
value.
.RE

.sp
.ne 2
.mk
.na
.B st_rdev
.ad
.RS 14n
.rt
This field should be used only by administrative commands. It is valid only
for block special or character special files and only has meaning on the
system where the file was configured.
.RE

.sp
.ne 2
.mk
.na
.B st_nlink
.ad
.RS 14n
.rt
This field should be used only by administrative commands.
.RE

.sp
.ne 2
.mk
.na
.B st_uid
.ad
.RS 14n
.rt
The user
.B ID
of the file's owner.
.RE

.sp
.ne 2
.mk
.na
.B st_gid
.ad
.RS 14n
.rt
The group
.B ID
of the file's group.
.RE

.sp
.ne 2
.mk
.na
.B st_size
.ad
.RS 14n
.rt
For regular files, this is the address of the end of the file. For block
special or character special, this is not defined. See also
.BR pipe (2).
.RE

.sp
.ne 2
.mk
.na
.B st_atime
.ad
.RS 14n
.rt
Time when file data was last accessed. Some of the functions that change
this member are:
.BR creat() ,
.BR mknod() ,
.BR pipe() ,
.BR utime (2),
and
.BR read (2).
.RE

.sp
.ne 2
.mk
.na
.B st_mtime
.ad
.RS 14n
.rt
Time when data was last modified. Some of the functions that change this
member are:
.BR creat() ,
.BR mknod() ,
.BR pipe() ,
.BR utime() ,
and
.BR write (2).
.RE

.sp
.ne 2
.mk
.na
.B st_ctime
.ad
.RS 14n
.rt
Time when file status was last changed. Some of the functions that change
this member are:
.BR chmod (2),
.BR chown (2),
.BR creat (2),
.BR link (2),
.BR mknod (2),
.BR pipe (2),
.BR rename (2),
.BR unlink (2),
.BR utime (2),
and
.BR write (2).
.RE

.sp
.ne 2
.mk
.na
.B st_blksize
.ad
.RS 14n
.rt
A hint as to the "best" unit size for I/O operations. This field is not
defined for block special or character special files.
.RE

.sp
.ne 2
.mk
.na
.B st_blocks
.ad
.RS 14n
.rt
The total number of physical blocks of size 512 bytes actually allocated on
disk. This field is not defined for block special or character special
files.
.RE

.sp
.ne 2
.mk
.na
.B st_fstype
.ad
.RS 14n
.rt
A null-teminated string that uniquely identifies the type of the filesystem
that contains the file.
.RE

.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B 0
is returned. Otherwise,
.B \(mi1
is
returned and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.BR stat() ,
.BR fstat() ,
.BR lstat() ,
and \fBfstatat()\fR
functions will fail if:
.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 13n
.rt
An error occurred while reading from the file system.
.RE

.sp
.ne 2
.mk
.na
.B EOVERFLOW
.ad
.RS 13n
.rt
The file size in bytes or the number of blocks allocated to the file or the
file serial number cannot be represented correctly in the structure pointed
to by
.IR buf .
.RE

.sp
.LP
The
.BR stat() ,
.BR lstat() ,
and
.B fstatat()
functions will fail
if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 16n
.rt
Search permission is denied for a component of the path prefix.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 16n
.rt
The
.I buf
or
.I path
argument points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 16n
.rt
A signal was caught during the execution of the
.B stat()
or
.B lstat()
function.
.RE

.sp
.ne 2
.mk
.na
.B ELOOP
.ad
.RS 16n
.rt
A loop exists in symbolic links encountered during the resolution of the
.I path
argument.
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
The length of the
.I path
argument exceeds {\fBPATH_MAX\fR}, or the
length of a
.I path
component exceeds {\fBNAME_MAX\fR} while
.B _POSIX_NO_TRUNC
is in effect.
.RE

.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 16n
.rt
A component of
.I path
does not name an existing file or
.I path
is
an empty string.
.RE

.sp
.ne 2
.mk
.na
.B ENOLINK
.ad
.RS 16n
.rt
The
.I path
argument points to a remote machine and the link to that
machine is no longer active.
.RE

.sp
.ne 2
.mk
.na
.B ENOTDIR
.ad
.RS 16n
.rt
A component of the path prefix is not a directory, or the \fIfildes\fR
argument does not refer to a valid directory when given a non-null relative
path.
.RE

.sp
.LP
The \fBfstat()\fR and \fBfstatat()\fR functions will fail if:
.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 11n
.rt
The
.I fildes
argument is not a valid open file descriptor. The
.I fildes
argument to
.B fstatat()
can also have the valid value of
.BR AT_FDCWD .
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 11n
.rt
The
.I buf
argument points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 11n
.rt
A signal was caught during the execution of the
.B fstat()
function.
.RE

.sp
.ne 2
.mk
.na
.B ENOLINK
.ad
.RS 11n
.rt
The
.I fildes
argument points to a remote machine and the link to that
machine is no longer active.
.RE

.sp
.LP
The
.BR stat() ,
.BR fstat() ,
and
.B lstat()
functions may fail if:
.sp
.ne 2
.mk
.na
.B EOVERFLOW
.ad
.RS 13n
.rt
One of the members is too large to store in the
.B stat
structure
pointed to by
.IR buf .
.RE

.sp
.LP
The
.B stat()
and
.B lstat()
functions may fail if:
.sp
.ne 2
.mk
.na
.B ELOOP
.ad
.RS 16n
.rt
More than {\fBSYMLOOP_MAX\fR} symbolic links were encountered during the
resolution of the
.I path
argument.
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
As a result of encountering a symbolic link in resolution of the\fIpath\fR
argument, the length of the substituted pathname strings exceeds
{\fBPATH_MAX\fR}.
.RE

.sp
.LP
The
.B stat()
and
.B fstatat()
functions may fail if:
.sp
.ne 2
.mk
.na
.B ENXIO
.ad
.RS 9n
.rt
The
.I path
argument names a character or block device special file and
the corresponding I/O device has been retired by the fault management
framework.
.RE

.SH EXAMPLES
.LP
.B Example 1
Use
.B stat()
to obtain file status information.
.sp
.LP
The following example shows how to obtain file status information for a
file named
.BR /home/cnd/mod1 .
The structure variable buffer is defined
for the
.B stat
structure.

.sp
.in +2
.nf
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
struct stat buffer;
int         status;
\&...
status = stat("/home/cnd/mod1", &buffer);
.fi
.in -2

.LP
.B Example 2
Use
.B stat()
to get directory information.
.sp
.LP
The following example fragment gets status information for each entry in a
directory. The call to the
.B stat()
function stores file information in
the
.B stat
structure pointed to by
.IR statbuf .
The lines that follow
the
.B stat()
call format the fields in the
.B stat
structure for
presentation to the user of the program.

.sp
.in +2
.nf
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <pwd.h>
#include <grp.h>
#include <time.h>
#include <locale.h>
#include <langinfo.h>
#include <stdio.h>
#include <stdint.h>
struct dirent *dp;
struct stat   statbuf;
struct passwd *pwd;
struct group  *grp;
struct tm     *tm;
char          datestring[256];
\&...
/* Loop through directory entries */
while ((dp = readdir(dir)) != NULL) {
    /* Get entry's information. */
    if (stat(dp->d_name, &statbuf) == -1)
    continue;

     /* Print out type, permissions, and number of links. */
     printf("%10.10s", sperm (statbuf.st_mode));
     printf("%4d", statbuf.st_nlink);

     /* Print out owners name if it is found using getpwuid(). */
     if ((pwd = getpwuid(statbuf.st_uid)) != NULL)
        printf(" %-8.8s", pwd->pw_name);
     else
        printf(" %-8d", statbuf.st_uid);

     /* Print out group name if it's found using getgrgid(). */
     if ((grp = getgrgid(statbuf.st_gid)) != NULL)
        printf(" %-8.8s", grp->gr_name);
     else
        printf(" %-8d", statbuf.st_gid);

     /* Print size of file. */
     printf(" %9jd", (intmax_t)statbuf.st_size);
     tm = localtime(&statbuf.st_mtime);

     /* Get localized date string. */
     strftime(datestring, sizeof(datestring), nl_langinfo(D_T_FMT), tm);

     printf(" %s %s\en", datestring, dp->d_name);
 }
.fi
.in -2

.LP
.B Example 3
Use
.B fstat()
to obtain file status information.
.sp
.LP
The following example shows how to obtain file status information for a
file named
.BR /home/cnd/mod1 .
The structure variable buffer is defined
for the
.B stat
structure. The
.B "/home/cnd/mod1 file"
is opened with
read/write privileges and is passed to the open file descriptor
.IR fildes .

.sp
.in +2
.nf
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
struct stat buffer;
int         status;
\&...
fildes = open("/home/cnd/mod1", O_RDWR);
status = fstat(fildes, &buffer);
.fi
.in -2

.LP
.B Example 4
Use
.B lstat()
to obtain symbolic link status
information.
.sp
.LP
The following example shows how to obtain status information for a symbolic
link named
.BR /modules/pass1 .
The structure variable buffer is defined
for the
.B stat
structure. If the
.I path
argument specified the
filename for the file pointed to by the symbolic link
(\fB/home/cnd/mod1\fR), the results of calling the function would be the
same as those returned by a call to the
.B stat()
function.

.sp
.in +2
.nf
#include <sys/stat.h>
struct stat buffer;
int         status;
\&...
status = lstat("/modules/pass1", &buffer);
.fi
.in -2

.SH USAGE
.sp
.LP
If
.B chmod()
or
.B fchmod()
is used to change the file group owner
permissions on a file with non-trivial ACL entries, only the ACL mask is set
to the new permissions and the group owner permission bits in the file's
mode field (defined in
.BR mknod (2))
are unchanged.  A non-trivial ACL
entry is one whose meaning cannot be represented in the file's mode field
alone. The new ACL mask permissions  might change the effective permissions
for additional users and groups that have ACL entries on the file.
.sp
.LP
The
.BR stat() ,
.BR fstat() ,
and
.B lstat()
functions have
transitional interfaces for 64-bit file offsets.  See
.BR lf64 (5).
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelAsync-Signal-Safe
_
Standard See below.
.TE

.sp
.LP
For
.BR stat() ,
.BR fstat() ,
and
.BR lstat() ,
see
.BR standards (5).
.SH SEE ALSO
.sp
.LP
.BR access (2),
.BR chmod (2),
.BR chown (2),
.BR creat (2),
.BR link (2),
.BR mknod (2),
.BR pipe (2),
.BR read (2),
.BR time (2),
.BR unlink (2),
.BR utime (2),
.BR write (2),
.BR fattach (3C),
.BR stat.h (3HEAD),
.BR attributes (5),
.BR fsattr (5),
.BR lf64 (5),
.BR standards (5)
