'\" te
.\" Copyright (c) 1997, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH _lwp_sema_wait 2 "8 May 1998" "SunOS 5.11" "System Calls"
.SH NAME
_lwp_sema_wait, _lwp_sema_trywait, _lwp_sema_init, _lwp_sema_post \-
semaphore operations
.SH SYNOPSIS
.LP
.nf
#include <sys/lwp.h>

\fBint\fR \fB_lwp_sema_wait\fR(\fBlwp_sema_t *\fIsema\fR);
.fi

.LP
.nf
\fBint\fR \fB_lwp_sema_trywait\fR(\fBlwp_sema_t *\fIsema\fR);
.fi

.LP
.nf
\fBint\fR \fB_lwp_sema_init\fR(\fBlwp_sema_t *\fIsema\fR, \fBint\fR \fIcount\fR);
.fi

.LP
.nf
\fBint\fR \fB_lwp_sema_post\fR(\fBlwp_sema_t *\fIsema\fR);
.fi

.SH DESCRIPTION
.sp
.LP
Conceptually, a semaphore is an non-negative integer count that is
atomically incremented and decremented. Typically this represents the number
of resources available. The
.B _lwp_sema_init()
function initializes the
count,
.B _lwp_sema_post()
atomically increments the count, and
\fB_lwp_sema_wait()\fR waits for the count to become greater than 0 and then
atomically decrements it.
.sp
.LP
LWP semaphores must be initialized before use.  The \fB_lwp_sema_init()\fR
function initializes the count associated with the LWP semaphore pointed to
by
.I sema
to
.IR count .
.sp
.LP
The
.B _lwp_sema_wait()
function blocks the calling LWP until the
semaphore count becomes greater than 0 and then atomically decrements it.
.sp
.LP
The
.B _lwp_sema_trywait()
function atomically decrements the count if
it is greater than zero. Otherwise it returns an error.
.sp
.LP
The
.B _lwp_sema_post()
function atomically increments the semaphore
count. If there are any LWPs blocked on the semaphore, one is unblocked.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B 0
is returned. A non-zero value indicates
an error.
.SH ERRORS
.sp
.LP
The
.BR _lwp_sema_init() ,
.BR _lwp_sema_trywait() ,
.BR _lwp_sema_wait() ,
and
.B _lwp_sema_post()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I sema
argument points to an invalid semaphore.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The
.I sema
argument points to an illegal address.
.RE

.sp
.LP
The 
.B _lwp_sema_wait()
function will fail if:
.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 9n
.rt
The function execution was interrupted by a signal or \fBfork\fR(2).
.RE

.sp
.LP
The 
.B _lwp_sema_trywait()
function will fail if:
.sp
.ne 2
.mk
.na
.B EBUSY
.ad
.RS 9n
.rt
The function was called on a semaphore with a zero count.
.RE

.sp
.LP
The 
.B _lwp_sema_post()
function will fail if:
.sp
.ne 2
.mk
.na
.B EOVERFLOW
.ad
.RS 13n
.rt
The value of the
.I sema
argument exceeds
.BR SEM_VALUE_MAX .
.RE

.SH SEE ALSO
.sp
.LP
\fBfork\fR(2)
