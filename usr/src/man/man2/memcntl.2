'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH memcntl 2 "10 Apr 2007" "SunOS 5.11" "System Calls"
.SH NAME
memcntl \- memory management control
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/mman.h>

\fBint\fR \fBmemcntl\fR(\fBcaddr_t\fR \fIaddr\fR, \fBsize_t\fR \fIlen\fR, \fBint\fR \fIcmd\fR, \fBcaddr_t\fR \fIarg\fR,
     \fBint\fR \fIattr\fR, \fBint\fR \fImask\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B memcntl()
function allows the calling process to apply a variety
of control operations over the address space identified by the mappings
established for the address range
.RI [ addr ,
.I addr
+
.IR len ).
.sp
.LP
The
.I addr
argument must be a multiple of the pagesize as returned by
.BR sysconf (3C).
The scope of the control operations can be further
defined with additional selection criteria (in the form of attributes)
according to the bit pattern contained in
.IR attr .
.sp
.LP
The following attributes specify page mapping selection criteria:
.sp
.ne 2
.mk
.na
.B SHARED
.ad
.RS 11n
.rt
Page is mapped shared.
.RE

.sp
.ne 2
.mk
.na
.B PRIVATE
.ad
.RS 11n
.rt
Page is mapped private.
.RE

.sp
.LP
The following attributes specify page protection selection criteria. The
selection criteria are constructed by a bitwise OR operation on the
attribute bits and must match exactly.
.sp
.ne 2
.mk
.na
.B PROT_READ
.ad
.RS 14n
.rt
Page can be read.
.RE

.sp
.ne 2
.mk
.na
.B PROT_WRITE
.ad
.RS 14n
.rt
Page can be written.
.RE

.sp
.ne 2
.mk
.na
.B PROT_EXEC
.ad
.RS 14n
.rt
Page can be executed.
.RE

.sp
.LP
The following criteria may also be specified:
.sp
.ne 2
.mk
.na
.B PROC_TEXT
.ad
.RS 13n
.rt
Process text.
.RE

.sp
.ne 2
.mk
.na
.B PROC_DATA
.ad
.RS 13n
.rt
Process data.
.RE

.sp
.LP
The
.B PROC_TEXT
attribute specifies all privately mapped segments with
read and execute permission, and the
.B PROC_DATA
attribute specifies all
privately mapped segments with write permission.
.sp
.LP
Selection criteria can be used to describe various abstract memory objects
within the address space on which to operate. If an operation shall not be
constrained by the selection criteria,
.I attr
must have the value
.BR 0 .
.sp
.LP
The operation to be performed is identified by the argument
.IR cmd .
The
symbolic names for the operations are defined in
.RB < sys/mman.h >
as
follows:
.sp
.ne 2
.mk
.na
.B MC_LOCK
.ad
.sp .6
.RS 4n
Lock in memory all pages in the range with attributes
.IR attr .
A given
page may be locked multiple times through different mappings; however,
within a given mapping, page locks do not nest. Multiple lock operations on
the same address in the same process will all be removed with a single
unlock operation. A page locked in one process and mapped in another (or
visible through a different mapping in the locking process) is locked in
memory as long as the locking process does neither an implicit nor explicit
unlock operation. If a locked mapping is removed, or a page is deleted
through file removal or truncation, an unlock operation is implicitly
performed. If a writable
.B MAP_PRIVATE
page in the address range is
changed, the lock will be transferred to the private page.
.sp
The
.I arg
argument is not used, but must be 0 to ensure compatibility
with potential future enhancements.
.RE

.sp
.ne 2
.mk
.na
.B MC_LOCKAS
.ad
.sp .6
.RS 4n
Lock in memory all pages mapped by the address space with attributes
.IR attr .
The
.I addr
and
.I len
arguments are not used, but must be
.I NULL
and
.B 0
respectively, to ensure compatibility with potential
future enhancements.  The
.I arg
argument is a bit pattern built from the
flags:
.sp
.ne 2
.mk
.na
.B MCL_CURRENT
.ad
.RS 15n
.rt
Lock current mappings.
.RE

.sp
.ne 2
.mk
.na
.B MCL_FUTURE
.ad
.RS 15n
.rt
Lock future mappings.
.RE

The value of
.I arg
determines whether the pages to be locked are those
currently mapped by the address space, those that will be mapped in the
future, or both. If
.B MCL_FUTURE
is specified, then all mappings
subsequently added to the address space will be locked, provided sufficient
memory is available.
.RE

.sp
.ne 2
.mk
.na
.B MC_SYNC
.ad
.sp .6
.RS 4n
Write to their backing storage locations all modified pages in the range
with attributes
.IR attr .
Optionally, invalidate cache copies. The backing
storage for a modified
.B MAP_SHARED
mapping is the file the page is
mapped to; the backing storage for a modified
.B MAP_PRIVATE
mapping is
its swap area. The
.I arg
argument is a bit pattern built from the flags
used to control the behavior of the operation:
.sp
.ne 2
.mk
.na
.B MS_ASYNC
.ad
.RS 17n
.rt
Perform asynchronous writes.
.RE

.sp
.ne 2
.mk
.na
.B MS_SYNC
.ad
.RS 17n
.rt
Perform synchronous writes.
.RE

.sp
.ne 2
.mk
.na
.B MS_INVALIDATE
.ad
.RS 17n
.rt
Invalidate mappings.
.RE

.B MS_ASYNC
Return immediately once all write operations are scheduled;
with
.B MS_SYNC
the function will not return until all write operations
are completed.
.sp
.B MS_INVALIDATE
Invalidate all cached copies of data in memory, so that
further references to the pages will be obtained by the system from their
backing storage locations. This operation should be used by applications
that require a memory object to be in a known state.
.RE

.sp
.ne 2
.mk
.na
.B MC_UNLOCK
.ad
.sp .6
.RS 4n
Unlock all pages in the range with attributes
.IR attr .
The
.IR arg
argument is not used, but must be
.B 0
to ensure compatibility with
potential future enhancements.
.RE

.sp
.ne 2
.mk
.na
.B MC_UNLOCKAS
.ad
.sp .6
.RS 4n
Remove address space memory locks and locks on all pages in the address
space with attributes
.IR attr .
The
.IR addr ,
.IR len ,
and
.IR arg
arguments are not used, but must be
.IR NULL ,
0 and 0, respectively, to
ensure compatibility with potential future enhancements.
.RE

.sp
.ne 2
.mk
.na
.B MC_HAT_ADVISE
.ad
.sp .6
.RS 4n
Advise system how a region of user-mapped memory will be accessed. The
\fIarg\fR argument is interpreted as a "\fBstruct memcntl_mha *\fR". The
following members are defined in a
.BR "struct memcntl_mha" :
.sp
.in +2
.nf
uint_t mha_cmd;
uint_t mha_flags;
size_t mha_pagesize;
.fi
.in -2

The accepted values for
.B mha_cmd
are:
.sp
.in +2
.nf
MHA_MAPSIZE_VA
MHA_MAPSIZE_STACK
MHA_MAPSIZE_BSSBRK
.fi
.in -2

The
.B mha_flags
member is reserved for future use and must always be
set to 0. The
.B mha_pagesize
member must be a valid size as obtained
from
.BR getpagesizes "(3C) or the constant value 0 to allow the system to"
choose an appropriate hardware address translation mapping size.
.sp
.B MHA_MAPSIZE_VA
sets the preferred hardware address translation
mapping size of the region of memory from
.I addr
to
.I addr
+
.IR len .
Both
.I addr
and
.I len
must be aligned to an
.B mha_pagesize
boundary. The entire virtual address region from
.I addr
to
.I addr
+
.I len
must not have any holes. Permissions
within each
.BR mha_pagesize -aligned
portion of the region must be
consistent. When a size of 0 is specified, the system selects an appropriate
size based on the size and alignment of the memory region, type of
processor, and other considerations.
.sp
.B MHA_MAPSIZE_STACK
sets the preferred hardware address translation
mapping size of the process main thread stack segment. The
.I addr
and
.I len
arguments must be
.I NULL
and 0, respectively.
.sp
.B MHA_MAPSIZE_BSSBRK
sets the preferred hardware address translation
mapping size of the process heap. The
.I addr
and
.I len
arguments
must be
.I NULL
and 0, respectively. See the NOTES section of the
.BR ppgsz (1)
manual page for additional information on process heap
alignment.
.sp
The
.I attr
argument must be 0 for all
.B MC_HAT_ADVISE
operations.
.RE

.sp
.LP
The
.I mask
argument must be
.BR 0 ;
it is reserved for future use.
.sp
.LP
Locks established with the lock operations are not inherited by a child
process after
.BR fork (2).
The
.B memcntl()
function fails if it
attempts to lock more memory than a system-specific limit.
.sp
.LP
Due to the potential impact on system resources, the operations
.BR MC_LOCKAS ,
.BR MC_LOCK ,
.BR MC_UNLOCKAS ,
and
.B MC_UNLOCK
are
restricted to privileged processes.
.SH USAGE
.sp
.LP
The
.B memcntl()
function subsumes the operations of
.BR plock "(3C) and"
.BR mctl (3UCB).
.sp
.LP
.B MC_HAT_ADVISE
is intended to improve performance of applications that
use large amounts of memory on processors that support multiple hardware
address translation mapping sizes; however, it should be used with care. Not
all processors support all sizes with equal efficiency. Use of larger sizes
may also introduce extra overhead that could reduce performance or available
memory. Using large sizes for one application may reduce available resources
for other applications and result in slower system wide performance.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B memcntl()
returns
.BR 0 ;
otherwise, it
returns \fB\(mi1\fR and sets
.B errno
to indicate an error.
.SH ERRORS
.sp
.LP
The
.B memcntl()
function will fail if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
When the selection criteria match, some or all of the memory identified by
the operation could not be locked when
.B MC_LOCK
or
.B MC_LOCKAS
was
.RI "specified, some or all mappings in the address range [" addr ", " addr 
+
.IR len )
are locked for I/O when
.B MC_HAT_ADVISE
was specified, or
the system has insufficient resources when
.B MC_HAT_ADVISE
was
specified.
.sp
The
.I cmd
is
.B MC_LOCK
or
.B MC_LOCKAS
and locking the memory
identified by this operation would exceed a limit or resource control on
locked memory.
.RE

.sp
.ne 2
.mk
.na
.B EBUSY
.ad
.RS 10n
.rt
When the selection criteria match, some or all of the addresses in the
range
.RI [ "addr, addr + len" )
are locked and
.B MC_SYNC
with the
.B MS_INVALIDATE
option was specified.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I addr
argument specifies invalid selection criteria or is not a
multiple of the page size as returned by 
.BR sysconf (3C);
the \fIaddr\fR
and/or
.I len
argument does not have the value
.B 0
when
.B MC_LOCKAS
or
.B MC_UNLOCKAS
is specified; the
.I arg
argument is
not valid for the function specified;
.B mha_pagesize
or
.B mha_cmd
is
invalid; or
.B MC_HAT_ADVISE
is specified and not all pages in the
specified region have the same access permissions within the given size
boundaries.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
When the selection criteria match, some or all of the addresses in the
range
.RI [ addr ,
.I addr
+
.IR len )
are invalid for the address space
of a process or specify one or more pages which are not mapped.
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 10n
.rt
The
.RB { PRIV_PROC_LOCK_MEMORY }
privilege is not asserted in the
effective set of the calling process and
.BR MC_LOCK ,
.BR MC_LOCKAS ,
.BR MC_UNLOCK ,
or
.B MC_UNLOCKAS
was specified.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR ppgsz (1),
.BR fork (2),
.BR mmap (2),
.BR mprotect (2),
.BR getpagesizes (3C),
.BR mctl (3UCB),
.BR mlock (3C),
.BR mlockall (3C),
.BR msync (3C),
.BR plock (3C),
.BR sysconf (3C),
.BR attributes (5),
.BR privileges (5)
