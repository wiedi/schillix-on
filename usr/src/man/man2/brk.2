'\" te
.\" Copyright 1989 AT&T  Copyright (c) 1997 Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH brk 2 "14 Jan 1997" "SunOS 5.11" "System Calls"
.SH NAME
brk, sbrk \- change the amount of space allocated for the calling process's
data segment
.SH SYNOPSIS
.LP
.nf
#include <unistd.h>

\fBint\fR \fBbrk\fR(\fBvoid *\fIendds\fR);
.fi

.LP
.nf
\fBvoid *\fBsbrk\fR(\fBintptr_t\fR \fIincr\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B brk()
and
.B sbrk()
functions are used to change dynamically
the amount of space allocated for the calling process's data segment (see
.BR exec (2)).
The change is made by resetting the process's break value
and allocating the appropriate amount of space. The break value is the
address of the first location beyond the end of the data segment. The amount
of allocated space increases as the break value increases. Newly allocated
space is set to zero. If, however, the same memory space  is reallocated to
the same process its contents are undefined.
.sp
.LP
When a program begins execution using
.B execve()
the break is set at
the highest location defined by the program and data storage areas.
.sp
.LP
The
.BR getrlimit (2)
function may be used to determine the maximum
permissible size of the
.I data
segment; it is not possible to set the
break beyond the
.B rlim_max
value returned from a call to
\fBgetrlimit()\fR, that is to say, "\fBend + rlim.rlim_max\fR." See
.BR end (3C).
.sp
.LP
The
.B brk()
function sets the break value to
.I endds
and changes
the allocated space accordingly.
.sp
.LP
The
.B sbrk()
function adds
.I incr
function bytes to the break
value and changes the allocated space accordingly. The
.I incr
function
can be negative, in which case the amount of allocated space is decreased.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B brk()
returns
.BR 0 .
Otherwise, it
returns \fB\(mi1\fR and sets
.B errno
to indicate the error.
.sp
.LP
Upon successful completion,
.B sbrk()
returns the prior break value.
Otherwise, it returns \fB(void *)\(mi1\fR and sets
.B errno
to indicate
the error.
.SH ERRORS
.sp
.LP
The
.B brk()
and
.B sbrk()
functions will fail and no additional
memory will be allocated if:
.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
The data segment size limit as set by
.B setrlimit()
(see
.BR getrlimit (2))
would be exceeded; the maximum possible size of a data
segment (compiled into the system) would be exceeded; insufficient space
exists in the swap area to support the expansion; or the new break value
would extend into an area of the address space defined by some previously
established mapping (see
.BR mmap (2)).
.RE

.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
Total amount of system memory available for private pages is temporarily
insufficient. This may occur even though the space requested was less than
the maximum data segment size (see
.BR ulimit (2)).
.RE

.SH USAGE
.sp
.LP
The behavior of
.B brk()
and
.B sbrk()
is unspecified if an
application also uses any other memory functions (such as
.BR malloc (3C),
.BR mmap (2),
.BR free (3C)).
The
.B brk()
and
.B sbrk()
functions
have been used in specialized cases where no other memory allocation
function provided the same capability.  The use of
.BR mmap (2)
is now
preferred because it can be used portably with all other memory allocation
functions and with any function that uses other allocation functions.
.sp
.LP
It is unspecified whether the pointer returned by
.B sbrk()
is aligned
suitably for any purpose.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR exec (2),
.BR getrlimit (2),
.BR mmap (2),
.BR shmop (2),
.BR ulimit (2),
.BR end (3C),
.BR free (3C),
.BR malloc (3C)
.SH NOTES
.sp
.LP
The value of
.I incr
may be adjusted by the system before setting the
new break value.  Upon successful completion, the implementation guarantees
a minimum of
.I incr
bytes will be added to the data segment if
.I incr
is a positive value.  If
.I incr
is a negative value, a
maximum of
.I incr
bytes will be removed from the data segment.  This
adjustment may not be necessary for all machine architectures.
.sp
.LP
The value of the arguments to both
.B brk()
and
.B sbrk()
are rounded
up for alignment with eight-byte boundaries.
.SH BUGS
.sp
.LP
Setting the break may fail due to a temporary lack of swap space. It is not
possible to distinguish this from a failure caused by exceeding the maximum
size of the data segment without consulting
.BR getrlimit() .
