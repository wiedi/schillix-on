'\" te
.\" Copyright (c) 2003, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2020, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH chown 2 "12 Feb 2020" "SunOS 5.11" "System Calls"
.SH NAME
chown, lchown, fchown, fchownat \- change owner and group of a file
.SH SYNOPSIS
.LP
.nf
#include <unistd.h>
#include <sys/types.h>

\fBint\fR \fBchown\fR(\fBconst char *\fIpath\fR, \fBuid_t\fR \fIowner\fR, \fBgid_t\fR \fIgroup\fR);
.fi

.LP
.nf
\fBint\fR \fBlchown\fR(\fBconst char *\fIpath\fR, \fBuid_t\fR \fIowner\fR, \fBgid_t\fR \fIgroup\fR);
.fi

.LP
.nf
\fBint\fR \fBfchown\fR(\fBint\fR \fIfildes\fR, \fBuid_t\fR \fIowner\fR, \fBgid_t\fR \fIgroup\fR);
.fi

.LP
.nf
\fBint\fR \fBfchownat\fR(\fBint\fR \fIfildes\fR, \fBconst char *\fIpath\fR, \fBuid_t\fR \fIowner\fR,
     \fBgid_t\fR \fIgroup\fR, \fBint\fR \fIflag\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B chown()
function sets the owner
.B ID
and group
.B ID
of
the file specified by
.I path
or referenced by the open file descriptor
.I fildes
to
.I owner
and
.I group
respectively. If
.I owner
or
.I group
is specified as \(mi1,
.B chown()
does not change the
corresponding
.B ID
of the file.
.sp
.LP
The
.B lchown()
function sets the owner
.B ID
and group
.B ID
of
the named file in the same manner as
.BR chown() ,
unless the named file is
a symbolic link. In this case,
.B lchown()
changes the ownership of the
symbolic link file itself, while
.B chown()
changes the ownership of the
file or directory to which the symbolic link refers.
.sp
.LP
The
.B fchownat()
function sets the owner ID and group ID of the named
file in the same manner as
.BR chown() .
If, however, the
.I path
argument is relative, the path is resolved relative to the
.I fildes
argument rather than the current working directory.  If the
.I fildes
argument has the special value
.BR AT_FDCWD ,
the path resolution reverts
back to current working directory relative.  If the
.I flag
argument is
set to
.BR AT_SYMLINK_NOFOLLOW ,
the function behaves like
.B lchown()
with respect
to symbolic links. If the
.I path
argument is absolute, the
.I fildes
argument is ignored.  If the
.I path
argument is a null pointer, the
function behaves like
.BR fchown() .
.sp
.LP
If
.BR chown() ,
.BR lchown() ,
.BR fchown() ,
or
.B fchownat()
is
invoked by a process that does not have
.RB { PRIV_FILE_SETID }
asserted in
its effective set, the set-user-ID and set-group-ID bits of the file mode,
.B S_ISUID
and
.B S_ISGID
respectively, are cleared (see
.BR chmod (2)).
Additional restrictions apply when changing the ownership
to uid 0.
.sp
.LP
The operating system defines several privileges to override restrictions on
the
.B chown()
family of functions. When the
.RB { PRIV_FILE_CHOWN }
privilege is asserted in the effective set of the current process, there are
no restrictions except in the special circumstances of changing ownership to
or from uid 0. When the
.RB { PRIV_FILE_CHOWN_SELF }
privilege is asserted,
ownership changes are restricted to the files of which the ownership matches
the effective user ID of the current process.  If neither privilege is
asserted in the effective set of the calling process, ownership changes are
limited to changes of the group of the file to the list of supplementary
group IDs and the effective group ID.
.sp
.LP
The operating system provides a configuration option,
.RB { _POSIX_CHOWN_RESTRICTED },
to control the default behavior of
processes and the behavior of the NFS server.  If
.RB { _POSIX_CHOWN_RESTRICTED }
is not in effect, the privilege
.RB { PRIV_FILE_CHOWN_SELF }
is asserted in the inheritable set of all
processes unless overridden by
.BR policy.conf (4)
or
.BR user_attr (4).
To set this configuration option, include the following line in
.BR /etc/system :
.sp
.LP
set rstchown = 1
.sp
.LP
To disable this option, include the following line in
.BR /etc/system :
.sp
.LP
set rstchown = 0
.sp
.LP
See
.BR system (4)
and
.BR fpathconf (2).
.sp
.LP
Upon successful completion,
.BR chown() ,
.B fchown()
and
.B lchown()
mark for update the
.B st_ctime
field of the file.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B 0
is returned. Otherwise,
.B \(mi1
is
returned, the owner and group of the named file remain unchanged, and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
All of these functions will fail if:
.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 9n
.rt
The effective user ID does not match the owner of the file and the
.RB { PRIV_FILE_CHOWN }
privilege is not asserted in the effective set of
the calling process, or the
.RB { PRIV_FILE_CHOWN_SELF }
privilege is not
asserted in the effective set of the calling process.
.RE

.sp
.LP
The
.BR chown() ,
.BR lchown() ,
and
.B fchownat()
functions will fail
if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 16n
.rt
Search permission is denied on a component of the path prefix of
.IR path .
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 16n
.rt
The
.I path
argument points to an illegal address and for
.BR fchownat() ,
the file descriptor has the value
.BR AT_FDCWD .
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 16n
.rt
A signal was caught during the execution of the
.B chown()
or
.B lchown()
function.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 16n
.rt
The
.I group
or
.I owner
argument is out of range.
.RE

.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 16n
.rt
An I/O error occurred while reading from or writing to the file system.
.RE

.sp
.ne 2
.mk
.na
.B ELOOP
.ad
.RS 16n
.rt
Too many symbolic links were encountered in translating
.IR path .
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
The length of the
.I path
argument exceeds
.RI { PATH_MAX },
or the
length of a
.I path
component exceeds
.RI { NAME_MAX }
while
.RB { _POSIX_NO_TRUNC }
is in effect.
.RE

.sp
.ne 2
.mk
.na
.B ENOLINK
.ad
.RS 16n
.rt
The
.I path
argument points to a remote machine and the link to that
machine is no longer active.
.RE

.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 16n
.rt
Either a component of the path prefix or the file referred to by
.IR path
does not exist or is a null pathname.
.RE

.sp
.ne 2
.mk
.na
.B ENOTDIR
.ad
.RS 16n
.rt
A component of the path prefix of
.I path
is not a directory, or the
path supplied to
.B fchownat()
is relative and the file descriptor
provided does not refer to a valid directory.
.RE

.sp
.ne 2
.mk
.na
.B EROFS
.ad
.RS 16n
.rt
The named file  resides on a read-only file system.
.RE

.sp
.LP
The
.BR fchown() " and "
.B fchownat()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 11n
.rt
For
.BR fchown() " the "
.I fildes
argument is not an open file descriptor
and.
.sp
For
.BR fchownat() ,
the
.I path
argument is not absolute and the
.I fildes
argument is not
.B AT_FDCWD
or an open file descriptor.
.RE

.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 11n
.rt
An I/O error occurred while reading from or writing to the file system.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 11n
.rt
A signal was caught during execution of the function.
.RE

.sp
.ne 2
.mk
.na
.B ENOLINK
.ad
.RS 11n
.rt
The
.I fildes
argument points to a remote machine and the link to that
machine is no longer active.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 11n
.rt
The
.I group
or
.I owner
argument is out of range.
.RE

.sp
.ne 2
.mk
.na
.B EROFS
.ad
.RS 11n
.rt
The named file referred to by
.I fildes
resides on a read-only file
system.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilitySee below.
_
MT-LevelSee below.
.TE

.sp
.LP
The
.BR chown() ,
.BR fchown() ,
and
.B lchown()
functions are
Standard. The
.B fchownat()
function is Evolving.
.sp
.LP
The
.B chown()
and
.B fchownat()
functions are Async-Signal-Safe.
.SH SEE ALSO
.sp
.LP
.BR chgrp (1),
.BR chown (1),
.BR chmod (2),
.BR fpathconf (2),
.BR system (4),
.BR attributes (5),
.BR standards (5)
