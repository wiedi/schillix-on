'\" te
.\" Copyright (c) 2003, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH meminfo 2 "21 Feb 2003" "SunOS 5.11" "System Calls"
.SH NAME
meminfo \- provide information about memory
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/mman.h>

\fBint\fR \fBmeminfo\fR(\fBconst uint64_t\fR \fIinaddr\fR[], \fBint\fR \fIaddr_count\fR,
     \fBconst uint_t\fR \fIinfo_req\fR[], \fBint\fR \fIinfo_count\fR, \fBuint64_t\fR \fIoutdata\fR[],
     \fBuint_t\fR \fIvalidity\fR[]);
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I inaddr
.ad
.RS 14n
.rt
array of input addresses; the maximum number of addresses that can be
processed for each call is
.BR MAX_MEMINFO_CNT
.RE

.sp
.ne 2
.mk
.na
.I addr_count
.ad
.RS 14n
.rt
number of addresses
.RE

.sp
.ne 2
.mk
.na
.I info_req
.ad
.RS 14n
.rt
array of types of information requested
.RE

.sp
.ne 2
.mk
.na
.I info_count
.ad
.RS 14n
.rt
number of pieces of information requested for each address in
.I inaddr
.RE

.sp
.ne 2
.mk
.na
.I outdata
.ad
.RS 14n
.rt
array into which results are placed; array size must be the product of
.I info_count
and
.IR addr_count
.RE

.sp
.ne 2
.mk
.na
.I validity
.ad
.RS 14n
.rt
array of size
.I addr_count
containing bitwise result codes; 0th bit
evaluates validity of corresponding input address, 1st bit validity of
response to first member of
.IR info_req ,
and so on
.RE

.SH DESCRIPTION
.sp
.LP
The
.B meminfo()
function provides information about virtual and
physical memory particular to the calling process.  The user or developer of
performance utilities can use this information to analyze system memory
allocations and develop a better understanding of the factors affecting
application performance.
.sp
.LP
The caller of
.B meminfo()
can obtain the following types of information
about both virtual and physical memory.
.sp
.ne 2
.mk
.na
.B MEMINFO_VPHYSICAL
.ad
.RS 26n
.rt
physical address corresponding to virtual address
.RE

.sp
.ne 2
.mk
.na
.B MEMINFO_VLGRP
.ad
.RS 26n
.rt
locality group of physical page corresponding to virtual address
.RE

.sp
.ne 2
.mk
.na
.B MEMINFO_VPAGESIZE
.ad
.RS 26n
.rt
size of physical page corresponding to virtual address
.RE

.sp
.ne 2
.mk
.na
.B MEMINFO_VREPLCNT
.ad
.RS 26n
.rt
number of replicated physical pages corresponding to specified virtual
address
.RE

.sp
.ne 2
.mk
.na
.B MEMINFO_VREPL
|
.I n
.ad
.RS 26n
.rt
\fIn\fRth physical replica of specified virtual address
.RE

.sp
.ne 2
.mk
.na
.B MEMINFO_VREPL_LGRP
|
.I n
.ad
.RS 26n
.rt
lgrp of \fIn\fRth physical replica of specified virtual address
.RE

.sp
.ne 2
.mk
.na
.B MEMINFO_PLGRP
.ad
.RS 26n
.rt
locality group of specified physical address
.RE

.SH RETURN VALUES
.sp
.LP
Upon successful completion \fBmeminfo()\fR returns 0. Otherwise \(mi1 is
returned and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B meminfo()
function will fail if:
.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The area pointed to by
.I outdata
or
.I validity
could not be
written, or the data pointed to by
.I info_req
or
.I inaddr
could not
be read.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The value of
.I info_count
is greater than 31 or less than 1, or the
value of
.I addr_count
is less than 1.
.RE

.SH EXAMPLES
.LP
.B Example 1
Print physical pages and page sizes corresponding to a set
of virtual addresses.
.sp
.LP
The following example prints the physical pages and page sizes
corresponding to a set of virtual addresses.

.sp
.in +2
.nf
void
print_info(void **addrvec, int how_many)
{
    static const uint_t info[] = {
        MEMINFO_VPHYSICAL,
        MEMINFO_VPAGESIZE
    };

    int info_num = sizeof (info) / sizeof (info[0]);
    int i;

    uint64_t *inaddr = alloca(sizeof (uint64_t) * how_many);
    uint64_t *outdata = alloca(sizeof (uint64_t) * how_many * info_num);
    uint_t *validity = alloca(sizeof (uint_t) * how_many);

    for (i = 0; i < how_many; i++)
        inaddr[i] = (uint64_t)addrvec[i];

    if (meminfo(inaddr, how_many, info, info_num, outdata,
                validity) < 0) {
        perror("meminfo");
        return;
    }

    for (i = 0; i < how_many; i++) {
        if ((validity[i] & 1) == 0)
            printf("address 0x%llx not part of address space\en",
                inaddr[i]);

        else if ((validity[i] & 2) == 0)
            printf("address 0x%llx has no physical page "
                "associated with it\en", inaddr[i]);

        else {
            char buff[80];
            if ((validity[i] & 4) == 0)
                strcpy(buff, "<Unknown>");
            else
                sprintf(buff, "%lld",
                    outdata[i * info_num + 1]);

            printf("address 0x%llx is backed by physical "
                "page 0x%llx of size %s\en",
                inaddr[i], outdata[i * info_num], buff);
        }
    }
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStable
_
MT-LevelAsync-Signal-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR memcntl (2),
.BR mmap (2),
.BR gethomelgroup (3C),
.BR getpagesize (3C),
.BR madvise (3C),
.BR sysconf (3C),
.BR attributes (5)
