'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH rename 2 "4 Oct 2007" "SunOS 5.11" "System Calls"
.SH NAME
rename, renameat \- change the name of a file
.SH SYNOPSIS
.LP
.nf
#include <stdio.h>

\fBint\fR \fBrename\fR(\fBconst char *\fIold\fR, \fBconst char *\fInew\fR);
.fi

.LP
.nf
#include <unistd.h>

\fBint\fR \fBrenameat\fR(\fBint\fR \fIfromfd\fR, \fBconst char *\fIold\fR, \fBint\fR \fItofd\fR,
     \fBconst char *\fInew\fR);
.fi

.SS "XPG3"
.LP
.nf
#include <unistd.h>

\fBint\fR \fBrename\fR(\fBconst char *\fIold\fR, \fBconst char *\fInew\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B rename()
function changes the name of a file. The \fIold\fR
argument points to the pathname of the file to be renamed. The \fInew\fR
argument points to the new path name of the file.
.sp
.LP
The
.B renameat()
function renames an entry in a directory, possibly
moving the entry into a different directory.  See
.BR fsattr (5).
If the
\fIold\fR argument is an absolute path, the \fIfromfd\fR is ignored.
Otherwise it is resolved relative to the \fIfromfd\fR argument rather than
the current working directory.  Similarly, if the
.I new
argument is not
absolute, it is resolved relative to the \fItofd\fR argument.  If either
\fIfromfd\fR or \fItofd\fR have the value
.BR AT_FDCWD ,
defined in
<\fBfcntl.h\fR>, and their respective paths are relative, the path is
resolved relative to the current working directory.
.sp
.LP
Current implementation restrictions will cause the
.BR renameat()
function to return an error if an attempt is made to rename an extended
attribute file to a regular (non-attribute) file, or to rename a regular
file to an extended attribute file.
.sp
.LP
If
.I old
and
.I new
both refer to the same existing file, the
\fBrename()\fR and \fBrenameat()\fR functions return successfully and
performs no other action.
.sp
.LP
If
.I old
points to the pathname of a file that is not a directory,
\fInew\fR must not point to the pathname of a directory. If the link named
by
.I new
exists, it will be removed and
.I old
will be renamed to
.IR new .
In this case, a link named
.I new
must remain visible to other
processes throughout the renaming operation and will refer to either the
file referred to by
.I new
or the file referred to as
.I old
before
the operation began.
.sp
.LP
If
.I old
points to the pathname of a directory,
.I new
must not
point to the pathname of a file that is not a directory. If the directory
named by
.I new
exists, it will be removed and
.I old
will be renamed
to
.IR new .
In this case, a link named
.I new
will exist throughout
the renaming operation and will refer to either the file referred to by
\fInew\fR or the file referred to as \fIold\fR before the operation began.
Thus, if
.I new
names  an existing directory, it must be an empty
directory.
.sp
.LP
The
.I new
pathname must not contain a path prefix that names
.IR old .
Write access permission is required for both the directory containing
\fIold\fR and the directory containing
.IR new .
If
.I old
points to the
pathname of a directory, write access permission is required for the
directory named by
.IR old ,
and, if it exists, the directory named by
.IR new .
.sp
.LP
If the directory containing
.I old
has the sticky bit set,  at least one
of the following conditions listed below must be true:
.RS +4
.TP
.ie t \(bu
.el o
the user must own
.IR old
.RE
.RS +4
.TP
.ie t \(bu
.el o
the user must own the directory containing
.IR old
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fIold\fR must be writable by the user
.RE
.RS +4
.TP
.ie t \(bu
.el o
the user must be a privileged user
.RE
.sp
.LP
If
.I new
exists, and the directory containing
.I new
is writable and
has the sticky bit set, at least  one of the following conditions must be
true:
.RS +4
.TP
.ie t \(bu
.el o
the user must own
.IR new
.RE
.RS +4
.TP
.ie t \(bu
.el o
the user must own the directory containing
.IR new
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fInew\fR must be writable by the user
.RE
.RS +4
.TP
.ie t \(bu
.el o
the user must be a privileged user
.RE
.sp
.LP
If the link named by
.I new
exists, the file's link count becomes zero
when it is removed, and no process has the file open, then  the space
occupied by the file will be freed and the file will no longer be
accessible. If one or more processes have the file open when the last link
is removed, the link will be removed before
.B rename()
or
\fBrenameat()\fR returns, but the removal of the file contents will be
postponed until all references to the file have been closed.
.sp
.LP
Upon successful completion, the
.B rename()
and
.BR renameat()
functions will mark for update the
.B st_ctime
and
.B st_mtime
fields
of the parent directory of each file.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B 0
is returned. Otherwise,
.B \(mi1
is
returned and
.B errno
is set to indicate an error.
.SH ERRORS
.sp
.LP
The
.B rename()
function will fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 16n
.rt
A component of either path prefix denies search permission; one of the
directories containing
.I old
and
.I new
denies write permissions; or
write permission is denied by a directory pointed to by
.I old
or
.IR new .
.RE

.sp
.ne 2
.mk
.na
.B EBUSY
.ad
.RS 16n
.rt
The
.I new
argument is a directory and the mount point for a mounted
file system.
.RE

.sp
.ne 2
.mk
.na
.B EDQUOT
.ad
.RS 16n
.rt
The directory where the new name entry is being placed cannot be extended
because the user's quota of disk blocks on that file system has been
exhausted.
.RE

.sp
.ne 2
.mk
.na
.B EEXIST
.ad
.RS 16n
.rt
The link named by
.I new
is a directory containing entries other than
`\fB\&.\fR' (the directory itself) and `\fB\&..\fR' (the parent
directory).
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 16n
.rt
Either
.I old
or
.I new
references an invalid address.
.RE

.sp
.ne 2
.mk
.na
.B EILSEQ
.ad
.RS 16n
.rt
The path argument includes non-UTF8 characters and the file system accepts
only file names where all characters are part of the UTF-8 character
codeset.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 16n
.rt
The
.I new
argument directory pathname contains a path prefix that names
the
.I old
directory, or an attempt was made to rename a regular file to
an extended attribute or from an extended attribute to a regular file.
.RE

.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 16n
.rt
An I/O error occurred while making or updating a directory entry.
.RE

.sp
.ne 2
.mk
.na
.B EISDIR
.ad
.RS 16n
.rt
The
.I new
argument points to a directory but
.I old
points to a file
that is not a directory.
.RE

.sp
.ne 2
.mk
.na
.B ELOOP
.ad
.RS 16n
.rt
Too many symbolic links were encountered in translating the pathname.
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
The length of
.I old
or
.I new
exceeds
.BR PATH_MAX ,
or a pathname
component is longer than
.B NAME_MAX
while
.B _POSIX_NO_TRUNC
is in
effect.
.RE

.sp
.ne 2
.mk
.na
.B EMLINK
.ad
.RS 16n
.rt
The file named by
.I old
is a directory, and the link count of the
parent directory of
.I new
would exceed
.BR LINK_MAX .
.RE

.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 16n
.rt
The link named by
.I old
does not name an existing file, a component of
the path prefix of
.I new
does not exist, or either
.I old
or
\fInew\fR points to an empty string.
.RE

.sp
.ne 2
.mk
.na
.B ENOSPC
.ad
.RS 16n
.rt
The directory that would contain
.I new
cannot be extended.
.RE

.sp
.ne 2
.mk
.na
.B ENOTDIR
.ad
.RS 16n
.rt
A component of either path prefix is not a directory, or
.I old
names a
directory and
.I new
names a file that is not a directory, or \fItofd\fR
and \fIdirfd\fR in \fBrenameat()\fR do not reference a directory.
.RE

.sp
.ne 2
.mk
.na
.B EROFS
.ad
.RS 16n
.rt
The requested operation requires writing in a directory on a read-only file
system.
.RE

.sp
.ne 2
.mk
.na
.B EXDEV
.ad
.RS 16n
.rt
The links named by
.I old
and
.I new
are on different file systems.
.RE

.sp
.LP
The
.B renameat()
functions will fail if:
.sp
.ne 2
.mk
.na
.B ENOTSUP
.ad
.RS 11n
.rt
An attempt was made to rename a regular file as an attribute file or to
rename an attribute file as a regular file.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelAsync-Signal-Safe
_
StandardFor \fBrename()\fR, see \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
.BR chmod (2),
.BR link (2),
.BR unlink (2),
.BR attributes (5),
\fBfsattr\fR(5), \fBstandards\fR(5)
.SH NOTES
.sp
.LP
The system can deadlock if there is a loop in the file system graph. Such a
loop can occur if there is an entry in directory
.BR a ,
.BR a/name1 ,
that is a hard link to directory
.BR b ,
and an entry in directory
.BR b ,
.BR b/name2 ,
that is a hard link to directory
.BR a .
When such a loop
exists and two separate processes attempt to rename
.B a/name1
to
\fBb/name2\fR and \fBb/name2\fR to
.BR a/name1 ,
the system may deadlock
attempting to lock  both directories for modification.  Use symbolic links
instead of hard links  for directories.
