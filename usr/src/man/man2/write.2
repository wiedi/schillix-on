'\" te
.\" Copyright (c) 2087, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH write 2 "29 Jan 2008" "SunOS 5.11" "System Calls"
.SH NAME
write, pwrite, writev \- write on a file
.SH SYNOPSIS
.LP
.nf
#include <unistd.h>

\fBssize_t\fR \fBwrite\fR(\fBint\fR \fIfildes\fR, \fBconst void *\fIbuf\fR, \fBsize_t\fR \fInbyte\fR);
.fi

.LP
.nf
\fBssize_t\fR \fBpwrite\fR(\fBint\fR \fIfildes\fR, \fBconst void *\fIbuf\fR, \fBsize_t\fR \fInbyte\fR,
     \fBoff_t\fR \fIoffset\fR);
.fi

.LP
.nf
#include <sys/uio.h>

\fBssize_t\fR \fBwritev\fR(\fBint\fR \fIfildes\fR, \fBconst struct iovec *\fIiov\fR, \fBint\fR \fIiovcnt\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B write()
function attempts to write
.I nbyte
bytes from the
buffer pointed to by
.I buf
to the file associated with the open file
descriptor,
.IR fildes .
.sp
.LP
If
.I nbyte
is 0,
.B write()
will return 0 and have no other results
if the file is a regular file; otherwise, the results are unspecified.
.sp
.LP
On a regular file or other file capable of seeking, the actual writing of
data proceeds from the position in the file indicated by the file offset
associated with
.IR fildes .
Before successful return from
.BR write() ,
the file offset is incremented by the number of bytes actually written. On a
regular file, if this incremented file offset is greater than the length of
the file, the length of the file will be set to this file offset.
.sp
.LP
If the
.B O_SYNC
bit has been set, write I/O operations on the file
descriptor complete as defined by synchronized I/O file integrity
completion.
.sp
.LP
If
.I fildes
refers to a socket,
.B write()
is equivalent to
.BR send (3SOCKET)
with no flags set.
.sp
.LP
On a file not capable of seeking, writing always takes place starting at
the current position.  The value of a file offset associated with such a
device is undefined.
.sp
.LP
If the
.B O_APPEND
flag of the file status flags is set, the file offset
will be set to the end of the file prior to each write and no intervening
file modification operation will occur between changing the file offset and
the write operation.
.sp
.LP
For regular files, no data transfer will occur past the offset maximum
established in the open file description with
.IR fildes .
.sp
.LP
A
.B write()
to a regular file is blocked if mandatory file/record
locking is set (see
.BR chmod (2)),
and there is a record lock owned by
another process  on the segment of the file to be written:
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NDELAY
or
.B O_NONBLOCK
is set,
.B write()
returns
\fB\(mi1\fR and sets \fBerrno\fR to
.BR EAGAIN .
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NDELAY
and
.B O_NONBLOCK
are clear,
.B write()
sleeps
until all blocking locks are removed or the
.B write()
is terminated by a
signal.
.RE
.sp
.LP
If a
.B write()
requests that more bytes be written than there is room
for\(emfor example, if the write would exceed the process file size limit
(see
.BR getrlimit (2)
and
.BR ulimit (2)),
the system file size limit, or
the free space on the device\(emonly as many bytes as there is room for will
be written. For example, suppose there is space for 20 bytes more in a file
before reaching a limit. A
.B write()
of 512-bytes returns 20. The next
.B write()
of a non-zero number of bytes gives a failure return (except
as noted for pipes and FIFO below).
.sp
.LP
If
.B write()
is interrupted by a signal before it writes any data, it
will return \(mi1 with
.B errno
set to
.BR EINTR .
.sp
.LP
If
.B write()
is interrupted by a signal after it successfully writes
some data, it will return the number of bytes written.
.sp
.LP
If
.B write()
exceeds the process file size limit, the application
generates a
.B SIGXFSZ
signal, whose default behavior is to dump core.
.sp
.LP
After a
.B write()
to a regular file has successfully returned:
.RS +4
.TP
.ie t \(bu
.el o
Any successful
.BR read (2)
from each byte position in the file that was
modified by that write will return the data specified by the
.BR write()
for that position until such byte positions are again modified.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Any subsequent successful
.B write()
to the same byte position in the
file will overwrite that file data.
.RE
.sp
.LP
Write requests to a pipe or FIFO are handled the same as a regular file
with the following exceptions:
.RS +4
.TP
.ie t \(bu
.el o
There is no file offset associated with a pipe, hence each write request
appends to the end of the pipe.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Write requests of
.BR {PIPE_BUF} " bytes or less are guaranteed not to be"
interleaved with data from other processes doing writes on the same pipe.
Writes of greater than
.BR {PIPE_BUF} " bytes may have data interleaved, on"
arbitrary boundaries, with writes by other processes, whether or not the
.B O_NONBLOCK
or
.B O_NDELAY
flags are set.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NONBLOCK
and
.B O_NDELAY
are clear, a write request may cause
the process to block, but on normal completion it returns
.IR nbyte .
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NONBLOCK
and
.B O_NDELAY
are set,
.B write()
does not
block the process. If a
.B write()
request for
.B PIPE_BUF
or fewer
bytes succeeds completely
.B write()
returns
.IR nbyte .
Otherwise, if
.B O_NONBLOCK
is set, it returns \fB\(mi1\fR and sets
.B errno
to
.B EAGAIN
or if
.B O_NDELAY
is set, it returns
.BR 0 .
A
.B write()
request for greater than
.B {PIPE_BUF}
bytes  transfers
what it can and returns the number of bytes written or it transfers no data
and, if
.B O_NONBLOCK
is set, returns \fB\(mi1\fR with
.B errno
set to
.B EAGAIN
or if
.B O_NDELAY
is set, it returns
.BR 0 .
Finally, if a
request is greater than
.B PIPE_BUF
bytes and all data previously written
to the pipe has been read,
.B write()
transfers at least
.BR PIPE_BUF
bytes.
.RE
.sp
.LP
When attempting to write to a file descriptor (other than a pipe, a FIFO, a
socket, or a stream) that supports nonblocking writes and cannot accept the
data immediately:
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NONBLOCK
and
.B O_NDELAY
are clear,
.B write()
blocks
until the data can be accepted.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NONBLOCK
or
.B O_NDELAY
is set,
.B write()
does not block
the process. If some data can be written without blocking the process,
.B write()
writes what it can and returns the number of bytes written.
Otherwise, if
.B O_NONBLOCK
is set, it returns \fB\(mi1\fR  and sets
.B errno
to
.B EAGAIN
or if
.B O_NDELAY
is set,  it returns
.BR 0 .
.RE
.sp
.LP
Upon successful completion, where
.I nbyte
is greater than 0,
.B write()
will mark for update the
.B st_ctime
and
.BR st_mtime
fields of the file, and if the file is a regular file, the
.B S_ISUID
and
.B S_ISGID
bits of the file mode may be cleared.
.sp
.LP
For streams files (see
.BR Intro (2)
and
.BR streamio "(7I)), the"
operation of
.B write()
is determined by the values of the minimum and
maximum \fInbyte\fR range ("packet size") accepted by the stream. These
values are contained in the topmost stream module, and can not be set or
tested from user level. If
.I nbyte
falls within the packet size range,
.I nbyte
bytes are written. If
.I nbyte
does not fall within the range
and the minimum packet size value  is zero,
.B write()
breaks the buffer
into maximum packet size segments prior  to sending the data downstream (the
last segment may be smaller than the maximum  packet size). If \fInbyte\fR
does not fall within the range and the minimum value is non-zero,
.B write()
fails and sets
.B errno
to
.BR ERANGE .
Writing a
zero-length buffer (\fInbyte\fR is zero) to a streams device sends  a zero
length message with zero returned. However, writing a zero-length buffer to
a pipe or FIFO sends no message  and zero is returned. The user program may
issue the
.BR "I_SWROPT ioctl" (2)
to enable  zero-length messages to
be sent across the pipe or FIFO (see
.BR streamio (7I)).
.sp
.LP
When writing to a stream, data messages are created with a priority band of
zero. When writing to a socket or to a stream that is not a pipe or a
FIFO:
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NDELAY
and
.B O_NONBLOCK
are not set, and the stream cannot
accept data (the stream write queue is full due to internal flow control
conditions),
.B write()
blocks until data can be accepted.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NDELAY
or
.B O_NONBLOCK
is set and the stream cannot accept
data,
.B write()
returns
.B -1
and sets
.B errno
to
.BR EAGAIN .
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B O_NDELAY
or
.B O_NONBLOCK
is set and part of the buffer has
already been written when a condition occurs in which the stream cannot
accept additional data,
.B write()
terminates and returns the number of
bytes written.
.RE
.sp
.LP
The
.B write()
and
.B writev()
functions will fail if the stream head
had processed an asynchronous error before the call.  In this case, the
value of
.B errno
does not reflect the result of
.B write()
or
.B writev()
but reflects the prior error.
.SS "\fBpwrite()\fR"
.sp
.LP
The
.B pwrite()
function is equivalent to
.BR write() ,
except that it
writes into a given position and does not change the file offset (regardless
of whether
.B O_APPEND
is set). The first three arguments to
.B pwrite()
are the same as
.BR write() ,
with the addition of a fourth
argument
.I offset
for the desired position inside the file.
.SS "\fBwritev()\fR"
.sp
.LP
The
.B writev()
function performs the same action as
.BR write() ,
but
gathers the output data from the
.I iovcnt
buffers specified by the
members of the \fIiov\fR array: \fIiov\fR[0], \fIiov\fR[1], \&.\|.\|.,
\fIiov\fR[\fIiovcnt\fR\|\(mi\|1]. The \fIiovcnt\fR buffer is valid if
greater than 0 and less than or equal to
.BR {IOV_MAX} .
See
.BR Intro (2)
for a definition of
.BR {IOV_MAX} .
.sp
.LP
The
.B iovec
structure contains the following members:
.sp
.in +2
.nf
caddr_t  iov_base;
int      iov_len;
.fi
.in -2

.sp
.LP
Each
.B iovec
entry specifies the base address and length of an area in
memory from which data should be written.  The
.B writev()
function
always writes all data from an area before proceeding to the next.
.sp
.LP
If \fIfildes\fR refers to a regular file and all of the \fBiov_len\fR
members in the array pointed to by
.I iov
are 0,
.B writev()
will
return 0 and have no other effect.  For other file types, the behavior is
unspecified.
.sp
.LP
If the sum of the
.B iov_len
values is greater than
.BR SSIZE_MAX ,
the
operation fails and no data is transferred.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B write()
returns the number of bytes
actually written to the file associated with
.IR fildes .
This number is
never greater than
.IR nbyte .
Otherwise, \fB\(mi1\fR is returned, the
file-pointer remains unchanged, and
.B errno
is set to indicate the
error.
.sp
.LP
Upon successful completion,
.B writev()
returns the number of bytes
actually written.  Otherwise, it returns  \fB\(mi1\fR, the file-pointer
remains unchanged, and
.B errno
is set to indicate an error.
.SH ERRORS
.sp
.LP
The
.BR write() ,
.BR pwrite() ,
and
.B writev()
functions will fail
if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 11n
.rt
Mandatory file/record locking is set,
.B O_NDELAY
or
.B O_NONBLOCK
is
set, and there is a blocking record lock; an attempt is made to write to a
stream that can not accept data with the
.B O_NDELAY
or
.BR O_NONBLOCK
flag set; or a write to a pipe or FIFO of
.B PIPE_BUF
bytes or less is
requested and less than
.I nbytes
of free space is available.
.RE

.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 11n
.rt
The
.I fildes
argument is not a valid file descriptor open for
writing.
.RE

.sp
.ne 2
.mk
.na
.B EDEADLK
.ad
.RS 11n
.rt
The write was going to go to sleep  and cause a deadlock situation to
occur.
.RE

.sp
.ne 2
.mk
.na
.B EDQUOT
.ad
.RS 11n
.rt
The user's quota of disk blocks on the file system containing the file has
been exhausted.
.RE

.sp
.ne 2
.mk
.na
.B EFBIG
.ad
.RS 11n
.rt
An attempt is made to write a file that exceeds the process's file size
limit or the maximum file size (see
.BR getrlimit (2)
and
.BR ulimit (2)).
.RE

.sp
.ne 2
.mk
.na
.B EFBIG
.ad
.RS 11n
.rt
The file is a regular file,
.I nbyte
is greater than 0, and the starting
position is greater than or equal to the offset maximum established in the
file description associated with
.IR fildes .
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 11n
.rt
A signal was caught during the write  operation and no data was
transferred.
.RE

.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 11n
.rt
The process is in the background and is attempting to write to its
controlling terminal whose
.B TOSTOP
flag is set, or the process is
neither ignoring nor blocking
.B SIGTTOU
signals and the process group
of the process is orphaned.
.RE

.sp
.ne 2
.mk
.na
.B ENOLCK
.ad
.RS 11n
.rt
Enforced record locking was enabled and
.BR {LOCK_MAX} " regions  are"
already locked in the system, or the system record lock table was full and
the write  could not go to sleep  until the blocking record lock was
removed.
.RE

.sp
.ne 2
.mk
.na
.B ENOLINK
.ad
.RS 11n
.rt
The
.I fildes
argument is on a remote machine and the link to that
machine is no longer active.
.RE

.sp
.ne 2
.mk
.na
.B ENOSPC
.ad
.RS 11n
.rt
During a write to an ordinary file, there is no  free space left on the
device.
.RE

.sp
.ne 2
.mk
.na
.B ENOSR
.ad
.RS 11n
.rt
An attempt is made to write to a streams with insufficient streams memory
resources available in the system.
.RE

.sp
.ne 2
.mk
.na
.B ENXIO
.ad
.RS 11n
.rt
A hangup occurred on the stream being written to.
.RE

.sp
.ne 2
.mk
.na
.B EPIPE
.ad
.RS 11n
.rt
An attempt is made to write to a pipe or a
.B FIFO
that is not open for
reading by any process, or that has only one end open (or to a file
descriptor created by \fBsocket\fR(3SOCKET), using type \fBSOCK_STREAM\fR
that is no longer connected to a peer endpoint). A
.B SIGPIPE
signal will
also be sent to the thread. The process dies unless special provisions were
taken to catch or ignore the signal.
.RE

.sp
.ne 2
.mk
.na
.B ERANGE
.ad
.RS 11n
.rt
The transfer request size was outside the range supported by the streams
file associated with
.IR fildes .
.RE

.sp
.LP
The
.B write()
and
.B pwrite()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The
.I buf
argument points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I nbyte
argument overflowed an
.BR ssize_t .
.RE

.sp
.LP
The
.B pwrite()
function fails and the file pointer remains unchanged
if:
.sp
.ne 2
.mk
.na
.B ESPIPE
.ad
.RS 10n
.rt
The
.I fildes
argument is associated with a pipe or FIFO.
.RE

.sp
.LP
The
.B write()
and
.B writev()
functions may fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The stream or multiplexer referenced by
.I fildes
is linked (directly or
indirectly) downstream from a multiplexer.
.RE

.sp
.ne 2
.mk
.na
.B ENXIO
.ad
.RS 10n
.rt
A request was made of a non-existent device, or the request was outside the
capabilities of the device.
.RE

.sp
.ne 2
.mk
.na
.B ENXIO
.ad
.RS 10n
.rt
A hangup occurred on the stream being written to.
.RE

.sp
.LP
A write to a streams file may fail if an error message has been received at
the stream head.  In this case,
.B errno
is set to the value included in
the error message.
.sp
.LP
The
.B writev()
function may fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I iovcnt
argument was less than or equal to 0 or greater than
{\fBIOV_MAX\fR}; one of the \fBiov_len\fR values in the \fIiov\fR array was
negative; or the sum of the
.B iov_len
values in the
.I iov
array
overflowed an
.BR ssize_t .
.RE

.SH USAGE
.sp
.LP
The
.B pwrite()
function has a transitional interface for 64-bit file
offsets. See
.BR lf64 (5).
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-Level\fBwrite()\fR is Async-Signal-Safe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
.BR Intro (2),
.BR chmod (2),
.BR creat (2),
.BR dup (2),
.BR fcntl (2),
.BR getrlimit (2),
.BR ioctl (2),
.BR lseek (2),
.BR open (2),
.BR pipe (2),
.BR ulimit (2),
.BR send (3SOCKET),
.BR socket (3SOCKET),
.BR attributes (5),
.BR lf64 (5),
.BR standards (5),
.BR streamio (7I)
