'\" te
.\" Copyright 1989 AT&T.  Copyright (c) 2005, Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH sigprocmask 2 "23 Mar 2005" "SunOS 5.11" "System Calls"
.SH NAME
sigprocmask \- change or examine caller's signal mask
.SH SYNOPSIS
.LP
.nf
#include <signal.h>

\fBint\fR \fBsigprocmask\fR(\fBint\fR \fIhow\fR, \fBconst sigset_t *restrict\fR \fIset\fR,
     \fBsigset_t *restrict\fR \fIoset\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B sigprocmask()
function is used to examine and/or change the
caller's signal mask. If the value is
.BR SIG_BLOCK ,
the set pointed to
by the
.I set
argument is added to the current signal mask. If the value
is
.BR SIG_UNBLOCK ,
the set pointed by the
.I set
argument is removed
from the current signal mask. If the value is
.BR SIG_SETMASK ,
the
current signal mask is replaced by the set pointed to by the
.IR set
argument. If the
.I oset
argument is not
.IR NULL ,
the previous mask
is stored in the space pointed to by
.IR oset .
If the value of the
.I set
argument is
.IR NULL ,
the value
.I how
is not significant
and the caller's signal mask is unchanged; thus, the call can be used to
inquire about currently blocked signals. If the
.I set
or
.IR oset
argument points to an invalid address, the behavior is undefined and
.B errno
may be set to
.BR EFAULT .
.sp
.LP
If there are any pending unblocked signals after the call to
.BR sigprocmask() ,
at least one of those signals will be delivered before
the call to
.B sigprocmask()
returns.
.sp
.LP
It is not possible to block signals that cannot be caught or ignored (see
.BR sigaction (2)).
It is also not possible to block or unblock SIGCANCEL,
as SIGCANCEL is reserved for the implementation of POSIX thread cancellation
(see \fBpthread_cancel\fR(3C) and
.BR cancellation (5)).
This restriction
is silently enforced by the standard C library.
.sp
.LP
If
.B sigprocmask()
fails, the caller's signal mask is not changed.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B 0
is returned. Otherwise,
.B \(mi1
is
returned and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B sigprocmask()
function will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The value of the
.I how
argument is not equal to one of the defined
values.
.RE

.sp
.LP
The
.B sigprocmask()
function may fail if:
.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The
.I set
or
.I oset
argument points to an illegal address.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelAsync-Signal-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR sigaction (2),
.BR pthread_cancel (3C),
.BR pthread_sigmask (3C),
.BR signal (3C),
.BR signal.h (3HEAD),
.BR sigsetops (3C),
.BR attributes (5),
.BR cancellation (5)
.SH NOTES
.sp
.LP
The call to
.B sigprocmask()
affects only the calling thread's signal
mask. It is identical to a call to
.BR pthread_sigmask (3C).
.sp
.LP
Signals that are generated synchronously should not be masked. If such a
signal is blocked and delivered, the receiving process is killed.
