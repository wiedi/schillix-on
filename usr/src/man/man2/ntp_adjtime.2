'\" te
.\" Copyright (c) David L. Mills 1992, 1993, 1994, 1995, 1996, 1997
.\" Portions Copyright (c) 2003, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ntp_adjtime 2 "21 May 2009" "SunOS 5.11" "System Calls"
.SH NAME
ntp_adjtime \- adjust local clock parameters
.SH SYNOPSIS
.LP
.nf
#include <sys/timex.h>

\fBint\fR \fBntp_adjtime\fR(\fBstruct timex *\fItptr\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B ntp_adjtime()
function adjusts the parameters used to discipline
the local clock, according to the values in the struct
.B timex
pointed
to by
.IR tptr .
Before returning, it fills in the structure with the most
recent values kept in the kernel.
.sp
.LP
The adjustment is effected in part by speeding up or slowing down the
clock, as necessary, and in part by phase-locking onto a once-per second
pulse (PPS) provided by a driver, if available.
.sp
.in +2
.nf
struct timex {
    uint32_t modes;        /* clock mode bits (w) */
    int32_t  offset;       /* time offset (us) (rw) */
    int32_t  freq;         /* frequency offset (scaled ppm) (rw) */
    int32_t  maxerror;     /* maximum error (us) (rw) */
    int32_t  esterror;     /* estimated error (us) (rw) */
    int32_t  status;       /* clock status bits (rw) */
    int32_t  constant;     /* pll time constant (rw) */
    int32_t  precision;    /* clock precision (us) (r) */
    int32_t  tolerance;    /* clock frequency tolerance
                              (scaled ppm) (r) */
    int32_t  ppsfreq;      /* pps frequency (scaled ppm) (r) */
    int32_t  jitter;       /* pps jitter (us) (r) */
    int32_t  shift;        /* interval duration (s) (shift) (r) */
    int32_t  stabil;       /* pps stability (scaled ppm) (r) */
    int32_t  jitcnt;       /* jitter limit exceeded (r) */
    int32_t  calcnt;       /* calibration intervals (r) */
    int32_t  errcnt;       /* calibration errors (r) */
    int32_t  stbcnt;       /* stability limit exceeded (r) */
};
.fi
.in -2

.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B ntp_adjtime()
returns the current clock
state (see <\fBsys/timex.h\fR>). Otherwise, it returns \fB\(mi1\fR and sets
.B errno
to indicate the error.
.SH ERRORS
.sp
.LP
The
.B ntp_adjtime()
function will fail if:
.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The
.I tptr
argument is an invalid pointer.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.B constant
member of the structure pointed to by
.I tptr
is less
than 0 or greater than 30.
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 10n
.rt
The
.RB { PRIV_SYS_TIME }
privilege is not asserted in the effective set of
the calling process.
.RE

.SH SEE ALSO
.sp
.LP
.BR ntp_gettime (2),
.BR privileges (5)
.sp
.LP
See the
.B ntpd
man page, delivered in the
.B SUNWntpu
package (not a
SunOS man page).
