'\" te
.\" Copyright (c) 2001, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH _lwp_cond_wait 2 "13 Apr 2001" "SunOS 5.11" "System Calls"
.SH NAME
_lwp_cond_wait, _lwp_cond_timedwait, _lwp_cond_reltimedwait \- wait on a
condition variable
.SH SYNOPSIS
.LP
.nf
#include <sys/lwp.h>

\fBint\fR \fB_lwp_cond_wait\fR(\fBlwp_cond_t *\fIcvp\fR, \fBlwp_mutex_t *\fImp\fR);
.fi

.LP
.nf
\fBint\fR \fB_lwp_cond_timedwait\fR(\fBlwp_cond_t *\fIcvp\fR, \fBlwp_mutex_t *\fImp\fR,
     \fBtimestruc_t *\fIabstime\fR);
.fi

.LP
.nf
\fBint\fR \fB_lwp_cond_reltimedwait\fR(\fBlwp_cond_t *\fIcvp\fR, \fBlwp_mutex_t *\fImp\fR,
     \fBtimestruc_t *\fIreltime\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions are used to wait for the occurrence of a condition
represented by an LWP condition variable. LWP condition variables must be
initialized to 0 before use.
.sp
.LP
The
.B _lwp_cond_wait()
function atomically releases the LWP mutex
pointed to by
.I mp
and causes the calling LWP to block on the LWP
condition variable pointed to by
.IR cvp .
The blocked LWP may be awakened
by
.BR _lwp_cond_signal (2),
.BR _lwp_cond_broadcast (2),
or when
interrupted by delivery of a signal. Any change in value of a condition
associated with the condition variable cannot be inferred by the return of
.B _lwp_cond_wait()
and any such condition must be re-evaluated.
.sp
.LP
The
.B _lwp_cond_timedwait()
function is similar to
.BR _lwp_cond_wait() ,
except that the calling LWP will not block past the
time of day specified by
.IR abstime .
If the time of day becomes greater
than
.IR abstime ,
.B _lwp_cond_timedwait()
returns with the error code
.BR ETIME .
.sp
.LP
The
.B _lwp_cond_reltimedwait()
function is similar to
.BR _lwp_cond_wait() ,
except that the calling LWP will not block past the
relative time specified by
.IR reltime .
If the time of day becomes greater
than the starting time of day plus
.IR reltime ,
.B _lwp_cond_reltimedwait()
returns with the error code
.BR ETIME .
.sp
.LP
The
.BR _lwp_cond_wait() ,
.BR _lwp_cond_timedwait() ,
and
.B _lwp_cond_reltimedwait()
functions always return with the mutex locked
and owned by the calling lightweight process.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B 0
is returned. A non-zero value indicates
an error.
.SH ERRORS
.sp
.LP
If any of the following conditions are detected,
.BR _lwp_cond_wait() ,
.BR _lwp_cond_timedwait() ,
and
.B _lwp_cond_reltimedwait()
fail and
return the corresponding value:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I cvp
argument points to an invalid LWP condition variable or the
.I mp
argument points to an invalid LWP mutex.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The
.IR mp ,
.IR cvp ,
or
.I abstime
argument points to an illegal
address.
.RE

.sp
.LP
If any of the following conditions occur,
.BR _lwp_cond_wait() ,
.BR _lwp_cond_timedwait() ,
and
.B _lwp_cond_reltimedwait()
fail and
return the corresponding value:
.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 9n
.rt
The call was interrupted by a signal or
.BR fork (2).
.RE

.sp
.LP
If any of the following conditions occur,
.B _lwp_cond_timedwait()
and
.B _lwp_cond_reltimedwait()
fail and return the corresponding value:
.sp
.ne 2
.mk
.na
.B ETIME
.ad
.RS 9n
.rt
The time specified in\fIabstime\fR or
.I reltime
has passed.
.RE

.SH EXAMPLES
.LP
.B Example 1
Use the
.B _lwp_cond_wait()
function in a loop testing
some condition.
.sp
.LP
The
.B _lwp_cond_wait()
function is normally used in a loop testing some
condition, as follows:

.sp
.in +2
.nf
lwp_mutex_t m;
lwp_cond_t cv;
int cond;
(void) _lwp_mutex_lock(&m);
while (cond == FALSE) {
        (void) _lwp_cond_wait(&cv, &m);
}
(void) _lwp_mutex_unlock(&m);
.fi
.in -2

.LP
.B Example 2
Use the
.B _lwp_cond_timedwait()
function in a loop
testing some condition.
.sp
.LP
The
.B _lwp_cond_timedwait()
function is also normally used in a loop
testing some condition. It uses an absolute timeout value as follows:

.sp
.in +2
.nf
timestruc_t to;
lwp_mutex_t m;
lwp_cond_t cv;
int cond, err;
(void) _lwp_mutex_lock(&m);
to.tv_sec = time(NULL) + TIMEOUT;
to.tv_nsec = 0;
while (cond == FALSE) {
        err = _lwp_cond_timedwait(&cv, &m, &to);
        if (err == ETIME) {
                /* timeout, do something */
                break;
        SENDwhom}
}
(void) _lwp_mutex_unlock(&m);
.fi
.in -2

.sp
.LP
This example sets a bound on the total wait time even though the
.B _lwp_cond_timedwait()
may return several times due to the condition
being signalled or the wait being interrupted.

.LP
.B Example 3
Use the
.B _lwp_cond_reltimedwait()
function in a loop
testing some condition.
.sp
.LP
The
.B _lwp_cond_reltimedwait()
function is also normally used in a loop
testing some condition. It uses a relative timeout value as follows:

.sp
.in +2
.nf
timestruc_t to;
lwp_mutex_t m;
lwp_cond_t cv;
int cond, err;
(void) _lwp_mutex_lock(&m);
while (cond == FALSE) {
        to.tv_sec = TIMEOUT;
        to.tv_nsec = 0;
        err = _lwp_cond_reltimedwait(&cv, &m, &to);
        if (err == ETIME) {
                /* timeout, do something */
                break;
        }
}
(void) _lwp_mutex_unlock(&m);
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR _lwp_cond_broadcast (2),
.BR _lwp_cond_signal (2),
.BR _lwp_kill (2),
.BR _lwp_mutex_lock (2),
.BR fork (2),
.BR kill (2)

