'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH shmop 2 "10 Mar 2008" "SunOS 5.11" "System Calls"
.SH NAME
shmop, shmat, shmdt \- shared memory operations
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/shm.h>

\fBvoid *\fBshmat\fR(\fBint\fR \fIshmid\fR, \fBconst void *\fIshmaddr\fR, \fBint\fR \fIshmflg\fR);
.fi

.LP
.nf
\fBint\fR \fBshmdt\fR(\fBchar *\fIshmaddr\fR);
.fi

.SS "Standard conforming"
.LP
.nf
\fBint\fR \fBshmdt\fR(\fBconst void *\fIshmaddr\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B shmat()
function attaches the shared memory segment associated
with the shared memory identifier specified by
.I shmid
to the data
segment of the calling process.
.sp
.LP
The permission required for a shared memory control operation is given as
.RI { token "}, where " token " is the type of permission needed. The types"
of permission are interpreted as follows:
.sp
.in +2
.nf
00400    READ by user
00200    WRITE by user
00040    READ by group
00020    WRITE by group
00004    READ by others
00002    WRITE by others
.fi
.in -2

.sp
.LP
See the
.I "Shared Memory Operation Permissions"
section of
.BR Intro (2)
for more information.
.sp
.LP
For shared memory segments created with the
.B SHM_SHARE_MMU
or
.B SHM_PAGEABLE
flags, the default protections cannot be changed so as to
prevent a single process from affecting other processes sharing the same
shared segment.
.sp
.LP
When
.RI ( shmflg\fB&SHM_SHARE_MMU )
is true, virtual memory resources
in addition to shared memory itself are shared among processes that use the
same shared memory.
.sp
.LP
When
.RI ( shmflg\fB&SHM_PAGEABLE )
is true, virtual memory resources
are shared and the dynamic shared memory (DISM) framework is created. The
dynamic shared memory can be resized dynamically within the specified size
in
.BR shmget (2).
The DISM shared memory is pageable unless it is
locked.
.sp
.LP
The shared memory segment is attached to the data segment of the calling
process at the address specified based on one of the  following criteria:
.RS +4
.TP
.ie t \(bu
.el o
If
.I shmaddr
is equal to
.BR "(void *) 0" ,
the segment is attached to
the first available address as selected by the system.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.I shmaddr
is equal to
.B "(void *)"
.B 0
and (
.IB shmflg &SHM_SHARE_MMU )
or (\fIshmflg\fB&SHM_PAGEABLE\fR)
is true, then the segment is attached to the first available suitably
aligned address. When
.RI ( shmflg\fB&SHM_SHARE_MMU )
or
.RI ( shmflg\c
.BR &SHM_PAGEABLE )
is set, however, the permission given by
.B shmget()
determines whether the segment is attached for reading or
reading and writing.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.I shmaddr
is not equal to
.B "(void *) 0"
and
.RI ( shmflg\c
.BR &SHM_RND )
is true, the segment is attached to the address
given by (\fIshmaddr\fB-\fR  (\fIshmaddr\fR modulus \fBSHMLBA\fR)).
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.I shmaddr
is not equal to
.B "(void *) 0"
and
.RI ( shmflg\c
.BR &SHM_RND )
is false, the segment is attached to the
address given by
.IR shmaddr .
.RE
.RS +4
.TP
.ie t \(bu
.el o
The segment is attached for reading if
.RI ( shmflg\fB&SHM_RDONLY )
is
true
.BR {READ} ,
otherwise it is attached for reading and writing
.BR {READ/WRITE} .
.RE
.sp
.LP
The
.B shmdt()
function detaches from the calling process's data segment
the shared memory segment located at the address specified by
.IR shmaddr .
If the application is standard-conforming (see
.BR standards (5)),
the
.I shmaddr
argument is of type
.BR "const void *" .
Otherwise it is of
type
.BR "char *" .
.sp
.LP
Shared memory segments must be explicitly removed after the last reference
to them has been removed.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B shmat()
returns the data segment start
address of the attached shared memory segment;
.B shmdt()
returns
.BR 0 .
Otherwise,
.B \(mi1
is returned, the shared memory segment is
not attached, and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B shmat()
function will fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 10n
.rt
Operation permission is denied to the calling process (see
.BR Intro (2)).
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I shmid
argument is not a valid shared memory identifier.
.sp
The
.I shmaddr
argument is not equal to 0, and the value of
(\fIshmaddr\fB-\fR (\fIshmaddr\fR modulus
.BR SHMLBA ))
is an illegal
address.
.sp
The
.I shmaddr
argument is not equal to 0, is an illegal address, and
(\fIshmflg\fB&SHM_RND\fR) is false.
.sp
The
.I shmaddr
argument is not equal to 0, is not properly aligned, and
(\fIshmfg\fB&SHM_SHARE_MMU\fR) is true.
.sp
.B SHM_SHARE_MMU
is not supported in certain architectures.
.sp
Both (\fIshmflg\fB&SHM_SHARE_MMU\fR) and
\fI(shmflg\fB&SHM_PAGEABLE\fR) are true.
.sp
(\fIshmflg\fB&SHM_SHARE_MMU\fR) is true and the shared memory segment
specified by
.B shmid()
had previously been attached by a call to
\fBshmat()\fR in which (\fIshmflg\fB&SHM_PAGEABLE\fR) was true.
.sp
(\fIshmflg\fB&SHM_PAGEABLE\fR) is true and the shared memory segment
specified by
.B shmid()
had previously been attached by a call to
\fBshmat()\fR in which (\fIshmflg\fB&SHM_SHARE_MMU\fR) was true.
.RE

.sp
.ne 2
.mk
.na
.B EMFILE
.ad
.RS 10n
.rt
The number of shared memory segments attached to the calling process would
exceed the system-imposed limit.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
The available data space  is not large enough to accommodate the shared
memory segment.
.RE

.sp
.LP
The
.B shmdt()
function will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I shmaddr
argument is not the data segment start address of a
shared memory segment.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
(\fIshmflg\fB&SHM_SHARE_MMU\fR) is true and attaching to the shared
memory segment would exceed a limit or resource control on locked memory.
.RE

.SH WARNINGS
.sp
.LP
Using a fixed value for the
.I shmaddr
argument can adversely affect
performance on certain platforms due to D-cache aliasing.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelAsync-Signal-Safe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
.BR Intro (2),
.BR exec (2),
.BR exit (2),
.BR fork (2),
.BR shmctl (2),
.BR shmget (2),
.BR attributes (5),
.BR standards (5)
