'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T.
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved. The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.TH vfork 2 "13 Dec 2006" "SunOS 5.11" "System Calls"
.SH NAME
vfork, vforkx \- spawn new process in a virtual memory efficient way
.SH SYNOPSIS
.LP
.nf
#include <unistd.h>

\fBpid_t\fR \fBvfork\fR(\fBvoid\fR);
.fi

.LP
.nf
#include <sys/fork.h>

\fBpid_t\fR \fBvforkx\fR(\fBint\fR \fIflags\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.BR vfork() " and "
.B vforkx()
functions create a new process without
fully copying the address space of the old process. These functions are
useful in instances where the purpose of a
.BR fork (2)
operation is to
create a new system context for an
.B execve()
operation (see
.BR exec (2)).
.sp
.LP
Unlike with the
.B fork()
function, the child process borrows the
parent's memory and thread of control until a call to
.B execve()
or an
exit (either abnormally or by a call to
.B _exit()
(see
.BR exit (2)).
Any modification made during this time to any part of memory in the child
process is reflected in the parent process on return from
.B vfork()
or
.BR vforkx() .
The parent process is suspended while the child is using its
resources.
.sp
.LP
In a multithreaded application, 
.BR vfork() " and "
.B vforkx()
borrow
only the thread of control that called
.BR vfork() " or "
.B vforkx()
in the
parent; that is, the child contains only one thread. The use of
.B vfork()
or
.B vforkx()
in multithreaded applications, however, is unsafe due to
race conditions that can cause the child process to become deadlocked and
consequently block both the child and parent process from execution
indefinitely.
.sp
.LP
The
.BR vfork() " and "
.B vforkx()
functions can normally be used the same
way as
.B fork()
and
.BR forkx() ,
respectively. The calling procedure,
however, should not return while running in the child's context, since the
eventual return from
.BR vfork() " or "
.B vforkx()
in the parent would be
to a stack frame that no longer exists. The
.B _exit()
function should be
used in favor of
.BR exit (3C)
if unable to perform an \fBexecve()\fR
operation, since
.B exit()
will invoke all functions registered by
.BR atexit (3C)
and will flush and close standard I/O channels, thereby
corrupting the parent process's standard I/O data structures. Care must be
taken in the child process not to modify any global or local data that
affects the behavior of the parent process on return from
.B vfork()
or
.BR vforkx() ,
unless such an effect is intentional.
.sp
.LP
Unlike
.B fork()
and
.BR forkx() ,
fork handlers are not run when
.B vfork()
and
.B vforkx()
are called.
.sp
.LP
The
.BR vfork() " and "
.B vforkx()
functions are deprecated. Their sole
legitimate use as a prelude to an immediate call to a function from the
.B exec
family can be achieved safely by
.BR posix_spawn "(3C) or"
.BR posix_spawnp (3C).
.SS "Fork Extensions"
.sp
.LP
The
.BR vforkx() " function accepts a "
.I flags
argument consisting of a
bitwise inclusive-OR of zero or more of the following flags, which are
defined in the header
.BR <sys/fork.h> :
.br
.in +2
.B FORK_NOSIGCHLD
.in -2
.br
.in +2
.B FORK_WAITPID
.in -2
.sp
.LP
See
.BR fork (2)
for descriptions of these flags. If the
.I flags
.RB "argument is 0, " vforkx() " is identical to " vfork() .
.SH RETURN VALUES
.sp
.LP
Upon successful completion, \fBvfork()\fR and
.B vforkx()
return  \fB0\fR
to the child process and returns the process ID of the child process to the
parent process. Otherwise, \fB\(mi1\fR is returned to the parent process, no
child process is created, and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.BR vfork() " and "
.B vforkx()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
The system-imposed limit on the total number of processes under execution
(either system-quality or by a single user) would be exceeded. This limit is
determined when the system is generated.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
There is insufficient swap space for the new process.
.RE

.sp
.LP
The
.B vforkx()
function will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I flags
argument is invalid.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityObsolete
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR exec (2),
.BR exit (2),
.BR fork (2),
.BR ioctl (2),
.BR atexit (3C),
.BR exit (3C),
.BR posix_spawn (3C),
.BR posix_spawnp (3C),
.BR signal.h (3HEAD),
.BR wait (3C),
.BR attributes (5),
.BR standards (5)
.SH NOTES
.sp
.LP
To avoid a possible deadlock situation, processes that are children in the
middle of a
.BR vfork() " or "
.B vforkx()
are never sent
.B SIGTTOU
or
.B SIGTTIN
signals; rather, output or ioctls are allowed and input
attempts result in an
.B EOF
indication.
.sp
.LP
To forestall parent memory corruption due to race conditions with signal
handling,
.BR vfork() " and "
.B vforkx()
treat signal handlers in the child
process in the same manner as the
.BR exec (2)
functions: signals set to be
caught by the parent process are set to the default action
.RB ( SIG_DFL )
in
the child process (see
.BR signal.h (3HEAD)).
Any attempt to set a signal
handler in the child before
.B execve()
to anything other than
.B SIG_DFL
or
.B SIG_IGN
is disallowed and results in setting the
handler to
.BR SIG_DFL .
.sp
.LP
.RB "On some systems, the implementation of " vfork() " and " vforkx() 
cause the parent to inherit register values from the child. This can create
problems for certain optimizing compilers if
.B <unistd.h>
is not included
in the source calling
.BR vfork() " or if "
.B <sys/fork.h>
is not included
in the source calling
.BR vforkx() .
