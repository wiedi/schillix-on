'\" te
.\" Copyright 1989 AT&T  Copyright (c) 1997, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH swapctl 2 "25 Sep 1997" "SunOS 5.11" "System Calls"
.SH NAME
swapctl \- manage swap space
.SH SYNOPSIS
.LP
.nf
#include <sys/stat.h>
#include <sys/swap.h>

\fBint\fR \fBswapctl\fR(\fBint\fR \fIcmd\fR, \fBvoid *\fIarg\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B swapctl()
function adds,  deletes, or returns information about
swap resources.
.I cmd
specifies one of the following options contained
in <\fBsys/swap.h\fR>:
.sp
.in +2
.nf
SC_ADD        /* add a resource for swapping */
SC_LIST       /* list the resources for swapping */
SC_REMOVE     /* remove a resource for swapping */
SC_GETNSWP    /* return number of swap resources */
.fi
.in -2

.sp
.LP
When
.B SC_ADD
or
.B SC_REMOVE
is specified,
.I arg
is a pointer
to a
.B swapres
structure containing the following members:
.sp
.in +2
.nf
char    *sr_name;    /* pathname of resource */
off_t   sr_start;    /* offset to start of swap area */
off_t   sr_length;   /* length of swap area */
.fi
.in -2

.sp
.LP
The
.B sr_start
and
.B sr_length
members are specified in 512-byte
blocks. A swap resource can only be removed by specifying the same values
for the
.B sr_start
and
.B sr_length
members as were specified when it
was added. Swap resources need not be removed in the order in which they
were added.
.sp
.LP
When
.B SC_LIST
is specified,
.I arg
is a pointer to a
\fBswaptable\fR structure containing the following members:
.sp
.in +2
.nf
int             swt_n;       /* number of swapents following */
struct swapent  swt_ent[];   /* array of swt_n swapents */
.fi
.in -2

.sp
.LP
A
.B swapent
structure contains the following members:
.sp
.in +2
.nf
char   *ste_path;    /* name of the swap file */
off_t  ste_start;    /* starting block for swapping */
off_t  ste_length;   /* length of swap area */
long   ste_pages;    /* number of pages for swapping */
long   ste_free;     /* number of ste_pages free */
long   ste_flags;    /* ST_INDEL bit set if swap file */
                     /* is now being deleted */
.fi
.in -2

.sp
.LP
The
.B SC_LIST
function causes
.B swapctl()
to return at most
\fBswt_n\fR entries. The return value of \fBswapctl()\fR is the number
actually returned. The
.B ST_INDEL
bit is turned on in \fBste_flags\fR if
the swap file is in the process of being deleted.
.sp
.LP
When
.B SC_GETNSWP
is specified,
.B swapctl()
returns as its value
the number of swap resources in use.
.I arg
is ignored for this
operation.
.sp
.LP
The
.B SC_ADD
and
.B SC_REMOVE
functions will fail if calling process
does not have appropriate privileges.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, the function
.B swapctl()
returns a value of
\fB0\fR for \fBSC_ADD\fR or
.BR SC_REMOVE ,
the number of
.BR struct
\fBswapent\fR entries actually returned for
.BR SC_LIST ,
or the number of
swap resources in use for
.BR SC_GETNSWP .
Upon failure, the function
\fBswapctl()\fR returns a value  of \fB\(mi1\fR and sets \fBerrno\fR to
indicate an error.
.SH ERRORS
.sp
.LP
Under the following conditions, the function
.B swapctl()
fails and sets
\fBerrno\fR to:
.sp
.ne 2
.mk
.na
.B EEXIST
.ad
.RS 16n
.rt
Part of the range specified by
.B sr_start
and
.B sr_length
is
already being used for swapping on the specified resource
.RB ( SC_ADD ).
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 16n
.rt
Either
.IR arg ,
.BR sr_name ,
or
.B ste_path
points to an illegal
address.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 16n
.rt
The specified function value is not valid, the path specified is not a swap
resource
.RB ( SC_REMOVE ),
part of the range specified by
.BR sr_start
and
.B sr_length
lies outside the resource specified
.RB ( SC_ADD ),
or
the specified swap area is less than one page
.RB ( SC_ADD ).
.RE

.sp
.ne 2
.mk
.na
.B EISDIR
.ad
.RS 16n
.rt
The path specified for
.B SC_ADD
is a directory.
.RE

.sp
.ne 2
.mk
.na
.B ELOOP
.ad
.RS 16n
.rt
Too many symbolic links were encountered in translating the pathname
provided to
.B SC_ADD
or
.BR SC_REMOVE .
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
The length of a component of the path specified for
.B SC_ADD
or
\fBSC_REMOVE\fR exceeds \fBNAME_MAX\fR characters or the length of the path
exceeds
.B PATH_MAX
characters and
.B _POSIX_NO_TRUNC
is in effect.
.RE

.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 16n
.rt
The pathname specified for
.B SC_ADD
or
.B SC_REMOVE
does not
exist.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 16n
.rt
An insufficient number of
.B "struct swapent"
structures were
provided to
.BR SC_LIST ,
or there were insufficient system storage
resources available during an
.B SC_ADD
or
.BR SC_REMOVE ,
or the system
would not have enough swap space after an
.BR SC_REMOVE .
.RE

.sp
.ne 2
.mk
.na
.B ENOSYS
.ad
.RS 16n
.rt
The pathname specified for
.B SC_ADD
or
.B SC_REMOVE
is not a file or
block special device.
.RE

.sp
.ne 2
.mk
.na
.B ENOTDIR
.ad
.RS 16n
.rt
Pathname provided to
.B SC_ADD
or
.B SC_REMOVE
contained a component
in the path prefix that was not a directory.
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 16n
.rt
The {\fBPRIV_SYS_MOUNT\fR} was not asserted in the effective set of the
calling process.
.RE

.sp
.ne 2
.mk
.na
.B EROFS
.ad
.RS 16n
.rt
The pathname specified for
.B SC_ADD
is a read-only file system.
.RE

.sp
.LP
Additionally, the
.B swapctl()
function will fail for 32-bit interfaces
if:
.sp
.ne 2
.mk
.na
.B EOVERFLOW
.ad
.RS 13n
.rt
The amount of swap space configured on the machine is too large to be
represented by a 32-bit quantity.
.RE

.SH EXAMPLES
.LP
\fBExample 1\fR The usage of the \fBSC_GETNSWP\fR and \fBSC_LIST\fR
commands.
.sp
.LP
The following example demonstrates the usage of the
.B SC_GETNSWP
and
\fBSC_LIST\fR commands.

.sp
.in +2
.nf
#include <sys/stat.h>
#include <sys/swap.h>
#include <stdio.h>

#define MAXSTRSIZE 80

main(argc, argv)
    int            argc;
    char           *argv[];
{
    swaptbl_t      *s;
    int            i, n, num;
    char           *strtab;    /* string table for path names */

again:
    if ((num = swapctl(SC_GETNSWP, 0)) == -1) {
        perror("swapctl: GETNSWP");
        exit(1);
    }
    if (num == 0) {
        fprintf(stderr, "No Swap Devices Configured\en");
        exit(2);
    }
    /* allocate swaptable for num+1 entries */
    if ((s = (swaptbl_t *)
        malloc(num * sizeof(swapent_t) +
            sizeof(struct swaptable))) ==
        (void *) 0) {
        fprintf(stderr, "Malloc Failed\en");
        exit(3);
    }
    /* allocate num+1 string holders */
    if ((strtab = (char *)
        malloc((num + 1) * MAXSTRSIZE)) == (void *) 0) {
        fprintf(stderr, "Malloc Failed\en");
        exit(3);
    }
    /* initialize string pointers */
    for (i = 0; i < (num + 1); i++) {
        s->swt_ent[i].ste_path = strtab + (i * MAXSTRSIZE);
    }

    s->swt_n = num + 1;
    if ((n = swapctl(SC_LIST, s)) < 0) {
        perror("swapctl");
        exit(1);
    }
    if (n > num) {        /* more were added */
        free(s);
        free(strtab);
        goto again;
    }
    for (i = 0; i < n; i++)
        printf("%s %ld\en",
            s->swt_ent[i].ste_path, s->swt_ent[i].ste_pages);
}
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR privileges (5)
