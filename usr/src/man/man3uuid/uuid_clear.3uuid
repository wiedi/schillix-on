'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH uuid_clear 3UUID "16 Jan 2006" "SunOS 5.11" "Universally Unique Identifier Library Functions"
.SH NAME
uuid_clear, uuid_compare, uuid_copy, uuid_generate, uuid_generate_random,
uuid_generate_time, uuid_is_null, uuid_parse, uuid_time, uuid_unparse \-
universally unique identifier (UUID) operations
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag \&.\|.\|.\fR ] \fIfile\fR\&.\|.\|. \fB-luuid\fR [ \fIlibrary \&.\|.\|.\fR ]
#include <uuid/uuid.h>

\fBvoid\fR \fBuuid_clear\fR(\fBuuid_t\fR \fIuu\fR);
.fi

.LP
.nf
\fBint\fR \fBuuid_compare\fR(\fBuuid_t\fR \fIuu1\fR, \fBuuid_t\fR \fIuu2\fR);
.fi

.LP
.nf
\fBvoid\fR \fBuuid_copy\fR(\fBuuid_t\fR \fIdst\fR, \fBuuid_t\fR \fIsrc\fR);
.fi

.LP
.nf
\fBvoid\fR \fBuuid_generate\fR(\fBuuid_t\fR \fIout\fR);
.fi

.LP
.nf
\fBvoid\fR \fBuuid_generate_random\fR(\fBuuid_t\fR \fIout\fR);
.fi

.LP
.nf
\fBvoid\fR \fBuuid_generate_time\fR(\fBuuid_t\fR \fIout\fR);
.fi

.LP
.nf
\fBint\fR \fBuuid_is_null\fR(\fBuuid_t\fR \fIuu\fR);
.fi

.LP
.nf
\fBint\fR \fBuuid_parse\fR(\fBchar *\fIin\fR, \fBuuid_t\fR \fIuu\fR);
.fi

.LP
.nf
\fBtime_t\fR \fBuuid_time\fR(\fBuuid_t\fR \fIuu\fR, \fBstruct timeval *\fIret_tv\fR);
.fi

.LP
.nf
\fBvoid\fR \fBuuid_unparse\fR(\fBuuid_t\fR \fIuu\fR, \fBchar *\fIout\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B uuid_clear()
function sets the value of the specified universally
unique identifier (UUID) variable
.I uu
to the
.I NULL
value.
.sp
.LP
The
.B uuid_compare()
function compares the two specified UUID variables
.I uu1
and
.I uu2
to each other. It returns an integer less than,
equal to, or greater than zero if
.I uu1
is found to be, respectively,
lexicographically less than, equal, or greater than
.IR uu2 .
.sp
.LP
The
.B uuid_copy()
function copies the UUID variable
.I src
to
.IR dst .
.sp
.LP
The
.B uuid_generate()
function creates a new UUID that is generated
based on high-quality randomness from
.BR /dev/urandom ,
if available. If
.B /dev/urandom
is not available,
.B uuid_generate()
calls
.BR uuid_generate_time() .
Because the use of this algorithm provides
information about when and where the UUID was generated, it could cause
privacy problems for some applications.
.sp
.LP
The
.B uuid_generate_random()
function produces a UUID with a random or
pseudo-randomly generated time and Ethernet MAC address that corresponds to
a DCE version 4 UUID.
.sp
.LP
The
.B uuid_generate_time()
function uses the current time and the local
Ethernet MAC address (if available, otherwise a MAC address is fabricated)
that corresponds to a DCE version 1 UUID. If the UUID is not guaranteed to
be unique, the multicast bit is set (the high-order bit of octet number
10).
.sp
.LP
The
.B uuid_is_null()
function compares the value of the specified UUID
variable
.I uu
to the
.I NULL
value. If the value is equal to the
.I NULL
UUID, 1 is returned. Otherwise 0 is returned.
.sp
.LP
The
.B uuid_parse()
function converts the UUID string specified by
.I in
to the internal
.B uuid_t
format. The input UUID is a string of
the form
.BR cefa7a9c-1dd2-11b2-8350-880020adbeef .
In
.BR printf (3C)
format, the string is "\fB%08x-%04x-%04x-%04x-%012x\fR", 36 bytes plus the
trailing null character. If the input string is parsed successfully, \fB0\fR
is returned and the UUID is stored in the location pointed to by
.IR uu .
Otherwise
.B -1
is returned.
.sp
.LP
The
.B uuid_time()
function extracts the time at which the specified
UUID
.I uu
was created. Since the UUID creation time is encoded within
the UUID, this function can reasonably be expected to extract the creation
time only for UUIDs created with the
.B uuid_generate_time()
function.
The time at which the UUID was created, in seconds since January 1, 1970 GMT
(the epoch), is returned (see
.BR time (2)).
The time at which the UUID was
created, in seconds and microseconds since the epoch is also stored in the
location pointed to by
.B ret_tv
(see \fBgettimeofday\fR(3C)).
.sp
.LP
The
.B uuid_unparse()
function converts the specified UUID
.I uu
from
the internal binary format to a string of the length defined in the
.B uuid.h
macro,
.BR UUID_PRINTABLE_STRING_LENGTH ,
which includes the
trailing null character. The resulting value is stored in the character
string pointed to by
.IR out .
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR inetd (1M),
.BR time (2),
.BR gettimeofday (3C),
.BR libuuid (3LIB),
.BR printf (3C),
.BR attributes (5)
