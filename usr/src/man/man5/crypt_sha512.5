'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH crypt_sha512 5 "8 May 2008" "SunOS 5.11" "Standards, Environments, and Macros"
.SH NAME
crypt_sha512 \- password hashing module using SHA-512 message hash
algorithm
.SH SYNOPSIS
.LP
.nf
\fB/usr/lib/security/$ISA/crypt_sha512.so\fR
.fi

.SH DESCRIPTION
.sp
.LP
The
.B crypt_sha512
module is a one-way password hashing module for use
with
.BR crypt "(3C) that uses the SHA-512 message hash algorithm. The"
algorithm identifier for
.BR crypt.conf (4)
and
.BR policy.conf (4)
is
.BR 6 .
.sp
.LP
This module is designed to make it difficult to crack passwords that use
brute force attacks based on high speed SHA-512 implementations that use
code inlining, unrolled loops, and table lookup.
.sp
.LP
The maximum password length for
.B crypt_sha512
is 255 characters.
.sp
.LP
The following options can be passed to the module by means of
.BR crypt.conf (4):
.sp
.ne 2
.mk
.na
\fBrounds=\fI<positive_number>\fR
.ad
.sp .6
.RS 4n
Specifies the number of rounds of SHA-512 to use in generation of the salt;
the default number of rounds is 5000. Negative values have no effect and are
ignored. The minimum number of rounds cannot be below 1000.
.sp
The number of additional rounds is stored in the salt string returned by
.BR crypt_gensalt (3C).
For example:
.sp
.in +2
.nf
$6,rounds=6000$nlxmTTpz$
.fi
.in -2

When \fBcrypt_gensalt\fR(3C) is being used to generate a new salt, if the
number of additional rounds configured in
.BR crypt.conf (4)
is greater
than that in the old salt, the value from
.BR crypt.conf (4)
is used
instead. This allows for migration to stronger (but more time-consuming)
salts on password change.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR passwd (1),
.BR crypt (3C),
.BR crypt_genhash_impl (3C),
.BR crypt_gensalt (3C),
.BR crypt_gensalt_impl (3C),
.BR getpassphrase (3C),
\fBcrypt.conf\fR(4), \fBpasswd\fR(4),
\fBpolicy.conf\fR(4), \fBattributes\fR(5)
