'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH acl 5 "29 Sep 2008" "SunOS 5.11" "Standards, Environments, and Macros"
.SH NAME
acl \- Access Control Lists
.SH DESCRIPTION
.sp
.LP
Access control lists (ACLs) are discretionary access control mechanisms
that grant and deny access to files and directories. Two different ACL
models are supported in the Solaris release:POSIX-draft ACLs and NFSv4 ACLs.

.sp
.LP
The older, POSIX-draft model is supported by the UFS file system. This
model is based on a withdrawn ACL POSIX specification that was never
standardized. It was subsequently withdrawn by the POSIX committee.
.sp
.LP
The other model is based on the standards of the NFSv4 working group and is
an approved standard from the Internet Engineering Task Force (IETF). The
ZFS file system uses the NFSv4 model, and provides richer semantics and
finer grained permission capabilities than the POSIX-draft model.
.SS "\fBPOSIX\fR-draft \fBACL\fRs"
.sp
.LP
POSIX-draft ACLs provide an alternative security mechanism to basic UNIX
file permissions in the Solaris release. Their purpose is to further
restrict access to files and directories or to extend permissions to a
particular user. ACLs can be used to change the permissions for the standard
owner, group and other class bits of a file's mode. ACLs can give additional
users and groups access to the file. A directory can also have a special
kind of ACL called a
.B default
ACL, which defines ACL entries to be
inherited by descendents of the directory. POSIX-draft ACLs have an ACL
entry called
.BR mask .
The mask defines the maximum permissions that can
be granted to additional user and group entries. Whenever a file is created
or its mode is changed by
.BR chmod (1)
or
.BR chmod (2),
the mask is
recomputed. It is recomputed to be the group permission defined in the mode
passed to
.BR chmod (2).
.sp
.LP
The POSIX-draft ACL model uses the standard
.B rwx
model of traditional
UNIX permissions.
.sp
.LP
An ACL is represented as follows:
.sp
.in +2
.nf
\fIacl_entry\fR[,\fIacl_entry\fR]...
.fi
.in -2
.sp

.sp
.LP
Each
.I acl_entry
contains one ACL entry. An ACL entry is represented by
two or three colon-separated(\fB:\fR) fields.
.sp
.ne 2
.mk
.na
\fIuser\fR:[\fIuid\fR]:\fIperms\fR
.ad
.RS 21n
.rt
If
.I uid
blank, it represents the file owner.
.RE

.sp
.ne 2
.mk
.na
\fIgroup\fR:[\fIgid\fR]:\fIperms\fR
.ad
.RS 21n
.rt
If
.I gid
is blank, it represents the owning group.
.RE

.sp
.ne 2
.mk
.na
\fIother\fR:\fIperms\fR
.ad
.RS 21n
.rt
Represents the file other class.
.RE

.sp
.ne 2
.mk
.na
\fImask\fR:\fIperms\fR
.ad
.RS 21n
.rt
Defines the
.B MAX
permission to hand out.
.RE

.sp
.LP
For example to give user
.B joe
read and write permissions, the ACL
entry is specified as:
.sp
.in +2
.nf
user:joe:rw-
.fi
.in -2
.sp

.SS "\fBNFS\fRv4 \fBACL\fRs"
.sp
.LP
NFSv4 ACL model is based loosely on the Windows NT ACL model. NFSv4 ACLs
provide a much richer ACL model than POSIX-draft ACLs.
.sp
.LP
The major differences between NFSv4 and POSIX-draft ACLs are as follows:
.RS +4
.TP
.ie t \(bu
.el o
NFSv4 ACLs provide finer grained permissions than the
.B rwx
model.
.RE
.RS +4
.TP
.ie t \(bu
.el o
NFSv4 ACLs allow for both
.B ALLOW
and
.B DENY
entries.
.RE
.RS +4
.TP
.ie t \(bu
.el o
NFSv4 ACLs provide a rich set of inheritance semantics. POSIX ACLs also
have inheritance, but with the NFSv4 model you can control the following
inheritance features:
.RS +4
.TP
.ie t \(bu
.el o
Whether inheritance cascades to both files and directories or only to files
or directories.
.RE
.RS +4
.TP
.ie t \(bu
.el o
In the case of directories, you can indicate whether inheritance is applied
to the directory itself, to just one level of subdirectories, or cascades to
all subdirectories of the directory.
.RE
.RE
.RS +4
.TP
.ie t \(bu
.el o
NFSv4 ACLs provide a mechanism for hooking into a system's audit trail.
Currently, Solaris does not support this mechanism.
.RE
.RS +4
.TP
.ie t \(bu
.el o
NFSv4 ACLs enable adminstrators to specify the order in which ACL entries
are checked. With POSIX-draft ACLs the file system reorders ACL entries into
a well defined, strict access, checking order.
.RE
.sp
.LP
POSIX-draft ACL semantics can be achieved with NFSv4 ACLs. However, only
some NFSv4 ACLs can be translated to equivalent POSIX-draft ACLs.
.sp
.LP
Permissions can be specified in three different
.B chmod
ACL formats:
verbose, compact, or positional. The verbose format uses words to indicate
that the permissions are separated with a forward slash
.RB ( / )
character.
Compact format uses the permission letters and positional format uses the
permission letters or the hypen
.RB ( - )
to identify no permissions.
.sp
.LP
The permissions for verbose mode and their abbreviated form in parentheses
for compact and positional mode are described as follows:
.sp
.ne 2
.mk
.na
.BR "read_data (r" )\fR
.ad
.RS 24n
.rt
Permission to read the data of the file
.RE

.sp
.ne 2
.mk
.na
.BR "list_directory (r" )\fR
.ad
.RS 24n
.rt
Permission to list the contents of a directory.
.RE

.sp
.ne 2
.mk
.na
.BR "write_data (w" )\fR
.ad
.RS 24n
.rt
Permission to modify a file's data anywhere in the file's offset range.
This includes the ability to grow the file or write to any arbitrary
offset.
.RE

.sp
.ne 2
.mk
.na
.BR "add_file (w" )
.ad
.RS 24n
.rt
Permission to add a new file to a directory.
.RE

.sp
.ne 2
.mk
.na
.BR "append_data (p" )\fR
.ad
.RS 24n
.rt
The ability to modify the file's data, but only starting at EOF. Currently,
this permission is not supported.
.RE

.sp
.ne 2
.mk
.na
.BR "add_subdirectory (p" )\fR
.ad
.RS 24n
.rt
Permission to create a subdirectory to a directory.
.RE

.sp
.ne 2
.mk
.na
.BR "read_xattr (R" )\fR
.ad
.RS 24n
.rt
The ability to read the extended attributes of a file or do a lookup in the
extended attributes directory.
.RE

.sp
.ne 2
.mk
.na
.BR "write_xattr (W" )\fR
.ad
.RS 24n
.rt
The ability to create extended attributes or write to the extended
attributes directory.
.RE

.sp
.ne 2
.mk
.na
.BR "execute (x" )\fR
.ad
.RS 24n
.rt
Permission to execute a file.
.RE

.sp
.ne 2
.mk
.na
.BR "read_attributes (a" )\fR
.ad
.RS 24n
.rt
The ability to read basic attributes (non-ACLs) of a file. Basic attributes
are considered to be the stat level attributes. Allowing this access mask
bit means that the entity can execute
.BR ls (1)
and
.BR stat (2).
.RE

.sp
.ne 2
.mk
.na
.BR "write_attributes (A" )\fR
.ad
.RS 24n
.rt
Permission to change the times associated with a file or directory to an
arbitrary value.
.RE

.sp
.ne 2
.mk
.na
.BR "delete (d" )\fR
.ad
.RS 24n
.rt
Permission to delete the file.
.RE

.sp
.ne 2
.mk
.na
.BR "delete_child (D" )\fR
.ad
.RS 24n
.rt
Permission to delete a file within a directory.
.RE

.sp
.ne 2
.mk
.na
.BR "read_acl (c" )\fR
.ad
.RS 24n
.rt
Permission to read the ACL.
.RE

.sp
.ne 2
.mk
.na
.BR "write_acl (C" )\fR
.ad
.RS 24n
.rt
Permission to write the ACL or the ability to execute
.BR chmod (1)
or
.BR setfacl (1).
.RE

.sp
.ne 2
.mk
.na
.BR "write_owner (o" )\fR
.ad
.RS 24n
.rt
Permission to change the owner or the ability to execute
.BR chown (1)
or
.BR chgrp (1).
.RE

.sp
.ne 2
.mk
.na
.BR "synchronize (s" )\fR
.ad
.RS 24n
.rt
Permission to access a file locally at the server with synchronous reads
and writes. Currently, this permission is not supported.
.RE

.sp
.LP
The following inheritance flags are supported by NFSv4:
.sp
.ne 2
.mk
.na
.BR "file_inherit (f" )
.ad
.RS 26n
.rt
Inherit to all newly created files in a directory.
.RE

.sp
.ne 2
.mk
.na
.BR "dir_inherit (d" )\fR
.ad
.RS 26n
.rt
Inherit to all newly created directories in a directory.
.RE

.sp
.ne 2
.mk
.na
.BR "inherit_only (i" )\fR
.ad
.RS 26n
.rt
Placed on a directory, but does not apply to the directory itself, only to
newly created created files and directories. This flag requires file_inherit
and or dir_inherit to indicate what to inherit.
.RE

.sp
.ne 2
.mk
.na
.BR "no_propagate (n" )\fR
.ad
.RS 26n
.rt
Placed on directories and indicates that ACL entries should only be
inherited one level of the tree. This flag requires file_inherit and or
dir_inherit to indicate what to inherit.
.RE

.sp
.ne 2
.mk
.na
.BR "successful_access (S)" )
.ad
.RS 26n
.rt
Indicates if an alarm or audit record should be initiated upon successful
accesses. Used with audit/alarm ACE types.
.RE

.sp
.ne 2
.mk
.na
.BR "failed_access (F" )
.ad
.RS 26n
.rt
Indicates if an alarm or audit record should be initiated when access
fails. Used with audit/alarm ACE types.
.RE

.sp
.ne 2
.mk
.na
.BR "inherited (I" )\fR
.ad
.RS 26n
.rt
ACE was inherited.
.RE

.sp
.ne 2
.mk
.na
.B -
.ad
.RS 26n
.rt
No permission granted.
.RE

.sp
.LP
An NFSv4 ACL is expressed using the following syntax:
.sp
.in +2
.nf
\fIacl_entry\fR[,\fIacl_entry\fR]...

    owner@:<perms>[:inheritance flags]:<allow|deny>
    group@:<perms>[:inheritance flags]:<allow|deny>
    everyone@:<perms>[:inheritance flags]:<allow|deny>
    user:<username>[:inheritance flags]:<allow|deny>
    group:<groupname>[:inheritance flags]:<allow|deny>
.fi
.in -2

.sp
.ne 2
.mk
.na
.B owner@
.ad
.RS 10n
.rt
File owner
.RE

.sp
.ne 2
.mk
.na
.B group@
.ad
.RS 10n
.rt
Group owner
.RE

.sp
.ne 2
.mk
.na
.B user
.ad
.RS 10n
.rt
Permissions for a specific user
.RE

.sp
.ne 2
.mk
.na
.B group
.ad
.RS 10n
.rt
Permissions for a specific group
.RE

.sp
.LP
Permission and inheritance flags are separated by a
.B /
character.
.sp
.LP
ACL specification examples:
.sp
.in +2
.nf
user:fred:read_data/write_data/read_attributes:file_inherit:allow
owner@:read_data:allow,group@:read_data:allow,user:tom:read_data:deny
.fi
.in -2
.sp

.sp
.LP
Using the compact ACL format, permissions are specified by using 14 unique
letters to indicate permissions.
.sp
.LP
Using the positional ACL format, permissions are specified as positional
arguments similar to the
.B "ls -V"
format. The hyphen
.RB ( - ),
which
indicates that no permission is granted at that position, can be omitted and
only the required letters have to be specified.
.sp
.LP
The letters above are listed in the order they would be specified in
positional notation.
.sp
.LP
With these letters you can specify permissions in the following equivalent
ways.
.sp
.in +2
.nf
user:fred:rw------R------:file_inherit:allow
.fi
.in -2
.sp

.sp
.LP
Or you can remove the
.B -
and scrunch it together.
.sp
.in +2
.nf
user:fred:rwR:file_inherit:allow
.fi
.in -2
.sp

.sp
.LP
The inheritance flags can also be specified in a more compact manner, as
follows:
.sp
.in +2
.nf
user:fred:rwR:f:allow
user:fred:rwR:f------:allow
.fi
.in -2
.sp

.SS "Shell-level Solaris \fBAPI\fR"
.sp
.LP
The Solaris command interface supports the manipulation of ACLs. The
following Solaris utilities accommodate both ACL models:
.sp
.ne 2
.mk
.na
.B chmod
.ad
.RS 12n
.rt
The
.B chmod
utility has been enhanced to allow for the setting and
deleting of ACLs. This is achieved by extending the symbolic-mode argument
to support ACL manipulation. See
.BR chmod (1)
for details.
.RE

.sp
.ne 2
.mk
.na
.B compress
.ad
.RS 12n
.rt
When a file is compressed any ACL associated with the original file is
preserved with the compressed file.
.RE

.sp
.ne 2
.mk
.na
.B cp
.ad
.RS 12n
.rt
By default,
.B cp
ignores ACLs, unless the
.B -p
option is specified.
When
.B -p
is specified the owner and group id, permission modes,
modification and access times, ACLs, and extended attributes if applicable
are preserved.
.RE

.sp
.ne 2
.mk
.na
.B cpio
.ad
.RS 12n
.rt
ACLs are preserved when the
.B -P
option is specified.
.RE

.sp
.ne 2
.mk
.na
.B find
.ad
.RS 12n
.rt
Find locates files with ACLs when the
.B -acl
flag is specified.
.RE

.sp
.ne 2
.mk
.na
.B ls
.ad
.RS 12n
.rt
By default
.B ls
does not display ACL information. When the
.B -v
option is specified, a file's ACL is displayed.
.RE

.sp
.ne 2
.mk
.na
.B mv
.ad
.RS 12n
.rt
When a file is moved, all attributes are carried along with the renamed
file. When a file is moved across a file system boundary, the ACLs are
replicated. If the ACL information cannot be replicated, the move fails and
the source file is not removed.
.RE

.sp
.ne 2
.mk
.na
.B pack
.ad
.RS 12n
.rt
When a file is packed, any ACL associated with the original file is
preserved with the packed file.
.RE

.sp
.ne 2
.mk
.na
.B rcp
.ad
.RS 12n
.rt
.B rcp
has been enhanced to support copying. A file's ACL is only
preserved when the remote host supports ACLs.
.RE

.sp
.ne 2
.mk
.na
.B tar
.ad
.RS 12n
.rt
ACLs are preserved when the
.B -p
option is specified.
.RE

.sp
.ne 2
.mk
.na
.B unpack
.ad
.RS 12n
.rt
When a file with an ACL is unpacked, the unpacked file retains the ACL
information.
.RE

.SS "Application-level \fBAPI\fR"
.sp
.LP
The primary interfaces required to access file system ACLs at the
programmatic level are the
.B acl_get()
and
.B acl_set()
functions.
These functions support both POSIX draft ACLs and NFSv4 ACLs.
.SS "Retrieving a file's \fBACL\fR"
.sp
.in +2
.nf
int acl_get(const char *path, int flag, acl_t **aclp);
int facl_get(int fd, int flag, acl_t **aclp);
.fi
.in -2

.sp
.LP
The
.BR acl_get (3SEC)
and \fBfacl_get\fR(3SEC) functions retrieves an ACL
on a file whose name is given by path or referenced by the open file
descriptor fd. The flag argument specifies whether a trivial ACL should be
retrieved. When the flag argument equals
.B ACL_NO_TRIVIAL
then only ACLs
.RB "that are not trivial are retrieved. The ACL is returned in the" " aclp"
argument.
.SS "Freeing \fBACL\fR structure"
.sp
.in +2
.nf
void acl_free(acl_t *aclp)s;
.fi
.in -2

.sp
.LP
The
.B acl_free()
function frees up memory allocated for the argument
.BR aclp; .
.SS "Setting an \fBACL\fR on a file"
.sp
.in +2
.nf
int acl_set(const char *path, acl_t *aclp);
int facl_set(int fd, acl_t *aclp);
.fi
.in -2

.sp
.LP
The
.BR acl_set (3SEC)
and \fBfacl_get\fR(3SEC) functions are used for
setting an ACL on a file whose name is given by path or referenced by the
open file descriptor
.BR fd .
The
.B aclp
argument specifies the ACL to
set. The
.BR acl_set (3SEC)
translates an POSIX-draft ACL into a NFSv4 ACL
when the target file systems supports NFSv4 ACLs. No translation is
performed when trying to set an NFSv4 ACL on a POSIX-draft ACL supported
file system.
.SS "Determining an \fBACL\fR's trivialness"
.sp
.in +2
.nf
int acl_trivial(const char *path);
.fi
.in -2

.sp
.LP
The
.B acl_trivial()
function is used to determine whether a file has a
trivial ACL. The trivialness of a file's ACL depends on the type of ACL it
is. For POSIX-draft ACLs, it implies the ACL has greater than
.BR MIN_ACL_ENTRIES .
For NFSv4/ZFS style ACLs, it implies that the ACL has
entries other than
.BR owner@ ,
.B group@
and
.BR everyone@ ,
inheritance flags are set, or the ACL is not ordered in a manner that meets
POSIX access control requirements.
.SS "Removing all \fBACL\fRs from a file"
.sp
.in +2
.nf
int acl_strip(const char *path, uid_t uid, gid_t gid, mode_t mode);
.fi
.in -2

.sp
.LP
The
.B acl_strip()
function removes all ACLs from a file and replaces
them with a trivial ACL based off of the passed in argument mode. After
replacing the ACL the owner and group of the file are set to the values
specified in the uid and gid parameters.
.SS "Converting \fBACL\fRs to/from external representation"
.sp
.in +2
.nf
int acl_fromtext(const char *path, acl_t **aclp);
char *acl_totext(acl_t *aclp, int flags);
.fi
.in -2

.sp
.LP
The
.B acl_text()
function converts an internal ACL representation
.RB "pointed to by aclp into an external representation. See" " DESCRIPTION"
for details about external representation.
.sp
.LP
The
.B acl_fromtext()
functions converts and external representation
into an internal representation. See
.B DESCRIPTION
for details about
external representation.
.SH EXAMPLES
.sp
.LP
The following examples demonstrate how the API can be used to perform basic
operations on ACLs.
.LP
.B Example 1
Retrieving and Setting an ACL
.sp
.LP
Use the following to retrieve an ACL and set it on another file:

.sp
.in +2
.nf
error = acl_get("file", ACL_NO_TRIVIAL, &aclp);

if (error == 0 && aclp != NULL) {
error = acl_set("file2", aclp)
acl_free(aclp);
}
\&...
.fi
.in -2

.LP
.B Example 2
Retrieving and Setting Any ACLs
.sp
.LP
Use the following to retrieve any ACL, including trivial ACLs, and set it
on another file:

.sp
.in +2
.nf
error = acl_get("file3", 0, &aclp);
if (error == 0) {
error = acl_set("file4", aclp)
acl_free(aclp);
}
\&...
.fi
.in -2

.LP
.B Example 3
Determining if a File has a Trivial ACL
.sp
.LP
Use the following to determine if a file has a trivial ACL:

.sp
.in +2
.nf
istrivial = acl_trivial("file")

if (istrivial == 0)
printf("file %s has a trivial ACL\en", file);
else
printf("file %s has a NON-trivial ACL\en", file);
\&...
.fi
.in -2

.LP
.B Example 4
Removing all ACLs from a File
.sp
.LP
Use the following to remove all ACLs from a file, and set a new mode,
owner, and group:

.sp
.in +2
.nf
error = acl_strip("file", 10, 100, 0644);
\&...
.fi
.in -2

.SH SEE ALSO
.sp
.LP
.BR chgrp (1),
.BR chmod (1),
.BR chown (1),
.BR cp (1),
.BR cpio (1),
.BR find (1),
.BR ls (1),
.BR mv (1),
.BR tar (1),
.BR setfacl (1),
.BR chmod (2),
\fBacl\fR(2),\fBstat\fR(2),\fBacl_get\fR(3SEC),
.BR aclsort (3SEC),
.BR acl_fromtext (3SEC),
.BR acl_free (3SEC),
.BR acl_strip (3SEC),
.BR acl_trivial (3SEC)
