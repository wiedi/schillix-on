'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH threads 5 "11 Nov 2008" "SunOS 5.11" "Standards, Environments, and Macros"
.SH NAME
threads, pthreads \- POSIX pthreads and Solaris threads concepts
.SH SYNOPSIS
.SS "POSIX"
.LP
.nf
cc -mt [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. [ -lrt \fIlibrary\fR.\|.\|. ]
.fi

.LP
.nf
#include <pthread.h>
.fi

.SS "Solaris"
.LP
.nf
cc -mt [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. [ \fIlibrary\fR.\|.\|. ]
.fi

.LP
.nf
#include <sched.h>
.fi

.LP
.nf
#include <thread.h>
.fi

.SH DESCRIPTION
.sp
.LP
POSIX and Solaris threads each have their own implementation within
.BR libc (3LIB).
Both implementations are interoperable, their
functionality similar, and can be used within the same application. Only
POSIX threads are guaranteed to be fully portable to other POSIX-compliant
environments. POSIX and Solaris threads require different source, include
files and linking libraries. See
.BR SYNOPSIS .
.SS "Similarities"
.sp
.LP
Most of the POSIX and Solaris threading functions have counterparts with
each other. POSIX function names, with the exception of the semaphore names,
have a "\fBpthread\fR" prefix. Function names for similar POSIX and Solaris
functions have similar endings. Typically, similar POSIX and Solaris
functions have the same number and use of arguments.
.SS "Differences"
.sp
.LP
POSIX pthreads and Solaris threads differ in the following ways:
.RS +4
.TP
.ie t \(bu
.el o
POSIX threads are more portable.
.RE
.RS +4
.TP
.ie t \(bu
.el o
POSIX threads establish characteristics  for each thread according to
configurable attribute objects.
.RE
.RS +4
.TP
.ie t \(bu
.el o
POSIX pthreads implement thread cancellation.
.RE
.RS +4
.TP
.ie t \(bu
.el o
POSIX pthreads enforce scheduling algorithms.
.RE
.RS +4
.TP
.ie t \(bu
.el o
POSIX pthreads allow for clean-up handlers for
.BR fork (2)
calls.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Solaris threads can be suspended and continued.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Solaris threads implement daemon threads, for whose demise the process does
not wait.
.RE
.SH FUNCTION COMPARISON
.sp
.LP
The following table compares the POSIX pthreads and Solaris threads
functions. When a comparable interface is not available either in POSIX
pthreads or Solaris threads, a hyphen
.RB ( - )
appears in the column.
.SS "Functions Related to Creation"
.sp

.sp
.TS
tab();
lw(2.75i) lw(2.75i)
lw(2.75i) lw(2.75i)
.
.B
POSIXSolaris
.B
pthread_create()thr_create()
.B
pthread_attr_init()-
.B
pthread_attr_setdetachstate()-
.B
pthread_attr_getdetachstate()-
.B
pthread_attr_setinheritsched()-
.B
pthread_attr_getinheritsched()-
.B
pthread_attr_setschedparam()-
.B
pthread_attr_getschedparam()-
.B
pthread_attr_setschedpolicy()-
.B
pthread_attr_getschedpolicy()-
.B
pthread_attr_setscope()-
.B
pthread_attr_getscope()-
.B
pthread_attr_setstackaddr()-
.B
pthread_attr_getstackaddr()-
.B
pthread_attr_setstacksize()-
.B
pthread_attr_getstacksize()-
.B
pthread_attr_getguardsize()-
.B
pthread_attr_setguardsize()-
.B
pthread_attr_destroy()-
.B
-thr_min_stack()
.TE

.SS "Functions Related to Exit"
.sp

.sp
.TS
tab();
lw(2.75i) lw(2.75i)
lw(2.75i) lw(2.75i)
.
.B
POSIXSolaris
.B
pthread_exit()thr_exit()
.B
pthread_join()thr_join()
.B
pthread_detach()-
.TE

.SS "Functions Related to Thread Specific Data"
.sp

.sp
.TS
tab();
lw(2.75i) lw(2.75i)
lw(2.75i) lw(2.75i)
.
.B
POSIXSolaris
.B
pthread_key_create()thr_keycreate()
.B
pthread_setspecific()thr_setspecific()
.B
pthread_getspecific()thr_getspecific()
.B
pthread_key_delete()-
.TE

.SS "Functions Related to Signals"
.sp

.sp
.TS
tab();
lw(2.75i) lw(2.75i)
lw(2.75i) lw(2.75i)
.
.B
POSIXSolaris
.B
pthread_sigmask()thr_sigsetmask()
.B
pthread_kill()thr_kill()
.TE

.SS "Functions Related to IDs"
.sp

.sp
.TS
tab();
lw(2.75i) lw(2.75i)
lw(2.75i) lw(2.75i)
.
.B
POSIXSolaris
.B
pthread_self()thr_self()
.B
pthread_equal()-
.B
-thr_main()
.TE

.SS "Functions Related to Scheduling"
.sp

.sp
.TS
tab();
lw(2.75i) lw(2.75i)
lw(2.75i) lw(2.75i)
.
.B
POSIXSolaris
.B
-thr_yield()
.B
-thr_suspend()
.B
-thr_continue()
.B
pthread_setconcurrency()thr_setconcurrency()
.B
pthread_getconcurrency()thr_getconcurrency()
.B
pthread_setschedparam()thr_setprio()
.B
pthread_setschedprio()thr_setprio()
.B
pthread_getschedparam()thr_getprio()
.TE

.SS "Functions Related to Cancellation"
.sp

.sp
.TS
tab();
lw(2.75i) lw(2.75i)
lw(2.75i) lw(2.75i)
.
.B
POSIXSolaris
.B
pthread_cancel()-
.B
pthread_setcancelstate()-
.B
pthread_setcanceltype()-
.B
pthread_testcancel()-
.B
pthread_cleanup_pop()-
.B
pthread_cleanup_push()-
.TE

.SS "Functions Related to Mutexes"
.sp

.sp
.TS
tab();
lw(3.85i) lw(1.65i)
lw(3.85i) lw(1.65i)
.
.B
POSIXSolaris
.B
pthread_mutex_init()mutex_init()
.B
pthread_mutexattr_init()-
.B
pthread_mutexattr_setpshared()-
.B
pthread_mutexattr_getpshared()-
.B
pthread_mutexattr_setprotocol()-
.B
pthread_mutexattr_getprotocol()-
.B
pthread_mutexattr_setprioceiling()-
.B
pthread_mutexattr_getprioceiling()-
.B
pthread_mutexattr_settype()-
.B
pthread_mutexattr_gettype()-
.B
pthread_mutexattr_setrobust()-
.B
pthread_mutexattr_getrobust()-
.B
pthread_mutexattr_destroy()-
.B
pthread_mutex_setprioceiling()-
.B
pthread_mutex_getprioceiling()-
.B
pthread_mutex_lock()mutex_lock()
.B
pthread_mutex_trylock()mutex_trylock()
.B
pthread_mutex_unlock()mutex_unlock()
.B
pthread_mutex_destroy()mutex_destroy()
.TE

.SS "Functions Related to Condition Variables"
.sp

.sp
.TS
tab();
lw(2.75i) lw(2.75i)
lw(2.75i) lw(2.75i)
.
.B
POSIXSolaris
.B
pthread_cond_init()cond_init()
.B
pthread_condattr_init()-
.B
pthread_condattr_setpshared()-
.B
pthread_condattr_getpshared()-
.B
pthread_condattr_destroy()-
.B
pthread_cond_wait()cond_wait()
.B
pthread_cond_timedwait()cond_timedwait()
.B
pthread_cond_signal()cond_signal()
.B
pthread_cond_broadcast()cond_broadcast()
.B
pthread_cond_destroy()cond_destroy()
.TE

.SS "Functions Related to Reader/Writer Locking"
.sp

.sp
.TS
tab();
lw(2.75i) lw(2.75i)
lw(2.75i) lw(2.75i)
.
.B
POSIXSolaris
.B
pthread_rwlock_init()rwlock_init()
.B
pthread_rwlock_rdlock()rw_rdlock()
.B
pthread_rwlock_tryrdlock()rw_tryrdlock()
.B
pthread_rwlock_wrlock()rw_wrlock()
.B
pthread_rwlock_trywrlock()rw_trywrlock()
.B
pthread_rwlock_unlock()rw_unlock()
.B
pthread_rwlock_destroy()rwlock_destroy()
.B
pthread_rwlockattr_init()-
.B
pthread_rwlockattr_destroy()-
.B
pthread_rwlockattr_getpshared()-
.B
pthread_rwlockattr_setpshared()-
.TE

.SS "Functions Related to Semaphores"
.sp

.sp
.TS
tab();
lw(2.75i) lw(2.75i)
lw(2.75i) lw(2.75i)
.
.B
POSIXSolaris
.B
sem_init()sema_init()
.B
sem_open()-
.B
sem_close()-
.B
sem_wait()sema_wait()
.B
sem_trywait()sema_trywait()
.B
sem_post()sema_post()
.B
sem_getvalue()-
.B
sem_unlink()-
.B
sem_destroy()sema_destroy()
.TE

.SS "Functions Related to fork(\|) Clean Up"
.sp

.sp
.TS
tab();
lw(2.75i) lw(2.75i)
lw(2.75i) lw(2.75i)
.
.B
POSIXSolaris
.B
pthread_atfork()-
.TE

.SS "Functions Related to Limits"
.sp

.sp
.TS
tab();
lw(2.75i) lw(2.75i)
lw(2.75i) lw(2.75i)
.
.B
POSIXSolaris
.B
pthread_once()-
.TE

.SS "Functions Related to Debugging"
.sp

.sp
.TS
tab();
lw(2.75i) lw(2.75i)
lw(2.75i) lw(2.75i)
.
.B
POSIXSolaris
.B
-thr_stksegment()
.TE

.SH LOCKING
.SS "Synchronization"
.sp
.LP
Multithreaded behavior is asynchronous, and therefore,  optimized for
concurrent and parallel processing. As threads, always from within the same
process and  sometimes from multiple processes, share global data with each
other, they are not guaranteed exclusive access to the shared data at any
point in time. Securing mutually exclusive access to shared data requires
synchronization among the threads. Both POSIX and Solaris implement four
synchronization mechanisms: mutexes, condition variables, reader/writer
locking
.RI ( "optimized frequent-read occasional-write mutex" ),
and
semaphores.
.sp
.LP
Synchronizing multiple threads diminishes their concurrency. The coarser
the grain of synchronization, that is, the larger the block of code that is
locked, the lesser the concurrency.
.SS "MT \fBfork()\fR"
.sp
.LP
If a threads program calls
.BR fork (2),
it implicitly calls
.BR fork1 (2),
which replicates only the calling thread. Should there be
any outstanding mutexes throughout the process, the application should call
.BR pthread_atfork (3C)
to wait for and acquire those mutexes prior to
calling
.BR fork() .
.SH SCHEDULING
.SS "POSIX Threads"
.sp
.LP
Solaris supports the following three POSIX scheduling policies:
.sp
.ne 2
.mk
.na
.B SCHED_OTHER
.ad
.RS 15n
.rt
Traditional Timesharing scheduling policy. It is based on the timesharing
(TS) scheduling class.
.RE

.sp
.ne 2
.mk
.na
.B SCHED_FIFO
.ad
.RS 15n
.rt
First-In-First-Out scheduling policy. Threads scheduled to this policy, if
not preempted by a higher priority, will proceed until completion. Such
threads are in real-time (RT) scheduling class. The calling process must
have a effective user
.B ID
of
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
.B SCHED_RR
.ad
.RS 15n
.rt
Round-Robin scheduling policy. Threads scheduled to this policy, if not
preempted by a higher priority, will execute for a time period determined by
the system. Such threads are in real-time (RT) scheduling class and the
calling process must have a effective user
.B ID
of
.BR 0 .
.RE

.sp
.LP
In addition to the POSIX-specified scheduling policies above, Solaris also
supports these scheduling policies:
.sp
.ne 2
.mk
.na
.B SCHED_IA
.ad
.RS 13n
.rt
Threads are scheduled according to the Inter-Active Class (IA) policy as
described in
.BR priocntl (2).
.RE

.sp
.ne 2
.mk
.na
.B SCHED_FSS
.ad
.RS 13n
.rt
Threads are scheduled according to the Fair-Share Class (FSS) policy as
described in
.BR priocntl (2).
.RE

.sp
.ne 2
.mk
.na
.B SCHED_FX
.ad
.RS 13n
.rt
Threads are scheduled according to the Fixed-Priority Class (FX) policy as
described in
.BR priocntl (2).
.RE

.SS "Solaris Threads"
.sp
.LP
Only scheduling policy supported is
.BR SCHED_OTHER ,
which is
timesharing, based on the
.B TS
scheduling class.
.SH ERRORS
.sp
.LP
In a multithreaded application,
.B EINTR
can be returned from blocking
system calls when another thread calls
.BR forkall (2).
.SH USAGE
.SS "\fB-mt\fR compiler option"
.sp
.LP
The
.B -mt
compiler option compiles and links for multithreaded code. It
compiles source files with \(mi\fBD_REENTRANT\fR and augments the set of
support libraries properly.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe, Fork 1-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR crle (1),
.BR fork (2),
.BR priocntl (2),
.BR libpthread (3LIB),
.BR librt (3LIB),
.BR libthread (3LIB),
.BR pthread_atfork (3C),
.BR pthread_create (3C),
.BR attributes (5),
.BR standards (5)
.sp
.LP
.I Linker and Libraries Guide
