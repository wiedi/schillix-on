'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Portions Copyright (c) 2001, the Institute of Electrical and Electronics Engineers, Inc. and The Open Group. All Rights Reserved.
.\" Portions Copyright (c) 1995 IEEE.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH cancellation 5 "4 Oct 2005" "SunOS 5.11" "Standards, Environments, and Macros"
.SH NAME
cancellation \- overview of concepts related to POSIX thread cancellation
.SH DESCRIPTION
.sp

.sp
.TS
tab() box;
cw(2.18i) |cw(3.32i)
lw(2.18i) |lw(3.32i)
.
FUNCTIONACTION
_
\fBpthread_cancel()\fRCancels thread execution.
\fBpthread_setcancelstate()\fRSets the cancellation \fIstate\fR of a thread.
\fBpthread_setcanceltype()\fRSets the cancellation \fItype\fR of a thread.
\fBpthread_testcancel()\fRT{
Creates a cancellation point in the calling thread.
T}
\fBpthread_cleanup_push()\fRPushes a cleanup handler routine.
\fBpthread_cleanup_pop()\fRPops a cleanup handler routine.
.TE

.SS "Cancellation"
.sp
.LP
Thread cancellation allows a thread to terminate the execution of any
application thread in the process. Cancellation is useful when further
operations of one or more threads are undesirable or unnecessary.
.sp
.LP
An example of a situation that could benefit from using cancellation is an
asynchronously-generated cancel condition such as a user requesting to close
or exit some running operation. Another example is the completion of a task
undertaken by a number of threads, such as solving a maze. While many
threads search for the solution, one of the threads might solve the puzzle
while the others continue to operate. Since they are serving no purpose at
that point, they should all be canceled.
.SS "Planning Steps"
.sp
.LP
Planning and programming for most cancellations follow this pattern:
.RS +4
.TP
1.
Identify which threads you want to cancel, and insert
.BR pthread_cancel (3C)
statements.
.RE
.RS +4
.TP
2.
Identify system-defined cancellation points where a thread that might be
canceled could have changed system or program state that should be restored.
See the
.B "Cancellation Points"
for a list.
.RE
.RS +4
.TP
3.
When a thread changes the system or program state just before a
cancellation point, and should restore that state before the thread is
canceled, place a cleanup handler before the cancellation point with
.BR pthread_cleanup_push (3C).
Wherever a thread restores the changed
state, pop the cleanup handler from the cleanup stack with
.BR pthread_cleanup_pop (3C).
.RE
.RS +4
.TP
4.
Know whether the threads you are canceling call into cancel-unsafe
libraries, and disable cancellation with
.BR pthread_setcancelstate (3C)
before the call into the library.  See
.B "Cancellation State"
and
.BR Cancel-Safe .
.RE
.RS +4
.TP
5.
To cancel a thread in a procedure that contains no cancellation points,
insert your own cancellation points with
.BR pthread_testcancel "(3C). This"
function creates cancellation points by testing for pending cancellations
and performing those cancellations if they are found. Push and pop cleanup
handlers around the cancellation point, if necessary (see Step 3, above).
.RE
.SS "Cancellation Points"
.sp
.LP
The system defines certain points at which cancellation can occur
(cancellation points), and you can create additional cancellation points in
your application with
.BR pthread_testcancel() .
.sp
.LP
The following cancellation points are  defined by the system
(system-defined cancellation points):
.BR creat (2),
.BR aio_suspend (3C),
.BR close (2),
.BR creat (2),
.BR getmsg (2),
.BR getpmsg (2),
.BR lockf (3C),
.BR mq_receive (3C),
.BR mq_send (3C),
.BR msgrcv (2),
.BR msgsnd (2),
.BR msync (3C),
.BR nanosleep (3C),
.BR open (2),
.BR pause (2),
.BR poll (2),
.BR pread (2),
.BR pthread_cond_timedwait (3C),
.BR pthread_cond_wait (3C),
.BR pthread_join (3C),
.BR pthread_testcancel (3C),
.BR putmsg (2),
.BR putpmsg (2),
.BR pwrite (2),
.BR read (2),
.BR readv (2),
.BR select (3C),
.BR sem_wait (3C),
.BR sigpause (3C),
.BR sigwaitinfo (3C),
.BR sigsuspend (2),
.BR sigtimedwait (3C),
.BR sigwait (2),
.BR sleep (3C),
.BR sync (2),
.BR system (3C),
.BR tcdrain (3C),
.BR usleep (3C),
.BR wait (3C),
.BR waitid (2),
.BR wait3 (3C),
.BR waitpid (3C),
.BR write (2),
.BR writev (2),
and
\fBfcntl\fR(2), when specifying \fBF_SETLKW\fR as the command.
.sp
.LP
When cancellation is asynchronous, cancellation can occur at any time
(before, during, or after the execution of the function defined as the
cancellation point). When cancellation is deferred (the default case),
cancellation occurs only within the scope of a function defined as a
cancellation point (after the function is called and before the function
returns). See
.B "Cancellation Type"
for more information about deferred
and asynchronous cancellation.
.sp
.LP
Choosing where to place cancellation points and understanding how
cancellation affects your program depend upon your understanding of both
your application and of cancellation mechanics.
.sp
.LP
Typically, any call that might require a long wait should be a cancellation
point. Operations need to check for pending cancellation requests when the
operation is about to block indefinitely. This includes threads waiting in
\fBpthread_cond_wait()\fR and
.BR pthread_cond_timedwait() ,
threads
waiting for the termination of another thread in
.BR pthread_join() ,
and
threads blocked on
.BR sigwait() .
.sp
.LP
A mutex is explicitly not a cancellation point and should be held for only
the minimal essential time.
.sp
.LP
Most of the dangers in performing cancellations deal with properly
restoring invariants and freeing shared resources. For example, a carelessly
canceled thread might leave a mutex in a locked state, leading to a
deadlock. Or it might leave a region of memory allocated with no way to
identify it and therefore no way to free it.
.SS "Cleanup Handlers"
.sp
.LP
When a thread is canceled, it should release resources and clean up the
state that is shared with other threads. So, whenever a thread that might be
canceled changes the state of the system or of the program, be sure to push
a cleanup handler with \fBpthread_cleanup_push\fR(3C) before the
cancellation point.
.sp
.LP
When a thread is canceled, all the currently-stacked cleanup handlers are
executed in last-in-first-out (LIFO) order. Each handler is run in the scope
in which it was pushed. When the last cleanup handler returns, the
thread-specific data destructor functions are called. Thread execution
terminates when the last destructor function returns.
.sp
.LP
When, in the normal course of the program, an uncanceled thread restores
state that it had previously changed, be sure to pop the cleanup handler
(that you had set up where the change took place) using
.BR pthread_cleanup_pop (3C).
That way, if the thread is canceled later,
only currently-changed state will be restored by the handlers that are left
in the stack.
.sp
.LP
The
.B pthread_cleanup_push()
and
.B pthread_cleanup_pop()
functions
can be implemented as macros. The application must ensure that they appear
as statements, and in pairs within the same lexical scope (that is, the
\fBpthread_cleanup_push()\fR macro can be thought to expand to a token list
whose first token is '{' with
.B pthread_cleanup_pop()
expanding to a
token list whose last token is the corresponding '}').
.sp
.LP
The effect of the use of
.BR return ,
.BR break ,
.BR continue ,
and
\fBgoto\fR to prematurely leave a code block described by a pair of
\fBpthread_cleanup_push()\fR and \fBpthread_cleanup_pop()\fR function calls
is undefined.
.SS "Cancellation State"
.sp
.LP
Most programmers will use only the default cancellation state of
.BR PTHREAD_CANCEL_ENABLE ,
but can choose to change the state by using
.BR pthread_setcancelstate (3C),
which determines whether a thread is
cancelable at all. With the default
.I state
of
.BR PTHREAD_CANCEL_ENABLE ,
cancellation is enabled and the thread is
cancelable at points determined by its cancellation
.IR type .
See
.BR "Cancellation Type" .
.sp
.LP
If the
.I state
is
.BR PTHREAD_CANCEL_DISABLE ,
cancellation is
disabled, the thread is not cancelable at any point, and all cancellation
requests to it are held pending.
.sp
.LP
You might want to disable cancellation before a call to a cancel-unsafe
library, restoring the old cancel state when the call returns from the
library. See  \fBCancel-Safe\fR for explanations of cancel safety.
.SS "Cancellation Type"
.sp
.LP
A thread's cancellation
.B type
is set with
.BR pthread_setcanceltype (3C),
and determines whether the thread can be
canceled anywhere in its execution or only at cancellation points.
.sp
.LP
With the default
.I type
of
.BR PTHREAD_CANCEL_DEFERRED ,
the thread
is cancelable only at cancellation points, and then only when cancellation
is enabled.
.sp
.LP
If the
.I type
is
.BR PTHREAD_CANCEL_ASYNCHRONOUS ,
the thread is
cancelable at any point in its execution (assuming, of course, that
cancellation is enabled). Try to limit regions of asynchronous cancellation
to sequences with no external dependencies that could result in dangling
resources or unresolved state conditions. Using asynchronous cancellation is
discouraged because of the danger involved in trying to guarantee correct
cleanup handling at absolutely every point in the program.
.sp

.sp
.TS
tab() box;
cw(1.83i) |cw(1.83i) |cw(1.83i)
lw(1.83i) |lw(1.83i) |lw(1.83i)
.
Cancellation Type/State Table
TypeState
Enabled (Default)Disabled
_
Deferred (Default)T{
Cancellation occurs when the target thread reaches a cancellation point and a cancel is pending. (Default)
T}T{
All cancellation requests to the target thread are held pending.
T}
AsynchronousT{
Receipt of a \fBpthread_cancel()\fR call causes immediate cancellation.
T}T{
All cancellation requests to the target thread are held pending; as soon as cancellation is re-enabled, pending cancellations are executedimmediately.
T}
.TE

.SS "Cancel-Safe"
.sp
.LP
With the arrival of POSIX cancellation, the Cancel-Safe level has been
added to the list of MT-Safety levels. See
.BR attributes (5).
An
application or library is Cancel-Safe whenever it has arranged for cleanup
handlers to restore system or program state wherever cancellation can occur.
The application or library is specifically Deferred-Cancel-Safe when it is
Cancel-Safe for threads whose cancellation type is
.BR PTHREAD_CANCEL_DEFERRED .
See
.BR "Cancellation State" .
It is
specifically Asynchronous-Cancel-Safe when it is Cancel-Safe for threads
whose cancellation type is
.BR PTHREAD_CANCEL_ASYNCHRONOUS .
.sp
.LP
It is easier to arrange for deferred cancel safety, as this requires system
and program state protection only around cancellation points. In general,
expect that most applications and libraries are not
Asynchronous-Cancel-Safe.
.SS "POSIX Threads Only"
.sp
.LP
The cancellation functions described in this manual page are available for
POSIX threads, only (the Solaris threads interfaces do not provide
cancellation functions).
.SH EXAMPLES
.LP
\fBExample 1\fR Cancellation example
.sp
.LP
The following short C++ example shows the pushing/popping of cancellation
handlers, the disabling/enabling of cancellation, the use of
.BR pthread_testcancel() ,
and so on. The \fBfree_res()\fR cancellation
handler in this example is a dummy function that simply prints a message,
but that would free resources in a real application. The function \fBf2()\fR
is called from the main thread, and goes deep into its call stack by calling
itself recursively.

.sp
.LP
Before \fBf2()\fR starts running, the newly created thread has probably
posted a cancellation on the main thread since the main thread calls
\fBthr_yield()\fR right after creating thread2.  Because cancellation was
initially disabled in the main thread, through a call to
.BR pthread_setcancelstate() ,
the call to \fBf2()\fR from  \fBmain()\fR
continues and constructs X at each recursive call,  even though the main
thread has a pending cancellation.

.sp
.LP
When \fBf2()\fR is called for the fifty-first time (when \fB"i == 50"\fR),
\fBf2()\fR enables cancellation by calling
.BR pthread_setcancelstate() .
It then establishes a cancellation point for itself by calling
.BR pthread_testcancel() .
(Because a cancellation is pending, a call to a
cancellation point such as
.BR read (2)
or
.BR write (2)
would also
cancel the caller here.)

.sp
.LP
After the
.B main()
thread is canceled at the fifty-first iteration, all
the cleanup handlers that were pushed are called in sequence; this is
indicated by the calls to  \fBfree_res()\fR and the calls to the destructor
for
.IR X .
At each level, the C++ runtime calls the destructor for \fIX\fR
and then the cancellation handler,
.BR free_res() .
The print messages
from \fBfree_res()\fR and \fIX\fR's destructor show the sequence of calls.

.sp
.LP
At the end, the main thread is joined by thread2. Because the main thread
was canceled, its return status from
.B pthread_join()
is
.BR PTHREAD_CANCELED .
After the status is printed, thread2 returns,
killing the  process (since it is the last thread in the process).

.sp
.in +2
.nf
#include <pthread.h>
#include <sched.h>
extern "C" void thr_yield(void);

extern "C" void printf(.\|.\|.);

struct X {
        int x;
        X(int i){x = i; printf("X(%d) constructed.\en", i);}
        ~X(){ printf("X(%d) destroyed.\en", x);}
};

void
free_res(void *i)
{
        printf("Freeing `%d`\en",i);
}

char* f2(int i)
{
        try {
        X dummy(i);
        pthread_cleanup_push(free_res, (void *)i);
        if (i == 50) {
               pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL);
            pthread_testcancel();
        }
        f2(i+1);
        pthread_cleanup_pop(0);
        }
        catch (int) {
        printf("Error: In handler.\en");
        }
        return "f2";
}

void *
thread2(void *tid)
{
        void *sts;

        printf("I am new thread :%d\en", pthread_self());

        pthread_cancel((pthread_t)tid);

        pthread_join((pthread_t)tid, &sts);

        printf("main thread cancelled due to %d\en", sts);

        return (sts);
}

main()
{
        pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, NULL);
        pthread_create(NULL, NULL, thread2, (void *)pthread_self());
        thr_yield();
        printf("Returned from %s\en",f2(0));
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR read (2),
.BR sigwait (2),
.BR write (2),
.BR Intro (3),
.BR condition (5),
.BR pthread_cleanup_pop (3C),
.BR pthread_cleanup_push (3C),
.BR pthread_exit (3C),
.BR pthread_join (3C),
.BR pthread_setcancelstate (3C),
.BR pthread_setcanceltype (3C),
.BR pthread_testcancel (3C),
.BR setjmp (3C),
.BR attributes (5),
.BR standards (5)
