'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH resource_controls 5 "2 Jul 2007" "SunOS 5.11" "Standards, Environments, and Macros"
.SH NAME
resource_controls \- resource controls available through project database
.SH DESCRIPTION
.sp
.LP
The resource controls facility is configured through the project database.
See
.BR project (4).
You can set and modify resource controls through the
following utilities:
.RS +4
.TP
.ie t \(bu
.el o
.BR prctl (1)
.RE
.RS +4
.TP
.ie t \(bu
.el o
.BR projadd (1M)
.RE
.RS +4
.TP
.ie t \(bu
.el o
.BR projmod (1M)
.RE
.RS +4
.TP
.ie t \(bu
.el o
.BR rctladm (1M)
.RE
.sp
.LP
In a program, you use
.BR setrctl (2)
to set resource control values.
.sp
.LP
In addition to the preceding resource controls, there are resource pools,
accessible through the \fBpooladm\fR(1M) and \fBpoolcfg\fR(1M) utilities. In
a program, resource pools can be manipulated through the
.BR libpool (3LIB)
library.
.sp
.LP
The following are the resource controls are available:
.sp
.ne 2
.mk
.na
.B process.max-address-space
.ad
.sp .6
.RS 4n
Maximum amount of address space, as summed over segment sizes, that is
available to this process, expressed as a number of bytes.
.RE

.sp
.ne 2
.mk
.na
.B process.max-core-size
.ad
.sp .6
.RS 4n
Maximum size of a core file created by this process, expressed as a number
of bytes.
.RE

.sp
.ne 2
.mk
.na
.B process.max-cpu-time
.ad
.sp .6
.RS 4n
Maximum CPU time that is available to this process, expressed as a number
of seconds.
.RE

.sp
.ne 2
.mk
.na
.B process.max-data-size
.ad
.sp .6
.RS 4n
Maximum heap memory available to this process, expressed as a number of
bytes.
.RE

.sp
.ne 2
.mk
.na
.B process.max-file-descriptor
.ad
.sp .6
.RS 4n
Maximum file descriptor index available to this process, expressed as an
integer.
.RE

.sp
.ne 2
.mk
.na
.B process.max-file-size
.ad
.sp .6
.RS 4n
Maximum file offset available for writing by this process, expressed as a
number of bytes.
.RE

.sp
.ne 2
.mk
.na
.B process.max-msg-messages
.ad
.sp .6
.RS 4n
Maximum number of messages on a message queue (value copied from the
resource control at
.B msgget()
time), expressed as an integer.
.RE

.sp
.ne 2
.mk
.na
.B process.max-msg-qbytes
.ad
.sp .6
.RS 4n
Maximum number of bytes of messages on a message queue (value copied from
the resource control at
.B msgget()
time), expressed as a number of
bytes.
.RE

.sp
.ne 2
.mk
.na
.B process.max-port-events
.ad
.sp .6
.RS 4n
Maximum allowable number of events per event port, expressed as an
integer.
.RE

.sp
.ne 2
.mk
.na
.B process.max-sem-nsems
.ad
.sp .6
.RS 4n
Maximum number of semaphores allowed per semaphore set, expressed as an
integer.
.RE

.sp
.ne 2
.mk
.na
.B process.max-sem-ops
.ad
.sp .6
.RS 4n
Maximum number of semaphore operations allowed per
.B semop
call (value
copied from the resource control at
.B semget()
time). Expressed as an
integer, specifying the number of operations.
.RE

.sp
.ne 2
.mk
.na
.B process.max-stack-size
.ad
.sp .6
.RS 4n
Maximum stack memory segment available to this process, expressed as a
number of bytes.
.RE

.sp
.ne 2
.mk
.na
.B project.cpu-caps
.ad
.sp .6
.RS 4n
Maximum amount of CPU resources that a project can use. The unit used is
the percentage of a single CPU that can be used by all user threads in a
project. Expressed as an integer. The cap does not apply to threads running
in real-time scheduling class. This resource control does not support the
.B syslog
action.
.RE

.sp
.ne 2
.mk
.na
.B project.cpu-shares
.ad
.sp .6
.RS 4n
Number of CPU shares granted to a project for use with the fair share
scheduler (see
.BR FSS (7)).
The unit used is the number of shares (an
integer). This resource control does not support the
.B syslog
action.
.RE

.sp
.ne 2
.mk
.na
.B project.max-contracts
.ad
.sp .6
.RS 4n
Maximum number of contracts allowed in a project, expressed as an
integer.
.RE

.sp
.ne 2
.mk
.na
.B project.max-crypto-memory
.ad
.sp .6
.RS 4n
Maximum amount of kernel memory that can be used for crypto operations.
Allocations in the kernel for buffers and session-related structures are
charged against this resource control.
.RE

.sp
.ne 2
.mk
.na
.B project.max-locked-memory
.ad
.sp .6
.RS 4n
Total amount of physical memory locked by device drivers and user processes
(including D/ISM), expressed as a number of bytes.
.RE

.sp
.ne 2
.mk
.na
.B project.max-lwps
.ad
.sp .6
.RS 4n
Maximum number of LWPs simultaneously available to a project, expressed as
an integer.
.RE

.sp
.ne 2
.mk
.na
.B project.max-msg-ids
.ad
.sp .6
.RS 4n
Maximum number of message queue IDs allowed for a project, expressed as an
integer.
.RE

.sp
.ne 2
.mk
.na
.B project.max-port-ids
.ad
.sp .6
.RS 4n
Maximum allowable number of event ports, expressed as an integer.
.RE

.sp
.ne 2
.mk
.na
.B project.max-sem-ids
.ad
.sp .6
.RS 4n
Maximum number of semaphore IDs allowed for a project, expressed as an
integer.
.RE

.sp
.ne 2
.mk
.na
.B project.max-shm-ids
.ad
.sp .6
.RS 4n
Maximum number of shared memory IDs allowed for a project, expressed as an
integer.
.RE

.sp
.ne 2
.mk
.na
.B project.max-shm-memory
.ad
.sp .6
.RS 4n
Total amount of shared memory allowed for a project, expressed as a number
of bytes.
.RE

.sp
.ne 2
.mk
.na
.B project.max-tasks
.ad
.sp .6
.RS 4n
Maximum number of tasks allowable in a project, expressed as an integer.
.RE

.sp
.ne 2
.mk
.na
.B project.pool
.ad
.sp .6
.RS 4n
Binds a specified resource pool with a project.
.RE

.sp
.ne 2
.mk
.na
.B rcap.max-rss
.ad
.sp .6
.RS 4n
The total amount of physical memory, in bytes, that is available to
processes in a project.
.RE

.sp
.ne 2
.mk
.na
.B task.max-cpu-time
.ad
.sp .6
.RS 4n
Maximum CPU time that is available to this task's processes, expressed as a
number of seconds.
.RE

.sp
.ne 2
.mk
.na
.B task.max-lwps
.ad
.sp .6
.RS 4n
Maximum number of LWPs simultaneously available to this task's processes,
expressed as an integer.
.RE

.sp
.LP
The following zone-wide resource controls are available:
.sp
.ne 2
.mk
.na
.B zone.cpu-cap
.ad
.sp .6
.RS 4n
Sets a limit on the amount of CPU time that can be used by a zone. The unit
used is the percentage of a single CPU that can be used by all user threads
in a zone. Expressed as an integer. When projects within the capped zone
have their own caps, the minimum value takes precedence. This resource
control does not support the
.B syslog
action.
.RE

.sp
.ne 2
.mk
.na
.B zone.cpu-shares
.ad
.sp .6
.RS 4n
Sets a limit on the number of fair share scheduler (FSS) CPU shares for a
zone. CPU shares are first allocated to the zone, and then further
subdivided among projects within the zone as specified in the
.B project.cpu-shares
entries. Expressed as an integer. This resource
control does not support the
.B syslog
action.
.RE

.sp
.ne 2
.mk
.na
.B zone.max-locked-memory
.ad
.sp .6
.RS 4n
Total amount of physical locked memory available to a zone.
.RE

.sp
.ne 2
.mk
.na
.B zone.max-lwps
.ad
.sp .6
.RS 4n
Enhances resource isolation by preventing too many LWPs in one zone from
affecting other zones. A zone's total LWPs can be further subdivided among
projects within the zone within the zone by using
.BR project.max-lwps
entries. Expressed as an integer.
.RE

.sp
.ne 2
.mk
.na
.B zone.max-msg-ids
.ad
.sp .6
.RS 4n
Maximum number of message queue IDs allowed for a zone, expressed as an
integer.
.RE

.sp
.ne 2
.mk
.na
.B zone.max-sem-ids
.ad
.sp .6
.RS 4n
Maximum number of semaphore IDs allowed for a zone, expressed as an
integer.
.RE

.sp
.ne 2
.mk
.na
.B zone.max-shm-ids
.ad
.sp .6
.RS 4n
Maximum number of shared memory IDs allowed for a zone, expressed as an
integer.
.RE

.sp
.ne 2
.mk
.na
.B zone.max-shm-memory
.ad
.sp .6
.RS 4n
Total amount of shared memory allowed for a zone, expressed as a number of
bytes.
.RE

.sp
.ne 2
.mk
.na
.B zone.max-swap
.ad
.sp .6
.RS 4n
Total amount of swap that can be consumed by user process address space
mappings and
.B tmpfs
mounts for this zone.
.RE

.sp
.LP
See
.BR zones (5).
.SS "Units Used in Resource Controls"
.sp
.LP
Resource controls can be expressed as in units of size (bytes), time
(seconds), or as a count (integer). These units use the strings specified
below.
.sp
.in +2
.nf
Category             Res Ctrl      Modifier  Scale
                     Type String
-----------          -----------   --------  -----
Size                 bytes         B         1
                                   KB        2^10
                                   MB        2^20
                                   GB        2^30
                                   TB        2^40
                                   PB        2^50
                                   EB        2^60

Time                 seconds       s         1
                                   Ks        10^3
                                   Ms        10^6
                                   Gs        10^9
                                   Ts        10^12
                                   Ps        10^15
                                   Es        10^18

Count                integer       none      1
                                   K         10^3
                                   M         10^6
                                   G         10^9
                                   T         10^12
                                   P         10^15
                                   Es        10^18
.fi
.in -2

.sp
.LP
Scaled values can be used with resource controls. The following example
shows a scaled threshold value:
.sp
.in +2
.nf
task.max-lwps=(priv,1K,deny)
.fi
.in -2

.sp
.LP
In the
.B project
file, the value
.B 1K
is expanded to
.BR 1000 :
.sp
.in +2
.nf
task.max-lwps=(priv,1000,deny)
.fi
.in -2

.sp
.LP
A second example uses a larger scaled value:
.sp
.in +2
.nf
process.max-file-size=(priv,5G,deny)
.fi
.in -2

.sp
.LP
In the
.B project
file, the value
.B 5G
is expanded to
.BR 5368709120 :
.sp
.in +2
.nf
process.max-file-size=(priv,5368709120,deny)
.fi
.in -2

.sp
.LP
The preceding examples use the scaling factors specified in the table
above.
.sp
.LP
Note that unit modifiers (for example,
.BR 5G )
are accepted by the
.BR prctl (1),
.BR projadd (1M),
and
.BR projmod "(1M) commands. You"
cannot use unit modifiers in the project database itself.
.SS "Resource Control Values and Privilege Levels"
.sp
.LP
A threshold value on a resource control constitutes a point at which local
actions can be triggered or global actions, such as logging, can occur.
.sp
.LP
Each threshold value on a resource control must be associated with a
privilege level. The privilege level must be one of the following three
types:
.sp
.ne 2
.mk
.na
.B basic
.ad
.sp .6
.RS 4n
Can be modified by the owner of the calling process.
.RE

.sp
.ne 2
.mk
.na
.B privileged
.ad
.sp .6
.RS 4n
Can be modified by the current process (requiring \fBsys_resource\fR
privilege) or by
.BR prctl (1)
(requiring
.B proc_owner
privilege).
.RE

.sp
.ne 2
.mk
.na
.B system
.ad
.sp .6
.RS 4n
Fixed for the duration of the operating system instance.
.RE

.sp
.LP
A resource control is guaranteed to have one
.B system
value, which is
defined by the system, or resource provider. The
.B system
value
represents how much of the resource the current implementation of the
operating system is capable of providing.
.sp
.LP
Any number of privileged values can be defined, and only one basic value is
allowed. Operations that are performed without specifying a privilege value
are assigned a basic privilege by default.
.sp
.LP
The privilege level for a resource control value is defined in the
privilege field of the resource control block as
.BR RCTL_BASIC ,
.BR RCTL_PRIVILEGED ,
or
.BR RCTL_SYSTEM .
See
.BR setrctl (2)
for more
information. You can use the
.B prctl
command to modify values that are
associated with basic and privileged levels.
.sp
.LP
In specifying the privilege level of
.BR privileged ,
you can use the
abbreviation
.BR priv .
For example:
.sp
.in +2
.nf
task.max-lwps=(priv,1K,deny)
.fi
.in -2

.SS "Global and Local Actions on Resource Control Values"
.sp
.LP
There are two categories of actions on resource control values: global and
local.
.sp
.LP
Global actions apply to resource control values for every resource control
on the system. You can use \fBrctladm\fR(1M) to perform the following
actions:
.RS +4
.TP
.ie t \(bu
.el o
Display the global state of active system resource controls.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Set global logging actions.
.RE
.sp
.LP
You can disable or enable the global logging action on resource controls.
You can set the
.B syslog
action to a specific degree by assigning a
severity level, \fBsyslog=\fIlevel\fR. The possible settings for
.I level
are as follows:
.RS +4
.TP
.ie t \(bu
.el o
.B debug
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B info
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B notice
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B warning
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B err
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B crit
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B alert
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B emerg
.RE
.sp
.LP
By default, there is no global logging of resource control violations.
.sp
.LP
Local actions are taken on a process that attempts to exceed the control
value. For each threshold value that is placed on a resource control, you
can associate one or more actions. There are three types of local actions:
.BR none ,
.BR deny ,
and
.BR signal= .
These three actions are used as
follows:
.sp
.ne 2
.mk
.na
.B none
.ad
.sp .6
.RS 4n
No action is taken on resource requests for an amount that is greater than
the threshold. This action is useful for monitoring resource usage without
affecting the progress of applications. You can also enable a global message
that displays when the resource control is exceeded, while, at the same
time, the process exceeding the threshhold is not affected.
.RE

.sp
.ne 2
.mk
.na
.B deny
.ad
.sp .6
.RS 4n
You can deny resource requests for an amount that is greater than the
threshold. For example, a
.B task.max-lwps
resource control with action
deny causes a
.B fork()
system call to fail if the new process would
exceed the control value. See the
.BR fork (2).
.RE

.sp
.ne 2
.mk
.na
.B signal=
.ad
.sp .6
.RS 4n
You can enable a global signal message action when the resource control is
exceeded. A signal is sent to the process when the threshold value is
exceeded. Additional signals are not sent if the process consumes additional
resources. Available signals are listed below.
.RE

.sp
.LP
Not all of the actions can be applied to every resource control. For
example, a process cannot exceed the number of CPU shares assigned to the
project of which it is a member. Therefore, a deny action is not allowed on
the
.B project.cpu-shares
resource control.
.sp
.LP
Due to implementation restrictions, the global properties of each control
can restrict the range of available actions that can be set on the threshold
value. (See \fBrctladm\fR(1M).) A list of available signal actions is
presented in the following list. For additional information about signals,
see
.BR signal (3HEAD).
.sp
.LP
The following are the signals available to resource control values:
.sp
.ne 2
.mk
.na
.B SIGABRT
.ad
.sp .6
.RS 4n
Terminate the process.
.RE

.sp
.ne 2
.mk
.na
.B SIGHUP
.ad
.sp .6
.RS 4n
Send a hangup signal. Occurs when carrier drops on an open line. Signal
sent to the process group that controls the terminal.
.RE

.sp
.ne 2
.mk
.na
.B SIGTERM
.ad
.sp .6
.RS 4n
Terminate the process. Termination signal sent by software.
.RE

.sp
.ne 2
.mk
.na
.B SIGKILL
.ad
.sp .6
.RS 4n
Terminate the process and kill the program.
.RE

.sp
.ne 2
.mk
.na
.B SIGSTOP
.ad
.sp .6
.RS 4n
Stop the process. Job control signal.
.RE

.sp
.ne 2
.mk
.na
.B SIGXRES
.ad
.sp .6
.RS 4n
Resource control limit exceeded. Generated by resource control facility.
.RE

.sp
.ne 2
.mk
.na
.B SIGXFSZ
.ad
.sp .6
.RS 4n
Terminate the process. File size limit exceeded. Available only to resource
controls with the
.B RCTL_GLOBAL_FILE_SIZE
property
(\fBprocess.max-file-size\fR). See
.BR rctlblk_set_value (3C).
.RE

.sp
.ne 2
.mk
.na
.B SIGXCPU
.ad
.sp .6
.RS 4n
Terminate the process. CPU time limit exceeded. Available only to resource
controls with the
.B RCTL_GLOBAL_CPUTIME
property
(\fBprocess.max-cpu-time\fR). See
.BR rctlblk_set_value (3C).
.RE

.SS "Resource Control Flags and Properties"
.sp
.LP
Each resource control on the system has a certain set of associated
properties. This set of properties is defined as a set of flags, which are
associated with all controlled instances of that resource. Global flags
cannot be modified, but the flags can be retrieved by using either
.BR rctladm (1M)
or the
.BR setrctl (2)
system call.
.sp
.LP
Local flags define the default behavior and configuration for a specific
threshold value of that resource control on a specific process or process
collective. The local flags for one threshold value do not affect the
behavior of other defined threshold values for the same resource control.
However, the global flags affect the behavior for every value associated
with a particular control. Local flags can be modified, within the
constraints supplied by their corresponding global flags, by the \fBprctl\fR
command or the
.B setrctl
system call. See
.BR setrctl (2).
.sp
.LP
For the complete list of local flags, global flags, and their definitions,
see
.BR rctlblk_set_value (3C).
.sp
.LP
To determine system behavior when a threshold value for a particular
resource control is reached, use
.B rctladm
to display the global flags
for the resource control . For example, to display the values for
.BR process.max-cpu-time ,
enter:
.sp
.in +2
.nf
$ rctladm process.max-cpu-time
process.max-cpu-time  syslog=off [ lowerable no-deny cpu-time inf seconds ]
.fi
.in -2

.sp
.LP
The global flags indicate the following:
.sp
.ne 2
.mk
.na
.B lowerable
.ad
.sp .6
.RS 4n
Superuser privileges are not required to lower the privileged values for
this control.
.RE

.sp
.ne 2
.mk
.na
.B no-deny
.ad
.sp .6
.RS 4n
Even when threshold values are exceeded, access to the resource is never
denied.
.RE

.sp
.ne 2
.mk
.na
.B cpu-time
.ad
.sp .6
.RS 4n
.B SIGXCPU
is available to be sent when threshold values of this
resource are reached.
.RE

.sp
.ne 2
.mk
.na
.B seconds
.ad
.sp .6
.RS 4n
The time value for the resource control.
.RE

.sp
.LP
Use the
.B prctl
command to display local values and actions for the
resource control. For example:
.sp
.in +2
.nf
$ prctl -n process.max-cpu-time $$
    process 353939: -ksh
    NAME    PRIVILEGE    VALUE    FLAG   ACTION              RECIPIENT
 process.max-cpu-time
         privileged   18.4Es    inf   signal=XCPU                 -
         system       18.4Es    inf   none
.fi
.in -2

.sp
.LP
The
.B max
(\fBRCTL_LOCAL_MAXIMAL\fR) flag is set for both threshold
values, and the \fBinf\fR (\fBRCTL_GLOBAL_INFINITE\fR) flag is defined for
this resource control. An
.B inf
value has an infinite quantity. The
value is never enforced. Hence, as configured, both threshold quantities
represent infinite values that are never exceeded.
.SS "Resource Control Enforcement"
.sp
.LP
More than one resource control can exist on a resource. A resource control
can exist at each containment level in the process model. If resource
controls are active on the same resource at different container levels, the
smallest container's control is enforced first. Thus, action is taken on
.B process.max-cpu-time
before
.B task.max-cpu-time
if both controls
are encountered simultaneously.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
\fBATTRIBUTE TYPE\fR\fBATTRIBUTE VALUE\fR
_
Interface StabilityEvolving
.TE

.SH SEE ALSO
.sp
.LP
.BR prctl (1),
.BR pooladm (1M),
.BR poolcfg (1M),
.BR projadd (1M),
.BR projmod (1M),
.BR rctladm (1M),
.BR setrctl (2),
.BR rctlblk_set_value (3C),
.BR libpool (3LIB),
.BR project (4),
.BR attributes (5),
.BR FSS (7)
.sp
.LP
\fISystem Administration Guide:  Virtualization Using the Solaris Operating
System\fR
