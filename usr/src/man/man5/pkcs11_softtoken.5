'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH pkcs11_softtoken 5 "25 Mar 2008" "SunOS 5.11" "Standards, Environments, and Macros"
.SH NAME
pkcs11_softtoken \- Software RSA PKCS#11 softtoken
.SH SYNOPSIS
.LP
.nf
/usr/lib/security/pkcs11_softtoken.so
/usr/lib/security/64/pkcs11_softtoken.so
.fi

.SH DESCRIPTION
.sp
.LP
The
.B pkcs11_softtoken.so
object implements the RSA PKCS#11 v2.20
specification in software. Persistent storage for "token" objects is
provided by this PKCS#11 implementation.
.sp
.LP
Application developers should link to
.B libpkcs11.so
rather than link
directly to
.BR pkcs11_softtoken.so .
See
.BR libpkcs11 (3LIB).
.sp
.LP
The following cryptographic algorithms are implemented: DES, 3DES, AES,
Blowfish, RC4, MD5, SHA1, SHA256, SHA384, SHA512, RSA, DSA, DH, and ECC.
.sp
.LP
All of the Standard PKCS#11 functions listed on
.BR libpkcs11 (3LIB)
are
implemented except for the following:
.sp
.in +2
.nf
C_GetObjectSize
C_InitPIN
C_InitToken
C_WaitForSlotEvent
.fi
.in -2

.sp
.LP
A call to these functions returns
.BR CKR_FUNCTION_NOT_SUPPORTED .
.sp
.LP
The following RSA PKCS#11 v2.20 mechanisms are supported:
.sp
.in +2
.nf
CKM_RSA_PKCS_KEY_PAIR_GEN
CKM_RSA_PKCS
CKM_RSA_X_509

CKM_DSA_KEY_PAIR_GEN
CKM_DSA
CKM_DSA_SHA1

CKM_DH_PKCS_KEY_PAIR_GEN
CKM_DH_PKCS_DERIVE

CKM_EC_KEY_PAIR_GEN
CKM_ECDSA
CKM_ECDSA_SHA1
CKM_ECDH1_DERIVE

CKM_DES_KEY_GEN
CKM_DES_ECB
CKM_DES_CBC
CKM_DES_CBC_PAD

CKM_DES3_KEY_GEN
CKM_DES3_ECB
CKM_DES3_CBC
CKM_DES3_CBC_PAD

CKM_AES_KEY_GEN
CKM_AES_ECB
CKM_AES_CBC
CKM_AES_CBC_PAD
CKM_AES_CTR

CKM_BLOWFISH_KEY_GEN
CKM_BLOWFISH_CBC

CKM_RC4_KEY_GEN
CKM_RC4

CKM_MD5_RSA_PKCS
CKM_SHA1_RSA_PKCS
CKM_SHA256_RSA_PKCS
CKM_SHA384_RSA_PKCS
CKM_SHA512_RSA_PKCS

CKM_MD5
CKM_SHA_1
CKM_SHA256
CKM_SHA384
CKM_SHA512

CKM_MD5_HMAC
CKM_MD5_HMAC_GENERAL
CKM_SHA_1_HMAC
CKM_SHA_1_HMAC_GENERAL
CKM_SHA256_HMAC
CKM_SHA256_HMAC_GENERAL
CKM_SHA384_HMAC
CKM_SHA384_HMAC_GENERAL

CKM_MD5_KEY_DERIVATION
CKM_SHA1_KEY_DERIVATION
CKM_SHA256_KEY_DERIVATION
CKM_SHA384_KEY_DERIVATION
CKM_SHA512_KEY_DERIVATION

CKM_SSL3_PRE_MASTER_KEY_GEN
CKM_SSL3_MASTER_KEY_DERIVE
CKM_SSL3_KEY_AND_MAC_DERIVE
CKM_SSL3_MASTER_KEY_DERIVE_DH
CKM_TLS_PRE_MASTER_KEY_GEN
CKM_TLS_MASTER_KEY_DERIVE
CKM_TLS_KEY_AND_MAC_DERIVE
CKM_TLS_MASTER_KEY_DERIVE_DH
.fi
.in -2

.sp
.LP
Each of the following types of key objects has certain token-specific
attributes that are set to true by default as a result of object creation,
key/key pair generation, and key derivation.
.sp
.ne 2
.mk
.na
.B Public key object
.ad
.RS 22n
.rt
.BR CKA_ENCRYPT ,
.BR CKA_VERIFY ,
.B CKA_VERIFY_RECOVER
.RE

.sp
.ne 2
.mk
.na
.B Private key object
.ad
.RS 22n
.rt
.BR CKA_DECRYPT ,
.BR CKA_SIGN ,
.BR CKA_SIGN_RECOVER ,
.B CKA_EXTRACTABLE
.RE

.sp
.ne 2
.mk
.na
.B Secret key object
.ad
.RS 22n
.rt
.BR CKA_ENCRYPT ,
.BR CKA_DECRYPT ,
.BR CKA_SIGN ,
.BR CKA_VERIFY ,
.B CKA_EXTRACTABLE
.RE

.sp
.LP
The following certificate objects are supported:
.sp
.ne 2
.mk
.na
.B CKC_X_509
.ad
.RS 23n
.rt
For
.B CKC_X_509
certificate objects, the following attributes are
supported:
.BR CKA_SUBJECT ,
.BR CKA_VALUE ,
.BR CKA_LABEL ,
.BR CKA_ID ,
.BR CKA_ISSUER ,
.BR CKA_SERIAL_NUMBER ,
and
.BR CKA_CERTIFICATE_TYPE .
.RE

.sp
.ne 2
.mk
.na
.B CKC_X_509_ATTR_CERT
.ad
.RS 23n
.rt
For
.B CKC_X_509_ATTR_CERT
certificate objects, the following attributes
are supported:
.BR CKA_OWNER ,
.BR "CKA_VALUE, CKA_LABEL" ,
.BR CKA_SERIAL_NUMBER ,
.BR CKA_AC_ISSUER ,
.BR CKA_ATTR_TYPES ,
and
.BR CKA_CERTIFICATE_TYPE .
.RE

.sp
.LP
The search operation of objects matching the template is performed at
.BR C_FindObjectsInit .
The matched objects are cached for subsequent
.B C_FindObjects
operations.
.sp
.LP
The
.B pkcs11_softtoken.so
object provides a filesystem-based persistent
token object store for storing token objects. The default location of the
token object store is the user's home directory returned by
.BR getpwuid_r() .
The user can override the default location by using the
.B ${SOFTTOKEN_DIR}
environment variable.
.sp
.LP
If the token object store has never been initialized, the
.B C_Login()
function might return
.B CKR_OK
but the user will not be able to create,
generate, derive or find any private token object and receives
.BR CKR_PIN_EXPIRED .
.sp
.LP
The user must use the
.BR pktool (1)
.B setpin
command with the default
passphrase "changeme" as the old passphrase to change the passphrase of the
object store. This action is needed to initialize and set the passphrase to
a newly created token object store.
.sp
.LP
After logging into object store with the new passphrase that was set by the
.B pktool setpin
command, the user can create and store the private token
object in this newly created object store. Until the token object store is
initialized by
.BR setpin ,
the
.B C_Login()
function is allowed, but
all attempts by the user to create, generate, derive or find any private
token object fails with a
.B CKR_PIN_EXPIRED
error.
.sp
.LP
The PIN provided for
.B C_Login()
and
.B C_SetPIN()
functions can be
any string of characters with lengths between 1 and 256 and no embedded
nulls.
.SH RETURN VALUES
.sp
.LP
The return values for each of the implemented functions are defined and
listed in the RSA PKCS#11 v2.20 specification. See
http://www.rsasecurity.com
.SH FILES
.sp
.ne 2
.mk
.na
.IR user_home_directory /.sunw/pkcs11_softtoken\fR
.ad
.sp .6
.RS 4n
user's default token object store
.RE

.sp
.ne 2
.mk
.na
.B ${SOFTTOKEN_DIR}/pkcs11_softtoken
.ad
.sp .6
.RS 4n
alternate token object store
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelT{
MT-Safe with exceptions. See section 6.5.2 of RSA PKCS#11 v2.20.
T}
_
StandardPKCS#11 v2.20
.TE

.SH SEE ALSO
.sp
.LP
.BR pktool (1),
.BR cryptoadm (1M),
.BR libpkcs11 (3LIB),
.BR attributes (5),
.BR pkcs11_kernel (5)
.sp
.LP
RSA PKCS#11 v2.20 http://www.rsasecurity.com
