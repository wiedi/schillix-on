'\" te
.\" Copyright (c) 1992, X/Open Company Limited
.\"  All Rights Reserved  Portions Copyright (c) 1995, Sun Microsystems, Inc.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\"  All Rights Reserved
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH fnmatch 5 "28 Mar 1995" "SunOS 5.11" "Standards, Environments, and Macros"
.SH NAME
fnmatch \- file name pattern matching
.SH DESCRIPTION
.sp
.LP
The pattern matching notation described below  is used to specify patterns
for matching strings in the shell. Historically, pattern matching notation
is related to, but slightly different from, the regular expression notation.
For this reason, the description of the rules for this pattern matching
notation is based on the description of regular expression notation
described on the
.BR regex (5)
manual page.
.SS "Patterns Matching a Single Character"
.sp
.LP
The following
.I "patterns matching a single character"
match a single
character:
.IR "ordinary characters" ,
.I special pattern characters
and
.IR "pattern bracket expressions" .
The pattern bracket expression will also
match a single collating element.
.sp
.LP
An ordinary character is a pattern that matches itself. It can be any
character in the supported character set except for
.IR NUL ,
those special
shell characters that require quoting, and the following three special
pattern characters. Matching is based on the bit pattern used for encoding
the character, not on the graphic representation of the character. If any
character (ordinary, shell special, or pattern special) is quoted, that
pattern will match the character itself. The shell special characters always
require quoting.
.sp
.LP
When unquoted and outside a bracket expression, the following three
characters will have special meaning in the specification of patterns:
.sp
.ne 2
.mk
.na
.B ?
.ad
.RS 6n
.rt
A question-mark is a pattern that will match any character.
.RE

.sp
.ne 2
.mk
.na
.B *
.ad
.RS 6n
.rt
An asterisk is a pattern that will match multiple characters, as described
in
.BR "Patterns Matching Multiple Characters" ,
below.
.RE

.sp
.ne 2
.mk
.na
.B [
.ad
.RS 6n
.rt
The open bracket will introduce a pattern bracket expression.
.RE

.sp
.LP
The description of basic regular expression bracket expressions on the
.BR regex (5)
manual page also applies to the pattern bracket expression,
except that the exclamation-mark character
.B "( !"
.B )
replaces
the circumflex character (\fB^\fR) in its role in a \fInon-matching list\fR
in the regular expression notation. A bracket expression starting with an
unquoted circumflex character produces unspecified results.
.sp
.LP
The restriction on a circumflex in a bracket expression is to allow
implementations that support pattern matching using the circumflex as the
negation character in addition to the exclamation-mark. A portable
application must use something like \fB[\e^!\fR] to match either
character.
.sp
.LP
When pattern matching is used where shell quote removal is not performed
(such as in the argument to the
.B "find -name"
primary when
.B find
is being called using one of the
.B exec
functions, or in the
.I pattern
argument to the \fBfnmatch\fR(3C) function, special characters
can be escaped to remove their special meaning by preceding them with a
backslash character. This escaping backslash will be discarded. The sequence
\fB\e\e\fR represents one literal backslash. All of the requirements and
effects of quoting on ordinary, shell special and special pattern characters
will apply to escaping in this context.
.sp
.LP
Both quoting and escaping are described here because pattern matching must
work in three separate circumstances:
.RS +4
.TP
.ie t \(bu
.el o
Calling directly upon the shell, such as in pathname expansion or in a
.B case
statement. All of the following will match the string or file
.BR abc :
.sp

.sp
.TS
tab();
lw(1.01i) lw(1.18i) lw(1.1i) lw(1.1i) lw(1.11i)
lw(1.01i) lw(1.18i) lw(1.1i) lw(1.1i) lw(1.11i)
.
\fBabc\fR\fB"abc"\fR\fBa"b"c\fR\fBa\ebc\fR\fBa[b]c\fR
\fBa["b"]c\fR\fBa[\eb]c\fR\fBa["\eb"]c\fR\fBa?c\fR\fBa*c\fR
.TE

The following will not:
.sp

.sp
.TS
tab();
lw(1.83i) lw(1.83i) lw(1.83i)
.
\fB"a?c"\fR\fBa\e*c\fR\fBa\e[b]c\fR
.TE

.RE
.RS +4
.TP
.ie t \(bu
.el o
Calling a utility or function without going through a shell, as described
for
.BR find (1)
and the function \fBfnmatch\fR(3C)
.RE
.RS +4
.TP
.ie t \(bu
.el o
Calling utilities such as
.BR find ,
.BR cpio ,
.B tar
or
.BR pax
through the shell command line. In this case, shell quote removal is
performed before the utility sees the argument.  For example, in:
.sp
find /bin -name e\ec[\eh]o -print
.sp
after quote removal, the backslashes are presented to
.B find
and it
treats them as escape characters. Both precede ordinary characters, so the
.B c
and
.B h
represent themselves and
.B echo
would be found on
many historical systems (that have it in
.BR /bin ).
To find a file name
that contained shell special characters or pattern characters, both quoting
and escaping are required, such as:
.sp
\fBpax -r .\|.\|. "*a\e\|(\|\e?"\fR
.sp
to extract a filename ending with
.BR a(? .
.RE
.sp
.LP
Conforming applications are required to quote or escape the shell special
characters (sometimes called metacharacters). If used without this
protection, syntax errors can result or implementation extensions can be
triggered. For example, the KornShell supports a series of extensions based
on parentheses in patterns; see
.BR ksh (1)
.SS "Patterns Matching Multiple Characters"
.sp
.LP
The following rules are used to construct \fIpatterns matching multiple
characters\fR from
.IR "patterns matching a single character" :
.RS +4
.TP
.ie t \(bu
.el o
The asterisk (*) is a pattern that will match any string, including the
null string.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The concatenation of
.I "patterns matching a single character"
is a valid
pattern that will match the concatenation of the single characters or
collating elements matched by each of the concatenated patterns.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The concatenation of one or more
.IR "patterns matching a single character"
with one or more asterisks is a valid pattern. In such patterns, each
asterisk will match a string of zero or more characters, matching the
greatest possible number of characters that still allows the remainder of
the pattern to match the string.
.RE
.sp
.LP
Since each asterisk matches zero or more occurrences, the patterns
.B a*b
and
.B a**b
have identical functionality.
.sp
.LP
Examples:
.sp
.ne 2
.mk
.na
.B a[bc]
.ad
.RS 10n
.rt
matches the strings
.B ab
and
.BR ac .
.RE

.sp
.ne 2
.mk
.na
.B a*d
.ad
.RS 10n
.rt
matches the strings
.BR ad ,
.B abd
and
.BR abcd ,
but not the string
.BR abc .
.RE

.sp
.ne 2
.mk
.na
.B a*d*
.ad
.RS 10n
.rt
matches the strings
.BR ad ,
.BR abcd ,
.BR abcdef ,
.B aaaad
and
.BR adddd .
.RE

.sp
.ne 2
.mk
.na
.B *a*d
.ad
.RS 10n
.rt
matches the strings
.BR ad ,
.BR abcd ,
.BR efabcd ,
.B aaaad
and
.BR adddd .
.RE

.SS "Patterns Used for Filename Expansion"
.sp
.LP
The rules described so far in
.B "Patterns Matching"
.B Multiple
.B Characters
and
.B "Patterns Matching"
.B a Single
.B Character
are qualified by the following rules that apply when pattern
matching notation is used for filename expansion.
.RS +4
.TP
1.
The slash character in a pathname must be explicitly matched by using one
or more slashes in the pattern; it cannot be matched by the asterisk or
question-mark special characters or by a bracket expression. Slashes in the
pattern are identified before bracket expressions; thus, a slash cannot be
included in a pattern bracket expression used for filename expansion. For
example, the pattern
.B a[b/c]d
will not match such pathnames as
.B abd
or
.BR a/d .
It will only match a pathname of literally
.BR a[b/c]d .
.RE
.RS +4
.TP
2.
If a filename begins with a period (.), the period must be explicitly
matched by using a period as the first character of the pattern or
immediately following a slash character. The leading period will not be
matched by:
.sp
\(bu the asterisk or question-mark special characters
.sp
\(bu a bracket expression containing a non-matching list, such as:
.sp
.B [!a]
.sp
a range expression, such as:
.sp
\fB[%\(mi0]\fR
.sp
or a character class expression, such as:
.sp
.B [[:punct:]]
.sp
It is unspecified whether an explicit period in a bracket expression
matching list, such as:
.sp
.B [.abc]
.sp
can match a leading period in a filename.
.RE
.RS +4
.TP
3.
Specified patterns are matched against existing filenames and pathnames,
as appropriate.  Each component that contains a pattern character requires
read permission in the directory containing that component. Any component,
except the last, that does not contain a pattern character requires search
permission. For example, given the pattern:
.sp
.B /foo/bar/x*/bam
.sp
search permission is needed for directories
.B /
and
.BR foo ,
search
and read permissions are needed for directory
.BR bar ,
and search
permission is needed for each
.B x*
directory.
.sp
If the pattern matches any existing filenames or pathnames, the pattern
will be replaced with those filenames and pathnames, sorted according to the
collating sequence in effect in the current locale. If the pattern contains
an invalid bracket expression or does not match any existing filenames or
pathnames, the pattern string is left unchanged.
.RE
.SH SEE ALSO
.sp
.LP
.BR find (1),
.BR ksh (1),
.BR fnmatch (3C),
.BR regex (5)
