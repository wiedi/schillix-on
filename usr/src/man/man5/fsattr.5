'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH fsattr 5 "10 Oct 2007" "SunOS 5.11" "Standards, Environments, and Macros"
.SH NAME
fsattr \- extended file attributes
.SH DESCRIPTION
.sp
.LP
Attributes are logically supported as files within the file system.  The
file system is therefore augmented with an orthogonal name space of file
attributes. Any file (including attribute files) can have an arbitrarily
deep attribute tree associated with it. Attribute values are accessed by
file descriptors obtained through a special attribute interface.  This
logical view of "attributes as files" allows the leveraging of existing file
system interface functionality to support the construction, deletion, and
manipulation of attributes.
.sp
.LP
The special files "." and ".\|." retain their accustomed semantics within
the attribute hierarchy.  The "." attribute file refers to the current
directory and the ".\|." attribute file refers to the parent directory.  The
unnamed directory at the head of each attribute tree is considered the
"child" of the file it is associated with and the ".\|." file refers to the
associated file. For any non-directory file with attributes, the ".\|."
entry in the unnamed directory refers to a file that is not a directory.
.sp
.LP
Conceptually, the attribute model is fully general. Extended attributes can
be any type of file (doors, links, directories, and so forth) and can even
have their own attributes (fully recursive).  As a result, the attributes
associated with a file could be an arbitrarily deep directory hierarchy
where each attribute could have an equally complex attribute tree associated
with it.  Not all implementations are able to, or want to, support the full
model. Implementation are therefore permitted to reject operations that are
not supported.  For example, the implementation for the UFS file system
allows only regular files as attributes (for example, no sub-directories)
and rejects attempts to place attributes on attributes.
.sp
.LP
The following list details the operations that are rejected in the current
implementation:
.sp
.ne 2
.mk
.na
.B link
.ad
.RS 25n
.rt
Any attempt to create links between attribute and non-attribute space is
rejected to prevent security-related or otherwise sensitive attributes from
being exposed, and therefore manipulable, as regular files.
.RE

.sp
.ne 2
.mk
.na
.B rename
.ad
.RS 25n
.rt
Any attempt to rename between attribute and non-attribute space is rejected
to prevent an already linked file from being renamed and thereby
circumventing the
.B link
restriction above.
.RE

.sp
.ne 2
.mk
.na
.BR mkdir ,
.BR symlink ,
.B mknod
.ad
.RS 25n
.rt
Any attempt to create a "non-regular" file in attribute space is rejected
to reduce the functionality, and therefore exposure and risk, of the initial
implementation.
.RE

.sp
.LP
The entire available name space has been allocated to "general use" to
bring the implementation in line with the NFSv4 draft standard [NFSv4]. That
standard defines "named attributes" (equivalent to Solaris Extended
Attributes) with no naming restrictions.  All Sun applications making use of
opaque extended attributes will use the prefix "SUNW".
.SS "Shell-level API"
.sp
.LP
The command interface for extended attributes is the set of applications
provided by Solaris for the manipulation of attributes from the command
line. This interface consists of a set of existing utilities that have been
extended to be "attribute-aware", plus the \fBrunat\fR utility designed to
"expose" the extended attribute space so that extended attributes can be
manipulated as regular files.
.sp
.LP
The
.B -@
option enable utilities to manipulate extended attributes. As
a rule, this option enables the utility to enter into attribute space when
the utility is performing a recursive traversal of file system space. This
is a fully recursive concept. If the underlying file system supports
recursive attributes and directory structures, the
.B -@
option opens
these spaces to the file tree-walking algorithms.
.sp
.LP
The following utilities accommodate extended attributes (see the individual
manual pages for details):
.sp
.ne 2
.mk
.na
.B cp
.ad
.RS 8n
.rt
By default,
.B cp
ignores attributes and copies only file data.  This is
intended to maintain the semantics implied by
.B cp
currently, where
.RB "attributes (such as owner and mode) are not copied unless the" " -p"
option is specified. With the
.B -@
(or
.BR -p )
.RB option, " cp"
attempts to copy all attributes along with the file data.
.RE

.sp
.ne 2
.mk
.na
.B cpio
.ad
.RS 8n
.rt
The
.B -@
option informs
.B cpio
to archive attributes, but by
default
.B cpio
ignores extended attributes. See \fBExtended Archive
Formats\fR below for a description of the new archive records.
.RE

.sp
.ne 2
.mk
.na
.B du
.ad
.RS 8n
.rt
File sizes computed include the space allocated for any extended attributes
present.
.RE

.sp
.ne 2
.mk
.na
.B find
.ad
.RS 8n
.rt
By default,
.B find
ignores attributes.  The
.B -xattr
expression
provides support for searches involving attribute space. It returns true if
extended attributes are present on the current file.
.RE

.sp
.ne 2
.mk
.na
.B fsck
.ad
.RS 8n
.rt
The
.B fsck
utility manages extended attribute data on the disk. A file
system with extended attributes can be mounted on versions of Solaris that
are not attribute-aware (versions prior to Solaris 9), but the attributes
will not be accessible and
.B fsck
will strip them from the files and
place them in
.BR lost+found .
Once the attributes have been stripped the
file system is completely stable on Solaris versions that are not
attribute-aware, but would now be considered corrupted on attribute-aware
versions of Solaris. The attribute-aware
.B fsck
utility should be run to
stabilize the file system before using it in an attribute-aware
environment.
.RE

.sp
.ne 2
.mk
.na
.B fsdb
.ad
.RS 8n
.rt
This \fBfsdb\fR utility is able to find the inode for the "hidden" extended
attribute directory.
.RE

.sp
.ne 2
.mk
.na
.B ls
.ad
.RS 8n
.rt
The \fBls -@\fR command displays an "@" following the mode
information when extended attributes are present.  More precisely, the
output line for a given file contains an "@" character following the mode
characters if the
.BR pathconf (2)
variable
.B XATTR_EXISTS
is set to
true. See the
.B pathconf()
section below.  The
.B -@
option uses the
same general output format as the
.B -l
option.
.RE

.sp
.ne 2
.mk
.na
.B mv
.ad
.RS 8n
.rt
When a file is moved, all attributes are carried along with the file
rename. When a file is moved across a file system boundary, the copy command
invoked is similar to the
.B "cp -p"
variant described above and
extended attributes are "moved". If the extended file attributes cannot be
replicated, the move operation fails and the source file is not removed.
.RE

.sp
.ne 2
.mk
.na
.B pax
.ad
.RS 8n
.rt
The
.B -@
option informs
.B pax
to archive attributes, but by default
.B pax
ignores extended attributes.  The
.BR pax (1)
utility is a
generic replacement for both
.BR tar (1)
and
.BR cpio (1)
and is able to
produce either output format in its archive.  See \fBExtended Archive
Formats\fR below for a description of the new archive records.
.RE

.sp
.ne 2
.mk
.na
.B tar
.ad
.RS 8n
.rt
In the default case,
.B tar
does not attempt to place attributes in the
archive. If the
.B -@
option is specified, however,
.B tar
traverses
into the attribute space of all files being placed in the archive and
attempts to add the attributes to the archive. A new record type has been
introduced for extended attribute entries in
.B tar
archive files (the
same is true for
.B pax
and
.B cpio
archives) similar to the way ACLs
records were defined. See
.B "Extended Archive Formats"
below for a
description of the new archive records.
.RE

.sp
.LP
There is a class of utilities (\fBchmod\fR,
.BR chown ,
.BR chgrp )
that
one might expect to be modified in a manner similar to those listed above.
For example, one might expect that performing
.B chmod
on a file would
not only affect the file itself but would also affect at least the extended
attribute directory if not any existing extended attribute files.  This is
not the case.  The model chosen for extended attributes implies that the
attribute directory and the attributes themselves are all file objects in
their own right, and can therefore have independent file status attributes
associated with them  (a given implementation cannot support this, for
example, for intrinsic attributes).  The relationship is left undefined and
a fine-grained control mechanism (\fBrunat\fR(1)) is provided to allow
manipulation of extended attribute status attributes as necessary.
.sp
.LP
The
.B runat
utility has the following syntax:
.sp
.in +2
.nf
runat \fIfilename\fR [\fIcommand\fR]
.fi
.in -2
.sp

.sp
.LP
The
.B runat
utility executes the supplied command in the context of the
"attribute space" associated with the indicated file.  If no command
argument is supplied, a shell is invoked. See
.BR runat (1)
for details.
.SS "Application-level API"
.sp
.LP
The primary interface required to access extended attributes at the
programmatic level is the
.BR openat (2)
function. Once a file descriptor
has been obtained for an attribute file by an
.B openat()
call, all
normal file system semantics apply. There is no attempt to place special
semantics on
.BR read (2),
.BR write (2),
.BR ftruncate (3C),
or other
functions when applied to attribute file descriptors relative to "normal"
file descriptors.
.sp
.LP
The set of existing attributes can be browsed by calling
.BR openat()
with "." as the file name and the \fBO_XATTR\fR flag set, resulting in a
file descriptor for the attribute directory.  The list of attributes is
obtained by calls to
.BR getdents (2)
on the returned file descriptor.  If
the target file did not previously have any attributes associated with it,
an empty top-level attribute directory is created for the file and
subsequent \fBgetdents()\fR calls will return only "." and ".\|.".  While
the owner of the parent file owns the extended attribute directory, it is
not charged against its quota if the directory is empty.  Attribute files
themselves, however, are charged against the user quota as any other regular
file.
.sp
.LP
Additional system calls have been provided as convenience functions. These
include the
.BR fchownat (2),
.BR fstatat (2),
.BR futimesat (2),
.BR renameat (2),
.BR unlinkat (2).
These new functions, along with
.BR openat() ,
provide a mechanism to access files relative to an arbitrary
point in the file system, rather than only the current working directory.
This mechanism is particularly useful in situations when a file descriptor
is available with no path. The
.B openat()
function, in particular, can
be used in many contexts where
.B chdir()
or
.B fchdir()
is currently
required. See
.BR chdir (2).
.SS "Open a file relative to a file descriptor"
.sp
.in +2
.nf
int openat (int \fIfd\fR, const char *\fIpath\fR, int \fIoflag\fR [, mode_t \fImode\fR])
.fi
.in -2

.sp
.LP
The
.BR openat (2)
function behaves exactly as
.BR open (2)
except when
given a relative path.  Where
.B open()
resolves a relative path from the
current working directory,
.B openat()
resolves the path based on the
vnode indicated by the supplied file descriptor. When
.I oflag
is
.BR O_XATTR ,
.B openat()
interprets the
.I path
argument as an
extended attribute reference. The following code fragment uses
.B openat()
to examine the attributes of some already opened file:
.sp
.in +2
.nf
dfd = openat(fd, ".", O_RDONLY|O_XATTR);
(void)getdents(dfd, buf, nbytes);
.fi
.in -2

.sp
.LP
If
.B openat()
is passed the special value
.B AT_FDCWD
as its first
(\fIfd\fR) argument, its behavior is identical to \fBopen()\fR and the
relative path arguments are interpreted relative to the current working
directory. If the
.B O_XATTR
flag is provided to
.B openat()
or to
.BR open() ,
the supplied path is interpreted as a reference to an extended
attribute on the current working directory.
.SS "Unlink a file relative to a directory file descriptor"
.sp
.in +2
.nf
int unlinkat (int \fIdirfd\fR, const char *path\fIflag\fR, int flag\fIflag\fR)
.fi
.in -2

.sp
.LP
The
.BR unlinkat (2)
function deletes an entry from a directory.  The
.I path
argument indicates the name of the entry to remove. If \fIpath\fR
an absolute path, the
.I dirfd
argument is ignored. If it is a relative
path, it is interpreted relative to the directory indicated by the
.I dirfd
argument. If
.I dirfd
does not refer to a valid directory,
the function returns
.BR ENOTDIR .
If the special value
.B AT_FDCWD
is
specified for
.IR dirfd ,
a relative path argument is resolved relative to
the current working directory.  If the
.I flag
argument is 0, all other
semantics of this function are equivalent to
.BR unlink (2).
If \fIflag\fR
is set to
.BR AT_REMOVEDIR ,
all other semantics of this function are
equivalent to
.BR rmdir (2).
.SS "Rename a file relative to directories"
.sp
.in +2
.nf
int renameat (int \fIfromfd\fR, const char *\fIold\fR, int \fItofd\fR, const char *\fInew\fR)
.fi
.in -2

.sp
.LP
The
.BR renameat (2)
function renames an entry in a directory, possibly
moving the entry into a different directory.  The
.I old
argument
indicates the name of the entry to rename.  If this argument is a relative
path, it is interpreted relative to the directory indicated by the \fIfd\fR
argument. If it is an absolute path, the
.I fromfd
argument is ignored.
The
.I new
argument indicates the new name for the entry.  If this
argument is a relative path, it is interpreted relative to the directory
indicated by the
.I tofd
argument. If it is an absolute path, the
.I tofd
argument is ignored.
.sp
.LP
In the relative path cases, if the directory file descriptor arguments do
not refer to a valid directory, the function returns
.BR ENOTDIR .
All
other semantics of this function are equivalent to
.BR rename (2).
.sp
.LP
If a special value
.B AT_FDCWD
is specified for either the \fIfromfd\fR
or \fItofd\fR arguments, their associated path arguments (\fIold\fR and
.IR new )
are interpreted relative to the current working directory if they
are not specified as absolute paths. Any attempt to use
.B renameat()
to
move a file that is not an extended attribute into an extended attribute
directory (so that it becomes an extended attribute) will fail. The same is
true for an attempt to move a file that is an extended attribute into a
directory that is not an extended attribute directory.
.SS "Obtain information about a file"
.sp
.in +2
.nf
int fstatat (int \fIfd\fR, const char *\fIpath\fR, struct stat* \fIbuf\fR, int \fIflag\fR)
.fi
.in -2

.sp
.LP
The
.BR fstatat (2)
function obtains information about a file.  If the
.I path
argument is relative, it is resolved relative to the \fIfd\fR
argument file descriptor, otherwise the
.I fd
argument is ignored.  If
the
.I fd
argument is a special value
.B AT_FDCWD
the path is resolved
relative to the current working directory.  If the
.I path
argument is a
null pointer, the function returns information about the file referenced by
the \fIfd\fR argument.  In all other relative path cases, if the \fIfd\fR
argument does not refer to a valid directory, the function returns
.BR ENOTDIR .
If
.B AT_SYMLINK_NOFOLLOW
is set in the \fIflag\fR
argument, the function will not automatically traverse a symbolic link at
the position of the path. If
.B _AT_TRIGGER
is set in the \fIflag\fR
argument and the vnode is a trigger mount point, the mount is performed and
the function returns the attributes of the root of the mounted filesystem.
The
.B fstatat()
function is a multipurpose function that can be used in
place of
.BR stat() ,
.BR lstat() ,
or
.BR fstat() .
See
.BR stat (2)
.sp
.LP
The function call \fBstat(\fIpath\fB,\fR \fIbuf\fB)\fR is
identical to \fBfstatat(AT_FDCWD\fR, \fIpath\fB,\fR \fIbuf\fB,
0)\fR.
.sp
.LP
The function call \fBlstat(\fIpath\fB,\fR \fIbuf\fB)\fR is
identical to \fBfstatat(AT_FDCWD\fR, \fIpath\fB,\fR \fIbuf\fR,
.B AT_SYMLINK_NOFOLLOW)
.sp
.LP
The function call \fBfstat(\fIfildes\fB,\fR \fIbuf\fB)\fR is
identical to \fBfstatat(\fIfildes\fR, \fBNULL\fR,
.IR buf ,
.BR 0) .
.SS "Set owner and group ID"
.sp
.in +2
.nf
int fchownat (int \fIfd\fR, const char *\fIpath\fR, uid_t \fIowner\fR, gid_t \fIgroup\fR, \e
          int \fIflag\fR)
.fi
.in -2

.sp
.LP
The
.BR fchownat (2)
function sets the owner ID and group ID for a file.
If the
.I path
argument is relative, it is resolved relative to the
.I fd
argument file descriptor, otherwise the
.I fd
argument is
ignored. If the
.I fd
argument is a special value
.B AT_FDCWD
the path
is resolved relative to the current working directory.  If the path argument
is a null pointer, the function sets the owner and group ID of the file
referenced by the
.I fd
argument.  In all other relative path cases, if
the
.I fd
argument does not refer to a valid directory, the function
returns
.BR ENOTDIR .
If the
.I flag
argument is set to
.BR AT_SYMLINK_NOFOLLOW ,
the function will not automatically traverse a
symbolic link at the position of the path. The
.B fchownat()
function is
a multi-purpose function that can be used in place of
.BR chown() ,
.BR lchown() ,
or
.BR fchown() .
See
.BR chown (2).
.sp
.LP
The function call \fBchown(\fIpath\fB,\fR \fIowner\fB,\fR
\fIgroup\fB)\fR is equivalent to \fBfchownat(AT_FDCWD\fR,
\fIpath\fB,\fR \fIowner\fB,\fR \fIgroup\fB, 0)\fR.
.sp
.LP
The function call \fBlchown(\fIpath\fB,\fR \fIowner\fB,\fR
\fIgroup\fB)\fR is equivalent to \fBfchownat(AT_FDCWD\fR,
\fIpath\fB,\fR \fIowner\fB,\fR \fIgroup\fB,
AT_SYMLINK_NOFOLLOW)\fR.
.SS "Set file access and modification times"
.sp
.in +2
.nf
int futimesat (int \fIfd\fR, const char *\fIpath\fR, const struct timeval \e
              \fItimes\fR[2])
.fi
.in -2

.sp
.LP
The
.BR futimesat (2)
function sets the access and modification times for
a file.  If the
.I path
argument is relative, it is resolved relative to
the \fIfd\fR argument file descriptor; otherwise the \fIfd\fR argument is
ignored. If the
.I fd
argument is the special value
.BR AT_FDCWD ,
the
path is resolved relative to the current working directory.  If the
.I path
argument is a null pointer, the function sets the access and
modification times of the file referenced by the
.I fd
argument. In all
other relative path cases, if the
.I fd
argument does not refer to a
valid directory, the function returns
.BR ENOTDIR .
The \fBfutimesat()\fR
function can be used in place of
.BR utimes (2).
.sp
.LP
The function call \fButimes(\fIpath\fB,\fR \fItimes\fB)\fR is
equivalent to \fBfutimesat(AT_FDCWD\fR, \fIpath\fB,\fR
\fItimes\fB)\fR.
.SS "New pathconf() functionality"
.sp
.in +2
.nf
long int pathconf(const char *\fIpath\fR, int \fIname\fR)
.fi
.in -2

.sp
.LP
Two variables have been added to
.BR pathconf (2)
to provide enhanced
support for extended attribute manipulation. The \fBXATTR_ENABLED\fR
variable allows an application to determine if attribute support is
currently enabled for the file in question. The
.B XATTR_EXISTS
variable
allows an application to determine whether there are any extended attributes
associated with the supplied path.
.SS "Open/Create an attribute file"
.sp
.in +2
.nf
int attropen (const char *\fIpath\fR, const char *\fIattrpath\fR, int \fIoflag\fR \e
         [, mode_t \fImode\fR])
.fi
.in -2

.sp
.LP
The \fBattropen\fR(3C) function returns a file descriptor for the named
attribute,
.IR attrpath ,
of the file indicated by
.IR path .
The
.I oflag
and
.I mode
arguments are identical to the
.BR open (2)
arguments and are applied to the open operation on the attribute file (for
example, using the
.B O_CREAT
flag creates a new attribute).  Once
opened, all normal file system operations can be used on the attribute file
descriptor. The
.B attropen()
function is a convenience function and is
equivalent to the following sequence of operations:
.sp
.in +2
.nf
fd = open (path, O_RDONLY);
attrfd = openat(fd, attrpath, oflag|O_XATTR, mode);
close(fd);
.fi
.in -2

.sp
.LP
The set of existing attributes can be browsed by calling
.BR attropen()
with "." as the attribute name.  The list of attributes is obtained by
calling
.BR getdents (2)
(or \fBfdopendir\fR(3C) followed by
.BR readdir (3C),
see below) on the returned file descriptor.
.SS "Convert an open file descriptor for a directory into a directory descriptor"
.sp
.in +2
.nf
DIR * fdopendir (const int \fIfd\fR)
.fi
.in -2

.sp
.LP
The \fBfdopendir\fR(3C) function promotes a file descriptor for a directory
to a directory pointer suitable for use with the \fBreaddir\fR(3C) function.
The originating file descriptor should not be used again following the call
to
.BR fdopendir() .
The directory pointer should be closed with a call to
.BR closedir (3C).
If the provided file descriptor does not reference a
directory, the function returns
.BR ENOTDIR .
This function is useful in
circumstances where the only available handle on a directory is a file
descriptor. See
.BR attropen (3C)
and
.BR openat (2).
.SS "Using the API"
.sp
.LP
The following examples demonstrate how the API might be used to perform
basic operations on extended attributes:
.LP
.B Example 1
List extended attributes on a file.
.sp
.in +2
.nf
attrdirfd = attropen("test", ".", O_RDONLY);
dirp = fdopendir(attrdirfd);
while (dp = readdir(dirp)) {
\&...
.fi
.in -2

.LP
.B Example 2
Open an extended attribute.
.sp
.in +2
.nf
attrfd = attropen("test", dp->d_name, O_RDONLY);
.fi
.in -2

.sp
.LP
or

.sp
.in +2
.nf
attrfd = openat(attrdirfd, dp->d_name, O_RDONLY);
.fi
.in -2

.LP
.B Example 3
Read from an extended attribute.
.sp
.in +2
.nf
while (read(attrfd, buf, 512) > 0) {
\&...
.fi
.in -2

.LP
.B Example 4
Create an extended attribute.
.sp
.in +2
.nf
newfd = attropen("test", "attr", O_CREAT|O_RDWR);
.fi
.in -2

.sp
.LP
or

.sp
.in +2
.nf
newfd = openat(attrdirfd, "attr", O_CREAT|O_RDWR);
.fi
.in -2

.LP
.B Example 5
Write to an extended attribute.
.sp
.in +2
.nf
count = write(newfd, buf, length);
.fi
.in -2

.LP
.B Example 6
Delete an extended attribute.
.sp
.in +2
.nf
error = unlinkat(attrdirfd, "attr");
.fi
.in -2

.sp
.LP
Applications intending to access the interfaces defined here as well as the
POSIX and X/Open specification-conforming interfaces should define the macro
.B _ATFILE_SOURCE
to be 1 and set whichever feature test macros are
appropriate to obtain the desired environment. See
.BR standards (5).
.SS "Extended Archive Formats"
.sp
.LP
As noted above in the description of command utilities modified to provide
support for extended attributes, the archive formats for
.BR tar (1)
and
.BR cpio (1)
have been extended to provide support for archiving extended
attributes. This section describes the specifics of the archive format
extensions.
.SS "Extended tar format"
.sp
.LP
The
.B tar
archive is made up of a series of 512 byte blocks. Each
archived file is represented by a header block and zero or more data blocks
containing the file contents. The header block is structured as shown in the
following table.
.sp

.sp
.TS
tab();
cw(1.83i) cw(1.83i) cw(1.83i)
lw(1.83i) lw(1.83i) lw(1.83i)
.
Field NameLength (in Octets)Description
Name100File name string
Mode812 file mode bits
Uid8User ID of file owner
Gid8Group ID of file owner
Size12Size of file
Mtime12File modification time
Chksum8File contents checksum
Typeflag1File type flag
Linkname100Link target name if file linked
Magic6"ustar"
Version2"00"
Uname32User name of file owner
Gname32Group name of file owner
Devmajor8Major device ID if special file
Devminor8Minor device ID if special file
Prefix155Path prefix string for file
.TE

.sp
.LP
The extended attribute project extends the above header format by defining
a new header type (for the
.B Typeflag
field). The type 'E' is defined to
be used for all extended attribute files. Attribute files are stored in the
.B tar
archive as a sequence of two
.B "<header ,data>"
pairs. The first
file contains the data necessary to locate and name the extended attribute
in the file system. The second file contains the actual attribute file data.
Both files use an 'E' type header. The prefix and name fields in extended
attribute headers are ignored, though they should be set to meaningful
values for the benefit of archivers that do not process these headers.
Solaris archivers set the prefix field to "\fB/dev/null\fR" to prevent
archivers that do not understand the type 'E' header from trying to restore
extended attribute files in inappropriate places.
.SS "Extended cpio format"
.sp
.LP
The
.B cpio
archive format is octet-oriented rather than block-oriented.
Each file entry in the archive includes a header that describes the file,
followed by the file name, followed by the contents of the file.  These data
are arranged as described in the following table.
.sp

.sp
.TS
tab();
cw(1.83i) cw(1.83i) cw(1.83i)
lw(1.83i) lw(1.83i) lw(1.83i)
.
\fBField Name\fRLength (in Octets)Description
\fBc_magic\fR670707
\fBc_dev\fR6First half of unique file ID
\fBc_ino\fR6Second half of unique file ID
\fBc_mode\fR6File mode bits
\fBc_uid\fR6User ID of file owner
\fBc_gid\fR6Group ID of file owner
\fBc_nlink\fR6Number of links referencing file
\fBc_rdev\fR6Information for special files
\fBc_mtime\fR11Modification time of file
\fBc_namesize\fR6Length of file pathname
\fBc_filesize\fR11Length of file content
\fBc_name\fR\fBc_namesize\fRFile pathname
\fBc_filedata\fR\fBc_filesize\fRFile content
.TE

.sp
.LP
The basic archive file structure is not changed for extended attributes.
The file type bits stored in the
.B c_mode
field for an attribute file
are set to
.BR 0xB000 .
As with the
.B tar
archive format, extended
attributes are stored in
.B cpio
archives as two consecutive file
entries. The first file describes the location/name for the extended
attribute. The second file contains the actual attribute file content. The
.B c_name
field in extended attribute headers is ignored, though it
should be set to a meaningful value for the benefit of archivers that do not
process these headers.  Solaris archivers start the pathname with
"\fB/dev/null/\fR"to prevent archivers that do not understand the type 'E'
header from trying to restore extended attribute files in inappropriate
places.
.SS "Attribute identification data format"
.sp
.LP
Both the
.B tar
and
.B cpio
archive formats can contain the special
files described above, always paired with the extended attribute data
record, for identifying the precise location of the extended attribute.
These special data files are necessary because there is no simple naming
mechanism for extended attribute files. Extended attributes are not visible
in the file system name space. The extended attribute name space must be
"tunneled into" using the \fBopenat()\fR function. The attribute
identification data must support not only the flat naming structure for
extended attributes, but also the possibility of future extensions allowing
for attribute directory hierarchies and recursive attributes. The data file
is therefore composed of a sequence of records. It begins with a fixed
length header describing  the content. The following table describes the
format of this data file.
.sp

.sp
.TS
tab();
cw(1.7i) cw(1.76i) cw(2.04i)
lw(1.7i) lw(1.76i) lw(2.04i)
.
Field NameLength (in Octets)Description
\fBh_version\fR7Name file version
\fBh_size\fR10Length of data file
\fBh_component_len\fR10Total length of all path segments
\fBh_link_comp_len\fR10Total length of all link segments
\fBpath\fR\fBh_component_len\fRComplex path
\fBlink_path\fR\fBh_link_comp_len\fRComplex link path
.TE

.sp
.LP
As demonstrated above, the header is followed by a record describing the
"path" to the attribute file. This path is composed of two or more path
segments separated by a null character. Each segment describes a path rooted
at the hidden extended attribute directory of the leaf file of the previous
segment, making it possible to name attributes on attributes.  The first
segment is always the path to the parent file that roots the entire sequence
in the normal name space. The following table describes the format of each
segment.
.sp

.sp
.TS
tab();
cw(1.57i) cw(1.74i) cw(2.19i)
lw(1.57i) lw(1.74i) lw(2.19i)
.
Field NameLength (in Octets)Description
_
\fBh_namesz\fR7Length of segment path
\fBh_typeflag\fR1Actual file type of attribute file
\fBh_names\fR\fBh_namesz\fRParent path + segment path
.TE

.sp
.LP
If the attribute file is linked to another file, the path record is
followed by a second record describing the location of the referencing file.
The structure of this record is identical to the record described above.
.SH SEE ALSO
.sp
.LP
.BR cp (1),
.BR cpio (1),
.BR find (1),
.BR ls (1),
.BR mv (1),
.BR pax (1),
.BR runat (1),
.BR tar (1),
.BR du (1),
.BR fsck (1M),
.BR chown (2),
.BR link (2),
.BR open (2),
.BR pathconf (2),
.BR rename (2),
.BR stat (2),
.BR unlink (2),
.BR utimes (2),
.BR attropen (3C),
.BR standards (5)
