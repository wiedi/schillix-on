'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH sip_get_dialog_state 3SIP "11 Jan 2008" "SunOS 5.11" "Session Initiation Protocol Library Functions"
.SH NAME
sip_get_dialog_state, sip_get_dialog_callid, sip_get_dialog_local_tag,
sip_get_dialog_remote_tag, sip_get_dialog_local_uri,
sip_get_dialog_remote_uri, sip_get_dialog_local_contact_uri,
sip_get_dialog_remote_target_uri, sip_get_dialog_route_set,
sip_get_dialog_local_cseq, sip_get_dialog_remote_cseq, sip_get_dialog_type,
sip_get_dialog_method, sip_is_dialog_secure, sip_get_dialog_msgcnt \- get
dialog attributes
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lsip\fR [ \fIlibrary\fR .\|.\|. ]
#include <sip.h>

\fBint\fR \fBsip_get_dialog_state\fR(\fBsip_dialog_t\fR \fIdialog\fR, \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_dialog_callid\fR(\fBsip_dialog_t\fR \fIdialog\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fBsip_get_dialog_local_tag\fR(\fBsip_dialog_t\fR \fIdialog\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fBsip_get_dialog_remote_tag\fR(\fBsip_dialog_t\fR \fIdialog\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst struct sip_uri *\fBsip_get_dialog_local_uri\fR(\fBsip_dialog_t\fR \fIdialog\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst struct sip_uri *\fBsip_get_dialog_remote_uri\fR(\fBsip_dialog_t\fR \fIdialog\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst struct sip_uri *\fBsip_get_dialog_local_contact_uri\fR(
     \fBsip_dialog_t\fR \fIdialog\fR, \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst struct sip_uri *\fBsip_get_dialog_remote_target_uri\fR(
     \fBsip_dialog_t\fR \fIdialog\fR, \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fBsip_get_dialog_route_set\fR(\fBsip_dialog_t\fR \fIdialog\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBboolean_t\fR \fBsip_is_dialog_secure\fR(\fBsip_dialog_t\fR \fIdialog\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBuint32_t\fR \fBsip_get_dialog_local_cseq\fR(\fBsip_dialog_t\fR \fIdialog\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBuint32_t\fR \fBsip_get_dialog_remote_cseq\fR(\fBsip_dialog_t\fR \fIdialog\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBint\fR \fBsip_get_dialog_type\fR(\fBsip_dialog_t\fR \fIdialog\fR,\fBint *\fIerror\fR);
.fi

.LP
.nf
\fBint\fR \fBsip_get_dialog_method\fR(\fBsip_dialog_t\fR \fIdialog\fR,\fBint *\fIerror\fR);
.fi

.LP
.nf
\fBint\fR \fBsip_get_dialog_msgcnt\fR(\fBsip_dialog_t\fR \fIdialog\fR,\fBint *\fIerror\fR);
.fi

.SH DESCRIPTION
.sp
.LP
For functions that return a pointer of type
.BR sip_str_t ,
\fBsip_str_t\fR is supplied by:
.sp
.in +2
.nf
typedef struct sip_str {
     char	*sip_str_ptr;
     int	sip_str_len;
}sip_str_t;
.fi
.in -2

.sp
.LP
The
.I sip_str_ptr
parameter points to the start of the returned value
and
.I sip_str_len
supplies the length of the returned value.
.sp
.LP
The
.B sip_get_dialog_state()
returns the state of the
.IR dialog .
A
\fIdialog\fR can be in one of the following states:
.br
.in +2
.B SIP_DLG_NEW
.in -2
.br
.in +2
.B SIP_DLG_EARLY
.in -2
.br
.in +2
.B SIP_DLG_CONFIRMED
.in -2
.br
.in +2
.B SIP_DLG_DESTROYED
.in -2
.sp
.LP
The
.B sip_get_dialog_callid()
function returns the call ID value
maintained in the
.IR dialog .
.sp
.LP
The
.B sip_get_dialog_local_tag()
and
.BR sip_get_dialog_remote_tag()
functions return the local and remote tag values, maintained in the
.IR dialog .
.sp
.LP
The
.BR sip_get_dialog_local_uri() ,
.BR sip_get_dialog_remote_uri() ,
.BR sip_get_dialog_local_contact_uri() ,
and
\fBsip_get_dialog_remote_target_uri()\fR functions return the local, remote,
local contract, and the remote target \fBURI\fRs, maintained in the
.IR dialog .
.sp
.LP
The
.B sip_get_dialog_route_set()
function returns the route set, if
any, maintained in the
.IR dialog .
.sp
.LP
The
.B sip_get_dialog_local_cseq()
and
\fBsip_get_dialog_remote_cseq()\fR functions return the local and remote
\fBCSEQ\fR numbers maintained in the
.IR dialog .
.sp
.LP
The
.B sip_get_dialog_type()
function returns one of the following
dialog types, depending on whether it is created by the client or the
server.
.sp
.ne 2
.mk
.na
.B SIP_UAC_DIALOG
.ad
.RS 18n
.rt
created by client
.RE

.sp
.ne 2
.mk
.na
.B SIP_UAS_DIALOG
.ad
.RS 18n
.rt
created by server
.RE

.sp
.LP
The
.B sip_get_dialog_method()
function returns the
.B SIP
method,
\fBINVITE\fR or
.BR SUBSCRIBE ,
of the request that created the dialog.
.sp
.LP
The
.B sip_is_dialog_secure()
function returns
.B B_TRUE
if the
\fIdialog\fR is secure and \fBB_FALSE\fR otherwise.
.sp
.LP
The
.B sip_get_dialog_msgcnt()
function returns the number of SIP
messages (requests and responses) that were sent and received within the
context of the given dialog.
.SH RETURN VALUES
.sp
.LP
The
.BR sip_get_dialog_state() ,
.BR sip_get_dialog_local_cseq() ,
.BR sip_get_dialog_remote_cseq() ,
.BR sip_get_dialog_type() ,
.BR sip_get_dialog_method() ,
and
.B sip_get_dialog_msgcnt()
functions
return the required value on success and
.B -1
on failure.
.sp
.LP
The
.BR sip_get_dialog_callid() ,
.BR sip_get_dialog_local_tag() ,
.BR sip_get_dialog_remote_tag() ,
.BR sip_get_dialog_local_uri() ,
.BR sip_get_dialog_remote_uri() ,
.BR sip_get_dialog_local_contact_uri() ,
.BR sip_get_dialog_remote_target_uri() ,
and
\fBsip_get_dialog_route_set()\fR functions return the required value on
success and
.B NULL
on failure.
.sp
.LP
The value of
.B errno
is not changed by these calls in the event of an
error.
.SH ERRORS
.sp
.LP
These functions take an
.I error
argument.
.sp
.LP
If the error is non-null, one of the following values is set:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.sp .6
.RS 4n
The
.I dialog
is
.B NULL
or the stack is not configured to manage
dialogs.
.RE

.sp
.ne 2
.mk
.na
.B ENOTSUP
.ad
.sp .6
.RS 4n
The input
.B SIP
message cannot be modified.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.sp .6
.RS 4n
The memory allocation fails when the request/response line or the headers
in the
.B ACK
request are created.
.RE

.sp
.LP
On success, the value of the location pointed to by
.I error
is set to
.BR 0 .
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR libsip (3LIB)
