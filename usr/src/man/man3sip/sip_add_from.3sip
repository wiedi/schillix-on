'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH sip_add_from 3SIP "09 Feb 2007" "SunOS 5.11" "Session Initiation Protocol Library Functions"
.SH NAME
sip_add_from, sip_add_to, sip_add_contact, sip_add_via, sip_add_maxforward,
sip_add_callid, sip_add_cseq, sip_add_content_type, sip_add_content,
sip_add_accept, sip_add_accept_enc, sip_add_accept_lang, sip_add_alert_info,
sip_add_allow, sip_add_call_info, sip_add_content_disp, sip_add_content_enc,
sip_add_content_lang, sip_add_date, sip_add_error_info, sip_add_expires,
sip_add_in_reply_to, sip_add_mime_version, sip_add_min_expires, sip_add_org,
sip_add_priority, sip_add_reply_to, sip_add_passertedid, sip_add_ppreferredid,
sip_add_require, sip_add_retry_after, sip_add_route, sip_add_record_route,
sip_add_server, sip_add_subject, sip_add_supported, sip_add_tstamp,
sip_add_unsupported, sip_add_user_agent, sip_add_warning, sip_add_rseq,
sip_add_privacy, sip_add_rack, sip_add_author, sip_add_authen_info,
sip_add_proxy_authen, sip_add_proxy_author, sip_add_proxy_require,
sip_add_www_authen, sip_add_allow_events, sip_add_event, sip_add_substate \-
add
specific SIP headers to the SIP message
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lsip\fR [ \fIlibrary\fR .\|.\|. ]
#include <sip.h>

\fBint\fR \fIsip_add_from\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIdisplay_name\fR, \fBchar *\fIfrom_uri\fR,
     \fBchar *\fIfrom_tag\fR, \fBboolean_t\fR \fIadd_aquot\fR, \fBchar *\fIfrom_params\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_to\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIdisplay_name\fR, \fBchar *\fIto_uri\fR,
     \fBchar *\fIto_tag\fR, \fBboolean_t\fR \fIadd_aquot\fR, \fBchar *\fIto_params\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_contact\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIdisplay_name\fR,
     \fBchar *\fIcontact_uri\fR, \fBboolean_t\fR \fIadd_aquot\fR, \fBchar *\fIcontact_params\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_via\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIsent_protocol_transport\fR,
     \fBchar *\fIsent_by_host\fR, \fBint\fR \fIsent_by_port\fR, \fBchar *\fIvia_params\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_maxforward\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBuint_t\fR \fImaxforward\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_callid\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIcallid\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_cseq\fR(\fBsip_msg_t\fR \fIsip_msg,\fR \fBsip_method_t\fR \fImethod\fR, \fBuint32_t\fR \fIcseq\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_content_type\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fR \fItype\fR, \fBchar *\fIsubtype\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_content\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fR \fIcontent\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_accept\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fItype\fR, \fBchar *\fIsubtype\fR,
     \fBchar *\fImedia_param\fR, \fBchar *\fIaccept_param\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_accept_enc\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIcode\fR,
     \fBchar *\fIparam\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_accept_lang\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIlang\fR,
     \fBchar *\fIparam\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_alert_info\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIalert\fR,
     \fBchar *\fIparam\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_allow\fR(\fBsip_msg_t\fR \fIsip_msg,\fR \fBsip_method_t\fR \fImethod_name\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_call_info\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIuri\fR,
     \fBchar *\fIparam\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_content_disp\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIdis_type\fR, \fBchar *\fIparam\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_content_enc\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIcode\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_content_lang\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIlang\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_date\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIdate\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_error_info\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIuri\fR, \fBchar *\fIparam\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_expires\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBint\fR \fIsecs\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_in_reply_to\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIreply_id\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_mime_version\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIversion\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_min_expires\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBint\fR \fIsecs\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_org\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIorg\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_priority\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIprio\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_reply_to\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIdisplay_name\fR,
     \fBchar *\fIaddr\fR, \fBchar *\fIparam\fR, \fBboolean_t\fR \fIadd_aquot\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_passertedid\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIdisplay_name\fR,
     \fBchar *\fIaddr\fR, \fBboolean_t\fR \fIadd_aqout\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_ppreferredid\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIdisplay_name\fR,
     \fBchar *\fIaddr\fR, \fBboolean_t\fR \fIadd_aquot\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_require\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIreq\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_retry_after\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBint\fR \fIsecs\fR, \fBchar *\fIcmt\fR,
     \fBchar *\fIparam\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_route\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIdisplay_name\fR, \fBchar *\fIuri\fR,
     \fBchar *\fIroute_params\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_record_route\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIdisplay_name\fR,
     \fBchar *\fIuri\fR, \fBchar *\fIroute_params\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_server\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIsvr\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_subject\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIsubject\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_supported\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIsupport\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_tstamp\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fItime\fR, \fBchar *\fIdelay\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_unsupported\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIunsupport\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_user_agent\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIusr\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_warning\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBint\fR \fIcode\fR, \fBchar *\fIaddr\fR, \fBchar *\fImsg\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_privacy\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIpriv_val\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_rseq\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBint\fR \fIresp_num\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_rack\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBint\fR \fIresp_num\fR, \fBint\fR \fIcseq\fR,
     \fBsip_method_t\fR \fImethod\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_author\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIscheme\fR, \fBchar *\fIparam\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_authen_info\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIainfo\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_proxy_authen\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIpascheme\fR,
     \fBchar *\fIparam\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_proxy_author\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIpascheme\fR,
     \fBchar *\fIparam\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_proxy_require\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIopt\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_www_authen\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIwascheme\fR,
     \fBchar *\fIparam\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_allow_events\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIevents\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_event\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIevent\fR, \fBchar *\fIparam\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_add_substate\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBchar *\fIsub\fR, \fBchar *\fIparam\fR);
.fi

.SH DESCRIPTION
.sp
.LP
For each of the following functions that add a header to a
.B SIP
message,
the function adds a
.B CRLF
before appending the header to the
.BR SIP
message.
.sp
.LP
The \fBsip_add_from()\fR and
.B sip_add_to()
functions appends a \fBFROM\fR
and
.B TO
header respectively to the
.B SIP
message
.IR sip_msg .
The
header is created using the
.IR display_name ,
if non-null, and the
.I uri
values. The
.I add_aquot
parameter is used to specify whether the
.IR uri
should be enclosed within '\fI<>\fR\&'. If a
.I display_name
is provided then
.I add_aquot
cannot be
.BR B_FALSE .
The
.I display_name
parameter, if
provided, is enclosed within quotes before creating to the
.B SIP
header. Tag
value for the
.B FROM/TO
header can be specified which will be added to the
\fBSIP\fR header by prefixing it with "\fBTAG=\fR". Any generic parameters can be
specified as the last argument, which will be added, as is, to the
.B SIP
header.
.sp
.LP
Either the tag or the generic parameter can be specified not both, if both are
specified, the resulting header contains only the tag parameter.
.sp
.LP
The
.B sip_add_contact()
function appends a
.B CONTACT
header to the
.B SIP
message
.I sip_msg
using the
.I display_name
and
.IR contact_uri .
The
.I add_aquot
parameter has the same semantics as in
\fBsip_add_from()\fR/\fBsip_add_to()\fR. Any contact parameters specified in
.I contact_param
is added to the
.B CONTACT
header before appending the
header to the message.
.sp
.LP
The
.B sip_add_via()
function appends a
.B VIA
header to the
.BR SIP
message
.IR sip_msg .
The
.B VIA
header is constructed using
.BR sent_protocol_transport ,
.B sent_by_host
and
.IR sent_by_port .
A value
of
.B 0
for
.I sent_by_port
means that the port information is not present
in the resulting
.B VIA
header. The
.B VIA
header that is created has the
protocol set to "\fBSIP\fR" and version set to "2.0". Any parameters specific in
.I via_params
is added to the
.B VIA
header before appending the header to
the
.B SIP
message.
.sp
.LP
The
.B sip_add_maxforward()
function appends a
.B MAX-FORWARDS
header to
the
.B SIP
message
.I sip_msg
using the value in
.IR maxforward .
The
.I maxforward
value is a positive integer.
.sp
.LP
The
.B sip_add_callid()
function appends a
.B CALL-ID
header to the
.B SIP
message
.I sip_msg
using the value in
.IR callid ,
if non-null. If
.I callid
is null, this function creates a
.B CALL-ID
header using a
randomly generated value.
.sp
.LP
The
.B sip_add_cseq()
function appends a
.B CSEQ
header to the
.BR SIP
message using the values in
.I method
and
.IR cseq .
Permissible values for
method include:
.br
.in +2
INVITE
.in -2
.br
.in +2
ACK
.in -2
.br
.in +2
OPTIONS
.in -2
.br
.in +2
BYE
.in -2
.br
.in +2
CANCEL
.in -2
.br
.in +2
REGISTER
.in -2
.br
.in +2
REFER
.in -2
.br
.in +2
SUBSCRIBE
.in -2
.br
.in +2
NOTIFY
.in -2
.br
.in +2
PRACK
.in -2
.br
.in +2
INFO
.in -2
.sp
.LP
The
.I cseq
value is a positive integer.
.sp
.LP
The
.B sip_add_content_type()
function appends a
.B CONTENT-TYPE
to the
.B SIP
message
.IR sip_msg .
The
.B CONTENT-TYPE
is created using the type
and subtype, both should be non-null.
.sp
.LP
The
.B sip_add_content()
function adds a message body to the
.BR SIP
message
.IR sip_msg .
The message body is given by the null terminated string
contents. Once the function returns, the caller may reuse or delete contents as
.B sip_add_content()
creates a new buffer and copies over contents for its
use.
.sp
.LP
The
.B sip_add_accept()
function appends an
.B ACCEPT
header to the
.B SIP
message
.IR sip_msg .
The
.B ACCEPT
header is created using type
and subtype. If both type and subtype are null, then an empty
.B ACCEPT
header
is added to the
.B SIP
message. If type is non-null, but subtype is null, then
the
.B ACCEPT
header has the specified type and sets the subtype in the header
to '\fB*\fR'. Any
.I accept_param
or
.IR media_param ,
if provided, are added
to the
.B ACCEPT
header before appending the header to the
.BR SIP
message.
.sp
.LP
The
.B sip_add_accept_enc()
function appends an
.B ACCEPT-ENCODING
header
to the
.B SIP
message
.IR sip_msg .
The
.B ACCEPT-ENCODING
is created
using code. Any parameter specified in
.I param
is added to the
.B ACCEPT-ENCODING
header before appending the header to the
.BR SIP
message.
.sp
.LP
The
.B sip_add_accept_lang()
function appends an
.B ACCEPT-LANGUAGE
header
to the
.B SIP
message
.IR sip_msg .
The
.B ACCEPT-LANGUAGE
header is
created using lang. Any parameter specified in
.I param
is added to the
.B ACCEPT-LANGUAGE
header before appending the header to the
.BR SIP
message.
.sp
.LP
The
.B sip_add_alert_info()
function appends an
.B ALERT-INFO
header to
the
.B SIP
message
.IR sip_msg .
The
.B ALERT-INFO
header is created using
alert. Any parameter specified in
.I param
is added to the
.BR ALERT-INFO
header before appending the header to the
.B SIP
message.
.sp
.LP
The
.B sip_add_allow()
function appends an
.B ALLOW
header to the
.B SIP
message
.IR sip_msg .
The
.B ALLOW
header is created using alert
and method. Permissible values for method include:
.br
.in +2
INVITE
.in -2
.br
.in +2
ACK
.in -2
.br
.in +2
OPTIONS
.in -2
.br
.in +2
BYE
.in -2
.br
.in +2
CANCEL
.in -2
.br
.in +2
REGISTER
.in -2
.br
.in +2
REFER
.in -2
.br
.in +2
INFO
.in -2
.br
.in +2
SUBSCRIBE
.in -2
.br
.in +2
NOTIFY
.in -2
.br
.in +2
PRACK
.in -2
.sp
.LP
The
.B sip_add_call_info()
function appends a
.B CALL-INFO
header to the
.B SIP
message
.IR sip_msg .
The
.B CALL-INFO
header is created using
.IR uri .
Any parameter specified in
.I param
is added to the
.BR CALL-INFO
before appending the header to the
.B SIP
message.
.sp
.LP
The
.B sip_add_content_disp()
function appends a
.BR CONTENT-DISPOSITION
header to the
.B SIP
message
.IR sip_msg .
The
.BR CONTENT-DISPOSITION
header is created using
.IR disp_type .
Any parameter specified in
.IR param
is added to the
.B CONTENT-DISPOSITION
header before appending the header to
the
.B SIP
message.
.sp
.LP
The
.B sip_add_content_enc()
function appends a
.B CONTENT-ENCODING
header
to the
.B SIP
message
.IR sip_msg .
The
.B CONTENT-ENCODING
header is
created using code.
.sp
.LP
The
.B sip_add_content_lang()
function appends a
.BR CONTENT-LANGUAGE
header to the
.B SIP
message
.IR sip_msg .
The
.B CONTENT-LANGUAGE
header
is created using
.IR lang .
.sp
.LP
The
.B sip_add_date()
appends a
.B DATE
header to the
.B SIP
message
.IR sip_msg .
The
.B DATE
header is created using the date information
specified in date. The semantics for the date string is given is RFC 3261,
section 25.1.
.sp
.LP
The
.B sip_add_error_info()
function appends an
.B ERROR-INFO
header to
the
.B SIP
message
.IR sip_msg .
The
.B ERROR-INFO
header is created using
.IR uri .
An parameters specified in
.I param
is added to the
.B ERROR-INFO
header before adding the header to the
.B SIP
message.
.sp
.LP
The
.B sip_add_expires()
function appends an
.B EXPIRES
header to the
.B SIP
message
.IR sip_msg .
The
.B EXPIRES
header is created using the
seconds specified in
.IR secs .
.sp
.LP
The
.B sip_add_in_reply_to()
function appends a
.B IN-REPLY-TO
header to
the
.B SIP
message
.IR sip_msg .
The
.B IN-REPLY-TO
header is created
using the
.I call-id
value specified in
.IR reply_id .
.sp
.LP
The
.B sip_add_mime_version()
function appends a
.B MIME-VERSION
header to
the
.B SIP
message
.IR sip_msg .
The
.B MIME-VERSION
header is created
using version.
.sp
.LP
The
.B sip_add_min_expires()
function appends a
.B MIN-EXPIRES
header to
the
.B SIP
message
.IR sip_msg .
The
.B MIN-EXPIRES
is created using the
time in seconds specified in
.IR secs .
.sp
.LP
The
.B sip_add_org()
function appends a
.B ORGANIZATION
header to the
.B SIP
message
.IR sip_msg .
The
.B ORGANIZATION
header is created using
the information specified in
.IR org .
.sp
.LP
The
.B sip_add_priority()
function appends a
.B PRIORITY
header to the
.B SIP
message
.IR sip_msg .
The
.B PRIORITY
header is created using the
value specified in
.IR prio .
.sp
.LP
The
.B sip_add_reply_to()
function appends a
.B REPLY-TO
header to the
.B SIP
message
.IR sip_msg .
The
.B REPLY-TO
header is created using the
.IR display_name ,
if provided, and
.IR addr .
The
.I add_aquot
parameter
.RB "has the same semantics as in " sip_add_from() / sip_add_to() .
Any
parameters specified in
.I param
is added to the
.B REPLY-TO
header before
appending the header to the
.B SIP
message.
.sp
.LP
The
.B sip_add_passertedid()
function appends a
.BR P-ASSERTED-IDENTITY
header to the
.B SIP
message
.IR sip_msg .
The
.BR P-ASSERTED-IDENTITY
header is created using the
.IR display_name ,
if provided, and the
.IR addr .
The
.I add_aquot
parameter has the same semantics as in
.BR sip_add_from()\fR/\fBsip_add_to() .
.sp
.LP
.RB "The " sip_add_ppreferredid() " function appends a " P-PREFERRED-IDENTITY 
header to the
.B SIP
message
.IR sip_msg .
The
.BR P-PREFERRED-IDENTITY
header is created using the
.IR display_name ,
if provided, and the
.IR addr .
The
.I add_aquot
parameter has the same semantics as in
.BR sip_add_from()\fR/\fBsip_add_to() .
.sp
.LP
The
.B sip_add_require()
function appends a
.B REQUIRE
header to the
.B SIP
message
.IR sip_msg .
The
.B REQUIRE
header is created using the
information in
.IR req .
.sp
.LP
The
.B sip_add_retry_after()
function appends a
.B RETRY-AFTER
header to
the
.B SIP
message
.IR sip_msg .
The
.B RETRY-AFTER
is created using the
time in seconds specified in
.I secs
comments, if any, in
.IR cmt .
Any
parameters specified in
.IR param ,
if provided, is added to the
.B RETRY-AFTER
header before appending the header to the
.B SIP
message.
.sp
.LP
The
.B sip_add_route()
function appends a
.B ROUTE
header to the
.BR SIP
message
.IR sip_msg .
The
.B ROUTE
header is created using the
.IR display_name ,
if any, and the
.IR uri .
The
.I uri
is enclosed in '<>'
before adding to the header. Parameters specified in
.I route_params
are added
to the
.B ROUTE
header before appending the header to the
.B SIP
message.
.sp
.LP
The
.B sip_add_record_route()
function appends a
.B RECORD-ROUTE
header to
the
.B SIP
message
.IR sip_msg .
The
.B RECORD-ROUTE
header is created
using the
.IR display_name ,
if any, and the
.IR uri .
The
.I uri
parameter
is enclosed in '<>' before adding to the header. Any parameters specified in
.I route_params
is added to the
.B ROUTE
header before appending the header
to the
.B SIP
message.
.sp
.LP
The
.B sip_add_server()
function appends a
.B SERVER
header to the
.B SIP
message
.IR sip_msg .
The
.B SERVER
header is created using the
information in
.IR srv .
.sp
.LP
The
.B sip_add_subject()
function appends a
.B SUBJECT
header to the
.B SIP
message
.IR sip_msg .
The
.B SUBJECT
header is created using the
information in
.IR subject .
.sp
.LP
The
.B sip_add_supported()
function appends a
.B SUPPORTED
header to the
.B SIP
message
.IR sip_msg .
The
.B SUPPORTED
header is created using the
information in
.IR support .
.sp
.LP
The
.B sip_add_tstamp()
function appends a
.B TIMESTAMP
header to the
.B SIP
message
.IR sip_msg .
The
.B TIMESTAMP
header is created using the
time value in
.I time
and the delay value, if provided, in
.IR delay .
.sp
.LP
The
.B sip_add_unsupported()
function appends an
.B UNSUPPORTED
header to
the
.B SIP
message
.IR sip_msg .
The
.B UNSUPPORTED
header is created
using the
.B option-tag
value in
.IR unsupport .
.sp
.LP
The
.B sip_add_user_agent()
function appends an
.B USER-AGENT
header to
the
.B SIP
message
.IR sip_msg .
The
.B USER-AGENT
header is created using
the
.B server-val
specified in
.IR usr .
.sp
.LP
The
.B sip_add_warning()
function appends a
.B WARNING
header to the
.B SIP
message
.IR sip_msg .
The
.B WARNING
header is created using the
.B warn-code
in
.IR code ,
.B warn-agent
in
.I addr
and
.BR warn-test
in
.IR msg .
.sp
.LP
The
.B sip_add_privacy()
function appends a
.B PRIVACY
header to the
.B SIP
message
.IR sip_msg .
The
.B PRIVACY
header  is created using the
privacy value specified in
.IR priv_val .
.sp
.LP
The
.B sip_add_rseq()
function appends a
.B RSEQ
header to the
.BR SIP
message
.IR sip_msg .
The
.B RSEQ
header is created using the sequence number
specified in
.IR resp_num .
.sp
.LP
The
.B sip_add_rack()
function appends a
.B RACK
header to the
.BR SIP
message
.IR sip_msg .
The
.B RACK
header is created using the sequence number
in
.IR resp_num ,
the
.B SIP
method in
.I method
and the
.B CSEQ
number
in
.IR cseq .
Permissible values for method include:
.BR INVITE ,
.BR ACK ,
.BR OPTIONS ,
.BR BYE ,
.BR CANCEL ,
.BR REGISTER ,
.BR REFER ,
.BR INFO ,
.BR SUBSCRIBE ,
.BR NOTIFY ,
.BR PRACK .
.sp
.LP
The
.B sip_add_author()
function appends an
.B AUTHORIZATION
header to the
.B SIP
message
.IR sip_msg .
The
.B AUTHORIZATION
header is created using
scheme. Any parameter specified in
.I param
is added to the
.B AUTHORIZATION
header before the header is appended to the
.BR SIP
message.
.sp
.LP
.RB "The " sip_add_authen_info() " function appends an " AUTHENTICATION-INFO() 
header to the
.B SIP
message
.IR sip_msg .
The
.BR AUTHENTICATION-INFO
header is created using the authentication information in
.IR ainfo .
.sp
.LP
The
.B sip_add_proxy_authen()
function appends a
.BR PROXY-AUTHENTICATE
header to the
.B SIP
message
.IR sip_msg .
The
.B PROXY-AUTHENTICATE
is
created using the value specified in
.IR psacheme .
Any parameter in
.IR param
is added to the
.B PROXY-AUTHENTICATE
header before adding the header to the
.B SIP
message.
.sp
.LP
The
.B sip_add_proxy_author()
function appends a
.BR PROXY-AUTHORIZATION
header to the
.B SIP
message
.IR sip_msg .
The
.BR PROXY-AUTHORIZATION
header is created using the value specified in
.IR pascheme .
Any parameter in
.I param
is added to the
.B PROXY-AUTHORIZATION
header before adding the
header to the
.B SIP
message.
.sp
.LP
The
.B sip_add_proxy_require()
function appends a
.B PROXY-REQUIRE
header
to the
.B SIP
message
.IR sip_msg .
The
.B PROXY-REQUIRE
header is created
using the
.B option-tag
in
.IR opt .
.sp
.LP
The
.B sip_add_www_authen()
function appends a
.B WWW-AUTHENTICATE
header
to the
.B SIP
message
.IR sip_msg .
The
.B WWW-AUTHENTICATE
header is
created using the challenge in
.IR wascheme .
Any parameter in
.I param
is
added to the
.B WWW-AUTHENTICATE
header before adding the header to the
.B SIP
message.
.sp
.LP
The
.B sip_add_allow_events()
function appends an
.B ALLOW-EVENTS
header
to the
.B SIP
message The
.B ALLOW-EVENTS
header is created using the event
specified in events.
.sp
.LP
The
.B sip_add_event()
function appends an
.B EVENT
header to the
.B SIP
message. The
.B EVENT
header is created using the value specified in
.IR event .
Any parameter in
.I param
is added to the
.B EVENT
header
before appending the header to the
.B SIP
message.
.sp
.LP
The
.B sip_add_substate()
function appends a
.B SUBSCRIPTION-STATE
header
to the
.B SIP
message. The
.B SUBSCRIPTION-STATE
header is created using
the
.B state
specified in
.IR sub .
Any parameter in
.I param
is added to
the
.B SUBSCRIPTION-STATE
header before appending the header to the
.BR SIP
message.
.SH RETURN VALUES
.sp
.LP
These functions return
.B 0
on success and the appropriate error value on
failure.
.SH ERRORS
.sp
.LP
On failure, functions that return an error value can return one of the
following:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
Mandatory parameters are not provided, i.e. null.
.sp
For
.BR sip_add_from() ,
.BR sip_add_to() ,
.BR sip_add_contact() ,
.BR sip_add_reply_to() ,
.BR sip_add_passertedid() ,
.B sip_add_ppreferredid()
if
.I display_name
is non-null and
.I add_aquot
is
.BR B_FALSE .
.sp
For
.B sip_add_branchid_to_via()
the topmost
.B VIA
header already has a
branch
.I param
or the
.B SIP
message does not have a
.B VIA
header.
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 10n
.rt
The message cannot be modified.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
There is an error allocating memory for creating headers/parameters.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR libsip (3LIB)
