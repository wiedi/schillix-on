'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH sip_is_sip_uri 3SIP "10 Feb 2007" "SunOS 5.11" "Session Initiation Protocol Library Functions"
.SH NAME
sip_is_sip_uri, sip_get_uri_scheme, sip_get_uri_host, sip_get_uri_user,
sip_get_uri_password, sip_get_uri_port, sip_get_uri_params,
sip_get_uri_headers, sip_get_uri_opaque, sip_get_uri_query,
sip_get_uri_path, sip_get_uri_regname, sip_is_uri_teluser,
sip_get_uri_errflags, sip_uri_errflags_to_str \- get URI related
attributes
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lsip\fR [ \fIlibrary\fR .\|.\|. ]
#include <sip.h>

\fBboolean_t\fR \fIsip_is_sip_uri\fR(\fBconst struct sip_uri *\fIsip_uri\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_uri_scheme\fR(\fBconst struct sip_uri *\fIsip_uri\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_uri_user\fR(\fBconst struct sip_uri *\fIsip_uri\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_uri_password\fR(\fBconst struct sip_uri *\fIsip_uri\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_uri_host\fR(\fBconst struct sip_uri *\fIsip_uri\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_get_uri_port\fR(\fBconst struct sip_uri *\fIsip_uri\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_param_t *\fIsip_get_uri_params\fR(\fBconst struct sip_uri *\fIsip_uri\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_uri_headers\fR(\fBconst struct sip_uri *\fIsip_uri\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_uri_opaque\fR(\fBconst struct sip_uri *\fIsip_uri\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_uri_query\fR(\fBconst struct sip_uri *\fIsip_uri\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_uri_path\fR(\fBconst struct sip_uri *\fIsip_uri\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_uri_regname\fR(\fBconst struct sip_uri *\fIsip_uri\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBboolean_t\fR \fIsip_is_uri_teluser\fR(\fBconst struct sip_uri *\fIsip_uri\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_get_uri_errflags\fR(\fBconst struct sip_uri *\fIsip_uri\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBchar *\fIsip_uri_errflags_to_str\fR(\fBint\fR \fIuri_errflags\fR);
.fi

.SH DESCRIPTION
.sp
.LP
For functions that return a pointer of type
.IR sip_str_t ,
.I sip_str_t
is supplied by:
.sp
.in +2
.nf
typedef struct sip_str {
     char *sip_str_ptr;
     int  sip_str_len;
}sip_str_t;
.fi
.in -2

.sp
.LP
The
.I sip_str_ptr
parameter points to the start of the returned value
and
.I sip_str_len
supplies the length of the returned value.
.sp
.LP
For example, given the following request line in a
.B SIP
message input
to
.BR sip_get_request_uri_str() :
.sp
.in +2
.nf
INVITE sip:marconi@radio.org SIP/2.0
.fi
.in -2

.sp
.LP
the return is a pointer to
.I sip_str_t
with the
.IR sip_str_ptr
member pointing to "\fBs\fR" of \fBsip:marconi@radio.org\fR and
.I sip_str_len
being set to
.BR 21 ,
the length of
.BR sip:marconi@radio.org .
.sp
.LP
The
.B sip_is_sip_uri()
function takes a parsed
.B URI
.I sip_uri
and returns \fBB_TRUE\fR if it is a \fBSIP[S] URI\fR and \fBB_FALSE\fR
if it is not. A \fBURI\fR is a \fBSIP[S] URI\fR if the scheme in the
\fBURI\fR is either "\fBsip\fR" or "\fBsips\fR".
.sp
.LP
The
.B sip_get_uri_user()
function takes a parsed
.BR URI
\fIsip_uri\fR and returns the value of the "\fBuser\fR" component, if
present.
.sp
.LP
The
.B sip_get_uri_password()
function takes a parsed
.BR URI
\fIsip_uri\fR and returns the value of the "\fBpassword\fR" component, if
present.
.sp
.LP
The
.B sip_get_uri_host()
function takes a parsed
.BR URI
\fIsip_uri\fR and returns the value of the "\fBhost\fR" component, if
present.
.sp
.LP
The
.B sip_get_uri_port()
function takes a parsed
.BR URI
\fIsip_uri\fR and returns the value of the "\fBport\fR" component, if
present.
.sp
.LP
The
.B sip_get_uri_params()
function takes a parsed
.BR URI
.I sip_uri
and returns the list of
.B URI
parameters, if present, from
a
.BR "SIP[S] URI" .
.sp
.LP
The
.B sip_get_uri_headers()
function takes a parsed
.BR URI
.I sip_uri
and returns '\fBheaders\fR' from a
.BR "SIP[S] URI" .
.sp
.LP
The
.B sip_get_uri_query()
function takes a parsed
.BR URI
.I sip_uri
and returns the value of the '\fBquery\fR' component, if
present.
.sp
.LP
The
.B sip_get_uri_path()
function takes a parsed
.BR URI
.I sip_uri
and returns the value of the '\fBpath\fR' component, if
present.
.sp
.LP
The
.B sip_get_uri_regname()
function takes a parsed
.BR URI
.I sip_uri
and returns the value of the '\fBregname\fR' component, if
present.
.sp
.LP
The
.B sip_is_uri_teluser()
function returns
.B B_TRUE
if the user
component is a telephone-subscriber. Otherwise,
.B B_FALSE
is returned.
.sp
.LP
The
.B sip_get_uri_errflags()
function returns the error flags from a
parsed
.BR URI
.IR sip_uri .
The returned value is a bitmask with the
appropriate bit set when the parser,
.BR sip_parse_uri() ,
encounters an
error. The following are the possible error values that could be set:
.sp
.in +2
.nf
Bit value      Error                 Comments
_______________________________________________________________
0x00000001     SIP_URIERR_SCHEME     invalid scheme
0x00000002     SIP_URIERR_USER       invalid user name
0x00000004     SIP_URIERR_PASS       invalid password
0x00000008     SIP_URIERR_HOST       invalid host
0x00000010     SIP_URIERR_PORT       invalid port number
0x00000020     SIP_URIERR_PARAM      invalid URI parameters
0x00000040     SIP_URIERR_HEADER     invalid URI headers
0x00000080     SIP_URIERR_OPAQUE     invalid opaque
0x00000100     SIP_URIERR_QUERY      invalid query
0x00000200     SIP_URIERR_PATH       invalid path
0x00000400     SIP_URIERR_REGNAME    invalid reg-name
.fi
.in -2

.sp
.LP
The
.B sip_uri_errflags_to_str()
function takes the error flags from a
parsed
.B URI
.I sip_uri
and forms a string with all the error bits
that are set. For example, if
.B SIP_URIERR_PASS
and
.B SIP_URIERR_PORT
are set in a parsed
.BR URI
.IR sip_uri ,
the
.B sip_uri_errflags_to_str()
function returns a string such as:
.sp
.in +2
.nf
"Error(s) in PASSWORD, PORT part(s)"
.fi
.in -2

.sp
.LP
The caller is responsible for freeing the returned string.
.SH RETURN VALUES
.sp
.LP
The
.BR sip_get_uri_scheme() ,
.BR sip_get_uri_user() ,
.BR sip_get_uri_password() ,
.BR sip_get_uri_host() ,
.BR sip_get_uri_params() ,
.BR sip_get_uri_headers() ,
.BR sip_get_uri_opaque() ,
.BR sip_get_uri_query() ,
.BR sip_get_uri_path() ,
.BR sip_get_uri_regname() ,
and
.B sip_uri_errflags_to_str()
functions return the requested value on
success and
.B NULL
on failure.
.sp
.LP
The
.B sip_get_uri_port()
function returns
.I port
from the
.BR URI
or
.B 0
if the port is not present. The returned port is in host byte
order.
.sp
.LP
The value of
.B errno
is not changed by these calls in the event of an
error.
.SH ERRORS
.sp
.LP
If the error is non-null, the following value is set:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.B SIP
header value of the
.B SIP
message is
.B NULL
or there
is no
.BR URI .
.sp
The input
.B URI
is null or the requested
.B URI
component is
invalid. The error flag is set for the requested component.
.sp
The \fBURI\fR parameters or headers are requested from a non-\fBSIP[S]\fR
.BR URI ;
or the '\fBopaque\fR', '\fBquery\fR', '\fBpath\fR',
\&'\fBreg-name\fR' components are requested from a
.BR "SIP[S] URI" .
.RE

.sp
.LP
On success, the value of the location pointed to by
.I error
is set to
.BR 0 .
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR libsip (3LIB)
