'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH sip_get_contact_display_name 3SIP "10 Feb 2007" "SunOS 5.11" "Session Initiation Protocol Library Functions"
.SH NAME
sip_get_contact_display_name, sip_get_from_display_name,
sip_get_to_display_name, sip_get_from_tag, sip_get_to_tag, sip_get_callid,
sip_get_callseq_num, sip_get_callseq_method, sip_get_via_sent_by_host,
sip_get_via_sent_by_port, sip_get_via_sent_protocol_version,
sip_get_via_sent_protocol_name, sip_get_via_sent_transport,
sip_get_maxforward, sip_get_content_length, sip_get_content_type,
sip_get_content_sub_type, sip_get_content, sip_get_accept_type,
sip_get_accept_sub_type, sip_get_accept_enc, sip_get_accept_lang,
sip_get_alert_info_uri, sip_get_allow_method, sip_get_min_expires,
sip_get_mime_version, sip_get_org, sip_get_priority,
sip_get_replyto_display_name, sip_get_replyto_uri_str, sip_get_date_time,
sip_get_date_day, sip_get_date_month, sip_get_date_wkday, sip_get_date_year,
sip_get_date_timezone, sip_get_content_disp, sip_get_content_enc,
sip_get_error_info_uri, sip_get_expires, sip_get_require, sip_get_subject,
sip_get_supported, sip_get_tstamp_delay, sip_get_unsupported,
sip_get_server, sip_get_user_agent, sip_get_warning_code,
sip_get_warning_agent, sip_get_warning_text, sip_get_call_info_uri,
sip_get_in_reply_to, sip_get_retry_after_time, sip_get_retry_after_cmts,
sip_get_rack_resp_num, sip_get_rack_cseq_num, sip_get_rack_method,
sip_get_rseq_resp_num, sip_get_priv_value, sip_get_passertedid_display_name,
sip_get_passertedid_uri_str, sip_get_ppreferredid_display_name,
sip_get_ppreferredid_uri_str, sip_get_author_scheme, sip_get_author_param,
sip_get_authen_info, sip_get_proxy_authen_scheme,
sip_get_proxy_authen_param, sip_get_proxy_author_scheme,
sip_get_proxy_author_param, sip_get_proxy_require,
sip_get_www_authen_scheme, sip_get_www_authen_param, sip_get_allow_events,
sip_get_event, sip_get_substate, sip_get_content_lang, sip_get_tstamp_value,
sip_get_route_uri_str, sip_get_route_display_name, sip_get_contact_uri_str,
sip_get_from_uri_str, sip_get_to_uri_str \- obtain header specific
attributes
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lsip\fR [ \fIlibrary\fR .\|.\|. ]
#include <sip.h>

\fBconst sip_str_t *\fIsip_get_contact_display_name\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_from_display_name\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_to_display_name\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_contact_uri_str\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_from_uri_str\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_to_uri_str\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_from_tag\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_to_tag\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_callid\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_get_callseq_num\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBsip_method_t\fR \fIsip_get_callseq_method\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_via_sent_by_host\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_get_via_sent_by_port\fR (\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_via_sent_protocol_version\fR
     (\fBsip_header_value_t\fR \fIvalue\fR, \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_via_sent_transport\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_get_maxforward\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_get_content_length\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_content_type\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_content_sub_type\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBchar *\fIsip_get_content\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_accept_type\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_accept_sub_type\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_accept_enc\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_accept_lang\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_alert_info_uri\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBsip_method_t\fR \fIsip_get_allow_method\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_get_min_expire\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_mime_version\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_org\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_priority\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_replyto_display_name\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_replyto_uri_str\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_date_time\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_get_date_day\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_date_month\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_get_date_year\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_date_wkday\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_date_timezone\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_content_disp\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_content_enc\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_error_info_uri\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_get_expires\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_require\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_subject\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_supported\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_tstamp_delay\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_unsupported\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_server\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_user_agent\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_get_warning_code\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_warning_agent\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_warning_text\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_call_info_uri\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_in_reply_to\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_get_retry_after_time\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_retry_after_cmts\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_passertedid_display_name\fR
     (\fBsip_header_value_t\fR \fIvalue\fR, \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_passertedid_uri_str\fR
     (\fBsip_header_value_t\fR \fIvalue\fR, \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_get_rack_resp_num\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBint\fR sip_get_rack_cseq_num\fR(\fBsip_msg_t\fR \fIsip_msg, int *error);\fR
.fi

.LP
.nf
sip_method_t\fR \fIsip_get_rack_method\fR(\fBsip_msg_t\fR \fIsip_msg\fR, \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBint\fR \fIsip_get_rseq_resp_num\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_priv_value\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_author_scheme\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_author_param\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBchar *\fIname\fR, \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_authen_info\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_proxy_authen_scheme\fR(\fBsip_msg_t\fR \fImsg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_proxy_authen_param\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBchar *\fIname\fR, \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_proxy_author_scheme\fR(\fBsip_msg_t\fR \fImsg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_proxy_author_param\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBchar *\fIname\fR, \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_proxy_require\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_www_authen_scheme\fR(\fBsip_msg_t\fR \fImsg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_www_authen_param\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBchar *\fIname\fR, \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_allow_events\fR(\fBsip_header_value_t\fR \fIvalue,
     int *error);\fR
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_event\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_substate\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_content_lang\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_tstamp_value\fR(\fBsip_msg_t\fR \fIsip_msg\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_route_uri_str\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.LP
.nf
\fBconst sip_str_t *\fIsip_get_route_display_name\fR(\fBsip_header_value_t\fR \fIvalue\fR,
     \fBint *\fIerror\fR);
.fi

.SH DESCRIPTION
.sp
.LP
For functions that return a pointer of type
.BR sip_str_t ,
.B sip_str_t
is supplied by:
.sp
.in +2
.nf
typedef struct sip_str {
     char	*sip_str_ptr;
     int	sip_str_len;
}sip_str_t;
.fi
.in -2

.sp
.LP
The
.I sip_str_ptr
parameter points to the start of the returned value
and
.I sip_str_len
supplies the length of the returned value.
.sp
.LP
For example, given the following request line in a
.B SIP
message
.I sip_msg
that is input to
.BR sip_get_request_uri_str() :
.sp
.in +2
.nf
FROM : <Alice sip:alice@atlanta.com>;tag=1928301774
.fi
.in -2

.sp
.LP
the return is a pointer to
.I sip_str_t
with the
.IR sip_str_ptr
member pointing to "\fBA\fR" of \fBAlice\fR and \fIsip_str_len\fR being set
to
.BR 5 ,
the length of
.BR Alice .
.sp
.LP
Access functions for headers that can have multiple values take the value
.RB "as the input, while those that can have only one value take the" " SIP"
message
.I sip_msg
as the input.
.sp
.LP
The
.BR sip_get_contact_display_name() ,
.BR sip_get_from_display_name() ,
and
.BR sip_get_to_display_name()
functions will return the display name, if present, from the \fBCONTACT\fR
header value,
.B FROM
and
.B TO
header respectively.
.sp
.LP
The
.BR sip_get_contact_uri_str() ,
.BR sip_get_from_uri_str() ,
and
.B sip_get_to_uri_str()
functions will return the
.B URI
string from
the
.B CONTACT
value,
.B FROM
and
.B TO
header respectively.
.sp
.LP
The \fBsip_get_from_tag()\fR and \fBsip_get_to_tag()\fR functions will
return the
.B TAG
parameter value, if present, from the
.B FROM
and
.B TO
header, respectively, in the provided
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_callid()
function will return the value from the
.B CALL-ID
header in the provided
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_callseq_num()
function will return the call sequence
number from the
.B CSEQ
header in the provided
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_callseq_method()
function will return the method from the
.B CSEQ
header in the provided
.B SIP
message
.IR sip_msg .
The
method can be one of the following:
.br
.in +2
INVITE
.in -2
.br
.in +2
ACK
.in -2
.br
.in +2
OPTIONS
.in -2
.br
.in +2
BYE
.in -2
.br
.in +2
CANCEL
.in -2
.br
.in +2
REGISTER
.in -2
.br
.in +2
REFER
.in -2
.br
.in +2
INFO
.in -2
.br
.in +2
SUBSCRIBE
.in -2
.br
.in +2
NOTIFY
.in -2
.br
.in +2
PRACK
.in -2
.br
.in +2
UNKNOWN
.in -2
.sp
.LP
The
.BR sip_get_via_sent_by_host() ,
.BR sip_get_via_sent_by_port() ,
.BR sip_get_via_sent_protocol_version() ,
.BR sip_get_via_sent_protocol_name() ,
and
.B sip_get_via_sent_transport()
functions will return the sent-by
host, port (if present), protocol version, protocol name and transport
information from the provided
.B VIA
header value. Example, if the
.B VIA
value is given by
.BR "SIP/2.0/UDP bobspc.biloxi.com:5060" ,
then
the sent-by host is "\fBbobspc.biloxi.com\fR", protocol name is "\fBSIP\fR",
protocol version is "\fB2.0\fR", port is \fB5060\fR and transport is
.BR UDP .
.sp
.LP
The
.B sip_get_maxforward()
function will return the value of the
.B MAX-FORWARDS
header in the provided
.B SIP
message
.IR sip_msg .
.br
.in +2
INVITE
.in -2
.br
.in +2
ACK
.in -2
.br
.in +2
OPTIONS
.in -2
.br
.in +2
BYE
.in -2
.br
.in +2
CANCEL
.in -2
.br
.in +2
REGISTER
.in -2
.br
.in +2
REFER
.in -2
.br
.in +2
INFO
.in -2
.br
.in +2
SUBSCRIBE
.in -2
.br
.in +2
NOTIFY
.in -2
.br
.in +2
PRACK
.in -2
.br
.in +2
UNKNOWN
.in -2
.sp
.LP
The
.B sip_get_content_length()
function will return the value of the
.B CONTENT-LENGTH
header in the provided
.B SIP
message
.IR sip_msg .
The method can return one of the following:
.sp
.LP
The
.B sip_get_content_type()
and
.BR sip_get_content_sub_type()
functions will return the value of the Type and Sub-Type field,
respectively, from the
.B CONTENT-TYPE
header in the provided
.BR SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_content()
function will return the message body from the
provided
.B SIP
message
.IR sip_msg .
The returned string is a copy of
the message body and the caller is responsible for freeing the string after
use.
.sp
.LP
The
.B sip_get_accept_type()
and
.BR sip_get_accept_sub_type()
functions will return the value of the Type and Sub-Type field,
respectively, from the provided
.B ACCEPT
header value.
.sp
.LP
The
.B sip_get_accept_enc()
function will return the content-coding from
the provided
.B ACCEPT-ENCODING
header value.
.sp
.LP
The
.B sip_get_accept_lang()
function will return the language  from the
provided
.B ACCEPT-LANGUAGE
header value.
.sp
.LP
The \fBsip_get_alert_info_uri()\fR function will return the \fBURI\fR
string from the provided
.B ALERT-INFO
header value.
.sp
.LP
The
.B sip_get_allow_method()
function will return the
.B SIP
method
from the provided
.B ALLOW
header value. The method can return one of the
following:
.br
.in +2
INVITE
.in -2
.br
.in +2
ACK
.in -2
.br
.in +2
OPTIONS
.in -2
.br
.in +2
BYE
.in -2
.br
.in +2
CANCEL
.in -2
.br
.in +2
REGISTER
.in -2
.br
.in +2
REFER
.in -2
.br
.in +2
INFO
.in -2
.br
.in +2
SUBSCRIBE
.in -2
.br
.in +2
NOTIFY
.in -2
.br
.in +2
PRACK
.in -2
.br
.in +2
UNKNOWN
.in -2
.sp
.LP
The
.B sip_get_min_expire()
function will return the time in seconds
from the
.B MIN-EXPIRES
header in the provided
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_mime_version()
function will return the
.BR MIME
version string from the
.B MIME-VERSION
header in the provided
.BR SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_org()
function will return the organization string value
from the
.B ORGANIZATION
header in the provided
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_priority()
function will return the priority string value
from the
.B PRIORITY
header in the provided
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_replyto_display_name()
and
.B sip_get_replyto_uri_str()
functions will return the display name (if
present) and the
.B URI
string, respectively, from the \fBREPLY-TO\fR
header in the provided
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.BR sip_get_date_time() ,
.BR sip_get_date_day() ,
.BR sip_get_date_month() ,
.BR sip_get_date_wkday() ,
.B sip_get_date_year()
and
.B sip_get_date_timezone()
functions will
return the time, day, month, week day, year and timezone value from the
.B DATE
header in the provided
.B SIP
message
.IR sip_msg .
Example,
if the DATE header has the following value:
.sp
.in +2
.nf
Sat, 13 Nov 2010 23:29:00 GMT
.fi
.in -2

.sp
.LP
the time is "\fB23:29:00\fR ", week day is "\fBSat\fR", day is "\fB13\fR",
month is  "\fBNov\fR", year is "\fB2010\fR", timezone is "\fBGMT\fR".
.sp
.LP
The
.B sip_get_content_disp()
function will return the
content-disposition type from the
.B CONTENT-DISPOSITION
header in the
provided
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_content_enc()
function will return the content-coding
value from the
.B CONTENT-ENCODING
header value.
.sp
.LP
The \fBsip_get_error_info_uri()\fR function will return the \fBURI\fR
string from the provided
.B ERROR-INFO
header value.
.sp
.LP
The
.B sip_get_expires()
function will return the time in seconds from
the
.B EXPIRES
header in the provided
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_require()
function will return the option-tag value from
the provided
.B REQUIRE
header value.
.sp
.LP
The
.B sip_get_subject()
function will return the value of the
.B SUBJECT
header in the provided
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_supported()
function will return the extension value from
the provided
.B SUPPORTED
header value.
.sp
.LP
The
.B sip_get_tstamp_delay()
function will return the value from the
.B TIMESTAMP
header in the provided
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_unsupported()
function will return the extension value
from the provided
.B UNSUPPORTED
header value.
.sp
.LP
The
.B sip_get_server()
function will return the value from the
.B SERVER
header in the provided
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_user_agent()
function will return the value from the
.B USER-AGENT
header in the provided
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.BR sip_get_warning_code() ,
.BR sip_get_warning_agent() ,
and
.B sip_get_warning_text()
functions will return the value of the
warn-code, warn-agent and warn-text, respectively, in the provided
.B WARNING
header value.
.sp
.LP
The
.B sip_get_call_info_uri()
function will return the
.B URI
string
in the provided
.B CALL-INFO
header value.
.sp
.LP
The
.B sip_get_in_reply_to()
function will return the Call-Id value in
the provided
.B IN-REPLY-TO
header value.
.sp
.LP
The
.BR sip_get_retry_after_time() ,
and \fBsip_get_retry_after_cmts()\fR
functions return the time and comments (if any), respectively, from the
.B RETRY-AFTER
header in the provided
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_passertedid_display_name()
and
.B sip_get_passertedid_uri_str()
functions will return the display name
(if any) and the
.B URI
string, respectively, in the provided
.B P-ASSERTED-IDENTITY
header value.
.sp
.LP
The
.B sip_get_ppreferredid_display_name()
and
.B sip_get_ppreferredid_uri_str()
functions will return the display name
(if any) and the
.B URI
string, respectively, in the provided
.B P-PREFERRED-IDENTITY
header value.
.sp
.LP
The
.BR sip_get_rack_resp_num() ,
.BR sip_get_rack_cseq_num() ,
and
.B sip_get_rack_method()
functions will return the response-number, the
.B CSEQ
number and the
.B SIP
method from the
.B RACK
header in the
provided
.B SIP
message
.IR sip_msg .
The method can return one of the
following:
.br
.in +2
INVITE
.in -2
.br
.in +2
ACK
.in -2
.br
.in +2
OPTIONS
.in -2
.br
.in +2
BYE
.in -2
.br
.in +2
CANCEL
.in -2
.br
.in +2
REGISTER
.in -2
.br
.in +2
REFER
.in -2
.br
.in +2
INFO
.in -2
.br
.in +2
SUBSCRIBE
.in -2
.br
.in +2
NOTIFY
.in -2
.br
.in +2
PRACK
.in -2
.br
.in +2
UNKNOWN
.in -2
.sp
.LP
The
.B sip_get_rseq_resp_num()
function will return the response-number,
the
.B RSEQ
header in the provided
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_priv_value()
function will return the priv-value in the
provided
.B PRIVACY
header value.
.sp
.LP
The
.B sip_get_route_uri_str()
and
.BR sip_get_route_display_name()
functions will return the
.B URI
string, and display name (if present)
from the provided
.B ROUTE
or
.B RECORD-ROUTE
header value.
.sp
.LP
The
.B sip_get_author_scheme()
function will return the scheme from the
.B AUTHORIZATION
header in the provided
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_author_param()
function will return the value of the
parameter specified in name from the
.B AUTHORIZATION
header in the
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_authen_info()
function will return the authentication
information from the provided
.B AUTHORIZATION-INFO
header value.
.sp
.LP
The
.B sip_get_proxy_authen_scheme()
function will return the scheme
from the
.B PROXY-AUTHENTICATE
header in the
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_proxy_authen_param()
function will return the value of
the parameter in name from the
.B PROXY-AUTHENTICATE
header in the
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_proxy_author_scheme()
function will return the value of
the scheme from the
.B PROXY-AUTHORIZATION
header in the
.BR SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_proxy_author_param()
function will return the value of
the parameter specified in name from the
.B PROXY-AUTHORIZATION
header in
the
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_proxy_require()
function will return the option-tag from
the provided
.B PROXY-REQUIRE
header value.
.sp
.LP
The
.B sip_get_www_authen_scheme()
function will return the challenge
from the
.B WWW-AUTHENTICATE
header in the
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_www_authen_param()
function will return the value of the
parameter specified in name from the
.B WWW-AUTHENTICATE
header in the
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_allow_events()
function returns the value of the allowed
event from the provided
.B ALLOW-EVENTS
header value.
.sp
.LP
The
.B sip_get_event()
function returns the event in the
.BR EVENT
header in the
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_substate()
function the subscription state from the
.B SUBSCRIPTION-STATE
header in the provided
.B SIP
message
.IR sip_msg .
.sp
.LP
The
.B sip_get_content_lang()
function will return the language from the
provided
.B CONTENT-LANGUAGE
value.
.sp
.LP
The
.B sip_get_tstamp_value()
function will return the timestamp value
from the
.B TIMESTAMP
header in the
.B SIP
message
.IR sip_msg .
.SH RETURN VALUES
.sp
.LP
For functions that return a pointer to
.IR sip_str_t ,
the return value is
the specified value on success or
.B NULL
in case of error. For functions
that return an integer, the return value is the specified value on success
and
.B -1
on error.
.sp
.LP
The value of
.B errno
is not changed by these calls in the event of an
error.
.SH ERRORS
.sp
.LP
These functions take a pointer to an integer
.I error
as an argument. If
the error is non-null, one of the following values is set:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The input
.B SIP
message
.I sip_msg
or the header value is null; or
the specified header/header value is deleted.
.RE

.sp
.ne 2
.mk
.na
.B EPROTO
.ad
.RS 10n
.rt
The header value is not present or invalid. The parser could not parse it
correctly.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
There is an error allocating memory for the return value.
.RE

.sp
.LP
On success, the value of the location pointed to by
.I error
is set to
.BR 0 .
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR libsip (3LIB)
