'\" te
.\" Copyright (c) 2004-2006 Storage Networking Industry Association. All Rights Reserved.
.\" Copyright (c) 2006, Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH libMPAPI 3LIB "12 Dec 2006" "SunOS 5.11" "Interface Libraries"
.SH NAME
libMPAPI, libmpapi \- Common Mulitipath Management library
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lMPAPI\fR  [ \fIlibrary\fR.\|.\|. ]
#include <\fBmpapi.h\fR>
#include <\fBmpapi_sun.h\fR>
.fi

.SH DESCRIPTION
.sp
.LP
The functions in this library allow a management application to administer
the multipath devices and associated resources through standard interfaces,
independent of a vendor-unique multipathing solution.
.SH INTERFACES
.sp
.LP
The shared object
.B libMPAPI.so.1
provides the public interfaces
defined below. See
.BR Intro (3)
for additional information on shared
object interfaces.
.br
.in +2
.B MP_AssignLogicalUnitToTPG
.in -2
.br
.in +2
.B MP_CancelOverridePath
.in -2
.br
.in +2
.B MP_CompareOIDs
.in -2
.br
.in +2
.B MP_DeregisterForObjectPropertyChanges
.in -2
.br
.in +2
.B MP_DeregisterForObjectVisibilityChanges
.in -2
.br
.in +2
.B MP_DeregisterPlugin
.in -2
.br
.in +2
.B MP_DisableAutoFailback
.in -2
.br
.in +2
.B MP_DisableAutoProbing
.in -2
.br
.in +2
.B MP_DisablePath
.in -2
.br
.in +2
.B MP_EnableAutoFailback
.in -2
.br
.in +2
.B MP_EnableAutoProbing
.in -2
.br
.in +2
.B MP_EnablePath
.in -2
.br
.in +2
.B MP_FreeOidList
.in -2
.br
.in +2
.B MP_GetAssociatedPathOidList
.in -2
.br
.in +2
.B MP_GetAssociatedPluginOid
.in -2
.br
.in +2
.B MP_GetAssociatedTPGOidList
.in -2
.br
.in +2
.B MP_GetDeviceProductOidList
.in -2
.br
.in +2
.B MP_GetDeviceProductProperties
.in -2
.br
.in +2
.B MP_GetInitiatorPortOidList
.in -2
.br
.in +2
.B MP_GetInitiatorPortProperties
.in -2
.br
.in +2
.B MP_GetLibraryProperties
.in -2
.br
.in +2
.B MP_GetMPLogicalUnitProperties
.in -2
.br
.in +2
.B MP_GetMPLuOidListFromTPG
.in -2
.br
.in +2
.B MP_GetMultipathLus
.in -2
.br
.in +2
.B MP_GetObjectType
.in -2
.br
.in +2
.B MP_GetPathLogicalUnitProperties
.in -2
.br
.in +2
.B MP_GetPluginOidList
.in -2
.br
.in +2
.B MP_GetPluginProperties
.in -2
.br
.in +2
.B MP_GetProprietaryLoadBalanceOidList
.in -2
.br
.in +2
.B MP_GetProprietaryLoadBalanceProperties
.in -2
.br
.in +2
.B MP_GetTargetPortGroupProperties
.in -2
.br
.in +2
.B MP_GetTargetPortOidList
.in -2
.br
.in +2
.B MP_GetTargetPortProperties
.in -2
.br
.in +2
.B MP_RegisterForObjectPropertyChanges
.in -2
.br
.in +2
.B MP_RegisterForObjectVisibilityChanges
.in -2
.br
.in +2
.B MP_RegisterPlugin
.in -2
.br
.in +2
.B MP_SetFailbackPollingRate
.in -2
.br
.in +2
.B MP_SetLogicalUnitLoadBalanceType
.in -2
.br
.in +2
.B MP_SetOverridePath
.in -2
.br
.in +2
.B MP_SetPathWeight
.in -2
.br
.in +2
.B MP_SetPluginLoadBalanceType
.in -2
.br
.in +2
.B MP_SetProbingPollingRate
.in -2
.br
.in +2
.B MP_SetProprietaryProperties
.in -2
.br
.in +2
.B MP_SetTPGAccess
.in -2
.br
.in +2
.B Sun_MP_SendScsiCmd
.in -2
.SH USAGE
.sp
.LP
Client applications link with the Common Library
.RB "(using " -lMPAPI )
to
access the  interfaces.  The Common Library dynamically loads an individual
vendor-provided plugin library that is available through
.BR MP_RegisterPlugin (3MPAPI)
on the host system.
.sp
.LP
Using
.B libMPAPI
involves the following steps:
.RS +4
.TP
1.
Optionally calling
.B MP_GetLibraryProperties()
to retrieve the
properties of the Common Library.
.RE
.RS +4
.TP
2.
Calling
.B MP_GetPluginOidList()
to retrieve the registered plugin
libraries.
.RE
.RS +4
.TP
3.
Optionally calling
.B MP_GetPluginProperties()
to retrieve the
properties of the plugin library.
.RE
.RS +4
.TP
4.
Retrieve discovery information and property information on multipath
devices and associated  resources  by calling the following:
.RS +4
.TP
.ie t \(bu
.el o
.B MP_GetAssociatedPathOidList()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_GetAssociatedTPGOidList()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_GetDeviceProductOidList()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_GetDeviceProductProperties()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_GetInitiatorPortOidList()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_GetInitiatorPortProperties()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_GetMPLuOidListFromTPG()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_GetMPLogicalUnitProperties()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_GetMultipathLus()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_GetPathLogicalUnitProperties()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_GetProprietaryLoadBalanceOidList()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_GetProprietaryLoadBalanceProperties()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_GetTargetPortGroupProperties()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_GetTargetPortOidList()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_GetTargetPortProperties()
.RE
.RE
.RS +4
.TP
5.
Register and deregister for property and visibility changes on multipath
devices and associated resources by calling:
.RS +4
.TP
.ie t \(bu
.el o
.B MP_RegisterForObjectPropertyChanges()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_RegisterForObjectVisibilityChanges()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_DeregisterForObjectPropertyChanges()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_DeregisterForObjectVisibilityChanges()
.RE
.RE
.RS +4
.TP
6.
Perform administrative operations on multipath devices and associated
resources by calling:
.RS +4
.TP
.ie t \(bu
.el o
.B MP_AssignLogicalUnitToTPG()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_CancelOverridePath()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_DisableAutoFailback()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_DisableAutoProbing()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_DisablePath()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_EnableAutoFailback()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_EnableAutoProbing()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_EnablePath()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_SetLogicalUnitLoadBalanceType()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_SetOverridePath()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_SetPathWeight()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_SetPluginLoadBalanceType()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_SetFailbackPollingRate()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_SetProbingPollingRate()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_SetProprietaryProperties()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B MP_SetTPGAccess()
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B Sun_MP_SendScsiCmd()
.RE
.RE
.SH ERRORS
.sp
.LP
Errors are generally returned from the underlying VSL and can include any
of the following values:
.sp
.ne 2
.mk
.na
.B MP_STATUS_SUCCESS
.ad
.sp .6
.RS 4n
This status value is returned when the requested operation is successfully
carried out.
.RE

.sp
.ne 2
.mk
.na
.B MP_STATUS_INVALID_PARAMETER
.ad
.sp .6
.RS 4n
This status value is returned when parameters passed to an API are detected
to be invalid or inappropriate for a particular API parameter. If the
parameter is an object ID, this status indicates that the object type
subfield is defined in this specification, but is not appropriate
for this API
.RE

.sp
.ne 2
.mk
.na
.B MP_STATUS_UNKNOWN_FN
.ad
.sp .6
.RS 4n
This status value is returned when a client function passed into the API is
not a previously registered or known function.
.RE

.sp
.ne 2
.mk
.na
.B MP_STATUS_FAILED
.ad
.sp .6
.RS 4n
This status value is returned when the requested operation could not be
carried out.
.RE

.sp
.ne 2
.mk
.na
.B MP_STATUS_INSUFFICIENT_MEMORY
.ad
.sp .6
.RS 4n
This status value is returned when the API could [not] allocate the memory
required to complete the requested operation.
.RE

.sp
.ne 2
.mk
.na
.B MP_STATUS_INVALID_OBJECT_TYPE
.ad
.sp .6
.RS 4n
This status value is returned when an object ID includes a type subfield
that is not defined in this specification.
.RE

.sp
.ne 2
.mk
.na
.B MP_STATUS_OBJECT_NOT_FOUND
.ad
.sp .6
.RS 4n
This status value is returned when the object associated with the ID
specified in the API could not be located, or has been deleted. Note that an
invalid object type is covered by
.B MP_STATUS_INVALID_OBJECT_TYPE
so
this status is limited to an invalid object owner identifier or sequence
number.
.RE

.sp
.ne 2
.mk
.na
.B MP_STATUS_UNSUPPORTED
.ad
.sp .6
.RS 4n
This status value is returned when the implementation does not support the
requested function.
.RE

.sp
.ne 2
.mk
.na
.B MP_STATUS_FN_REPLACED
.ad
.sp .6
.RS 4n
This status value is returned when a client function passed into the API
replaces a previously registered function.
.RE

.sp
.ne 2
.mk
.na
.B MP_STATUS_ACCESS_STATE_INVALID
.ad
.sp .6
.RS 4n
This status value is returned when a device processing
.B MP_SetTPGAccess
returns a status indicating that the caller is
attempting to establish an illegal combination of access states.
.RE

.sp
.ne 2
.mk
.na
.B MP_STATUS_PATH_NONOPERATIONAL
.ad
.sp .6
.RS 4n
This status is returned when communication cannot be established with the
path selected by the caller.
.RE

.sp
.ne 2
.mk
.na
.B MP_STATUS_TRY_AGAIN
.ad
.sp .6
.RS 4n
This status is returned when the plugin or driver is unable to complete the
request, but might be able to complete it later.
.RE

.sp
.ne 2
.mk
.na
.B MP_STATUS_NOT_PERMITTED
.ad
.sp .6
.RS 4n
The operation is not permitted in the current configuration, but might be
permitted in other configurations.
.RE

.SH FILES
.sp
.ne 2
.mk
.na
.B /usr/lib/libMPAPI.so
.ad
.RS 27n
.rt
shared object
.RE

.sp
.ne 2
.mk
.na
.B /usr/lib/64/libMPAPI.so
.ad
.RS 27n
.rt
64-bit shared object
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWmpapir
_
SUNWmpapi (Header file)
_
Interface StabilityCommitted
MT-LevelSafe
_
StandardT{
ANSI INCITS 412 Multipath Management API (except for \fBSun_MP_SendScsiCmd\fR)
T}
.TE

.SH SEE ALSO
.sp
.LP
.BR Intro (3),
.BR MP_RegisterPlugin (3MPAPI),
.BR attributes (5)
.sp
.LP
.I Multipath Management API Version 1.0
