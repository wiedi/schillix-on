'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH libm 3LIB "12 Jul 2006" "SunOS 5.11" "Interface Libraries"
.SH NAME
libm \- C math library
.SH SYNOPSIS
.LP
.nf
c99 [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lm\fR [ \fIlibrary\fR.\|.\|. ]
.fi

.SH DESCRIPTION
.sp
.LP
Functions in this library provide common elementary mathematical functions
and floating point environment routines defined by System V, ANSI C, POSIX,
and so on. See
.BR standards (5).
Additional functions in this library
provide extended support for handling floating point exceptions.
.SH INTERFACES
.sp
.LP
The shared object
.B libm.so.2
provides the public interfaces defined
below. See
.BR Intro (3)
for additional information on shared object
interfaces.
.sp

.sp
.TS
tab();
lw(2.75i) lw(2.75i)
lw(2.75i) lw(2.75i)
.
.B
acosacosf
.B
acoshacoshf
.B
acoshlacosl
.B
asinasinf
.B
asinhasinhf
.B
asinhlasinl
.B
atanatan2
.B
atan2fatan2l
.B
atanfatanh
.B
atanhfatanhl
.B
atanlcabs
.B
cabsfcabsl
.B
cacoscacosf
.B
cacoshcacoshf
.B
cacoshlcacosl
.B
cargcargf
.B
carglcasin
.B
casinfcasinh
.B
casinhfcasinhl
.B
casinlcatan
.B
catanfcatanh
.B
catanhfcatanhl
.B
catanlcbrt
.B
cbrtfcbrtl
.B
ccosccosf
.B
ccoshccoshf
.B
ccoshlccosl
.B
ceilceilf
.B
ceillcexp
.B
cexpfcexpl
.B
cimagcimagf
.B
cimaglclog
.B
clogfclogl
.B
conjconjf
.B
conjlcopysign
.B
copysignfcopysignl
.B
coscosf
.B
coshcoshf
.B
coshlcosl
.B
cpowcpowf
.B
cpowlcproj
.B
cprojfcprojl
.B
crealcrealf
.B
creallcsin
.B
csinfcsinh
.B
csinhfcsinhl
.B
csinlcsqrt
.B
csqrtfcsqrtl
.B
ctanctanf
.B
ctanhctanhf
.B
ctanhlctanl
.B
erferfc
.B
erfcferfcl
.B
erfferfl
.B
expexp2
.B
exp2fexp2l
.B
expfexpl
.B
expm1expm1f
.B
expm1lfabs
.B
fabsffabsl
.B
fdimfdimf
.B
fdimlfeclearexcept
.B
fegetenvfegetexceptflag
.B
fegetroundfeholdexcept
.B
feraiseexceptfesetenv
.B
fesetexceptflagfesetround
.B
fetestexceptfeupdateenv
.B
fex_get_handlingfex_get_log
.B
fex_get_log_depthfex_getexcepthandler
.B
fex_log_entryfex_merge_flags
.B
fex_set_handlingfex_set_log
.B
fex_set_log_depthfex_setexcepthandler
.B
floorfloorf
.B
floorlfma
.B
fmaffmal
.B
fmaxfmaxf
.B
fmaxlfmin
.B
fminffminl
.B
fmodfmodf
.B
fmodlfrexp
.B
frexpffrexpl
.B
gammagamma_r
.B
gammafgammaf_r
.B
gammalgammal_r
.B
hypothypotf
.B
hypotlilogb
.B
ilogbfilogbl
.B
isnanj0
.B
j0fj0l
.B
j1j1f
.B
j1ljn
.B
jnfjnl
.B
ldexpldexpf
.B
ldexpllgamma
.B
lgamma_rlgammaf
.B
lgammaf_rlgammal
.B
lgammal_rllrint
.B
llrintfllrintl
.B
llroundllroundf
.B
llroundllog
.B
log10log10f
.B
log10llog1p
.B
log1pflog1pl
.B
log2log2f
.B
log2llogb
.B
logbflogbl
.B
logflogl
.B
lrintlrintf
.B
lrintllround
.B
lroundflroundl
.B
matherrmodf
.B
modffmodfl
.B
nannanf
.B
nanlnearbyint
.B
nearbyintfnearbyintl
.B
nextafternextafterf
.B
nextafterlnexttoward
.B
nexttowardfnexttowardl
.B
powpowf
.B
powlremainder
.B
remainderfremainderl
.B
remquoremquof
.B
remquolrint
.B
rintfrintl
.B
roundroundf
.B
roundlscalb
.B
scalbfscalbl
.B
scalblnscalblnf
.B
scalblnlscalbn
.B
scalbnfscalbnl
.B
signgamsigngamf
.B
signgamlsignificand
.B
significandfsignificandl
.B
sinsincos
.B
sincosfsincosl
.B
sinfsinh
.B
sinhfsinhl
.B
sinlsqrt
.B
sqrtfsqrtl
.B
tantanf
.B
tanhtanhf
.B
tanhltanl
.B
tgammatgammaf
.B
tgammaltrunc
.B
truncftruncl
.B
y0y0f
.B
y0ly1
.B
y1fy1l
.B
ynynf
\fBynl\fR\fR
.TE

.sp
.LP
The following interfaces are unique to the x86 and x64 versions of this
library:
.sp

.sp
.TS
tab();
lw(2.75i) lw(2.75i)
.
.B
fegetprecfesetprec
.TE

.SH ACCURACY
.sp
.LP
ISO/IEC 9899:1999, also known as C99, specifies the functions listed in the
following tables and states that the accuracy of these functions is
"implementation-defined". The information below characterizes the accuracy
of these functions as implemented in
.BR libm.so.2 .
For each function, the
tables provide an upper bound on the largest error possible for any argument
and the largest error actually observed among a large sample of arguments.
Errors are expressed in "units in the last place", or ulps, relative to the
exact function value for each argument (regarding the argument as exact).
Ulps depend on the precision of the floating point format: if
.I y
is the
exact function value,
.I x
and
.IR x '
are adjacent floating point
numbers such that
.I x
<
.I y
<
.IR x ',
and
.IR x ''
is the
computed function value, then provided
.IR x ,
.IR x ',
and
.IR x ''
all
lie in the same binade, the error in
.IR x ''
is
.RI | y
-
.IR x ''|
/
.RI | x
-
.IR x '|
ulps. In particular, when the error is less than one
ulp, the computed value is one of the two floating point numbers adjacent to
the exact value.
.sp
.LP
The bounds and observed errors listed below apply only in the default
floating point modes. Specifically, on SPARC, these bounds assume the
rounding direction is round-to-nearest and non-standard mode is disabled. On
x86, the bounds assume the rounding direction is round-to-nearest and the
rounding precision is round-to-64-bits. Moreover, on x86, floating point
function values are returned in a floating point register in extended double
precision format, but the bounds below assume that the result value is then
stored to memory in the format corresponding to the function's type. On x64,
the bounds assume the rounding direction in both the x87 floating point
control word and the MXCSR is round-to-nearest, the rounding precision in
the x87 control word is round-to-64-bits, and the FTZ and DAZ modes are
disabled.
.sp
.LP
The error bounds listed below are believed to be correct, but smaller
bounds might be proved later. The observed errors are the largest ones
currently known, but larger errors might be discovered later. Numbers in the
notes column refer to the notes following the tables.
.SS "Real Functions"
.SS "Single precision real functions (SPARC, x86, and x64)"
.sp

.sp
.TS
tab();
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
.
error boundlargest error
function (ulps)observed (ulps)notes
\fBacosf\fR1.0< 1
\fBacoshf\fR1.0< 1
\fBasinf\fR1.0< 1
\fBasinhf\fR1.0< 1
\fBatanf\fR1.0< 1
\fBatan2f\fR1.0< 1
\fBatanhf\fR1.0< 1
\fBcbrtf\fR1.0< 1
\fBcosf\fR1.0< 1
\fBcoshf\fR1.0< 1
\fBerff\fR1.0< 1
\fBerfcf\fR1.0< 1
\fBexpf\fR1.0< 1
\fBexp2f\fR1.0< 1
\fBexpm1f\fR1.0< 1
\fBhypotf\fR1.0< 1
\fBlgammaf\fR1.0< 1
\fBlogf\fR1.0< 1
\fBlog10f\fR1.0< 1
\fBlog1pf\fR1.0< 1
\fBlog2f\fR1.0< 1
\fBpowf\fR1.0< 1
\fBsinf\fR1.0< 1
\fBsinhf\fR1.0< 1
\fBsqrtf\fR0.50.500[1]
\fBtanf\fR1.0< 1
\fBtanhf\fR1.0< 1
\fBtgammaf\fR1.0< 1
.TE

.SS "Double precision real functions (SPARC and x64)"
.sp

.sp
.TS
tab();
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
.
error boundlargest error
function (ulps)observed (ulps)notes
\fBacos\fR1.0< 1
\fBacosh\fR4.01.878
\fBasin\fR1.0< 1
\fBasinh\fR7.01.653
\fBatan\fR1.0<1
\fBatan2\fR2.51.475
\fBatanh\fR4.01.960
\fBcbrt\fR1.0< 1
\fBcos\fR1.0< 1
\fBcosh\fR3.01.168
\fBerf\fR4.00.959
\fBerfc\fR6.02.816
\fBexp\fR1.0< 1
\fBexp2\fR2.01.050
\fBexpm1\fR1.0< 1
\fBhypot\fR1.0< 1
\fBlgamma\fR61.55.629[2]
\fBlog\fR1.0< 1
\fBlog10\fR3.51.592
\fBlog1p\fR1.0< 1
\fBlog2\fR1.0< 1
\fBpow\fR1.0< 1
\fBsin\fR1.0< 1
\fBsinh\fR4.02.078
\fBsqrt\fR0.50.500[1]
\fBtan\fR1.0< 1
\fBtanh\fR3.52.136
\fBtgamma\fR1.0< 1
.TE

.SS "Double precision real functions (x86)"
.sp

.sp
.TS
tab();
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
.
error boundlargest error
function (ulps)observed (ulps)notes
\fBacos\fR1.0< 1
\fBacosh\fR4.01.694
\fBasin\fR1.0< 1
\fBasinh\fR7.01.493
\fBatan\fR1.0< 1
\fBatan2\fR1.0< 1
\fBatanh\fR4.01.445
\fBcbrt\fR1.0< 1
\fBcos\fR1.0< 1
\fBcosh\fR3.01.001
\fBerf\fR4.00.932
\fBerfc\fR6.02.728
\fBexp\fR1.0< 1
\fBexp2\fR1.0< 1
\fBexpm1\fR1.0< 1
\fBhypot\fR1.0< 1
\fBlgamma\fR61.52.654[2]
\fBlog\fR1.0< 1
\fBlog10\fR1.0< 1
\fBlog1p\fR1.0< 1
\fBlog2\fR1.0< 1
\fBpow\fR1.0< 1
\fBsin\fR1.0< 1
\fBsinh\fR4.01.458
\fBsqrt\fR0.50030.500[1]
\fBtan\fR1.0< 1
\fBtanh\fR3.51.592
\fBtgamma\fR1.0< 1
.TE

.SS "Quadruple precision real functions (SPARC)"
.sp

.sp
.TS
tab();
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
.
error boundlargest error
function (ulps)observed (ulps)notes
\fBacosl\fR3.51.771
\fBacoshl\fR8.01.275
\fBasinl\fR4.02.007
\fBasinhl\fR9.01.823
\fBatanl\fR1.0< 1
\fBatan2l\fR2.51.102
\fBatanhl\fR4.01.970
\fBcbrtl\fR1.0< 1
\fBcosl\fR1.0< 1
\fBcoshl\fR3.50.985
\fBerfl\fR2.00.779
\fBerfcl\fR68.513.923
\fBexpl\fR1.0< 1
\fBexp2l\fR2.00.714
\fBexpm1l\fR2.01.020
\fBhypotl\fR1.0< 1
\fBlgammal\fR18.52.916[2]
\fBlogl\fR1.0< 1
\fBlog10l\fR3.51.156
\fBlog1pl\fR2.01.216
\fBlog2l\fR3.51.675
\fBpowl\fR1.0< 1
\fBsinl\fR1.0< 1
\fBsinhl\fR4.51.589
\fBsqrtl\fR0.50.500[1]
\fBtanl\fR4.52.380
\fBtanhl\fR4.51.692
\fBtgammal\fR1.0< 1
.TE

.SS "Extended precision real functions (x86 and x64)"
.sp

.sp
.TS
tab();
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
.
error boundlargest error
function (ulps)observed (ulps)notes
\fBacosl\fR3.01.868
\fBacoshl\fR8.02.352
\fBasinl\fR3.01.716
\fBasinhl\fR9.02.346
\fBatanl\fR1.0< 1
\fBatan2l\fR1.0< 1
\fBatanhl\fR4.02.438
\fBcbrtl\fR1.0< 1
\fBcosl\fR1.0< 1
\fBcoshl\fR3.51.288
\fBerfl\fR1.0< 1
\fBerfcl\fR78.513.407
\fBexpl\fR3.51.291
\fBexp2l\fR1.50.807
\fBexpm1l\fR4.01.936
\fBhypotl\fR3.52.087
\fBlgammal\fR22.54.197[2]
\fBlogl\fR2.00.881
\fBlog10l\fR2.01.284
\fBlog1pl\fR5.02.370
\fBlog2l\fR1.0< 1
\fBpowl\fR32770.04478.132
\fBsinl\fR1.0< 1
\fBsinhl\fR4.52.356
\fBsqrtl\fR0.50.500[1]
\fBtanl\fR4.52.366
\fBtanhl\fR4.52.417
\fBtgammal\fR1.0< 1
.TE

.SS "Notes:"
.sp
.ne 2
.mk
.na
.B [1]
.ad
.RS 7n
.rt
On SPARC and x64,
.BR sqrtf ,
.BR sqrt ,
and
.B sqrtl
are correctly
rounded in accordance with IEEE 754. On x86,
.B sqrtl
is correctly
rounded,
.B sqrtf
is correctly rounded provided the result is narrowed to
single precision as discussed above, but
.B sqrt
might not be correctly
rounded due to "double rounding": when the intermediate value computed to
extended precision lies exactly halfway between two representable numbers in
double precision, the result of rounding the intermediate value to double
precision is determined by the round-ties-to-even rule. If this rule causes
the second rounding to round in the same direction as the first, the net
rounding error can exceed 0.5 ulps. (The error is bounded instead by 0.5*(1
+ 2^-11) ulps.)
.RE

.sp
.ne 2
.mk
.na
.B [2]
.ad
.RS 7n
.rt
Error bounds for lgamma and lgammal apply only for positive arguments.
.RE

.SS "Complex functions"
.sp
.LP
The real-valued complex functions
.BR cabsf ,
.BR cabs ,
.BR cabsl ,
.BR cargf ,
.BR carg ,
and
.B cargl
are equivalent to the real
functions
.BR hypotf ,
.BR hypot ,
.BR hypotl ,
.BR atan2f ,
.BR atan2 ,
and
.BR atan2l ,
respectively. The error bounds and observed
errors given above for the latter functions also apply to the former.
.sp
.LP
The complex functions listed below are complex-valued. For each function,
the error bound shown applies separately to both the real and imaginary
parts of the result. (For example, both the real and imaginary parts of
\fBcacosf\fR(\fIz\fR) are accurate to within 1 ulp regardless of their
magnitudes.) Similarly, the largest observed error shown is the largest
error found in either the real or the imaginary part of the result.
.SS "Single precision complex functions (SPARC and x64)"
.sp

.sp
.TS
tab();
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
.
error boundlargest error
function (ulps)observed (ulps)notes
\fBcacosf\fR, \fBcacoshf\fR1< 1[1]
\fBcasinf\fR, \fBcasinhf\fR1< 1
\fBcatanf\fR, \fBcatanhf\fR6< 1
\fBccosf\fR, \fBccoshf\fR102.012
\fBcexpf\fR32.239
\fBclogf\fR3< 1
\fBcpowf\fR\(em< 1[2]
\fBcsinf\fR, \fBcsinhf\fR102.009
\fBcsqrtf\fR4< 1
\fBctanf\fR, \fBctanhf\fR136.987
.TE

.SS "Single precision complex functions (x86)"
.sp

.sp
.TS
tab();
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
.
error boundlargest error
function (ulps)observed (ulps)notes
\fBcacosf\fR, \fBcacoshf\fR1< 1[1]
\fBcasinf\fR, \fBcasinhf\fR1< 1
\fBcatanf\fR, \fBcatanhf\fR6< 1
\fBccosf\fR, \fBccoshf\fR101.984
\fBcexpf\fR31.984
\fBclogf\fR3< 1
\fBcpowf\fR\(em< 1[2]
\fBcsinf\fR, \fBcsinhf\fR101.973
\fBcsqrtf\fR4< 1
\fBctanf\fR, \fBctanhf\fR134.657
.TE

.SS "Double precision complex functions (SPARC and x64)"
.sp

.sp
.TS
tab();
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
.
error boundlargest error
function (ulps)observed (ulps)notes
\fBcacos\fR, \fBcacosh\fR93.831[1]
\fBcasin\fR, \fBcasinh\fR93.732
\fBcatan\fR, \fBcatanh\fR64.179
\fBccos\fR, \fBccosh\fR103.832
\fBcexp\fR32.255
\fBclog\fR32.870
\fBcpow\fR--[2]
\fBcsin\fR, \fBcsinh\fR103.722
\fBcsqrt\fR43.204
\fBctan\fR, \fBctanh\fR137.143
.TE

.SS "Double precision complex functions (x86)"
.sp

.sp
.TS
tab();
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
.
error boundlargest error
function (ulps)observed (ulps)notes
\fBcacos\fR, \fBcacosh\fR93.624[1]
\fBcasin\fR, \fBcasinh\fR93.624
\fBcatan\fR, \fBcatanh\fR62.500
\fBccos\fR, \fBccosh\fR102.929
\fBcexp\fR32.147
\fBclog\fR31.927
\fBcpow\fR--[2]
\fBcsin\fR, \fBcsinh\fR102.918
\fBcsqrt\fR41.914
\fBctan\fR, \fBctanh\fR134.630
.TE

.SS "Quadruple precision complex functions (SPARC)"
.sp

.sp
.TS
tab();
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
.
error boundlargest error
function (ulps)observed (ulps)notes
\fBcacosl\fR, \fBcacoshl\fR93[1]
\fBcasinl\fR, \fBcasinhl\fR93
\fBcatanl\fR, \fBcatanhl\fR63
\fBccosl\fR, \fBccoshl\fR103
\fBcexpl\fR32
\fBclogl\fR32
\fBcpowl\fR--[2]
\fBcsinl\fR, \fBcsinhl\fR103
\fBcsqrtl\fR43
\fBctanl\fR, \fBctanhl\fR135
.TE

.SS "Extended precision complex functions (x86 and x64)"
.sp

.sp
.TS
tab();
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
cw(1.38i) cw(1.38i) cw(1.38i) cw(1.38i)
.
error boundlargest error
function (ulps)observed (ulps)notes
\fBcacosl\fR, \fBcacoshl\fR92[1]
\fBcasinl\fR, \fBcasinhl\fR92
\fBcatanl\fR, \fBcatanhl\fR62
\fBccosl\fR, \fBccoshl\fR103
\fBcexpl\fR32.699
\fBclogl\fR31
\fBcpowl\fR--[2]
\fBcsinl\fR, \fBcsinhl\fR103
\fBcsqrtl\fR41.452
\fBctanl\fR, \fBctanhl\fR135
.TE

.SS "Notes:"
.sp
.ne 2
.mk
.na
.B [1]
.ad
.RS 7n
.rt
The complex hyperbolic trigonometric functions are equivalent by symmetries
to their circular trigonometric counterparts. Because the implementations of
these functions exploit these symmetries, corresponding functions have the
same error bounds and observed errors.
.RE

.sp
.ne 2
.mk
.na
.B [2]
.ad
.RS 7n
.rt
For large arguments, the results computed by
.BR cpowf ,
.BR cpow ,
and
.B cpowl
can have unbounded relative error. It might be possible to give
error bounds for specific domains, but no such bounds are currently
.RI "available. The observed errors shown are for the domain {(" z , w )
:
\fBmax\fR(|\fBRe\fR \fIz\fR|, |\fBIm\fR \fIz\fR|, |\fBRe\fR \fIw\fR|,
|\fBIm\fR
.IR w |)
<= 1}.
.RE

.SH FILES
.sp
.ne 2
.mk
.na
.B /lib/libm.so.2
.ad
.RS 21n
.rt
shared object
.RE

.sp
.ne 2
.mk
.na
.B /lib/64/libm.so.2
.ad
.RS 21n
.rt
64-bit shared object
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWlibmsr
MT-LevelSafe with exceptions
.TE

.sp
.LP
As described on the
.BR lgamma "(3M) manual page,"
.B gamma()
and
.B lgamma()
and their
.B float
and
.B "long double"
counterparts are
Unsafe. All other functions in
.B libm.so.2
are MT-Safe.
.SH SEE ALSO
.sp
.LP
.BR Intro (3),
.BR lgamma (3M),
.BR math.h (3HEAD),
.BR attributes (5),
.BR standards (5)
