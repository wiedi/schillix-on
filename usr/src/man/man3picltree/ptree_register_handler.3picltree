'\" te
.\" Copyright (c) 2000, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ptree_register_handler 3PICLTREE "1 Aug 2000" "SunOS 5.11" "PICL Plug-In Library Functions"
.SH NAME
ptree_register_handler \- register a handler for the event
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lpicltree\fR [ \fIlibrary\fR.\|.\|. ]
#include <picltree.h>

\fBint\fR \fBptree_register_handler\fR(\fBconst char *\fIename\fR,
     \fBvoid (*\fIevt_handler\fR)(\fBconst char *\fIename\fR, const void *\fIearg\fR,
     \fBsize_t\fR \fIsize\fR, \fBvoid *\fIcookie\fR), \fBvoid *\fIcookie\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B ptree_register_handler()
function registers an event handler for
a PICL event. The argument
.I ename
specifies the name of the PICL event
for which to register the handler. The argument
.I evt_handler
specifies
the event handler function. The argument
.I cookie
is a pointer to
caller-specific data to be passed as an argument to the event handler when
it is invoked.
.sp
.LP
The event handler function must be defined as
.sp
.in +2
.nf
void evt_handler(const char *\fIename\fR, const void *\fIearg\fR, \e
        size_t \fIsize\fR, void *\fIcookie\fR)
.fi
.in -2

.sp
.LP
where,
.IR ename ,
.IR earg ,
.IR size ,
and
.I cookie
are the
arguments passed to the event handler when it is invoked. The argument
.I ename
is the PICL event name for which the handler is invoked. The
arguments
.I earg
and
.I size
gives the pointer to the event argument
buffer and its size, respectively. The argument
.I cookie
is the pointer
to the caller specific data registered with the handler. The arguments
.I ename
and
.I earg
point to buffers that are transient and shall not
be modified by the event handler or reused after the event handler finishes
execution.
.sp
.LP
The PICL framework invokes the event handlers in the order in which they
were registered when dispatching an event. If the event handler execution
order is required to be the same as the plug-in dependency order, then a
plug-in should register its handlers from its init function. The handlers
that do not have any ordering dependencies on other plug-in handlers can be
registered at any time.
.sp
.LP
The registered handler may be called at any time after this function is
called.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B 0
is returned. On failure, a non-negative
integer is returned to indicate an error and the handler is not
registered.
.SH ERRORS
.sp
.ne 2
.mk
.na
.B PICL_INVALIDARG
.ad
.RS 19n
.rt
Invalid argument
.RE

.sp
.ne 2
.mk
.na
.B PICL_FAILURE
.ad
.RS 19n
.rt
General system failure
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR ptree_unregister_handler (3PICLTREE),
.BR attributes (5)
