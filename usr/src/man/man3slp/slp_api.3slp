'\" te
.\" Copyright (c) 2003, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH slp_api 3SLP "16 Jan 2003" "SunOS 5.11" "Service Location Protocol Library Functions"
.SH NAME
slp_api \- Service Location Protocol Application Programming Interface
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-l\fRslp  [ \fIlibrary\fR .\|.\|. ]
#include <slp.h>
.fi

.SH DESCRIPTION
.sp
.LP
The
.B slp_api
is a C  language  binding  that  maps directly into the
Service Location Protocol ("\fBSLP\fR") defined  by  \fIRFC 2614\fR. This
implementation requires minimal overhead. With  the exception  of the
\fBSLPDereg()\fR and \fBSLPDelAttrs()\fR functions,  which  map into
different uses  of the
.B SLP
deregister  request, there is one C
language function  per protocol  request.   Parameters are for the most part
character buffers.  Memory management is kept simple because the client
allocates most memory and client callback functions are required to copy
incoming parameters into memory allocated by the client code. Any memory
returned directly from the
.B API
functions is deallocated using the
\fBSLPFree()\fR function.
.sp
.LP
To conform with standard C practice, all character strings passed to and
returned through the
.B API
are null-terminated, even though the
\fBSLP\fR protocol does not use null-terminated strings.  Strings passed as
parameters are
.B UTF-8
but they may still be passed as a C string (a
null-terminated sequence of bytes.)  Escaped characters must be encoded by
the
.B API
client as
.BR UTF-8 .
In the common case of
.BR US-ASCII ,
the usual one byte per character C strings work.
.B API
functions assist
in escaping and unescaping strings.
.sp
.LP
Unless otherwise noted, parameters to
.B API
functions and callbacks are
non-\fINULL\fR. Some parameters may have other restrictions.  If any
parameter fails to satisfy the restrictions on its value, the operation
returns a
.B PARAMETER_BAD
error.
.SS "Syntax for String Parameters"
.sp
.LP
Query strings, attribute registration lists, attribute deregistration
lists, scope lists, and attribute selection lists follow the syntax
described in
.IR "RFC 2608" .
The
.B API
reflects the strings passed from
clients directly into protocol  requests, and reflects out strings returned
from protocol replies directly to clients. As a consequence, clients are
responsible for formatting request strings, including escaping and
converting opaque values to escaped byte-encoded strings. Similarly, on
output, clients are required  to unescape strings and convert escaped
string-encoded opaques to binary. The
.B SLPEscape()
and
\fBSLPUnescape()\fR functions can be used for escaping \fBSLP\fR reserved
characters, but they perform no opaque processing.
.sp
.LP
Opaque values consist of a character buffer that contains a
\fBUTF-8\fR-encoded string, the first characters of which are the non
\fBUTF-8\fR encoding "\ff\fR". Subsequent characters are the escaped
values for the original bytes in the opaque.  The escape convention is
relatively simple. An escape consists of a backslash followed by the two
hexadecimal digits encoding the byte. An example is "\fB\2c\fR" for the byte
.BR 0x2c .
Clients handle opaque processing themselves, since the algorithm
is relatively simple and uniform.
.SS "System Properties"
.sp
.LP
The system properties established in
.BR slp.conf (4),
the configuration
file, are accessible through the
.B SLPGetProperty()
and
\fBSLPSetProperty()\fR functions. The \fBSLPSetProperty()\fR function
modifies properties only in the running process, not in the configuration
file. Errors are checked when the property is used and, as with parsing the
configuration file, are logged at the
.B LOG_INFO
priority. Program
execution continues without interruption by substituting the default for the
erroneous parameter. In general, individual agents should rarely be required
to override these properties, since they reflect properties of the \fBSLP\fR
network that are not  of concern to individual agents. If changes are
required, system administrators should modify the configuration file.
.sp
.LP
Properties are global to the process, affecting all threads and all handles
created with
.BR SLPOpen() .
.SS "Memory Management"
.sp
.LP
The only
.B API
functions that return memory specifically requiring
deallocation on the part of the client are
.BR SLPParseSrvURL() ,
.BR SLPFindScope() ,
.BR SLPEscape() ,
and
.BR SLPUnescape() .
Free this
memory with
.B SLPFree()
when it is no longer needed. Do not free
character strings returned by means of the
.BR SLPGetProperty()
function.
.sp
.LP
Any memory passed to callbacks belongs to the library, and it must not be
retained by the client code. Otherwise, crashes are possible. Clients must
copy data out of the callback parameters. No other use of the memory in
callback parameters is allowed.
.SS "Asynchronous and Incremental Return Semantics"
.sp
.LP
If a handle parameter to an
.B API
function is opened asynchronously,
the
.B API
function calls on the handle to check the other parameters,
opens the appropriate operation, and returns immediately. If an error occurs
in the process of starting the operation, the error code is returned. If the
handle parameter is opened synchronously, the function call is blocked until
all results are available, and it returns only after the results are
reported through the callback function. The return code indicates whether
any errors occurred during the operation.
.sp
.LP
The callback function is called whenever the
.B API
library has results
to report. The callback code is required to check the error code parameter
before looking at the other parameters. If the error code is not
.BR SLP_OK ,
the other parameters may be
.I NULL
or otherwise invalid.
The
.B API
library can terminate any outstanding operation on which an
error occurs. The callback code can similarly indicate that the operation
should be terminated by passing back
.B SLP_FALSE
to indicate that it is
not interested in receiving more results. Callback functions are not
permitted to recursively call into the
.B API
on the same
.BR SLPHandle .
If an attempt is made to call into the
.BR API ,
the
\fBAPI\fR function returns
.BR SLP_HANDLE_IN_USE .
Prohibiting recursive
callbacks on the same handle simplifies implementation of thread safe code,
since locks held on the handle will not be in place during a second outcall
on the handle.
.sp
.LP
The total number of results received can be controlled by setting the
\fBnet.slp.maxResults\fR parameter.
.sp
.LP
On the last call to a callback, whether asynchronous or synchronous, the
status code passed to the callback has value
.BR SLP_LAST_CALL .
There are
four reasons why the call can terminate:
.sp
.ne 2
.mk
.na
.B DA reply received
.ad
.RS 26n
.rt
A reply from a
.B DA
has been received and therefore nothing more is
expected.
.RE

.sp
.ne 2
.mk
.na
.B Multicast terminated
.ad
.RS 26n
.rt
The multicast convergence time has elapsed and the
.B API
library
multicast code is giving up.
.RE

.sp
.ne 2
.mk
.na
.B Multicast null results
.ad
.RS 26n
.rt
Nothing new has been received during multicast for awhile and the
.BR API
library multicast code is giving up on that (as an optimization).
.RE

.sp
.ne 2
.mk
.na
.B Maximum results
.ad
.RS 26n
.rt
The user has set the
.B net.slp.maxResults
property and that number of
replies has been collected and returned.
.RE

.SS "Configuration Files"
.sp
.LP
The
.B API
library reads
.BR slp.conf (4),
the default configuration
file, to obtain the operating parameters. You can specify the location of
this file with the
.B SLP_CONF_FILE
environment variable. If you do not
set this variable, or the file it refers to is invalid, the
.B API
will
use the default configuration file at \fB/etc/inet/slp.conf\fR instead.
.SS "Data Structures"
.sp
.LP
The data structures used by the
.B "SLP API"
are as follows:
.SS "The URL Lifetime Type"
.sp
.in +2
.nf
typedef enum {
     SLP_LIFETIME_DEFAULT = 10800,
     SLP_LIFETIME_MAXIMUM = 65535
} SLPURLLifetime;
.fi
.in -2

.sp
.LP
The enumeration \fBSLPURLLifetime\fR  contains  \fBURL\fR  lifetime values,
in seconds, that are frequently used.
.B SLP_LIFETIME_DEFAULT
is 3 hours,
while
.B SLP_LIFETIME_MAXIMUM
is  18 hours, which corresponds to the
maximum size of the \fBlifetime\fR field in
.B SLP
messages. Note that on
registration
.B SLP_LIFETIME_MAXIMUM
causes the advertisement to be
continually reregistered until the process exits.
.SS "The SLPBoolean Type"
.sp
.in +2
.nf
typedef enum {
     SLP_FALSE = 0,
     SLP_TRUE = 1
} SLPBoolean;
.fi
.in -2

.sp
.LP
The enumeration
.B SLPBoolean
is used as a Boolean flag.
.SS "The Service URL Structure"
.sp
.in +2
.nf
typedef struct srvurl {
     char *s_pcSrvType;
     char *s_pcHost;
     int   s_iPort;
     char *s_pcNetFamily;
     char *s_pcSrvPart;
} SLPSrvURL;
.fi
.in -2

.sp
.LP
The
.B SLPSrvURL
structure is filled in by the
.BR SLPParseSrvURL()
function with information parsed from a character buffer containing a
service
.BR URL .
The fields correspond to different parts of the
.BR URL ,
as follows:
.sp
.ne 2
.mk
.na
.B s_pcSrvType
.ad
.RS 17n
.rt
A pointer to a character string containing the service type name, including
naming authority.
.RE

.sp
.ne 2
.mk
.na
.B s_pcHost
.ad
.RS 17n
.rt
A pointer to a character string containing the host identification
information.
.RE

.sp
.ne 2
.mk
.na
.B s_iPort
.ad
.RS 17n
.rt
The port number, or zero, if none. The port is only available if the
transport is
.BR IP .
.RE

.sp
.ne 2
.mk
.na
.B s_pcNetFamily
.ad
.RS 17n
.rt
A pointer to a character string containing the network address family
identifier. Possible values are "\fBipx\fR" for the \fBIPX\fR family,
"\fBat\fR" for the Appletalk family, and \fB""\fR, the empty string, for the
\fBIP\fR address family.
.RE

.sp
.ne 2
.mk
.na
.B s_pcSrvPart
.ad
.RS 17n
.rt
The remainder of the
.BR URL ,
after the host identification.
.sp
The host and port should be sufficient to open a socket to the machine
hosting the service; the remainder of the
.B URL
should allow further
differentiation of the service.
.RE

.SS "The SLPHandle"
.sp
.in +2
.nf
typedef void* SLPHandle;
.fi
.in -2

.sp
.LP
The
.B SLPHandle
type is returned by
.B SLPOpen()
and is a parameter
to all
.B SLP
functions. It serves as a handle for all resources
allocated on behalf of the process by the
.B SLP
library. The type is
opaque.
.SS "Callbacks"
.sp
.LP
Include a function pointer to a callback function specific to a particular
\fBAPI\fR operation in the parameter list when the \fBAPI\fR function is
invoked. The callback function is called with the results of the operation
in both the synchronous and asynchronous cases.  When the callback function
is invoked, the memory included in the callback parameters is owned by the
\fBAPI\fR library, and the client code in the callback must copy out the
contents if it wants to maintain the information longer than the duration of
the current callback call.
.sp
.LP
Each callback parameter list contains parameters for reporting the results
of the operation, as well as an error code parameter and a cookie parameter.
The error code parameter reports the error status of the ongoing (for
asynchronous) or completed (for synchronous) operation. The cookie parameter
allows the client code that starts the operation by invoking the
.BR API
function to pass information down to the callback without using global
variables. The callback returns an
.B SLPBoolean
to indicate whether the
\fBAPI\fR library should continue processing the operation. If the value
returned from the callback is
.BR SLP_TRUE ,
asynchronous operations are
terminated. Synchronous operations ignore the return since the operation is
already complete.
.SS "\fBSLPRegReport()\fR"
.sp
.in +2
.nf
typedef void SLPRegReport(SLPHandle hSLP,
     SLPError errCode,
     void *pvCookie);
.fi
.in -2

.sp
.LP
\fBSLPRegReport()\fR is the callback function to the
.BR SLPReg() ,
.BR SLPDereg() ,
and
.B SLPDelAttrs()
functions. The
\fBSLPRegReport()\fR callback has the following parameters:
.sp
.ne 2
.mk
.na
.I hSLP
.ad
.RS 12n
.rt
The\fBSLPHandle()\fR used to initiate the operation.
.RE

.sp
.ne 2
.mk
.na
.I errCode
.ad
.RS 12n
.rt
An error code indicating if an error occurred during the operation.
.RE

.sp
.ne 2
.mk
.na
.I pvCookie
.ad
.RS 12n
.rt
Memory passed down from the client code that called the original
.BR API
function, starting the operation. It may be
.IR NULL .
.RE

.SS "\fBSLPSrvTypeCallback()\fR"
.sp
.in +2
.nf
typedef SLPBoolean SLPSrvTypeCallback(SLPHandle hSLP,
     const char* pcSrvTypes,
     SLPError errCode,
     void *pvCookie);
.fi
.in -2

.sp
.LP
The
.B SLPSrvTypeCallback()
type is the type of the callback function
parameter to the
.B SLPFindSrvTypes()
function. The results are collated
when the
.I hSLP
handle is opened either synchronously or asynchronously.
The
.B SLPSrvTypeCallback()
callback has the following parameters:
.sp
.ne 2
.mk
.na
.I hSLP
.ad
.RS 14n
.rt
The
.B SLPHandle
used to initiate the operation.
.RE

.sp
.ne 2
.mk
.na
.I pcSrvTypes
.ad
.RS 14n
.rt
A character buffer containing a comma-separated, null-terminated list of
service types.
.RE

.sp
.ne 2
.mk
.na
.I errCode
.ad
.RS 14n
.rt
An error code indicating if an error occurred during the operation. The
callback should check this error code before processing the parameters. If
the error code is other than
.BR SLP_OK ,
then the
.B API
library may
choose to terminate the outstanding operation.
.RE

.sp
.ne 2
.mk
.na
.I pvCookie
.ad
.RS 14n
.rt
emory passed down from the client code that called the original
.BR API
function, starting the operation. It can be
.IR NULL .
.RE

.SS "SLPSrvURLCallback"
.sp
.in +2
.nf
typedef SLPBoolean SLPSrvURLCallback(SLPHandle hSLP,
     const char* pcSrvURL,
     unsigned short usLifetime,
     SLPError errCode,
     void *pvCookie);
.fi
.in -2

.sp
.LP
The
.B SLPSrvURLCallback()
type is the type of the callback function
parameter to the
.B SLPFindSrvs()
function. The results are collated,
regardless of whether the
.I hSLP
was opened collated or uncollated. The
\fBSLPSrvURLCallback()\fR callback has the following parameters:
.sp
.ne 2
.mk
.na
.I hSLP
.ad
.RS 14n
.rt
The
.B SLPHandle
used to initiate the operation.
.RE

.sp
.ne 2
.mk
.na
.I pcSrvURL
.ad
.RS 14n
.rt
A character buffer containing the returned service
.BR URL .
.RE

.sp
.ne 2
.mk
.na
\fIusLifetime\fR
.ad
.RS 14n
.rt
An unsigned short giving the life time of the service advertisement. The
value must be an unsigned integer less than or equal to
.BR SLP_LIFETIME_MAXIMUM .
.RE

.sp
.ne 2
.mk
.na
.I errCode
.ad
.RS 14n
.rt
An error code indicating if an error occurred during the operation. The
callback should check this error code before processing the parameters. If
the error code is other than
.BR SLP_OK ,
then the
.B API
library may
choose to terminate the outstanding operation.
.RE

.sp
.ne 2
.mk
.na
.I pvCookie
.ad
.RS 14n
.rt
Memory passed down from the client code that called the original
.BR API
function, starting the operation. It can be
.IR NULL .
.RE

.SS "SLPAttrCallback"
.sp
.in +2
.nf
typedef SLPBoolean SLPAttrCallback(SLPHandle hSLP,
     const char* pcAttrList,
     SLPError errCode,
     void *pvCookie);
.fi
.in -2

.sp
.LP
The
.B SLPAttrCallback()
type is the type of the callback function
parameter to the
.B SLPFindAttrs()
function.
.sp
.LP
The behavior of the callback differs depending upon whether the attribute
request was by
.B URL
or by service type. If the \fBSLPFindAttrs()\fR
operation was originally called with a
.BR URL ,
the callback is called
once, in addition to the last call, regardless of whether the handle was
opened asynchronously or synchronously. The
.I pcAttrList
parameter
contains the requested attributes as a comma-separated list. It is empty if
no attributes match the original tag list.
.sp
.LP
If the
.B SLPFindAttrs()
operation was originally called with a service
type, the value of
.I pcAttrList
and the calling behavior depend upon
whether the handle was opened asynchronously or synchronously. If the handle
.RB "was opened asynchronously, the callback is called every time the" " API"
library has results from a remote agent. The
.I pcAttrList
parameter is
collated between calls, and contains a comma-separated list of the results
from the agent that immediately returned. If the handle was opened
synchronously, the results are collated from all returning agents, the
callback is called once, and the
.I pcAttrList
parameter is set to the
collated result.
.sp
.LP
\fBSLPAttrCallback()\fR callback has the following parameters:
.sp
.ne 2
.mk
.na
.I hSLP
.ad
.RS 14n
.rt
The
.B SLPHandle
used to initiate the operation.
.RE

.sp
.ne 2
.mk
.na
.I pcAttrList
.ad
.RS 14n
.rt
A character buffer containing a comma-separated and null-terminated list of
attribute id/value assignments, in
.B SLP
wire format.
.RE

.sp
.ne 2
.mk
.na
.I errCode
.ad
.RS 14n
.rt
An error code indicating if an error occurred during the operation. The
callback should check this error code before processing the parameters. If
the error code is other than
.BR SLP_OK ,
then the
.B API
library may
choose to terminate the outstanding operation.
.RE

.sp
.ne 2
.mk
.na
.I pvCookie
.ad
.RS 14n
.rt
Memory passed down from the client code that called the original
.BR API
function, starting the operation. It can be
.IR NULL .
.RE

.SH ERRORS
.sp
.LP
An interface that is part of the
.B "SLP API"
may return one of the
following values.
.sp
.ne 2
.mk
.na
.B SLP_LAST_CALL
.ad
.RS 30n
.rt
The
.B SLP_LAST_CALL
code is passed to callback functions when the
\fBAPI\fR library has no more data for them and therefore no further calls
will be made to the callback on the currently outstanding operation. The
callback uses this to signal the main body of the client code that no more
data will be forthcoming on the operation, so that the main body of the
client code can break out of data collection loops. On the last call of a
callback during both a synchronous and asynchronous call, the error code
parameter has value
.BR SLP_LAST_CALL ,
and the other parameters are all
.IR NULL .
If no results are returned by an
.B API
operation, then only
one call is made, with the error parameter set to
.BR SLP_LAST_CALL .
.RE

.sp
.ne 2
.mk
.na
.B SLP_OK
.ad
.RS 30n
.rt
The
.B SLP_OK
code indicates that the no error occurred during the
operation.
.RE

.sp
.ne 2
.mk
.na
.B SLP_LANGUAGE_NOT_SUPPORTED
.ad
.RS 30n
.rt
No
.B DA
or
.B SA
has service advertisement information in the
language requested, but at least one
.B DA
or
.B SA
might have
information for that service in another language.
.RE

.sp
.ne 2
.mk
.na
.B SLP_PARSE_ERROR
.ad
.RS 30n
.rt
The
.B SLP
message was rejected by a remote
.B SLP
agent. The
\fBAPI\fR returns this error only when no information was retrieved, and at
least one
.B SA
or
.B DA
indicated a protocol error. The data supplied
through the
.B API
may be malformed or damaged in transit.
.RE

.sp
.ne 2
.mk
.na
.B SLP_INVALID_REGISTRATION
.ad
.RS 30n
.rt
The
.B API
may return this error if an attempt to register a service was
rejected by all \fBDA\fRs because of a malformed
.B URL
or
attributes.\fBSLP\fR does not return the error if at least one \fBDA\fR
accepts the registration.
.RE

.sp
.ne 2
.mk
.na
.B SLP_SCOPE_NOT_SUPPORTED
.ad
.RS 30n
.rt
The
.B API
returns this error if the
.B UA
or
.B SA
has been
configured with the
.B net.slp.useScopes
list of scopes and the
.BR SA
request did not specify one or more of these allowable scopes, and no
others. It may also be returned by a
.B DA
if the scope included in a
request is not supported by a
.BR DA .
.RE

.sp
.ne 2
.mk
.na
.B SLP_AUTHENTICATION_ABSENT
.ad
.RS 30n
.rt
This error arises when the
.B UA
or
.B SA
failed to send an
authenticator for requests or registrations when security is enabled and
thus required.
.RE

.sp
.ne 2
.mk
.na
.B SLP_AUTHENTICATION_FAILED
.ad
.RS 30n
.rt
This error arises when a authentication on an
.B SLP
message received
from a remote
.B SLP
agent failed.
.RE

.sp
.ne 2
.mk
.na
.B SLP_INVALID_UPDATE
.ad
.RS 30n
.rt
An update for a nonexisting registration was issued, or the update includes
a service type or scope different than that in the initial registration.
.RE

.sp
.ne 2
.mk
.na
.B SLP_REFRESH_REJECTED
.ad
.RS 30n
.rt
The
.B SA
attempted to refresh a registration more frequently than the
minimum refresh interval. The
.B SA
should call the appropriate
.BR API
function to obtain the minimum refresh interval to use.
.RE

.sp
.ne 2
.mk
.na
.B SLP_NOT_IMPLEMENTED
.ad
.RS 30n
.rt
An outgoing request overflowed the maximum network
.B MTU
size. The
request should be reduced in size or broken into pieces and tried again.
.RE

.sp
.ne 2
.mk
.na
.B SLP_BUFFER_OVERFLOW
.ad
.RS 30n
.rt
An outgoing request overflowed the maximum network
.B MTU
size. The
request should be reduced in size or broken into pieces and tried again.
.RE

.sp
.ne 2
.mk
.na
.B SLP_NETWORK_TIMED_OUT
.ad
.RS 30n
.rt
When no reply can be obtained in the time specified by the configured
timeout interval, this error is returned.
.RE

.sp
.ne 2
.mk
.na
.B SLP_NETWORK_INIT_FAILED
.ad
.RS 30n
.rt
If the network cannot initialize properly, this error is returned.
.RE

.sp
.ne 2
.mk
.na
.B SLP_MEMORY_ALLOC_FAILED
.ad
.RS 30n
.rt
If the
.B API
fails to allocate memory, the operationis aborted and
returns this.
.RE

.sp
.ne 2
.mk
.na
.B SLP_PARAMETER_BAD
.ad
.RS 30n
.rt
If a parameter passed into an interface is bad, this  error is returned.
.RE

.sp
.ne 2
.mk
.na
.B SLP_NETWORK_ERROR
.ad
.RS 30n
.rt
The failure of networking during normal operations causes this error to be
returned.
.RE

.sp
.ne 2
.mk
.na
.B SLP_INTERNAL_SYSTEM_ERROR
.ad
.RS 30n
.rt
A basic failure of the
.B API
causes this error to be returned. This
occurs when a system call or library fails. The operation could not
recover.
.RE

.sp
.ne 2
.mk
.na
.B SLP_HANDLE_IN_USE
.ad
.RS 30n
.rt
In the C
.BR API ,
callback functions are not permitted to recursively
call into the
.B API
on the same
.BR SLPHandle ,
either directly or
indirectly. If an attempt is made to do so, this error is returned from the
called
.B API
function
.RE

.SH LIST OF ROUTINES
.sp
.ne 2
.mk
.na
.B SLPOpen()
.ad
.RS 27n
.rt
open an
.B SLP
handle
.RE

.sp
.ne 2
.mk
.na
.B SLPClose()
.ad
.RS 27n
.rt
close an open
.B SLP
handle
.RE

.sp
.ne 2
.mk
.na
.B SLPReg()
.ad
.RS 27n
.rt
register a service advertisement
.RE

.sp
.ne 2
.mk
.na
.B SLPDereg()
.ad
.RS 27n
.rt
deregister a service advertisement
.RE

.sp
.ne 2
.mk
.na
.B SLPDelAttrs()
.ad
.RS 27n
.rt
delete attributes
.RE

.sp
.ne 2
.mk
.na
.B SLPFindSrvTypes()
.ad
.RS 27n
.rt
return service types
.RE

.sp
.ne 2
.mk
.na
.B SLPFindSrvs()
.ad
.RS 27n
.rt
return service URLs
.RE

.sp
.ne 2
.mk
.na
.B SLPFindAttrs()
.ad
.RS 27n
.rt
return service attributes
.RE

.sp
.ne 2
.mk
.na
\fBSLPGetRefreshInterval()\fR
.ad
.RS 27n
.rt
return the maximum allowed refresh interval for
.BR SA s
.RE

.sp
.ne 2
.mk
.na
.B SLPFindScopes()
.ad
.RS 27n
.rt
return list of configured and discovered scopes
.RE

.sp
.ne 2
.mk
.na
.B SLPParseSrvURL()
.ad
.RS 27n
.rt
parse service
.BR URL
.RE

.sp
.ne 2
.mk
.na
.B SLPEscape()
.ad
.RS 27n
.rt
escape special characters
.RE

.sp
.ne 2
.mk
.na
.B SLPUnescape()
.ad
.RS 27n
.rt
translate escaped characters into
.BR UTF-8
.RE

.sp
.ne 2
.mk
.na
.B SLPGetProperty()
.ad
.RS 27n
.rt
return
.B SLP
configuration property
.RE

.sp
.ne 2
.mk
.na
.B SLPSetProperty()
.ad
.RS 27n
.rt
set an
.B SLP
configuration property
.RE

.sp
.ne 2
.mk
.na
.B slp_strerror()
.ad
.RS 27n
.rt
map
.B SLP
error code to message
.RE

.sp
.ne 2
.mk
.na
.B SLPFree()
.ad
.RS 27n
.rt
free memory
.RE

.SH ENVIRONMENT VARIABLES
.sp
.LP
When
.B SLP_CONF_FILE
is set, use this file for configuration.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWslpu
_
CSICSI-enabled
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR slpd (1M),
.BR slp.conf (4),
.BR slpd.reg (4),
.BR attributes (5)
.sp
.LP
.I System Administration Guide: Network Services
.sp
.LP
Guttman, E., Perkins, C., Veizades, J., and Day, M. \fIRFC 2608, Service
Location Protocol, Version 2\fR. The Internet Society. June 1999.
.sp
.LP
Kempf, J. and Guttman, E.
.IR "RFC 2614, An API for Service Location" .
The
Internet Society. June 1999.
