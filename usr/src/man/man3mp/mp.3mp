'\" te
.\" Copyright (c) 2002 Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH mp 3MP "14 Nov 2002" "SunOS 5.11" "Multiple Precision Library Functions"
.SH NAME
mp, mp_madd, mp_msub, mp_mult, mp_mdiv, mp_mcmp, mp_min, mp_mout, mp_pow,
mp_gcd, mp_rpow, mp_msqrt, mp_sdiv, mp_itom, mp_xtom, mp_mtox, mp_mfree \-
multiple precision integer arithmetic
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lmp\fR [ \fIlibrary\fR.\|.\|. ]
#include <mp.h>

\fBvoid\fR \fBmp_madd\fR(\fBMINT *\fIa\fR, \fBMINT *\fIb\fR, \fBMINT *\fIc\fR);
.fi

.LP
.nf
\fBvoid\fR \fBmp_msub\fR(\fBMINT *\fIa\fR, \fBMINT *\fIb\fR, \fBMINT *\fIc\fR);
.fi

.LP
.nf
\fBvoid\fR \fBmp_mult\fR(\fBMINT *\fIa\fR, \fBMINT *\fIb\fR, \fBMINT *\fIc\fR);
.fi

.LP
.nf
\fBvoid\fR \fBmp_mdiv\fR(\fBMINT *\fIa\fR, \fBMINT *\fIb\fR, \fBMINT *\fIq\fR, \fBMINT *\fIr\fR);
.fi

.LP
.nf
\fBint\fR \fBmp_mcmp\fR(\fBMINT *\fIa\fR, \fBMINT *\fIb\fR);
.fi

.LP
.nf
\fBint\fR \fBmp_min\fR(\fBMINT *\fIa\fR);
.fi

.LP
.nf
\fBvoid\fR \fBmp_mout\fR(\fBMINT *\fIa\fR);
.fi

.LP
.nf
\fBvoid\fR \fBmp_pow\fR(\fBMINT *\fIa\fR, \fBMINT *\fIb\fR, \fBMINT *\fIc\fR, \fBMINT *\fId\fR);
.fi

.LP
.nf
\fBvoid\fR \fBmp_gcd\fR(\fBMINT *\fIa\fR, \fBMINT *\fIb\fR, \fBMINT *\fIc\fR);
.fi

.LP
.nf
\fBvoid\fR \fBmp_rpow\fR(\fBMINT *\fIa\fR, \fBshort\fR \fIn\fR, \fBMINT *\fIb\fR);
.fi

.LP
.nf
\fBint\fR \fBmp_msqrt\fR(\fBMINT *\fIa\fR, \fBMINT *\fIb\fR, \fBMINT *\fIr\fR);
.fi

.LP
.nf
\fBvoid\fR \fBmp_sdiv\fR(\fBMINT *\fIa\fR, \fBshort\fR \fIn\fR, \fBMINT *\fIq\fR, \fBshort *\fIr\fR);
.fi

.LP
.nf
\fBMINT *\fR \fBmp_itom\fR(\fBshort\fR \fIn\fR);
.fi

.LP
.nf
\fBMINT *\fR \fBmp_xtom\fR(\fBchar *\fIa\fR);
.fi

.LP
.nf
\fBchar *\fR \fBmp_mtox\fR(\fBMINT *\fIa\fR);
.fi

.LP
.nf
\fBvoid\fR \fBmp_mfree\fR(\fBMINT *\fIa\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions perform arithmetic on integers of arbitrary length. The
integers are stored using the defined type
.BR MINT .
Pointers to a
.BR MINT
should be initialized using the function \fBmp_itom(\fIn\fR)\fR, which sets the
initial value to \fIn\fR. Alternatively, \fBmp_xtom(\fIa\fR)\fR may be used to
initialize a
.B MINT
from a string of hexadecimal digits.
\fBmp_mfree(\fIa\fR)\fR may be used to release the storage allocated by the
\fBmp_itom(\fIa\fR)\fR and \fBmp_xtom(\fIa\fR)\fR routines.
.sp
.LP
The \fBmp_madd\fR(\fIa\fR,\fIb\fR,\fIc\fR),
\fBmp_msub\fR(\fIa\fR,\fIb\fR,\fIc\fR) and
\fBmp_mult\fR(\fIa\fR,\fIb\fR,\fIc\fR) functions assign to their third arguments
the sum, difference, and product, respectively, of their first two arguments.
The \fBmp_mdiv\fR(\fIa\fR,\fIb\fR,\fIq\fR,\fIr\fR) function assigns the quotient
and remainder, respectively, to its third and fourth arguments.  The
\fBmp_sdiv\fR(\fIa\fR,\fIn\fR,\fIq\fR,\fIr\fR) function is similar to
\fBmp_mdiv\fR(\fIa\fR,\fIb\fR,\fIq\fR,\fIr\fR) except that the divisor is an
ordinary integer.  The \fBmp_msqrt\fR(\fIa\fR,\fIb\fR,\fIr\fR) function produces
the square root and remainder of its first argument.  The \fB mp_mcmp\fR(\fIa\fR,\fIb\fR) function compares the values of its arguments and
returns
.B 0
if the two values are equal, a value greater than
.B 0
if
the first argument is greater than the second, and a value less than
.B 0
if
the second argument is greater than the first.  The
\fBmp_rpow\fR(\fIa\fR,\fIn\fR,\fIb\fR) function raises \fIa\fR to the \fIn\fRth
power and assigns this value to \fIb\fR. The \fBmp_pow\fR(\fIa\fR,\fIb\fR
,\fIc\fR,\fId\fR) function raises \fIa\fR to the \fIb\fRth power, reduces the
result
.B modulo
.I c
and assigns this value to
.IR d .
The
\fBmp_min(\fIa\fR)\fR and \fBmp_mout(\fIa\fR)\fR functions perform decimal input
and output. The \fBmp_gcd\fR(\fIa\fR,\fIb\fR,\fIc\fR) function finds the
greatest common divisor of the first two arguments, returning it in the third
argument. The \fBmp_mtox(\fI a\fR)\fR function provides the inverse of
\fBmp_xtom(a)\fR. To release the storage allocated by \fBmp_mtox(\fIa\fR)\fR use
.B free()
(see
.BR malloc (3C)).
.sp
.LP
Use the
.B -lmp
loader option to obtain access to these functions.
.SH FILES
.sp
.ne 2
.mk
.na
.B /usr/lib/libmp.so
.ad
.RS 21n
.rt
shared object
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR exp (3M),
.BR malloc (3C),
.BR libmp (3LIB),
.BR attributes (5)
.SH DIAGNOSTICS
.sp
.LP
Illegal operations and running out of memory produce messages and core
images.
.SH WARNINGS
.sp
.LP
The function
.B pow()
exists in both
.B libmp
and
.B libm
with widely
differing semantics. This is the reason
.B libmp.so.2
exists.
.B libmp.so.1
exists solely for reasons of backward compatibility, and should
not be used otherwise. Use the  \fBmp_*(\|)\fR functions instead.  See
.BR libmp (3LIB).
