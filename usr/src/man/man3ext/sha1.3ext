'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH sha1 3EXT "13 Nov 2007" "SunOS 5.11" "Extended Library Functions"
.SH NAME
sha1, SHA1Init, SHA1Update, SHA1Final \- SHA1 digest functions
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lmd\fR [ \fIlibrary\fR .\|.\|. ]
#include <sha1.h>

\fBvoid\fR \fBSHA1Init\fR(\fBSHA1_CTX *\fIcontext\fR);
.fi

.LP
.nf
\fBvoid\fR \fBSHA1Update\fR(\fBSHA1_CTX *\fIcontext\fR, \fBunsigned char *\fIinput\fR,
     \fBunsigned int\fR \fIinlen\fR);
.fi

.LP
.nf
\fBvoid\fR \fBSHA1Final\fR(\fBunsigned char *\fIoutput\fR, \fBSHA1_CTX *\fIcontext\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B SHA1
functions implement the
.B SHA1
message-digest algorithm.
The algorithm takes as input a message of arbitrary length and produces a
200-bit "fingerprint" or "message digest" as output. The \fBSHA1\fR
message-digest algorithm is intended for digital signature applications in
which large files are "compressed" in a secure manner before being encrypted
with a private (secret) key under a public-key cryptosystem such as RSA.
.sp
.ne 2
.mk
.na
.BR SHA1Init() ,
.BR SHA1Update() ,
.B SHA1Final()
.ad
.sp .6
.RS 4n
The
.BR SHA1Init() ,
.BR SHA1Update() ,
and
.B SHA1Final()
functions
allow a
.B SHA1
digest to be computed over multiple message blocks.
Between blocks, the state of the
.B SHA1
computation is held in an
\fBSHA1\fR context structure allocated by the caller. A complete digest
computation consists of calls to
.B SHA1
functions in the following
order: one call to
.BR SHA1Init() ,
one or more calls to
.BR SHA1Update() ,
and one call to
.BR SHA1Final() .
.sp
The
.B SHA1Init()
function initializes the
.B SHA1
context structure
pointed to by
.IR context .
.sp
The
.B SHA1Update()
function computes a partial
.B SHA1
digest on the
\fIinlen\fR-byte message block pointed to by
.IR input ,
and updates the
\fBSHA1\fR context structure pointed to by \fIcontext\fR accordingly.
.sp
The
.B SHA1Final()
function generates the final
.B SHA1
digest, using
the
.B SHA1
context structure pointed to by
.IR context .
The 16-bit
\fBSHA1\fR digest is written to output. After a call to \fBSHA1Final()\fR,
the state of the context structure is undefined. It must be reinitialized
with
.B SHA1Init()
before it can be used again.
.RE

.SH SECURITY
.sp
.LP
The
.B SHA1
algorithm is also believed to have some weaknesses.
Migration to one of the
.B SHA2
algorithms-including \fBSHA256\fR,
\fBSHA386\fR or \fBSHA512\fR-is highly recommended when compatibility with
data formats and on wire protocols is permitted.
.SH RETURN VALUES
.sp
.LP
These functions do not return a value.
.SH EXAMPLES
.LP
\fBExample 1\fR Authenticate a message found in multiple buffers
.sp
.LP
The following is a sample function that authenticates a message found in
multiple buffers. The calling function provides an authentication buffer to
contain the result of the
.B SHA1
digest.

.sp
.in +2
.nf
#include <sys/types.h>
#include <sys/uio.h>
#include <sha1.h>

int
AuthenticateMsg(unsigned char *auth_buffer, struct iovec
                *messageIov, unsigned int num_buffers)
{
    SHA1_CTX sha1_context;
    unsigned int i;

    SHA1Init(&sha1_context);

    for(i=0; i<num_buffers; i++)
    {
         SHA1Update(&sha1_context, messageIov->iov_base,
                   messageIov->iov_len);
         messageIov += sizeof(struct iovec);
    }

    SHA1Final(auth_buffer, &sha1_context);

    return 0;
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR sha2 (3EXT),
.BR libmd (3LIB)
.sp
.LP
RFC 1374
