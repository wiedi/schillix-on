'\" te
.\" Copyright (c) 2007, Sun Microsystems Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH tsalarm_get 3EXT "4 Sep 2007" "SunOS 5.11" "Extended Library Functions"
.SH NAME
tsalarm_get, tsalarm_set \- get or set alarm relays
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-ltsalarm\fR [ \fIlibrary\fR.\|.\|. ]
#include <tsalarm.h>

\fBint\fR \fBtsalarm_get\fR(\fBuint32_t\fR \fIalarm_type\fR, \fBuint32_t *\fIalarm_state\fR);
.fi

.LP
.nf
\fBint\fR \fBtsalarm_set\fR(\fBuint32_t\fR \fIalarm_type\fR, \fBuint32_t\fR \fIalarm_state\fR);
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I alarm_type
.ad
.sp .6
.RS 4n
The alarm type whose state is retrieved or set. Valid settings are:
.sp
.ne 2
.mk
.na
.B TSALARM_CRITICAL
.ad
.RS 20n
.rt
critical
.RE

.sp
.ne 2
.mk
.na
.B TSALARM_MAJOR
.ad
.RS 20n
.rt
major
.RE

.sp
.ne 2
.mk
.na
.B TSALARM_MINOR
.ad
.RS 20n
.rt
minor
.RE

.sp
.ne 2
.mk
.na
.B TSALARM_USER
.ad
.RS 20n
.rt
user
.RE

.RE

.sp
.ne 2
.mk
.na
.I alarm_state
.ad
.sp .6
.RS 4n
The state of the alarm. Valid settings are:
.sp
.ne 2
.mk
.na
.B TSALARM_STATE_ON
.ad
.RS 25n
.rt
The alarm state needs to be changed to "on", or is returned as "on".
.RE

.sp
.ne 2
.mk
.na
.B TSALARM_STATE_OFF
.ad
.RS 25n
.rt
The alarm state needs to be changed to "off", or is returned as "off".
.RE

.sp
.ne 2
.mk
.na
.B TSALARM_STATE_UNKNOWN
.ad
.RS 25n
.rt
The alarm state is returned as unknown.
.RE

.RE

.SH DESCRIPTION
.sp
.LP
The TSALARM interface provides functions through which alarm relays can be
controlled. The set of functions and data structures of this interface are
defined in the
.B <tsalarm.h>
header.
.sp
.LP
There are four alarm relays that are controlled by ILOM. Each alarm can be
set to "on" or "off" by using \fBtsalarm\fR interfaces provided from the
host. The four alarms are labeled as
.BR critical ,
.BR major ,
.BR minor ,
and
.BR user .
The user alarm is set by a user application
depending on system condition. LEDs in front of the box provide a visual
indication of the four alarms. The number of alarms and their meanings and
labels can vary across platforms.
.sp
.LP
The
.B tsalarm_get()
function gets the state of
.I alarm_type
and
returnsit in
.IR alarm_state .
If successful, the function returns 0.
.sp
.LP
The
.B tsalarm_set()
function sets the state of
.I alarm_type
to the
value in
.IR alarm_state .
If successful, the function returns 0.
.sp
.LP
The following structures are defined in
.BR <tsalarm.h> :
.sp
.in +2
.nf
typedef struct tsalarm_req {
     uint32_t     alarm_id;
     uint32_t     alarm_action;
} tsalarm_req_t;
.fi
.in -2

.sp
.in +2
.nf
typedef struct tsalarm_resp {
     uint32_t     status;
     uint32_t     alarm_id;
     uint32_t     alarm_state;
} tsalarm_resp_t;
.fi
.in -2

.SH RETURN VALUES
.sp
.LP
The
.B tsalarm_get()
and
.B tsalarm_set()
functions return the
following values:
.sp
.ne 2
.mk
.na
.B TSALARM_CHANNEL_INIT_FAILURE
.ad
.sp .6
.RS 4n
Channel initialization failed.
.RE

.sp
.ne 2
.mk
.na
.B TSALARM_COMM_FAILURE
.ad
.sp .6
.RS 4n
Channel communication failed.
.RE

.sp
.ne 2
.mk
.na
.B TSALARM_NULL_REQ_DATA
.ad
.sp .6
.RS 4n
Allocating memory for request data failed.
.RE

.sp
.ne 2
.mk
.na
.B TSALARM_SUCCESS
.ad
.sp .6
.RS 4n
Successful completion.
.RE

.sp
.ne 2
.mk
.na
.B TSALARM_UNBOUND_PACKET_RECVD
.ad
.sp .6
.RS 4n
An incorrect packet was received.
.RE

.sp
.LP
The
.B tsalarm_get()
function returns the following value:
.sp
.ne 2
.mk
.na
.B TSALARM_GET_ERROR
.ad
.RS 21n
.rt
An error occurred  while getting the alarm state.
.RE

.sp
.LP
The
.B tsalarm_set()
function returns the following value:
.sp
.ne 2
.mk
.na
.B TSALARM_SET_ERROR
.ad
.RS 21n
.rt
An error occurred  while setting the alarm state.
.RE

.SH EXAMPLES
.LP
.B Example 1
Get and set an alarm state.
.sp
.LP
The following example demonstrates how to get and set an alarm state.

.sp
.in +2
.nf
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <tsalarm.h>

void help(char *name) {
   printf("Syntax:  %s [get <type> | set <type> <state>]\en\en", name);
   printf("         type  = { critical, major, minor, user }\en");
   printf("         state = { on, off }\en\en");

   exit(0);
}

int main(int argc, char **argv) {

   uint32_t alarm_type, alarm_state;

   if (argc < 3)
      help(argv[0]);

   if (strncmp(argv[2], "critical", 1) == 0)
      alarm_type = TSALARM_CRITICAL;
   else if (strncmp(argv[2], "major", 2) == 0)
      alarm_type = TSALARM_MAJOR;
   else if (strncmp(argv[2], "minor", 2) == 0)
      alarm_type = TSALARM_MINOR;
   else if (strncmp(argv[2], "user", 1) == 0)
      alarm_type = TSALARM_USER;
   else
      help(argv[0]);

   if (strncmp(argv[1], "get", 1) == 0) {
      tsalarm_get(alarm_type, &alarm_state);
      printf("alarm = %d\etstate = %d\en", alarm_type, alarm_state);
   }
   else if (strncmp(argv[1], "set", 1) == 0) {
      if (strncmp(argv[3], "on", 2) == 0)
         alarm_state = TSALARM_STATE_ON;
      else if (strncmp(argv[3], "off", 2) == 0)
         alarm_state = TSALARM_STATE_OFF;
      else
         help(argv[0]);

      tsalarm_set(alarm_type, alarm_state);
   }
   else {
      help(argv[0]);
   }

   return 0;
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityUncommitted
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libtsalarm (3LIB),
.BR attributes (5)
