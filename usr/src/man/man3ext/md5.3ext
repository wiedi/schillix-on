'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH md5 3EXT "13 Nov 2007" "SunOS 5.11" "Extended Library Functions"
.SH NAME
md5, md5_calc, MD5Init, MD5Update, MD5Final \- MD5 digest functions
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lmd5\fR [ \fIlibrary\fR .\|.\|. ]
#include <md5.h>

\fBvoid\fR \fBmd5_calc\fR(\fBunsigned char *\fIoutput\fR, \fBunsigned char *\fIinput\fR,
     \fBunsigned int\fR \fIinlen\fR);
.fi

.LP
.nf
\fBvoid\fR \fBMD5Init\fR(\fBMD5_CTX *\fIcontext\fR);
.fi

.LP
.nf
\fBvoid\fR \fBMD5Update\fR(\fBMD5_CTX *\fIcontext\fR, \fBunsigned char *\fIinput\fR,
     \fBunsigned int\fR \fIinlen\fR);
.fi

.LP
.nf
\fBvoid\fR \fBMD5Final\fR(\fBunsigned char *\fIoutput\fR, \fBMD5_CTX *\fIcontext\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions implement the MD5 message-digest algorithm, which takes as
input a message of arbitrary length and produces as output a 128-bit
"fingerprint" or "message digest" of the input. It is intended for digital
signature applications, where large file must be "compressed" in a secure
manner before being encrypted with a private (secret) key under a public-key
cryptosystem such as RSA.
.SS "\fBmd5_calc()\fR"
.sp
.LP
The
.B md5_calc()
function computes an MD5 digest on a single message
block. The
.IR inlen -byte
block is pointed to by
.IR input ,
and the
16-byte MD5 digest is written to
.IR output .
.SS "\fBMD5Init()\fR, \fBMD5Update()\fR, \fBMD5Final()\fR"
.sp
.LP
The
.BR MD5Init() ,
.BR MD5Update() ,
and
.B MD5Final()
functions
allow an MD5 digest to be computed over multiple message blocks; between
blocks, the state of the MD5 computation is held in an MD5 context
structure, allocated by the caller. A complete digest computation consists
of one call to
.BR MD5Init() ,
one or more calls to
.BR MD5Update() ,
and
one call to
.BR MD5Final() ,
in that order.
.sp
.LP
The
.B MD5Init()
function initializes the MD5 context structure pointed
to by
.IR context .
.sp
.LP
The
.B MD5Update()
function computes a partial MD5 digest on the
.IR inlen -byte
message block pointed to by
.IR input ,
and updates the
MD5 context structure pointed to by
.I context
accordingly.
.sp
.LP
The
.B MD5Final()
function generates the final MD5 digest, using the MD5
context structure pointed to by
.IR context ;
the 16-byte MD5 digest is
written to
.IR output .
After calling
.BR MD5Final() ,
the state of the
context structure is undefined; it must be reinitialized with
.B MD5Init()
before being used again.
.SH RETURN VALUES
.sp
.LP
These functions do not return a value.
.SH EXAMPLES
.LP
.B Example 1
Authenticate a message found in multiple buffers
.sp
.LP
The following is a sample function that must authenticate a message that is
found in multiple buffers. The calling function provides an authentication
buffer that will contain the result of the MD5 digest.

.sp
.in +2
.nf
#include <sys/types.h>
#include <sys/uio.h>
#include <md5.h>

int
AuthenticateMsg(unsigned char *auth_buffer, struct iovec
                *messageIov, unsigned int num_buffers)
{
    MD5_CTX md5_context;
    unsigned int i;

    MD5Init(&md5_context);

    for(i=0; i<num_buffers; i++)
    {
         MD5Update(&md5_context, messageIov->iov_base,
                   messageIov->iov_len);
         messageIov += sizeof(struct iovec);
    }

    MD5Final(auth_buffer, &md5_context);

    return 0;
}
.fi
.in -2

.LP
.B Example 2
Use
.B md5_calc()
to generate the MD5 digest
.sp
.LP
Since the buffer to be computed is contiguous, the
.B md5_calc()
function can be used to generate the MD5 digest.

.sp
.in +2
.nf
int AuthenticateMsg(unsigned char *auth_buffer, unsigned
                    char *buffer, unsigned int length)
{
    md5_calc(buffer, auth_buffer, length);

    return (0);
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR libmd5 (3LIB)
.sp
.LP
Rivest, R., The MD5 Message-Digest Algorithm, RFC 1321, April 1992.
