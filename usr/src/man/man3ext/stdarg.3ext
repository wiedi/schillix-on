'\" te
.\" Copyright 1989 AT&T  Copyright (c) 2006, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH stdarg 3EXT "22 Mar 2006" "SunOS 5.11" "Extended Library Functions"
.SH NAME
stdarg \- handle variable argument list
.SH SYNOPSIS
.LP
.nf
#include <stdarg.h>
va_list \fIpvar\fR;

\fBvoid\fR \fBva_start\fR(\fBva_list\fR \fIpvar\fR, \fBvoid\fR \fIname\fR);
.fi

.LP
.nf
\fB(type *)\fR \fBva_arg\fR(\fBva_list\fR \fIpvar\fR, \fItype\fR);
.fi

.LP
.nf
\fBvoid\fR \fBva_copy\fR(\fBva_list\fR \fIdest\fR, \fBva_list\fR \fIsrc\fR);
.fi

.LP
.nf
\fBvoid\fR \fBva_end\fR(\fBva_list\fR \fIpvar\fR);
.fi

.SH DESCRIPTION
.sp
.LP
This set of macros allows portable procedures that accept variable numbers
of arguments of variable types to be written. Routines that have variable
argument lists (such as
.BR printf )
but do not use
.I stdarg
are
inherently non-portable, as different machines use different
argument-passing conventions.
.sp
.LP
.B va_list
is a type defined for the variable used to traverse the
list.
.sp
.LP
The
.B va_start
macro is invoked before any access to the unnamed
arguments and initializes
.I pvar
for subsequent use by
.BR va_arg()
and
.BR va_end() .
The parameter
.I name
is the identifier of the
rightmost parameter in the variable parameter list in the function
definition (the one just before the \fB, .\|.\|.\fR). If this parameter is
declared with the
.B register
storage class or with a function or array
type, or with a type that is not compatible with the type that results after
application of the default argument promotions, the behavior is undefined.
.sp
.LP
The parameter
.I name
is required under strict ANSI C compilation. In
other compilation modes,
.I name
need not be supplied and the second
parameter to the
.B va_start()
macro can be left empty (for example,
.BR "va_start(pvar, );" ).
This allows for routines that contain no
parameters before the \fB\&.\|.\|.\fR in the variable parameter list.
.sp
.LP
The
.B va_arg()
macro expands to an expression that has the type and
value of the next argument in the call. The parameter
.B pvar
should have
been previously initialized by
.BR va_start() .
Each invocation of
.B va_arg()
modifies
.B pvar
so that the values of successive
arguments are returned in turn. The parameter
.B type
is the type name of
the next argument to be returned. The type name must be specified in such a
way so that the type of a pointer to an object that has the specified type
can be obtained simply by postfixing a
.B *
to
.IR type .
If there is no
actual next argument, or if
.I type
is not compatible with the type of
the actual next argument (as promoted according to the default argument
promotions), the behavior is undefined.
.sp
.LP
The
.B va_copy()
macro saves the state represented by the
\fBva_list\fIsrc\fR in the \fBva_list\fR \fIdest\fR. The \fBva_list\fR
passed as
.I dest
should not be initialized by a previous call to
.BR va_start() ,
and must be passed to
.B va_end()
before being reused
as a parameter to
.B va_start()
or as the
.I dest
parameter of a
subsequent call to
.BR va_copy() .
The behavior is undefined should any of
these restrictions not be met.
.sp
.LP
The
.B va_end()
macro is used to clean up.
.sp
.LP
Multiple traversals, each bracketed by
.B va_start()
and
.BR va_end() ,
are possible.
.SH EXAMPLES
.LP
.B Example 1
A sample program.
.sp
.LP
This example gathers into an array a list of arguments that are pointers to
strings (but not more than
.B MAXARGS
arguments) with function
.BR f1 ,
then passes the array as a single argument to function
.BR f2 .
The number
of pointers is specified by the first argument to
.BR f1 .

.sp
.in +2
.nf
#include <stdarg.h>
#define MAXARGS	31
void f1(int n_ptrs, .\|.\|.)
{
     va_list ap;
     char *array[MAXARGS];
     int ptr_no = 0;

     if (n_ptrs > MAXARGS)
          n_ptrs = MAXARGS;
     va_start(ap, n_ptrs);
     while (ptr_no < n_ptrs)
          array[ptr_no++] = va_arg(ap, char*);
     va_end(ap);
     f2(n_ptrs, array);
}
.fi
.in -2

.sp
.LP
Each call to
.B f1
shall have visible the definition of the function or
a declaration such as

.sp
.in +2
.nf
\fBvoid f1(int, .\|.\|.)\fR
.fi
.in -2
.sp

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
.TE

.SH SEE ALSO
.sp
.LP
.BR vprintf (3C),
.BR attributes (5),
.BR standards (5)
.SH NOTES
.sp
.LP
It is the responsibility of the calling routine to specify in some manner
how many arguments there are, since it is not always possible to determine
the number of arguments from the stack frame. For example,
.I execl
is
passed a zero pointer to signal the end of the list. The \fIprintf\fR
function can determine the number of arguments by the format. It is
non-portable to specify a second argument of
.BR char ,
.BR short ,
or
.B float
to
.BR va_arg() ,
because arguments seen by the called function
are not
.BR char ,
.BR short ,
or
.BR float .
C converts
.B char
and
.B short
arguments to
.B int
and converts
.B float
arguments to
.B double
before passing them to a function.
