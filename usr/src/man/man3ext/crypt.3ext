'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH crypt 3EXT "3 Mar 2008" "SunOS 5.11" "Extended Library Functions"
.SH NAME
crypt, setkey, encrypt, des_crypt, des_setkey, des_encrypt, run_setkey,
run_crypt, crypt_close \- password and file encryption functions
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lcrypt\fR [ \fIlibrary\fR .\|.\|. ]
#include <crypt.h>

\fBchar *\fBcrypt\fR(\fBconst char *\fIkey\fR, \fBconst char *\fIsalt\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsetkey\fR(\fBconst char *\fIkey\fR);
.fi

.LP
.nf
\fBvoid\fR \fBencrypt\fR(\fBchar *\fIblock\fR, \fBint\fR \fIflag\fR);
.fi

.LP
.nf
\fBchar *\fBdes_crypt\fR(\fBconst char *\fIkey\fR, \fBconst char *\fIsalt\fR);
.fi

.LP
.nf
\fBvoid\fR \fBdes_setkey\fR(\fBconst char *\fIkey\fR);
.fi

.LP
.nf
\fBvoid\fR \fBdes_encrypt\fR(\fBchar *\fIblock\fR, \fBint\fR \fIflag\fR);
.fi

.LP
.nf
\fBint\fR \fBrun_setkey\fR(\fBint *\fIp\fR, \fBconst char *\fIkey\fR);
.fi

.LP
.nf
\fBint\fR \fBrun_crypt\fR(\fBlong\fR \fIoffset\fR, \fBchar *\fIbuffer\fR, \fBunsigned int\fR \fIcount\fR,
     \fBint *\fIp\fR);
.fi

.LP
.nf
\fBint\fR \fBcrypt_close\fR(\fBint *\fIp\fR);
.fi

.SH DESCRIPTION
.sp
.LP
.B des_crypt()
is the password encryption function. It is based on a
one-way hashing encryption algorithm with variations intended (among other
things) to frustrate use of hardware implementations of a key search.
.sp
.LP
.I key
is a user's typed password.
.I salt
is a two-character string
chosen from the set
.RB [ a-zA-Z0-9./ ];
this string is used to perturb the
hashing algorithm in one of 4096 different ways, after which the password is
used as the key to encrypt repeatedly a constant string. The returned value
points to the encrypted password. The first two characters are the salt
itself.
.sp
.LP
The
.B des_setkey()
and
.B des_encrypt()
entries provide (rather
primitive) access to the actual hashing algorithm. The argument of
.B des_setkey()
is a character array of length 64 containing only the
characters with numerical value 0 and 1. If this string is divided into
groups of 8, the low-order bit in each group is ignored, thereby creating a
56-bit key that is set into the machine. This key is the key that will be
used with the hashing algorithm to encrypt the string
.I block
with the
function
.BR des_encrypt() .
.sp
.LP
The argument to the
.B des_encrypt()
entry is a character array of
length 64 containing only the characters with numerical value 0 and 1. The
argument array is modified in place to a similar array representing the bits
of the argument after having been subjected to the hashing algorithm using
the key set by
.BR des_setkey() .
If
.I flag
is zero, the argument is
encrypted; if non-zero, it is decrypted.
.sp
.LP
Note that decryption is not provided in the international version of
.BR crypt() .
The international version is part of the C Development Set,
and the domestic version is part of the Security Administration Utilities.
If decryption is attempted with the international version of
.BR des_encrypt() ,
an error message is printed.
.sp
.LP
.BR crypt() ,
.BR setkey() ,
and
.B encrypt()
are front-end routines
that invoke
.BR des_crypt() ,
.BR des_setkey() ,
and
.BR des_encrypt()
respectively.
.sp
.LP
The routines
.B run_setkey()
and
.B run_crypt()
are designed for use
by applications that need cryptographic capabilities, such as
.BR ed (1)
and
.BR vi (1).
.B run_setkey()
establishes a two-way pipe connection
with the
.B crypt
utility, using
.I key
as the password argument.
.B run_crypt()
takes a block of characters and transforms the cleartext
or ciphertext into their ciphertext or cleartext using the
.BR crypt
utility.
.I offset
is the relative byte position from the beginning of
the file that the block of text provided in
.I block
is coming from.
.I count
is the number of characters in
.IR block ,
and
.IR connection
is an array containing indices to a table of input and output file streams.
When encryption is finished,
.B crypt_close()
is used to terminate the
connection with the
.B crypt
utility.
.sp
.LP
.B run_setkey()
returns
.B \(mi1
if a connection with the
.B crypt
utility cannot be established. This result will occur in
international versions of the UNIX system in which the
.B crypt
utility
is not available.  If a null key is passed to
.BR run_setkey() ,
.B 0
is
returned. Otherwise,
.B 1
is returned.
.B run_crypt()
returns
.B
\(mi1 \c
if it cannot write output or read input from the pipe attached
to
.BR crypt() .
Otherwise it returns
.BR 0 .
.sp
.LP
The program must be linked with the object file access routine library
.BR libcrypt.a .
.SH RETURN VALUES
.sp
.LP
In the international version of
.BR crypt() ,
a flag argument of
.BR 1
to
.B encrypt()
or
.B des_encrypt()
.RB "is not accepted, and" " errno"
is set to
.B ENOSYS
to indicate that the functionality is not
available.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR ed (1),
.BR login (1),
.BR passwd (1),
.BR vi (1),
.BR getpass (3C),
.BR passwd (4),
.BR attributes (5)
.SH NOTES
.sp
.LP
The return value in
.B crypt()
points to static data that are
overwritten by each call.
