'\" te
.\" Copyright 1989 AT&T
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH varargs 3EXT "10 May 2002" "SunOS 5.11" "Extended Library Functions"
.SH NAME
varargs \- handle variable argument list
.SH SYNOPSIS
.LP
.nf
#include <varargs.h>
va_alist
va_dcl
va_list \fIpvar\fR;

\fBvoid\fR \fBva_start\fR(\fBva_list\fIpvar\fR);
.fi

.LP
.nf
\fBtype\fR \fBva_arg\fR(\fBva_list\fR \fIpvar\fR, \fItype\fR);
.fi

.LP
.nf
\fBvoid\fR \fBva_end\fR(\fBva_list\fR \fIpvar\fR);
.fi

.SH DESCRIPTION
.sp
.LP
This set of macros allows portable procedures that accept variable argument
lists to be written. Routines that have variable argument lists (such as
.BR printf (3C))
but do not use
.B varargs
are inherently non-portable,
as different machines use different argument-passing conventions.
.sp
.LP
.B va_alist
is used as the parameter list in a function header.
.sp
.LP
.B va_dcl
is a declaration for
.BR va_alist .
No semicolon should
follow
.BR va_dcl .
.sp
.LP
.B va_list
is a type defined for the variable used to traverse the
list.
.sp
.LP
.B va_start
is called to initialize
.B pvar
to the beginning of the
list.
.sp
.LP
.B va_arg
will return the next argument in the list pointed to by
.BR pvar .
.B type
is the type the argument is expected to be. Different
types can be mixed, but it is up to the routine to know what type of
argument is expected, as it cannot be determined at runtime.
.sp
.LP
.B va_end
is used to clean up.
.sp
.LP
Multiple traversals, each bracketed by
.B va_start
and
.BR va_end ,
are
possible.
.SH EXAMPLES
.LP
.B Example 1
A sample program.
.sp
.LP
This example is a possible implementation of
.B execl
(see
.BR exec (2)
).

.sp
.in +2
.nf
\fB#include <unistd.h>
#include <varargs.h>
#define MAXARGS	100
/*	execl is called by
		execl(file, arg1, arg2, .\|.\|., (char *)0);
*/
execl(va_alist)
va_dcl
{
	va_list ap;
	char *file;
	char *args[MAXARGS];		/* assumed big enough*/
	int argno = 0;

	va_start(ap);
	file = va_arg(ap, char *);
	while ((args[argno++] = va_arg(ap, char *)) != 0)
		;
	va_end(ap);
	return execv(file, args);
}\fR
.fi
.in -2
.sp

.SH SEE ALSO
.sp
.LP
.BR exec (2),
.BR printf (3C),
.BR vprintf (3C),
.BR stdarg (3EXT)
.SH NOTES
.sp
.LP
It is up to the calling routine to specify in some manner how many
arguments there are, since it is not always possible to determine the number
of arguments from the stack frame. For example,
.B execl
is passed a zero
pointer to signal the end of the list.
.B printf
can tell how many
arguments are there by the format.
.sp
.LP
It is non-portable to specify a second argument of
.BR char ,
.BR short ,
or
.B float
to
.BR va_arg ,
since arguments seen by the called function
are not
.BR char ,
.BR short ,
or
.BR float .
C converts
.B char
and
.B short
arguments to
.B int
and converts
.B float
arguments to
.B double
before passing them to a function.
.sp
.LP
.B stdarg
is the preferred interface.
