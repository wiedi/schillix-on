'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH sha2 3EXT "13 Nov 2007" "SunOS 5.11" "Extended Library Functions"
.SH NAME
sha2, SHA2Init, SHA2Update, SHA2Final, SHA256Init, SHA256Update,
SHA256Final, SHA384Init, SHA384Update, SHA384Final, SHA512Init,
SHA512Update, SHA512Final \- SHA2 digest functions
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lmd\fR [ \fIlibrary\fR .\|.\|. ]
#include <sha2.h>

\fBvoid\fR \fBSHA2Init\fR(\fBuint64_t\fR \fImech\fR, \fBSHA2_CTX *\fIcontext\fR);
.fi

.LP
.nf
\fBvoid\fR \fBSHA2Update\fR(\fBSHA2_CTX *\fIcontext\fR, \fBunsigned char *\fIinput\fR,
     \fBunsigned int\fR \fIinlen\fR);
.fi

.LP
.nf
\fBvoid\fR \fBSHA2Final\fR(\fBunsigned char *\fIoutput\fR, \fBSHA2_CTX *\fIcontext\fR);
.fi

.LP
.nf
\fBvoid\fR \fBSHA256Init\fR(\fBSHA256_CTX *\fIcontext\fR);
.fi

.LP
.nf
\fBvoid\fR \fBSHA256Update\fR(\fBSHA256_CTX *\fIcontext\fR, \fBunsigned char *\fIinput\fR,
     \fBunsigned int\fR \fIinlen\fR);
.fi

.LP
.nf
\fBvoid\fR \fBSHA256Final\fR(\fBunsigned char *\fIoutput\fR, \fBSHA256_CTX *\fIcontext\fR);
.fi

.LP
.nf
\fBvoid\fR \fBSHA384Init\fR(\fBSHA384_CTX *\fIcontext\fR);
.fi

.LP
.nf
\fBvoid\fR \fBSHA384Update\fR(\fBSHA384_CTX *\fIcontext\fR, \fBunsigned char *\fIinput\fR,
     \fBunsigned int\fR \fIinlen\fR);
.fi

.LP
.nf
\fBvoid\fR \fBSHA384Final\fR(\fBunsigned char *\fIoutput\fR, \fB384_CTX *\fIcontext\fR);
.fi

.LP
.nf
\fBvoid\fR \fBSHA512Init\fR(\fBSHA512_CTX *\fIcontext\fR);
.fi

.LP
.nf
\fBvoid\fR \fBSHA512Update\fR(\fBSHA512_CTX *\fIcontext\fR, \fBunsigned char *\fIinput\fR,
     \fBunsigned int\fR \fIinlen\fR);
.fi

.LP
.nf
\fBvoid\fR \fBSHA512Final\fR(\fBunsigned char *\fIoutput\fR, \fB512_CTX *\fIcontext\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.BR SHA2Init() ,
.BR SHA2Update() ,
.B SHA2Final()
functions
implement the
.BR SHA256 ,
.B SHA384
and
.B SHA512
message-digest
algorithms. The algorithms take as input a message of arbitrary length and
produces a 200-bit "fingerprint" or "message digest" as output. The
.B SHA2
message-digest algorithms are intended for digital signature
applications in which large files are "compressed" in a secure manner before
being encrypted with a private (secret) key under a public-key cryptosystem
such as RSA.
.sp
.ne 2
.mk
.na
.BR SHA2Init() ,
.BR SHA2Update() ,
.B SHA2Final()
.ad
.sp .6
.RS 4n
The
.BR SHA2Init() ,
.BR SHA2Update() ,
and
.B SHA2Final()
functions
allow an
.B SHA2
digest to be computed over multiple message blocks.
Between blocks, the state of the
.B SHA2
computation is held in an
.B SHA2
context structure allocated by the caller. A complete digest
computation consists of calls to
.B SHA2
functions in the following
order: one call to
.BR SHA2Init() ,
one or more calls to
.BR SHA2Update() ,
and one call to
.BR SHA2Final() .
.sp
The
.B SHA2Init()
function initializes the SHA2 context structure
pointed to by
.IR context .
The
.I mech
argument is one of
.BR SHA256 ,
.BR SHA512 ,
.BR SHA384 .
.sp
The
.B SHA2Update()
function computes a partial
.B SHA2
digest on the
\fIinlen\fR-byte message block pointed to by
.IR input ,
and updates the
.B SHA2
context structure pointed to by
.I context
accordingly.
.sp
The
.B SHA2Final()
function generates the final
.B SHA2Final
digest,
using the
.B SHA2
context structure pointed to by
.IR context .
The
.B SHA2
digest is written to output. After a call to
.BR SHA2Final() ,
the state of the context structure is undefined. It must be reinitialized
with
.B SHA2Init()
before it can be used again.
.RE

.sp
.ne 2
.mk
.na
.BR SHA256Init() ,
.BR SHA256Update() ,
.BR SHA256Final() ,
.BR SHA384Init() ,
.BR SHA384Update() ,
.BR SHA384Final() ,
.BR SHA512Init() ,
.BR SHA512Update() ,
.B SHA512Final()
.ad
.sp .6
.RS 4n
Alternative APIs exist as named above. The
.B Update()
and
.BR Final()
sets of functions operate exactly as the previously described
.B SHA2Update()
and
.B SHA2Final()
functions. The
.BR SHA256Init() ,
.BR SHA384Init() ,
and
.B SHA512Init()
functions do not take the
.I mech
argument as it is implicit in the function names.
.RE

.SH RETURN VALUES
.sp
.LP
These functions do not return a value.
.SH EXAMPLES
.LP
.B Example 1
Authenticate a message found in multiple buffers
.sp
.LP
The following is a sample function that authenticates a message found in
multiple buffers. The calling function provides an authentication buffer to
contain the result of the
.B SHA2
digest.

.sp
.in +2
.nf
#include <sys/types.h>
#include <sys/uio.h>
#include <sha2.h>

int
AuthenticateMsg(unsigned char *auth_buffer, struct iovec
                *messageIov, unsigned int num_buffers)
{
    SHA2_CTX sha2_context;
    unsigned int i;

    SHA2Init(SHA384, &sha2_context);

    for(i=0; i<num_buffers; i++)
    {
         SHA2Update(&sha2_context, messageIov->iov_base,
                   messageIov->iov_len);
         messageIov += sizeof(struct iovec);
    }

    SHA2Final(auth_buffer, &sha2_context);

    return 0;
}
.fi
.in -2

.LP
.B Example 2
Authenticate a message found in multiple buffers
.sp
.LP
The following is a sample function that authenticates a message found in
multiple buffers. The calling function provides an authentication buffer
that will contain the result of the
.B SHA384
digest, using alternative
interfaces.

.sp
.in +2
.nf
int
AuthenticateMsg(unsigned char *auth_buffer, struct iovec
                *messageIov, unsigned int num_buffers)
{
    SHA384_CTX ctx;
    unsigned int i;

    SHA384Init(&ctx);

    for(i=0, i<num_buffers; i++
    {
         SHA384Update(&ctx, messageIov->iov_base,
                   messageIov->iov_len);
         messageIov += sizeof(struct iovec);
    }

    SHA384Final(auth_buffer, &ctx);

    return 0;
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR libmd (3LIB)
.sp
.LP
FIPS 180-2
