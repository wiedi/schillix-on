'\" te
.\" Copyright (c) 1996, The Open Group. All Rights Reserved.
.\" Portions Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Sun Microsystems, Inc. gratefully acknowledges
.\" The Open Group for permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH m_transform_layout 3LAYOUT "7 Aug 2006" "SunOS 5.11" "Layout Service Library Functions"
.SH NAME
m_transform_layout \- layout transformation
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. -llayout [ \fIlibrary\fR.\|.\|. ]
#include <sys/layout.h>



\fBint\fR \fBm_transform_layout\fR(\fBLayoutObject\fR \fIlayout_object\fR,
     \fBconst char *\fIInpBuf\fR, \fBconst size_t\fR \fIImpSize\fR, \fBconst void *\fIOutBuf\fR,
     \fBsize_t *\fIOutsize\fR, \fBsize_t *\fIInpToOut\fR, \fBsize_t *\fIOutToInp\fR,
     \fBunsigned char *\fIProperty\fR, \fBsize_t *\fIInpBufIndex\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B m_transform_layout()
function performs layout transformations
(reordering, shaping, cell determination) or provides additional information
needed for layout transformation (such as the expected size of the
transformed layout, the nesting level of different segments in the text and
cross-references between the locations of the corresponding elements before
and after the layout transformation). Both the input text and output text are
character strings.
.sp
.LP
The
.B m_transform_layout()
function transforms the input text in
.I InpBuf
according to the current layout values in
.IR layout_object .
Any layout value whose value type is
.B LayoutTextDescriptor
describes the
attributes of the
.IR InpBuf " and "
.I OutBuf
arguments. If the attributes
are the same for both
.I InpBuf
and
.IR OutBuf ,
a null transformation is
performed with respect to that specific layout value.
.sp
.LP
The
.I InpBuf
argument specifies the source text to be processed. The
.I InpBuf
may not be
.IR NULL ,
unless there is a need to reset the
internal state.
.sp
.LP
The
.I InpSize
argument is the number of bytes within
.I InpBuf
to be
processed by the transformation. Its value will not change after return from
the transformation.
.I InpSize
set to \(mi1 indicates that the text in
.I InpBuf
is delimited by a null code element. If
.I InpSize
is not set
to \(mi1, it is possible to have some null elements in the input buffer. This
might be used, for example, for a "one shot" transformation of several
strings, separated by nulls.
.sp
.LP
Output of this function may be one or more of the following depending on the
setting of the arguments:
.sp
.ne 2
.mk
.na
.I OutBuf
.ad
.RS 12n
.rt
Any transformed data is stored in
.IR OutBuf ,
converted to
.BR ShapeCharset .
.RE

.sp
.ne 2
.mk
.na
.I Outsize
.ad
.RS 12n
.rt
The number of bytes in
.IR OutBuf .
.RE

.sp
.ne 2
.mk
.na
.I InpToOut
.ad
.RS 12n
.rt
A cross-reference from each
.I InpBuf
code element to the transformed
data. The cross-reference relates to the data in
.I InpBuf
starting with
the first element that
.I InpBufIndex
points to (and not necessarily
starting from the beginning of the
.IR InpBuf ).
.RE

.sp
.ne 2
.mk
.na
.I OutToInp
.ad
.RS 12n
.rt
A cross-reference to each
.I InpBuf
code element from the transformed
data. The cross-reference relates to the data in
.I InpBuf
starting with
the first element that
.I InpBufIndex
points to (and not necessarily
starting from the beginning of the
.IR InpBuf ).
.RE

.sp
.ne 2
.mk
.na
.I Property
.ad
.RS 12n
.rt
A weighted value that represents peculiar input string transformation
properties with different connotations as explained below.  If this argument
is not a null pointer, it represents an array of values with the same number
of elements as the source substring text before the transformation. Each byte
will contain relevant "property" information of the corresponding element in
.I InpBuf
starting from the element pointed by
.IR InpBufIndex .
The four
rightmost bits of each "property" byte will contain information for
bidirectional environments (when
.B ActiveDirectional
is True) and they
will mean "\fBNestingLevels\fR." The possible value from 0 to 15 represents
the nesting level of the corresponding element in the
.I InpBuf
starting
from the element pointed by
.IR InpBufIndex .
If
.B ActiveDirectional
is
false the content of
.B NestingLevel
bits will be ignored. The leftmost
bit of each "property" byte will contain a "new cell indicator" for composed
character environments, and will have a value of either 1 (for an element in
.I InpBuf
that is transformed to the beginning of a new cell) or 0 (for
the "zero-length" composing character elements, when these are grouped into
the same presentation cell with a non-composing character). Here again, each
element of "property" pertains to the elements in the \fIInpBuf\fR starting
from the element pointed by
.IR InpBufIndex .
(Remember that this is not
necessarily the beginning of
.IR InpBuf ).
If none of the transformation
properties is required, the argument
.I Property
can be
.IR NULL .
The
use of "property" can be enhanced in the future to pertain to other possible
usage in other environments.
.RE

.sp
.LP
The
.I InpBufIndex
argument is an offset value to the location of the
transformed text. When
.B m_transform_layout()
is called,
.I InpBufIndex
contains the offset to the element in
.I InpBuf
that
will be transformed first. (Note that this is not necessarily the first
element in
.IR InpBuf ).
At the return from the transformation,
.I InpBufIndex
contains the offset to the first element in the
.I InpBuf
that has not been transformed. If the entire substring has been
transformed successfully,
.I InpBufIndex
will be incremented by the amount
defined by
.IR InpSize .
.sp
.LP
Each of these output arguments may be
.I NULL
to specify that no output
is desired for the specific argument, but at least one of them should be set
to a non-null value to perform any significant work.
.sp
.LP
The layout object maintains a directional state that keeps track of
directional changes, based on the last segment transformed. The directional
state is maintained across calls to the layout transformation functions and
allows stream data to be processed with the layout functions. The directional
state is reset to its initial state whenever any of the layout values
.BR TypeOfText ,
.BR Orientation ,
or
.B ImplicitAlg
is modified by
means of a call to
.BR m_setvalues_layout() .
.sp
.LP
The
.I layout_object
argument specifies a
.B LayoutObject
returned by
the
.B m_create_layout()
function.
.sp
.LP
The
.IR OutBuf argument
contains the transformed data. This argument can be
specified as a null pointer to indicate that no transformed data is
required.
.sp
.LP
The encoding of the
.I OutBuf
argument depends on the \fBShapeCharset\fR
layout value defined in
.IR layout_object .
If the
.BR ActiveShapeEditing
layout value is not set (False), the encoding of
.I OutBuf
is guaranteed
to be the same as the codeset of the locale associated with the
.B LayoutObject
defined by
.IR layout_object .
.sp
.LP
On input, the
.I OutSize
argument specifies the size of the output buffer
in number of bytes. The output buffer should be large enough to contain the
transformed result; otherwise, only a partial transformation is performed. If
the
.B ActiveShapeEditing
layout value is set (True) the
.I OutBuf
should be allocated to contain at least the
.I InpSize
multiplied by
.BR ShapeCharsetSize .
.sp
.LP
On return, the
.I OutSize
argument is modified to the actual number of
bytes placed in
.IR OutBuf .
.sp
.LP
When the
.I OutSize
argument is specified as zero, the function
calculates the size of an output buffer large enough to contain the
transformed text, and the result is returned in this field. The content of
the buffers specified by
.I InpBuf
and
.IR OutBuf ,
and the value of
.IR InpBufIndex ,
remain unchanged. If
.I OutSize
= NULL, the
.B EINVAL
error condition should be returned.
.sp
.LP
If the
.I InpToOut
argument is not a null pointer, it points to an array
of values with the same number of bytes in
.I InpBuf
starting with the one
pointed by
.I InpBufIndex
and up to the end of the substring in the
buffer. On output, the nth value in
.I InpToOut
corresponds to the nth
byte in
.IR InpBuf .
This value is the index (in units of bytes) in
\fIOutBuf\fRthat identifies the transformed
.B ShapeCharset
element of the
nth byte in
.IR InpBuf .
In the case of multibyte encoding, the index points
(for each of the bytes of a code element in the
.IR InpBuf )
to the first
byte of the transformed code element in the
.IR OutBuf .
.sp
.LP
.I InpToOut
may be specified as
.I NULL
if no index array from
.I InpBuf
to
.I OutBuf
is desired.
.sp
.LP
If the
.I OutToInp
argument is not a null pointer, it points to an array
of values with the same number of bytes as contained in
.IR OutBuf .
On
output, the nth value in
.I OutToInp
corresponds to the nth byte in
.I OutBuf
This value is the index in
.IR InpBuf ,
starting with the byte
pointed to by
.IR InpBufIndex ,
that identifies the logical code element of
the nth byte in
.IR OutBuf .
In the case of multibyte encoding, the index
will point for each of the bytes of a transformed code element in the
.I OutBuf
to the first byte of the code element in the
.IR InpBuf .
.sp
.LP
.I OutToInp
may be specified as
.I NULL
if no index array from
.I OutBuf
to
.I InpBuf
is desired.
.sp
.LP
To perform shaping of a text string without reordering of code elements, the
.I layout_object
should be set with input and output layout value
.I TypeOfText
set to
.B TEXT_VISUAL
and both in and out of
.B Orientation
set to the same value.
.SH RETURN VALUES
.sp
.LP
If successful, the
.B m_transform_layout()
function returns
.BR 0 .
If
unsuccessful, the returned value is \fB\(mi1\fR and the
.B errno
is set to
indicate the source of error. When the size of
.I OutBuf
is not large
enough to contain the entire transformed text, the input text state at the
end of the uncompleted transformation is saved internally and the error
condition
.B E2BIG
is returned in
.BR errno .
.SH ERRORS
.sp
.LP
The
.B m_transform_layout()
function may fail if:
.sp
.ne 2
.mk
.na
.B E2BIG
.ad
.RS 10n
.rt
The output buffer is full and the source text is not entirely processed.
.RE

.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 10n
.rt
The layout values are set to a meaningless combination or the layout object
is not valid.
.RE

.sp
.ne 2
.mk
.na
.B EILSEQ
.ad
.RS 10n
.rt
Transformation stopped due to an input code element that cannot be shaped or
is invalid. The
.I InpBufIndex
argument is set to indicate the code
element causing the error. The suspect code element is either a valid code
element but cannot be shaped into the
.B ShapeCharset
layout value, or is
an invalid code element not defined by the codeset of the locale of
.IR layout_object .
The
.B mbtowc()
and
.B wctomb()
functions, when
used in the same locale as the
.BR LayoutObject ,
can be used to determine
if the code element is valid.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
Transformation stopped due to an incomplete composite sequence at the end of
the input buffer, or
.I OutSize
contains
.IR NULL .
.RE

.sp
.ne 2
.mk
.na
.B ERANGE
.ad
.RS 10n
.rt
More than 15 embedding levels are in source text or
.I InpBuf
contain
unbalanced directional layout information (push/pop) or an incomplete
composite sequence has been detected in the input buffer at the beginning of
the string pointed to by
.IR InpBufIndex .
.sp
An incomplete composite sequence at the end of the input buffer is not
always detectable. Sometimes, the fact that the sequence is incomplete will
only be detected when additional character elements belonging to the
composite sequence are found at the beginning of the next input buffer.
.RE

.SH USAGE
.sp
.LP
A
.B LayoutObject
will have a meaningful combination of default layout
values. Whoever chooses to change the default layout values is responsible
for making sure that the combination of layout values is meaningful.
Otherwise, the result of
.B m_transform_layout()
might be unpredictable or
implementation-specific with
.B errno
set to
.BR EBADF .
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR attributes (5),
.BR standards (5)
