'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ecpp 7D "9 Oct 2004" "SunOS 5.11" "Devices"
.SH NAME
ecpp \- IEEE 1284 compliant parallel port driver
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
.fi

.LP
.nf
#include <sys/ecppio.h>
.fi

.LP
.nf
ecpp@unit-address
.fi

.SH DESCRIPTION
.sp
.LP
The
.B ecpp
driver provides a bi-directional interface to \fIIEEE 1284\fR
compliant devices as well as a forward single-directional interface to
.RB "Centronics devices. In addition to the Centronics protocol, the" " ecpp"
driver supports the
.IR "IEEE 1284" "Compatibility, Nibble, and ECP protocols."
\fBECPP_COMPAT_MODE\fR and \fBECPP_CENTRONICS\fR modes of operation have
logically identical handshaking protocols, however devices that support
\fBECPP_COMPAT_MODE\fR are \fIIEEE 1284\fR compliant devices. \fIIEEE 1284\fR
compliant devices support at least
.B ECPP_COMPAT_MODE
and
.BR ECPP_NIBBLE_MODE .
Centronics devices support only
.BR ECPP_CENTRONICS
mode.
.sp
.LP
By default,
.B ECPP_COMPAT_MODE
devices have a strobe handshaking pulse
width of 500ns. For this mode, forward data transfers are conducted by DMA. By
default, the strobe pulse width for
.B ECPP_CENTRONICS
devices is two
microseconds. Forward transfers for these devices are managed through PIO. The
default characteristics for both
.B ECPP_COMPAT_MODE
and
\fBECPP_CENTRONICS\fR devices may be changed through tunable variables defined
in
.BR ecpp.conf .
.sp
.LP
The
.B ecpp
driver is an
.I exclusive-use
device, meaning that if the
device is already open, subsequent opens fail with
.BR EBUSY .
.SS "Default Operation"
.sp
.LP
Each time the
.B ecpp
.RB "device is opened, the device is marked as" " EBUSY"
and the configuration variables are set to their default values. The
\fBwrite_timeout\fR period is set to 90 seconds.
.sp
.LP
The driver sets the mode variable according to the following algorithm: The
driver initially attempts to negotiate the link into
.B ECPP_ECP_MODE
during
.BR open (2).
If it fails, the driver tries to negotiate into
\fBECPP_NIBBLE_MODE\fR mode. If that fails, the driver operates in
\fBECPP_CENTRONICS\fR mode. Upon successfully opening the device, \fIIEEE
1284\fR compliant devices will be left idle in either reverse idle phase of
\fBECPP_ECP_MODE\fR or in
.BR ECPP_NIBBLE_MODE .
Subsequent calls to
.BR write (2)
invokes the driver to move the link into either
\fBECPP_COMPAT_MODE\fR or the forward phase of
.BR ECPP_ECP_MODE .
After the
transfer completes, the link returns to idle state.
.sp
.LP
The application may attempt to negotiate the device into a specific mode or
set the
.B write_timeout
values through the
.BR ECPPIOC_SETPARMS
.BR ioctl (2)
call. For mode negotiation to be successful, both the host
workstation and the peripheral must support the requested mode.
.SS "Tunables"
.sp
.LP
 Characteristics of the
.B ecpp
driver may be tuned by the variables
described in
.BR /kernel/drv/ecpp.conf .
These variables are read by the
kernel during system startup. To tune the variables, edit the \fBecpp.conf\fR
file and invoke \fBupdate_drv\fR(1M) to have the kernel read the file again.
.sp
.LP
Some Centronics peripherals and certain
.I "IEEE 1284"
compatible peripherals
will not operate with the parallel port operating in a fast handshaking mode.
If printing problems occur, set "fast-centronics" and "fast-1284-compatible" to
"false." See \fB/kernel/drv/ecpp.conf\fR for more information.
.SS "Read/Write Operation"
.sp
.LP
The
.B ecpp
driver is a full duplex STREAMS device driver. While an
application is writing to an
.I "IEEE 1284"
compliant device, another thread
may read from it.
.SS "Write Operation"
.sp
.LP
A
.BR write (2)
operation returns the number of bytes successfully written to
the stream head. If a failure occurs while a Centronics device is transferring
data, the content of the status bits will be captured at the time of the error
and can be retrieved by the application program using the
.BR BPPIOC_GETERR
.BR ioctl (2)
call. The captured status information is overwritten each time
an attempted transfer or a
.BR "BPPIOC_TESTIO ioctl" (2)
occurs.
.SS "Read Operation"
.sp
.LP
If a failure or error condition occurs during a
.BR read (2),
the number of
bytes successfully read is returned (short read). When attempting to read a
port that has no data currently available,
.BR read (2)
returns
.B 0
if
\fBO_NDELAY\fR is set. If \fBO_NONBLOCK\fR is set,
.BR read (2)
returns
\fB-1\fR and sets errno to \fBEAGAIN.\fR If \fBO_NDELAY\fR and \fBO_NONBLOCK\fR
are clear,
.BR read (2)
blocks until data become available.
.SH IOCTLS
.sp
.LP
The
.BR ioctl (2)
calls described below are supported. Note that when
\fBecpp\fR is transferring data, the driver waits until the data has been sent
to the device before processing the
.BR ioctl (2)
call.
.sp
.LP
The ecpp driver supports \fBprnio\fR(7I) interfaces.
.LP
Note -
.sp
.RS 2
The
.B PRNIOC_RESET
command toggles the
.B nInit
signal for 2 ms,
followed by default negotiation.
.RE
.sp
.LP
The following
.B ioctl(2)
calls are supported for backward compatibility
and are not recommended for new applications:
.sp
.ne 2
.mk
.na
.B ECPPIOC_GETPARMS
.ad
.RS 20n
.rt
Get current transfer parameters. The argument is a pointer to a struct
\fBecpp_transfer_parms\fR. See below for a description of the elements of this
structure. If no parameters have been configured since the device was opened,
the structure will be set to its default configuration. See Default Operation
above for more information.
.RE

.sp
.ne 2
.mk
.na
.B ECPPIOC_SETPARMS
.ad
.RS 20n
.rt
Set transfer parameters. The argument is a pointer to a struct
\fBecpp_transfer_parms\fR. If a parameter is out of range, \fBEINVAL\fR is
returned. If the peripheral or host device cannot support the requested mode,
\fBEPROTONOSUPPORT\fR is returned. See below for a description of
\fBecpp_transfer_parms\fR and its valid parameters.
.sp
The Transfer Parameters Structure is defined in <\fBsys/ecppio.h\fR>.
.sp
.in +2
.nf
struct ecpp_transfer_parms {
    int  write_timeout;
    int  mode;
};
.fi
.in -2

The
.B write_timeout
field is set to the value of
\fBecpp-transfer-timeout\fR specified in the
.BR ecpp.conf .
The
\fBwrite_timeout\fR field specifies how long the driver will wait for the
peripheral to respond to a transfer request. The value must be greater than
\fB0\fR and less than \fBECPP_MAX_TIMEOUT.\fR All other values are out of
range.
.sp
The mode field reflects the
.I "IEEE 1284"
mode to which the parallel port is
currently configured. The mode may be set to one of the following values only:
.BR ECPP_CENTRONICS ,
.BR ECPP_COMPAT_MODE ,
.BR ECPP_NIBBLE_MODE ,
.BR ECPP_ECP_MODE .
All other values are invalid. If the requested mode is not
supported,
.B ECPPIOC_SETPARMS
will return
.B EPROTONOSUPPORT
and the
mode will be set to
.B ECPP_CENTRONICS
mode. Afterwards, the application may
change the mode back to the original mode with
.BR ECPPIOC_SETPARMS .
.RE

.sp
.ne 2
.mk
.na
.B ECPPIOC_GETDEVID
.ad
.RS 20n
.rt
This ioctl gets the
.I "IEEE 1284"
device ID from the peripheral in specified
mode. Currently, the device ID can be retrieved only in Nibble mode. A pointer
to the structure defined in
.B <sys/ecppsys.h>
must be passed as an
argument.
.sp
The 1284 device ID structure:
.sp
.in +2
.nf
struct ecpp_device_id {
  int  mode; /* mode to use for reading device id */
  int  len;  /* length of buffer */
  int  rlen;  /* actual length of device id string */
  char *addr; /* buffer address */
};
.fi
.in -2

The mode is the
.I "IEEE 1284"
mode into which the port will be negotiated to
retrieve device ID information. If the peripheral or host do not support the
mode,
.B EPROTONOSUPPORT
is returned. Applications should set mode to
.BR ECPP_NIBBLE_MODE .
\fBlen\fR is the length of the buffer pointed to by
.BR addr .
\fBrlen\fR is the actual length of the device ID string returned
from the peripheral. If the returned
.B rlen
is greater than
.BR len ,
the
application can call
.B ECPPIOC_GETDEVID
again with a buffer length equal or
greater than
.BR rlen .
Note that the two length bytes of the
.IR "IEEE 1284"
device ID are not taken into account and are not returned in the user buffer.
.sp
After
.B ECPPIOC_GETDEVID
successfully completes, the driver returns the
link to
.BR ECPP_COMPAT_MODE .
The application is responsible for determining
the previous mode the link was operating in and returning the link to that
mode.
.RE

.sp
.ne 2
.mk
.na
.B BPPIOC_TESTIO
.ad
.RS 20n
.rt
Tests the forward transfer readiness of a peripheral operating in Centronics
or Compatibility mode.
.sp
\fBTESTIO\fR determines if the peripheral is ready to receive data by checking
the open flags and the Centronics status signals. If the current mode of the
device is
.BR ECPP_NIBBLE_MODE ,
the driver negotiates the link into
.BR ECPP_COMPAT_MODE ,
check the status signals and then return the link to
\fBECPP_NIBBLE_MODE\fR mode. If the current mode is \fBECPP_CENTRONICS\fR or
.BR ECPP_COMPAT_MODE ,
\fBTESTIO\fR examines the Centronics status signals in
the current mode. To receive data, the device must have the
.B nErr
and
\fBSelect\fR signals asserted and must not have the \fBPE\fR and \fBBusy\fR
signals asserted. If
.B ecpp
is transferring data,
.B TESTIO
waits until
the previous data sent to the driver is delivered before executing
.BR TESTIO .
However if an error condition occurs while a
.B TESTIO
is
waiting,
.B TESTIO
returns immediately. If
.B TESTIO
determines that the
conditions are ok,
.B 0
is returned. Otherwise,
.B -1
is returned, errno
is set to
.B EIO
and the state of the status pins is captured. The captured
status can be retrieved using the
.BR "BPPIOC_GETERR ioctl" (2)
call. The
\fBtimeout_occurred\fR and \fBbus_error\fR fields will never be set by this
.BR ioctl (2).
\fBBPPIOC_TESTIO\fR and \fBBPPIOC_GETERR\fR are compatible to
the ioctls specified in
.BR bpp (7D).
.RE

.sp
.ne 2
.mk
.na
.B BPPIOC_GETERR
.ad
.RS 20n
.rt
Get last error status. The argument is a pointer to a \fBstruct
bpp_error_status\fR defined in \fB<sys/bpp_io.h>\fR header file. The error
status structure is:
.sp
.in +2
.nf
struct bpp_error_status {
   char    timeout_occurred; /* 1=timeout */
   char    bus_error;        /* not used */
   uchar_t pin_status;       /* status of pins which
                             /* could cause error */
};
.fi
.in -2

The pin_status field indicates possible error conditions. The valid bits for
pin_status are:
.BR BPP_ERR_ERR ,
.BR BPP_SLCT_ERR ,
.BR BPP_PE_ERR ,
.BR BPP_BUSY_ERR .
A set bit indicates that the associated pin is asserted.
.sp
This structure indicates the status of all the appropriate status bits at the
time of the most recent error condition during a
.BR write (2)
call, or the
status of the bits at the most recent
.BR "BPPIOC_TESTIO ioctl" (2)call.
.sp
\fBpin_status\fR indicates possible error conditions under
\fBECPP_CENTRONICS\fR or
.BR ECPP_COMPAT_MODE .
Under these modes, the state
of the status pins will indicate the state of the device. For instance, many
Centronics printers lower the
.B nErr
signal when a paper jam occurs. The
behavior of the status pins depends on the device. Additional status
information may be retrieved through the backchannel.
.sp
The
.B timeout_occurred
value is set when a timeout occurs during
.BR write (2).
\fBbus_error\fR is not used in this interface.
.RE

.sp
.LP
The following ioctls are used to directly read and write the parallel port
status and control signals. If the current mode of the device is
\fBECPP_ECP_MODE\fR or
.BR ECPP_NIBBLE_MODE ,
the driver negotiates the link
into
.BR ECPP_COMPAT_MODE ,
gets or sets the registers and then returns the
link to
.BR ECPP_NIBBLE_MODE .
If the current mode is
.B ECPP_CENTRONICS
or
.BR ECPP_COMPAT_MODE ,
these ioctls will get/set the register values in the
current mode.
.sp
.ne 2
.mk
.na
.B ECPPIOC_GETREGS
.ad
.RS 19n
.rt
Read register values. The argument is a pointer to a
.BR "struct ecpp_regs" .
See below for a description of this structure.
.RE

.sp
.ne 2
.mk
.na
.B ECPPIOC_SETREGS
.ad
.RS 19n
.rt
Set
.B ecpp
register values. The argument is a pointer to a \fBstruct
ecpp_regs\fR. See below for a description of this structure. If a parameter is
out of range,
.B EINVAL
is returned.
.sp
The Port Register Structure is defined in <\fBsys/ecppio.h\fR>.
.sp
.in +2
.nf
struct ecpp_regs {
    uchar     dsr;  /* status reg */
    u_char    dcr;  /* control reg */
};
.fi
.in -2

The status register is read-only. The
.B ECPPIOC_SETREGS
ioctl has no
affect on this register. Valid bit values for dsr are:
.BR ECPP_nERR ,
.BR ECPP_SLCT ,
.BR ECPP_PE ,
.BR ECPP_nACK ,
.BR ECPP_nBUSY .
All other
bits are reserved and always return
.BR 1 .
.sp
The control register is read/write. Valid bit values for dcr are:
.BR ECPP_STB ,
.BR ECPP_AFX ,
.BR ECPP_nINIT ,
.BR ECPP_SLCTIN .
All other
bits are reserved. Reading reserved bits always return 1. An attempt to write
0s into these bits results in
.BR EINVAL .
.RE

.SH DEVICE SPECIAL FILES
.sp
.ne 2
.mk
.na
\fB/dev/lp\fIN\fR
.ad
.RS 19n
.rt
Solaris x86 only. (Backwards compatibility with former
.BR lp (7D)
devices.)
.RE

.sp
.ne 2
.mk
.na
\fB/dev/printers/\fIN\fR
.ad
.RS 19n
.rt
1284 compliant parallel port device special files appears in both
namespaces.
.RE

.SH FILES
.sp
.ne 2
.mk
.na
.B kernel/drv/ecpp
.ad
.sp .6
.RS 4n
32-bit ELF kernel module
.RE

.sp
.ne 2
.mk
.na
.B kernel/drv/sparcv9/ecpp
.ad
.sp .6
.RS 4n
64-bit SPARC ELF kernel module
.RE

.sp
.ne 2
.mk
.na
.B kernel/drv/amd64/ecpp
.ad
.sp .6
.RS 4n
64-bit x86 ELF kernel module
.RE

.sp
.ne 2
.mk
.na
\fBkernel/drv/ecpp.conf\fR
.ad
.sp .6
.RS 4n
driver configuration file
.RE

.sp
.ne 2
.mk
.na
\fBkernel/drv/sparcv9/ecpp.conf\fR
.ad
.sp .6
.RS 4n
driver configuration file for 64-bit SPARC
.RE

.sp
.ne 2
.mk
.na
\fBkernel/drv/amd64/ecpp.conf\fR
.ad
.sp .6
.RS 4n
driver configuration file for 64-bit x86
.RE

.SH ERRORS
.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 10n
.rt
The device is opened for write-only access and a read is attempted, or the
device is opened for read-only access and a write is attempted.
.RE

.sp
.ne 2
.mk
.na
.B EBUSY
.ad
.RS 10n
.rt
The device has been opened and another open is attempted. An attempt has been
made to unload the driver while one of the units is open.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
A
.B "ECPPIOC_SETPARMS ioctl()"
is attempted with an out-of-range value
in the \fBecpp_transfer_parms\fR structure. A \fBECPPIOC_SETREGS\fR
\fBioctl()\fR is attempted with an invalid value in the \fBecpp_regs\fR
structure. An
.B ioctl()
is attempted with an invalid value in the command
argument.An invalid command argument is received during
.BR modload (1M)
or
.BR modunload (1M).
.RE

.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 10n
.rt
The driver encountered a bus error when attempting an access. A read or write
did not complete properly, due to a peripheral error or a transfer timeout.
.RE

.sp
.ne 2
.mk
.na
.B ENXIO
.ad
.RS 10n
.rt
The driver has received an open request for a unit for which the attach
failed. The driver has received a write request for a unit which has an active
peripheral error.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
ArchitecturePCI-based systems
_
ISA-based systems (x86)
_
AvailabilitySUNWpd (Sparc)
_
SUNWpsdcr (x86)
_
Interface stabilityEvolving
.TE

.SH SEE ALSO
.sp
.LP
\fBmodload\fR(1M), \fBmodunload\fR(1M), \fBupdate_drv\fR(1M)\fBioctl\fR(2),
.BR open (2),
.BR read (2),
.BR write (2),
.BR attributes (5),
.BR bpp (7D),
.BR usbprn (7D),
.BR prnio (7I),
.BR streamio (7I)
.sp
.LP
.I IEEE Std 1284-1994
.sp
.LP
.I http://www.sun.com/io
.SH DIAGNOSTICS
.sp
.ne 2
.mk
.na
.B Parallel port controller not supported
.ad
.sp .6
.RS 4n
Driver does not support parallel port controller on the given host. Attach
failed.
.RE

