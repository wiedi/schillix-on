'\" te
.\" Copyright 1989 AT&T  Copyright (c) 1997, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH log 7D "11 Mar 1998" "SunOS 5.11" "Devices"
.SH NAME
log \- interface to STREAMS error logging and event tracing
.SH SYNOPSIS
.LP
.nf
\fB#include <sys/strlog.h>\fR
.fi

.LP
.nf
\fB#include <sys/log.h>\fR
.fi

.SH DESCRIPTION
.sp
.LP
.B log
is a STREAMS software device driver that provides an interface
for console logging and for the STREAMS error logging and event tracing
processes (see
.BR strerr (1M),
and
.BR strace (1M)).
.B log
presents
two separate interfaces: a function call interface in the kernel through
which STREAMS drivers and modules submit
.B log
messages; and a set of
.BR ioctl (2)
requests and STREAMS messages for interaction with a user
level console logger, an error logger, a trace logger, or processes that
need to submit their own
.B log
messages.
.SS "Kernel Interface"
.sp
.LP
.B log
messages are generated within the kernel by calls to the function
.BR strlog() :
.sp
.in +2
.nf
strlog(short \fImid\fR,
    short \fIsid\fR,
    char \fIlevel\fR,
    ushort_t \fIflags\fR,
    char *\fBfmt\fR,
    unsigned \fIarg1\fB\|.\|.\|.\|
);\fR
.fi
.in -2

.sp
.LP
Required definitions are contained in
.BR <sys/strlog.h> ,
.BR <sys/log.h> ,
and
.BR <sys/syslog.h> \&.
.I mid
is the STREAMS
module id number for the module or driver submitting the
.B log
message.
.I sid
is an internal sub-id number usually used to identify a particular
minor device of a driver.
.I level
is a tracing level that allows for
selective screening out of low  priority messages from the tracer.
.I flags
are any combination of
.B SL_ERROR
(the message is for the
error logger),
.B SL_TRACE
(the message is for the tracer),
.B SL_CONSOLE
(the message is for the console logger), \fBSL_FATAL\fR
(advisory notification of a fatal error), and
.B SL_NOTIFY
(request that
a copy of the message be mailed to the system administrator).
.I fmt
is a
.BR printf (3C)
style format string, except that
.BR %s ,
.BR %e ,
.BR %E ,
.BR %g ,
and
.B %G
conversion specifications are not handled.
Up to
.B NLOGARGS
(in this release, three) numeric or character
arguments can be provided.
.SS "User Interface"
.sp
.LP
.B log
is implemented as a cloneable device, it clones itself without
intervention from the system clone device. Each open of \fB/dev/log\fR
obtains a separate stream to
.BR log .
In order to receive
.BR log
messages, a process must first notify
.B log
whether it is an error
.RB "logger, trace logger, or console logger using a STREAMS " " I_STR ioctl"
call (see below). For the console logger, the
.B "I_STR ioctl"
has an
.B ic_cmd
field of
.BR I_CONSLOG ,
with no accompanying data. For the
error logger, the
.B "I_STR ioctl"
has an
.B ic_cmd
field of
.BR I_ERRLOG ,
with no accompanying data. For the trace logger, the
.B ioctl
has an
.B ic_cmd
field of
.BR I_TRCLOG ,
and must be
accompanied by a data buffer containing an array of one or more struct
.B trace_ids
elements.
.sp
.in +2
.nf
struct trace_ids {
    short ti_mid;
    short ti_sid;
    char  ti_level;
};
.fi
.in -2

.sp
.LP
Each
.B trace_ids
structure specifies a
.IR mid ,
.IR sid ,
and
.I level
from which messages will be accepted.
.BR strlog (9F)
will
accept messages whose
.I mid
and
.I sid
exactly match those in the
.B trace_ids
structure, and whose level is less than or equal to the
level given in the
.B trace_ids
structure. A value of \(mi1 in any of the
fields of the
.B trace_ids
structure indicates that  any value is
accepted for that field.
.sp
.LP
Once the logger process has identified itself using the
.B ioctl
call,
.B log
will begin sending up messages subject to the restrictions noted
above. These messages are obtained using the
.BR getmsg (2)
function. The
control part of this message contains a
.B log_ctl
structure, which
specifies the
.IR mid ,
.IR sid ,
.IR level ,
.IR flags ,
time in ticks
since boot that the message was submitted, the corresponding time in seconds
since Jan. 1, 1970, a sequence number, and a priority. The time in seconds
since 1970 is provided so that the date and time of the message can be
easily computed, and the time in ticks since boot is provided so that the
relative timing of
.B log
messages can be determined.
.sp
.in +2
.nf
struct log_ctl {
    short mid;
    short sid;
    char  level;     /* level of message for tracing */
    short flags;     /* message disposition */
#if defined(_LP64)  ||  defined(_I32LPx)
    clock32_t ltime; /* time in machine ticks since boot */
    time32_t ttime;  /* time in seconds since 1970 */
#else
    clock_t ltime;
    time_t  ttime;
#endif
    int  seq_no;     /* sequence number */
    int  pri;        /* priority = (facility|level) */
};
.fi
.in -2

.sp
.LP
The priority consists of a priority code and a facility code, found in
\fB<sys/syslog.h>\fR\&. If \fBSL_CONSOLE\fR is set in
.IR flags ,
the
priority code is set as follows: If
.B SL_WARN
is set, the priority code
is set to
.BR LOG_WARNING ;
If
.B SL_FATAL
is set, the priority code is
set to
.BR LOG_CRIT ;
If
.B SL_ERROR
is set, the priority code is set
to
.BR LOG_ERR ;
If
.B SL_NOTE
is set, the priority code is set to
.BR LOG_NOTICE ;
If
.B SL_TRACE
is set, the priority code is set to
.BR LOG_DEBUG ;
If only
.B SL_CONSOLE
is set, the priority code is set
to
.BR LOG_INFO .
Messages originating from the kernel have the facility
code set to
.BR LOG_KERN .
Most messages originating from user processes
will have the facility code set to
.BR LOG_USER .
.sp
.LP
Different sequence numbers are maintained for the error and trace logging
streams, and are provided so that gaps in the sequence of messages can be
determined (during times of high message traffic some messages may not be
delivered by the logger to avoid hogging system resources). The data part of
the message contains the unexpanded text of the format string (null
terminated), followed by
.B NLOGARGS
words for the arguments to the
format string, aligned on the first word boundary following the format
string.
.sp
.LP
A process may also send a message of the same structure to
.BR log ,
even
if it is not an error or trace logger. The only fields of the \fBlog_ctl\fR
structure in the control part of the message that are accepted are the
.IR level ,
.IR flags ,
and
.I pri
fields; all other fields are filled
in by
.B log
before being forwarded to the appropriate logger. The data
portion must contain a null terminated format string, and any arguments (up
to
.BR NLOGARGS )
must be packed, 32-bits each,  on the next 32-bit
boundary following the end of the format string.
.sp
.LP
.B ENXIO
is returned for
.B I_TRCLOG
ioctls without any
.B trace_ids
structures, or for any unrecognized
.B ioctl
calls. The
driver silently ignores incorrectly formatted
.B log
messages sent to the
driver by a user process (no error results).
.sp
.LP
Processes that wish to write a message to the console logger may direct
their output to
.BR /dev/conslog ,
using either
.BR write (2)
or
.BR putmsg (2).
.SS "Driver Configuration"
.sp
.LP
The following driver configuration properties may be defined in the
.B log.conf
file.
.sp
.ne 2
.mk
.na
.B msgid=1
.ad
.RS 11n
.rt
If
.BR msgid=1 ,
each message will be preceded by a message ID as
described in
.BR syslogd (1M).
.RE

.sp
.ne 2
.mk
.na
.B msgid=0
.ad
.RS 11n
.rt
 If
.BR msgid=0 ,
message IDs will not be generated. This property is unstable and may be removed in a future release.
.RE

.SH EXAMPLES
.LP
.B Example 1 I_ERRLOG
registration.
.sp
.in +2
.nf
struct strioctl ioc;
ioc.ic_cmd = I_ERRLOG;
ioc.ic_timout = 0;		/* default timeout (15 secs.) */
ioc.ic_len = 0;
ioc.ic_dp = NULL;
ioctl(log, I_STR, &ioc);
.fi
.in -2

.LP
.B Example 2 I_TRCLOG
registration.
.sp
.in +2
.nf
struct trace_ids tid[2];
tid[0].ti_mid = 2;
tid[0].ti_sid = 0;
tid[0].ti_level = 1;
tid[1].ti_mid = 1002;
tid[1].ti_sid = \(mi1;               /* any sub-id will be allowed */
tid[1].ti_level = \(mi1;             /* any level will be allowed */
ioc.ic_cmd = I_TRCLOG;
ioc.ic_timout = 0;
ioc.ic_len = 2 * sizeof(struct trace_ids);
ioc.ic_dp = (char *)tid;
ioctl(log, I_STR, &ioc);
.fi
.in -2

.sp
.LP
Example of submitting a
.B log
message (no arguments):

.sp
.in +2
.nf
struct strbuf ctl, dat;
struct log_ctl lc;
char *message = "Don't forget to pick up some milk
                 on the way home";
ctl.len = ctl.maxlen = sizeof(lc);
ctl.buf = (char *)&lc;
dat.len = dat.maxlen = strlen(message);
dat.buf = message;
lc.level = 0;
lc.flags = SL_ERROR|SL_NOTIFY;
putmsg(log, &ctl, &dat, 0);
.fi
.in -2

.SH FILES
.sp
.ne 2
.mk
.na
.B /dev/log
.ad
.RS 24n
.rt
Log driver.
.RE

.sp
.ne 2
.mk
.na
.B /dev/conslog
.ad
.RS 24n
.rt
Write only instance of the log driver, for console logging.
.RE

.sp
.ne 2
.mk
.na
.B /kernel/drv/log.conf
.ad
.RS 24n
.rt
Log configuration file.
.RE

.SH SEE ALSO
.sp
.LP
.BR strace (1M),
.BR strerr (1M),
.BR Intro (3),
.BR getmsg (2),
.BR ioctl (2),
.BR putmsg (2),
.BR write (2),
.BR printf (3C),
.BR strlog (9F)
.sp
.LP
.I STREAMS Programming Guide
