'\" te
.\" Copyright (c) 1997, Sun Microsystems, Inc.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH zsh 7D "1 Jan 1997" "SunOS 5.11" "Devices"
.SH NAME
zsh \- On-board serial HDLC/SDLC interface
.SH SYNOPSIS
.LP
.nf
#include <fcntl.h>
.fi

.LP
.nf
open(/dev/zsh\fIn, mode \fB);\fR
.fi

.LP
.nf
open(/dev/zsh\fI, mode \fB);\fR
.fi

.SH DESCRIPTION
.sp
.LP
The
.B zsh
module is a loadable
.B STREAMS
driver that implements the
sending and receiving of data packets as
.B HDLC
frames over synchronous
serial lines. The module is not a standalone driver, but instead depends upon
the
.B zs
module for the hardware support required by all on-board serial
devices. When loaded this module acts as an extension to the
.B zs
driver,
providing access to an
.B HDLC
interface through character-special
devices.
.sp
.LP
The \fBzsh\fIn\fR devices provide what is known as a \fBdata path\fR which
supports the transfer of data via
.BR read (2)
and
.BR write (2)
system
calls, as well as
.BR ioctl (2)
calls. Data path opens are exclusive in order
to protect against injection or diversion of data by another process.
.sp
.LP
The
.B zsh
device provides a separate
.B "control path"
for use by
programs that need to configure or monitor a connection independent of any
exclusive access restrictions imposed by data path opens.  Up to three control
paths may be active on a particular serial channel at any one time.  Control
path accesses are restricted to
.BR ioctl (2)
calls only; no data transfer is
possible.
.sp
.LP
When used in synchronous modes, the
.B "Z8530 SCC"
supports several options
for
.B "clock sourcing"
and
.BR "data encoding" .
Both the transmit and
receive clock sources can be set to be the external \fBT\fRransmit \fBC\fRlock
(\fBTRxC\fR), external \fBR\fReceive \fBC\fRlock
.RB ( RTxC ),
the internal
\fBB\fRaud \fBR\fRate \fBG\fRenerator
.RB ( BRG ),
or the output of the
\fBSCC\fR's \fBD\fRigital \fBP\fRhase-\fBL\fRock \fBL\fRoop (\fBDPLL\fR).
.sp
.LP
The \fBB\fRaud \fBR\fRate \fBG\fRenerator is a programmable divisor that
derives a clock frequency from the
.B PCLK
input signal to the
.BR SCC .
A
.RB "programmed baud rate is translated into a 16-bit" " time constant"
that is stored in the
.BR SCC .
When using the
.B BRG
as a clock source
the driver may answer a query of its current speed with a value different from
the one specified.  This is because baud rates translate into time constants
in discrete steps, and reverse translation shows the change.  If an exact baud
rate is required that cannot be obtained with the
.BR BRG ,
an external clock
source must be selected.
.sp
.LP
Use of the
.B DPLL
option requires the selection of
.B NRZI
data
encoding and the setting of a non-zero value for the baud rate, because the
.B DPLL
uses the
.B BRG
as its reference clock source.
.sp
.LP
A
.B "local loopback mode"
is available, primarily for use by the
.BR syncloop (1M)
utility for testing purposes, and should not be confused
with
.B SDLC
loop mode, which is not supported on this interface.  Also, an
.B auto-echo
feature may be selected that causes all incoming data to be
routed to the transmit data line, allowing the port to act as the remote end
of a digital loop. Neither of these options should be selected casually, or
left in use when not needed.
.sp
.LP
The
.B zsh
driver keeps running totals of various hardware generated
events for each channel.  These include numbers of packets and characters sent
.RB "and received, abort conditions detected by the receiver, receive" " CRC"
errors, transmit underruns, receive overruns, input errors and output errors,
and message block allocation failures. Input errors are logged whenever an
incoming message must be discarded, such as when an abort or
.B CRC
error
is detected, a receive overrun occurs, or when no message block is available
to store incoming data.  Output errors are logged when the data must be
discarded due to underruns,
.B CTS
.RB "drops during transmission," " CTS"
timeouts, or excessive watchdog timeouts caused by a cable break.
.SH IOCTLS
.sp
.LP
The
.B zsh
driver supports several
.B ioctl()
commands, including:
.sp
.ne 2
.mk
.na
.B S_IOCGETMODE
.ad
.RS 17n
.rt
Return a
.B "struct scc_mode"
containing parameters currently in use. These
include the transmit and receive clock sources, boolean loopback and
.B NRZI
mode flags and the integer baud rate.
.RE

.sp
.ne 2
.mk
.na
.B S_IOCSETMODE
.ad
.RS 17n
.rt
The argument is a
.B "struct scc_mode"
from which the
.B SCC
channel will
be programmed.
.RE

.sp
.ne 2
.mk
.na
.B S_IOCGETSTATS
.ad
.RS 17n
.rt
Return a
.B "struct sl_stats"
containing the current totals of
hardware-generated events. These include numbers of packets and characters
sent and received by the driver, aborts and
.B CRC
errors detected,
transmit underruns, and receive overruns.
.RE

.sp
.ne 2
.mk
.na
.B S_IOCCLRSTATS
.ad
.RS 17n
.rt
Clear the hardware statistics for this channel.
.RE

.sp
.ne 2
.mk
.na
.B S_IOCGETSPEED
.ad
.RS 17n
.rt
Returns the currently set baud rate as an integer.  This may not reflect the
actual data transfer rate if external clocks are used.
.RE

.sp
.ne 2
.mk
.na
.B S_IOCGETMCTL
.ad
.RS 17n
.rt
Returns the current state of the
.B CTS
and
.B DCD
incoming modem
interface signals as an integer.
.RE

.sp
.LP
The following structures are used with
.B "zsh ioctl()"
commands:
.sp
.in +2
.nf
struct  scc_mode {
	char  sm_txclock;   /* transmit clock sources */
	char  sm_rxclock;   /* receive clock sources */
	char  sm_iflags;    /* data and clock inversion flags (non-zsh) */
	uchar_t  sm_config; /* boolean configuration options */
	int  sm_baudrate;   /* real baud rate */
	int  sm_retval;     /* reason codes for ioctl failures */
};
struct  sl_stats {
	long  ipack;        /* input packets */
	long  opack;        /* output packets */
	long  ichar;        /* input bytes */
	long  ochar;        /* output bytes */
	long  abort;        /* abort received */
	long  crc;          /* CRC error */
	long  cts;          /* CTS timeouts */
	long  dcd;          /* Carrier drops */
	long  overrun;      /* receive overrun */
	long  underrun;     /* transmit underrun */
	long  ierror;       /* input error */
	long  oerror;       /* output error */
	long  nobuffers;    /* receive side memory allocation failure */
};
.fi
.in -2

.SH ERRORS
.sp
.LP
An
.B open()
will fail if a
.B STREAMS
message block cannot be
allocated, or:
.sp
.ne 2
.mk
.na
.B ENXIO
.ad
.RS 9n
.rt
The unit being opened does not exist.
.RE

.sp
.ne 2
.mk
.na
.B EBUSY
.ad
.RS 9n
.rt
The device is in use by another serial protocol.
.RE

.sp
.LP
An
.B ioctl()
will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
An attempt was made to select an invalid clocking source.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The baud rate specified for use with the baud rate generator would translate
to a null time constant in the
.BR SCC "'s registers."
.RE

.SH FILES
.sp
.ne 2
.mk
.na
\fB/dev/zsh[0-1]\fR,\fB/dev/zsh\fR
.ad
.sp .6
.RS 4n
character-special devices
.RE

.sp
.ne 2
.mk
.na
.B /usr/include/sys/ser_sync.h
.ad
.sp .6
.RS 4n
header file specifying synchronous serial communication definitions
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Architecturex86
.TE

.SH SEE ALSO
.sp
.LP
.BR syncinit (1M),
.BR syncloop (1M),
.BR syncstat (1M),
.BR ioctl (2),
.BR open (2),
.BR read (2),
.BR write (2),
.BR attributes (5),
.BR zs (7D)
.sp
.LP
Refer to the \fIZilog Z8530 SCC Serial Communications Controller Technical
Manual\fR for details of the \fBSCC\fR's operation and capabilities.
.SH DIAGNOSTICS
.sp
.ne 2
.mk
.na
\fBzsh data open failed, no memory, rq=\fInnn\fR
.ad
.sp .6
.RS 4n

.RE

.sp
.ne 2
.mk
.na
\fBzsh clone open failed, no memory, rq=\fInnn\fR
.ad
.sp .6
.RS 4n
A kernel memory allocation failed for one of the private data structures. The
value of
.I nnn
is the address of the read queue passed to
.BR open (2).
.RE

.sp
.ne 2
.mk
.na
.B zsh_open: can't alloc message block
.ad
.sp .6
.RS 4n
The open could not proceed because an initial
.B STREAMS
message block
could not be made available for incoming data.
.RE

.sp
.ne 2
.mk
.na
\fBzsh: clone device \fId\fB must be attached before use!\fR
.ad
.sp .6
.RS 4n
An operation was attempted through a control path before that path had been
attached to a particular serial channel.
.RE

.sp
.ne 2
.mk
.na
\fBzsh\fIn\fB: invalid operation for clone dev.\fR
.ad
.sp .6
.RS 4n
An inappropriate
.B STREAMS
message type was passed through a control
path. Only
.B M_IOCTL
and
.B M_PROTO
message types are permitted.
.RE

.sp
.ne 2
.mk
.na
\fBzsh\fIn\fB: not initialized, can't send message\fR
.ad
.sp .6
.RS 4n
An
.B M_DATA
message was passed to the driver for a channel that had not
been programmed at least once since the driver was loaded.  The \fBSCC\fR's
registers were in an unknown state.  The
.B S_IOCSETMODE
ioctl command
performs the programming operation.
.RE

.sp
.ne 2
.mk
.na
\fBzsh\fIn\fB: transmit hung\fR
.ad
.sp .6
.RS 4n
The transmitter was not successfully restarted after the watchdog timer
expired.
.RE

