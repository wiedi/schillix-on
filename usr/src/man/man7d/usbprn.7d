'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH usbprn 7D "18 June 2005" "SunOS 5.11" "Devices"
.SH NAME
usbprn \- USB printer class driver
.SH SYNOPSIS
.LP
.nf
#include <sys/usb/clients/printer/usb_printer.h>
.fi

.LP
.nf
#include <sys/ecppio.h>
.fi

.LP
.nf
usbprn@unit-address
.fi

.SH DESCRIPTION
.sp
.LP
The
.B usbprn
driver is a USBA (Solaris USB Architecture) compliant
client driver that supports the
.I "USB Printer Class 1.0"
specification.
The
.B usbprn
driver supports a subset of the
.BR ecpp "(7D) parallel"
port driver functionality. However, unlike the STREAMS-based \fBecpp\fR
driver,
.B usbprn
is a character driver.
.sp
.LP
The
.B usbprn
driver supports all USB printer-class compliant printers.
For a list of recommended printers and USB parallel printer adapters, visit
http://\fIwww.sun.com/io\fR.
.sp
.LP
The
.B usbrpn
driver includes support for communicating with many
different printers. To use these printers, it may be nesessary to install
and configure additional format conversion packages available in the Solaris
distribution. Configuration of these conversion packages under the Solaris
printing system can be simplified through the use of the
.BR printmgr (1M).
This tool allows selection of printer manufacturer/model information while
creating a print queue. For USB connected printers, it attempts to
pre-select the the manufacturer and model information based on the 1284
device id supplied by the printer.
.SS "UGEN (Generic USB)"
.sp
.LP
The
.B usbprn
driver also supports a \fBugen\fR(7D) interface allowing
raw access to the device, for example by
.BR libusb (3LIB)
applications, by
passing the drivers bound to each interface. Because a libusb application
might change the state of the device, you should not access the device
through the child interface drivers.
.SH DEFAULT OPERATION
.sp
.LP
With certain minor exceptions (outlined in the Notes sections below), the
.B usbprn
driver supports a subset of the
.BR ecpp "(7D) ioctl"
interfaces:
.sp
.LP
Configuration variables are set to their default values each time the USB
printer device is attached. The
.B write_timeout
period (defined in the
ECPPIOC_SETPARMS ioctl description below) is set to 90 seconds. The mode is
set to centronics mode (ECPP_CENTRONICS). Parameters can be changed through
the ECPPIOC_SETPARMS ioctl and read through the ECPPIOC_GETPARMS ioctl. Each
time the USB printer device is opened, the device is marked as busy and all
further opens will return EBUSY. Once the device is open, applications can
write to the device and the driver can send data and obtain device id and
status.
.LP
Note -
.sp
.RS 2
Unlike the \fBecpp\fR(7D) driver, \fBusbprn\fR resets configuration
variables to their default values with each
.BR attach "(9E). (The"
.BR ecpp (7D)
driver resets configuration variables with each
.BR open (2).)
.RE
.SH WRITE OPERATION
.sp
.LP
A
.BR write (2)
operation returns the number of bytes successfully written
to the device. If a failure occurs while a driver is transferring data to
printer, the contents of the status bits are captured at the time of the
error and can be retrieved by the application program using the
ECPPIOC_GETERR
.BR ioctl (2)
call. The captured status information is
overwritten each time an ECPPIOC_TESTIO
.BR ioctl (2)
occurs.
.SH IOCTLS
.sp
.LP
The
.B usbprn
driver supports
.B prnio(7I)
interfaces. Note that the
.B PRNIOC_RESET
command has no effect on USB printers.
.sp
.LP
The following
.BR ioctl (2)
calls are supported for backward compatibility
and are not recommended for new applications.
.sp
.ne 2
.mk
.na
.B ECPPIOC_GETPARMS
.ad
.RS 20n
.rt
Gets current transfer parameters. The argument is a pointer to \fBstruct
ecpp_transfer_parms\fR. If parameters are not configured after the device is
opened, the structure will be set to its default configuration.
.LP
Note -
.sp
.RS 2
Unlike the
.BR ecpp "(7D) driver, only the ECPP_CENTRONICS mode is"
currently supported in
.BR usbprn .
.RE
.RE

.sp
.ne 2
.mk
.na
.B ECPPIOC_SETPARMS
.ad
.RS 20n
.rt
Sets transfer parameters. The argument is a pointer to a \fBstruct
ecpp_transfer_parms\fR. If a parameter is out of range,
.B EINVAL
is
returned. If the peripheral or host device cannot support the requested
mode,
.B EPROTONOSUPPORT
is returned.
.sp
The transfer parameters structure is defined in <\fBsys/ecppio.h\fR>:
.sp
.in +2
.nf
struct ecpp_transfer_parms {
    int  write_timeout;
    int  mode;
};
.fi
.in -2

The
.B write_timeout
field, which specifies how long the driver will
take to transfer 8192 bytes of data to the device, is set to a default value
of 90 seconds. The
.B write_timeout
field must be greater than one second
and less than 300 seconds (five minutes.)
.LP
Note -
.sp
.RS 2
Unlike the
.BR ecpp "(7D) driver, only the ECPP_CENTRONICS mode is"
currently supported in
.BR usbprn .
Also, the semantics of
.B write_timeout
in
.B usbprn
differ from \fBecpp\fR(7D). Refer to
.BR ecpp (7D)
for information.
.RE
.RE

.sp
.ne 2
.mk
.na
.B BPPIOC_TESTIO
.ad
.RS 20n
.rt
Tests the transfer readiness of a print device and checks status bits to
determine if a
.BR write (2)
will succeed. If status bits are set, a
transfer will fail. If a transfer will succeed, zero is returned. If a
transfer fails, the driver returns
.B EIO
and the state of the status
bits are captured. The captured status can be retrieved using the
BPPIOC_GETERR
.BR ioctl (2)
call. BPPIOC_TESTIO and BPPIOC_GETERR are
compatible to the ioctls specified in
.BR bpp (7D).
.LP
Note -
.sp
.RS 2
Unlike the
.BR ecpp "(7D) driver, only the ECPP_CENTRONICS mode is"
currently supported in
.BR usbprn .
Additionally,
.B bus_error
and
.B timeout_occurred
fields are not used in the
.B usbprn
interface.
(In \fBecpp\fR(7D), \fBtimeout_occurred\fR is used.)
.RE
.RE

.sp
.ne 2
.mk
.na
.B BPPIOC_GETERR
.ad
.RS 20n
.rt
Get last error status. The argument is a pointer to a \fBstruct
bpp_error_status\fR. This structure indicates the status of all the
appropriate status bits at the time of the most recent error condition
during a
.BR write (2)
call, or the status of the bits at the most recent
BPPIOC_TESTIO
.BR ioctl (2)
call.
.sp
.in +2
.nf
struct bpp_error_status {
   char    timeout_occurred; /* not used */
   char    bus_error;        /* not used */
   uchar_t pin_status;       /* status of pins which
                             /* could cause error */
};
.fi
.in -2

The pin_status field indicates possible error conditions. The error status
structure
.B bpp_error_status
is defined in the include file
\fB<sys/bpp_io.h>\fR\&. The valid bits for \fBpin_status\fR can be
.BR BPP_ERR_ERR ,
.BR BPP_SLCT_ERR ,
and
.BR BPP_PE_ERR .
A set bit
indicates that the associated pin is asserted.
.LP
Note -
.sp
.RS 2
Unlike the
.BR ecpp "(7D) driver, only the ECPP_CENTRONICS mode is"
currently supported in
.BR usbprn .
Additionally, the
.B bus_error
and
.B timeout_occurred
fields are not used in the
.B usbprn
interface.
(In \fBecpp\fR(7D), \fBtimeout_occurred\fR is used.) Unlike
.BR ecpp (7D),
the BPP_BUSY_ERR status bit is not supported by USB printers.
.RE
.RE

.sp
.ne 2
.mk
.na
.B ECPPIOC_GETDEVID
.ad
.RS 20n
.rt
Gets the IEEE 1284 device ID from the peripheral. The argument is a pointer
to a
.BR "struct ecpp_device_id" .
Applications should set mode to
ECPP_CENTRONICS. If another mode is used, the driver will return
.BR EPROTONOSUPPORT .
.B len
is the length of the buffer pointed to by
.BR addr .
.B rlen
is the actual length of the device ID string returned
from the peripheral. If the returned
.B rlen
is greater than
.BR len ,
the application should call ECPPIOC_GETDEVID a second time with a buffer
length equal to
.BR rlen .
.sp
The 1284 device ID structure:
.sp
.in +2
.nf
struct ecpp_device_id {
  int  mode; /* mode to use for reading device id */
  int  len;  /* length of buffer */
  int  rlen;  /* actual length of device id string */
  char *addr; /* buffer address */
.fi
.in -2

.LP
Note -
.sp
.RS 2
Unlike
.BR ecpp "(7D), only the ECPP_CENTRONICS mode is currently supported"
in
.BR usbprn .
.RE
.RE

.SH READ OPERATION
.sp
.LP
 The
.B read
operation is not supported and returns
.BR EIO .
.SH ERRORS
.sp
.ne 2
.mk
.na
.B EBUSY
.ad
.RS 19n
.rt
 The device has been opened and another open is attempted. An attempt has been made to unload the driver while one of the units is open.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 19n
.rt
An unsupported IOCTL has been received. A ECPPIOC_SETPARMS
.BR ioctl (2)
is attempted with an out of range value in the \fBecpp_transfer_parms\fR
structure.
.RE

.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 19n
.rt
The driver has received an unrecoverable device error, or the device is not
responding, or the device has stalled when attempting an access. A
.BR write (2)
or
.BR ioctl (2)
did not complete due to a peripheral
access. A
.BR read (2)
system call has been issued.
.RE

.sp
.ne 2
.mk
.na
.B ENXIO
.ad
.RS 19n
.rt
The driver has received an
.BR open (2)
request for a unit for which the
attach failed.
.RE

.sp
.ne 2
.mk
.na
.B ENODEV
.ad
.RS 19n
.rt
The driver has received an
.BR open (2)
request for a device that has been
disconnected.
.RE

.sp
.ne 2
.mk
.na
.B EPROTONOSUPPORT
.ad
.RS 19n
.rt
The driver has received a ECPPIOC_SETPARMS
.BR ioctl (2)
for a mode
argument other than ECPP_CENTRONICS in the \fBecpp_transfer_parms\fR
structure.
.RE

.SH FILES
.sp
.ne 2
.mk
.na
.B /kernel/drv/usbprn
.ad
.RS 30n
.rt
32-bit x86 ELF kernel module
.RE

.sp
.ne 2
.mk
.na
.B /kernel/drv/amd64/usbprn
.ad
.RS 30n
.rt
64-bit x86 ELF kernel module
.RE

.sp
.ne 2
.mk
.na
.B /kernel/drv/sparcv9/usbprn
.ad
.RS 30n
.rt
64-bit SPARC ELF kernel module
.RE

.sp
.ne 2
.mk
.na
.B /dev/usb/*/*/*
.ad
.RS 30n
.rt
ugen(7D) nodes.
.RE

.sp
.ne 2
.mk
.na
\fB/dev/printers/\fIn\fR
.ad
.RS 30n
.rt
Character special files
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
ArchitectureSPARC, x86, PCI-based systems
_
AvailabilitySUNWusb
.TE

.SH SEE ALSO
.sp
.LP
.BR cfgadm_usb (1M),
.BR printmgr (1M),
.BR ioctl (2),
.BR open (2),
.BR read (2),
.BR write (2),
.BR libusb (3LIB),
.BR attributes (5),
.BR bpp (7D),
.BR ecpp (7D),
.BR ugen (7D),
\fBusba\fR(7D)\fBprnio\fR(7I), \fBattach\fR(9E)
.sp
.LP
.I Writing Device Drivers
.sp
.LP
.I "Universal Serial Bus Specification 1.0 and 1.1
.sp
.LP
.I "USB Device Class Definition for Printing Devices 1.0
.sp
.LP
.I System Administration Guide: Basic Administration
.sp
.LP
http://\fIwww.sun.com/io\fR
.SH DIAGNOSTICS
.sp
.LP
In addition to being logged, the following messages may appear on the
system console. All messages are formatted in the following manner:
.sp
.in +2
.nf
Warning: <device path> (usbprn<instance num>): Error Message...
.fi
.in -2
.sp

.sp
.ne 2
.mk
.na
.B "Device was disconnected while open. Data may have been lost.
.ad
.sp .6
.RS 4n
The device has been hot-removed or powered off while it was open and a
possible data transfer was in progress. The job may be aborted.
.RE

.sp
.ne 2
.mk
.na
.B Cannot access <device>. Please reconnect.
.ad
.sp .6
.RS 4n
There was an error in accessing the printer during reconnect. Please
reconnect the device.
.RE

.sp
.ne 2
.mk
.na
\fBDevice is not identical to the previous one on this port. Please
disconnect and reconnect.\fR
.ad
.sp .6
.RS 4n
A USB printer was hot-removed while open. A new device was hot-inserted
which is not identical to the original USB printer. Please disconnect the
USB device and reconnect the printer to the same port.
.RE

.sp
.ne 2
.mk
.na
.B "Printer has been reconnected but data may have been lost.
.ad
.sp .6
.RS 4n
The printer that was hot-removed from its USB port has been re-inserted
again to the same port. It is available for access but the job that was
running prior to the hot-removal may be lost.
.RE

.SH NOTES
.sp
.LP
The USB printer will be power managed if the device is closed.
.sp
.LP
If a printer is hot-removed before a job completes, the job is terminated
and the driver will return EIO. All subsequent opens will return
.BR ENODEV .
If a printer is hot-removed, an LP reconfiguration may not be
needed if a printer is re-inserted on the same port. If re-inserted on a
different port, an LP reconfiguration may be required.
.sp
.LP
The USB Parallel Printer Adapter is not hotpluggable. The printer should be
connected to USB Parallel Printer Adapter before plugging the USB cable into
host or hub port and should be removed only after disconnecting the USB
cable of USB Parallel Printer Adapter from the host or hub port.
