'\" te
.\" Copyright 1992 Sun Microsystems
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH pts 7D "21 Aug 1992" "SunOS 5.11" "Devices"
.SH NAME
pts \- STREAMS pseudo-tty slave driver
.SH DESCRIPTION
.sp
.LP
The pseudo-tty subsystem simulates a terminal connection, where the master
side represents the terminal and the slave represents the user process's
special device end point. In order to use the pseudo-tty subsystem, a node
for the master side driver
.B /dev/ptmx
and N nodes for the slave driver
(N is determined at installation time) must be installed. The names of the
slave devices are
.B /dev/pts/M
where
.B M
has the values 0 through
N-1. When the master device is opened, the corresponding slave device is
automatically locked out. No user may open that slave device until its
permissions are adjusted and the device unlocked by calling functions
.BR grantpt (3C)
and
.BR unlockpt "(3C). The user can then invoke the open"
system call with the name that is returned by the
.BR ptsname (3C)
function. See the example below.
.sp
.LP
Only one open is allowed on a master device. Multiple opens are allowed on
the slave device. After both the master and slave have been opened, the user
has two file descriptors which are end points of a full duplex connection
composed of two streams automatically connected at the master and slave
drivers. The user may then push modules onto either side of the stream pair.
The user needs to push the
.BR ptem "(7M) and"
.BR ldterm (7M)
modules onto
the slave side of the pseudo-terminal subsystem to get terminal semantics.
.sp
.LP
The master and slave drivers pass all messages to their adjacent queues.
Only the
.B M_FLUSH
needs some processing. Because the read queue of one
side is connected to the write queue of the other, the
.B FLUSHR
flag is
changed to the
.B FLUSHW
flag and vice versa. When the master device is
closed an
.B M_HANGUP
message is sent to the slave device which will
render the device unusable. The process on the slave side gets the errno
.B EIO
when attempting to write on that stream but it will be able to
read any data remaining on the stream head read queue. When all the data has
been read, read returns 0 indicating that the stream can no longer be used.
On the last close of the slave device, a 0-length message is sent to the
.RB "master device. When the application on the master side issues a" " read()"
or
.B getmsg()
and 0 is returned, the user of the master device decides
whether to issue a
.B close()
that dismantles the pseudo-terminal
subsystem. If the master device is not closed, the pseudo-tty subsystem will
be available to another user to open the slave device. Since 0-length
messages are used to indicate that the process on the slave side has closed
and should be interpreted that way by the process on the master side,
applications on the slave side should not write 0-length messages. If that
occurs, the write returns 0, and the 0-length message is discarded by the
.B ptem
module.
.sp
.LP
The standard STREAMS system calls can access the pseudo-tty devices. The
slave devices support the
.B O_NDELAY
and
.B O_NONBLOCK
flags.
.SH EXAMPLES
.sp
.in +2
.nf
int    fdm fds;
char   *slavename;
extern char *ptsname();

fdm = open("/dev/ptmx", O_RDWR);  /* open master */
grantpt(fdm);                     /* change permission of	slave */
unlockpt(fdm);                    /* unlock slave */
slavename = ptsname(fdm);         /* get name of slave */
fds = open(slavename, O_RDWR);    /* open slave */
ioctl(fds, I_PUSH, "ptem");       /* push ptem */
ioctl(fds, I_PUSH, "ldterm");     /* push ldterm*/
.fi
.in -2

.SH FILES
.sp
.ne 2
.mk
.na
.B /dev/ptmx
.ad
.RS 14n
.rt
master clone device
.RE

.sp
.ne 2
.mk
.na
.B /dev/pts/M
.ad
.RS 14n
.rt
slave devices (M = 0 -> N-1)
.RE

.SH SEE ALSO
.sp
.LP
.BR grantpt (3C),
.BR ptsname (3C),
.BR unlockpt (3C),
.BR ldterm (7M),
.BR ptm (7D),
.BR ptem (7M)
.sp
.LP
.I STREAMS Programming Guide
