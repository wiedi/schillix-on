'\" te
.\" Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH wscons 7D "26 May 2006" "SunOS 5.11" "Devices"
.SH NAME
wscons \- workstation console
.SH SYNOPSIS
.LP
.nf
\fB#include <sys/strredir.h>\fR
.fi

.LP
.nf
\fBioctl\fR(\fIfd\fR, SRIOCSREDIR, \fItarget\fR);
.fi

.LP
.nf
\fBioctl\fR(\fIfd\fR, SRIOCISREDIR, \fItarget\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B wscons
workstation console consists of a workstation keyboard and
frame buffer that act together to emulate an
.B ASCII
terminal. It includes
a redirection facility that allows I/O issued to the workstation console to be
diverted to a STREAMS device, enabling window systems to redirect output that
would otherwise appear directly on the frame buffer in corrupted form.
.SS "Redirection"
.sp
.LP
The
.B wscons
redirection facility maintains a list of devices that are
designated as redirection targets through the
.B SRIOCSREDIR
ioctl described
below. Only the current entry is active; when the active entry is closed, the
most recent remaining entry becomes active. The active entry acts as a proxy
for the device being redirected and handles all
.BR read (2),
.BR write (2),
.BR ioctl (2),
and
.BR poll (2)
calls issued against the redirectee.
.sp
.LP
The ioctls described below control the redirection facility. In both cases,
\fIfd\fR is a descriptor for the device being redirected (or workstation
console) and
.I target
is a descriptor for a STREAMS device.
.sp
.ne 2
.mk
.na
.B SRIOCSREDIR
.ad
.RS 16n
.rt
Designates
.I target
as the source and destination of I/O ostensibly
directed to the device denoted by \fIfd\fR.
.RE

.sp
.ne 2
.mk
.na
.B SRIOCISREDIR
.ad
.RS 16n
.rt
Returns 1 if
.I target
names the device currently acting as proxy for the
device denoted by
.IR fd ,
and 0 if it is not.
.RE

.SS "ANSI Standard Terminal Emulation"
.sp
.LP
The Solaris kernel terminal emulator provides ANSI X3.64 emulation both on
SPARC and x86 systems.
.sp
.LP
On SPARC systems, the PROM monitor is used to emulate an ANSI  X3.64 terminal
if the kernel terminal emulator is not available for emulation. See
.BR visual_io (7I)
for more details.
.sp
.LP
Note: The
.B VT100
adheres the
.B ANSI
X3.64 standard. However, because
the
.B VT100
features nonstandard extensions to
.B ANSI
X3.64, it is
incompatible with Sun terminal emulators.
.sp
.LP
The SPARC console displays 34 lines of 80 ASCII characters per line.  The x86
console displays 25 lines of 80 ASCII characters per line.  Devices with
smaller text capacities may display less. On SPARC systems, the \fBscreen-#rows
screen-#columns\fR should be set to 34 or 80 respectively or text capacities
will vary from those described above. On SPARC systems, the \fBscreen-#rows and
screen-#columns\fR fields are stored in
.BR NVRAM/EEPROM .
See
.BR eeprom (1M)
for more information. Both SPARC and x86 consoles offer
scrolling, (x, y) cursor addressing ability and a number of other control
functions.
.sp
.LP
The console cursor marks the current line and character position on the
screen.
.B ASCII
characters between
.B 0x20
.RB "(space) and" " 0x7E"
(tilde) inclusive are printing characters. When a print character is written to
the console (and is not part of an escape sequence), it is displayed at the
current cursor position and the cursor moves one position to the right on the
current line.
.sp
.LP
On SPARC based systems, later 
.B PROM
revisions have the full 8-bit ISO
Latin-1 (\fIISO 8859-1\fR) character set. Earlier
.B PROM
revisions display
characters in the range
.B 0xA0
through
.B 0xFE
as spaces.
.sp
.LP
When the cursor is at the right edge of the screen, it moves to the first
character position on the next line.  When the cursor is at the screen's
right-bottom edge, the line-feed function is performed (see \fBCTRL-J\fR
below). The line-feed function scrolls the screen up by one or more lines
before moving the cursor to the first character position on the next line.
.SS "Control Sequence Syntax"
.sp
.LP
The
.B wscons
console defines a number of control sequences that may occur
during input.  When a control sequence is written to the console, it affects
one of the control functions described below. Control sequences are not
displayed on screen.
.sp
.LP
A number of control sequences (or control character functions) are of the
form: 
.sp
.LP
\fBCTRL-\fIx\fR
.sp
.LP
 where
.I x
represents a singe character., such as
.B CNTRL-J
for a line feed.
.sp
.LP
Other
.B ANSI
control sequences are of the form:
.sp
.in +2
.nf
ESC [ \fIparams char\fR
.fi
.in -2

.LP
Note -
.sp
.RS 2
Spaces are included only for readability; these characters must occur in the
given sequence without the intervening spaces.
.RE
.sp
.ne 2
.mk
.na
.B ESC
.ad
.RS 10n
.rt
\fBASCII\fR escape character (\fBESC, CTRL-[, 0x1B\fR).
.RE

.sp
.ne 2
.mk
.na
\fB[\fR
.ad
.RS 10n
.rt
Left square bracket `[' (\fB0x5B)\fR.
.RE

.sp
.ne 2
.mk
.na
.I params
.ad
.RS 10n
.rt
Sequence of zero or more decimal numbers made up of digits between 0 and 9,
separated by semicolons. Parameters are represented by
.I n
in the syntax
descriptions for escape sequence functions.
.RE

.sp
.ne 2
.mk
.na
.I char
.ad
.RS 10n
.rt
Function character, which is different for each control sequence and it
represented by
.I x
in the syntax descriptions for control character
functions. 
.RE

.sp
.LP
In the following examples of syntactically valid escape sequences, \fBESC
\fRrepresent the single \fBASCII\fR character, Escape:
.sp
.ne 2
.mk
.na
\fBESC[m\fR
.ad
.RS 22n
.rt
Select graphic rendition with default parameter
.RE

.sp
.ne 2
.mk
.na
\fBESC[7m\fR
.ad
.RS 22n
.rt
Select graphic rendition with reverse image
.RE

.sp
.ne 2
.mk
.na
\fBESC[33;54H\fR
.ad
.RS 22n
.rt
Set cursor position
.RE

.sp
.ne 2
.mk
.na
\fBESC[123;456;0;;3;B\fR
.ad
.RS 22n
.rt
Move cursor down
.RE

.sp
.LP
Syntactically valid control characters and
.B ANSI
escape sequences that
are not currently interpreted by the console are ignored.
.sp
.LP
Each control function requires a specified number of parameters. If fewer
parameters are supplied, the remaining parameters (with certain exceptions
noted below) default  to 1. If more parameters are supplied, the first \fIn\fR
parameters are used by kernel terminal emulator. In contrast,  only the last
\fIn\fR parameters are used by PROM based emulator, where \fIn\fR is the number
required by that particular command character.
.sp
.LP
Parameters which are omitted or set to 0 are reset to the default value of 1
(with certain exceptions). For example, the command character
.B M
requires
one parameter. \fBESC[;M\fR, \fBESC[0M\fR, \fBESC[M\fR and
\fBESC[23;15;32;1M\fR are all equivalent to \fBESC[1M\fR and provide a
parameter value of 1.  Note that \fBESC[;5M\fR (interpreted as \fB`ESC[5M\fR')
is \fInot\fR equivalent to \fBESC[5;M\fR (interpreted as `\fBESC[5;1M\fR')
which is ultimately interpreted as `\fBESC[1M\fR').
.SS "ANSI Control Functions"
.sp
.LP
The following paragraphs specify the
.B ANSI
control functions implemented
by the console.  Each description provides:
.RS +4
.TP
.ie t \(bu
.el o
Control sequence syntax
.RE
.RS +4
.TP
.ie t \(bu
.el o
Hexadecimal equivalent of control characters where applicable
.RE
.RS +4
.TP
.ie t \(bu
.el o
Control function name and
.B ANSI
or Sun abbreviation (if any).
.RE
.RS +4
.TP
.ie t \(bu
.el o
Description of parameters required, if any
.RE
.RS +4
.TP
.ie t \(bu
.el o
Description of the control function
.RE
.RS +4
.TP
.ie t \(bu
.el o
Initial setting of the mode for functions that set a mode. To restore the
initial settings, use the
.B SUNRESET
escape sequence.
.RE
.SS "Control Character Functions"
.sp
.LP
The
.B wscons
control character functions are:
.sp
.ne 2
.mk
.na
.B Bell (BEL),
.ad
.br
.na
.B CTRL-G
.ad
.br
.na
.B 0x7
.ad
.RS 22n
.rt
Used for consoles that are not equipped with an audible bell. Current Sun
workstation models also flash the screen if the keyboard is not the console
input device.
.RE

.sp
.ne 2
.mk
.na
.B Backspace (BS),
.ad
.br
.na
.B CTRL-H,
.ad
.br
.na
.B 0x8
.ad
.RS 22n
.rt
The cursor moves one position to the left on the current line.  If it is
already at the left edge of the screen, no change takes place.
.RE

.sp
.ne 2
.mk
.na
.B Tab (TAB),
.ad
.br
.na
.B CTRL-I,
.ad
.br
.na
.B 0x9
.ad
.RS 22n
.rt
The cursor moves right on the current line to the next tab stop.  The tab
stops are fixed at every multiple of eight columns. If the cursor is already at
the right edge of the screen, nothing change takes place. Otherwise, the cursor
moves right a minimum of one and a maximum of eight character positions.
.RE

.sp
.ne 2
.mk
.na
\fBLine-feed (LF),\fR
.ad
.br
.na
.B CTRL-J,
.ad
.br
.na
.B 0xA
.ad
.RS 22n
.rt
The cursor, while remaining at the same character position on the line, moves
down one line. If the cursor is at the bottom line, the screen either scrolls
up or wraps around depending on the setting of an internal variable
.IR n
(initially 1) . The internal variable can be changed using the \fBESC[r\fR
control sequence.  If
.I n
is greater than zero, the entire screen
(including the cursor) is scrolled up by
.I n
lines before executing the
line-feed. The top
.I n
lines scroll off the screen and are lost.  New blank
lines
.I n
scroll onto the bottom of the screen. After scrolling, move the
cursor down one line to execute the line feed.
.sp
If \fIn\fR is zero, wrap-around mode is entered. The \fBESC [ 1 r\fR exits
back to scroll mode. If a line-feed occurs on the bottom line in wrap mode, the
cursor goes to the same character position in the top line of the screen.
During line-feeds, the line that the cursor moves to is cleared and no
scrolling occurs. Wrap-around mode is not implemented in the window system.
.sp
On SPARC based systems, the speed at which the screen scrolls is dependent on
the amount of data waiting to be printed.  Whenever a scroll occurs and the
console is in normal scroll mode (\fBESC [ 1 r\fR), it scans the rest of the
data awaiting printing to see how many line-feeds occur in it.  This scan stops
when the console finds a control character from the set {\fBVT\fR, \fBFF\fR,
.BR SO ,
.BR SI ,
.BR DLE ,
.BR DC1 ,
.BR DC2 ,
.BR DC3 ,
.BR DC4 ,
.BR NAK ,
.BR SYN ,
.BR ETB ,
.BR CAN ,
.BR EM ,
.BR SUB ,
.BR ESC ,
.BR FS ,
.BR GS ,
.BR RS ,
\fBUS\fR} .  At that point, the screen is
scrolled by
.I n
lines (\fIn\fR \(>= 1) and processing continues. The
scanned text is processed normally and fills in the newly created lines. As
long as escape codes or other control characters are not intermixed with the
text, this results in faster scrolling
.RE

.sp
.ne 2
.mk
.na
\fBReverse Line-feed,\fR
.ad
.br
.na
.B CTRL-K,
.ad
.br
.na
.B 0xB
.ad
.RS 22n
.rt
With kernel terminal emulator (while remaining at the same character position
on the line), the  cursor  moves down one line. However, with PROM based
emulator (while remaining at the same character position on the line), the
cursor moves up  one line. If the cursor is already at the top line, no  change
takes place.
.RE

.sp
.ne 2
.mk
.na
\fBForm-feed (FF)\fR
.ad
.br
.na
.B CTRL-L,
.ad
.br
.na
.B 0xC
.ad
.RS 22n
.rt
The cursor is positioned to the home position (upper-left corner) and the
entire screen is cleared.
.RE

.sp
.ne 2
.mk
.na
.B Return (CR),
.ad
.br
.na
.B CTRL-M,
.ad
.br
.na
.B 0xD
.ad
.RS 22n
.rt
The cursor moves to the leftmost character position on the current line.
.RE

.SS "Escape Sequence Functions"
.sp
.LP
The
.B wscons
escape sequence functions are:
.sp
.ne 2
.mk
.na
.B Escape (ESC),
.ad
.br
.na
\fBCTRL-[,\fR
.ad
.br
.na
.B 0x1B
.ad
.sp .6
.RS 4n
The escape character.  Escape initiates a multi-character control sequence.
.RE

.sp
.ne 2
.mk
.na
.B Insert Character (ICH)
.ad
.br
.na
\fBESC[#@\fR
.ad
.sp .6
.RS 4n
Takes one parameter,
.I n
(default 1).  Inserts
.I n
spaces at the
current cursor position.  The current line, starting at the current cursor
position inclusive, is shifted to the right by
.I n
character positions to
make room for the spaces.  The rightmost 
.I n
character positions shift off
the line and are lost. The position of the cursor is unchanged.
.RE

.sp
.ne 2
.mk
.na
.B Cursor Up (CUU),
.ad
.br
.na
\fBESC[#A\fR
.ad
.sp .6
.RS 4n
Takes one parameter,
.I n
(default 1).  Moves the cursor up
.I n
lines.
If the cursor is fewer than 
.I n
lines from the top of the screen, moves
the cursor to the topmost line on the screen.  The character position of the
cursor on the line is unchanged.
.RE

.sp
.ne 2
.mk
.na
.B Cursor Down (CUD),
.ad
.br
.na
\fBESC[#B\fR
.ad
.sp .6
.RS 4n
Takes one parameter,  (default 1).  Moves the cursor down 
.I n
lines. If
the cursor is fewer than 
.I n
lines from the bottom of the screen, move the
cursor to the last line on the screen.  The character position of the cursor on
the line is unchanged.
.RE

.sp
.ne 2
.mk
.na
.B Cursor Forward (CUF),
.ad
.br
.na
\fBESC[#C\fR
.ad
.sp .6
.RS 4n
Takes one parameter,
.I n
(default 1).  Moves the cursor to the right by
\fIn\fR character positions on the current line.  If the cursor is fewer than
\fIn\fR positions from the right edge of the screen, moves the cursor to the
rightmost position on the current line.
.RE

.sp
.ne 2
.mk
.na
.B Cursor Backward (CUB),
.ad
.br
.na
\fBESC[#D\fR
.ad
.sp .6
.RS 4n
Takes one parameter,
.I n
(default 1).  Moves the cursor to the left by
\fIn\fR character positions on the current line.  If the cursor is fewer than
\fIn\fR positions from the left edge of the screen, moves the cursor to the
leftmost position on the current line.
.RE

.sp
.ne 2
.mk
.na
.B Cursor Next Line (CNL),
.ad
.br
.na
\fBESC[#E\fR
.ad
.sp .6
.RS 4n
Takes one parameter, 
.I n
(default 1).  Positions the cursor at the
leftmost character position on the \fIn\fR-th line below the current line. If
the current line is less than
.I n
lines from the bottom of the screen,
positions the cursor at the leftmost character position on the bottom line.
.RE

.sp
.ne 2
.mk
.na
.B Horizontal and Vertical Position (HVP),
.ad
.br
.na
\fBESC[#1;#2f\fR
.ad
.sp .6
.RS 4n
or
.RE

.sp
.ne 2
.mk
.na
.B Cursor Position (CUP),
.ad
.br
.na
\fBESC[#1;#2H\fR
.ad
.sp .6
.RS 4n
Takes two parameters,
.IR n 1
and
.IR n 2
(default 1, 1).  Moves the cursor
to the \fIn\fR2-th character position on the \fIn\fR1-th line.  Character
positions are numbered from 1 at the left edge of the screen; line positions
are numbered from 1 at the top of the screen.  Hence, if both parameters are
omitted, the default action moves the cursor to the home position (upper left
corner). If only one parameter is supplied, the cursor moves to column 1 of the
specified line.
.RE

.sp
.ne 2
.mk
.na
.B Erase in Display (ED),
.ad
.br
.na
\fBESC[J\fR
.ad
.sp .6
.RS 4n
Takes no parameters.  Erases from the current cursor position inclusive to the
end of the screen, that is, to the end of the current line and all lines below
the current line.  The cursor position is unchanged.
.RE

.sp
.ne 2
.mk
.na
.B Erase in Line (EL),
.ad
.br
.na
\fBESC[K\fR
.ad
.sp .6
.RS 4n
Takes no parameters.  Erases from the current cursor position inclusive to the
end of the current line.  The cursor position is unchanged.
.RE

.sp
.ne 2
.mk
.na
.B Insert Line (IL),
.ad
.br
.na
\fBESC[#L\fR
.ad
.sp .6
.RS 4n
Takes one parameter,
.I n
(default 1).  Makes room for
.I n
new lines
starting at the current line by scrolling down by 
.I n
lines the portion of
the screen from the current line inclusive to the bottom.  The 
.I n
new
lines at the cursor are filled with spaces; the bottom 
.I n
lines shift off
the bottom of the screen and are lost.  The position of the cursor on the
screen is unchanged.
.RE

.sp
.ne 2
.mk
.na
.B Delete Line (DL),
.ad
.br
.na
\fBESC[#M\fR
.ad
.sp .6
.RS 4n
Takes one parameter, 
.I n
(default 1).  Deletes
.I n
lines beginning
with the current line. The portion of the screen from the current line
inclusive to the bottom is scrolled upward by 
.I n
lines.  The 
.I n
new
lines scrolling onto the bottom of the screen are filled with spaces; the
\fIn\fR old lines beginning at the cursor line are deleted.  The position of
the cursor on the screen is unchanged.
.RE

.sp
.ne 2
.mk
.na
.B Delete Character (DCH),
.ad
.br
.na
\fBESC[#P\fR
.ad
.sp .6
.RS 4n
Takes one parameter, 
.I n
(default 1).  Deletes 
.I n
characters
starting with the current cursor position.  Shifts the tail of the current line
to the left by 
.I n
character positions from the current cursor position,
inclusive, to the end of the line.  Blanks are shifted into the rightmost
\fIn\fR character positions.  The position of the cursor on the screen is
unchanged.
.RE

.sp
.ne 2
.mk
.na
.B Select Graphic Rendition (SGR),
.ad
.br
.na
\fBESC[#m\fR
.ad
.sp .6
.RS 4n
Takes one parameter, 
.I n
(default 0).  Note that unlike most escape
sequences, the parameter defaults to zero if omitted.  Invokes the graphic
rendition specified by the parameter.  All following printing characters in the
data stream are rendered according to the parameter until the next occurrence
of this escape sequence in the data stream. With PROM-based emulator, only two
graphic renditions are defined:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 5n
.rt
Normal rendition
.RE

.sp
.ne 2
.mk
.na
.B 7
.ad
.RS 5n
.rt
Negative (reverse) image
.RE

Negative image displays characters as white-on-black if the screen mode is
currently black-on white, and vice-versa. Any non-zero value of 
.I n
is
currently equivalent to 7 and selects the negative image rendition.
.sp
In addition to the two renditions mentioned above, the following\fI ISO
6429-1983\fR graphic rendition values support color text with kernel terminal
emulator:
.sp
.ne 2
.mk
.na
.B 30
.ad
.RS 6n
.rt
black foreground
.RE

.sp
.ne 2
.mk
.na
.B 31
.ad
.RS 6n
.rt
red foreground
.RE

.sp
.ne 2
.mk
.na
.B 32
.ad
.RS 6n
.rt
green foreground
.RE

.sp
.ne 2
.mk
.na
.B 33
.ad
.RS 6n
.rt
brown foreground
.RE

.sp
.ne 2
.mk
.na
.B 34
.ad
.RS 6n
.rt
blue foreground
.RE

.sp
.ne 2
.mk
.na
.B 35
.ad
.RS 6n
.rt
magenta foreground
.RE

.sp
.ne 2
.mk
.na
.B 36
.ad
.RS 6n
.rt
cyan foreground
.RE

.sp
.ne 2
.mk
.na
.B 37
.ad
.RS 6n
.rt
white foreground
.RE

.sp
.ne 2
.mk
.na
.B 40
.ad
.RS 6n
.rt
black background
.RE

.sp
.ne 2
.mk
.na
.B 41
.ad
.RS 6n
.rt
red background
.RE

.sp
.ne 2
.mk
.na
.B 42
.ad
.RS 6n
.rt
green background
.RE

.sp
.ne 2
.mk
.na
.B 43
.ad
.RS 6n
.rt
brown background
.RE

.sp
.ne 2
.mk
.na
.B 44
.ad
.RS 6n
.rt
blue background
.RE

.sp
.ne 2
.mk
.na
.B 45
.ad
.RS 6n
.rt
magenta background
.RE

.sp
.ne 2
.mk
.na
.B 46
.ad
.RS 6n
.rt
cyan background
.RE

.sp
.ne 2
.mk
.na
.B 47
.ad
.RS 6n
.rt
white background
.RE

.RE

.sp
.ne 2
.mk
.na
.B Black On White (SUNBOW),
.ad
.br
.na
\fBESC[p\fR
.ad
.sp .6
.RS 4n
Takes no parameters.  On SPARC, sets the screen mode to black-on-white.  If
the screen mode is already black-on-white, has no effect. In this mode, spaces
display as solid white, other characters as black-on-white. The cursor is a
solid black block. Characters displayed in negative image rendition (see
`Select Graphic Rendition' above) are white-on-black. This comprises the
initial setting of the screen mode on reset. On x86 systems, use
.B ESC[q
to
set black-on-white.
.RE

.sp
.ne 2
.mk
.na
.B White On Black (SUNWOB),
.ad
.br
.na
\fBESC[q\fR
.ad
.sp .6
.RS 4n
Takes no parameters.  On SPARC, sets the screen mode to white-on-black.  If
the screen mode is already white-on-black, has no effect. In this mode spaces
display as solid black, other characters as white-on-black.  The cursor is a
solid white block.  Characters displayed in negative image rendition (see
`Select Graphic Rendition' above) are black-on-white.  Initial setting of the
screen mode on reset is black on white. On x86 systems, use
.B ESC[p
to set
white-on-black.
.RE

.sp
.ne 2
.mk
.na
\fBESC[#r\fR
.ad
.br
.na
.B Set Scrolling (SUNSCRL)
.ad
.sp .6
.RS 4n
Takes one parameter, 
.I n
(default 0). Sets to 
.I n
an internal
register which determines how many lines the screen scrolls up when a line-feed
function is performed with the cursor on the bottom line.  A parameter of 2 or
3 introduces a small amount of jump when a scroll occurs.  A parameter of 34
clears the screen rather than scrolling.  The initial setting is 1 on reset.
.sp
A parameter of zero initiates wrap mode instead of scrolling.  If a linefeed
occurs on the bottom line during wrap mode, the cursor goes to the same
character position in the top line of the screen. When a line feed occurs, the
line that the cursor moves to is cleared and no scrolling occurs. \fBESC [ 1
r\fR exits back to scroll mode.
.sp
For more information, see the description of the Line-feed (\fBCTRL-J\fR)
control function above.
.RE

.sp
.ne 2
.mk
.na
\fBESC[s\fR
.ad
.br
.na
.B Reset terminal emulator (SUNRESET)
.ad
.sp .6
.RS 4n
Takes no parameters.  Resets all modes to default, restores current font from
\fBPROM.\fR Screen and cursor position are unchanged.
.RE

.SH RETURN VALUES
.sp
.LP
When there are no errors, the redirection ioctls have return values as
described above. Otherwise, they return  \fB\(mi1\fR and set
.B errno
to
indicate the error. If the target stream is in an error state,
.B errno
is
set accordingly.
.sp
.LP
If the
.I target
stream is in an error state,
.B errno
is set
accordingly.
.SH ERRORS
.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 10n
.rt
\fItarget\fR does not denote an open file.
.RE

.sp
.ne 2
.mk
.na
.B ENOSTR
.ad
.RS 10n
.rt
\fItarget\fR does not denote a \fBSTREAMS\fR device.
.RE

.SH FILES
.sp
.ne 2
.mk
.na
.B /dev/wscons
.ad
.RS 16n
.rt
Workstation console, accessed via the redirection facility
.RE

.sp
.ne 2
.mk
.na
.B /dev/systty
.ad
.RS 16n
.rt
Devices that must be opened for the
.B SRIOCSREDIR
and
.BR SRIOCISREDIR
ioctls. 
.RE

.sp
.ne 2
.mk
.na
.B /dev/syscon
.ad
.RS 16n
.rt
Access system console
.RE

.sp
.ne 2
.mk
.na
.B /dev/console
.ad
.RS 16n
.rt
Access system console
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStable
.TE

.SH SEE ALSO
.sp
.LP
.BR cvcd (1M),
.BR eeprom (1M),
.BR ioctl (2),
.BR poll (2),
.BR read (2),
.BR write (2),
.BR cvc (7D),
.BR console (7D),
.BR visual_io (7I)
.SH WARNINGS
.sp
.LP
The redirection ioctls block while there is I/O outstanding on the device
instance being redirected. If you try to redirect the workstation console while
there is a outstanding read, the workstation console will hang until the read
completes.
.SH NOTES
.sp
.LP
The
.B cvc
facility supersedes the SunOS
.B wscons
facility and should
not be used with
.BR wscons .
