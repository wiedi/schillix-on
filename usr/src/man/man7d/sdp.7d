'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH sdp 7D "13 Nov 2006" "SunOS 5.11" "Devices"
.SH NAME
sdp \- Sockets Direct Protocol driver
.SH SYNOPSIS
.LP
.nf
#include <socket.h>
.fi

.LP
.nf
#include <netinet/in.h>
.fi

.LP
.nf
\fBs = socket(AF_INET, SOCK_STREAM, PROTO_SDP);\fR
.fi

.LP
.nf
\fBs = socket(AF_INET6, SOCK_STREAM, PROTO_SDP);\fR
.fi

.SH DESCRIPTION
.sp
.LP
The Sockets Direct Protocol (\fBSDP\fR) is a transport protocol layered over
the \fIInfiniband Transport Framework\fR
.RB ( IBTF ).
.B SDP
is a standard
implementation based on Annex 4 of the \fIInfiniband Architecture Specification
Vol 1\fR and provides reliable byte-stream, flow controlled two-way data
transmission that closely mimics the Transmission Control Protocol
(\fBTCP\fR).
.sp
.LP
.B SDP
supports a sockets-based SOCK_STREAM interface to application
programs. It also supports graceful close (including half-closed sockets), IP
addressing (IPv4 or IPv6), the connecting/accepting connect model, out-of-band
(OOB) data and common socket options. The
.B SDP
protocol also supports
kernel bypass data transfers and data transfers from send-upper-layer-protocol
(ULP) buffers to receive ULP buffers. A
.B SDP
message includes a BSDH
header followed by data. (A BSDH header advertises the amount of available
buffers on the local side).
.sp
.LP
.B SDP
networking functionality is broken into the
.B sdp
driver and a
function call-based sockfs implementation. A new protocol family of PROTO_SDP
is introduced to use the
.B SDP
transport provided by the driver.
.sp
.LP
Sockets utilizing
.B SDP
are either active or passive. Active sockets
initiate connections to passive sockets. Both active and passive sockets must
have their local IP or IPv6 address and
.B SDP
port number bound with the
.BR bind (3SOCKET)
system call after the socket is created. By default,
.B SDP
sockets are active. A passive socket is created by calling the
.BR listen (3SOCKET)
system call after binding the socket with bind(). This
process establishes a queueing parameter for the passive socket. Connections to
the passive  socket can be received with the
.BR accept "(3SOCKET) system call."
Active sockets use the \fBconnect\fR(3SOCKET) call after binding to initiate
connections.
.sp
.LP
In most cases,
.B SDP
sends data when it is presented. When outstanding
data is not yet acknowledged,
.B SDP
gathers small amounts of output to be
sent in a single  packet once an acknowledgement is received. For a small
number of clients this packetization may cause significant delays. To
circumvent this problem,
.B SDP
provided by the driver supplies
SDP_NODELAY, a socket-level boolean option. Note that this behavior is similar
to the TCP_NODELAY option.
.sp
.LP
.B SDP
provides an urgent data mechanism that can be invoked using the
out-of-band provisions of  \fBsend\fR(3SOCKET). The out-of-band delivery
behavior is identical to TCP. The caller may mark one byte as "urgent" with the
MSG_OOB flag to \fBsend\fR(3SOCKET). This sets an "urgent pointer" pointing to
the byte in the
.B SDP
stream. The receiver of the stream is notified of the
urgent data by a
.B SIGURG
signal. The SIOCATMARK
.BR ioctl (2)
request
returns a value indicating whether the stream is at the urgent mark. Because
the system never returns data across the urgent  mark in a single
.BR read (2)
call, it is possible to advance to the urgent data in a simple loop which reads
data, testing  the  socket with the
.B SIOCATMARK
ioctl() request until it
reaches the mark.
.SH ADDRESS FORMATS
.sp
.LP
.B SDP
uses  IP/IPv6  addresses to refer to local and remote devices and
.RB "opens a reliable connected IB connection between two end points. The" " sdp"
driver supports a point-to-point connection, however broadcasting and
multicasting are not supported.
.SH SOCKET OPTIONS
.sp
.LP
.B SDP
supports setsockopt and getsockopt to set and read socket options.
Very few socket options affect
.B SDP
protocol operations. Other common
socket options are  processed but do not affect  SDP  protocol operation. All
socket options are checked for validity. A getsockopt returns the values set or
toggled by setsockopt. Socket options that affect protocol operations are
SO_LINGER, SO_DEBUG, SO_REUSEADDR and SO_OOBINLINE.
.SH ERRORS
.sp
.ne 2
.mk
.na
.B EISCONN
.ad
.RS 28n
.rt
A connect() operation was attempted on a socket on which a connect() operation
had already  been performed.
.RE

.sp
.ne 2
.mk
.na
.B ECONNRESET
.ad
.RS 28n
.rt
The remote peer forced the connection to be closed. This usually occurs when
the remote machine loses state information about the connection due to a
crash.
.RE

.sp
.ne 2
.mk
.na
.B ECONNREFUSED
.ad
.RS 28n
.rt
The remote peer actively refused connection establishment. This usually occurs
because no process is listening to the port.
.RE

.sp
.ne 2
.mk
.na
.B EADDRINUSE
.ad
.RS 28n
.rt
A bind() operation was attempted  on a socket with a network address/port pair
that has already been bound to another socket.
.RE

.sp
.ne 2
.mk
.na
.B EADDRNOTAVAIL
.ad
.RS 28n
.rt
A bind() operation was attempted on a socket with a network address for which
no network interface exists.
.RE

.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 28n
.rt
A bind() operation was attempted with  a reserved port number and the
effective user ID of the process was not the privileged user.
.RE

.sp
.ne 2
.mk
.na
.B ENOBUFS
.ad
.RS 28n
.rt
The system ran out of memory for internal data structures.
.RE

.SH FILES
.sp
.ne 2
.mk
.na
.B /kernel/drv/sdp
.ad
.sp .6
.RS 4n
32-bit
.B ELF
kernel module (x86).
.RE

.sp
.ne 2
.mk
.na
.B /kernel/drv/amd64/sdp
.ad
.sp .6
.RS 4n
64-bit
.B ELF
kernel module (x86).
.RE

.sp
.ne 2
.mk
.na
.B /kernel/drv/sparcv9/sdp
.ad
.sp .6
.RS 4n
64-bit
.B ELF
kernel module (SPARC).
.RE

.sp
.ne 2
.mk
.na
.B /kernel/drv/sdpib
.ad
.sp .6
.RS 4n
32-bit
.B ELF
kernel module (x86).
.RE

.sp
.ne 2
.mk
.na
.B /kernel/drv/amd64/sdpib
.ad
.sp .6
.RS 4n
64-bit
.B ELF
kernel module (x86).
.RE

.sp
.ne 2
.mk
.na
.B /kernel/drv/sparcv9/sdpib
.ad
.sp .6
.RS 4n
64-bit
.B ELF
kernel module (SPARC).
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attribute:
.sp

.sp
.TS
tab() box;
cw(2.38i) |cw(3.12i)
lw(2.38i) |lw(3.12i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Architecturex86, SPARC
_
AvailabilitySUNWibsdp, SUNWibsdp
.TE

.SH SEE ALSO
.sp
.LP
.BR read (2),
.BR getsockopt (3XNET),
.BR socket.h (3HEAD),
.BR accept (3SOCKET),
.BR bind (3SOCKET),
.BR connect (3SOCKET),
.BR send (3SOCKET),
.BR attributes (5),
.BR standards (5)
.sp
.LP
.I "Infiniband Architecture Specification Vol 1- Annex 4
\(em November,
2002
