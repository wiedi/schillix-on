'\" te
.\" Copyright (c) 2007 Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH poll 7d "28 Mar 2007" "SunOS 5.11" "Devices"
.SH NAME
poll \- driver for fast poll on many file descriptors
.SH SYNOPSIS
.LP
.nf
\fB#include <sys/devpoll.h>
int fd = open("/dev/poll", O_RDWR);
ssize_t n = write(int fd, struct pollfd buf[], int bufsize);
int n = ioctl(int fd, DP_POLL, struct dvpoll* arg);
int n = ioctl(int fd, DP_ISPOLLED, struct pollfd* pfd);\fR
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I fd
.ad
.RS 12n
.rt
Open file descriptor that refers to the
.B /dev/poll
driver.
.RE

.sp
.ne 2
.mk
.na
.I path
.ad
.RS 12n
.rt
.B /dev/poll
.RE

.sp
.ne 2
.mk
.na
.I buf
.ad
.RS 12n
.rt
Array of
.B pollfd
structures.
.RE

.sp
.ne 2
.mk
.na
.I bufsize
.ad
.RS 12n
.rt
Size of
.I buf
in bytes.
.RE

.sp
.ne 2
.mk
.na
.I arg
.ad
.RS 12n
.rt
Pointer to
.B pollcall
structure.
.RE

.sp
.ne 2
.mk
.na
.I pfd
.ad
.RS 12n
.rt
Pointer to
.B pollfd
structure.
.RE

.SH DESCRIPTION
.LP
Note -
.sp
.RS 2
The
.B /dev/poll
device, associated driver and corresponding manpages
may be removed in a future Solaris release. For similar functionality in the
event ports framework, see
.BR port_create (3C).
.RE
.sp
.LP
The
.B /dev/poll
driver is a special driver that enables you to monitor
multiple sets  of polled file descriptors. By using the  \fB/dev/poll\fR
driver, you can efficiently poll large numbers of file descriptors. Access
to the
.B /dev/poll
driver is provided through
.BR open (2),
.BR write (2),
and
.B ioctl(2)
system calls.
.sp
.LP
Writing an array of
.B pollfd
struct to the
.B /dev/poll
driver has
the effect of  adding these file descriptors to the monitored
.BR poll
file descriptor set  represented by the
.IR fd .
To monitor multiple file
descriptor sets, open the
.B /dev/poll
driver multiple times. Each
.B fd
corresponds to one set. For each
.B pollfd
struct entry (defined
in
.BR sys/poll.h ):
.sp
.in +2
.nf
 struct pollfd {
    int  fd;
    short events;
    short revents;
 }
.fi
.in -2

.sp
.LP
The
.B fd
field specifies the file descriptor being polled. The
.B events
field indicates the interested
.B "poll events"
on the
file descriptor. If a \fBpollfd\fR array contains multiple \fBpollfd\fR
entries with the same \fBfd\fR field, the "events" field in each
.B pollfd
entry is OR'ed. A special
.B POLLREMOVE
event in the
.B events
field of the \fBpollfd\fR structure removes the \fBfd\fR from
the monitored set. The
.B revents
field is not used. Write returns the
number of bytes written successfully or
.B -1
when write fails.
.sp
.LP
The
.B DP_POLL
ioctl is used to retrieve returned
.BR poll
.B events
occured on the  polled file descriptors in the monitored set
represented by
.IR fd .
.I "arg is"
.I a
pointer to the devpoll
structures which are defined as follows:
.sp
.in +2
.nf
 struct dvpoll {
     struct pollfd* dp_fds;
     int dp_nfds;
     int dp_timeout;
 }
.fi
.in -2

.sp
.LP
The
.B dp_fds
points to a buffer that holds an array of returned
.B pollfd
structures. The
.B dp_nfds
field specifies the size of the
buffer in terms of the  number of
.B pollfd
entries it contains. The
.B dp_nfds
field also indicates the maximum number of file descriptors
from which poll information can be obtained. If there is no interested
.B events
on any of the polled file descriptors, the
.B DP_POLL
ioctl
call will wait
.B dp_timeout
milliseconds before returning. If
.B dp_timeout
is
.BR 0 ,
the ioctl call returns immediately. If
.B dp_timeout
is
.BR -1 ,
the call blocks until an interested
.BR poll
.B events
is available or the call is interrupted. Upon return, if the
ioctl call has failed,
.B -1
is returned. The memory content pointed by
.B dp_fds
is not modified. A return value
.B 0
means the ioctl is
timed out. In this case, the memory content pointed by
.B dp_fds
is not
modified. If the call is successful, it returns the number of valid
.B pollfd
entries in  the array pointed by
.BR dp_fds ;
the contents of
the rest of the buffer is undefined. For each valid
.B pollfd
entry, the
.B fd
field indicates the file desciptor on which the polled
.BR events
happened. The
.B events
field is the user specified
.BR poll
.BR events .
The
.B revents
field contains the
.B events
occurred.
.B -1
is returned if the  call fails.
.sp
.LP
.B DP_ISPOLLED
ioctl allows you to query if a file descriptor is already
in the  monitored set represented by
.BR fd .
The
.B fd
field of the
.B pollfd
structure indicates the file descriptor of interest. The
.B DP_ISPOLLED
ioctl returns
.B 1
if the file descriptor is in the
set. The
.B events
field contains
.BR 0 .
The
.B revents
field
contains the currently polled
.BR events .
The ioctl returns
.B 0
if
the file descriptor is not in the set. The
.B pollfd
structure pointed
by \fIpfd\fR is not modified. The ioctl returns a  \fB-1\fR if the call
fails.
.SH EXAMPLES
.sp
.LP
The following example shows how
.B /dev/poll
may be used.
.sp
.in +2
.nf
{
        ...
        /*
         * open the driver
         */
        if ((wfd = open("/dev/poll", O_RDWR)) < 0) {
                exit(-1);
        }
        pollfd = (struct pollfd* )malloc(sizeof(struct pollfd) * MAXBUF);
        if (pollfd == NULL) {
                close(wfd);
                exit(-1);
        }
        /*
         * initialize buffer
         */
        for (i = 0; i < MAXBUF; i++) {
                pollfd[i].fd = fds[i];
                pollfd[i].events = POLLIN;
                pollfd[i].revents = 0;
        }
        if (write(wfd, &pollfd[0], sizeof(struct pollfd) * MAXBUF) !=
                        sizeof(struct pollfd) * MAXBUF) {
                perror("failed to write all pollfds");
                close (wfd);
                free(pollfd);
                exit(-1);
        }
        /*
         * read from the devpoll driver
         */
        dopoll.dp_timeout = -1;
        dopoll.dp_nfds = MAXBUF;
        dopoll.dp_fds = pollfd;
        result = ioctl(wfd, DP_POLL, &dopoll);
        if (result < 0) {
                perror("/dev/poll ioctl DP_POLL failed");
                close (wfd);
                free(pollfd);
                exit(-1);
        }
        for (i = 0; i < result; i++) {
                read(dopoll.dp_fds[i].fd, rbuf, STRLEN);
        }
 ...
}
.fi
.in -2

.sp
.LP
The following example is part of a test program which shows how
.B DP_ISPOLLED()
ioctl may be used.
.sp
.in +2
.nf
{
	...

        loopcnt = 0;
        while (loopcnt < ITERATION) {
                rn = random();
                rn %= RANGE;
                if (write(fds[rn], TESTSTRING, strlen(TESTSTRING)) !=
                                strlen(TESTSTRING)) {
                        perror("write to fifo failed.");
                        close (wfd);
                        free(pollfd);
                        error = 1;
                        goto out1;
                }
                dpfd.fd = fds[rn];
                dpfd.events = 0;
                dpfd.revents = 0;
                result = ioctl(wfd, DP_ISPOLLED, &dpfd);
                if (result < 0) {
                        perror("/dev/poll ioctl DP_ISPOLLED failed");
                        printf("errno = %d\en", errno);
                        close (wfd);
                        free(pollfd);
                        error = 1;
                        goto out1;
                }
                if (result != 1) {
                        printf("DP_ISPOLLED returned incorrect result: %d.\en",
                                result);
                        close (wfd);
                        free(pollfd);
                        error = 1;
                        goto out1;
                }
                if (dpfd.fd != fds[rn]) {
                        printf("DP_ISPOLLED returned wrong fd %d, expect %d\en",
                                dpfd.fd, fds[rn]);
                        close (wfd);
                        free(pollfd);
                        error = 1;
                        goto out1;
 }
                if (dpfd.revents != POLLIN) {
                        printf("DP_ISPOLLED returned unexpected revents %d\en",
                                dpfd.revents);
                        close (wfd);
                        free(pollfd);
                        error = 1;
                        goto out1;
                }
                if (read(dpfd.fd, rbuf, strlen(TESTSTRING)) !=
                                strlen(TESTSTRING)) {
                        perror("read from fifo failed");
                        close (wfd);
                        free(pollfd);
                        error = 1;
                        goto out1;
                }
                loopcnt++;
        }

.fi
.in -2

.SH ERRORS
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 11n
.rt
A process does not have permission to access the content cached in
.BR /dev/poll .
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 11n
.rt
A signal was caught during the execution of the
.BR ioctl (2)
function.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 11n
.rt
The request argument requires a data transfer to or from a buffer pointed
to by
.IR arg ,
but
.I arg
points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 11n
.rt
The request or
.I arg
parameter is not valid for  this device, or field
of the dvpoll struct pointed by
.I arg
is not valid  (for example, when
using write/pwrite dp_nfds is greater than {OPEN_MAX}, or when using the
DPPOLL ioctl dp_nfds is greater than or equal to {OPEN_MAX}}.
.RE

.sp
.ne 2
.mk
.na
.B ENXIO
.ad
.RS 11n
.rt
The
.B O_NONBLOCK
flag is set, the named file is a FIFO, the
.B O_WRONLY
flag is set, and no process has the file open for reading; or
the named file is a character special or block special file and the device
associated with this special file does not exist.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
lw(2.75i) lw(2.75i)
lw(2.75i) lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
ArchitectureSPARC, x86
AvailabilitySUNWcar ( Solaris)
SUNWcsr, SUNWcsu (Solaris on x86)
SUNWhea (header files)
Interface StabilityObsolete
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR open (2),
.BR poll (2),
.BR write (2),
.BR attributes (5)
.SH NOTES
.sp
.LP
The
.B /dev/poll
API is particularly beneficial to applications that
poll a large number of file descriptors repeatedly.  Applications will
exhibit the best performance gain if the polled file descriptor list rarely
change.
.sp
.LP
When using the
.B /dev/poll
driver, you should remove a closed file
descriptor from a monitored poll set. Failure to do so may result in a
.B POLLNVAL revents
being returned for the closed file descriptor.
When a file descriptor is closed but not removed from the monitored set, and
is reused in subsequent open of a different device, you will be polling the
device associated with the reused file descriptor. In a multithreaded
application, careful coordination among threads doing close and
.B DP_POLL
ioctl is recommended for consistent results.
.sp
.LP
The
.B /dev/poll
driver caches a list of polled file descriptors, which
are specific to a process. Therefore, the
.B /dev/poll
file descriptor
of a process will be inherited by its child process, just like any other
file descriptors. But the child process will have very limited access
through this inherited
.B /dev/poll
file descriptor. Any attempt to write
or do ioctl by the child process will result in an
.B EACCES
error. The
child process should close the inherited
.B /dev/poll
file descriptor
and open its own if desired.
.sp
.LP
The
.B /dev/poll
driver does not yet support polling. Polling on a
.B /dev/poll
file descriptor will result in
.B POLLERR
being returned
in the
.B revents
field of
.B pollfd
structure.
