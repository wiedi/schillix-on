'\" te
.\" Copyright (c) 2001 Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH pm 7D "20 Sep 1999" "SunOS 5.11" "Devices"
.SH NAME
pm \- Power Management driver
.SH SYNOPSIS
.LP
.nf
\fB/dev/pm\fR
.fi

.SH DESCRIPTION
.sp
.LP
The Power Management (
.BR pm )
driver provides an interface for
applications to configure devices within the system for Power Management. The
interface is provided through
.BR ioctl (2)
commands. The
.B pm
driver
may be accessed using
.BR /dev/pm .
.SS "Power Management Framework"
.sp
.LP
The Power Management framework model allows the system to be viewed as a
collection of devices. Each device is a collection of components that
comprise the smallest power manageable units. The device driver controls the
definition of a device's power manageable components.
.sp
.LP
A component can either be
.B busy
or
.B idle
at the current power
level. Normally, the Power Management framework takes an
.B idle
component
to the next lower power level. The Power Management framework uses two
factors to determine this transition: the component must have been idle for
at least the threshold time, and the device to which the component belongs
must satisfy any dependency requirements. A dependency occurs when a device
requires another device to be power managed before it can be power managed.
Dependencies occur on a per device basis: when a dependency exists, no
components of a device may be managed unless all the devices it depends upon
are first power managed.
.sp
.LP
Using the commands below, an application may take control of the Power
Management of a device from the Power Management framework driver and manage
the transition of device power levels directly.
.sp
.LP
For this set of ioctl commands,
.I arg
(see
.BR ioctl (2))
points to a
structure of type
.B pm_req
defined in <\fBsys/pm.h\fR>:
.sp
.in +2
.nf
typedef struct pm_req {
         char *physpath;     /* physical path of device  */
                             /* to configure. See libdevinfo(3LIB) */
         int  component;     /* device component   */
         int  value;         /* power level, threshold value, or count */
         void *data;         /* command-dependent variable-sized data */
         size_t  datasize;   /* size of data buffer */
     } pm_req_t;
.fi
.in -2

.sp
.LP
The fields should contain the following data:
.sp
.ne 2
.mk
.na
.I physpath
.ad
.RS 13n
.rt
Pointer to the physical path of a device. See \fBlibdevinfo\fR(3LIB). For
example, for the device
.B /devices/pseudo/pm@0:pm
the
.IR physpath
value would be
.BR /pseudo/pm@0 .
.RE

.sp
.ne 2
.mk
.na
.I component
.ad
.RS 13n
.rt
Non-negative integer specifying which component is being configured. The
numbering starts at zero.
.RE

.sp
.ne 2
.mk
.na
.I value
.ad
.RS 13n
.rt
Non-negative integer specifying the threshold value in seconds or the
desired power level, or the number of levels being specified.
.RE

.sp
.ne 2
.mk
.na
.I data
.ad
.RS 13n
.rt
Pointer to a buffer which contains or receives variable-sized data, such as
the name of a device upon which this device has a dependency.
.RE

.sp
.ne 2
.mk
.na
.I size
.ad
.RS 13n
.rt
Size of the data buffer.
.RE

.sp
.LP
Not all fields are used in each command.
.sp
.ne 2
.mk
.na
.B PM_DIRECT_PM
.ad
.sp .6
.RS 4n
The device named by
.I physpath
is disabled from being power managed by
the framework. The caller will power manage the device directly using the
.BR PM_DIRECT_NOTIFY ,
\fBPM_GET_TIME_IDLE\fR and
.BR PM_GET_CURRENT_POWER ,
\fBPM_GET_FULL_POWER\fR and
\fBPM_SET_CURRENT_POWER\fR commands. If the device needs to have its power
level changed either because its driver calls
.BR pm_raise_power (9F),
.BR pm_lower_power (9F),
or
.BR pm_power_has_changed "(9F) or because the"
device is the parent of another device that is changing power level or a
device that this device depends on is changing power level, then the power
level change of the device will be blocked and the caller will be notified as
described below for the
.B PM_DIRECT_NOTIFY
command.
.sp
Error codes:
.sp
.ne 2
.mk
.na
.B EBUSY
.ad
.RS 9n
.rt
Device already disabled for Power Management by framework.
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 9n
.rt
Caller is neither superuser nor effective group ID of 0.
.RE

.RE

.sp
.ne 2
.mk
.na
.B PM_RELEASE_DIRECT_PM
.ad
.sp .6
.RS 4n
The device named by
.I physpath
(which must have been the target of a
\fBPM_DIRECT_PM\fR command) is re-enabled for Power Management by the
framework. 
.sp
Error codes:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
Device component out of range.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBPM_DIRECT_NOTIFY \fBPM_DIRECT_NOTIFY_WAIT\fR
.ad
.sp .6
.RS 4n
These commands allow the process that is directly power managing a device to
be notified of events that could change the power level of the device. When
such an event occurs, this command returns information about the event.
.sp
 \fIarg\fR (see
.BR ioctl (2))
points to a structure of type
.B pm_state_change
defined in
.BR <sys/pm.h> :
.sp
.in +2
.nf
typedef struct  pm_state_change {
   char   *physpath;    /* device which has changed state */
   int     component;   /* which component changed state */
#if defined(_BIG_ENDIAN)
	ushort_t flags;      /* PSC_EVENT_LOST, PSC_ALL_LOWEST */
	ushort_t event;      /* type of event */
#else
	ushort_t event;      /* type of event *
	ushort_t flags;      /* PSC_EVENT_LOST, PSC_ALL_LOWEST */
#endif
	time_t  timestamp;   /* time of state change */+
	int     old_level;    /* power level changing from */
	int    new_level;   /* power level changing to */
	size_t  size;        /* size of buffer physpath points to */
} pm_state_change_t;
.fi
.in -2

When an event occurs, the struct pointed to by
.I arg
is filled in. If
the event type is
.BR PSC_PENDING_CHANGE ,
then the information in the rest
of the struct describes an action that the framework would have taken if the
device were not directly power managed by the caller. The caller is
responsible for completing the indicated level changes using
\fBPM_SET_CURRENT_POWER\fR below.
.sp
An event type of
.B PSC_HAS_CHANGED
indicates that the driver for the
directly power managed device has called
.BR pm_power_has_changed "(9F) due"
to the device changing power on its own. It is provided to allow the caller
to track the power state of the device.
.sp
The system keeps events in a circular buffer. If the buffer overflow, the
oldest events are lost and when the event that next follows a lost event is
retrieved it will have PSC_EVENT_LOST set in flags.
.sp
\fBPM_DIRECT_NOTIFY\fR returns \fBEWOULDBLOCK\fR if no event is pending, and
\fBPM_DIRECT_NOTIFY_WAIT\fR blocks until an event is available.
.sp
\fBpm\fR also supports the
.BR poll (2)
interface. When an event is pending
a
.BR poll (2)
call that includes a file descriptor for
.B /dev/pm
and
that has
.B POLLIN
or
.B POLLRDNORM
set in its event mask will
return.
.RE

.sp
.ne 2
.mk
.na
.B PM_SET_CURRENT_POWER
.ad
.sp .6
.RS 4n
Component
.I component
of the device named by
.I physpath
(which must
contain the physical path of a device against which the process has issued a
\fBPM_DIRECT_PM\fR command) is set to power level \fIvalue.\fR If all
components of the device named by
.I physpath
.RI "were at level 0," " value"
is non-zero and some device has a dependency on this device, then all
components of that device will be brought to full power before this command
returns. Similarly, if the parent of the target device is powered off, then
it will be brought up as needed before this command returns. When
PM_SET_CURRENT_POWER is issued against a device, the resulting power change
is included in the event list for PM_DIRECT_NOTIFY.
.sp
Error codes:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
Device component out of range, or power level < 0.
.RE

.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 10n
.rt
Failed to power device or its ancestors or the devices on which this device
has dependency or their ancestors. Note that this may not indicate a failure,
the device driver may have rejected the command as inappropriate because the
component has become busy.
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 10n
.rt
Caller has not previously issued a successful
.B PM_DIRECT_PM
command
against this device.
.RE

.RE

.sp
.ne 2
.mk
.na
.B PM_GET_FULL_POWER
.ad
.sp .6
.RS 4n
The highest supported power level of component
.I component
of the device
named by
.I physpath
is returned.
.RE

.sp
.ne 2
.mk
.na
.B PM_GET_CURRENT_POWER
.ad
.sp .6
.RS 4n
The current power level of component
.I component
of the device named by
\fIphyspath\fR is returned.
.sp
Error codes:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
Device component power level is not currently known.
.RE

.RE

.sp
.ne 2
.mk
.na
.B PM_GET_TIME_IDLE
.ad
.sp .6
.RS 4n
\fBPM_GET_TIME_IDLE\fR returns the number of seconds that component
\fIcomponent\fR of the device named by \fIphyspath\fR has been idle. If the
device is not idle, then
.B 0
is returned.
.sp
Note that because the state of the device may change between the time the
process issues the
.B PM_GET_TIME_IDLE
command and the time the process
issues a
.B PM_SET_CURRENT_POWER
command to reduce the power level of an
idle component, the process must be prepared to deal with a
\fBPM_SET_CURRENT_POWER\fR command returning failure because the driver has
rejected the command as inappropriate because the device component has become
busy. This can be differentiated from other types of failures by issuing the
\fBPM_GET_TIME_IDLE\fR command again to see if the component has become
busy.
.RE

.SH ERRORS
.sp
.LP
Upon error, the commands will return \fB\(mi1\fR, and set
.IR errno .
In
addition to the error codes listed above by command, the following error
codes are common to all commands:
.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
 Bad address passed in as argument.
.RE

.sp
.ne 2
.mk
.na
.B ENODEV
.ad
.RS 10n
.rt
 Device is not power manageable, or device is not configured.
.RE

.sp
.ne 2
.mk
.na
.B ENXIO
.ad
.RS 10n
.rt
 Too many opens attempted.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface stabilityUnstable
.TE

.SH SEE ALSO
.sp
.LP
\fBpmconfig\fR(1M), \fBIntro\fR(2),
.BR ioctl (2),
\fBlibdevinfo\fR(3LIB),
\fBpower.conf\fR(4),
.BR attributes (5),
.BR attach (9E),
.BR detach (9E),
.BR power (9E),
.BR pm_busy_component (9F),
.BR pm_idle_component (9F),
.BR pm_lower_power (9F),
.BR pm_power_has_changed (9F),
.BR pm_raise_power (9F)
.sp
.LP
.I Writing Device Drivers
