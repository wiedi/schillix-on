'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH dmd 7D "17 Nov 2008" "SunOS 5.11" "Devices"
.SH NAME
dmd \- Driver for MMS drive managers
.SH SYNOPSIS
.LP
.nf
/devices/pseudo/dmd@0:watcher
.fi

.LP
.nf
/devices/pseudo/dmd@0:ndrm
.fi

.LP
.nf
/devices/pseudo/dmd@0:stat
.fi

.SH DESCRIPTION
.sp
.LP
The Media Management System (\fBMMS\fR) is a distributed removable media
management system based on the
.I "IEEE 1244"
Media Management System
specification. MMS provides a uniform, consistent tape interface to client
applications.
.sp
.LP
Drives managed by MMS have a drive manager on each host that processes
tapes and accesses the drive. The drive manager provides device-specific
operations and label processing. (Note: only
.B ANSI
labels are currently
supported.) The handle returned by the MMS MMP mount command belongs to the
drive manager driver
.RB ( dmd ).
When
.B dmd
receives an open or close
system call, it passes it to the drive manager for processing. The drive
manager then validates the file according to the file disposition flags.
Note that only O_RDONLY, O_WRONLY and O_RDWR flags are used in validation.
If O_APPEND is specified, the drive manager positions the file as if append
is specified in the mount command and the record format and blocksize are
set.
.SH IOCTLS
.sp
.LP
The Device Manager driver supports the MTIOCTOP, MTREW, MTRETEN, MTFSF,
MTFSR, MTBSF, MTBSR, MTWEOF, MTEOM, MTSRSZ, MTGRSZ, MTIOCGET and MTIOCLRERR
driver ioctls. In addition, MMS provides the ioctls shown below for the
device manager driver. (Note that MMS_LOCATE is supported in both mms and
raw modes and MMS_LOCATE is supported only in mms mode).
.sp
.in +2
.nf
MMS_BLK_LIMIT - returns the block limit of a drive.
                arg:

        typedef struct  mms_blk_limit {
                uint64_t        mms_max;        /* Max blocksize */
                uint32_t        mms_min;        /* Min blocksize */
                uint32_t        mms_gran;       /* granularity */
        }       mms_blk_limit_t;

  MMS_GET_POS - gets the current position.
                arg:

        typedef struct  mms_pos {
                uint32_t        mms_type;       /* LBN or non LBN) */
                uint64_t        mms_pos;
        }       mms_pos_t;

        /* Value of mms_pos_type */
        #define MMS_LBYTEN              1       /* logical byte */
        #define MMS_LBLKN               2       /* logical block */

  MMS_LOCATE -  locate to a specific location.
                arg: arg must be a mms_pos_t obtained from a
                previous MMS_GET_POS.

  MMS_GET_CAPACITY - returns the tape's capacity.
                      arg:
        typedef struct mms_capacity {
                /*
                 * Capacity is in megabytes (1048576)
                 */
                uint64_t        mms_max;        /* cartridge capacity */
                uint64_t        mms_avail;      /* amount available */
                                                        /* from EOD */
                uint32_t        mms_pc_avail;   /* percent available */
        }       mms_capacity_t;

  MMS_SET_DENSITY - sets the tape's density.
                    arg:
        typedef struct  mms_density {
                uint32_t        mms_den;
        }       mms_density_t;

  MMS_GET_DENSITY - gets the current tape density.
                    arg:
        typedef struct  mms_density {
                uint32_t        mms_den;
        }       mms_density_t;

  MMS_INQUIRY - gets inquiry data of drive.
                arg:
        typedef struct  mms_inquiry     {
                uchar_t         mms_inq[64];
        }       mms_inquiry_t;


Status of dmd

MMS uses the MTIOCGET ioctl to report status.
The status code in mt_dsreg is defined as follows:

        /usr/include/sys/scsi/generic/status.h

        #define STATUS_MASK                     0x3E
        #define STATUS_GOOD                     0x00
        #define STATUS_CHECK                    0x02
        #define STATUS_MET                      0x04
        #define STATUS_BUSY                     0x08
        #define STATUS_INTERMEDIATE             0x10
        #define STATUS_SCSI2                    0x20
        #define STATUS_INTERMEDIATE_MET         0x14
        #define STATUS_RESERVATION_CONFLICT     0x18
        #define STATUS_TERMINATED               0x22
        #define STATUS_QFULL                    0x28
        #define STATUS_ACA_ACTIVE               0x30

The error code in mt_erreg are defined
as follows:

        /usr/include/sys/scsi/generic/sense.h

        /*
         * Sense Key values for Extended Sense.
         */

        #define KEY_NO_SENSE            0x00
        #define KEY_RECOVERABLE_ERROR   0x01
        #define KEY_NOT_READY           0x02
        #define KEY_MEDIUM_ERROR        0x03
        #define KEY_HARDWARE_ERROR      0x04
        #define KEY_ILLEGAL_REQUEST     0x05
        #define KEY_UNIT_ATTENTION      0x06
        #define KEY_WRITE_PROTECT       0x07
        #define KEY_DATA_PROTECT        KEY_WRITE_PROTECT
        #define KEY_BLANK_CHECK         0x08
        #define KEY_VENDOR_UNIQUE       0x09
        #define KEY_COPY_ABORTED        0x0A
        #define KEY_ABORTED_COMMAND     0x0B
        #define KEY_EQUAL               0x0C
        #define KEY_VOLUME_OVERFLOW     0x0D
        #define KEY_MISCOMPARE          0x0E
        #define KEY_RESERVED            0x0F


 /usr/include/sys/scsi/impl/sense.h:
        /* Status returned by driver */
        #define SUN_KEY_FATAL           0x10    /* handshake failure */
        #define SUN_KEY_TIMEOUT         0x11    /* command timeout */
        #define SUN_KEY_EOF             0x12    /* eof hit */
        #define SUN_KEY_EOT             0x13    /* eot hit */
        #define SUN_KEY_LENGTH          0x14    /* length error */
        #define SUN_KEY_BOT             0x15    /* bot hit */
        #define SUN_KEY_WRONGMEDIA      0x16    /* wrong tape media */
        #define NUM_IMPL_SENSE_KEYS     7       /* seven extra keys */


In MMS mode, the following values may be in mt_erreg when using
mms mode. They are defined in mms.h

        #define MMS_KEY_BOF     0xe0    /* beginning of file. */
        #define MMS_KEY_EOF     0xe1    /* end of file. */
.fi
.in -2

.SH FILES
.sp
.ne 2
.mk
.na
.B /kernel/drv/dmd
.ad
.RS 27n
.rt
32-bit kernel module (x86)
.RE

.sp
.ne 2
.mk
.na
.B /kernel/drv/sparcv9/dmd
.ad
.RS 27n
.rt
64-bit kernel module (SPARC)
.RE

.sp
.ne 2
.mk
.na
.B /kernel/drv/amd64/dmd
.ad
.RS 27n
.rt
64-bit kernel module (x86)
.RE

.sp
.ne 2
.mk
.na
.B /kernel/drv/dmd.conf
.ad
.RS 27n
.rt
Configuration file
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(0i) |cw(5.5i)
lw(0i) |lw(5.5i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
ArchitectureSPARC, x86
_
Availability SUNWmmsr
_
Interface StabilityUncommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR mt (1),
.BR mmsadm (1M),
.BR attributes (5),
.BR dda (7D),
.BR st (7D),
.BR mtio (7I)
.sp
.LP
.I "IEEE 1244 Removable Media Standards Specification
\(em IEEE, 2000
