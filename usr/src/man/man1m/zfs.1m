'\" te
.\" Copyright (c) 2009 Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH zfs 1M "24 Sep 2009" "SunOS 5.11" "System Administration Commands"
.SH NAME
zfs \- configures ZFS file systems
.SH SYNOPSIS
.LP
.nf
\fBzfs\fR [\fB-?\fR]
.fi

.LP
.nf
\fBzfs\fR \fBcreate\fR [\fB-p\fR] [\fB-o\fR \fIproperty\fR=\fIvalue\fR] .\|.\|. \fIfilesystem\fR
.fi

.LP
.nf
\fBzfs\fR \fBcreate\fR [\fB-ps\fR] [\fB-b\fR \fIblocksize\fR] [\fB-o\fR \fIproperty\fR=\fIvalue\fR] .\|.\|. \fB-V\fR \fIsize\fR \fIvolume\fR
.fi

.LP
.nf
\fBzfs\fR \fBdestroy\fR [\fB-rRf\fR] \fIfilesystem\fR|\fIvolume\fR
.fi

.LP
.nf
\fBzfs\fR \fBdestroy\fR [\fB-rRd\fR] \fIsnapshot\fR
.fi

.LP
.nf
\fBzfs\fR \fBsnapshot\fR [\fB-r\fR] [\fB-o\fR \fIproperty\fR=\fIvalue\fR].\|.\|.
      \fIfilesystem@snapname\fR|\fIvolume@snapname\fR
.fi

.LP
.nf
\fBzfs\fR \fBrollback\fR [\fB-rRf\fR] \fIsnapshot\fR
.fi

.LP
.nf
\fBzfs\fR \fBclone\fR [\fB-p\fR] [\fB-o\fR \fIproperty\fR=\fIvalue\fR] .\|.\|. \fIsnapshot\fR \fIfilesystem\fR|\fIvolume\fR
.fi

.LP
.nf
\fBzfs\fR \fBpromote\fR \fIclone-filesystem\fR
.fi

.LP
.nf
\fBzfs\fR \fBrename\fR \fIfilesystem\fR|\fIvolume\fR|\fIsnapshot\fR
     \fIfilesystem\fR|\fIvolume\fR|\fIsnapshot\fR
.fi

.LP
.nf
\fBzfs\fR \fBrename\fR [\fB-p\fR] \fIfilesystem\fR|\fIvolume\fR \fIfilesystem\fR|\fIvolume\fR
.fi

.LP
.nf
\fBzfs\fR \fBrename\fR \fB-r\fR \fIsnapshot\fR \fIsnapshot\fR
.fi

.LP
.nf
\fBzfs\fR \fBlist\fR [\fB-r\fR|\fB-d\fR \fIdepth\fR][\fB-H\fR][\fB-o\fR \fIproperty\fR[,.\|.\|.]] [\fB-t\fR \fItype\fR[,.\|.\|.]]
     [\fB-s\fR \fIproperty\fR] .\|.\|. [\fB-S\fR \fIproperty\fR] .\|.\|. [\fIfilesystem\fR|\fIvolume\fR|\fIsnapshot\fR] .\|.\|.
.fi

.LP
.nf
\fBzfs\fR \fBset\fR \fIproperty\fR=\fIvalue\fR \fIfilesystem\fR|\fIvolume\fR|\fIsnapshot\fR .\|.\|.
.fi

.LP
.nf
\fBzfs\fR \fBget\fR [\fB-r\fR|\fB-d\fR \fIdepth\fR][\fB-Hp\fR][\fB-o\fR \fIfield\fR[,.\|.\|.]] [\fB-s\fR \fIsource\fR[,.\|.\|.]]
     "\fIall\fR" | \fIproperty\fR[,.\|.\|.] \fIfilesystem\fR|\fIvolume\fR|\fIsnapshot\fR .\|.\|.
.fi

.LP
.nf
\fBzfs\fR \fBinherit\fR [\fB-r\fR] \fIproperty\fR \fIfilesystem\fR|\fIvolume|snapshot\fR .\|.\|.
.fi

.LP
.nf
\fBzfs\fR \fBupgrade\fR [\fB-v\fR]
.fi

.LP
.nf
\fBzfs\fR \fBupgrade\fR [\fB-r\fR] [\fB-V\fR \fIversion\fR] \fB-a\fR | \fIfilesystem\fR
.fi

.LP
.nf
\fBzfs\fR \fBuserspace\fR [\fB-niHp\fR] [\fB-o\fR \fIfield\fR[,.\|.\|.]] [\fB-sS\fR \fIfield\fR] .\|.\|.
     [\fB-t\fR \fItype\fR [,.\|.\|.]] \fIfilesystem\fR|\fIsnapshot\fR
.fi

.LP
.nf
\fBzfs\fR \fBgroupspace\fR [\fB-niHp\fR] [\fB-o\fR \fIfield\fR[,.\|.\|.]] [\fB-sS\fR \fIfield\fR] .\|.\|.
     [\fB-t\fR \fItype\fR [,.\|.\|.]] \fIfilesystem\fR|\fIsnapshot\fR
.fi

.LP
.nf
\fBzfs\fR \fBmount\fR
.fi

.LP
.nf
\fBzfs\fR \fBmount\fR [\fB-vO\fR] [\fB-o \fIoptions\fR] \fB-a\fR | \fIfilesystem\fR
.fi

.LP
.nf
\fBzfs\fR \fBunmount\fR [\fB-f\fR] \fB-a\fR | \fIfilesystem\fR|\fImountpoint\fR
.fi

.LP
.nf
\fBzfs\fR \fBshare\fR \fB-a\fR | \fIfilesystem\fR
.fi

.LP
.nf
\fBzfs\fR \fBunshare\fR \fB-a\fR \fIfilesystem\fR|\fImountpoint\fR
.fi

.LP
.nf
\fBzfs\fR \fBsend\fR [\fB-vR\fR] [\fB-\fR[\fBiI\fR] \fIsnapshot\fR] \fIsnapshot\fR
.fi

.LP
.nf
\fBzfs\fR \fBreceive\fR [\fB-vnFu\fR] \fIfilesystem\fR|\fIvolume\fR|\fIsnapshot\fR
.fi

.LP
.nf
\fBzfs\fR \fBreceive\fR [\fB-vnFu\fR] \fB-d\fR \fIfilesystem\fR
.fi

.LP
.nf
\fBzfs\fR \fBallow\fR \fIfilesystem\fR|\fIvolume\fR
.fi

.LP
.nf
\fBzfs\fR \fBallow\fR [\fB-ldug\fR] "\fIeveryone\fR"|\fIuser\fR|\fIgroup\fR[,.\|.\|.] \fIperm\fR|\fI@setname\fR[,.\|.\|.]
     \fIfilesystem\fR|\fIvolume\fR
.fi

.LP
.nf
\fBzfs\fR \fBallow\fR [\fB-ld\fR] \fB-e\fR \fIperm\fR|@\fIsetname\fR[,.\|.\|.] \fIfilesystem\fR|\fIvolume\fR
.fi

.LP
.nf
\fBzfs\fR \fBallow\fR \fB-c\fR \fIperm\fR|@\fIsetname\fR[,.\|.\|.] \fIfilesystem\fR|\fIvolume\fR
.fi

.LP
.nf
\fBzfs\fR \fBallow\fR \fB-s\fR @\fIsetname\fR \fIperm\fR|@\fIsetname\fR[,.\|.\|.] \fIfilesystem\fR|\fIvolume\fR
.fi

.LP
.nf
\fBzfs\fR \fBunallow\fR [\fB-rldug\fR] "\fIeveryone\fR"|\fIuser\fR|\fIgroup\fR[,.\|.\|.] [\fIperm\fR|@\fIsetname\fR[,.\|.\|. ]]
     \fIfilesystem\fR|\fIvolume\fR
.fi

.LP
.nf
\fBzfs\fR \fBunallow\fR [\fB-rld\fR] \fB-e\fR [\fIperm\fR|@\fIsetname\fR[,.\|.\|. ]] \fIfilesystem\fR|\fIvolume\fR
.fi

.LP
.nf
\fBzfs\fR \fBunallow\fR [\fB-r\fR] \fB-c\fR [\fIperm\fR|@\fIsetname\fR[ .\|.\|. ]] \fIfilesystem\fR|\fIvolume\fR
.fi

.LP
.nf
\fBzfs\fR \fBunallow\fR [\fB-r\fR] \fB-s\fR @\fIsetname\fR [\fIperm\fR|@\fIsetname\fR[,.\|.\|. ]] \fIfilesystem\fR|\fIvolume\fR
.fi

.LP
.nf
\fBzfs\fR \fBhold\fR [\fB-r\fR] \fItag\fR \fIsnapshot\fR.\|.\|.
.fi

.LP
.nf
\fBzfs\fR \fBholds\fR [\fB-r\fR] \fIsnapshot\fR.\|.\|.
.fi

.LP
.nf
\fBzfs\fR \fBrelease\fR [\fB-r\fR] \fItag\fR \fIsnapshot\fR.\|.\|.
.fi

.SH DESCRIPTION
.sp
.LP
The \fBzfs\fR command configures \fBZFS\fR datasets within a \fBZFS\fR
storage pool, as described in \fBzpool\fR(1M). A dataset is identified by a
unique path within the
.B ZFS
namespace. For example:
.sp
.in +2
.nf
pool/{filesystem,volume,snapshot}
.fi
.in -2
.sp

.sp
.LP
where the maximum length of a dataset name is
.B MAXNAMELEN
(256
bytes).
.sp
.LP
A dataset can be one of the following:
.sp
.ne 2
.mk
.na
\fIfile system\fR
.ad
.sp .6
.RS 4n
A
.B ZFS
dataset of type \fBfilesystem\fR can be mounted within the
standard system namespace and behaves like other file systems. While
\fBZFS\fR file systems are designed to be \fBPOSIX\fR compliant, known
issues exist that prevent compliance in some cases. Applications that depend
on standards conformance might fail due to nonstandard behavior when
checking file system free space.
.RE

.sp
.ne 2
.mk
.na
.I volume
.ad
.sp .6
.RS 4n
A logical volume exported as a raw or block device. This type of dataset
should only be used under special circumstances. File systems are typically
used in most environments.
.RE

.sp
.ne 2
.mk
.na
.I snapshot
.ad
.sp .6
.RS 4n
A read-only version of a file system or volume at a given point in time. It
is specified as \fIfilesystem@name\fR or \fIvolume@name\fR.
.RE

.SS "ZFS File System Hierarchy"
.sp
.LP
A
.B ZFS
storage pool is a logical collection of devices that provide
space for datasets. A storage pool is also the root of the
.B ZFS
file
system hierarchy.
.sp
.LP
The root of the pool can be accessed as a file system, such as mounting and
unmounting, taking snapshots, and setting properties. The physical storage
characteristics, however, are managed by the
.BR zpool (1M)
command.
.sp
.LP
See \fBzpool\fR(1M) for more information on creating and administering
pools.
.SS "Snapshots"
.sp
.LP
A snapshot is a read-only copy of a file system or volume. Snapshots can be
created extremely quickly, and initially consume no additional space within
the pool. As data within the active dataset changes, the snapshot consumes
more data than would otherwise be shared with the active dataset.
.sp
.LP
Snapshots can have arbitrary names. Snapshots of volumes can be cloned or
rolled back, but cannot be accessed independently.
.sp
.LP
File system snapshots can be accessed under the \fB\&.zfs/snapshot\fR
directory in the root of the file system. Snapshots are automatically
mounted on demand and may be unmounted at regular intervals. The visibility
of the \fB\&.zfs\fR directory can be controlled by the \fBsnapdir\fR
property.
.SS "Clones"
.sp
.LP
A clone is a writable volume or file system whose initial contents are the
same as another dataset. As with snapshots, creating a clone is nearly
instantaneous, and initially consumes no additional space.
.sp
.LP
Clones can only be created from a snapshot. When a snapshot is cloned, it
creates an implicit dependency between the parent and child. Even though the
clone is created somewhere else in the dataset hierarchy, the original
.RB "snapshot cannot be destroyed as long as a clone exists. The" " origin"
property exposes this dependency, and the
.B destroy
command lists any
such dependencies, if they exist.
.sp
.LP
The clone parent-child dependency relationship can be reversed by using the
\fBpromote\fR subcommand. This causes the "origin" file system to become a
clone of the specified file system, which makes it possible to destroy the
file system that the clone was created from.
.SS "Mount Points"
.sp
.LP
Creating a
.B ZFS
file system is a simple operation, so the number of
file systems per system is likely to be numerous. To cope with this,
\fBZFS\fR automatically manages mounting and unmounting file systems without
the need to edit the \fB/etc/vfstab\fR file. All automatically managed file
systems are mounted by
.B ZFS
at boot time.
.sp
.LP
By default, file systems are mounted under \fB/\fIpath\fR, where
\fIpath\fR is the name of the file system in the \fBZFS\fR namespace.
Directories are created and destroyed as needed.
.sp
.LP
A file system can also have a mount point set in the
.BR mountpoint
property. This directory is created as needed, and
.B ZFS
automatically
mounts the file system when the \fBzfs mount -a\fR command is invoked
(without editing
.BR /etc/vfstab ).
The
.B mountpoint
property can be
inherited, so if
.B pool/home
has a mount point of \fB/export/stuff\fR,
then
.B pool/home/user
automatically inherits a mount point of
\fB/export/stuff/user\fR.
.sp
.LP
A file system
.B mountpoint
property of
.B none
prevents the file
system from being mounted.
.sp
.LP
If needed,
.B ZFS
file systems can also be managed with traditional
tools (\fBmount\fR, \fBumount\fR,
.BR /etc/vfstab ).
If a file system's
mount point is set to
.BR legacy ,
\fBZFS\fR makes no attempt to manage the
file system, and the administrator is responsible for mounting and
unmounting the file system.
.SS "Zones"
.sp
.LP
A
.B ZFS
file system can be added to a non-global zone by using the
\fBzonecfg add fs\fR subcommand. A \fBZFS\fR file system that is added
to a non-global zone must have its
.B mountpoint
property set to
.BR legacy .
.sp
.LP
The physical properties of an added file system are controlled by the
global administrator. However, the zone administrator can create, modify, or
destroy files within the added file system, depending on how the file system
is mounted.
.sp
.LP
A dataset can also be delegated to a non-global zone by using the
\fBzonecfg add dataset\fR subcommand. You cannot delegate a dataset to
one zone and the children of the same dataset to another zone. The zone
administrator can change properties of the dataset or any of its children.
However, the
.B quota
property is controlled by the global
administrator.
.sp
.LP
A
.B ZFS
volume can be added as a device to a non-global zone by using
the \fBzonecfg add device\fR subcommand. However, its physical
properties can be modified only by the global administrator.
.sp
.LP
For more information about \fBzonecfg\fR syntax, see \fBzonecfg\fR(1M).
.sp
.LP
After a dataset is delegated to a non-global zone, the
.B zoned
property
is automatically set. A zoned file system cannot be mounted in the global
zone, since the zone administrator might have to set the mount point to an
unacceptable value.
.sp
.LP
The global administrator can forcibly clear the
.B zoned
property,
though this should be done with extreme care. The global administrator
should verify that all the mount points are acceptable before clearing the
property.
.SS "Native Properties"
.sp
.LP
Properties are divided into two types, native properties and user-defined
(or "user") properties. Native properties either export internal statistics
or control
.B ZFS
behavior. In addition, native properties are either
editable or read-only. User properties have no effect on
.B ZFS
behavior,
but you can use them to annotate datasets in a way that is meaningful in
your environment. For more information about user properties, see the "User
Properties" section, below.
.sp
.LP
Every dataset has a set of properties that export statistics about the
dataset as well as control various behaviors. Properties are inherited from
the parent unless overridden by the child. Some properties apply only to
certain types of datasets (file systems, volumes, or snapshots).
.sp
.LP
The values of numeric properties can be specified using human-readable
suffixes (for example,
.BR k ,
.BR KB ,
.BR M ,
.BR Gb ,
and so forth,
up to
.B Z
for zettabyte). The following are all valid (and equal)
specifications: 
.sp
.in +2
.nf
1536M, 1.5g, 1.50GB
.fi
.in -2
.sp

.sp
.LP
The values of non-numeric properties are case sensitive and must be
lowercase, except for
.BR mountpoint ,
\fBsharenfs\fR, and
.BR sharesmb .
.sp
.LP
The following native properties consist of read-only statistics about the
dataset. These properties can be neither set, nor inherited. Native
properties apply to all dataset types unless otherwise noted.
.sp
.ne 2
.mk
.na
.B available
.ad
.sp .6
.RS 4n
The amount of space available to the dataset and all its children, assuming
that there is no other activity in the pool. Because space is shared within
a pool, availability can be limited by any number of factors, including
physical pool size, quotas, reservations, or other datasets within the
pool.
.sp
This property can also be referred to by its shortened column name,
.BR avail .
.RE

.sp
.ne 2
.mk
.na
.B compressratio
.ad
.sp .6
.RS 4n
The compression ratio achieved for this dataset, expressed as a multiplier.
Compression can be turned on by running: \fBzfs set compression=on
.IR dataset .
The default value is \fBoff\fR.
.RE

.sp
.ne 2
.mk
.na
.B creation
.ad
.sp .6
.RS 4n
The time this dataset was created.
.RE

.sp
.ne 2
.mk
.na
\fBdefer_destroy\fR
.ad
.sp .6
.RS 4n
This property is
.B on
if the snapshot has been marked for deferred
destroy by using the \fBzfs destroy\fR
.B -d
command. Otherwise, the
property is \fBoff\fR.
.RE

.sp
.ne 2
.mk
.na
.B mounted
.ad
.sp .6
.RS 4n
For file systems, indicates whether the file system is currently mounted.
This property can be either
.B yes
or
.BR no .
.RE

.sp
.ne 2
.mk
.na
.B origin
.ad
.sp .6
.RS 4n
For cloned file systems or volumes, the snapshot from which the clone was
created. The origin cannot be destroyed (even with the
.B -r
or \fB-f\fR
options) so long as a clone exists.
.RE

.sp
.ne 2
.mk
.na
\fBreferenced\fR
.ad
.sp .6
.RS 4n
The amount of data that is accessible by this dataset, which may or may not
be shared with other datasets in the pool. When a snapshot or clone is
created, it initially references the same amount of space as the file system
or snapshot it was created from, since its contents are identical.
.sp
This property can also be referred to by its shortened column name,
\fBrefer\fR.
.RE

.sp
.ne 2
.mk
.na
.B type
.ad
.sp .6
.RS 4n
The type of dataset: \fBfilesystem\fR,
.BR volume ,
or
.BR snapshot .
.RE

.sp
.ne 2
.mk
.na
.B used
.ad
.sp .6
.RS 4n
The amount of space consumed by this dataset and all its descendents. This
is the value that is checked against this dataset's quota and reservation.
The space used does not include this dataset's reservation, but does take
into account the reservations of any descendent datasets. The amount of
space that a dataset consumes from its parent, as well as the amount of
space that are freed if this dataset is recursively destroyed, is the
greater of its space used and its reservation.
.sp
When snapshots (see the "Snapshots" section) are created, their space is
initially shared between the snapshot and the file system, and possibly with
previous snapshots. As the file system changes, space that was previously
shared becomes unique to the snapshot, and counted in the snapshot's space
used. Additionally, deleting snapshots can increase the amount of space
unique to (and used by) other snapshots.
.sp
The amount of space used, available, or referenced does not take into
account pending changes. Pending changes are generally accounted for within
a few seconds. Committing a change to a disk using \fBfsync\fR(3c) or
\fBO_SYNC\fR does not necessarily guarantee that the space usage information
is updated immediately.
.RE

.sp
.ne 2
.mk
.na
.B usedby*
.ad
.sp .6
.RS 4n
The
.B usedby*
properties decompose the
.B used
properties into the
various reasons that space is used. Specifically,
.B used
=
\fBusedbychildren\fR + \fBusedbydataset\fR + \fBusedbyrefreservation\fR +,
.BR usedbysnapshots .
These properties are only available for datasets
created on \fBzpool\fR "version 13" pools.
.RE

.sp
.ne 2
.mk
.na
.B usedbychildren
.ad
.sp .6
.RS 4n
The amount of space used by children of this dataset, which would be freed
if all the dataset's children were destroyed.
.RE

.sp
.ne 2
.mk
.na
.B usedbydataset
.ad
.sp .6
.RS 4n
The amount of space used by this dataset itself, which would be freed if
the dataset were destroyed (after first removing any \fBrefreservation\fR
and destroying any necessary snapshots or descendents).
.RE

.sp
.ne 2
.mk
.na
\fBusedbyrefreservation\fR
.ad
.sp .6
.RS 4n
The amount of space used by a \fBrefreservation\fR set on this dataset,
which would be freed if the \fBrefreservation\fR was removed.
.RE

.sp
.ne 2
.mk
.na
.B usedbysnapshots
.ad
.sp .6
.RS 4n
The amount of space consumed by snapshots of this dataset. In particular,
it is the amount of space that would be freed if all of this dataset's
snapshots were destroyed. Note that this is not simply the sum of the
snapshots'
.B used
properties because space can be shared by multiple
snapshots.
.RE

.sp
.ne 2
.mk
.na
\fBuserused@\fIuser\fR
.ad
.sp .6
.RS 4n
The amount of space consumed by the specified user in this dataset. Space
is charged to the owner of each file, as displayed by
.BR "ls -l" .
The
amount of space charged is displayed by
.B du
and
.BR "ls -s" .
See
the \fBzfs userspace\fR subcommand for more information.
.sp
Unprivileged users can access only their own space usage. The root user, or
a user who has been granted the
.B userused
privilege with \fBzfs
allow\fR, can access everyone's usage.
.sp
The
.BR userused@ .\|.\|.
properties are not displayed by \fBzfs get all\fR.
The user's name must be appended after the
.B @
symbol, using one of the
following forms:
.RS +4
.TP
.ie t \(bu
.el o
\fIPOSIX name\fR (for example, \fBjoe\fR)
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fIPOSIX numeric ID\fR (for example, \fB789\fR)
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fISID name\fR (for example, \fBjoe.smith@mydomain\fR)
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fISID numeric ID\fR (for example, \fBS-1-123-456-789\fR)
.RE
.RE

.sp
.ne 2
.mk
.na
\fBuserrefs\fR
.ad
.sp .6
.RS 4n
This property is set to the number of user holds on this snapshot. User
holds are set by using the \fBzfs hold\fR command.
.RE

.sp
.ne 2
.mk
.na
\fBgroupused@\fIgroup\fR
.ad
.sp .6
.RS 4n
The amount of space consumed by the specified group in this dataset. Space
is charged to the group of each file, as displayed by
.BR "ls -l" .
See
the \fBuserused@\fIuser\fR property for more information.
.sp
Unprivileged users can only access their own groups' space usage. The root
user, or a user who has been granted the
.B groupused
privilege with
\fBzfs allow\fR, can access all groups' usage.
.RE

.sp
.ne 2
.mk
.na
\fBvolblocksize\fR=\fIblocksize\fR
.ad
.sp .6
.RS 4n
For volumes, specifies the block size of the volume. The \fBblocksize\fR
cannot be changed once the volume has been written, so it should be set at
volume creation time. The default
.B blocksize
for volumes is 8 Kbytes.
Any power of 2 from 512 bytes to 128 Kbytes is valid.
.sp
This property can also be referred to by its shortened column name,
.BR volblock .
.RE

.sp
.LP
The following native properties can be used to change the behavior of a
\fBZFS\fR dataset.
.sp
.ne 2
.mk
.na
\fBaclinherit\fR=\fBdiscard\fR | \fBnoallow\fR | \fBrestricted\fR |
\fBpassthrough\fR | \fBpassthrough-x\fR
.ad
.sp .6
.RS 4n
Controls how
.B ACL
entries are inherited when files and directories are
created. A file system with an
.B aclinherit
property of
.BR discard
does not inherit any
.B ACL
entries. A file system with an
\fBaclinherit\fR property value of \fBnoallow\fR only inherits inheritable
\fBACL\fR entries that specify "deny" permissions. The property value
\fBrestricted\fR (the default) removes the \fBwrite_acl\fR and
\fBwrite_owner\fR permissions when the \fBACL\fR entry is inherited. A file
system with an
.B aclinherit
property value of
.B passthrough
inherits
all inheritable
.B ACL
entries without any modifications made to the
\fBACL\fR entries when they are inherited. A file system with an
\fBaclinherit\fR property value of \fBpassthrough-x\fR has the same meaning
as
.BR passthrough ,
except that the
.BR owner@ ,
.BR group@ ,
and
\fBeveryone@ ACE\fRs inherit the execute permission only if the file
creation mode also requests the execute bit.
.sp
When the property value is set to
.BR passthrough ,
files are created with
a mode determined by the inheritable \fBACE\fRs. If no inheritable
\fBACE\fRs exist that affect the mode, then the mode is set in accordance to
the requested mode from the application.
.RE

.sp
.ne 2
.mk
.na
\fBaclmode\fR=\fBdiscard\fR | \fBgroupmask\fR | \fBpassthrough\fR
.ad
.sp .6
.RS 4n
Controls how an
.B ACL
is modified during
.BR chmod (2).
A file system
with an
.B aclmode
property of
.B discard
deletes all
.BR ACL
entries that do not represent the mode of the file. An \fBaclmode\fR
property of
.B groupmask
(the default) reduces user or group permissions.
The permissions are reduced, such that they are no greater than the group
permission bits, unless it is a user entry that has the same
.B UID
as
the owner of the file or directory. In this case, the
.B ACL
permissions
are reduced so that they are no greater than owner permission bits. A file
system with an
.B aclmode
property of
.B passthrough
indicates that no
changes are made to the
.B ACL
other than generating the necessary
\fBACL\fR entries to represent the new mode of the file or directory.
.RE

.sp
.ne 2
.mk
.na
\fBatime\fR=\fBon\fR | \fBoff\fR
.ad
.sp .6
.RS 4n
Controls whether the access time for files is updated when they are read.
Turning this property off avoids producing write traffic when reading files
and can result in significant performance gains, though it might confuse
mailers and other similar utilities. The default value is \fBon\fR.
.RE

.sp
.ne 2
.mk
.na
\fBcanmount\fR=\fBon\fR | \fBoff\fR | \fBnoauto\fR
.ad
.sp .6
.RS 4n
If this property is set to
.BR off ,
the file system cannot be mounted,
and is ignored by
.BR "zfs mount -a" .
Setting this property to \fBoff\fR is
similar to setting the
.B mountpoint
property to
.BR none ,
except that
the dataset still has a normal
.B mountpoint
property, which can be
inherited. Setting this property to \fBoff\fR allows datasets to be used
solely as a mechanism to inherit properties. One example of setting
\fBcanmount=\fBoff\fR is to have two datasets with the same
.BR mountpoint ,
so that the children of both datasets appear in the same
directory, but might have different inherited characteristics.
.sp
When the
.B noauto
option is set, a dataset can only be mounted and
unmounted explicitly. The dataset is not mounted automatically when the
dataset is created or imported, nor is it mounted by the \fBzfs mount -a\fR
command or unmounted by the \fBzfs unmount -a\fR command.
.sp
This property is not inherited.
.RE

.sp
.ne 2
.mk
.na
\fBchecksum\fR=\fBon\fR | \fBoff\fR | \fBfletcher2,\fR| \fBfletcher4\fR
.RB | " sha256"
.ad
.sp .6
.RS 4n
Controls the checksum used to verify data integrity. The default value is
.BR on ,
which automatically selects an appropriate algorithm (currently,
\fBfletcher2\fR, but this may change in future releases). The value
\fBoff\fR disables integrity checking on user data. Disabling checksums is
\fBNOT\fR a recommended practice.
.sp
Changing this property affects only newly-written data.
.RE

.sp
.ne 2
.mk
.na
\fBcompression\fR=\fBon\fR | \fBoff\fR | \fBlzjb\fR | \fBgzip\fR |
\fBgzip-\fIN\fR
.ad
.sp .6
.RS 4n
Controls the compression algorithm used for this dataset. The \fBlzjb\fR
compression algorithm is optimized for performance while providing decent
data compression. Setting compression to
.B on
uses the
.BR lzjb
compression algorithm. The
.B gzip
compression algorithm uses the same
compression as the
.BR gzip (1)
command. You can specify the \fBgzip\fR
level by using the value \fBgzip-\fIN\fR where \fIN\fR is an integer from
1 (fastest) to 9 (best compression ratio). Currently,
.B gzip
is
equivalent to
.B gzip-6
(which is also the default for \fBgzip\fR(1)).
.sp
This property can also be referred to by its shortened column name
.BR compress .
Changing this property affects only newly-written data.
.RE

.sp
.ne 2
.mk
.na
\fBcopies\fR=\fB1\fR | \fB2\fR | \fB3\fR
.ad
.sp .6
.RS 4n
Controls the number of copies of data stored for this dataset. These copies
are in addition to any redundancy provided by the pool, for example,
mirroring or RAID-Z. The copies are stored on different disks, if possible.
The space used by multiple copies is charged to the associated file and
dataset, changing the
.B used
property and counting against quotas and
reservations.
.sp
Changing this property only affects newly-written data. Therefore, set this
property at file system creation time by using the
.BR -o
\fBcopies=\fIN\fR option.
.RE

.sp
.ne 2
.mk
.na
\fBdevices\fR=\fBon\fR | \fBoff\fR
.ad
.sp .6
.RS 4n
Controls whether device nodes can be opened on this file system. The
default value is
.BR on .
.RE

.sp
.ne 2
.mk
.na
\fBexec\fR=\fBon\fR | \fBoff\fR
.ad
.sp .6
.RS 4n
Controls whether processes can be executed from within this file system.
The default value is
.BR on .
.RE

.sp
.ne 2
.mk
.na
\fBmountpoint\fR=\fIpath\fR | \fBnone\fR | \fBlegacy\fR
.ad
.sp .6
.RS 4n
Controls the mount point used for this file system. See the "Mount Points"
section for more information on how this property is used.
.sp
When the
.B mountpoint
property is changed for a file system, the file
system and any children that inherit the mount point are unmounted. If the
new value is
.BR legacy ,
then they remain unmounted. Otherwise, they are
automatically remounted in the new location if the property was previously
\fBlegacy\fR or
.BR none ,
or if they were mounted before the property was
changed. In addition, any shared file systems are unshared and shared in the
new location.
.RE

.sp
.ne 2
.mk
.na
\fBnbmand\fR=\fBon\fR | \fBoff\fR
.ad
.sp .6
.RS 4n
Controls whether the file system should be mounted with
.B nbmand
(Non
Blocking mandatory locks). This is used for
.B CIFS
clients. Changes to
this property only take effect when the file system is umounted and
remounted. See \fBmount\fR(1M) for more information on \fBnbmand\fR
mounts.
.RE

.sp
.ne 2
.mk
.na
\fBprimarycache\fR=\fBall\fR | \fBnone\fR | \fBmetadata\fR
.ad
.sp .6
.RS 4n
Controls what is cached in the primary cache (ARC). If this property is set
to
.BR all ,
then both user data and metadata is cached. If this property
is set to
.BR none ,
then neither user data nor metadata is cached. If this
property is set to
.BR metadata ,
then only metadata is cached. The default
value is
.BR all .
.RE

.sp
.ne 2
.mk
.na
\fBquota\fR=\fIsize\fR | \fBnone\fR
.ad
.sp .6
.RS 4n
Limits the amount of space a dataset and its descendents can consume. This
property enforces a hard limit on the amount of space used. This includes
all space consumed by descendents, including file systems and snapshots.
Setting a quota on a descendent of a dataset that already has a quota does
not override the ancestor's quota, but rather imposes an additional limit.
.sp
Quotas cannot be set on volumes, as the
.B volsize
property acts as an
implicit quota.
.RE

.sp
.ne 2
.mk
.na
\fBuserquota@\fIuser\fR=\fIsize\fR | \fBnone\fR
.ad
.sp .6
.RS 4n
Limits the amount of space consumed by the specified user. User space
consumption is identified by the \fBuserspace@\fIuser\fR property.
.sp
Enforcement of user quotas may be delayed by several seconds. This delay
means that a user might exceed their quota before the system notices that
they are over quota and begins to refuse additional writes with the
\fBEDQUOT\fR error message . See the \fBzfs userspace\fR subcommand for more
information.
.sp
Unprivileged users can only access their own groups' space usage. The root
user, or a user who has been granted the
.B userquota
privilege with
\fBzfs allow\fR, can get and set everyone's quota.
.sp
This property is not available on volumes, on file systems before version
4, or on pools before version 15. The
.BR userquota@ .\|.\|.
properties are not
displayed by
.BR "zfs get all" .
The user's name must be appended after the
\fB@\fR symbol, using one of the following forms:
.RS +4
.TP
.ie t \(bu
.el o
\fIPOSIX name\fR (for example, \fBjoe\fR)
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fIPOSIX numeric ID\fR (for example, \fB789\fR)
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fISID name\fR (for example, \fBjoe.smith@mydomain\fR)
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fISID numeric ID\fR (for example, \fBS-1-123-456-789\fR)
.RE
.RE

.sp
.ne 2
.mk
.na
\fBgroupquota@\fIgroup\fR=\fIsize\fR | \fBnone\fR
.ad
.sp .6
.RS 4n
Limits the amount of space consumed by the specified group. Group space
consumption is identified by the \fBuserquota@\fIuser\fR property.
.sp
Unprivileged users can access only their own groups' space usage. The root
user, or a user who has been granted the
.B groupquota
privilege with
\fBzfs allow\fR, can get and set all groups' quotas.
.RE

.sp
.ne 2
.mk
.na
\fBreadonly\fR=\fBon\fR | \fBoff\fR
.ad
.sp .6
.RS 4n
Controls whether this dataset can be modified. The default value is
\fBoff\fR.
.sp
This property can also be referred to by its shortened column name,
.BR rdonly .
.RE

.sp
.ne 2
.mk
.na
\fBrecordsize\fR=\fIsize\fR
.ad
.sp .6
.RS 4n
Specifies a suggested block size for files in the file system. This
property is designed solely for use with database workloads that access
files in fixed-size records.
.B ZFS
automatically tunes block sizes
according to internal algorithms optimized for typical access patterns.
.sp
For databases that create very large files but access them in small random
chunks, these algorithms may be suboptimal. Specifying a \fBrecordsize\fR
greater than or equal to the record size of the database can result in
significant performance gains. Use of this property for general purpose file
systems is strongly discouraged, and may adversely affect performance.
.sp
The size specified must be a power of two greater than or equal to 512 and
less than or equal to 128 Kbytes.
.sp
Changing the file system's
.B recordsize
affects only files created
afterward; existing files are unaffected.
.sp
This property can also be referred to by its shortened column name,
.BR recsize .
.RE

.sp
.ne 2
.mk
.na
\fBrefquota\fR=\fIsize\fR | \fBnone\fR
.ad
.sp .6
.RS 4n
Limits the amount of space a dataset can consume. This property enforces a
hard limit on the amount of space used. This hard limit does not include
space used by descendents, including file systems and snapshots.
.RE

.sp
.ne 2
.mk
.na
\fBrefreservation\fR=\fIsize\fR | \fBnone\fR
.ad
.sp .6
.RS 4n
The minimum amount of space guaranteed to a dataset, not including its
descendents. When the amount of space used is below this value, the dataset
is treated as if it were taking up the amount of space specified by
\fBrefreservation\fR. The \fBrefreservation\fR reservation is accounted for
in the parent datasets' space used, and counts against the parent datasets'
quotas and reservations.
.sp
If \fBrefreservation\fR is set, a snapshot is only allowed if there is
enough free pool space outside of this reservation to accommodate the
current number of "referenced" bytes in the dataset.
.sp
This property can also be referred to by its shortened column name,
\fBrefreserv\fR.
.RE

.sp
.ne 2
.mk
.na
\fBreservation\fR=\fIsize\fR | \fBnone\fR
.ad
.sp .6
.RS 4n
The minimum amount of space guaranteed to a dataset and its descendents.
When the amount of space used is below this value, the dataset is treated as
if it were taking up the amount of space specified by its reservation.
Reservations are accounted for in the parent datasets' space used, and count
against the parent datasets' quotas and reservations.
.sp
This property can also be referred to by its shortened column name,
.BR reserv .
.RE

.sp
.ne 2
.mk
.na
\fBsecondarycache\fR=\fBall\fR | \fBnone\fR | \fBmetadata\fR
.ad
.sp .6
.RS 4n
Controls what is cached in the secondary cache (L2ARC). If this property is
set to
.BR all ,
then both user data and metadata is cached. If this
property is set to
.BR none ,
then neither user data nor metadata is
cached. If this property is set to
.BR metadata ,
then only metadata is
cached. The default value is \fBall\fR.
.RE

.sp
.ne 2
.mk
.na
\fBsetuid\fR=\fBon\fR | \fBoff\fR
.ad
.sp .6
.RS 4n
Controls whether the set-\fBUID\fR bit is respected for the file system.
The default value is
.BR on .
.RE

.sp
.ne 2
.mk
.na
\fBshareiscsi\fR=\fBon\fR | \fBoff\fR
.ad
.sp .6
.RS 4n
Like the \fBsharenfs\fR property,
.B shareiscsi
indicates whether a
\fBZFS\fR volume is exported as an \fBiSCSI\fR target. The acceptable values
for this property are
.BR on ,
\fBoff\fR, and
.BR type=disk .
The default
value is
.BR off .
In the future, other target types might be supported.
For example, \fBtape\fR.
.sp
You might want to set
.B shareiscsi=on
for a file system so that all
\fBZFS\fR volumes within the file system are shared by default. However,
setting this property on a file system has no direct effect.
.RE

.sp
.ne 2
.mk
.na
\fBsharesmb\fR=\fBon\fR | \fBoff\fR | \fIopts\fR
.ad
.sp .6
.RS 4n
Controls whether the file system is shared by using the Solaris
.BR CIFS
service, and what options are to be used. A file system with the
\fBsharesmb\fR property set to \fBoff\fR is managed through traditional
tools such as \fBsharemgr\fR(1M). Otherwise, the file system is
automatically shared and unshared with the \fBzfs share\fR and \fBzfs
unshare\fR commands. If the property is set to
.BR on ,
the
.BR sharemgr (1M)
command is invoked with no options. Otherwise, the
.BR sharemgr (1M)
command is invoked with options equivalent to the
contents of this property.
.sp
Because
.B SMB
shares requires a resource name, a unique resource name
is constructed from the dataset name. The constructed name is a copy of the
dataset name except that the characters in the dataset name, which would be
illegal in the resource name, are replaced with underscore (\fB_\fR)
characters. A pseudo property "name" is also supported that allows you to
replace the data set name with a specified name. The specified name is then
used to replace the prefix dataset in the case of inheritance. For example,
if the dataset
.B data/home/john
is set to
.BR name=john ,
then
\fBdata/home/john\fR has a resource name of
.BR john .
If a child dataset
of
.BR data/home/john/backups ,
it has a resource name of
.BR john_backups .
.sp
When SMB shares are created, the SMB share name appears as an entry in the
\fB\&.zfs/shares\fR directory. You can use the \fBls\fR or \fBchmod\fR
command to display the share-level ACLs on the entries in this directory.
.sp
When the
.B sharesmb
property is changed for a dataset, the dataset and
any children inheriting the property are re-shared with the new options,
only if the property was previously set to
.BR off ,
or if they were shared
before the property was changed. If the new property is set to \fBoff\fR,
the file systems are unshared.
.RE

.sp
.ne 2
.mk
.na
\fBsharenfs\fR=\fBon\fR | \fBoff\fR | \fIopts\fR
.ad
.sp .6
.RS 4n
Controls whether the file system is shared via
.BR NFS ,
and what options
are used. A file system with a \fBsharenfs\fR property of \fBoff\fR is
managed through traditional tools such as
.BR share (1M),
.BR unshare (1M),
and
.BR dfstab (4).
Otherwise, the file system is
automatically shared and unshared with the \fBzfs share\fR and \fBzfs
unshare\fR commands. If the property is set to
.BR on ,
the
.BR share (1M)
command is invoked with no options. Otherwise, the
.BR share (1M)
command
is invoked with options equivalent to the contents of this property.
.sp
When the \fBsharenfs\fR property is changed for a dataset, the dataset and
any children inheriting the property are re-shared with the new options,
only if the property was previously
.BR off ,
or if they were shared before
the property was changed. If the new property is
.BR off ,
the file systems
are unshared.
.RE

.sp
.ne 2
.mk
.na
\fBlogbias\fR = \fBlatency\fR | \fBthroughput\fR
.ad
.sp .6
.RS 4n
Provide a hint to ZFS about handling of synchronous requests in this
dataset. If
.B logbias
is set to
.B latency
(the default), ZFS will
use pool log devices (if configured) to handle the requests at low latency.
If
.B logbias
is set to
.BR throughput ,
ZFS will not use configured
pool log devices. ZFS will instead optimize synchronous operations for
global pool throughput and efficient use of resources.
.RE

.sp
.ne 2
.mk
.na
\fBsnapdir\fR=\fBhidden\fR | \fBvisible\fR
.ad
.sp .6
.RS 4n
Controls whether the \fB\&.zfs\fR directory is hidden or visible in the
root of the file system as discussed in the "Snapshots" section. The default
value is
.BR hidden .
.RE

.sp
.ne 2
.mk
.na
\fBversion\fR=\fB1\fR | \fB2\fR | \fBcurrent\fR
.ad
.sp .6
.RS 4n
The on-disk version of this file system, which is independent of the pool
version. This property can only be set to later supported versions. See the
\fBzfs upgrade\fR command.
.RE

.sp
.ne 2
.mk
.na
\fBvolsize\fR=\fIsize\fR
.ad
.sp .6
.RS 4n
For volumes, specifies the logical size of the volume. By default, creating
a volume establishes a reservation of equal size. For storage pools with a
version number of 9 or higher, a \fBrefreservation\fR is set instead. Any
changes to
.B volsize
are reflected in an equivalent change to the
reservation (or
.BR refreservation ).
The
.B volsize
can only be set to
a multiple of
.BR volblocksize ,
and cannot be zero.
.sp
The reservation is kept equal to the volume's logical size to prevent
unexpected behavior for consumers. Without the reservation, the volume could
run out of space, resulting in undefined behavior or data corruption,
depending on how the volume is used. These effects can also occur when the
volume size is changed while it is in use (particularly when shrinking the
size). Extreme care should be used when adjusting the volume size.
.sp
Though not recommended, a "sparse volume" (also known as "thin
provisioning") can be created by specifying the \fB-s\fR option to the
\fBzfs create -V\fR command, or by changing the reservation after the volume
has been created. A "sparse volume" is a volume where the reservation is
less then the volume size. Consequently, writes to a sparse volume can fail
with
.B ENOSPC
when the pool is low on space. For a sparse volume,
changes to
.B volsize
are not reflected in the reservation.
.RE

.sp
.ne 2
.mk
.na
\fBvscan\fR=\fBon\fR | \fBoff\fR
.ad
.sp .6
.RS 4n
Controls whether regular files should be scanned for viruses when a file is
opened and closed. In addition to enabling this property, the virus scan
service must also be enabled for virus scanning to occur. The default value
is \fBoff\fR.
.RE

.sp
.ne 2
.mk
.na
\fBxattr\fR=\fBon\fR | \fBoff\fR
.ad
.sp .6
.RS 4n
Controls whether extended attributes are enabled for this file system. The
default value is
.BR on .
.RE

.sp
.ne 2
.mk
.na
\fBzoned\fR=\fBon\fR | \fBoff\fR
.ad
.sp .6
.RS 4n
Controls whether the dataset is managed from a non-global zone. See the
"Zones" section for more information. The default value is \fBoff\fR.
.RE

.sp
.LP
The following three properties cannot be changed after the file system is
created, and therefore, should be set when the file system is created. If
the properties are not set with the \fBzfs create\fR or \fBzpool create\fR
commands, these properties are inherited from the parent dataset. If the
parent dataset lacks these properties due to having been created prior to
these features being supported, the new file system will have the default
values for these properties.
.sp
.ne 2
.mk
.na
\fBcasesensitivity\fR=\fBsensitive\fR | \fBinsensitive\fR |
.B mixed
.ad
.sp .6
.RS 4n
Indicates whether the file name matching algorithm used by the file system
should be case-sensitive, case-insensitive, or allow a combination of both
styles of matching. The default value for the
.B casesensitivity
property
is
.BR sensitive .
Traditionally, UNIX and POSIX file systems have
case-sensitive file names.
.sp
The
.B mixed
value for the
.B casesensitivity
property indicates that
the file system can support requests for both case-sensitive and
case-insensitive matching behavior. Currently, case-insensitive matching
behavior on a file system that supports mixed behavior is limited to the
Solaris CIFS server product. For more information about the \fBmixed\fR
value behavior, see the \fISolaris ZFS Administration Guide\fR.
.RE

.sp
.ne 2
.mk
.na
\fBnormalization\fR = \fBnone\fR | \fBformC\fR | \fBformD\fR |
\fBformKC\fR | \fBformKD\fR
.ad
.sp .6
.RS 4n
Indicates whether the file system should perform a
.BR unicode
normalization of file names whenever two file names are compared, and which
normalization algorithm should be used. File names are always stored
unmodified, names are normalized as part of any comparison process. If this
property is set to a legal value other than
.BR none ,
and the
\fButf8only\fR property was left unspecified, the \fButf8only\fR property is
automatically set to
.BR on .
The default value of the
.BR normalization
property is
.BR none .
This property cannot be changed after the file
system is created.
.RE

.sp
.ne 2
.mk
.na
\fButf8only\fR=\fBon\fR | \fBoff\fR
.ad
.sp .6
.RS 4n
Indicates whether the file system should reject file names that include
characters that are not present in the
.B UTF-8
character code set. If
this property is explicitly set to
.BR off ,
the normalization property
must either not be explicitly set or be set to
.BR none .
The default value
for the \fButf8only\fR property is
.BR off .
This property cannot be
changed after the file system is created.
.RE

.sp
.LP
The
.BR casesensitivity ,
.BR normalization ,
and \fButf8only\fR
properties are also new permissions that can be assigned to non-privileged
users by using the
.B ZFS
delegated administration feature.
.SS "Temporary Mount Point Properties"
.sp
.LP
When a file system is mounted, either through \fBmount\fR(1M) for legacy
mounts or the \fBzfs mount\fR command for normal file systems, its mount
options are set according to its properties. The correlation between
properties and mount options is as follows:
.sp
.in +2
.nf
    PROPERTY                MOUNT OPTION
     devices                 devices/nodevices
     exec                    exec/noexec
     readonly                ro/rw
     setuid                  setuid/nosetuid
     xattr                   xattr/noxattr
.fi
.in -2
.sp

.sp
.LP
In addition, these options can be set on a per-mount basis using the
\fB-o\fR option, without affecting the property that is stored on disk. The
values specified on the command line override the values stored in the
dataset. The
.B -nosuid
option is an alias for
.BR nodevices,nosetuid .
These properties are reported as "temporary" by the \fBzfs get\fR command.
If the properties are changed while the dataset is mounted, the new setting
overrides any temporary settings.
.SS "User Properties"
.sp
.LP
In addition to the standard native properties,
.B ZFS
supports arbitrary
user properties. User properties have no effect on
.B ZFS
behavior, but
applications or administrators can use them to annotate datasets (file
systems, volumes, and snapshots).
.sp
.LP
User property names must contain a colon (\fB:\fR) character to distinguish
them from native properties. They may contain lowercase letters, numbers,
and the following punctuation characters: colon
.RB ( : ),
dash
.RB ( - ),
period (\fB\&.\fR), and underscore
.RB ( _ ).
The expected convention is
that the property name is divided into two portions such as
\fImodule\fB:\fIproperty\fR, but this namespace is not enforced by
.BR ZFS .
User property names can be at most 256 characters, and cannot
begin with a dash
.RB ( - ).
.sp
.LP
When making programmatic use of user properties, it is strongly suggested
to use a reversed
.B DNS
domain name for the
.I module
component of
property names to reduce the chance that two independently-developed
packages use the same property name for different purposes. Property names
beginning with
.BR com.sun .
are reserved for use by Sun Microsystems.
.sp
.LP
The values of user properties are arbitrary strings, are always inherited,
and are never validated. All of the commands that operate on properties
(\fBzfs list\fR, \fBzfs get\fR,
.BR "zfs set" ,
and so forth) can be used to
manipulate both native properties and user properties. Use the \fBzfs
inherit\fR command to clear a user property . If the property is not defined
in any parent dataset, it is removed entirely. Property values are limited
to 1024 characters.
.SS "ZFS Volumes as Swap or Dump Devices"
.sp
.LP
During an initial installation or a live upgrade from a
.B UFS
file
system, a swap device and dump device are created on
.B ZFS
volumes in
the
.B ZFS
root pool. By default, the swap area size is based on 1/2 the
size of physical memory up to 2 Gbytes. The size of the dump device depends
.RB "on the kernel's requirements at installation time. Separate" " ZFS"
volumes must be used for the swap area and dump devices. Do not swap to a
file on a
.B ZFS
file system. A
.B ZFS
swap file configuration is not
supported. 
.sp
.LP
If you need to change your swap area or dump device after the system is
installed or upgraded, use the \fBswap\fR(1M) and \fBdumpadm\fR(1M)
commands. If you need to change the size of your swap area or dump device,
see the
.IR "Solaris ZFS Administration Guide" .
.SH SUBCOMMANDS
.sp
.LP
All subcommands that modify state are logged persistently to the pool in
their original form.
.sp
.ne 2
.mk
.na
\fBzfs ?\fR
.ad
.sp .6
.RS 4n
Displays a help message.
.RE

.sp
.ne 2
.mk
.na
\fBzfs create\fR [\fB-p\fR] [\fB-o\fR \fIproperty\fR=\fIvalue\fR] .\|.\|.
\fIfilesystem\fR
.ad
.sp .6
.RS 4n
Creates a new
.B ZFS
file system. The file system is automatically
mounted according to the
.B mountpoint
property inherited from the
parent.
.sp
.ne 2
.mk
.na
.B -p
.ad
.sp .6
.RS 4n
Creates all the non-existing parent datasets. Datasets created in this
manner are automatically mounted according to the
.B mountpoint
property
inherited from their parent. Any property specified on the command line
using the
.B -o
option is ignored. If the target filesystem already
exists, the operation completes successfully.
.RE

.sp
.ne 2
.mk
.na
\fB-o\fR \fIproperty\fR=\fIvalue\fR
.ad
.sp .6
.RS 4n
Sets the specified property as if the command \fBzfs set\fR
\fIproperty\fR=\fIvalue\fR was invoked at the same time the dataset was
created. Any editable
.B ZFS
property can also be set at creation time.
Multiple
.B -o
options can be specified. An error results if the same
property is specified in multiple
.B -o
options.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs create\fR [\fB-ps\fR] [\fB-b\fR \fIblocksize\fR] [\fB-o\fR
\fIproperty\fR=\fIvalue\fR] .\|.\|. \fB-V\fR \fIsize volume\fR
.ad
.sp .6
.RS 4n
Creates a volume of the given size. The volume is exported as a block
device in \fB/dev/zvol/{dsk,rdsk}/\fIpath\fR, where \fIpath\fR is the
name of the volume in the
.B ZFS
namespace. The size represents the
logical size as exported by the device. By default, a reservation of equal
size is created.
.sp
\fIsize\fR is automatically rounded up to the nearest 128 Kbytes to ensure
that the volume has an integral number of blocks regardless of
.IR blocksize .
.sp
.ne 2
.mk
.na
.B -p
.ad
.sp .6
.RS 4n
Creates all the non-existing parent datasets. Datasets created in this
manner are automatically mounted according to the
.B mountpoint
property
inherited from their parent. Any property specified on the command line
using the
.B -o
option is ignored. If the target filesystem already
exists, the operation completes successfully.
.RE

.sp
.ne 2
.mk
.na
.B -s
.ad
.sp .6
.RS 4n
Creates a sparse volume with no reservation. See
.B volsize
in the
Native Properties section for more information about sparse volumes.
.RE

.sp
.ne 2
.mk
.na
\fB-o\fR \fIproperty\fR=\fIvalue\fR
.ad
.sp .6
.RS 4n
Sets the specified property as if the \fBzfs set\fR
\fIproperty\fR=\fIvalue\fR command was invoked at the same time the dataset
was created. Any editable
.B ZFS
property can also be set at creation
time. Multiple
.B -o
options can be specified. An error results if the
same property is specified in multiple
.B -o
options.
.RE

.sp
.ne 2
.mk
.na
\fB-b\fR \fIblocksize\fR
.ad
.sp .6
.RS 4n
Equivalent to \fB-o volblocksize\fR=\fIblocksize\fR. If this option
is specified in conjunction with
.BR "-o volblocksize" ,
the resulting
behavior is undefined.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs destroy\fR [\fB-rRf\fR] \fIfilesystem\fR|\fIvolume\fR
.ad
.sp .6
.RS 4n
Destroys the given dataset. By default, the command unshares any file
systems that are currently shared, unmounts any file systems that are
currently mounted, and refuses to destroy a dataset that has active
dependents (children or clones).
.sp
.ne 2
.mk
.na
.B -r
.ad
.sp .6
.RS 4n
Recursively destroy all children.
.RE

.sp
.ne 2
.mk
.na
.B -R
.ad
.sp .6
.RS 4n
Recursively destroy all dependents, including cloned file systems outside
the target hierarchy.
.RE

.sp
.ne 2
.mk
.na
\fB-f\fR
.ad
.sp .6
.RS 4n
Force an unmount of any file systems using the \fBunmount -f\fR command.
This option has no effect on non-file systems or unmounted file systems.
.RE

Extreme care should be taken when applying either the
.B -r
or the
\fB-f\fR options, as they can destroy large portions of a pool and cause
unexpected behavior for mounted file systems in use.
.RE

.sp
.ne 2
.mk
.na
\fBzfs destroy\fR [\fB-rRd\fR] \fIsnapshot\fR
.ad
.sp .6
.RS 4n
The given snapshot is destroyed immediately if and only if the \fBzfs
destroy\fR command without the
.B -d
option would have destroyed it. Such
immediate destruction would occur, for example, if the snapshot had no
clones and the user-initiated reference count were zero.
.sp
If the snapshot does not qualify for immediate destruction, it is marked
for deferred deletion. In this state, it exists as a usable, visible
snapshot until both of the preconditions listed above are met, at which
point it is destroyed.
.sp
.ne 2
.mk
.na
.B -d
.ad
.sp .6
.RS 4n
Defer snapshot deletion.
.RE

.sp
.ne 2
.mk
.na
.B -r
.ad
.sp .6
.RS 4n
Destroy (or mark for deferred deletion) all snapshots with this name in
descendent file systems.
.RE

.sp
.ne 2
.mk
.na
.B -R
.ad
.sp .6
.RS 4n
Recursively destroy all dependents.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs snapshot\fR [\fB-r\fR] [\fB-o\fR \fIproperty\fR=\fIvalue\fR] .\|.\|.
\fIfilesystem@snapname\fR|\fIvolume@snapname\fR
.ad
.sp .6
.RS 4n
Creates a snapshot with the given name. All previous modifications by
successful system calls to the file system are part of the snapshot. See the
"Snapshots" section for details.
.sp
.ne 2
.mk
.na
.B -r
.ad
.sp .6
.RS 4n
Recursively create snapshots of all descendent datasets. Snapshots are
taken atomically, so that all recursive snapshots correspond to the same
moment in time.
.RE

.sp
.ne 2
.mk
.na
\fB-o\fR \fIproperty\fR=\fIvalue\fR
.ad
.sp .6
.RS 4n
Sets the specified property; see \fBzfs create\fR for details.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs rollback\fR [\fB-rRf\fR] \fIsnapshot\fR
.ad
.sp .6
.RS 4n
Roll back the given dataset to a previous snapshot. When a dataset is
rolled back, all data that has changed since the snapshot is discarded, and
the dataset reverts to the state at the time of the snapshot. By default,
the command refuses to roll back to a snapshot other than the most recent
one. In order to do so, all intermediate snapshots must be destroyed by
specifying the
.B -r
option.
.sp
The
.B -rR
options do not recursively destroy the child snapshots of a
recursive snapshot. Only the top-level recursive snapshot is destroyed by
either of these options. To completely roll back a recursive snapshot, you
must rollback the individual child snapshots.
.sp
.ne 2
.mk
.na
.B -r
.ad
.sp .6
.RS 4n
Recursively destroy any snapshots more recent than the one specified.
.RE

.sp
.ne 2
.mk
.na
.B -R
.ad
.sp .6
.RS 4n
Recursively destroy any more recent snapshots, as well as any clones of
those snapshots.
.RE

.sp
.ne 2
.mk
.na
\fB-f\fR
.ad
.sp .6
.RS 4n
Used with the
.B -R
option to force an unmount of any clone file systems
that are to be destroyed.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs clone\fR [\fB-p\fR] [\fB-o\fR \fIproperty\fR=\fIvalue\fR] .\|.\|.
\fIsnapshot filesystem\fR|\fIvolume\fR
.ad
.sp .6
.RS 4n
Creates a clone of the given snapshot. See the "Clones" section for
.RB "details. The target dataset can be located anywhere in the" " ZFS"
hierarchy, and is created as the same type as the original.
.sp
.ne 2
.mk
.na
.B -p
.ad
.sp .6
.RS 4n
Creates all the non-existing parent datasets. Datasets created in this
manner are automatically mounted according to the
.B mountpoint
property
inherited from their parent. If the target filesystem or volume already
exists, the operation completes successfully.
.RE

.sp
.ne 2
.mk
.na
\fB-o\fR \fIproperty\fR=\fIvalue\fR
.ad
.sp .6
.RS 4n
Sets the specified property; see \fBzfs create\fR for details.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs promote\fR \fIclone-filesystem\fR
.ad
.sp .6
.RS 4n
Promotes a clone file system to no longer be dependent on its "origin"
snapshot. This makes it possible to destroy the file system that the clone
was created from. The clone parent-child dependency relationship is
reversed, so that the origin file system becomes a clone of the specified
file system.
.sp
The snapshot that was cloned, and any snapshots previous to this snapshot,
are now owned by the promoted clone. The space they use moves from the
origin file system to the promoted clone, so enough space must be available
to accommodate these snapshots. No new space is consumed by this operation,
but the space accounting is adjusted. The promoted clone must not have any
conflicting snapshot names of its own. The
.B rename
subcommand can be
used to rename any conflicting snapshots.
.RE

.sp
.ne 2
.mk
.na
\fBzfs rename\fR \fIfilesystem\fR|\fIvolume\fR|\fIsnapshot\fR
.ad
.br
.na
\fIfilesystem\fR|\fIvolume\fR|\fIsnapshot\fR
.ad
.br
.na
\fBzfs rename\fR [\fB-p\fR] \fIfilesystem\fR|\fIvolume\fR
\fIfilesystem\fR|\fIvolume\fR
.ad
.sp .6
.RS 4n
Renames the given dataset. The new target can be located anywhere in the
\fBZFS\fR hierarchy, with the exception of snapshots. Snapshots can only be
renamed within the parent file system or volume. When renaming a snapshot,
the parent file system of the snapshot does not need to be specified as part
of the second argument. Renamed file systems can inherit new mount points,
in which case they are unmounted and remounted at the new mount point.
.sp
.ne 2
.mk
.na
.B -p
.ad
.sp .6
.RS 4n
Creates all the nonexistent parent datasets. Datasets created in this
manner are automatically mounted according to the
.B mountpoint
property
inherited from their parent.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs rename\fR \fB-r\fR \fIsnapshot snapshot\fR
.ad
.sp .6
.RS 4n
Recursively rename the snapshots of all descendent datasets. Snapshots are
the only dataset that can be renamed recursively.
.RE

.sp
.ne 2
.mk
.na
\fBzfs list\fR [\fB-r\fR|\fB-d\fR \fIdepth\fR] [\fB-H\fR]
[\fB-o\fR \fIproperty\fR[,\fI\&.\|.\|.\fR]] [ \fB-t\fR \fItype\fR[,\fI\&.\|.\|.\fR]]
[ \fB-s\fR \fIproperty\fR ] .\|.\|. [ \fB-S\fR \fIproperty\fR ] .\|.\|.
[\fIfilesystem\fR|\fIvolume\fR|\fIsnapshot\fR] .\|.\|.\fR
.ad
.sp .6
.RS 4n
Lists the property information for the given datasets in tabular form. If
specified, you can list property information by the absolute pathname or the
relative pathname. By default, all file systems and volumes are displayed.
Snapshots are displayed if the
.B listsnaps
property is
.B on
(the
default is
.BR off )
\&. The following fields are displayed,
\fBname,used,available,referenced,mountpoint\fR.
.sp
.ne 2
.mk
.na
.B -H
.ad
.sp .6
.RS 4n
Used for scripting mode. Do not print headers and separate fields by a
single tab instead of arbitrary white space.
.RE

.sp
.ne 2
.mk
.na
.B -r
.ad
.sp .6
.RS 4n
Recursively display any children of the dataset on the command line.
.RE

.sp
.ne 2
.mk
.na
\fB-d\fR \fIdepth\fR
.ad
.sp .6
.RS 4n
Recursively display any children of the dataset, limiting the recursion to
.IR depth .
A depth of
.B 1
will display only the dataset and its direct
children.
.RE

.sp
.ne 2
.mk
.na
\fB-o\fR \fIproperty\fR
.ad
.sp .6
.RS 4n
A comma-separated list of properties to display. The property must be:
.RS +4
.TP
.ie t \(bu
.el o
One of the properties described in the "Native Properties" section
.RE
.RS +4
.TP
.ie t \(bu
.el o
A user property
.RE
.RS +4
.TP
.ie t \(bu
.el o
The value
.B name
to display the dataset name
.RE
.RS +4
.TP
.ie t \(bu
.el o
The value
.B space
to display space usage properties on file systems and
volumes. This is a shortcut for specifying \fB-o
name,avail,used,usedsnap,usedds,usedrefreserv,usedchild\fR \fB-t
filesystem,volume\fR syntax.
.RE
.RE

.sp
.ne 2
.mk
.na
\fB-s\fR \fIproperty\fR
.ad
.sp .6
.RS 4n
A property for sorting the output by column in ascending order based on the
value of the property. The property must be one of the properties described
in the "Properties" section, or the special value \fBname\fR to sort by the
dataset name. Multiple properties can be specified at one time using
multiple
.B -s
property options. Multiple
.B -s
options are evaluated
from left to right in decreasing order of importance.
.sp
The following is a list of sorting criteria:
.RS +4
.TP
.ie t \(bu
.el o
Numeric types sort in numeric order.
.RE
.RS +4
.TP
.ie t \(bu
.el o
String types sort in alphabetical order.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Types inappropriate for a row sort that row to the literal bottom,
regardless of the specified ordering.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If no sorting options are specified the existing behavior of \fBzfs list\fR
is preserved.
.RE
.RE

.sp
.ne 2
.mk
.na
\fB-S\fR \fIproperty\fR
.ad
.sp .6
.RS 4n
Same as the
.B -s
option, but sorts by property in descending order.
.RE

.sp
.ne 2
.mk
.na
\fB-t\fR \fItype\fR
.ad
.sp .6
.RS 4n
A comma-separated list of types to display, where
.I type
is one of
\fBfilesystem\fR, \fBsnapshot\fR ,
.BR volume ,
or
.BR all .
For example,
specifying
.B "-t snapshot"
displays only snapshots.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs set\fR \fIproperty\fR=\fIvalue\fR
\fIfilesystem\fR|\fIvolume\fR|\fIsnapshot\fR .\|.\|.\fR
.ad
.sp .6
.RS 4n
Sets the property to the given value for each dataset. Only some properties
can be edited. See the "Properties" section for more information on what
properties can be set and acceptable values. Numeric values can be specified
as exact values, or in a human-readable form with a suffix of \fBB\fR,
.BR K ,
.BR M ,
.BR G ,
.BR T ,
.BR P ,
.BR E ,
\fBZ\fR (for bytes,
kilobytes, megabytes, gigabytes, terabytes, petabytes, exabytes, or
zettabytes, respectively). User properties can be set on snapshots. For more
information, see the "User Properties" section.
.RE

.sp
.ne 2
.mk
.na
\fBzfs get\fR [\fB-r\fR|\fB-d\fR \fIdepth\fR] [\fB-Hp\fR] [\fB-o\fR
\fIfield\fR[,.\|.\|.] [\fB-s\fR \fIsource\fR[,.\|.\|.] "\fIall\fR" |
\fIproperty\fR[,.\|.\|.] \fIfilesystem\fR|\fIvolume\fR|\fIsnapshot\fR .\|.\|.\fR
.ad
.sp .6
.RS 4n
Displays properties for the given datasets. If no datasets are specified,
then the command displays properties for all datasets on the system. For
each property, the following columns are displayed:
.sp
.in +2
.nf
    name      Dataset name
     property  Property name
     value     Property value
     source    Property source. Can either be local, default,
               temporary, inherited, or none (-).
.fi
.in -2
.sp

All columns are displayed by default, though this can be controlled by
using the
.B -o
option. This command takes a comma-separated list of
properties as described in the "Native Properties" and "User Properties"
sections.
.sp
The special value
.B all
can be used to display all properties that
apply to the given dataset's type (filesystem, volume, or snapshot).
.sp
.ne 2
.mk
.na
.B -r
.ad
.sp .6
.RS 4n
Recursively display properties for any children.
.RE

.sp
.ne 2
.mk
.na
\fB-d\fR \fIdepth\fR
.ad
.sp .6
.RS 4n
Recursively display any children of the dataset, limiting the recursion to
.IR depth .
A depth of
.B 1
will display only the dataset and its direct
children.
.RE

.sp
.ne 2
.mk
.na
.B -H
.ad
.sp .6
.RS 4n
Display output in a form more easily parsed by scripts. Any headers are
omitted, and fields are explicitly separated by a single tab instead of an
arbitrary amount of space.
.RE

.sp
.ne 2
.mk
.na
\fB-o\fR \fIfield\fR
.ad
.sp .6
.RS 4n
A comma-separated list of columns to display.
\fBname,property,value,source\fR is the default value.
.RE

.sp
.ne 2
.mk
.na
\fB-s\fR \fIsource\fR
.ad
.sp .6
.RS 4n
A comma-separated list of sources to display. Those properties coming from
a source other than those in this list are ignored. Each source must be one
of the following:
.BR local,default,inherited,temporary,none .
The default
value is all sources.
.RE

.sp
.ne 2
.mk
.na
.B -p
.ad
.sp .6
.RS 4n
Display numbers in parseable (exact) values.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs inherit\fR [\fB-r\fR] \fIproperty\fR
\fIfilesystem\fR|\fIvolume\fR|\fIsnapshot\fR .\|.\|.\fR
.ad
.sp .6
.RS 4n
Clears the specified property, causing it to be inherited from an ancestor.
If no ancestor has the property set, then the default value is used. See the
"Properties" section for a listing of default values, and details on which
properties can be inherited.
.sp
.ne 2
.mk
.na
.B -r
.ad
.sp .6
.RS 4n
Recursively inherit the given property for all children.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs upgrade\fR [\fB-v\fR]\fR
.ad
.sp .6
.RS 4n
Displays a list of file systems that are not the most recent version.
.RE

.sp
.ne 2
.mk
.na
\fBzfs upgrade\fR [\fB-r\fR] [\fB-V\fR \fIversion\fR] [\fB-a\fR |
\fIfilesystem\fR]\fR
.ad
.sp .6
.RS 4n
Upgrades file systems to a new on-disk version. Once this is done, the file
systems will no longer be accessible on systems running older versions of
the software. \fBzfs send\fR streams generated from new snapshots of these
file systems cannot be accessed on systems running older versions of the
software.
.sp
In general, the file system version is independent of the pool version. See
.BR zpool (1M)
for information on the
.B "zpool upgrade"
command.
.sp
In some cases, the file system version and the pool version are
interrelated and the pool version must be upgraded before the file system
version can be upgraded.
.sp
.ne 2
.mk
.na
.B -a
.ad
.sp .6
.RS 4n
Upgrade all file systems on all imported pools.
.RE

.sp
.ne 2
.mk
.na
\fIfilesystem\fR
.ad
.sp .6
.RS 4n
Upgrade the specified file system.
.RE

.sp
.ne 2
.mk
.na
.B -r
.ad
.sp .6
.RS 4n
Upgrade the specified file system and all descendent file systems
.RE

.sp
.ne 2
.mk
.na
\fB-V\fR \fIversion\fR
.ad
.sp .6
.RS 4n
Upgrade to the specified
.IR version .
If the
.B -V
flag is not
specified, this command upgrades to the most recent version. This option can
only be used to increase the version number, and only up to the most recent
version supported by this software.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs userspace\fR [\fB-niHp\fR] [\fB-o\fR \fIfield\fR[,.\|.\|.]]
[\fB-sS\fR \fIfield\fR].\|.\|. [\fB-t\fR \fItype\fR [,.\|.\|.]] \fIfilesystem\fR |
.I snapshot
.ad
.sp .6
.RS 4n
Displays space consumed by, and quotas on, each user in the specified
filesystem or snapshot. This corresponds to the \fBuserused@\fIuser\fR
and \fBuserquota@\fIuser\fR properties.
.sp
.ne 2
.mk
.na
.B -n
.ad
.sp .6
.RS 4n
Print numeric ID instead of user/group name.
.RE

.sp
.ne 2
.mk
.na
.B -H
.ad
.sp .6
.RS 4n
Do not print headers, use tab-delimited output.
.RE

.sp
.ne 2
.mk
.na
.B -p
.ad
.sp .6
.RS 4n
Use exact (parseable) numeric output.
.RE

.sp
.ne 2
.mk
.na
\fB-o\fR \fIfield\fR[,.\|.\|.]\fR
.ad
.sp .6
.RS 4n
Display only the specified fields from the following set,
\fBtype,name,used,quota\fR.The default is to display all fields.
.RE

.sp
.ne 2
.mk
.na
\fB-s\fR \fIfield\fR
.ad
.sp .6
.RS 4n
Sort output by this field. The
.I s
and
.I S
flags may be specified
multiple times to sort first by one field, then by another. The default is
\fB-s type\fR \fB-s name\fR.
.RE

.sp
.ne 2
.mk
.na
\fB-S\fR \fIfield\fR
.ad
.sp .6
.RS 4n
Sort by this field in reverse order. See \fB-s\fR.
.RE

.sp
.ne 2
.mk
.na
\fB-t\fR \fItype\fR[,.\|.\|.]\fR
.ad
.sp .6
.RS 4n
Print only the specified types from the following set,
.BR all,posixuser,smbuser,posixgroup,smbgroup .
.sp
The default is
.BR "-t posixuser,smbuser"
.sp
The default can be changed to include group types.
.RE

.sp
.ne 2
.mk
.na
.B -i
.ad
.sp .6
.RS 4n
Translate SID to POSIX ID. The POSIX ID may be ephemeral if no mapping
exists. Normal POSIX interfaces (for example,
.BR stat (2),
.B ls
.BR -l )
perform this translation, so the
.B -i
option allows the output
from \fBzfs userspace\fR to be compared directly with those utilities.
However,
.B -i
may lead to confusion if some files were created by an SMB
user before a SMB-to-POSIX name mapping was established. In such a case,
some files are owned by the SMB entity and some by the POSIX entity.
However, the
.B -i
option will report that the POSIX entity has the total
usage and quota for both.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs groupspace\fR [\fB-niHp\fR] [\fB-o\fR \fIfield\fR[,.\|.\|.]]
[\fB-sS\fR \fIfield\fR].\|.\|. [\fB-t\fR \fItype\fR [,.\|.\|.]] \fIfilesystem\fR |
.I snapshot
.ad
.sp .6
.RS 4n
Displays space consumed by, and quotas on, each group in the specified
filesystem or snapshot. This subcommand is identical to \fBzfs userspace\fR,
except that the default types to display are
.BR "-t posixgroup,smbgroup" .
.sp
.in +2
.nf
-
.fi
.in -2
.sp

.RE

.sp
.ne 2
.mk
.na
\fBzfs mount\fR
.ad
.sp .6
.RS 4n
Displays all
.B ZFS
file systems currently mounted.
.RE

.sp
.ne 2
.mk
.na
\fBzfs mount\fR [\fB-vO\fR] [\fB-o\fR \fIoptions\fR] \fB-a\fR |
\fIfilesystem\fR
.ad
.sp .6
.RS 4n
Mounts
.B ZFS
file systems. Invoked automatically as part of the boot
process.
.sp
.ne 2
.mk
.na
\fB-o\fR \fIoptions\fR
.ad
.sp .6
.RS 4n
An optional, comma-separated list of mount options to use temporarily for
the duration of the mount. See the "Temporary Mount Point Properties"
section for details.
.RE

.sp
.ne 2
.mk
.na
.B -O
.ad
.sp .6
.RS 4n
Perform an overlay mount. See \fBmount\fR(1M) for more information.
.RE

.sp
.ne 2
.mk
.na
.B -v
.ad
.sp .6
.RS 4n
Report mount progress.
.RE

.sp
.ne 2
.mk
.na
.B -a
.ad
.sp .6
.RS 4n
Mount all available
.B ZFS
file systems. Invoked automatically as part
of the boot process.
.RE

.sp
.ne 2
.mk
.na
\fIfilesystem\fR
.ad
.sp .6
.RS 4n
Mount the specified filesystem.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs unmount\fR [\fB-f\fR] \fB-a\fR |
\fIfilesystem\fR|\fImountpoint\fR
.ad
.sp .6
.RS 4n
Unmounts currently mounted
.B ZFS
file systems. Invoked automatically as
part of the shutdown process.
.sp
.ne 2
.mk
.na
\fB-f\fR
.ad
.sp .6
.RS 4n
Forcefully unmount the file system, even if it is currently in use.
.RE

.sp
.ne 2
.mk
.na
.B -a
.ad
.sp .6
.RS 4n
Unmount all available
.B ZFS
file systems. Invoked automatically as part
of the boot process.
.RE

.sp
.ne 2
.mk
.na
\fIfilesystem\fR|\fImountpoint\fR
.ad
.sp .6
.RS 4n
Unmount the specified filesystem. The command can also be given a path to a
\fBZFS\fR file system mount point on the system.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs share\fR \fB-a\fR | \fIfilesystem\fR
.ad
.sp .6
.RS 4n
Shares available
.B ZFS
file systems.
.sp
.ne 2
.mk
.na
.B -a
.ad
.sp .6
.RS 4n
Share all available
.B ZFS
file systems. Invoked automatically as part
of the boot process.
.RE

.sp
.ne 2
.mk
.na
\fIfilesystem\fR
.ad
.sp .6
.RS 4n
Share the specified filesystem according to the \fBsharenfs\fR and
\fBsharesmb\fR properties. File systems are shared when the \fBsharenfs\fR
or
.B sharesmb
property is set.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs unshare\fR \fB-a\fR | \fIfilesystem\fR|\fImountpoint\fR
.ad
.sp .6
.RS 4n
Unshares currently shared
.B ZFS
file systems. This is invoked
automatically as part of the shutdown process.
.sp
.ne 2
.mk
.na
.B -a
.ad
.sp .6
.RS 4n
Unshare all available
.B ZFS
file systems. Invoked automatically as part
of the boot process.
.RE

.sp
.ne 2
.mk
.na
\fIfilesystem\fR|\fImountpoint\fR
.ad
.sp .6
.RS 4n
Unshare the specified filesystem. The command can also be given a path to a
\fBZFS\fR file system shared on the system.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs send\fR [\fB-vR\fR] [\fB-\fR[\fBiI\fR] \fIsnapshot\fR]
.I snapshot
.ad
.sp .6
.RS 4n
Creates a stream representation of the second
.IR snapshot ,
which is
written to standard output. The output can be redirected to a file or to a
different system (for example, using
.BR ssh (1).
By default, a full stream
is generated.
.sp
.ne 2
.mk
.na
\fB-i\fR \fIsnapshot\fR
.ad
.sp .6
.RS 4n
Generate an incremental stream from the first
.I snapshot
to the second
.IR snapshot .
The incremental source (the first
.IR snapshot )
can be
specified as the last component of the snapshot name (for example, the part
after the
.BR @ ),
and it is assumed to be from the same file system as the
second
.IR snapshot .
.sp
If the destination is a clone, the source may be the origin snapshot, which
must be fully specified (for example,
.BR pool/fs@origin ,
not just
.BR @origin ).
.RE

.sp
.ne 2
.mk
.na
\fB-I\fR \fIsnapshot\fR
.ad
.sp .6
.RS 4n
Generate a stream package that sends all intermediary snapshots from the
first snapshot to the second snapshot. For example, \fB-I @a fs@d\fR is
similar to
.BR "-i @a fs@b; -i @b fs@c; -i @c fs@d" .
The incremental source
snapshot may be specified as with the
.B -i
option.
.RE

.sp
.ne 2
.mk
.na
.B -R
.ad
.sp .6
.RS 4n
Generate a replication stream package, which will replicate the specified
filesystem, and all descendent file systems, up to the named snapshot. When
received, all properties, snapshots, descendent file systems, and clones are
preserved.
.sp
If the
.B -i
or
.B -I
flags are used in conjunction with the
.BR -R
flag, an incremental replication stream is generated. The current values of
properties, and current snapshot and file system names are set when the
stream is received. If the
.B -F
flag is specified when this stream is
received, snapshots and file systems that do not exist on the sending side
are destroyed.
.RE

.sp
.ne 2
.mk
.na
.B -v
.ad
.sp .6
.RS 4n
Print verbose information about the stream package generated.
.RE

The format of the stream is committed. You will be able to receive your
streams on future versions of
.BR ZFS .
.RE

.sp
.ne 2
.mk
.na
\fBzfs receive\fR [\fB-vnFu\fR]
\fIfilesystem\fR|\fIvolume\fR|\fIsnapshot\fR
.ad
.br
.na
\fBzfs receive\fR [\fB-vnFu\fR] \fB-d\fR \fIfilesystem\fR
.ad
.sp .6
.RS 4n
Creates a snapshot whose contents are as specified in the stream provided
on standard input. If a full stream is received, then a new file system is
created as well. Streams are created using the \fBzfs send\fR subcommand,
which by default creates a full stream. \fBzfs recv\fR can be used as an
alias for \fBzfs receive\fR.
.sp
If an incremental stream is received, then the destination file system must
already exist, and its most recent snapshot must match the incremental
stream's source. For
.BR zvols ,
the destination device link is destroyed
and recreated, which means the
.B zvol
cannot be accessed during the
\fBreceive\fR operation.
.sp
When a snapshot replication package stream that is generated by using the
\fBzfs send\fR \fB-R\fR command is  received, any snapshots that do not
exist on the sending location are destroyed by using the \fBzfs destroy\fR
\fB-d\fR command.
.sp
The name of the snapshot (and file system, if a full stream is received)
that this subcommand creates depends on the argument type and the
.BR -d
option.
.sp
If the argument is a snapshot name, the specified
.I snapshot
is
created. If the argument is a file system or volume name, a snapshot with
the same name as the sent snapshot is created within the specified
\fIfilesystem\fR or
.IR volume .
If the
.B -d
option is specified, the
snapshot name is determined by appending the sent snapshot's name to the
specified
.IR filesystem .
If the
.B -d
option is specified, any
required file systems within the specified one are created.
.sp
.ne 2
.mk
.na
.B -d
.ad
.sp .6
.RS 4n
Use the name of the sent snapshot to determine the name of the new snapshot
as described in the paragraph above.
.RE

.sp
.ne 2
.mk
.na
.B -u
.ad
.sp .6
.RS 4n
File system that is associated with the received stream is not mounted.
.RE

.sp
.ne 2
.mk
.na
.B -v
.ad
.sp .6
.RS 4n
Print verbose information about the stream and the time required to perform
the receive operation.
.RE

.sp
.ne 2
.mk
.na
.B -n
.ad
.sp .6
.RS 4n
Do not actually receive the stream. This can be useful in conjunction with
the
.B -v
option to verify the name the receive operation would use.
.RE

.sp
.ne 2
.mk
.na
.B -F
.ad
.sp .6
.RS 4n
Force a rollback of the file system to the most recent snapshot before
performing the receive operation. If receiving an incremental replication
stream (for example, one generated by
.BR "zfs send -R -[iI]" ),
destroy
snapshots and file systems that do not exist on the sending side.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs allow\fR \fIfilesystem\fR | \fIvolume\fR
.ad
.sp .6
.RS 4n
Displays permissions that have been delegated on the specified filesystem
or volume. See the other forms of \fBzfs allow\fR for more information.
.RE

.sp
.ne 2
.mk
.na
\fBzfs allow\fR [\fB-ldug\fR]
"\fIeveryone\fR"|\fIuser\fR|\fIgroup\fR[,.\|.\|.] \fIperm\fR|@\fIsetname\fR[,.\|.\|.]
\fIfilesystem\fR| \fIvolume\fR
.ad
.br
.na
\fBzfs allow\fR [\fB-ld\fR] \fB-e\fR \fIperm\fR|@\fIsetname\fR[,.\|.\|.]
\fIfilesystem\fR | \fIvolume\fR
.ad
.sp .6
.RS 4n
Delegates
.B ZFS
administration permission for the file systems to
non-privileged users.
.sp
.ne 2
.mk
.na
\fB[\fB-ug\fR] "\fIeveryone\fR"|\fIuser\fR|\fIgroup\fR[,.\|.\|.]\fR
.ad
.sp .6
.RS 4n
Specifies to whom the permissions are delegated. Multiple entities can be
specified as a comma-separated list. If neither of the
.B -ug
options are
specified, then the argument is interpreted preferentially as the keyword
"everyone", then as a user name, and lastly as a group name. To specify a
user or group named "everyone", use the \fB-u\fR or \fB-g\fR options. To
specify a group with the same name as a user, use the
.B -g
options.
.RE

.sp
.ne 2
.mk
.na
\fB[\fB-e\fR] \fIperm\fR|@\fIsetname\fR[,.\|.\|.]\fR
.ad
.sp .6
.RS 4n
Specifies that the permissions be delegated to "everyone." Multiple
permissions may be specified as a comma-separated list. Permission names are
the same as
.B ZFS
subcommand and property names. See the property list
below. Property set names, which begin with an at sign (\fB@\fR) , may be
specified. See the
.B -s
form below for details.
.RE

.sp
.ne 2
.mk
.na
\fB[\fB-ld\fR] \fIfilesystem\fR|\fIvolume\fR
.ad
.sp .6
.RS 4n
Specifies where the permissions are delegated. If neither of the \fB-ld\fR
options are specified, or both are, then the permissions are allowed for the
file system or volume, and all of its descendents. If only the \fB-l\fR
option is used, then is allowed "locally" only for the specified file
system. If only the
.B -d
option is used, then is allowed only for the
descendent file systems.
.RE

.RE

.sp
.LP
Permissions are generally the ability to use a
.B ZFS
subcommand or
change a
.B ZFS
property. The following permissions are available:
.sp
.in +2
.nf
NAME             TYPE           NOTES
allow            subcommand     Must also have the permission that is being
                                allowed
clone            subcommand     Must also have the 'create' ability and 'mount'
                                ability in the origin file system
create           subcommand     Must also have the 'mount' ability
destroy          subcommand     Must also have the 'mount' ability
mount            subcommand     Allows mount/umount of ZFS datasets
promote          subcommand     Must also have the 'mount'
                                and 'promote' ability in the origin file system
receive          subcommand     Must also have the 'mount' and 'create' ability
rename           subcommand     Must also have the 'mount' and 'create'
                                ability in the new parent
rollback         subcommand     Must also have the 'mount' ability
send             subcommand
share            subcommand     Allows sharing file systems over NFS or SMB
                                protocols
snapshot         subcommand     Must also have the 'mount' ability
groupquota       other          Allows accessing any groupquota@.\|.\|. property
groupused        other          Allows reading any groupused@.\|.\|. property
userprop         other          Allows changing any user property
userquota        other          Allows accessing any userquota@.\|.\|. property
userused         other          Allows reading any userused@.\|.\|. property

aclinherit       property
aclmode          property
atime            property
canmount         property
casesensitivity  property
checksum         property
compression      property
copies           property
devices          property
exec             property
mountpoint       property
nbmand           property
normalization    property
primarycache     property
quota            property
readonly         property
recordsize       property
refquota         property
refreservation   property
reservation      property
secondarycache   property
setuid           property
shareiscsi       property
sharenfs         property
sharesmb         property
snapdir          property
utf8only         property
version          property
volblocksize     property
volsize          property
vscan            property
xattr            property
zoned            property
.fi
.in -2
.sp

.sp
.ne 2
.mk
.na
\fBzfs allow\fR \fB-c\fR \fIperm\fR|@\fIsetname\fR[,.\|.\|.]
\fIfilesystem\fR|\fIvolume\fR
.ad
.sp .6
.RS 4n
Sets "create time" permissions. These permissions are granted (locally) to
the creator of any newly-created descendent file system.
.RE

.sp
.ne 2
.mk
.na
\fBzfs allow\fR \fB-s\fR @\fIsetname perm\fR|@\fIsetname\fR[,.\|.\|.]
\fIfilesystem\fR|\fIvolume\fR
.ad
.sp .6
.RS 4n
Defines or adds permissions to a permission set. The set can be used by
other \fBzfs allow\fR commands for the specified file system and its
descendents. Sets are evaluated dynamically, so changes to a set are
immediately reflected. Permission sets follow the same naming restrictions
as ZFS file systems, but the name must begin with an "at sign" (\fB@\fR),
and can be no more than 64 characters long.
.RE

.sp
.ne 2
.mk
.na
\fBzfs unallow\fR [\fB-rldug\fR]
"\fIeveryone\fR"|\fIuser\fR|\fIgroup\fR[,.\|.\|.] [\fIperm\fR|@\fIsetname\fR[,
\&.\|.\|.]] \fIfilesystem\fR|\fIvolume\fR
.ad
.br
.na
\fBzfs unallow\fR [\fB-rld\fR] \fB-e\fR [\fIperm\fR|@\fIsetname\fR
[,.\|.\|.]] \fIfilesystem\fR|\fIvolume\fR
.ad
.br
.na
\fBzfs unallow\fR [\fB-r\fR] \fB-c\fR
[\fIperm\fR|@\fIsetname\fR[,.\|.\|.]]\fR
.ad
.br
.na
\fIfilesystem\fR|\fIvolume\fR
.ad
.sp .6
.RS 4n
Removes permissions that were granted with the \fBzfs allow\fR command. No
permissions are explicitly denied, so other permissions granted are still in
effect. For example, if the permission is granted by an ancestor. If no
permissions are specified, then all permissions for the specified
.IR user ,
.IR group ,
or
.I everyone
are removed. Specifying
"everyone" (or using the \fB-e\fR option) only removes the permissions that
were granted to "everyone", not all permissions for every user and group.
See the \fBzfs allow\fR command for a description of the \fB-ldugec\fR
options.
.sp
.ne 2
.mk
.na
.B -r
.ad
.sp .6
.RS 4n
Recursively remove the permissions from this file system and all
descendents.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs unallow\fR [\fB-r\fR] \fB-s\fR @\fIsetname\fR
[\fIperm\fR|@\fIsetname\fR[,.\|.\|.]]\fR
.ad
.br
.na
\fIfilesystem\fR|\fIvolume\fR
.ad
.sp .6
.RS 4n
Removes permissions from a permission set. If no permissions are specified,
then all permissions are removed, thus removing the set entirely.
.RE

.sp
.ne 2
.mk
.na
\fBzfs hold\fR [\fB-r\fR] \fItag snapshot\fR.\|.\|.\fR
.ad
.sp .6
.RS 4n
Adds a single reference, named with the
.I tag
argument, to the
specified snapshot or snapshots. Each snapshot has its own tag namespace,
and tags must be unique within that space.
.sp
If a hold exists on a snapshot, attempts to destroy that snapshot by using
the \fBzfs destroy\fR command return \fBEBUSY\fR.
.sp
.ne 2
.mk
.na
.B -r
.ad
.sp .6
.RS 4n
Specifies that a hold with the given tag is applied recursively to the
snapshots of all descendent file systems.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs holds\fR [\fB-r\fR] \fIsnapshot\fR.\|.\|.\fR
.ad
.sp .6
.RS 4n
Lists all existing user references for the given snapshot or snapshots.
.sp
.ne 2
.mk
.na
.B -r
.ad
.sp .6
.RS 4n
Lists the holds that are set on the named descendent snapshots, in addition
to listing the holds on the named snapshot.
.RE

.RE

.sp
.ne 2
.mk
.na
\fBzfs release\fR [\fB-r\fR] \fItag snapshot\fR.\|.\|.\fR
.ad
.sp .6
.RS 4n
Removes a single reference, named with the
.I tag
argument, from the
specified snapshot or snapshots. The tag must already exist for each
snapshot.
.sp
If a hold exists on a snapshot, attempts to destroy that snapshot by using
the \fBzfs destroy\fR command return \fBEBUSY\fR.
.sp
.ne 2
.mk
.na
.B -r
.ad
.sp .6
.RS 4n
Recursively releases a hold with the given tag on the snapshots of all
descendent file systems.
.RE

.RE

.SH EXAMPLES
.LP
\fBExample 1\fR Creating a ZFS File System Hierarchy
.sp
.LP
The following commands create a file system named
.B pool/home
and a
file system named
.BR pool/home/bob .
The mount point
.B /export/home
is
set for the parent file system, and is automatically inherited by the child
file system.

.sp
.in +2
.nf
# \fBzfs create pool/home\fR
# \fBzfs set mountpoint=/export/home pool/home\fR
# \fBzfs create pool/home/bob\fR
.fi
.in -2
.sp

.LP
\fBExample 2\fR Creating a ZFS Snapshot
.sp
.LP
The following command creates a snapshot named
.BR yesterday .
This
snapshot is mounted on demand in the \fB\&.zfs/snapshot\fR directory at the
root of the
.B pool/home/bob
file system.

.sp
.in +2
.nf
# \fBzfs snapshot pool/home/bob@yesterday\fR
.fi
.in -2
.sp

.LP
\fBExample 3\fR Creating and Destroying Multiple Snapshots
.sp
.LP
The following command creates snapshots named
.B yesterday
of
\fBpool/home\fR and all of its descendent file systems. Each snapshot is
mounted on demand in the \fB\&.zfs/snapshot\fR directory at the root of its
file system. The second command destroys the newly created snapshots.

.sp
.in +2
.nf
# \fBzfs snapshot -r pool/home@yesterday\fR
# \fBzfs destroy -r pool/home@yesterday\fR
.fi
.in -2
.sp

.LP
\fBExample 4\fR Disabling and Enabling File System Compression
.sp
.LP
The following command disables the
.B compression
property for all file
systems under
.BR pool/home .
The next command explicitly enables
\fBcompression\fR for \fBpool/home/anne\fR.

.sp
.in +2
.nf
# \fBzfs set compression=off pool/home\fR
# \fBzfs set compression=on pool/home/anne\fR
.fi
.in -2
.sp

.LP
\fBExample 5\fR Listing ZFS Datasets
.sp
.LP
The following command lists all active file systems and volumes in the
system. Snapshots are displayed if the
.B listsnaps
property is
.BR on .
The default is
.BR off .
See \fBzpool\fR(1M) for more information on pool
properties.

.sp
.in +2
.nf
# \fBzfs list\fR
   NAME                      USED  AVAIL  REFER  MOUNTPOINT
   pool                      450K   457G    18K  /pool
   pool/home                 315K   457G    21K  /export/home
   pool/home/anne             18K   457G    18K  /export/home/anne
   pool/home/bob             276K   457G   276K  /export/home/bob
.fi
.in -2
.sp

.LP
\fBExample 6\fR Setting a Quota on a ZFS File System
.sp
.LP
The following command sets a quota of 50 Gbytes for
.BR pool/home/bob .

.sp
.in +2
.nf
# \fBzfs set quota=50G pool/home/bob\fR
.fi
.in -2
.sp

.LP
\fBExample 7\fR Listing ZFS Properties
.sp
.LP
The following command lists all properties for
.BR pool/home/bob .

.sp
.in +2
.nf
# \fBzfs get all pool/home/bob\fR
NAME           PROPERTY              VALUE                  SOURCE
pool/home/bob  type                  filesystem             -
pool/home/bob  creation              Tue Jul 21 15:53 2009  -
pool/home/bob  used                  21K                    -
pool/home/bob  available             20.0G                  -
pool/home/bob  referenced            21K                    -
pool/home/bob  compressratio         1.00x                  -
pool/home/bob  mounted               yes                    -
pool/home/bob  quota                 20G                    local
pool/home/bob  reservation           none                   default
pool/home/bob  recordsize            128K                   default
pool/home/bob  mountpoint            /pool/home/bob         default
pool/home/bob  sharenfs              off                    default
pool/home/bob  checksum              on                     default
pool/home/bob  compression           on                     local
pool/home/bob  atime                 on                     default
pool/home/bob  devices               on                     default
pool/home/bob  exec                  on                     default
pool/home/bob  setuid                on                     default
pool/home/bob  readonly              off                    default
pool/home/bob  zoned                 off                    default
pool/home/bob  snapdir               hidden                 default
pool/home/bob  aclmode               groupmask              default
pool/home/bob  aclinherit            restricted             default
pool/home/bob  canmount              on                     default
pool/home/bob  shareiscsi            off                    default
pool/home/bob  xattr                 on                     default
pool/home/bob  copies                1                      default
pool/home/bob  version               4                      -
pool/home/bob  utf8only              off                    -
pool/home/bob  normalization         none                   -
pool/home/bob  casesensitivity       sensitive              -
pool/home/bob  vscan                 off                    default
pool/home/bob  nbmand                off                    default
pool/home/bob  sharesmb              off                    default
pool/home/bob  refquota              none                   default
pool/home/bob  refreservation        none                   default
pool/home/bob  primarycache          all                    default
pool/home/bob  secondarycache        all                    default
pool/home/bob  usedbysnapshots       0                      -
pool/home/bob  usedbydataset         21K                    -
pool/home/bob  usedbychildren        0                      -
pool/home/bob  usedbyrefreservation  0                      -
.fi
.in -2
.sp

.sp
.LP
The following command gets a single property value.

.sp
.in +2
.nf
# \fBzfs get -H -o value compression pool/home/bob\fR
on
.fi
.in -2
.sp

.sp
.LP
The following command lists all properties with local settings for
.BR pool/home/bob .

.sp
.in +2
.nf
# \fBzfs get -r -s local -o name,property,value all pool/home/bob\fR
NAME           PROPERTY              VALUE
pool/home/bob  quota                 20G
pool/home/bob  compression           on
.fi
.in -2
.sp

.LP
\fBExample 8\fR Rolling Back a ZFS File System
.sp
.LP
The following command reverts the contents of
.B pool/home/anne
to the
snapshot named
.BR yesterday ,
deleting all intermediate snapshots.

.sp
.in +2
.nf
# \fBzfs rollback -r pool/home/anne@yesterday\fR
.fi
.in -2
.sp

.LP
\fBExample 9\fR Creating a ZFS Clone
.sp
.LP
The following command creates a writable file system whose initial contents
are the same as
.BR pool/home/bob@yesterday .

.sp
.in +2
.nf
# \fBzfs clone pool/home/bob@yesterday pool/clone\fR
.fi
.in -2
.sp

.LP
\fBExample 10\fR Promoting a ZFS Clone
.sp
.LP
The following commands illustrate how to test out changes to a file system,
and then replace the original file system with the changed one, using
clones, clone promotion, and renaming:

.sp
.in +2
.nf
# \fBzfs create pool/project/production\fR
  populate /pool/project/production with data
# \fBzfs snapshot pool/project/production@today\fR
# \fBzfs clone pool/project/production@today pool/project/beta\fR
make changes to /pool/project/beta and test them
# \fBzfs promote pool/project/beta\fR
# \fBzfs rename pool/project/production pool/project/legacy\fR
# \fBzfs rename pool/project/beta pool/project/production\fR
once the legacy version is no longer needed, it can be destroyed
# \fBzfs destroy pool/project/legacy\fR
.fi
.in -2
.sp

.LP
\fBExample 11\fR Inheriting ZFS Properties
.sp
.LP
The following command causes
.B pool/home/bob
and
.BR pool/home/anne
to inherit the
.B checksum
property from their parent.

.sp
.in +2
.nf
# \fBzfs inherit checksum pool/home/bob pool/home/anne\fR
.fi
.in -2
.sp

.LP
\fBExample 12\fR Remotely Replicating ZFS Data
.sp
.LP
The following commands send a full stream and then an incremental stream to
a remote machine, restoring them into \fBpoolB/received/fs@a\fRand
\fBpoolB/received/fs@b\fR, respectively. \fBpoolB\fR must contain the file
system
.BR poolB/received ,
and must not initially contain
\fBpoolB/received/fs\fR.

.sp
.in +2
.nf
# \fBzfs send pool/fs@a | \e\fR
   \fBssh host zfs receive poolB/received/fs@a\fR
# \fBzfs send -i a pool/fs@b | ssh host \e\fR
   \fBzfs receive poolB/received/fs\fR
.fi
.in -2
.sp

.LP
\fBExample 13\fR Using the \fBzfs receive\fR \fB-d\fR Option
.sp
.LP
The following command sends a full stream of \fBpoolA/fsA/fsB@snap\fR to a
remote machine, receiving it into
.BR poolB/received/fsA/fsB@snap .
The
\fBfsA/fsB@snap\fR portion of the received snapshot's name is determined
from the name of the sent snapshot.
.B poolB
must contain the file system
.BR poolB/received .
If \fBpoolB/received/fsA\fR does not exist, it is
created as an empty file system.

.sp
.in +2
.nf
# \fBzfs send poolA/fsA/fsB@snap | \e
   ssh host zfs receive -d poolB/received\fR
.fi
.in -2
.sp

.LP
\fBExample 14\fR Setting User Properties
.sp
.LP
The following example sets the user-defined \fBcom.example:department\fR
property for a dataset.

.sp
.in +2
.nf
# \fBzfs set com.example:department=12345 tank/accounting\fR
.fi
.in -2
.sp

.LP
\fBExample 15\fR Creating a ZFS Volume as an iSCSI Target Device
.sp
.LP
The following example shows how to create a
.B ZFS
volume as an
\fBiSCSI\fR target.

.sp
.in +2
.nf
# \fBzfs create -V 2g pool/volumes/vol1\fR
# \fBzfs set shareiscsi=on pool/volumes/vol1\fR
# \fBiscsitadm list target\fR
Target: pool/volumes/vol1
 iSCSI Name:
 iqn.1986-03.com.sun:02:7b4b02a6-3277-eb1b-e686-a24762c52a8c
 Connections: 0
.fi
.in -2
.sp

.sp
.LP
After the
.B iSCSI
target is created, set up the
.B iSCSI
initiator.
For more information about the Solaris
.B iSCSI
initiator, see
.BR iscsitadm (1M).
.LP
\fBExample 16\fR Performing a Rolling Snapshot
.sp
.LP
The following example shows how to maintain a history of snapshots with a
consistent naming scheme. To keep a week's worth of snapshots, the user
destroys the oldest snapshot, renames the remaining snapshots, and then
creates a new snapshot, as follows:

.sp
.in +2
.nf
# \fBzfs destroy -r pool/users@7daysago\fR
# \fBzfs rename -r pool/users@6daysago @7daysago\fR
# \fBzfs rename -r pool/users@5daysago @6daysago\fR
# \fBzfs rename -r pool/users@yesterday @5daysago\fR
# \fBzfs rename -r pool/users@yesterday @4daysago\fR
# \fBzfs rename -r pool/users@yesterday @3daysago\fR
# \fBzfs rename -r pool/users@yesterday @2daysago\fR
# \fBzfs rename -r pool/users@today @yesterday\fR
# \fBzfs snapshot -r pool/users@today\fR
.fi
.in -2
.sp

.LP
\fBExample 17\fR Setting \fBsharenfs\fR Property Options on a ZFS File
System
.sp
.LP
The following commands show how to set \fBsharenfs\fR property options to
enable
.B rw
access for a set of
.B IP
addresses and to enable root
access for system
.B neo
on the
.B tank/home
file system.

.sp
.in +2
.nf
# \fB# zfs set sharenfs='rw=@123.123.0.0/16,root=neo' tank/home\fR
.fi
.in -2
.sp

.sp
.LP
If you are using
.B DNS
for host name resolution, specify the fully
qualified hostname.

.LP
\fBExample 18\fR Delegating ZFS Administration Permissions on a ZFS
Dataset
.sp
.LP
The following example shows how to set permissions so that user
\fBcindys\fR can create, destroy, mount, and take snapshots on
.BR tank/cindys .
The permissions on
.B tank/cindys
are also
displayed.

.sp
.in +2
.nf
# \fBzfs allow cindys create,destroy,mount,snapshot tank/cindys\fR
# \fBzfs allow tank/cindys\fR
-------------------------------------------------------------
Local+Descendent permissions on (tank/cindys)
          user cindys create,destroy,mount,snapshot
-------------------------------------------------------------
.fi
.in -2
.sp

.sp
.LP
Because the
.B tank/cindys
mount point permission is set to 755 by
default, user
.B cindys
will be unable to mount file systems under
.BR tank/cindys .
Set an
.B ACL
similar to the following syntax to
provide mount point access:
.sp
.in +2
.nf
# \fBchmod A+user:cindys:add_subdirectory:allow /tank/cindys\fR
.fi
.in -2
.sp

.LP
\fBExample 19\fR Delegating Create Time Permissions on a ZFS Dataset
.sp
.LP
The following example shows how to grant anyone in the group \fBstaff\fR to
create file systems in
.BR tank/users .
This syntax also allows staff
members to destroy their own file systems, but not destroy anyone else's
file system. The permissions on
.B tank/users
are also displayed.

.sp
.in +2
.nf
# \fB# zfs allow staff create,mount tank/users\fR
# \fBzfs allow -c destroy tank/users\fR
# \fBzfs allow tank/users\fR
-------------------------------------------------------------
Create time permissions on (tank/users)
          create,destroy
Local+Descendent permissions on (tank/users)
          group staff create,mount
-------------------------------------------------------------
.fi
.in -2
.sp

.LP
\fBExample 20\fR Defining and Granting a Permission Set on a ZFS Dataset
.sp
.LP
The following example shows how to define and grant a permission set on the
\fBtank/users\fR file system. The permissions on \fBtank/users\fR are also
displayed.

.sp
.in +2
.nf
# \fBzfs allow -s @pset create,destroy,snapshot,mount tank/users\fR
# \fBzfs allow staff @pset tank/users\fR
# \fBzfs allow tank/users\fR
-------------------------------------------------------------
Permission sets on (tank/users)
        @pset create,destroy,mount,snapshot
Create time permissions on (tank/users)
        create,destroy
Local+Descendent permissions on (tank/users)
        group staff @pset,create,mount
-------------------------------------------------------------
.fi
.in -2
.sp

.LP
\fBExample 21\fR Delegating Property Permissions on a ZFS Dataset
.sp
.LP
The following example shows to grant the ability to set quotas and
reservations on the
.B users/home
file system. The permissions on
\fBusers/home\fR are also displayed.

.sp
.in +2
.nf
# \fBzfs allow cindys quota,reservation users/home\fR
# \fBzfs allow users/home\fR
-------------------------------------------------------------
Local+Descendent permissions on (users/home)
        user cindys quota,reservation
-------------------------------------------------------------
cindys% \fBzfs set quota=10G users/home/marks\fR
cindys% \fBzfs get quota users/home/marks\fR
NAME              PROPERTY  VALUE             SOURCE
users/home/marks  quota     10G               local
.fi
.in -2
.sp

.LP
\fBExample 22\fR Removing ZFS Delegated Permissions on a ZFS Dataset
.sp
.LP
The following example shows how to remove the snapshot permission from the
\fBstaff\fR group on the \fBtank/users\fR file system. The permissions on
\fBtank/users\fR are also displayed.

.sp
.in +2
.nf
# \fBzfs unallow staff snapshot tank/users\fR
# \fBzfs allow tank/users\fR
-------------------------------------------------------------
Permission sets on (tank/users)
        @pset create,destroy,mount,snapshot
Create time permissions on (tank/users)
        create,destroy
Local+Descendent permissions on (tank/users)
        group staff @pset,create,mount
-------------------------------------------------------------
.fi
.in -2
.sp

.SH EXIT STATUS
.sp
.LP
The following exit values are returned:
.sp
.ne 2
.mk
.na
.B 0
.ad
.sp .6
.RS 4n
Successful completion.
.RE

.sp
.ne 2
.mk
.na
.B 1
.ad
.sp .6
.RS 4n
An error occurred.
.RE

.sp
.ne 2
.mk
.na
.B 2
.ad
.sp .6
.RS 4n
Invalid command line options were specified.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWzfsu
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR ssh (1),
.BR iscsitadm (1M),
.BR mount (1M),
.BR share (1M),
.BR sharemgr (1M),
.BR unshare (1M),
\fBzonecfg\fR(1M), \fBzpool\fR(1M),
.BR chmod (2),
.BR stat (2),
.BR write (2),
\fBfsync\fR(3C),
\fBdfstab\fR(4), \fBattributes\fR(5)
.sp
.LP
See the
.BR gzip (1)
man page, which is not part of the SunOS man page
collection.
.sp
.LP
For information about using the
.B ZFS
web-based management tool and
other
.B ZFS
features, see the \fISolaris ZFS Administration Guide\fR.
