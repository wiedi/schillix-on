'\" te
.\" Copyright (c) 2003, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH embedded_su 1M "10 Feb 2005" "SunOS 5.11" "System Administration Commands"
.SH NAME
embedded_su \- allow an application to prompt for credentials and execute
commands as the super user or another user
.SH SYNOPSIS
.LP
.nf
\fB/usr/lib/embedded_su\fR [\fB-\fR] [\fIusername\fR [arg.\|.\|.]]
.fi

.SH DESCRIPTION
.sp
.LP
The
.B embedded_su
command allows an application to prompt the user for
security credentials and then use those credentials to execute a program as
another user or role (see
.BR rbac (5)
for information on role-based access
control). The default
.I username
is
.B root
(super user).
.sp
.LP
.B embedded_su
is identical to
.BR su "(1M), except that the user"
interaction is packaged in a form suitable for another program to interpret
and display. Typically,
.B embedded_su
would be used to allow a graphical
program to prompt for the super user password and execute a command as the
super user, without requiring that the requesting program be run as the
super user.
.SS "PROTOCOL"
.sp
.LP
.B embedded_su
implements a simple protocol over standard input,
standard output, and standard error. This protocol consists of three phases,
roughly corresponding to
.B PAM
initialization, the
.B PAM
dialog, and
.B PAM
completion.
.SS "Phase 1: Initialization"
.sp
.LP
After starting
.BR embedded_su ,
the application must send an
initialization block on
.BR embedded_su "'s standard input. This block is a"
text block, as described under "Text Blocks". There are currently no
initialization parameters defined; the application should send an empty
block by sending a line consisting solely of a period (.).
.SS "Phase 2: Conversation"
.sp
.LP
.B embedded_su
then emits zero or more conversation blocks on its
standard output. Each conversation block may require zero or more
responses.
.sp
.LP
A conversation block starts with a line consisting of the word
.BR CONV ,
followed by whitespace, followed by the number of messages in the
conversation block as a decimal integer. The number of messages may be
followed by whitespace and additional data. This data, if present, must be
ignored.
.sp
.LP
Each message consists of a line containing a header followed by a text
block, as described under "Text Blocks". A single newline is appended to
each message, allowing the message to end with a line that does not end with
a newline.
.sp
.LP
A message header line consists of a
.B PAM
message style name, as
described in
.BR pam_start "(3PAM). The message header values are:"
.sp
.ne 2
.mk
.na
.B PAM_PROMPT_ECHO_OFF
.ad
.RS 23n
.rt
The application is to prompt the user for a value, with echoing disabled.
.RE

.sp
.ne 2
.mk
.na
.B PAM_PROMPT_ECHO_ON
.ad
.RS 23n
.rt
The application is to prompt the user for a value, with echoing enabled.
.RE

.sp
.ne 2
.mk
.na
.B PAM_ERROR_MSG
.ad
.RS 23n
.rt
The application is to display the message in a form appropriate for
displaying an error.
.RE

.sp
.ne 2
.mk
.na
.B PAM_TEXT_INFO
.ad
.RS 23n
.rt
The application is to display the message in a form appropriate for general
information.
.RE

.sp
.LP
The
.B PAM
message style may be followed by whitespace and additional
data. This data, if present, must be ignored.
.sp
.LP
After writing all of the messages in the conversation block, if any of them
were
.B PAM_PROMPT_ECHO_OFF
or
.BR PAM_PROMPT_ECHO_ON ,
.B embedded_su
waits for the response values. It expects the response
values one per line, in the order the messages were given.
.SS "Phase 3: Completion"
.sp
.LP
After zero or more conversation blocks,
.B embedded_su
emits a result
block instead of a conversation block.
.sp
.LP
Upon success,
.B embedded_su
emits a single line containing the word
"\fBSUCCESS\fR". The word \fBSUCCESS\fR may be followed by whitespace and
additional data. This data, if present, must be ignored.
.sp
.LP
Upon failure,
.B embedded_su
emits a single line containing the word
"\fBERROR\fR", followed by a text block as described under "Text Bocks". The
text block gives an error message. The word
.B ERROR
may be followed by
whitespace and additional data. This data, if present, must be ignored.
.SS "Text Blocks"
.sp
.LP
Initialization blocks, message blocks, and error blocks are all text
blocks. These are blocks of text that are terminated by a line containing a
single period (.). Lines in the block that begin with a "." have an extra
"." prepended to them.
.SS "Internationalization"
.sp
.LP
All messages are localized to the current locale; no further localization
is required.
.SS "SECURITY"
.sp
.LP
.B embedded_su
uses
.BR pam (3PAM)
for authentication, account
management, and session management. Its primary function is to export the
.B PAM
conversation mechanism to an unprivileged program. Like
.BR su (1M),
the
.B PAM
configuration policy can be used to control
\fBembedded_su\fR. The \fBPAM\fR service name used is "embedded_su".
.sp
.LP
.B embedded_su
is almost exactly equivalent to
.BR su (1M)
for security
purposes. The only exception is that it is slightly easier to use
.B embedded_su
in writing a malicious program that might trick a user
into providing secret data. For those sites needing maximum security,
potentially at the expense of application functionality, the EXAMPLES
section shows how to disable
.BR embedded_su .
.SH EXAMPLES
.sp
.LP
In the following examples, left angle brackets (<<<) indicate a line
written by
.B embedded_su
and read by the invoking application. Right
angle brackets (>>>) indicate a line written by the application and read by
.BR embedded_su .
.LP
.B Example 1
Executing a command with the Correct Password
.sp
.LP
The following example shows an attempt to execute "somecommand" as
"someuser", with the correct password supplied:

.sp
.in +2
.nf
 /usr/lib/embedded_su someuser -c somecommand
    >>>.
    <<<CONV 1
    <<<PAM_PROMPT_ECHO_OFF
    <<<Password:
    <<<.
    >>>[ correct password ]
    <<<SUCCESS
    [ somecommand executes  ]
.fi
.in -2
.sp

.LP
.B Example 2
Executing a command with the Incorrect Password
.sp
.LP
The following example shows an attempt to execute "somecommand" as
"someuser", with the incorrect password supplied:

.sp
.in +2
.nf
 /usr/lib/embedded_su someuser -c somecommand
    >>>.
    <<<CONV 1
    <<<PAM_PROMPT_ECHO_OFF
    <<<Password:
    <<<.
    >>>[ incorrect password ]
    [ delay ]
    <<<ERROR
    <<<embedded_su:Sorry
    <<<.
    [ exit ]
.fi
.in -2
.sp

.LP
.B Example 3
Message Examples
.sp
.LP
A
.B pam_message
structure with
.I msg_style
equal to
\fBPAM_TEXT_INFO\fR and \fBmsg\fR equal to "foo" produces:

.sp
.in +2
.nf
PAM_TEXT_INFO
foo
\&.
.fi
.in -2
.sp

.sp
.LP
A
.B pam_message
structure with
.I msg_style
equal to
\fBPAM_ERROR_MESSAGE\fR and \fBmsg\fR equal to "bar\en" produces:

.sp
.in +2
.nf
PAM_ERROR_MESSAGE
bar
[ blank line ]
\&.
.fi
.in -2
.sp

.sp
.LP
A
.B pam_message
structure with
.I msg_style
equal to
\fBPAM_ERROR_MESSAGE\fR and \fBmsg\fR equal to "aaa\enbbb" produces:

.sp
.in +2
.nf
PAM_ERROR_MESSAGE
aaa
bbb
\&.
.fi
.in -2
.sp

.sp
.LP
A
.B pam_message
structure with
.I msg_style
equal to
\fBPAM_TEXT_INFO\fR and \fBmsg\fR equal to "" produces:

.sp
.in +2
.nf
PAM_TEXT_INFO
[ blank line ]
\&.
.fi
.in -2
.sp

.sp
.LP
A
.B pam_message
structure with
.I msg_style
equal to
.B PAM_TEXT_INFO
and
.B msg
equal to NULL produces:

.sp
.in +2
.nf
PAM_TEXT_INFO
\&.
.fi
.in -2
.sp

.LP
.B Example 4
Disabling embedded_su
.sp
.LP
To disable
.BR embedded_su ,
add a line to the
.B /etc/pam.conf
file
similar to:

.sp
.in +2
.nf
embedded_su  auth  requisite  pam_deny.so.1
.fi
.in -2
.sp

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
_
Interface StabilityStable
.TE

.SH SEE ALSO
.sp
.LP
.BR su (1M),
.BR pam (3PAM),
.BR pam_start (3PAM),
.BR attributes (5),
.BR rbac (5)
