'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH infocmp 1M "5 Jul 1990" "SunOS 5.11" "System Administration Commands"
.SH NAME
infocmp \- compare or print out terminfo descriptions
.SH SYNOPSIS
.LP
.nf
\fB/usr/bin/infocmp\fR [\fB-d\fR] [\fB-c\fR] [\fB-n\fR] [\fB-I\fR] [\fB-L\fR] [\fB-C\fR] [\fB-r\fR] [\fB-u\fR]
     [\fB-s\fR | d | i | l | c] [\fB-v\fR] [\fB-V\fR] [\fB-1\fR] [\fB-w\fR \fIwidth\fR]
     [\fB-A\fR \fI directory\fR] [\fB-B\fR \fIdirectory\fR] [\fItermname\fR]...
.fi

.SH DESCRIPTION
.sp
.LP
.B infocmp
compares a binary
.B terminfo
entry with other terminfo
entries, rewrites a
.B terminfo
description to take advantage of the
.B use=
terminfo field, or prints out a
.B terminfo
description from
the binary file (
.B term
) in a variety of formats. It displays boolean
fields first, then numeric fields, followed by the string fields. If no
options are specified and zero, or one
.I termname
is specified, the
.B -I
option is assumed. If more than one
.I termname
is specified,
the
.B -d
option is assumed.
.SH OPTIONS
.sp
.LP
The
.B "-d ,"
.B -c ,
and
.B -n
options can be used for
comparisons. \fBinfocmp\fR compares the \fBterminfo\fR description of the
first terminal
.I termname
with each of the descriptions given by the
entries for the other terminal's
.IR termname .
If a capability is defined
for only one of the terminals, the value returned will depend on the type of
the capability:
.B F
for boolean variables, \fB\(mi1\fR for integer
variables, and
.I NULL
for string variables.
.sp
.ne 2
.mk
.na
.B -d
.ad
.RS 6n
.rt
Produce a list of each capability that is different between two entries.
This option is useful to show the difference between two entries, created by
different people, for the same or similar terminals.
.RE

.sp
.ne 2
.mk
.na
.B -c
.ad
.RS 6n
.rt
Produce a list of each capability that is common between two entries.
Capabilities that are not set are ignored. This option can be used as a
quick check to see if the
.B -u
option is worth using.
.RE

.sp
.ne 2
.mk
.na
.B -n
.ad
.RS 6n
.rt
Produce a list of each capability that is in neither entry. If no
.I termname
is given, the environment variable
.B TERM
will be used
for both of the \fItermname\fRs. This can be used as a quick check to see if
anything was left out of a description.
.RE

.sp
.LP
The
.B "-I ,"
.B -L ,
and
.B -C
options will produce a
source listing for each terminal named.
.sp
.ne 2
.mk
.na
.B -I
.ad
.RS 6n
.rt
Use the
.B terminfo
names.
.RE

.sp
.ne 2
.mk
.na
.B -L
.ad
.RS 6n
.rt
Use the long C variable name listed in <
.B term.h
>.
.RE

.sp
.ne 2
.mk
.na
.B -C
.ad
.RS 6n
.rt
Use the
.B termcap
names. The source produced by the
.B -C
option may
be used directly as a
.B termcap
entry, but not all of the parameterized
strings may be changed to the
.B termcap
format.
.B infocmp
will
attempt to convert most of the parameterized information, but anything not
converted will be plainly marked in the output and commented out. These
should be edited by hand.
.RE

.sp
.ne 2
.mk
.na
.B -r
.ad
.RS 6n
.rt
When using
.B "-C ,"
put out all capabilities in
.BR termcap
form.
.RE

.sp
.LP
If no
.I termname
is given, the environment variable
.B TERM
will be
used for the terminal name.
.sp
.LP
All padding information for strings will be collected together and placed
at the beginning of the string where
.B termcap
expects it. Mandatory
padding (padding information with a trailing '/') will become optional.
.sp
.LP
All
.B termcap
variables no longer supported by
.B "terminfo ,"
but are
derivable from other
.B terminfo
variables, will be displayed.  Not all
.B terminfo
capabilities will be translated; only those variables which
were part of
.B termcap
will normally be displayed. Specifying the
.B -r
option will take off this restriction, allowing all capabilities to
be displayed in
.B termcap
form.
.sp
.LP
Note that because padding is collected to the beginning of the capability,
not all capabilities are displayed. Mandatory padding is not supported.
Because
.B termcap
strings are not as flexible, it is not always possible
to convert a
.B terminfo
string capability into an equivalent
.B termcap
format. A subsequent conversion of the
.B termcap
file back
into
.B terminfo
format will not necessarily reproduce the original
.B terminfo
source.
.sp
.LP
Some common \fBterminfo\fR parameter sequences, their \fBtermcap\fR
equivalents, and some terminal types which commonly have such sequences,
are:
.sp
.in +2
.nf
\fBterminfo     termcap\fR      Representative Terminals
\fB%p1%c	%.\fR	adm
\fB%p1%d	%d\fR	hp, ANSI standard, vt100
\fB%p1%'x'%+%c	%+x\fR	concept
\fB%i	%i\fR	ANSI standard, vt100
\fB%p1%?%'x'%>%t%p1%'y'%+%;	%>xy\fR	concept
\fB%p2\fR is printed before \fB%p1	%r\fR	hp
.fi
.in -2
.sp

.sp
.ne 2
.mk
.na
.B -u
.ad
.RS 6n
.rt
Produce a
.B terminfo
source description of the first terminal
.I termname
which is relative to the sum of the descriptions given by the
entries for the other terminals' \fItermname\fRs. It does this by analyzing
the differences between the first
.I termname
and the other
.I termnames
and producing a description with
.B use=
fields for the
other terminals. In this manner, it is possible to retrofit generic
.B terminfo
entries into a terminal's description. Or, if two similar
terminals exist, but were coded at different times, or by different people
so that each description is a full description, using
.B infocmp
will
show what can be done to change one description to be relative to the
other.
.RE

.sp
.LP
A capability is displayed with an at-sign (@) if it no longer exists in the
first
.IR termname ,
but one of the other
.I termname
entries contains a
value for it. A capability's value is displayed if the value in the first
.I termname
is not found in any of the other
.I termname
entries, or
if the first of the other
.I termname
entries that has this capability
gives a different value for that capability.
.sp
.LP
The order of the other
.I termname
entries is significant. Since the
.B terminfo
compiler
.B tic
does a left-to-right scan of the
capabilities, specifying two
.B use=
entries that contain differing
entries for the same capabilities will produce different results, depending
on the order in which the entries are given.
.B infocmp
will flag any
such inconsistencies between the other
.I termname
entries as they are
found.
.sp
.LP
Alternatively, specifying a capability
.I after
a
.B use=
entry that
contains, it will cause the second specification to be ignored. Using
.B infocmp
to recreate a description can be a useful check to make sure
that everything was specified correctly in the original source
description.
.sp
.LP
Another error that does not cause incorrect compiled files, but will slow
down the compilation time, is specifying superfluous
.B use=
fields.
.B infocmp
will flag any superfluous
.B use=
fields.
.sp
.ne 2
.mk
.na
.B -s
.ad
.RS 11n
.rt
Sorts the fields within each type according to the argument below:
.sp
.ne 2
.mk
.na
.B d
.ad
.RS 5n
.rt
Leave fields in the order that they are stored in the \fBterminfo\fR
database.
.RE

.sp
.ne 2
.mk
.na
.B i
.ad
.RS 5n
.rt
Sort by
.B terminfo
name.
.RE

.sp
.ne 2
.mk
.na
.B l
.ad
.RS 5n
.rt
Sort by the long C variable name.
.RE

.sp
.ne 2
.mk
.na
.B c
.ad
.RS 5n
.rt
Sort by the
.B termcap
name.
.RE

If the
.B -s
option is not given, the fields are sorted alphabetically
by the
.B terminfo
name within each type, except in the case of the
.B -C
or the
.B -L
options, which cause the sorting to be done by the
.B termcap
name or the long C variable name, respectively.
.RE

.sp
.ne 2
.mk
.na
.B -v
.ad
.RS 11n
.rt
Print out tracing information on standard error as the program runs.
.RE

.sp
.ne 2
.mk
.na
.B -V
.ad
.RS 11n
.rt
Print out the version of the program in use on standard error and exit.
.RE

.sp
.ne 2
.mk
.na
\fB\(mi1\fR
.ad
.RS 11n
.rt
Print the fields one to a line. Otherwise, the fields are printed several
to a line to a maximum width of 60 characters.
.RE

.sp
.ne 2
.mk
.na
\fB-w\fIwidth\fR
.ad
.RS 11n
.rt
Changes the output to
.I width
characters.
.RE

.sp
.LP
The location of the compiled
.B terminfo
database is taken from the
environment variable
.B TERMINFO
\&. If the variable is not
defined, or the terminal is not found in that location, the system
.B terminfo
database, usually in
.BR /usr/share/lib/terminfo ,
is used.
The options
.B -A
and
.B -B
may be used to override this location.
.sp
.ne 2
.mk
.na
.B -A
.I directory
.ad
.RS 16n
.rt
Set
.B TERMINFO
for the first
.IR termname .
.RE

.sp
.ne 2
.mk
.na
.B -B
.I directory
.ad
.RS 16n
.rt
Set
.B TERMINFO
for the other
.IR termname "s. With this,"
it is possible to compare descriptions for a terminal with the same name
located in two different databases. This is useful for comparing
descriptions for the same terminal created by different people.
.RE

.SH FILES
.sp
.ne 2
.mk
.na
.B /usr/share/lib/terminfo/?/*
.ad
.sp .6
.RS 4n
Compiled terminal description database.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
.TE

.SH SEE ALSO
.sp
.LP
.BR captoinfo (1M),
.BR tic (1M),
.BR curses (3CURSES),
.BR terminfo (4),
.BR attributes (5)
