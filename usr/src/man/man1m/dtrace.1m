'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH dtrace 1M "4 Aug 2009" "SunOS 5.11" "System Administration Commands"
.SH NAME
dtrace \- DTrace dynamic tracing compiler and tracing utility
.SH SYNOPSIS
.LP
.nf
\fBdtrace\fR [\fB-32\fR | \fB-64\fR] [\fB-aACeFGHhlqSvVwZ\fR] [\fB-b\fR \fIbufsz\fR] [\fB-c\fR \fIcmd\fR]
     [\fB-D\fR \fIname\fR [\fI=value\fR]] [\fB-I\fR \fIpath\fR] [\fB-L\fR \fIpath\fR] [\fB-o\fR \fIoutput\fR]
     [\fB-s\fR \fIscript\fR] [\fB-U\fR \fIname\fR] [\fB-x\fR \fIarg\fR [\fI=val\fR]]
     [\fB-X\fR a | c | s | t] [\fB-p\fR \fIpid\fR]
     [\fB-P\fR \fIprovider\fR [[\fIpredicate\fR] \fIaction\fR]]
     [\fB-m\fR [\fIprovider:\fR] \fImodule\fR [[\fIpredicate\fR] \fIaction\fR]]
     [\fB-f\fR [[\fIprovider:\fR] \fImodule:\fR] \fIfunction\fR [[\fIpredicate\fR] \fIaction\fR]]
     [\fB-n\fR [[[\fIprovider:\fR] \fImodule:\fR] \fIfunction:\fR] \fIname\fR [[\fIpredicate\fR] \fIaction\fR]]
     [\fB-i\fR \fIprobe-id\fR [[\fIpredicate\fR] \fIaction\fR]]
.fi

.SH DESCRIPTION
.sp
.LP
DTrace is a comprehensive dynamic tracing framework for the Solaris
Operating System. DTrace provides a powerful infrastructure that permits
administrators, developers, and service personnel to concisely answer
arbitrary questions about the behavior of the operating system and user
programs.
.sp
.LP
The
.I "Solaris Dynamic Tracing Guide"
describes how to use DTrace to
observe, debug, and tune system behavior. Refer to this book for a detailed
description of DTrace features, including the bundled DTrace observability
tools, instrumentation providers, and the D programming language.
.sp
.LP
The
.B dtrace
command provides a generic interface to the essential
services provided by the DTrace facility, including:
.RS +4
.TP
.ie t \(bu
.el o
Options that list the set of probes and providers currently published by
DTrace
.RE
.RS +4
.TP
.ie t \(bu
.el o
Options that enable probes directly using any of the probe description
specifiers (provider, module, function, name)
.RE
.RS +4
.TP
.ie t \(bu
.el o
Options that run the D compiler and compile one or more D program files or
programs written directly on the command line
.RE
.RS +4
.TP
.ie t \(bu
.el o
Options that generate anonymous tracing programs
.RE
.RS +4
.TP
.ie t \(bu
.el o
Options that generate program stability reports
.RE
.RS +4
.TP
.ie t \(bu
.el o
Options that modify DTrace tracing and buffering behavior and enable
additional D compiler features
.RE
.sp
.LP
You can use
.B dtrace
to create D scripts by using it in a
.BR #!
declaration to create an interpreter file. You can also use
.B dtrace
to
attempt to compile D programs and determine their properties without
actually enabling tracing using the
.B -e
option. See
.BR OPTIONS .
See
the
.I "Solaris Dynamic Tracing Guide"
for detailed examples of how to use
the
.B dtrace
utility to perform these tasks.
.SH OPTIONS
.sp
.LP
The arguments accepted by the
.BR -P ,
.BR -m ,
.BR -f ,
.BR -n ,
and
.B -i
options can include an optional D language
.I predicate
enclosed
in slashes
.B //
and optional D language
.I action
statement list
enclosed in braces
.BR {} .
D program code specified on the command line
must be appropriately quoted to avoid interpretation of meta-characters by
the shell.
.sp
.LP
The following options are supported:
.sp
.ne 2
.mk
.na
.B -32
|
.B -64
.ad
.sp .6
.RS 4n
The D compiler produces programs using the native data model of the
operating system kernel. You can use the
.B "isainfo -b"
command to
determine the current operating system data model. If the
.B -32
option
is specified,
.B dtrace
forces the D compiler to compile a D program
using the 32-bit data model. If the
.B -64
option is specified,
.B dtrace
forces the D compiler to compile a D program using the 64-bit
data model. These options are typically not required as
.B dtrace
selects
the native data model as the default. The data model affects the sizes of
integer types and other language properties. D programs compiled for either
.RB "data model can be executed on both 32-bit and 64-bit kernels. The" " -32"
and
.B -64
options also determine the ELF file format (ELF32 or ELF64)
produced by the
.B -G
option.
.RE

.sp
.ne 2
.mk
.na
.B -a
.ad
.sp .6
.RS 4n
Claim anonymous tracing state and display the traced data. You can combine
the
.B -a
option with the
.B -e
option to force
.B dtrace
to exit
immediately after consuming the anonymous tracing state rather than
continuing to wait for new data. See the
.I "Solaris Dynamic Tracing Guide"
for more information about anonymous tracing.
.RE

.sp
.ne 2
.mk
.na
.B -A
.ad
.sp .6
.RS 4n
Generate
.BR driver.conf (4)
directives for anonymous tracing. This option
constructs a set of
.BR dtrace (7D)
configuration file directives to enable
the specified probes for anonymous tracing and then exits. By default,
.B dtrace
attempts to store the directives to the file
.BR /kernel/drv/dtrace.conf .
You can modify this behavior if you use the
.B -o
option to specify an alternate output file.
.RE

.sp
.ne 2
.mk
.na
.B -b
.I bufsz
.ad
.sp .6
.RS 4n
Set principal trace buffer size
.RI ( bufsz ).
The trace buffer size can
include any of the size suffixes
.BR k ,
.BR m ,
.BR g ,
or
.BR t .
If
the buffer space cannot be allocated,
.B dtrace
attempts to reduce the
buffer size or exit depending on the setting of the
.B bufresize
property.
.RE

.sp
.ne 2
.mk
.na
.B -c
.I cmd
.ad
.sp .6
.RS 4n
Run the specified command
.I cmd
and exit upon its completion. If more
than one
.B -c
option is present on the command line,
.B dtrace
exits
when all commands have exited, reporting the exit status for each child
process as it terminates. The process-ID of the first command is made
available to any D programs specified on the command line or using the
.B -s
option through the
.B $target
macro variable. Refer to the
.I Solaris Dynamic Tracing Guide
for more information on macro
variables.
.RE

.sp
.ne 2
.mk
.na
.B -C
.ad
.sp .6
.RS 4n
Run the C preprocessor
.BR cpp (1)
over D programs before compiling them.
You can pass options to the C preprocessor using the
.BR -D ,
.BR -U ,
.BR -I ,
and
.B -H
options. You can select the degree of C standard
conformance if you use the
.B -X
option. For a description of the set of
tokens defined by the D compiler when invoking the C preprocessor, see
.BR -X .
.RE

.sp
.ne 2
.mk
.na
\fB-D\fR
.I name
\fB[=\fIvalue\fB]\fR
.ad
.sp .6
.RS 4n
Define
.I name
when invoking
.BR cpp (1)
.RB "(enabled using the" " -C"
option). If you specify the equals sign
.RB ( = )
and additional
.IR value ,
the name is assigned the corresponding value. This option
passes the
.B -D
option to each
.B cpp
invocation.
.RE

.sp
.ne 2
.mk
.na
.B -e
.ad
.sp .6
.RS 4n
Exit after compiling any requests and consuming anonymous tracing state
(\fB-a\fR option) but prior to enabling any probes. You can combine this
option with the
.B -a
option to print anonymous tracing data and exit.
You can also combine this option with D compiler options. This combination
verifies that the programs compile without actually executing them and
enabling the corresponding instrumentation.
.RE

.sp
.ne 2
.mk
.na
\fB-f[[\fIprovider\fB:]\fImodule\fB:]\fIfunction\fB[[\fIpredicate\fB]\fIaction\fB]]\fR
.ad
.sp .6
.RS 4n
Specify function name to trace or list (\fB-l\fR option). The corresponding
argument can include any of the probe description forms
.IR provider:module:function ,
.IR module:function ,
or
.IR function .
Unspecified probe description fields are left blank and match any probes
regardless of the values in those fields. If no qualifiers other than
.I function
are specified in the description, all probes with the
corresponding \fIfunction\fR are matched. The
.B -f
argument can be
suffixed with an optional D probe clause. You can specify more than one
.B -f
option on the command line at a time.
.RE

.sp
.ne 2
.mk
.na
.B -F
.ad
.sp .6
.RS 4n
Coalesce trace output by identifying function entry and return. Function
entry probe reports are indented and their output is prefixed with
.BR -> .
Function return probe reports are unindented and their output is prefixed
with
.BR <- \&.
System call entry probe reports are indented and their
output is prefixed with
.BR => .
System call return probe reports are
unindented and their output is prefixed with
.BR <= \&.
.RE

.sp
.ne 2
.mk
.na
.B -G
.ad
.sp .6
.RS 4n
Generate an ELF file containing an embedded DTrace program. The DTrace
probes specified in the program are saved inside of a relocatable ELF object
which can be linked into another program. If the
.B -o
option is present,
the ELF file is saved using the pathname specified as the argument for this
operand. If the
.B -o
option is not present and the DTrace program is
contained with a file whose name is \fIfilename\fR.d\fR, then the ELF
file is saved using the name \fIfilename\fR.o\fR. Otherwise the ELF file
is saved using the name
.BR d.out .
.RE

.sp
.ne 2
.mk
.na
.B -H
.ad
.sp .6
.RS 4n
Print the pathnames of included files when invoking
.BR cpp (1)
(enabled
using the
.B -C
option). This option passes the
.B -H
option to each
.B cpp
invocation, causing it to display the list of pathnames, one for
each line, to
.BR stderr .
.RE

.sp
.ne 2
.mk
.na
.B -h
.ad
.sp .6
.RS 4n
Generate a header file containing macros that correspond to probes in the
specified provider definitions. This option should be used to generate a
header file that is included by other source files for later use with the
.B -G
option. If the
.B -o
option is present, the header file is saved
using the pathname specified as the argument for that option. If the
.B -o
option is not present and the DTrace program is contained with a
file whose name is \fIfilename\fB\&.d\fR, then the header file is saved
using the name \fIfilename\fB\&.h\fR.
.RE

.sp
.ne 2
.mk
.na
\fB-i\fR \fIprobe-id\fB[[\fIpredicate\fR] \fIaction\fB]\fR
.ad
.sp .6
.RS 4n
Specify probe identifier (\fIprobe-id\fR) to trace or list (\fB-l\fR
option). You can specify probe IDs using decimal integers as shown by
.BR "dtrace -l" .
The
.B -i
argument can be suffixed with an
optional D probe clause. You can specify more than one
.B -i
option at a
time.
.RE

.sp
.ne 2
.mk
.na
.B -I
.I path
.ad
.sp .6
.RS 4n
Add the specified directory
.I path
to the search path for
.B #include
files when invoking
.BR cpp (1)
.RB "(enabled using the" " -C"
option). This option passes the
.B -I
option to each
.BR cpp
invocation. The specified
.I path
is inserted into the search path ahead
of the default directory list.
.RE

.sp
.ne 2
.mk
.na
.B -L
.I path
.ad
.sp .6
.RS 4n
Add the specified directory
.I path
to the search path for DTrace
libraries. DTrace libraries are used to contain common definitions that can
be used when writing D programs. The specified
.I path
is added after the
default library search path.
.RE

.sp
.ne 2
.mk
.na
.B -l
.ad
.sp .6
.RS 4n
List probes instead of enabling them. If the
.B -l
option is specified,
.B dtrace
produces a report of the probes matching the descriptions given
using the
.BR -P ,
.BR -m ,
.BR -f ,
.BR -n ,
.BR -i ,
and
.BR -s
options. If none of these options are specified, this option lists all
probes.
.RE

.sp
.ne 2
.mk
.na
.B -m
[[\fIprovider:\fR]
.I module:
[[\fIpredicate\fR]
.IR action ]]
.ad
.sp .6
.RS 4n
Specify module name to trace or list (\fB-l\fR option). The corresponding
argument can include any of the probe description forms
.I provider:module
or
.IR module .
Unspecified probe description fields
are left blank and match any probes regardless of the values in those
fields. If no qualifiers other than
.I module
are specified in the
description, all probes with a corresponding
.I module
are matched. The
.B -m
argument can be suffixed with an optional D probe clause. More than
one
.B -m
option can be specified on the command line at a time.
.RE

.sp
.ne 2
.mk
.na
.B -n
[[[\fIprovider:\fR] \fImodule:\fR] \fIfunction:\fR] \fIname\fR
[[\fIpredicate\fR] \fIaction\fR]\fR
.ad
.sp .6
.RS 4n
Specify probe name to trace or list (\fB-l\fR option). The corresponding
argument can include any of the probe description forms
.IR provider:module:function:name ,
.IR module:function:name ,
.IR function:name ,
or
.IR name .
Unspecified probe description fields are
left blank and match any probes regardless of the values in those fields. If
no qualifiers other than
.I name
are specified in the description, all
probes with a corresponding
.I name
are matched. The
.B -n
argument
can be suffixed with an optional D probe clause. More than one
.B -n
option can be specified on the command line at a time.
.RE

.sp
.ne 2
.mk
.na
.B -o
.I output
.ad
.sp .6
.RS 4n
Specify the
.I output
file for the
.B -A
,
.BR -G ,
.BR -h ,
and
.B -l
options, or for the traced data itself. If the
.B -A
option is
present and
.B -o
is not present, the default output file is
.BR /kernel/drv/dtrace.conf .
If the
.B -G
option is present and the
\fB-s\fR option's argument is of the form \fIfilename\fR.d\fR and
\fB-o\fR is not present, the default output file is \fIfilename\fR.o\fR.
Otherwise the default output file is
.BR d.out .
.RE

.sp
.ne 2
.mk
.na
.B -p
.I pid
.ad
.sp .6
.RS 4n
Grab the specified process-ID
.IR pid ,
cache its symbol tables, and exit
upon its completion. If more than one
.B -p
option is present on the
command line,
.B dtrace
exits when all commands have exited, reporting
the exit status for each process as it terminates. The first process-ID is
made available to any D programs specified on the command line or using the
.B -s
option through the
.B $target
macro variable. Refer to the
.I Solaris Dynamic Tracing Guide
for more information on macro
variables.
.RE

.sp
.ne 2
.mk
.na
\fB-P\fR
.I provider
\fB[[\fIpredicate\fB]\fR
.IR action ]
.ad
.sp .6
.RS 4n
Specify provider name to trace or list (\fB-l\fR option). The remaining
probe description fields module, function, and name are left blank and match
any probes regardless of the values in those fields. The
.B -P
argument
can be suffixed with an optional D probe clause. You can specify more than
one
.B -P
option on the command line at a time.
.RE

.sp
.ne 2
.mk
.na
.B -q
.ad
.sp .6
.RS 4n
Set quiet mode.
.B dtrace
suppresses messages such as the number of
probes matched by the specified options and D programs and does not print
column headers, the CPU ID, the probe ID, or insert newlines into the
output. Only data traced and formatted by D program statements such as
.B trace()
and
.B printf()
is displayed to
.BR stdout .
.RE

.sp
.ne 2
.mk
.na
.B -s
.ad
.sp .6
.RS 4n
Compile the specified D program source file. If the
.B -e
option is
present, the program is compiled but instrumentation is not enabled. If the
.B -l
option is present, the program is compiled and the set of probes
matched by it is listed, but instrumentation is not enabled. If none of
.BR -e ,
.BR -l ,
.BR -G ,
or
.B -A
are present, the instrumentation
specified by the D program is enabled and tracing begins.
.RE

.sp
.ne 2
.mk
.na
.B -S
.ad
.sp .6
.RS 4n
Show D compiler intermediate code. The D compiler produces a report of the
intermediate code generated for each D program to
.BR stderr .
.RE

.sp
.ne 2
.mk
.na
.B -U
.I name
.ad
.sp .6
.RS 4n
Undefine the specified
.I name
when invoking
.BR cpp (1)
(enabled using
the
.B -C
option). This option passes the
.B -U
option to each
.B cpp
invocation.
.RE

.sp
.ne 2
.mk
.na
.B -v
.ad
.sp .6
.RS 4n
Set verbose mode. If the
.B -v
option is specified,
.B dtrace
produces a program stability report showing the minimum interface stability
and dependency level for the specified D programs. DTrace stability levels
are explained in further detail in the \fISolaris Dynamic Tracing Guide\fR.
.RE

.sp
.ne 2
.mk
.na
.B -V
.ad
.sp .6
.RS 4n
Report the highest D programming interface version supported by
.BR dtrace .
The version information is printed to
.B stdout
and the
.B dtrace
command exits. Refer to the
.I "Solaris Dynamic Tracing Guide"
for more information about DTrace versioning features.
.RE

.sp
.ne 2
.mk
.na
.B -w
.ad
.sp .6
.RS 4n
Permit destructive actions in D programs specified using the
.BR -s ,
.BR -P ,
.BR -m ,
.BR -f ,
.BR -n ,
or
.B -i
options. If the
.B -w
option is not specified,
.B dtrace
does not permit the compilation or
enabling of a D program that contains destructive actions.
.RE

.sp
.ne 2
.mk
.na
\fB-x\fR
.I arg
[\fI=val\fR]\fR
.ad
.sp .6
.RS 4n
Enable or modify a DTrace runtime option or D compiler option. The list of
options is found in the
.IR "Solaris Dynamic Tracing Guide" .
Boolean options
are enabled by specifying their name. Options with values are set by
separating the option name and value with an equals sign
.RB ( = ).
.RE

.sp
.ne 2
.mk
.na
.B "-X a | c | s | t
.ad
.sp .6
.RS 4n
Specify the degree of conformance to the ISO C standard that should be
selected when invoking
.BR cpp (1)
(enabled using the
.B -C
option). The
.B -X
option argument affects the value and presence of the
.B __STDC__
macro depending upon the value of the argument letter.
.sp
The
.B -X
option supports the following arguments:
.sp
.ne 2
.mk
.na
.B a
.ad
.RS 5n
.rt
Default. ISO C plus K&R compatibility extensions, with semantic changes
required by ISO C. This is the default mode if
.B -X
is not specified.
The predefined macro
.B __STDC__
has a value of 0 when
.B cpp
is
invoked in conjunction with the
.B -Xa
option.
.RE

.sp
.ne 2
.mk
.na
.B c
.ad
.RS 5n
.rt
Conformance. Strictly conformant ISO C, without K&R C compatibility
extensions. The predefined macro
.B __STDC__
has a value of 1 when
.B cpp
is invoked in conjunction with the
.B -Xc
option.
.RE

.sp
.ne 2
.mk
.na
.B s
.ad
.RS 5n
.rt
K&R C only. The macro
.B __STDC__
is not defined when
.B cpp
is
invoked in conjunction with the
.B -Xs
option.
.RE

.sp
.ne 2
.mk
.na
.B t
.ad
.RS 5n
.rt
Transition. ISO C plus K&R C compatibility extensions, without semantic
changes required by ISO C. The predefined macro
.B __STDC__
has a value
of 0 when
.B cpp
is invoked in conjunction with the
.B -Xt
option.
.RE

As the
.B -X
option only affects how the D compiler invokes the C
preprocessor, the
.B -Xa
and
.B -Xt
options are equivalent from the
perspective of D and both are provided only to ease re-use of settings from
a C build environment.
.sp
Regardless of the
.B -X
mode, the following additional C preprocessor
definitions are always specified and valid in all modes:
.RS +4
.TP
.ie t \(bu
.el o
.B __sun
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B __unix
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B __SVR4
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B __sparc
(on SPARC systems only)
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B __sparcv9
(on SPARC systems only when 64-bit programs are compiled)
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B __i386
(on x86 systems only when 32-bit programs are compiled)
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B __amd64
(on x86 systems only when 64-bit programs are compiled)
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fB__\fI`uname -s`\fR_\fI`uname -r`\fR (for example,
.BR __SunOS_5_10 )
.RE
.RS +4
.TP
.ie t \(bu
.el o
.B __SUNW_D=1
.RE
.RS +4
.TP
.ie t \(bu
.el o
.BI __SUNW_D_VERSION=0x MMmmmuuu
.sp
Where
.I MM
is the major release value in hexadecimal,
.I mmm
is the
minor release value in hexadecimal, and
.I uuu
is the micro release value
in hexadecimal. Refer to the
.I "Solaris Dynamic Tracing Guide"
for more
information about DTrace versioning.
.RE
.RE

.sp
.ne 2
.mk
.na
.B -Z
.ad
.sp .6
.RS 4n
Permit probe descriptions that match zero probes. If the
.B -Z
option is
not specified,
.B dtrace
reports an error and exits if any probe
descriptions specified in D program files (\fB-s\fR option) or on the
command line
.RB ( -P ,
.BR -m ,
.BR -f ,
.BR -n ,
or
.B -i
options)
contain descriptions that do not match any known probes.
.RE

.SH OPERANDS
.sp
.LP
You can specify zero or more additional arguments on the
.BR dtrace
command line to define a set of macro variables
.RB ( $1 ,
.BR $2 ,
and so
forth). The additional arguments can be used in D programs specified using
the
.B -s
option or on the command line. The use of macro variables is
described further in the
.IR "Solaris Dynamic Tracing Guide" .
.SH EXIT STATUS
.sp
.LP
The following exit values are returned:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 5n
.rt
Successful completion.
.sp
For D program requests, an exit status of
.B 0
indicates that programs
were successfully compiled, probes were successfully enabled, or anonymous
state was successfully retrieved.
.B dtrace
returns
.B 0
even if the
specified tracing requests encountered errors or drops.
.RE

.sp
.ne 2
.mk
.na
.B 1
.ad
.RS 5n
.rt
An error occurred.
.sp
For D program requests, an exit status of
.B 1
indicates that program
compilation failed or that the specified request could not be satisfied.
.RE

.sp
.ne 2
.mk
.na
.B 2
.ad
.RS 5n
.rt
Invalid command line options or arguments were specified.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWdtrc
_
Interface StabilitySee below.
.TE

.sp
.LP
The command-line syntax is Committed. The human-readable output is
Uncommitted.
.SH SEE ALSO
.sp
.LP
.BR cpp (1),
.BR isainfo (1),
.BR ssh (1),
.BR libdtrace (3LIB),
.BR driver.conf (4),
.BR attributes (5),
.BR dtrace (7D)
.sp
.LP
.I Solaris Dynamic Tracing Guide
.SH USAGE
.sp
.LP
When using the
.B -p
flag,
.B dtrace
stops the target processes while
it is inspecting them and reporting results. A process can do nothing while
it is stopped. This means that, if , for example, the X server is inspected
by
.B dtrace
running in a window under the X server's control, the whole
window system can become deadlocked, because the
.B proc
tool would be
attempting to display its results to a window that cannot be refreshed. In
such a case, logging in from another system using
.BR ssh (1)
and killing
the offending
.B proc
tool clears the deadlock.
