'\" te
.\" Copyright (C) 2008, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ipsecconf 1M "28 Sep 2009" "SunOS 5.11" "System Administration Commands"
.SH NAME
ipsecconf \- configure system wide IPsec policy
.SH SYNOPSIS
.LP
.nf
\fB/usr/sbin/ipsecconf\fR
.fi

.LP
.nf
\fB/usr/sbin/ipsecconf\fR \fB-a\fR \fIfile\fR [\fB-q\fR]
.fi

.LP
.nf
\fB/usr/sbin/ipsecconf\fR \fB-c\fR \fIfile\fR
.fi

.LP
.nf
\fB/usr/sbin/ipsecconf\fR  \fB-d\fR [\fB-i\fR \fItunnel-name\fR] {\fIindex\fR, \fItunnel-name\fR, \fIindex\fR}
.fi

.LP
.nf
\fB/usr/sbin/ipsecconf\fR  \fB-f\fR  [\fB-i\fR \fItunnel-name\fR]
.fi

.LP
.nf
\fB/usr/sbin/ipsecconf\fR  \fB-F\fR
.fi

.LP
.nf
\fB/usr/sbin/ipsecconf\fR  \fB-l\fR  [\fB-i\fR \fItunnel-name\fR] [\fB-n\fR]
.fi

.LP
.nf
\fB/usr/sbin/ipsecconf\fR  \fB-L\fR  [\fB-n\fR]
.fi

.SH DESCRIPTION
.sp
.LP
The
.B ipsecconf
utility configures the IPsec policy for a host or for
one of its tunnels. Once the policy is configured, all outbound and inbound
datagrams are subject to policy checks as they exit and enter the host or
tunnel. For the host policy, if no entry is found, no policy checks will be
completed, and all the traffic will pass through. For a tunnel, if no entry
is found and there is at least one entry for the tunnel, the traffic will
automatically drop. The difference in behavior is because of the assumptions
about IPsec tunnels made in many implementations. Datagrams that are being
forwarded will not be subjected to policy checks that are added using this
command. See
.BR ifconfig (1M)
and
.BR dladm (1M)
for information on how
to protect forwarded packets.  Depending upon the match of the policy entry,
a specific action will be taken.
.sp
.LP
This command can be run only by superuser.
.sp
.LP
Each entry can protect traffic in either one direction (requiring a pair of
entries) or by a single policy entry which installs the needed symmetric
.B sadb
rules.
.sp
.LP
When the command is issued without any arguments, the list of file policy
.RB "entries loaded are shown. To display the (" "spd p.e." "s) use the " -l 
option. Both will display the index number for the entry. To specify a
single tunnel's SPD, use the
.B -i
option in combination with
.BR -l .
To specify all SPDs, both host and for all tunnels, use
.BR -L .
.sp
.LP
Note, since one file policy entry
.RB ( FPE )
can generate multiple SPD pol
entries
.RB ( SPE s),
the list of FPEs may not show all the actual entries.
However, it is still useful in determining what what rules have been added
to get the spd into its current state.
.sp
.LP
You can use the
.B -d
option with the index to delete a given policy in
the system. If the
.B -d
option removes an FPE entry that produces
multiple SPEs, only then SPD with the same policy index as the FPE will be
removed. This can produce a situation where there may be SPEs when there are
no FPEs.
.sp
.LP
As with
.BR -l ,
.B -d
can use the
.B -i
flag to indicate a tunnel.
An alternate syntax is to specify a tunnel name, followed by a comma
.RB ( , ),
followed by an index. For example,
.BR ip.tun0,1 .
.sp
.LP
With no options, the entries are displayed in the order that they were
added, which is not necessarily the order in which the traffic match takes
place.
.sp
.LP
To view the order in which the traffic match will take place, use the
.B -l
option. The rules are ordered such that all bypass rules are
checked first, then ESP rules, then AH rules. After that, they are checked
in the order entered.
.sp
.LP
Policy entries are not preserved across system restarts. Permanent policy
entries should be added to
.BR /etc/inet/ipsecinit.conf .
This file is read
by the following
.BR smf (5)
service:
.sp
.in +2
.nf
svc:/network/ipsec/policy
.fi
.in -2
.sp

.sp
.LP
See
.B NOTES
for more information on managing IPsec security policy and
.B SECURITY
for issues in securing
.BR /etc/inet/ipsecinit.conf .
.SH OPTIONS
.sp
.LP
.B ipsecconf
supports the following options:
.sp
.ne 2
.mk
.na
.B -a
.I file
.ad
.sp .6
.RS 4n
Add the IPsec policy to the system as specified by each entry in the file.
An IPsec configuration file contains one or more entries that specify the
configuration. Once the policy is added, all outbound and inbound datagrams
are subject to policy checks.
.sp
Entries in the files are described in the  section below. Examples can be
found in the  section below.
.sp
Policy is latched for TCP/UDP sockets on which a
.BR connect (3SOCKET)
or
.BR accept (3SOCKET)
is issued. So, the addition of new policy entries may
not affect such endpoints or sockets. However, the policy will be latched
for a socket with an existing non-null policy. Thus, make sure that there
are no preexisting connections that will be subject to checks by the new
policy entries.
.sp
The feature of policy latching explained above may change in the future. It
is not advisable to depend upon this feature.
.RE

.sp
.ne 2
.mk
.na
.B -c
.I file
.ad
.sp .6
.RS 4n
Check the syntax of the configuration file and report any errors without
making any changes to the policy. This option is useful when debugging
configurations and when
.BR smf (5)
reports a configuration error. See
.BR SECURITY .
.RE

.sp
.ne 2
.mk
.na
.B -d
.I index
.ad
.sp .6
.RS 4n
Delete the host policy denoted by the index. The index is obtained by
invoking
.B ipsecconf
without any arguments, or with the
.B -l
option.
See DESCRIPTION for more information. Once the entry is deleted, all
outbound and inbound datagrams affected by this policy entry will not be
subjected to policy checks. Be advised that with connections for which the
policy has been latched, packets will continue to go out with the same
policy, even if it has been deleted. It is advisable to use the
.B -l
option to find the correct policy index.
.RE

.sp
.ne 2
.mk
.na
\fB-d\fR \fIname\fR,\fIindex\fR
.ad
.sp .6
.RS 4n
Delete the policy entry denoted by
.I index
on a tunnel denoted by
.IR name .
Since tunnels affect traffic that might originate off-node,
latching does not apply as it does in the host policy case. Equivalent to:
.B -d
.I index
.B -i
.IR name .
.RE

.sp
.ne 2
.mk
.na
.B -f
.ad
.sp .6
.RS 4n
Flush all the policies in the system. Constraints are similar to the
.B -d
option with respect to latching and host versus per-tunnel
behavior.
.RE

.sp
.ne 2
.mk
.na
.B -F
.ad
.sp .6
.RS 4n
Flush all policies on all tunnels and also flush all host policies.
.RE

.sp
.ne 2
.mk
.na
.B -i
.I name
.ad
.sp .6
.RS 4n
Specify a tunnel interface name for use with the
.BR -d ,
.BR -f ,
or
.B -l
flags.
.RE

.sp
.ne 2
.mk
.na
.B -l
.ad
.sp .6
.RS 4n
Listing of a single policy table, defaulting to the host policy. When
.B ipsecconf
is invoked without any arguments, a complete list of policy
entries with indexes added by the user since boot is displayed. The current
table can differ from the previous one if, for example, a multi-homed entry
was added or policy reordering occurred, or if a single rule entry generates
two
.B spd
rules In the case of a multi-homed entry, all the addresses
are listed explicitly. If a mask was not specified earlier but was instead
inferred from the address, it will be explicitly listed here. This option is
used to view policy entries in the correct order. The outbound and inbound
policy entries are listed separately.
.RE

.sp
.ne 2
.mk
.na
.B -L
.ad
.sp .6
.RS 4n
Lists all policy tables, including host policy and all tunnel instances
(including configured but unplumbed).
.sp
If
.B -i
is specified,
.B -L
lists the policy table for a specific
tunnel interface.
.RE

.sp
.ne 2
.mk
.na
.B -n
.ad
.sp .6
.RS 4n
Show network addresses, ports, protocols in numbers. The
.B -n
option
may only be used with the
.B -l
option.
.RE

.sp
.ne 2
.mk
.na
.B -q
.ad
.sp .6
.RS 4n
Quiet mode. Suppresses the warning message generated when adding
policies.
.RE

.SH OPERANDS
.sp
.LP
Each policy entry contains three parts specified as follows:
.sp
.in +2
.nf
{pattern} action {properties}
.fi
.in -2

.sp
.LP
or
.sp
.in +2
.nf
{pattern} action {properties} ["or" action {properties}]*
.fi
.in -2

.sp
.LP
Every policy entry begins on a new line and can span multiple lines. If an
entry exceeds the length of a line, you should split it only within a
"braced" section or immediately before the first (left-hand) brace of a
braced section. Avoid using the backslash character (\e). See EXAMPLES.
.sp
.LP
The
.I pattern
section, as shown in the syntax above, specifies the
traffic pattern that should be matched against the outbound and inbound
datagrams. If there is a match, a specific
.I action
determined by the
second argument will be taken, depending upon the
.I properties
of the
policy entry.
.sp
.LP
If there is an
.B or
in the rule (multiple action-properties for a given
pattern), a transmitter will use the first action-property pair that works,
while a receiver will use any that are acceptable.
.sp
.LP
.I pattern
and
.I properties
are name-value pairs where name and
value are separated by a <space>, <tab> or <newline>. Multiple name-value
pairs should be separated by <space>, <tab> or <newline>. The beginning and
.RB "end of the pattern and properties are marked by " { " and " } 
respectively.
.sp
.LP
Files can contain multiple policy entries. An unspecified name-value pair
in the
.I pattern
will be considered as a wildcard. Wildcard entries
match any corresponding entry in the datagram.
.sp
.LP
One thing to remember is that UDP port 500 is always bypassed regardless of
any policy entries. This is a requirement for
.BR in.iked (1M)
to work.
.sp
.LP
File can be commented by using a
.B #
as the first character. Comments
may be inserted either at the beginning or the end of a line.
.sp
.LP
The complete syntax of a policy entry is:
.sp
.in +2
.nf
policy ::= { <pattern1> } <action1> { <properties1> } |
     { <pattern2> } <action2> { <properties2> }
     [ 'or' <action2> { <properties2>} ]*

     pattern1 ::=  <pattern_name_value_pair1>*

     pattern2 ::=  <pattern_name_value_pair2>*

     action1 ::= apply | permit | bypass | pass
     action2 ::=  bypass | pass | drop | ipsec

     properties1 ::=   {<prop_name_value_pair1>}
     properties2 ::=   {<prop_name_value_pair2>}


     pattern_name_value_pair1 ::=
        saddr <address>/<prefix> |
        src  <address>/<prefix> |
        srcaddr <address>/<prefix> |
        smask <mask> |
        sport <port> |
        daddr <address>/<prefix> |
        dst <address>/<prefix> |
        dstaddr <address>/<prefix> |
        dmask <mask> |
        dport <port> |
        ulp <protocol> |
        proto <protocol> |
        type <icmp-type> |
        type <number>-<number> |
        code <icmp-code>
        code <number>-<number>
        tunnel <interface-name> |
        negotiate <tunnel,transport>

     pattern_name_value_pair2 ::=
        raddr <address>/<prefix> |
        remote <address>/<prefix> |
        rport <port> |
        laddr <address>/<prefix> |
        local <address>/<prefix> |
        lport <port> |
        ulp <protocol> |
        type <icmp-type> |
        type <number>-<number> |
        code <icmp-code> |
        code <number>-<number>
        proto <protocol>  |
        tunnel <interface-name> |
        negotiate <tunnel,transport> |
        dir <dir_val2>

     address ::=  <IPv4 dot notation> | <IPv6 colon notation> |
                  <String recognized by gethostbyname>|
                  <String recognized by getnetbyname>

     prefix ::=  <number>

     mask ::= <0xhexdigit[hexdigit]> | <0Xhexdigit[hexdigit]> |
              <IPv4 dot notation>

     port ::= <number>| <String recognized by getservbyname>

     protocol ::=  <number>| <String recognized by getprotobyname>

     prop_name_value_pair1 ::=
          auth_algs <auth_alg> |
          encr_algs <encr_alg> |
          encr_auth_algs <auth_alg> |
          sa <sa_val> |
          dir <dir_val1>

     prop_name_value_pair2 ::=
          auth_algs <auth_alg> |
          encr_algs <encr_alg> |
          encr_auth_algs <auth_alg> |
          sa <sa_val>

     auth_alg ::=  <auth_algname> ['(' <keylen> ')']
     auth_algname ::= any | md5 | hmac-md5 | sha | sha1 | hmac-sha |
                      hmac-sha1 | hmac-sha256 | hmac-sha384 |
                      hmac-sha512 |<number>

     encr_alg ::= <encr_algname> ['(' <keylen> ')']
     encr_algname ::= any | aes | aes-cbc | des | des-cbc | 3des |
                      3des-cbc | blowfish | blowfish-cbc | <number>

     keylen ::= <number> | <number>'..' | '..'<number> | <number>'..' \e
     <number>

     sa_val ::= shared | unique

     dir_val1 ::= out | in
     dir_val2 ::= out | in | both

     number ::= < 0 | 1 | 2 .\|.\|. 9> <number>
     icmp-type ::= <number> | unreach | echo | echorep | squench |
                   redir | timex | paramprob | timest | timestrep |
                   inforeq | inforep | maskreq | maskrep | unreach6 |
                   pkttoobig6 | timex6 | paramprob6 | echo6 | echorep6 |
                   router-sol6 | router-ad6 | neigh-sol6 | neigh-ad6 |
                   redir6

     icmp-code ::= <number> | net-unr | host-unr | proto-unr | port-unr |
                   needfrag | srcfail | net-unk | host-unk | isolate |
                   net-prohib | host-prohib | net-tos | host-tos |
                   filter-prohib | host-preced | cutoff-preced |
                   no-route6 | adm-prohib6 | addr-unr6 | port-unr6 |
                   hop-limex6 | frag-re-timex6 | err-head6 | unrec-head6 |
                   unreq-opt6
.fi
.in -2

.sp
.LP
Policy entries may contain the following (name value) pairs in the
.I pattern
field. Each (name value) pair may appear only once in given
policy entry.
.sp
.ne 2
.mk
.na
.B laddr/plen
.ad
.br
.na
.B local/plen
.ad
.sp .6
.RS 4n
The value that follows is the local address of the datagram with the prefix
length. Only plen leading bits of the source address of the packet will be
matched. plen is optional. Local means destination on incoming and source on
outgoing packets. The source address value can be a hostname as described in
getaddrinfo(3SOCKET) or a network name as described in
.BR getnetbyname (3XNET)
or a host address or network address in the
Internet standard dot notation. See
.BR inet_addr (3XNET).
If a hostname is
given and getaddrinfo(3SOCKET) returns multiple addresses for the host, then
policy will be added for each of the addresses with other entries remaining
the same.
.RE

.sp
.ne 2
.mk
.na
.B raddr/plen
.ad
.br
.na
.B remote/plen
.ad
.sp .6
.RS 4n
The value that follows is the remote address of the datagram with the
prefix length. Only plen leading bits of the remote address of the packet
will be matched. plen is optional. Remote means source on incoming packets
and destination on outgoing packets. The remote address value can be a
hostname as described in
.BR getaddrinfo (3SOCKET)
or a network name as
described in
.BR getnetbyname "(3XNET) or a host address or network address"
in the Internet standard dot notation. See
.BR inet_addr (3XNET).
If a
hostname is given and
.BR getaddrinfo (3SOCKET)
returns multiple addresses
for the host, then policy will be added for each of the addresses with other
entries remaining the same.
.RE

.sp
.ne 2
.mk
.na
.B src/plen
.ad
.br
.na
.B srcaddr/plen
.ad
.br
.na
.B saddr/plen
.ad
.sp .6
.RS 4n
The value that follows is the source address of the datagram with the
prefix length. Only
.I plen
leading bits of the source address of the
packet will be matched.
.I plen
is optional.
.sp
The source address value can be a hostname as described in
.BR getaddrinfo (3SOCKET)
or a network name as described in
.BR getnetbyname (3XNET)
or a host address or network address in the
Internet standard dot notation. See
.BR inet_addr (3XNET).
.sp
If a hostname is given and
.BR getaddrinfo (3SOCKET)
returns multiple
addresses for the host, then policy will be added for each of the addresses
with other entries remaining the same.
.RE

.sp
.ne 2
.mk
.na
.B daddr/plen
.ad
.br
.na
.B dest/plen
.ad
.br
.na
.B dstaddr/plen
.ad
.sp .6
.RS 4n
The value that follows is the destination address of the datagram with the
prefix length. Only
.I plen
leading bits of the destination address of
the packet will be matched.
.I plen
is optional.
.sp
See
.I saddr
for valid values that can be given. If multiple source and
destination addresses are found, then a policy entry that covers each source
address-destination address pair will be added to the system.
.RE

.sp
.ne 2
.mk
.na
.I smask
.ad
.sp .6
.RS 4n
For IPv4 only. The value that follows is the source mask. If prefix length
is given with
.IR saddr ,
this should not be given. This can be represented
either in hexadecimal number with a leading
.B 0x
or
.BR 0X ,
for
example,
.BR 0xffff0000 ,
.B 0Xffff0000
or in the Internet decimal dot
notation, for example,
.B 255.255.0.0
and
.BR 255.255.255.0 .
The mask
should be contiguous and the behavior is not defined for non-contiguous
masks.
.sp
.I smask
is considered only when
.I saddr
is given.
.sp
For both IPv4 and IPv6 addresses, the same information can be specified as
a
.I slen
value attached to the
.I saddr
parameter.
.RE

.sp
.ne 2
.mk
.na
.I dmask
.ad
.sp .6
.RS 4n
Analogous to
.IR smask.
.RE

.sp
.ne 2
.mk
.na
.I lport
.ad
.sp .6
.RS 4n
The value that follows is the local port of the datagram. This can be
either a port number or a string searched with a NULL proto argument, as
described in getservbyname(3XNET)
.RE

.sp
.ne 2
.mk
.na
.I rport
.ad
.sp .6
.RS 4n
The value that follows is the remote port of the datagram. This can be
either a port number or a string searched with a NULL proto argument, as
described in getservbyname(3XNET)
.RE

.sp
.ne 2
.mk
.na
.I sport
.ad
.sp .6
.RS 4n
The value that follows is the source port of the datagram. This can be
either a port number or a string searched with a
.B NULL
proto argument,
as described in
.BR getservbyname (3XNET)
.RE

.sp
.ne 2
.mk
.na
.I dport
.ad
.sp .6
.RS 4n
The value that follows is the destination port of the datagram. This can be
either a port number or a string as described in
.BR getservbyname (3XNET)
searched with
.B NULL
proto argument.
.RE

.sp
.ne 2
.mk
.na
.B proto
.I ulp
.ad
.sp .6
.RS 4n
The value that follows is the Upper Layer Protocol that this entry should
be matched against. It could be a number or a string as described in
.BR getprotobyname (3XNET).
If no smask or plen is specified, a plen of 32
for IPv4 or 128 for IPv6 will be used, meaning a host. If the
.I ulp
is
.B icmp
or
.BR ipv6-icmp ,
any action applying IPsec must be the same
for all
.B icmp
rules.
.RE

.sp
.ne 2
.mk
.na
.B type
.I num
or \fInum\fR-\fInum\fR
.ad
.sp .6
.RS 4n
The value that follows is the ICMP type that this entry should be matched
against.
.B type
must be a number from 0 to 255, or one of the
appropriate
.B icmp-type
keywords. Also,
.I ulp
must be present and
must specify either
.B icmp
or
.BR ipv6-icmp .
A range of types can be
specified with a hyphen separating numbers.
.RE

.sp
.ne 2
.mk
.na
.B code
.I num
or \fInum\fR-\fInum\fR
.ad
.sp .6
.RS 4n
The value that follows is the ICMP code that this entry should be matched
against. The value following the keyword
.B code
must be a number from 0
to 254 or one of the appropriate
.B icmp-code
.RB "keywords. Also," " type"
must be present. A range of codes can be specified with a hyphen separating
numbers.
.RE

.sp
.ne 2
.mk
.na
.B tunnel
.I name
.ad
.sp .6
.RS 4n
Specifies a tunnel network interface, as configured with
.BR ifconfig (1M).
If a tunnel of
.I name
does not yet exist, the policy
entries are added anyway, and joined with the tunnel state when it is
created. If a tunnel is unplumbed, its policy entries disappear.
.RE

.sp
.ne 2
.mk
.na
.B negotiate
.I tunnel
.ad
.br
.na
.B negotiate
.I transport
.ad
.sp .6
.RS 4n
For per-tunnel security, specify whether the IPsec SAs protecting the
traffic should be tunnel-mode SAs or transport-mode SAs. If transport-mode
SAs are specified, no addresses can appear in the policy entry.
Transport-mode is backward compatible with Solaris 9, and tunnel IPsec
policies configured with
.BR ifconfig (1M)
will show up as transport mode
entries here.
.RE

.sp
.LP
Policy entries may contain the following (name-value) pairs in the
properties field. Each (name-value) pair may appear only once in a given
policy entry.
.sp
.ne 2
.mk
.na
.B auth_algs
.ad
.sp .6
.RS 4n
An acceptable value following this implies that IPsec
.B AH
header will
be present in the outbound datagram. Values following this describe the
authentication algorithms that will be used while applying the IPsec
.B AH
on outbound datagrams and verified to be present on inbound
datagrams. See
.IR "RFC 2402" .
.sp
This entry can contain either a string or a decimal number.
.sp
.ne 2
.mk
.na
.B string
.ad
.sp .6
.RS 4n
This should be either
.B MD5
or
.B HMAC-MD5
denoting the
.B HMAC-MD5
algorithm as described in
.IR "RFC 2403" ,
and
.BR SHA1 ,
or
.B HMAC-SHA1
or
.B SHA
or
.B HMAC-SHA
denoting the
.BR HMAC-SHA
algorithm described in
.IR "RFC 2404" .
You can use the
.BR ipsecalgs (1M)
command to obtain the complete list of authentication algorithms.
.sp
The string can also be
.BR ANY ,
which denotes no-preference for the
algorithm. Default algorithms will be chosen based upon the
.BR SA s
available at this time for manual
.BR SA "s and the key negotiating daemon"
for automatic
.BR SA "s. Strings are not case-sensitive."
.RE

.sp
.ne 2
.mk
.na
.B number
.ad
.sp .6
.RS 4n
A number in the range 1-255. This is useful when new algorithms can be
dynamically loaded.
.RE

If
.I auth_algs
is not present, the
.B AH
header will not be present
in the outbound datagram, and the same will be verified for the inbound
datagram.
.RE

.sp
.ne 2
.mk
.na
.B encr_algs
.ad
.sp .6
.RS 4n
An acceptable value following this implies that IPsec
.B ESP
header will
be present in the outbound datagram. The value following this describes the
encryption algorithms that will be used to apply the IPsec
.BR ESP
protocol to outbound datagrams and verify it to be present on inbound
datagrams. See
.IR "RFC 2406" .
.sp
This entry can contain either a string or a decimal number. Strings are not
case-sensitive.
.sp
.ne 2
.mk
.na
.B string
.ad
.sp .6
.RS 4n
Can be one of the following:
.sp

.sp
.TS
tab();
cw(1.83i) cw(1.83i) cw(1.83i)
lw(1.83i) lw(1.83i) lw(1.83i)
.
string value:Algorithm Used:See RFC:
_
DES or DES-CBCDES-CBC2405
3DES or 3DES-CBC3DES-CBC2451
BLOWFISH or BLOWFISH-CBCBLOWFISH-CBC2451
AES or AES-CBCAES-CBC2451
.TE

You can use the
.BR ipsecalgs (1M)
command to obtain the complete list of
authentication algorithms.
.sp
The value can be
.BR NULL ,
which implies a
.B NULL
encryption,
pursuant to
.IR "RFC 2410" .
This means that the payload will not be
encrypted. The string can also be
.BR ANY ,
which indicates no-preference
for the algorithm. Default algorithms will be chosen depending upon the SAs
available at the time for manual SAs and upon the key negotiating daemon for
automatic SAs. Strings are not case-sensitive.
.RE

.sp
.ne 2
.mk
.na
.B number
.ad
.sp .6
.RS 4n
A decimal number in the range 1-255. This is useful when new algorithms can
be dynamically loaded.
.RE

.RE

.sp
.ne 2
.mk
.na
.B encr_auth_algs
.ad
.sp .6
.RS 4n
An acceptable value following
.B encr_auth_algs
implies that the IPsec
.B ESP
header will be present in the outbound datagram. The values
following
.B encr_auth_algs
describe the authentication algorithms that
will be used while applying the IPsec
.B ESP
protocol on outbound
datagrams and verified to be present on inbound datagrams. See \fIRFC 2406\fR. This entry can contain either a string or a number. Strings are
case-insensitive.
.sp
.ne 2
.mk
.na
.B string
.ad
.sp .6
.RS 4n
Valid values are the same as the ones described for
.BR auth_algs
above.
.RE

.sp
.ne 2
.mk
.na
.B number
.ad
.sp .6
.RS 4n
This should be a decimal number in the range 1-255. This is useful when new
algorithms can be dynamically loaded.
.RE

If
.B encr_algs
is present and
.B encr_auth_algs
is not present in a
policy entry, the system will use an
.B "ESP SA"
regardless of
whether the
.B SA
has an authentication algorithm or not.
.sp
If
.B encr_algs
is not present and
.B encr_auth_algs
is present in a
policy entry, null encryption will be provided, which is equivalent to
.B encr_algs
with
.BR NULL ,
for outbound and inbound datagrams.
.sp
If both
.B encr_algs
and
.B encr_auth_algs
are not present in a
policy entry,
.B ESP
header will not be present for outbound datagrams
and the same will be verified for inbound datagrams.
.sp
If both
.B encr_algs
and
.B encr_auth_algs
are present in a policy
entry,
.B ESP
header with integrity checksum will be present on outbound
datagrams and the same will be verified for inbound datagrams.
.sp
For
.BR encr_algs ,
.BR encr_auth_algs ,
and
.B auth_algs
a key length
specification may be present. This is either a single value specifying the
only valid key length for the algorithm or a range specifying the valid
minimum and/or maximum key lengths. Minimum or maximum lengths may be
omitted.
.RE

.sp
.ne 2
.mk
.na
.B dir
.ad
.sp .6
.RS 4n
Values following this decides whether this entry is for outbound or inbound
datagram. Valid values are strings that should be one of the following:
.sp
.ne 2
.mk
.na
.B out
.ad
.sp .6
.RS 4n
This means that this policy entry should be considered only for outbound
datagrams.
.RE

.sp
.ne 2
.mk
.na
.B in
.ad
.sp .6
.RS 4n
This means that this policy entry should be considered only for inbound
datagrams.
.RE

.sp
.ne 2
.mk
.na
.B both
.ad
.sp .6
.RS 4n
This means that this policy entry should be considered for both inbound and
outbound datagrams
.RE

This entry is not needed when the action is "apply", "permit" or "ipsec".
But if it is given while the action is "apply" or "permit", it should be
"out" or "in" respectively. This is mandatory when the action is "bypass".
.RE

.sp
.ne 2
.mk
.na
.B sa
.ad
.sp .6
.RS 4n
Values following this decide the attribute of the security association.
Value indicates whether a unique security association should be used or any
existing
.B SA
can be used. If there is a policy requirement,
.BR SA s
are created dynamically on the first outbound datagram using the key
management daemon. Static
.BR SA s
can be created using
.BR ipseckey (1M).
The values used here determine whether a new
.B SA
will be used/obtained.
Valid values are strings that could be one of the following:
.sp
.ne 2
.mk
.na
.B unique
.ad
.sp .6
.RS 4n
Unique Association. A new/unused association will be obtained/used for
packets matching this policy entry. If an
.B SA
that was previously used
by the same 5 tuples, that is, {Source address, Destination address, Source
.RB "port, Destination Port, Protocol (for example, " TCP / UDP )}
exists,
it will be reused. Thus uniqueness is expressed by the 5 tuples given above.
The security association used by the above 5 tuples will not be used by any
other socket. For inbound datagrams, uniqueness will not be verified.
.sp
For tunnel-mode tunnels,
.B unique
is ignored. SAs are assigned per-rule
in tunnel-mode tunnels. For transport-mode tunnels,
.B unique
is
implicit, because the enforcement happens only on the outer-packet addresses
and protocol value of either IPv4-in-IP or IPv6-in-IP.
.RE

.sp
.ne 2
.mk
.na
.B shared
.ad
.sp .6
.RS 4n
Shared association. If an
.B SA
exists already for this
source-destination pair, it will be used. Otherwise a new
.B SA
will be
obtained. This is the default.
.RE

This is mandatory only for outbound policy entries and should not be given
for entries whose action is "bypass". If this entry is not given for inbound
entries, for example, when "dir" is in or "action" is permit, it will be
assumed to be shared.
.RE

.sp
.LP
Action follows the pattern and should be given before properties. It should
be one of the following and this field is mandatory.
.sp
.ne 2
.mk
.na
.B ipsec
.ad
.sp .6
.RS 4n
Use IPsec for the datagram as described by the properties, if the pattern
matches the datagram. If ipsec is given without a dir spec , the pattern is
matched to incoming and outgoing datagrams.
.RE

.sp
.ne 2
.mk
.na
.B apply
.ad
.sp .6
.RS 4n
Apply IPsec to the datagram as described by the properties, if the pattern
matches the datagram. If
.B apply
is given, the pattern is matched only
on the outbound datagram.
.RE

.sp
.ne 2
.mk
.na
.B permit
.ad
.sp .6
.RS 4n
Permit the datagram if the pattern matches the incoming datagram and
satisfies the constraints described by the properties. If it does not
satisfy the properties, discard the datagram. If
.B permit
is given, the
pattern is matched only for inbound datagrams.
.RE

.sp
.ne 2
.mk
.na
.B bypass
.ad
.br
.na
.B pass
.ad
.sp .6
.RS 4n
Bypass any policy checks if the pattern matches the datagram.
.B dir
in
the properties decides whether the check is done on outbound or inbound
datagrams. All the
.B bypass
entries are checked before checking with any
other policy entry in the system. This has the highest precedence over any
other entries.
.B dir
is the only field that should be present when
action is
.BR bypass .
.RE

.sp
.ne 2
.mk
.na
.B drop
.ad
.sp .6
.RS 4n
Drop any packets that match the pattern.
.RE

.sp
.LP
If the file contains multiple policy entries, for example, they are assumed
to be listed in the order in which they are to be applied. In cases of
multiple entries matching the outbound and inbound datagram, the first match
will be taken. The system will reorder the policy entry, that is, add the
new entry before the old entry, only when:
.sp
.LP
The level of protection is "stronger" than the old level of protection.
.sp
.LP
Currently, strength is defined as:
.sp
.in +2
.nf
AH and ESP > ESP > AH
.fi
.in -2
.sp

.sp
.LP
The standard uses of
.B AH
and
.B ESP
were what drove this ranking of
"stronger". There are flaws with this. \fBESP\fR  can be used either without
authentication, which will allow cut-and-paste or replay attacks, or without
encryption, which makes it equivalent or slightly weaker than
.BR AH .
An
administrator should take care to use
.B ESP
properly. See
.BR ipsecesp (7P)
for more details.
.sp
.LP
If the new entry has
.B bypass
as action,
.B bypass
has the highest
precedence. It can be added in any order, and the system will still match
all the
.B bypass
entries before matching any other entries. This is
useful for key management daemons which can use this feature to bypass IPsec
as it protects its own traffic.
.sp
.LP
Entries with both
.B AH
(\fBauth_algs\fR present in the policy entry)
and
.B ESP
.RB ( encr_auth_algs " or " encr_auth_algs " present in the"
policy entry) protection are ordered after all the entries with
.B AH
and
.B ESP
and before any
.BR AH -only
and \fBESP\fR-only entries. In all
other cases the order specified by the user is not modified, that is, newer
entries are added at the end of all the old entries. See .
.sp
.LP
A new entry is considered duplicate of the old entry if an old entry
matches the same traffic pattern as the new entry. See  for information on
duplicates.
.SH SECURITY
.sp
.LP
If, for example, the policy file comes over the wire from an
.B NFS
mounted file system, an adversary can modify the data contained in the file,
thus changing the policy configured on the machine to suit his needs.
Administrators should be cautious about transmitting a copy of the policy
file over a network.
.sp
.LP
To prevent non-privileged users from modifying the security policy, ensure
that the configuration file is writable only by trusted users.
.sp
.LP
The configuration file is defined by a property of the
.BR policy
.BR smf (5)
service. The default configuration file, is
.BR /etc/inet/ipsecinit.conf .
This can be changed using the
.BR svcprop (1)
command. See
.B NOTES
for more details.
.sp
.LP
The policy description language supports the use of tokens that can be
resolved by means of a name service, using functions such as
.BR gethostbyname (3NSL).
While convenient, these functions are only secure
as the name service the system is configured to use. Great care should be
taken to secure the name service if it is used to resolve elements of the
security policy.
.sp
.LP
If your source address is a host that can be looked up over the network and
your naming system itself is compromised, then any names used will no longer
be trustworthy.
.sp
.LP
If the name switch is configured to use a name service that is not local to
the system, bypass policy entries might be required to prevent the policy
from preventing communication to the name service. See
.BR nsswitch.conf (4).
.sp
.LP
Policy is latched for
.B TCP/UDP
sockets on which a
.BR connect (3SOCKET)
or
.BR accept "(3SOCKET) has been issued. Adding new"
policy entries will not have any effect on them. This feature of latching
may change in the future. It is not advisable to depend upon this feature.
.sp
.LP
The
.B ipsecconf
command can only be run by a user who has sufficient
privilege to open the
.BR pf_key (7P)
socket. The appropriate privilege can
be assigned to a user with the Network IPsec Management profile. See
.BR profiles (1),
.BR rbac (5),
.BR prof_attr (4).
.sp
.LP
Make sure to set up the policies before starting any communications, as
existing connections may be affected by the addition of new policy entries.
Similarly, do not change policies in the middle of a communication.
.sp
.LP
Note that certain
.B ndd
tunables affect how policies configured with
this tool are enforced; see
.BR ipsecesp (7P)
for more details.
.SH EXAMPLES
.LP
.B Example 1
Protecting Outbound
.B TCP
Traffic With
.B ESP
and
the
.B AES
Algorithm
.sp
.LP
The following example specified that any
.B TCP
packet from spiderweb to
arachnid should be encrypted with
.BR AES ,
and the
.B " SA"
could be a
shared one. It does not verify whether or not the inbound traffic is
encrypted.

.sp
.in +2
.nf
#
# Protect the outbound TCP traffic between hosts spiderweb
# and arachnid with ESP and use AES algorithm.
#
{
     laddr spiderweb
     raddr arachnid
     ulp tcp
     dir out
} ipsec {
	     encr_algs AES
}
.fi
.in -2

.LP
.B Example 2
Verifying Whether or Not Inbound Traffic is Encrypted
.sp
.LP
Example 1 does not verify whether or not the inbound traffic is encrypted.
The entry in this example protects inbound traffic:

.sp
.in +2
.nf
#
# Protect the TCP traffic on inbound with ESP/DES from arachnid
# to spiderweb
#
{
	    laddr spiderweb
	    raddr arachnid
	    ulp tcp
	    dir in
} ipsec {
	    encr_algs AES
}
.fi
.in -2

.sp
.LP
.B sa
can be absent for inbound policy entries as it implies that it can
be a shared one. Uniqueness is not verified on inbound. Note that in both
the above entries, authentication was never specified. This can lead to cut
and paste attacks. As mentioned previously, though the authentication is not
specified, the system will still use an
.B "ESP SA"
with
.B encr_auth_alg
specified, if it was found in the
.B SA
tables.

.LP
.B Example 3
Protecting All Traffic Between Two Hosts
.sp
.LP
The following example protects both directions at once:

.sp
.in +2
.nf
{
	    laddr spiderweb
	    raddr arachnid
	    ulp tcp
} ipsec {
	    encr_algs AES
}
.fi
.in -2

.LP
.B Example 4
Authenticating All Inbound Traffic to the Telnet Port
.sp
.LP
This entry specifies that any inbound datagram to telnet port should come
in authenticated with the SHA1 algorithm. Otherwise the datagram should not
be permitted. Without this entry, traffic destined to port number 23 can
come in clear.
.B sa
is not specified, which implies that it is shared.
This can be done only for inbound entries. You need to have an equivalent
entry to protect outbound traffic so that the outbound traffic is
authenticated as well, remove the dir.

.sp
.in +2
.nf
#
# All the inbound traffic to the telnet port should be
# authenticated.
#
{
	   lport telnet
	   dir in
} ipsec {
	   auth_algs sha1
}
.fi
.in -2

.LP
.B Example 5
Verifying Inbound Traffic is Null-Encrypted
.sp
.LP
The first entry specifies that any packet with address host-B should not be
checked against any policies. The second entry specifies that all inbound
traffic from network-B should be encrypted with a
.B NULL
encryption
algorithm and the
.B MD5
authentication algorithm.
.B NULL
encryption
implies that
.B ESP
header will be used without encrypting the datagram.
As the first entry is
.B bypass
it need not be given first in order, as
.B bypass
entries have the highest precedence. Thus any inbound traffic
will be matched against all
.B bypass
entries before any other policy
entries.

.sp
.in +2
.nf
#
# Make sure that all inbound traffic from network-B is NULL
# encrypted, but bypass for host-B alone from that network.
# Add the bypass first.
{
raddr host-B
	dir in	
} bypass {}

# Now add for network-B.
{
	raddr network-B/16
	dir in
} ipsec {
encr_algs NULL
encr_auth_algs md5
}
.fi
.in -2

.LP
.B Example 6
Entries to Bypass Traffic from IPsec
.sp
.LP
The first two entries provide that any datagram leaving the machine with
source port 53 or coming into port number 53 should not be subjected to
IPsec policy checks, irrespective of any other policy entry in the system.
Thus the latter two entries will be considered only for ports other than
port number 53.

.sp
.in +2
.nf
#
# Bypass traffic for port no 53
     #
{lport 53} bypass {}
{rport 53} bypass {}
{raddr spiderweb } ipsec {encr_algs any sa unique}
.fi
.in -2

.LP
.B Example 7
Protecting Outbound Traffic
.sp
.in +2
.nf
 #
     # Protect the outbound traffic from all interfaces.
     #
{raddr spiderweb dir out} ipsec {auth_algs any sa unique}
.fi
.in -2

.sp
.LP
If the
.BR gethostbyname (3XNET)
call for spiderweb yields multiple
addresses, multiple policy entries will be added for all the source address
with the same properties.

.sp
.in +2
.nf
{
    laddr arachnid
    raddr spiderweb
    dir in
} ipsec {auth_algs any sa unique}
.fi
.in -2

.sp
.LP
If the
.BR gethostbyname (3XNET)
call for spiderweb and the
.BR gethostbyname (3XNET)
call for arachnid yield multiple addresses,
multiple policy entries will be added for each
.RB ( "saddr daddr" )
pair with the same properties. Use
.B "ipsecconf -l"
to view all the
policy entries added.

.LP
.B Example 8
Bypassing Unauthenticated Traffic
.sp
.in +2
.nf
#
# Protect all the outbound traffic with ESP except any traffic
# to network-b which should be authenticated and bypass anything
# to network-c
#
{raddr network-b/16 dir out} ipsec {auth_algs any}
{dir out} ipsec {encr_algs any}
{raddr network-c/16 dir out} bypass {} # NULL properties
.fi
.in -2

.sp
.LP
Note that
.B bypass
can be given anywhere and it will take precedence
over all other entries.
.B NULL
pattern matches all the traffic.

.LP
.B Example 9
Encrypting IPv6 Traffic with 3DES and MD5
.sp
.LP
The following entry on the host with the link local address
.B fe80::a00:20ff:fe21:4483
specifies that any outbound traffic between
the hosts wtih IPv6 link-local addresses
.B fe80::a00:20ff:fe21:4483
and
.B fe80::a00:20ff:felf:e346
must be encrypted with
.B 3DES
and
.B MD5.

.sp
.in +2
.nf
{
    laddr fe80::a00:20ff:fe21:4483
    raddr fe80::a00:20ff:felf:e346
    dir out
} ipsec {
    encr_algs 3DES
    encr_auth_algs MD5
}
.fi
.in -2

.LP
.B Example 10
Verifying IPv6 Traffic is Authenticated with SHA1
.sp
.LP
The following two entries require that all IPv6 traffic to and from the
IPv6 site-local network
.B fec0:abcd::0/32
be authenticated with
.BR SHA1 .

.sp
.in +2
.nf
{raddr fec0:abcd::0/32} ipsec { auth_algs SHA1 }
.fi
.in -2

.LP
.B Example 11
Key Lengths
.sp
.in +2
.nf
# use aes at any key length
{raddr spiderweb} ipsec {encr_algs aes}

# use aes with a 192 bit key
{raddr spiderweb} ipsec {encr_algs aes(192)}

# use aes with any key length up to 192 bits
# i.e. 192 bits or less
{raddr spiderweb} ipsec {encr_algs aes(..192)}

# use aes with any key length of 192 or more
# i.e. 192 bits or more
{raddr spiderweb} ipsec {encr_algs aes(192..)}

#use aes with any key from 192 to 256 bits
{raddr spiderweb} ipsec {encr_algs aes(192..256)}

#use any algorithm with a key of 192 bits or longer
{raddr spiderweb} ipsec {encr_algs any(192..)}
.fi
.in -2

.LP
.B Example 12
Correct and Incorrect Policy Entries
.sp
.LP
The following are examples of correctly formed policy entries:

.sp
.in +2
.nf
{ raddr that_system rport telnet } ipsec { encr_algs 3des encr_auth_algs
sha1 sa shared}

{
        raddr that_system
        rport telnet
} ipsec {
        encr_algs 3des
        encr_auth_algs sha1
        sa shared
}

{ raddr that_system rport telnet } ipsec
        { encr_algs 3des encr_auth_algs sha1 sa shared}

{ raddr that_system rport telnet } ipsec
        { encr_algs 3des encr_auth_algs sha1 sa shared} or ipsec
        { encr_algs aes encr_auth_algs sha1 sa shared}
.fi
.in -2
.sp

.sp
.LP
\&.\|.\|.and the following is an incorrectly formed entry:

.sp
.in +2
.nf
{ raddr that_system rport telnet } ipsec
        { encr_algs 3des encr_auth_algs sha1 sa shared}
        or ipsec { encr_algs aes encr_auth_algs sha1 sa shared}
.fi
.in -2
.sp

.sp
.LP
In the preceding, incorrect entry, note that the third line begins with
"\fBor ipsec\fR". Such an entry causes \fBipsecconf\fR to return an error.

.LP
.B Example 13
Allowing Neighbor Discovery to Occur in the Clear
.sp
.LP
The following two entries require that all IPv6 traffic to and from the
IPv6 site-local network
.B fec0:abcd::0/32
be authenticated with SHA1.
The second entry allows neighbor discovery to operate correctly.

.sp
.in +2
.nf
{raddr fec0:abcd::0/32} ipsec { auth_algs SHA1 }
{raddr fec0:abcd::0/32 ulp ipv6-icmp type 133-137  dir both }
    pass { }
.fi
.in -2

.LP
\fBExample 14\fR Using "or"
.sp
.LP
The following entry allows traffic using the AES or Blowfish algorithms
from the remote machine spiderweb:

.sp
.in +2
.nf
{raddr spiderweb} ipsec {encr_algs aes} or ipsec {encr_algs blowfish}
.fi
.in -2

.LP
.B Example 15
Configuring a Tunnel to be Backward-Compatible with
Solaris 9
.sp
.LP
The following example is equivalent to "\fBencr_algs aes encr_auth_algs
md5\fR" in \fBifconfig\fR(1M):

.sp
.in +2
.nf
{tunnel ip.tun0 negotiate transport} ipsec {encr_algs aes
                                                   encr_auth_algs md5}
.fi
.in -2

.LP
.B Example 16
Configuring a Tunnel to a VPN client with an Assigned
Address
.sp
.LP
The following example assumes a distinct "inside" network with its own
topology, such that a client's default route goes "inside".

.sp
.in +2
.nf
# Unlike route(1m), the default route has to be spelled-out.
{tunnel ip.tun0 negotiate tunnel raddr client-inside/32
laddr 0.0.0.0/0} ipsec {encr_algs aes encr_auth_algs sha1}
.fi
.in -2

.LP
.B Example 17
Transit VPN router between Two Tunnelled Subnets and a
Third
.sp
.LP
The following example specifies a configuration for a VPN router that
routes between two tunnelled subnets and a third subnet that is on-link.
Consider remote-site A, remote-site B, and local site C, each with a
.B /24
address allocation.

.sp
.in +2
.nf
# ip.tun0 between me (C) and remote-site A.
# Cover remote-site A to remote-side B.
{tunnel ip.tun0 negotiate tunnel raddr A-prefix/24 laddr
B-prefix/24} ipsec {encr_algs 3des encr_auth_algs md5}

# Cover remote-site A traffic to my subnet.
{tunnel ip.tun0 negotiate tunnel raddr A-prefix/24 laddr
C-prefix/24} ipsec {encr_algs 3des encr_auth_algs md5}

# ip.tun1 between me (C) and remote-site B.
# Cover remote-site B to remote-site A.
{tunnel ip.tun1 negotiate tunnel raddr B-prefix/24 laddr
A-prefix/24} ipsec {encr_algs aes encr_auth_algs sha1}

# Cover remote-site B traffic to my subnet.
{tunnel ip.tun1 negotiate tunnel raddr B-prefix/24 laddr
C-prefix/24} ipsec {encr_algs aes encr_auth_algs md5}
.fi
.in -2

.SH FILES
.sp
.ne 2
.mk
.na
.B /var/run/ipsecpolicy.conf
.ad
.sp .6
.RS 4n
Cache of IPsec policies currently configured for the system, maintained by
.B ipsecconf
command. Do not edit this file.
.RE

.sp
.ne 2
.mk
.na
.B /etc/inet/ipsecinit.conf
.ad
.sp .6
.RS 4n
File containing IPsec policies to be installed at system restart by the
.BR "policy smf" (5)
service. See
.B NOTES
for more information.
.RE

.sp
.ne 2
.mk
.na
.B /etc/inet/ipsecinit.sample
.ad
.sp .6
.RS 4n
Sample input file for
.BR ipseconf .
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR auths (1),
.BR profiles (1),
.BR svcprop (1),
.BR svcs (1),
.BR in.iked (1M),
.BR init (1M),
.BR ifconfig (1M),
.BR ipsecalgs (1M),
.BR ipseckey (1M),
.BR svcadm (1M),
.BR svccfg (1M),
.BR gethostbyname (3NSL),
.BR accept (3SOCKET),
.BR connect (3SOCKET),
.BR gethostbyname (3XNET),
.BR getnetbyname (3XNET),
.BR getprotobyname (3XNET),
.BR getservbyname (3XNET),
.BR getaddrinfo (3SOCKET),
.BR socket (3SOCKET),
.BR ike.config (4),
.BR nsswitch.conf (4),
.BR prof_attr (4),
.BR user_attr (4),
.BR attributes (5),
.BR rbac (5),
.BR smf (5),
.BR ipsecah (7P),
.BR ipsecesp (7P),
.BR pf_key (7P)
.sp
.LP
Glenn, R. and Kent, S. \fIRFC 2410, The NULL Encryption Algorithm and Its Use With IPsec\fR. The Internet Society. 1998.
.sp
.LP
Kent, S. and Atkinson, R.
.IR "RFC 2402, IP Authentication Header" .The
Internet Society. 1998.
.sp
.LP
Kent, S. and Atkinson, R. \fIRFC 2406, IP Encapsulating Security Payload (ESP)\fR. The Internet Society. 1998.
.sp
.LP
Madsen, C. and Glenn, R. \fIRFC 2403, The Use of HMAC-MD5-96 within ESP and AH\fR. The Internet Society. 1998.
.sp
.LP
Madsen, C. and Glenn, R. \fIRFC 2404, The Use of HMAC-SHA-1-96 within ESP and AH\fR. The Internet Society. 1998.
.sp
.LP
Madsen, C. and Doraswamy, N. \fIRFC 2405, The ESP DES-CBC Cipher Algorithm With Explicit IV\fR. The Internet Society. 1998.
.sp
.LP
Pereira, R. and Adams, R. \fIRFC 2451, The ESP CBC-Mode Cipher Algorithms\fR. The Internet Society. 1998.
.sp
.LP
Frankel, S. and Kelly, R. Glenn, \fIThe AES Cipher Algorithm and Its Use With IPsec\fR. 2001.
.SH DIAGNOSTICS
.sp
.ne 2
.mk
.na
\fBBad "string" on line \fIN\fR.\fR
.ad
.br
.na
\fBDuplicate "string" on line \fIN\fR.\fR
.ad
.sp .6
.RS 4n
.I string
refers to one of the names in pattern or properties. A Bad
string indicates that an argument is malformed; a Duplicate string indicates
that there are multiple arguments of a similar type, for example, multiple
Source Address arguments.
.RE

.sp
.ne 2
.mk
.na
.B Interface name already selected
.ad
.sp .6
.RS 4n
Dual use of
.B -i
\fIname\fR and \fIname\fR,\fIindex\fR for an index.
.RE

.sp
.ne 2
.mk
.na
\fBError before or at line \fIN\fR.\fR
.ad
.sp .6
.RS 4n
Indicates parsing error before or at line
.IR N .
.RE

.sp
.ne 2
.mk
.na
.B Non-existent index
.ad
.sp .6
.RS 4n
Reported when the
.I index
for delete is not a valid one.
.RE

.sp
.ne 2
.mk
.na
.B spd_msg return: File exists
.ad
.sp .6
.RS 4n
Reported when there is already a policy entry that matches the traffic of
this new entry.
.RE

.SH NOTES
.sp
.LP
IPsec manual keys are managed by the service management facility,
.BR smf (5).
The services listed below manage the components of IPsec.
These services are delivered as follows:
.sp
.in +2
.nf
svc:/network/ipsec/policy:default (enabled)
svc:/network/ipsec/ipsecalgs:default (enabled)
svc:/network/ipsec/manual-key:default (disabled)
svc:/network/ipsec/ike:default (disabled)
.fi
.in -2
.sp

.sp
.LP
The manual-key service is delivered disabled. The system administrator must
create manual IPsec Security Associations (SAs), as described in
.BR ipseckey (1M),
before enabling that service.
.sp
.LP
The policy service is delivered enabled, but without a configuration file,
so that, as a starting condition, packets are not protected by IPsec. After
you create the configuration file
.BR /etc/inet/ipsecinit.conf ,
as
described in this man page, and refresh the service
.RB ( "svcadm refresh" ,
see below), the policy contained in the configuration file is applied. If
there is an error in this file, the service enters maintenance mode.
.sp
.LP
Services that are delivered disabled are delivered that way because the
system administrator must create configuration files for those services
before enabling them. See
.BR ike.config (4)
for the
.B ike
service.
.sp
.LP
See
.BR ipsecalgs (1M)
for the
.B ipsecalgs
service.
.sp
.LP
The correct administrative procedure is to create the configuration file
for each service, then enable each service using
.BR svcadm (1M).
.sp
.LP
If the configuration needs to be changed, edit the configuration file then
refresh the service, as follows:
.sp
.in +2
.nf
example# \fBsvcadm refresh policy\fR
.fi
.in -2
.sp

.sp
.LP
The
.BR smf (5)
framework will record any errors in the service-specific
log file. Use any of the following commands to examine the
.B logfile
property:
.sp
.in +2
.nf
example# \fBsvcs -l policy\fR
example# \fBsvcprop policy\fR
example# \fBsvccfg -s policy listprop\fR
.fi
.in -2
.sp

.sp
.LP
The following property is defined for the
.B policy
service:
.sp
.in +2
.nf
config/config_file
.fi
.in -2
.sp

.sp
.LP
This property can be modified using
.BR svccfg (1M)
by users who have been
assigned the following authorization:
.sp
.in +2
.nf
solaris.smf.value.ipsec
.fi
.in -2
.sp

.sp
.LP
See
.BR auths (1),
.BR user_attr (4),
.BR rbac (5).
.sp
.LP
The service needs to be refreshed using
.BR svcadm (1M)
before the new
property is effective. General non-modifiable properties can be viewed with
the
.BR svcprop (1)
command.
.sp
.in +2
.nf
# \fBsvccfg -s ipsec/policy setprop config/config_file = /new/config_file\fR
# \fBsvcadm refresh policy\fR
.fi
.in -2
.sp

.sp
.LP
Administrative actions on this service, such as enabling, disabling,
refreshing, and requesting restart can be performed using
.BR svcadm (1M).
A user who has been assigned the authorization shown below can perform these
actions:
.sp
.in +2
.nf
solaris.smf.manage.ipsec
.fi
.in -2
.sp

.sp
.LP
The service's status can be queried using the
.BR svcs (1)
command.
.sp
.LP
.RB "The " ipsecconf " command is designed to be managed by the " policy 
.BR smf (5)
service. While the
.B ipsecconf
command can be run from the
command line, this is discouraged. If the
.B ipsecconf
command is to be
run from the command line, the
.BR "policy smf" (5)
service should be
disabled first. See
.BR svcadm (1M).
