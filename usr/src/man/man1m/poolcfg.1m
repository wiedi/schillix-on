'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH poolcfg 1M "29 Nov 2007" "SunOS 5.11" "System Administration Commands"
.SH NAME
poolcfg \- create and modify resource pool configuration files
.SH SYNOPSIS
.LP
.nf
\fB/usr/sbin/poolcfg\fR \fB-c\fR \fIcommand\fR [\fB-d\fR | [\fIfilename\fR]]
.fi

.LP
.nf
\fB/usr/sbin/poolcfg\fR \fB-f\fR \fIcommand_file\fR [\fB-d\fR | [\fIfilename\fR]]
.fi

.LP
.nf
\fB/usr/sbin/poolcfg\fR \fB-h\fR
.fi

.SH DESCRIPTION
.sp
.LP
The \fBpoolcfg\fR utility provides configuration operations on pools and
sets. These operations are performed upon an existing configuration and take
the form of modifications to the specified configuration file. If you use
the
.B -d
option, the modifications occur to the kernel state. Actual
activation of the resulting configuration is achieved by way of the
.BR pooladm (1M)
utility.
.sp
.LP
Pools configuration files are structured files that must have been
constructed using \fBpoolcfg\fR itself or
.BR libpool (3LIB)
directly.
.sp
.LP
An invocation of \fBpoolcfg\fR with the pool dynamic location and write
permission will hang if the dynamic location has already been opened for
writing.
.sp
.LP
The configurations which are created by this utility can be used by
\fBpooladm\fR to instantiate the configuration upon a target host.
.SH OPTIONS
.sp
.LP
The following options are supported:
.sp
.ne 2
.mk
.na
\fB-c\fR \fIcommand\fR
.ad
.RS 19n
.rt
Specify
.I command
as an editing command. See
.BR USAGE .
.RE

.sp
.ne 2
.mk
.na
.B -d
.ad
.RS 19n
.rt
Operate directly on the kernel state. No \fIfilename\fR is allowed.
.RE

.sp
.ne 2
.mk
.na
\fB-f\fR \fIcommand_file\fR
.ad
.RS 19n
.rt
Take the commands from
.IR command_file .
\fIcommand_file\fR consists of
editing commands, one per line.
.RE

.sp
.ne 2
.mk
.na
.B -h
.ad
.RS 19n
.rt
Display extended information about the syntax of editing commands.
.RE

.SH USAGE
.SS "Scripts"
.sp
.LP
A script consists of editing commands, one per line, of the following:
.sp
.ne 2
.mk
.na
\fBinfo [\fIentity-name\fR]\fR
.ad
.sp .6
.RS 4n
Display configuration (or specified portion) in human readable form to
standard output. If no entity is specified, system information is displayed.
Therefore, \fBpoolcfg -c\fR \fB\&'info' afile\fR is an equivalent
invocation to \fBpoolcfg -c\fR
.BR "\&'info system name' afile" .
.RE

.sp
.ne 2
.mk
.na
\fBcreate \fIentity-name\fR [\fIproperty-list\fR]\fR
.ad
.sp .6
.RS 4n
Make an entity of the specified type and name.
.RE

.sp
.ne 2
.mk
.na
.BI "destroy " entity-name
.ad
.sp .6
.RS 4n
Remove the specified entity.
.RE

.sp
.ne 2
.mk
.na
\fBmodify \fIentity-name\fR [\fIproperty-list\fR]\fR
.ad
.sp .6
.RS 4n
Change the listed properties on the named entity.
.RE

.sp
.ne 2
.mk
.na
\fBassociate \fIpool-name\fR [\fIresource-list\fR]\fR
.ad
.sp .6
.RS 4n
Connect one or more resources to a pool, or replace one or more existing
connections.
.RE

.sp
.ne 2
.mk
.na
\fBtransfer to [\fIresourcetype\fR] \fIname\fR[\fIcomponent-list\fR]\fR
.ad
.sp .6
.RS 4n
Transfer one or more discrete components to a resource .
.RE

.sp
.ne 2
.mk
.na
\fBtransfer [\fIquantity\fR] from [\fIresourcetype\fR] [\fIsrc\fR] to
[\fItgt\fR]\fR
.ad
.sp .6
.RS 4n
Transfer a resource quantity from
.I src
to
.IR tgt .
.RE

.sp
.ne 2
.mk
.na
\fBtransfer [\fIquantity\fR] to [\fIresourcetype\fR] [\fItgt\fR] from
[\fIsrc\fR]\fR
.ad
.sp .6
.RS 4n
Transfer a resource quantity to
.I tgt
from
.IR src .
.RE

.sp
.ne 2
.mk
.na
.B discover
.ad
.sp .6
.RS 4n
Create a system entity, with one pool entity and resources to match current
system configuration. All discovered resources of each resource type are
recorded in the file, with the single pool referring to the default resource
for each resource type.
.sp
This command is a NO-OP when \fBpoolcfg\fR operates directly on the kernel.
See the
.B -d
option.
.sp
You should avoid use of this command. The preferred method for creating a
configuration is to export the dynamic configuration using
.BR pooladm (1M)
with the
.B -s
option.
.RE

.sp
.ne 2
.mk
.na
\fBrename \fIentity-name\fR to \fInew-name\fR
.ad
.sp .6
.RS 4n
Change the name of an entity on the system to its new name.
.RE

.SS "Property Lists"
.sp
.LP
The property list is specified by:
.sp
.in +2
.nf
( proptype name = value [ ; proptype name = value ]* )
.fi
.in -2

.sp
.LP
where the last definition in the sequence for a given proptype, name pair
is the one that holds. For property deletion, use
.BR "~ proptype name" .
.SS "Resource Lists"
.sp
.LP
A resource list is specified by:
.sp
.in +2
.nf
( resourcetype name [ ; resourcetype name ]* )
.fi
.in -2

.sp
.LP
where the last specification in the sequence for a resource is the one that
holds. There is no deletion syntax for resource lists.
.SS "Component Lists"
.sp
.LP
A component list is specified by:
.sp
.in +2
.nf
( componenttype name [ ; componenttype name ]* )
.fi
.in -2

.sp
.LP
where the last specification in the sequence for a component is the one
that holds. There is no deletion syntax for component lists.
.SS "Recognized Entities"
.sp
.ne 2
.mk
.na
.B system
.ad
.RS 10n
.rt
Machine level entity
.RE

.sp
.ne 2
.mk
.na
.B pool
.ad
.RS 10n
.rt
Named collection of resource associations
.RE

.SS "Resource Types"
.sp
.ne 2
.mk
.na
.B pset
.ad
.RS 8n
.rt
Processor set resource
.RE

.SS "Property Types"
.sp
.ne 2
.mk
.na
.B boolean
.ad
.RS 11n
.rt
Takes one of two values true or false.
.RE

.sp
.ne 2
.mk
.na
.B int
.ad
.RS 11n
.rt
A 64-bit signed integer value.
.RE

.sp
.ne 2
.mk
.na
.B uint
.ad
.RS 11n
.rt
A 64-bit unsigned integer value.
.RE

.sp
.ne 2
.mk
.na
.B string
.ad
.RS 11n
.rt
Strings are delimited by quotes (\fB"\fR), and support the character escape
sequences defined in
.BR formats (5).
.RE

.sp
.ne 2
.mk
.na
\fBfloat\fR
.ad
.RS 11n
.rt
Scientific notation is not supported.
.RE

.SH EXAMPLES
.LP
\fBExample 1\fR Writing a poolcfg Script
.sp
.LP
The following \fBpoolcfg\fR script creates a pool named
.BR Accounting ,
and a processor set,
.BR small-1 .
The processor set is created first, then
the pool is created and associated with the set.

.sp
.in +2
.nf
create pset small-1 ( uint pset.min = 1 ; uint pset.max = 4)
create pool Accounting
associate pool Accounting ( pset small-1 )
.fi
.in -2

.LP
\fBExample 2\fR Reporting on \fBpool_0\fR
.sp
.LP
The following command reports on
.B pool_0
to standard output in human
readable form:

.sp
.in +2
.nf
 # poolcfg -c 'info pool pool_0' /etc/pooladm.conf
.fi
.in -2
.sp

.LP
\fBExample 3\fR Destroying pool_0 and Its Associations
.sp
.LP
The following command destroys
.B pool_0
and associations, but not the
formerly associated resources:

.sp
.in +2
.nf
# poolcfg -c 'destroy pool pool_0' /etc/pooladm.conf
.fi
.in -2
.sp

.LP
\fBExample 4\fR Displaying the Current Configuration
.sp
.LP
The following command displays the current configuration:

.sp
.in +2
.nf
$ poolcfg -c 'info' /etc/pooladm.conf
system example_system
               int system.version 1
               boolean system.bind-default true
               string system.comment Discovered by libpool

               pool pool_default
                    boolean pool.default true
                    boolean pool.active true
                    int pool.importance 5
                    string pool.comment
                    string.pool.scheduler FSS
                    pset pset_default

               pset pset_default
                    int pset.sys_id -1
                    string pset.units population
                    boolean pset.default true
                    uint pset.max 4294967295
                    uint pset.min 1
                    string pset.comment
                    boolean pset.escapable false
                    uint pset.load 0
                    uint pset.size 2

                    cpu
                         int cpu.sys_id 0
                         string cpu.comment

                    cpu
                         int cpu.sys_id 2
                         string cpu.comment
.fi
.in -2
.sp

.LP
\fBExample 5\fR Moving cpu with ID 2 to Processor Set pset1 in the Kernel
.sp
.LP
The following command moves
.B cpu
with ID
.B 2
to processor set
\fBpset1\fR in the kernel:

.sp
.in +2
.nf
# poolcfg -dc 'transfer to pset pset1 ( cpu 2 )'
.fi
.in -2
.sp

.LP
\fBExample 6\fR Moving 2 cpus from Processor Set pset1 to Processor Set
pset2 in the Kernel
.sp
.LP
The following command moves 2 \fBcpu\fRs from processor set
.B pset1
to
processor set
.B pset2
in the kernel:

.sp
.in +2
.nf
# poolcfg -dc 'transfer 2 from pset pset1 to pset2'
.fi
.in -2
.sp

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWpool
_
Interface StabilitySee below.
.TE

.sp
.LP
The invocation is Committed. The output is Uncommitted.
.SH SEE ALSO
.sp
.LP
.BR pooladm (1M),
.BR poolbind (1M),
.BR libpool (3LIB),
.BR attributes (5),
.BR formats (5)
.sp
.LP
\fR
