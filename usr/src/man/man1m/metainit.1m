'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH metainit 1M "27 Mar 2006" "SunOS 5.11" "System Administration Commands"
.SH NAME
metainit \- configure metadevices
.SH SYNOPSIS
.LP
.nf
\fB/sbin/metainit\fR \fB-h\fR
.fi

.LP
.nf
\fB/sbin/metainit\fR [\fIgeneric options\fR] \fIconcat/stripe\fR \fInumstripes\fR \fIwidth\fR
     \fIcomponent.\|.\|.\fR [\fB-i\fR \fIinterlace\fR]
.fi

.LP
.nf
\fB/sbin/metainit\fR [\fIwidth\fR \fIcomponent.\|.\|.\fR [\fB-i\fR \fIinterlace\fR]]
     [\fB-h\fR \fIhot_spare_pool\fR]
.fi

.LP
.nf
\fB/sbin/metainit\fR [\fIgeneric options\fR] \fImirror\fR \fB-m\fR \fIsubmirror\fR
     [\fIread_options\fR] [\fIwrite_options\fR]
     [\fIpass_num\fR]
.fi

.LP
.nf
\fB/sbin/metainit\fR [\fIgeneric options\fR] \fIRAID\fR \fB-r\fR \fIcomponent.\|.\|.\fR
     [\fB-i\fR \fIinterlace\fR]
     [\fB-h\fR \fIhot_spare_pool\fR] [\fB-k\fR] [\fB-o\fR \fIoriginal_column_count\fR]
.fi

.LP
.nf
\fB/sbin/metainit\fR [\fIgeneric options\fR] \fIhot_spare_pool\fR
     [\fIhotspare.\|.\|.\fR]
.fi

.LP
.nf
\fB/sbin/metainit\fR [\fIgeneric options\fR] \fImetadevice-name\fR
.fi

.LP
.nf
\fB/sbin/metainit\fR [\fIgeneric options\fR] \fB-a\fR
.fi

.LP
.nf
\fB/sbin/metainit\fR [\fIgeneric options\fR] \fIsoftpart\fR \fB-p\fR [\fB-e\fR] \fIcomponent\fR
     [\fB-A\fR \fIalignment\fR] \fIsize\fR
.fi

.LP
.nf
\fB/sbin/metainit\fR \fB-r\fR
.fi

.SH DESCRIPTION
.sp
.LP
The
.B metainit
command configures metadevices and hot spares according
to the information specified on the command line. Alternatively, you can run
.B metainit
so that it uses configuration entries you specify in the
.B /etc/lvm/md.tab
file (see
.BR md.tab (4)).
All metadevices must be
set up by the
.B metainit
command before they can be used.
.sp
.LP
Solaris Volume Manager supports storage devices and logical volumes greater
than 1 terabyte (TB) when a system runs a 64-bit Solaris kernel. Support for
large volumes is automatic. If a device greater than 1 TB is created,
Solaris Volume Manager configures it appropriately and without user
intervention.
.sp
.LP
If a system with large volumes is rebooted under a 32-bit Solaris kernel,
the large volumes are visible through
.B metastat
output. Large volumes
cannot be accessed, modified or deleted, and no new large volumes can be
created. Any volumes or file systems on a large volume in this situation are
unavailable. If a system with large volumes is rebooted under a version of
Solaris prior to the Solaris 9 4/03 release, Solaris Volume Manager does not
start. You must remove all large volumes before Solaris Volume Manager runs
under an earlier version of the Solaris Operating System.
.sp
.LP
If you edit the
.B /etc/lvm/md.tab
file to configure metadevices,
specify one complete configuration entry per line. You then run the
.B metainit
command with either the
.B -a
option, to activate all
metadevices you entered in the
.B /etc/lvm/md.tab
file, or with the
metadevice name corresponding to a specific configuration entry.
.sp
.LP
.B metainit
does not maintain the state of the volumes that would have
been created when
.B metainit
is run with both the
.B -a
and
.BR -n
flags. Any volumes in
.B md.tab
that have dependencies on other volumes
in
.B md.tab
are reported as errors when
.B "metainit -a"
.B -n
.RB "is run, although the operations might succeed when" " metainit -a"
is run. See
.BR md.tab (4).
.sp
.LP
Solaris Volume Manager never updates the
.B /etc/lvm/md.tab
file.
Complete configuration information is stored in the metadevice state
database, not
.BR md.tab .
The only way information appears in
.BR md.tab
is through editing it by hand.
.sp
.LP
When setting up a disk mirror, the
.B first
step is to use
.B metainit
create a one-on-one concatenation for the root slice. See
.BR EXAMPLES .
.SH OPTIONS
.sp
.LP
The following options are supported:
.SS "Generic Options"
.sp
.LP
Root privileges are required for all of the following options except
.BR -h .
.sp
.LP
The following generic options are supported:
.sp
.ne 2
.mk
.na
.B -f
.ad
.sp .6
.RS 4n
Forces the
.B metainit
command to continue even if one of the slices
contains a mounted file system or is being used as
.BR swap ,
or if the
stripe being created is smaller in size than the underlying soft partition.
This option is required when configuring mirrors on root
.RB ( / ),
.BR swap ,
and
.BR /usr .
.RE

.sp
.ne 2
.mk
.na
.B -h
.ad
.sp .6
.RS 4n
Displays usage message.
.RE

.sp
.ne 2
.mk
.na
.B -n
.ad
.sp .6
.RS 4n
Checks the syntax of your command line or
.B md.tab
entry without
actually setting up the metadevice. If used with
.BR -a ,
all devices are
checked but not initialized.
.RE

.sp
.ne 2
.mk
.na
.B -r
.ad
.sp .6
.RS 4n
Only used in a shell script at boot time. Sets up all metadevices that were
configured before the system crashed or was shut down. The information about
previously configured metadevices is stored in the metadevice state database
(see
.BR metadb (1M)).
.RE

.sp
.ne 2
.mk
.na
.B -s
.I setname
.ad
.sp .6
.RS 4n
Specifies the name of the diskset on which
.B metainit
works. Without
the
.B -s
option, the
.B metainit
command operates on your local
metadevices and/or hotspares.
.RE

.SS "Concat/Stripe Options"
.sp
.LP
The following concat/stripe options are supported:
.sp
.ne 2
.mk
.na
.I concat/stripe
.ad
.sp .6
.RS 4n
Specifies the metadevice name of the concatenation, stripe, or
concatenation of stripes being defined.
.RE

.sp
.ne 2
.mk
.na
.I numstripes
.ad
.sp .6
.RS 4n
Specifies the number of individual stripes in the metadevice. For a simple
stripe,
.I numstripes
.RI "is always 1. For a concatenation," " numstripes"
is equal to the number of slices. For a concatenation of stripes,
.I numstripes
varies according to the number of stripes.
.RE

.sp
.ne 2
.mk
.na
.I width
.ad
.sp .6
.RS 4n
Specifies the number of slices that make up a stripe. When
.I width
is
greater than 1, the slices are striped.
.RE

.sp
.ne 2
.mk
.na
.I component
.ad
.sp .6
.RS 4n
The logical name for the physical slice (partition) on a disk drive, such
as
.BR /dev/dsk/c0t0d0s0 .
For RAID level 5 metadevices, a minimum of three
slices is necessary to enable striping of the parity information across
slices.
.RE

.sp
.ne 2
.mk
.na
.B -i
.I interlace
.ad
.sp .6
.RS 4n
Specifies the interlace size. This value tells Solaris Volume Manager how
much data to place on a slice of a striped or RAID level 5 metadevice before
moving on to the next slice.
.I interlace
is a specified value, followed
by either `\fBk\fR' for kilobytes, `\fBm\fR' for megabytes, or `\fBb\fR' for
blocks. The characters can be either uppercase or lowercase. The
.I interlace
specified cannot be less than 16 blocks, or greater than 100
megabytes. If
.I interlace
is not specified, it defaults to 512
kilobytes.
.RE

.sp
.ne 2
.mk
.na
.B -h
.I hot_spare_pool
.ad
.sp .6
.RS 4n
Specifies the
.I hot_spare_pool
to be associated with the metadevice. If
you use the command line, the hot spare pool must have been previously
created by the
.B metainit
command before it can be associated with a
metadevice. Use \fB/-h\fR \fBhsp\fInnn\fR when the concat/stripe being
created is to be used as a submirror.
.sp
Names for hot spare pools can be any legal file name that is composed of
alphanumeric characters, a dash ("-"), an underscore ("_"), or a period
("."). Names must begin with a letter. The words "all" and "none" are
reserved and cannot be used.
.RE

.SS "Mirror Options"
.sp
.LP
The following mirror options are supported:
.sp
.ne 2
.mk
.na
.I mirror
.B -m
.I submirror
.ad
.sp .6
.RS 4n
Specifies the metadevice name of the mirror. The
.B -m
indicates that
the configuration is a mirror.
.I submirror
is a metadevice (stripe or
concatentation) that makes up the initial one-way mirror. Solaris Volume
Manager supports a maximum of four-way mirroring. When defining mirrors,
first create the mirror with the
.B metainit
command as a one-way mirror.
Then attach subsequent submirrors using the
.B metattach
command. This
method ensures that Solaris Volume Manager properly syncs the mirrors. (The
second and any subsequent submirrors are first created using the
.B metainit
command.)
.RE

.sp
.ne 2
.mk
.na
.I read_options
.ad
.sp .6
.RS 4n
The following read options for mirrors are supported:
.sp
.ne 2
.mk
.na
.B -g
.ad
.sp .6
.RS 4n
Enables the geometric read option, which results in faster performance on
sequential reads.
.RE

.sp
.ne 2
.mk
.na
.B -r
.ad
.sp .6
.RS 4n
Directs all reads to the first submirror. This should only be used when the
devices comprising the first submirror are substantially faster than those
of the second mirror. This flag cannot be used with the
.B -g
flag.
.RE

If neither the
.B -g
nor
.B -r
flags are specified, reads are made in
a round-robin order from all submirrors in the mirror. This enables load
balancing across the submirrors.
.RE

.sp
.ne 2
.mk
.na
.I write_options
.ad
.sp .6
.RS 4n
The following write options for mirrors are supported:
.sp
.ne 2
.mk
.na
.B -S
.ad
.sp .6
.RS 4n
Performs serial writes to mirrors. The first submirror write completes
before the second is started. This can be useful if hardware is susceptible
to partial sector failures. If
.B -S
is not specified, writes are
replicated and dispatched to all mirrors simultaneously.
.RE

.RE

.sp
.ne 2
.mk
.na
.I pass_num
.ad
.sp .6
.RS 4n
A number in the range 0-9 at the end of an entry defining a mirror that
determines the order in which that mirror is resynced during a reboot. The
default is 1. Smaller pass numbers are resynced first. Equal pass numbers
are run concurrently. If 0 is used, the resync is skipped. 0 should be used
only for mirrors mounted as read-only, or as
.BR swap .
.RE

.SS "RAID Level 5 Options"
.sp
.LP
The following RAID level 5 options are available:
.sp
.ne 2
.mk
.na
.I RAID
.B -r
.ad
.sp .6
.RS 4n
Specifies the name of the RAID level 5 metadevice. The
.B -r
specifies
that the configuration is RAID level 5.
.RE

.sp
.ne 2
.mk
.na
.B -k
.ad
.sp .6
.RS 4n
For RAID level 5 metadevices, informs the driver that it is not to
initialize (zero the disk blocks) due to existing data. Only use this option
to recreate a previously created RAID level 5 device.
.sp
Use the
.B -k
option with extreme caution. This option sets the disk
blocks to the
.B OK
state. If any errors exist on disk blocks within the
metadevice, Solaris Volume Manager might begin fabricating data. Instead of
using the
.B -k
option, you might want to initialize the device and
restore data from tape.
.RE

.sp
.ne 2
.mk
.na
.B -o
.I original_column_count
.ad
.sp .6
.RS 4n
For RAID level 5 metadevices, used with the
.B -k
option to define the
number of original slices in the event the originally defined metadevice was
grown. This is necessary since the parity segments are not striped across
concatenated devices.
.sp
Use the
.B -o
option with extreme caution. This option sets the disk
blocks to the
.B OK
state. If any errors exist on disk blocks within the
metadevice, Solaris Volume Manager might begin fabricating data. Instead of
using the
.B -o
option, you might want to initialize the device and
restore data from tape.
.RE

.SS "Soft Partition Options"
.sp
.LP
The following soft partition options are supported:
.sp
.ne 2
.mk
.na
.I softpart
.B -p
[\fB-e\fR] \fIcomponent\fR [\fB-A\fR
\fIalignment\fR] \fIsize\fR
.ad
.sp .6
.RS 4n
The
.I softpart
argument specifies the name of the soft partition. The
.B -p
specifies that the configuration is a soft partition.
.sp
The
.B -e
specifies that the entire disk specified by
.I component
as
.B c*t*d*
should be repartitioned and reserved for soft partitions. The
specified component is repartitioned such that slice 7 reserves space for
system (state database replica) usage and slice 0 contains all remaining
space on the disk. Slice 7 is a minimum of 4MB, but can be larger, depending
on the disk geometry. The newly created soft partition is placed on slice 0
of the device.
.sp
The
.I component
argument specifies the disk
.RB ( c*t*d* ),
slice
(\fBc*t*d*s*\fR), or meta device (\fBd*\fR) from which to create the soft
partition. The
.I size
argument determines the space to use for the soft
partition and can be specified in
.B K
or
.B k
for kilobytes, \fBM\fR
or
.B m
for megabytes,
.B G
or
.B g
for gigabytes,
.B T
or
.B t
for terabyte (one terabyte is the maximum size), and
.B B
or
.B b
for blocks (sectors). All values represent powers of 2, and upper
and lower case options are equivalent. Only integer values are permitted.
.sp
The
.B -A
alignment option sets the value of the soft partition extent
alignment. This option used when it is important specify a starting offset
for the soft partition. It preserves the data alignment between the
metadevice address space and the address space of the underlying physical
device. For example, a hardware device that does checksumming should not
have its I/O requests divided by Solaris Volume Manager. In this case, use a
value from the hardware configuration as the value for the alignment. When
you use this option in conjunction with a software I/O load, the alignment
value corresponds to the I/O load of the application. This prevents I/O from
being divided unnecessarily and affecting performance.
.sp
The literal
.BR all ,
used instead of specifying size, specifies that the
soft partition should occupy all available space on the device.
.RE

.SS "Hot Spare Pool Options"
.sp
.LP
The following hot spare pool options are supported:
.sp
.ne 2
.mk
.na
.I hot_spare_pool
.B [
\fIhotspare.\|.\|.\fR
.B ]
.ad
.sp .6
.RS 4n
When used as arguments to the
.B metainit
.RI command, " hot_spare_pool"
defines the name for a hot spare pool, and \fIhotspare.\|.\|.\fR is the logical
name for the physical slice(s) for availability in that pool. Names for hot
spare pools can be any legal file name that is composed of alphanumeric
characters, a dash ("-"), an underscore ("_"), or a period ("."). Names must
begin with a letter. The words "all" and "none" are reserved and cannot be
used.
.RE

.SS "\fBmd.tab\fR File Options"
.sp
.LP
The following
.B md.tab
file options are supported:
.sp
.ne 2
.mk
.na
.I metadevice-name
.ad
.sp .6
.RS 4n
When the
.B metainit
command is run with a
.I metadevice-name
as its
only argument, it searches the
.B /etc/lvm/md.tab
file to find that name
and its corresponding entry. The order in which entries appear in the
.B md.tab
file is unimportant. For example, consider the following
.B md.tab
entry:
.sp
.in +2
.nf
d0 2 1 c1t0d0s0 1 c2t1d0s0
.fi
.in -2
.sp

When you run the command
.BR "metainit d0" ,
it configures metadevice
.B d0
based on the configuration information found in the
.BR md.tab
file.
.RE

.sp
.ne 2
.mk
.na
.B -a
.ad
.sp .6
.RS 4n
Activates all metadevices defined in the
.B md.tab
file.
.sp
.B metainit
does not maintain the state of the volumes that would have
been created when
.B metainit
is run with both the
.B -a
and
.BR -n
flags. If a device
.B d0
is created in the first line of the
.BR md.tab
file, and a later line in
.B md.tab
assumes the existence of
.BR d0 ,
the later line fails when
.B "metainit -an"
runs (even if it would
succeed with
.BR "metainit -a" ).
.RE

.SH EXAMPLES
.LP
.B Example 1
Creating a One-on-One Concatenation
.sp
.LP
The following command creates a one-on-one concatenation for the root
slice. This is the first step you take when setting up a mirror for the root
slice (and any other slice that cannot be unmounted). The
.B -f
option is
required to create a volume with an existing file system, such as
root(\fB/\fR).

.sp
.in +2
.nf
# metainit \fB-f\fR dl 1 1 c0t0d0s0
.fi
.in -2
.sp

.sp
.LP
The preceding command makes
.B d1
a one-on-one concatenation, using the
root slice. You can then enter:

.sp
.in +2
.nf
# metainit d0 -m d1
.fi
.in -2
.sp

.sp
.LP
\&.\|.\|.to make a one-way mirror of the root slice.

.LP
.B Example 2
Concatenation
.sp
.LP
All drives in the following examples have the same size of 525 Mbytes.

.sp
.LP
This example shows a metadevice,
.BR /dev/md/dsk/d7 ,
consisting of a
concatenation of four slices.

.sp
.in +2
.nf
# metainit d7 4 1 c0t1d0s0 1 c0t2d0s0 1 c0t3d0s0 1 /dev/dsk/c0t4d0s0
.fi
.in -2
.sp

.sp
.LP
The number 4 indicates there are four individual stripes in the
concatenation. Each stripe is made of one slice, hence the number 1 appears
in front of each slice. The first disk sector in all of these devices
contains a disk label. To preserve the labels on devices
.BR /dev/dsk/c0t2d0s0 ,
.BR /dev/dsk/c0t3d0s0 ,
and
.BR /dev/dsk/c0t4d0s0 ,
the metadisk driver must skip at least the first
sector of those disks when mapping accesses across the concatenation
boundaries. Because skipping only the first sector would create an irregular
disk geometry, the entire first cylinder of these disks is skipped. This
allows higher level file system software to optimize block allocations
correctly.

.LP
.B Example 3
Stripe
.sp
.LP
This example shows a metadevice,
.BR /dev/md/dsk/d15 ,
consisting of two
slices.

.sp
.in +2
.nf
# metainit d15 1 2 c0t1d0s0 c0t2d0s0 -i 32k
.fi
.in -2
.sp

.sp
.LP
The number 1 indicates that one stripe is being created. Because the stripe
is made of two slices, the number 2 follows next. The optional \fB-i\fR
followed by
.B 32k
specifies the interlace size as 32 Kbytes. If the
interlace size were not specified, the stripe would use the default value of
16 Kbytes.

.LP
.B Example 4
Concatentation of Stripes
.sp
.LP
This example shows a metadevice,
.BR /dev/md/dsk/d75 ,
consisting of a
concatenation of two stripes of three disks.

.sp
.in +2
.nf
# metainit d75 2 3 c0t1d0s0 c0t2d0s0 \e
      c0t3d0s0 -i 16k \e
      3 c1t1d0s0 c1t2d0s0 c1t3d0s0 -i 32k
.fi
.in -2
.sp

.sp
.LP
On the first line, the
.B -i
followed by 16k specifies that the stripe
interlace size is 16 Kbytes. The second set specifies the stripe interlace
size as 32 Kbytes. If the second set did not specify 32 Kbytes, the set
would use the default interlace value of 16 Kbytes. The blocks of each set
of three disks are interlaced across three disks.

.LP
.B Example 5
Mirroring
.sp
.LP
This example shows a two-way mirror,
.BR /dev/md/dsk/d50 ,
consisting of
two submirrors. This mirror does not contain any existing data.

.sp
.in +2
.nf
# metainit d51 1 1 c0t1d0s0
# metainit d52 1 1 c0t2d0s0
# metainit d50 -m d51
# metattach d50 d52
.fi
.in -2
.sp

.sp
.LP
In this example, two submirrors,
.B d51
and
.BR d52 ,
are created with
the
.B metainit
command. These two submirrors are simple concatenations.
Next, a one-way mirror,
.BR d50 ,
is created using the
.B -m
option with
.BR d51 .
The second submirror is attached later using the
.BR metattach
command. When creating a mirror, any combination of stripes and
concatenations can be used. The default read and write options in this
example are a round-robin read algorithm and parallel writes to all
submirrors.

.LP
.B Example 6
Creating a metadevice in a diskset
.sp
.LP
This example shows a metadevice,
.BR /dev/md/dsk/d75 ,
consisting of a
concatenation of two stripes within a diskset called
.BR set1 .

.sp
.in +2
.nf
# metainit -s set1 d75 2 3 c2t1d0s0 c2t2d0s0 \e
      c2t3d0s0 -i 32k
# metainit -s set1 d51 1 1 c2t1d0s0
# metainit -s set1 d52 1 1 c3t1d0s0
# metainit -s set1 d50 -m d51
# metattach -s set1 d50 d52
.fi
.in -2
.sp

.sp
.LP
In this example, a diskset is created using the
.B metaset
command.
Metadevices are then created within the diskset using the
.BR metainit
command. The two submirrors,
.B d51
and
.BR d52 ,
are simple
concatenations. Next, a one-way mirror,
.BR d50 ,
is created using the
.B -m
option with
.BR d51 .
The second submirror is attached later using
the
.B metattach
command. When creating a mirror, any combination of
stripes and concatenations can be used. The default read and write options
in this example are a round-robin read algorithm and parallel writes to all
submirrors.

.LP
.B Example 7
RAID Level 5
.sp
.LP
This example shows a RAID level 5 device,
.BR d80 ,
consisting of three
slices:

.sp
.in +2
.nf
# metainit d80 -r c1t0d0s0 c1t1d0s0 c1t3d0s0 -i 20k
.fi
.in -2
.sp

.sp
.LP
In this example, a RAID level 5 metadevice is defined using the \fB-r\fR
option with an interlace size of 20 Kbytes. The data and parity segments are
striped across the slices,
.BR c1t0d0s0 ,
.BR c1t2d0s0 ,
and
.BR c1t3d0s0 .

.LP
.B Example 8
Soft Partition
.sp
.LP
The following example shows a soft partition device,
.BR d1 ,
built on
metadevice
.B d100
and 100 Mbytes (indicated by
.BR 100M )
in size:

.sp
.in +2
.nf
# metainit d1 -p d100 100M
.fi
.in -2
.sp

.sp
.LP
The preceding command creates a 100 Mbyte soft partition on the
.BR d100
metadevice. This metadevice could be a RAID level 5, stripe, concatenation,
or mirror.

.LP
.B Example 9
Soft Partition on Full Disk
.sp
.LP
The following example shows a soft partition device,
.BR d1 ,
built on
disk
.BR c3t4d0 :

.sp
.in +2
.nf
# metainit d1 -p -e c3t4d0 9G
.fi
.in -2
.sp

.sp
.LP
In this example, the disk is repartitioned and a soft partition is defined
to occupy all 9 Gbytes of disk
.BR c3t4d0s0 .

.LP
.B Example 10
Soft Partition Taking All Available Space
.sp
.LP
The following example shows a soft partition device,
.BR d1 ,
built on
disk
.BR c3t4d0 :

.sp
.in +2
.nf
# metainit d1 -p -e c3t4d0 all
.fi
.in -2
.sp

.sp
.LP
In this example, the disk is repartitioned and a soft partition is defined
to occupy all available disk space on slice
.BR c3t4d0s0 .

.LP
.B Example 11
Hot Spare
.sp
.LP
This example shows a two-way mirror,
.BR /dev/md/dsk/d10 ,
and a hot spare
pool with three hot spare components. The mirror does not contain any
existing data.

.sp
.in +2
.nf
# metainit hsp001 c2t2d0s0 c3t2d0s0 c1t2d0s0
# metainit d41 1 1 c1t0d0s0 -h hsp001
# metainit d42 1 1 c3t0d0s0 -h hsp001
# metainit d40 -m d41
# metattach d40 d42
.fi
.in -2
.sp

.sp
.LP
In this example, a hot spare pool,
.BR hsp001 ,
is created with three
slices from three different disks used as hot spares. Next, two submirrors
are created,
.B d41
and
.BR d42 .
These are simple concatenations. The
.B metainit
command uses the
.B -h
option to associate the hot spare
pool
.B hsp001
with each submirror. A one-way mirror is then defined
using the
.B -m
option. The second submirror is attached using the
.B metattach
command.

.LP
.B Example 12
Setting the Value of the Soft Partition Extent Alignment
.sp
.LP
This example shows how to set the alignment of the soft partition to 1
megabyte.

.sp
.in +2
.nf
# metainit -s red d13 -p c1t3d0s4 -A 1m 4m
.fi
.in -2
.sp

.sp
.LP
In this example the soft partition,
.BR d13 ,
is created with an extent
alignment of 1 megabyte. The
.B metainit
command uses the
.B -A
option
with an alignment of
.B 1m
to define the soft partition extent
alignment.

.SH FILES
.sp
.ne 2
.mk
.na
.B /etc/lvm/md.tab
.ad
.sp .6
.RS 4n
Contains list of metadevice and hot spare configurations for batch-like
creation.
.RE

.SH WARNINGS
.sp
.LP
This section contains information on different types of warnings.
.SS "Devices and Volumes Greater Than 1 TB"
.sp
.LP
Do not create large (>1 TB) volumes if you expect to run the Solaris
Operating Environment with a 32-bit kernel or if you expect to use a version
of the Solaris Operating Environment prior to Solaris 10.
.SS "Multi-Way Mirror"
.sp
.LP
Do not use the
.B metainit
command to create a multi-way mirror. Rather,
create a one-way mirror with
.B metainit
then attach additional
submirrors with
.BR metattach .
When the
.B metattach
command is not
used, no resync operations occur and data could become corrupted.
.sp
.LP
If you use
.B metainit
to create a mirror with multiple submirrors, the
following message is displayed:
.sp
.in +2
.nf
WARNING: This form of metainit is not recommended.
The submirrors may not have the same data.
Please see ERRORS in metainit(1M) for additional information.
.fi
.in -2
.sp

.SS "Truncation of Soft Partitions"
.sp
.LP
When creating stripes on top of soft partitions it is possible for the size
of the new stripe to be less than the size of the underlying soft partition.
If this occurs,
.B metainit
fails with an error indicating the actions
required to overcome the failure.
.sp
.LP
If you use the
.B -f
option to override this behavior, the following
message is displayed:
.sp
.in +2
.nf
WARNING: This form of metainit is not recommended.
The stripe is truncating the size of the underlying device.
Please see ERRORS in metainit(1M) for additional information.
.fi
.in -2
.sp

.SS "Write-On-Write Problem"
.sp
.LP
When mirroring data in Solaris Volume Manager, transfers from memory to the
disks do not all occur at exactly the same time for all sides of the mirror.
If the contents of buffers are changed while the data is in-flight to the
disk (called write-on-write), then different data can end up being stored on
each side of a mirror.
.sp
.LP
This problem can be addressed by making a private copy of the data for
mirror writes, however, doing this copy is expensive. Another approach is to
detect when memory has been modified across a write by looking at the
dirty-bit associated with the memory page. Solaris Volume Manager uses this
dirty-bit technique when it can. Unfortunately, this technique does not work
for raw I/O or direct I/O. By default, Solaris Volume Manager is tuned for
performance with the liability that mirrored data might be out of sync if an
application does a "write-on-write" to buffers associated with raw I/O or
direct I/O. Without mirroring, you were not guaranteed what data would
actually end up on media, but multiple reads would return the same data.
With mirroring, multiple reads can return different data. The following line
can be added to
.B /etc/system
to cause a stable copy of the buffers to
be used for all raw I/O and direct I/O write operations.
.sp
.in +2
.nf
set md_mirror:md_mirror_wow_flg=0x20
.fi
.in -2
.sp

.sp
.LP
Setting this flag degrades performance.
.SH EXIT STATUS
.sp
.LP
The following exit values are returned:
.sp
.ne 2
.mk
.na
.B 0
.ad
.sp .6
.RS 4n
Successful completion.
.RE

.sp
.ne 2
.mk
.na
.B >0
.ad
.sp .6
.RS 4n
An error occurred.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWmdr
_
Interface StabilityStable
.TE

.SH SEE ALSO
.sp
.LP
.BR mdmonitord (1M),
.BR metaclear (1M),
.BR metadb (1M),
.BR metadetach (1M),
.BR metahs (1M),
.BR metaoffline (1M),
.BR metaonline (1M),
.BR metaparam (1M),
.BR metarecover (1M),
.BR metarename (1M),
.BR metareplace (1M),
.BR metaroot (1M),
.BR metaset (1M),
.BR metassist (1M),
.BR metastat (1M),
.BR metasync (1M),
.BR metattach (1M),
.BR md.tab (4),
.BR md.cf (4),
.BR mddb.cf (4),
.BR md.tab (4),
.BR attributes (5),
.BR md (7D)
.sp
.LP
\fR
.SH LIMITATIONS
.sp
.LP
Recursive mirroring is not allowed; that is, a mirror cannot appear in the
definition of another mirror.
.sp
.LP
Recursive logging is not allowed; that is, a trans metadevice cannot appear
in the definition of another metadevice.
.sp
.LP
Stripes, concatenations, and RAID level 5 metadevices must consist of
slices only.
.sp
.LP
Mirroring of RAID level 5 metadevices is not allowed.
.sp
.LP
Soft partitions can be built on raw devices, or on stripes, RAID level 5,
or mirrors.
.sp
.LP
RAID level 5 or stripe metadevices can be built directly on soft
partitions.
.SH NOTES
.sp
.LP
Trans metadevices have been replaced by UFS logging. Existing trans devices
are
.B not
logging--they pass data directly through to the underlying
device. See \fBmount_ufs\fR(1M) for more information about UFS logging.
