'\" te
.\" Copyright (C) 2008, Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ipseckey 1M "25 Sep 2008" "SunOS 5.11" "System Administration Commands"
.SH NAME
ipseckey \- manually manipulate an IPsec Security Association Database
(SADB)
.SH SYNOPSIS
.LP
.nf
\fBipseckey\fR  [\fB-nvp\fR]
.fi

.LP
.nf
\fBipseckey\fR  [\fB-nvp\fR] \fB-f\fR \fIfilename\fR
.fi

.LP
.nf
\fBipseckey\fR  \fB-c\fR \fIfilename\fR
.fi

.LP
.nf
\fBipseckey\fR  [\fB-nvp\fR] [delete | delete-pair | get] SA_TYPE {EXTENSION \fIvalue\fR.\|.\|.}
.fi

.LP
.nf
\fBipseckey\fR  [\fB-np\fR] [monitor |  passive_monitor |  pmonitor]
.fi

.LP
.nf
\fBipseckey\fR  [\fB-nvp\fR] flush {SA_TYPE}
.fi

.LP
.nf
\fBipseckey\fR  [\fB-nvp\fR] dump {SA_TYPE}
.fi

.LP
.nf
\fBipseckey\fR  [\fB-nvp\fR] save SA_TYPE {\fIfilename\fR}
.fi

.LP
.nf
\fBipseckey\fR  [\fB-nvp\fR] \fB-s\fR \fIfilename\fR
.fi

.SH DESCRIPTION
.sp
.LP
The
.B ipseckey
command is used to manually manipulate the security
association databases of the network security services, \fBipsecah\fR(7P)
and
.BR ipsecesp "(7P). You can use the"
.B ipseckey
command to set up
security associations between communicating parties when automated key
management is not available.
.sp
.LP
While the
.B ipseckey
utility has only a limited number of general
options, it supports a rich command language. The user may specify requests
to be delivered by means of a programmatic interface specific for manual
keying. See \fBpf_key\fR(7P). When
.B ipseckey
is invoked with no
arguments, it will enter an interactive mode which prints a prompt to the
standard output and accepts commands from the standard input until the
end-of-file is reached. Some commands require an explicit security
association ("\fBSA\fR") type, while others permit the \fBSA\fR type to be
unspecified and act on all
.B SA
types.
.sp
.LP
\fBipseckey\fR uses a \fBPF_KEY\fR socket and the message types
.BR SADB_ADD ,
.BR SADB_DELETE ,
.BR SADB_GET ,
.BR SADB_UPDATE ,
.BR SADB_FLUSH ,
and
.BR SADB_X_PROMISC .
Thus, you must be a superuser to
use this command.
.sp
.LP
\fBipseckey\fR handles sensitive cryptographic keying information. Please
read the
.B Security
section for details on how to use this command
securely.
.SH OPTIONS
.sp
.ne 2
.mk
.na
\fB-c\fR [\fIfilename\fR]\fR
.ad
.sp .6
.RS 4n
Analogous to the \fB-f\fR option (see following), except that the input is
not executed but only checked for syntactical correctness. Errors are
reported to
.BR stderr .
This option is provided to debug configurations
without making changes. See \fBSECURITY\fR and "Service Management Facility"
for more information.
.RE

.sp
.ne 2
.mk
.na
\fB-f\fR [\fIfilename\fR]\fR
.ad
.sp .6
.RS 4n
Read commands from an input file,
.IR filename .
The lines of the input
file are identical to the command line language. The
.B load
command
provides similar functionality. The
.B -s
option or the
.BR save
command can generate files readable by the \fB-f\fR argument.
.RE

.sp
.ne 2
.mk
.na
.B -n
.ad
.sp .6
.RS 4n
Prevent attempts to print host and network names symbolically when
reporting actions. This is useful, for example, when all name servers are
down or are otherwise unreachable.
.RE

.sp
.ne 2
.mk
.na
.B -p
.ad
.sp .6
.RS 4n
Paranoid. Do not print any keying material, even if saving \fBSA\fRs.
Instead of an actual hexadecimal digit, print an
.B X
when this flag is
turned on.
.RE

.sp
.ne 2
.mk
.na
\fB-s\fR [\fIfilename\fR]\fR
.ad
.sp .6
.RS 4n
The opposite of the \fB-f\fR option. If '\fB-\fR' is given for a
\fIfilename\fR, then the output goes to the standard output. A snapshot of
all current
.B SA
tables will be output in a form readable by the
\fB-f\fR option. The output will be a series of \fBadd\fR commands, but with
some names not used. This occurs because a single name may often indicate
multiple addresses.
.RE

.sp
.ne 2
.mk
.na
.B -v
.ad
.sp .6
.RS 4n
Verbose. Print the messages being sent into the
.B PF_KEY
socket, and
print raw seconds values for lifetimes.
.RE

.SH COMMANDS
.sp
.ne 2
.mk
.na
.B add
.ad
.sp .6
.RS 4n
Add an
.BR SA .
Because it involves the transfer of keying material, it
cannot be invoked from the shell, lest the keys be visible in \fBps\fR(1)
output. It can be used either from the interactive
.B ipseckey>
prompt or
in a command file specified by the \fB-f\fR command. The
.B add
command
accepts all extension-value pairs described below.
.RE

.sp
.ne 2
.mk
.na
.B update
.ad
.sp .6
.RS 4n
Update
.B SA
lifetime, and in the cases of larval \fBSA\fRs (leftover
from aborted automated key management), keying material and other
extensions. Like
.BR add ,
this command cannot be invoked from the shell
because keying material would be seen by the
.BR ps (1)
command. It can be
used either from the interactive
.B ipseckey>
prompt or in a command file
specified by the \fB-f\fR command. The
.B update
command accepts all
extension-value pairs, but normally is only used for
.B SA
lifetime
updates.
.RE

.sp
.ne 2
.mk
.na
.B update-pair
.ad
.sp .6
.RS 4n
As update, but apply the update to the SA and its paired SA, if there is
one.
.RE

.sp
.ne 2
.mk
.na
.B delete
.ad
.sp .6
.RS 4n
Delete a specific
.B SA
from a specific
.BR SADB .
This command
requires the
.B spi
extension, and the
.B dest
extension for IPsec
\fBSA\fRs. Other extension-value pairs are superfluous for a delete message.
If the SA to be deleted is paired with another SA, the SA is deleted and the
paired SA is updated to indicate that it is now unpaired.
.RE

.sp
.ne 2
.mk
.na
.B delete-pair
.ad
.sp .6
.RS 4n
Delete a specific SA from a specific SADB. If the SA is paired with another
SA, delete that SA too. This command requires the
.B spi
extension and
the
.B dest
extension for the IPsec SA, or its pair.
.RE

.sp
.ne 2
.mk
.na
.B get
.ad
.sp .6
.RS 4n
Lookup and display a security association from a specific
.BR SADB .
Like
.BR delete ,
this command only requires
.B spi
and
.B dest
for
IPsec.
.RE

.sp
.ne 2
.mk
.na
\fBflush\fR
.ad
.sp .6
.RS 4n
Remove all
.B SA
for a given
.BR SA_TYPE ,
or all
.B SA
for all
types.
.RE

.sp
.ne 2
.mk
.na
.B monitor
.ad
.sp .6
.RS 4n
Continuously report on any
.B PF_KEY
messages. This uses the
\fBSADB_X_PROMISC\fR message to enable messages that a normal \fBPF_KEY\fR
socket would not receive to be received. See \fBpf_key\fR(7P).
.RE

.sp
.ne 2
.mk
.na
.B passive_monitor
.ad
.sp .6
.RS 4n
Like monitor, except that it does not use the
.B SADB_X_PROMISC
message.

.RE

.sp
.ne 2
.mk
.na
.B pmonitor
.ad
.sp .6
.RS 4n
Synonym for
.BR passive_monitor .
.RE

.sp
.ne 2
.mk
.na
.B dump
.ad
.sp .6
.RS 4n
Will display all \fBSA\fRs for a given
.B SA
type, or will display all
\fBSA\fRs. Because of the large amount of data generated by this command,
there is no guarantee that all
.B SA
information will be successfully
delivered, or that this command will even complete.
.RE

.sp
.ne 2
.mk
.na
.B save
.ad
.sp .6
.RS 4n
Is the command analog of the
.B -s
option. It is included as a command
to provide a way to snapshot a particular
.B SA
type, for example,
\fBesp\fR or \fBah\fR.
.RE

.sp
.ne 2
.mk
.na
.B help
.ad
.sp .6
.RS 4n
Prints a brief summary of commands.
.RE

.SS "\fBSA_TYPE\fR"
.sp
.ne 2
.mk
.na
.B all
.ad
.sp .6
.RS 4n
Specifies all known
.B SA
types. This type is only used for the
\fBflush\fR and \fBdump\fR commands. This is equivalent to having no
\fBSA\fR type for these commands.
.RE

.sp
.ne 2
.mk
.na
.B ah
.ad
.sp .6
.RS 4n
Specifies the IPsec Authentication Header ("\fBAH\fR") \fBSA\fR.
.RE

.sp
.ne 2
.mk
.na
.B esp
.ad
.sp .6
.RS 4n
Specifies the IPsec Encapsulating Security Payload ("\fBESP\fR")
.BR SA .
.RE

.SH EXTENSION VALUE TYPES
.sp
.LP
Commands like
.BR add ,
.BR delete ,
.BR get ,
and
.B update
require
that certain extensions and associated values be specified. The extensions
will be listed here, followed by the commands that use them, and the
commands that require them. Requirements are currently documented based upon
the IPsec definitions of an
.BR SA .
Required extensions may change in the
future.
.B <number>
can be in either hex
.RB ( 0xnnn ),
decimal
(\fBnnn\fR) or octal (\fB0nnn\fR).\fB<string>\fR is a text string.
\fB<hexstr>\fR is a long hexadecimal number with a bit-length. Extensions
are usually paired with values; however, some extensions require two values
after them.
.sp
.ne 2
.mk
.na
\fBspi \fI<number>\fR
.ad
.sp .6
.RS 4n
Specifies the security parameters index of the
.BR SA .
This extension is
required for the
.BR add ,
.BR delete ,
\fBget\fR and \fBupdate\fR
commands.
.RE

.sp
.ne 2
.mk
.na
\fBpair-spi \fI<number>\fR
.ad
.sp .6
.RS 4n
When
.B pair-spi
is used with the
.B add
or
.B update
commands,
the SA being added or updated will be paired with the SA defined by
.BR pair-spi .
A pair of SAs can be updated or deleted with a single
command.
.sp
The two SAs that make up the pair need to be in opposite directions from
the same pair of IP addresses. The command will fail if either of the SAs
specified are already paired with another SA.
.sp
If the pair-spi token is used in a command and the SA defined by pair-spi
does not exist, the command will fail. If the command was
.B add
and the
pairing failed, the SA to be added will instead be removed.
.RE

.sp
.ne 2
.mk
.na
.B inbound | outbound
.ad
.sp .6
.RS 4n
These optional flags specify the direction of the SA. When the
\fBinbound\fR or \fBoutbound\fR flag is specified with the \fBadd\fR
command, the kernel will insert the new SA into the specified hash table for
faster lookups. If the flag is omitted, the kernel will decide into which
hash table to insert the new SA based on its knowledge the IP addresses
specified with the
.B src
and
.B dst
extensions.
.sp
When these flags are used with the
.BR update ,
.BR delete ,
\fBupdate-pair\fR or \fBget\fR commands, the flags provide a hint as to the
hash table in which the kernel should find the SA.
.RE

.sp
.ne 2
.mk
.na
\fBreplay\fR \fI<number>\fR
.ad
.sp .6
.RS 4n
Specifies the replay window size. If not specified, the replay window size
is assumed to be zero. It is not recommended that manually added \fBSA\fRs
have a replay window. This extension is used by the
.B add
and
\fBupdate\fR commands.
.RE

.sp
.ne 2
.mk
.na
\fBreplay_value\fR \fI<number>\fR
.ad
.sp .6
.RS 4n
Specifies the replay value of the SA. This extension is used by the
\fBadd\fR and \fBupdate\fR commands.
.RE

.sp
.ne 2
.mk
.na
\fBstate \fI<string>\fR|\fI<number>\fR
.ad
.sp .6
.RS 4n
Specifies the
.B SA
state, either by numeric value or by the strings
"\fBlarval\fR", "\fBmature\fR", "\fBdying\fR" or "\fBdead\fR". If not
specified, the value defaults to
.BR mature .
This extension is used by the
\fBadd\fR and \fBupdate\fR commands.
.RE

.sp
.ne 2
.mk
.na
\fBauth_alg \fI<string>\fR|\fI<number>\fR
.ad
.br
.na
.B authalg <string>|<number>
.ad
.sp .6
.RS 4n
Specifies the authentication algorithm for an
.BR SA ,
either by numeric
value, or by strings indicating an algorithm name. Current authentication
algorithms include:
.sp
.ne 2
.mk
.na
.B HMAC-MD5
.ad
.sp .6
.RS 4n
.BR md5 ,
.B hmac-md5
.RE

.sp
.ne 2
.mk
.na
.B HMAC-SH-1
.ad
.sp .6
.RS 4n
.BR sha ,
.BR sha-1 ,
.BR hmac-sha1 ,
.B hmac-sha
.RE

.sp
.ne 2
.mk
.na
.B HMAC-SHA-256
.ad
.sp .6
.RS 4n
.BR sha256 ,
.BR sha-256 ,
.BR hmac-sha256 ,
.B hmac-sha-256
.RE

.sp
.ne 2
.mk
.na
.B HMAC-SHA-384
.ad
.sp .6
.RS 4n
.BR sha384 ,
.BR sha-384 ,
.BR hmac-sha384 ,
.B hmac-sha-384
.RE

.sp
.ne 2
.mk
.na
.B HMAC-SHA-512
.ad
.sp .6
.RS 4n
.BR sha512 ,
.BR sha-512 ,
.BR hmac-sha512 ,
.B hmac-sha-512
.RE

Often, algorithm names will have several synonyms. This extension is
required by the
.B add
command for certain
.B SA
types. It is also
used by the
.B update
command.
.sp
Use the \fBipsecalgs\fR(1M) command to obtain the complete list of
authentication algorithms.
.RE

.sp
.ne 2
.mk
.na
\fBencr_alg \fI<string>\fR|\fI<number>\fR
.ad
.br
.na
\fBencralg \fI<string>\fR|\fI<number>\fR
.ad
.sp .6
.RS 4n
Specifies the encryption algorithm for an SA, either by numeric value, or
by strings indicating an algorithm name. Current encryption algorithms
include DES ("\fBdes\fR"), Triple-DES ("\fB3des\fR"), Blowfish ("blowfish"),
and AES ("aes"). This extension is required by the add command for certain
\fBSA\fR types. It is also used by the \fBupdate\fR command.
.sp
Use the \fBipsecalgs\fR(1M) command to obtain the complete list of
encryption algorithms.
.RE

.sp
.LP
The next six extensions are lifetime extensions. There are two varieties,
"\fBhard\fR" and "\fBsoft\fR". If a \fBhard\fR lifetime expires, the
\fBSA\fR will be deleted automatically by the system. If a \fBsoft\fR
lifetime expires, an
.B SADB_EXPIRE
message will be transmitted by the
system, and its state will be downgraded to
.B dying
from
.BR mature .
See \fBpf_key\fR(7P). The
.B monitor
command to
.B key
allows you to
view
.B SADB_EXPIRE
messages.
.sp
.ne 2
.mk
.na
\fBidle_addtime\fR \fI<number>\fR
.ad
.br
.na
\fBidle_usetime\fR \fI<number>\fR
.ad
.sp .6
.RS 4n
Specifies the number of seconds that this SA can exist if the SA is not
used before the SA is revalidated. If this extension is not present, the
default value is half of the
.B hard_addtime
(see below). This extension
is used by the
.B add
and
.B update
commands.
.RE

.sp
.ne 2
.mk
.na
\fBsoft_bytes \fI<number>\fR
.ad
.br
.na
\fBhard_bytes \fI<number>\fR
.ad
.sp .6
.RS 4n
Specifies the number of bytes that this
.B SA
can protect. If this
extension is not present, the default value is zero, which means that the
\fBSA\fR will not expire based on the number of bytes protected. This
extension is used by the
.B add
and
.B update
commands.
.RE

.sp
.ne 2
.mk
.na
\fBsoft_addtime \fI<number>\fR
.ad
.br
.na
\fBhard_addtime \fI<number>\fR
.ad
.sp .6
.RS 4n
Specifies the number of seconds that this
.B SA
can exist after being
added or updated from a larval
.BR SA .
An update of a mature
.B SA
does
not reset the initial time that it was added. If this extension is not
present, the default value is zero, which means the
.B SA
will not expire
based on how long it has been since it was added. This extension is used by
the
.B add
and
.B update
commands.
.RE

.sp
.ne 2
.mk
.na
\fBsoft_usetime \fI<number>\fR
.ad
.br
.na
\fBhard_usetime \fI<number>\fR
.ad
.sp .6
.RS 4n
Specifies the number of seconds this
.B SA
can exist after first being
used. If this extension is not present, the default value is zero, which
means the
.B SA
will not expire based on how long it has been since it
was added. This extension is used by the
.B add
and
.BR update
commands.
.RE

.sp
.ne 2
.mk
.na
\fBsaddr \fIaddress\fR | \fIname\fR
.ad
.br
.na
\fBsrcaddr \fIaddress\fR | \fIname\fR
.ad
.br
.na
\fBsaddr6 \fIIPv6 address\fR
.ad
.br
.na
\fBsrcaddr6 \fIIPv6 address\fR
.ad
.br
.na
\fBsrc \fIaddress\fR | \fIname\fR
.ad
.br
.na
\fBsrc6 \fIIPv6 address\fR
.ad
.sp .6
.RS 4n
\fBsrcaddr \fIaddress\fR and \fBsrc \fIaddress\fR are synonyms that
indicate the source address of the
.BR SA .
If unspecified, the source
address will either remain unset, or it will be set to a wildcard address if
a destination address was supplied. To not specify the source address is
valid for IPsec
.BR SA "s. Future"
.B SA
types may alter this assumption.
This extension is used by the
.BR add ,
.BR update ,
\fBget\fR and
\fBdelete\fR commands.
.RE

.sp
.ne 2
.mk
.na
\fBdaddr \fI<address>\fR|\fI<name>\fR
.ad
.br
.na
\fBdstaddr \fI<address>\fR|\fI<name>\fR
.ad
.br
.na
\fBdaddr6 \fI<IPv6 address>\fR|\fI<name>\fR
.ad
.br
.na
\fBdstaddr6 \fI<IPv6 address>\fR|\fI<name>\fR
.ad
.br
.na
\fBdst \fI<addr>\fR|\fI<name>\fR
.ad
.br
.na
\fBdst6 \fI<IPv6 address>\fR|\fI<name>\fR
.ad
.sp .6
.RS 4n
\fBdstaddr \fI<addr>\fR and \fBdst \fI<addr>\fR are synonyms that
indicate the destination address of the
.BR SA .
If unspecified, the
destination address will remain unset. Because IPsec \fBSA\fRs require a
specified destination address and
.B spi
for identification, this
extension, with a specific value, is required for the \fBadd\fR,
.BR update ,
\fBget\fR and \fBdelete\fR commands.
.sp
If a name is given,
.B ipseckey
will attempt to invoke the command on
multiple \fBSA\fRs with all of the destination addresses that the name can
identify. This is similar to how \fBipsecconf\fR handles addresses.
.sp
If
.B dst6
or
.B dstaddr6
is specified, only the IPv6 addresses
identified by a name are used.
.RE

.sp
.ne 2
.mk
.na
\fBsport\fR \fI<portnum>\fR
.ad
.sp .6
.RS 4n
\fBsport\fR specifies the source port number for an SA. It should be used
in combination with an upper-layer protocol (see below), but it does not
have to be.
.RE

.sp
.ne 2
.mk
.na
\fBdport\fR \fI<portnum>\fR
.ad
.sp .6
.RS 4n
sport specifies the destination port number for an SA. It should be used in
combination with an upper-layer protocol (see below), but it does not have
to be.
.RE

.sp
.ne 2
.mk
.na
\fBencap\fR \fI<protocol>\fR
.ad
.sp .6
.RS 4n
Identifies the protocol used to encapsulate NAT-traversal IPsec packets.
Other NAT-traversal parameters (\fBnat_*\fR) are below.  The only acceptable
value for
.I <protocol>
currently is
.BR udp .
.RE

.sp
.ne 2
.mk
.na
\fBproto\fR \fI<protocol number>\fR
.ad
.br
.na
\fBulp\fR \fI<protocol number>\fR
.ad
.sp .6
.RS 4n
.BR proto ,
and its synonym
.BR ulp ,
specify the IP protocol number of
the SA.
.RE

.sp
.ne 2
.mk
.na
\fBnat_loc\fR \fI<address>\fR|\fI<name>\fR
.ad
.sp .6
.RS 4n
If the local address in the SA (source or destination) is behind a NAT,
this extension indicates the NAT node's globally-routable address. This
address can match the SA's local address if there is a
.B nat_lport
(see
below) specified.
.RE

.sp
.ne 2
.mk
.na
\fBnat_rem\fR \fI<address>\fR|\fI<name>\fR
.ad
.sp .6
.RS 4n
If the remote address in the SA (source or destination) is behind a NAT,
this extension indicates that node's internal (that is, behind-the-NAT)
address. This address can match the SA's local address if there is a
\fBnat_rport\fR (see below) specified.
.RE

.sp
.ne 2
.mk
.na
\fBnat_lport\fR \fI<portnum>\fR
.ad
.sp .6
.RS 4n
Identifies the local UDP port on which encapsulation of ESP occurs.
.RE

.sp
.ne 2
.mk
.na
\fBnat_rport\fR \fI<portnum>\fR
.ad
.sp .6
.RS 4n
Identifies the remote UDP port on which encapsulation of ESP occurs.
.RE

.sp
.ne 2
.mk
.na
\fBisrc\fR \fI<address>\fR | \fI<name>\fR[/\fI<prefix>\fR]\fR
.ad
.br
.na
\fBinnersrc\fR \fI<address>\fR | \fI<name>\fR[/\fI<prefix>\fR]\fR
.ad
.br
.na
\fBisrc6\fR \fI<address>\fR | \fI<name>\fR[/\fI<prefix>\fR]\fR
.ad
.br
.na
\fBinnersrc6\fR \fI<address>\fR | \fI<name>\fR[/\fI<prefix>\fR]\fR
.ad
.br
.na
\fBproxyaddr\fR \fI<address>\fR | \fI<name>\fR[/\fI<prefix>\fR]\fR
.ad
.br
.na
\fBproxy\fR \fI<address>\fR | \fI<name>\fR[/\fI<prefix>\fR]\fR
.ad
.sp .6
.RS 4n
\fBisrc\fR \fI<address>\fR[/\fI<prefix>\fR] and \fBinnersrc\fR
\fI<address>\fR[/\fI<prefix>\fR] are synonyms. They indicate the inner
source address for a tunnel-mode SA.
.sp
An inner-source can be a prefix instead of an address. As with other
address extensions, there are IPv6-specific forms. In such cases, use only
IPv6-specific addresses or prefixes.
.sp
Previous versions referred to this value as the proxy address. The usage,
while deprecated, remains.
.RE

.sp
.ne 2
.mk
.na
\fBidst\fR \fI<address>\fR | \fI<name>\fR[/\fI<prefix>\fR]\fR
.ad
.br
.na
\fBinnerdst\fR \fI<address>\fR | \fI<name>\fR[/\fI<prefix>\fR]\fR
.ad
.br
.na
\fBidst6\fR \fI<address>\fR | \fI<name>\fR[/\fI<prefix>\fR]\fR
.ad
.br
.na
\fBinnerdst6\fR \fI<address>\fR | \fI<name>\fR[/\fI<prefix>\fR]\fR
.ad
.sp .6
.RS 4n
\fBidst\fR \fI<address>\fR[/\fI<prefix>\fR] and \fBinnerdst\fR
\fI<address>\fR[/\fI<prefix>\fR] are synonyms. They indicate the inner
destination address for a tunnel-mode SA.
.sp
An inner-destination can be a prefix instead of an address. As with other
address extensions, there are IPv6-specific forms. In such cases, use only
IPv6-specific addresses or prefixes.
.RE

.sp
.ne 2
.mk
.na
\fBinnersport\fR \fI<portnum>\fR
.ad
.br
.na
\fBisport\fR \fI<portnum>\fR
.ad
.sp .6
.RS 4n
\fBinnersport\fR specifies the source port number of the inner header for a
tunnel-mode SA. It should be used in combination with an upper-layer
protocol (see below), but it does not have to be.
.RE

.sp
.ne 2
.mk
.na
\fBinnerdport\fR \fI<portnum>\fR
.ad
.br
.na
\fBidport\fR \fI<portnum>\fR
.ad
.sp .6
.RS 4n
\fBinnerdport\fR specifies the destination port number of the inner header
for a tunnel-mode SA. It should be used in combination with an upper-layer
protocol (see below), but it does not have to be.
.RE

.sp
.ne 2
.mk
.na
\fBiproto\fR \fI<protocol number>\fBiulp\fR \fI<protocol
number>\fR
.ad
.sp .6
.RS 4n
.BR iproto ,
and its synonym
.BR iulp ,
specify the IP protocol number of
the inner header of a tunnel-mode SA.
.RE

.sp
.ne 2
.mk
.na
\fBauthkey \fI<hexstring>\fR
.ad
.sp .6
.RS 4n
Specifies the authentication key for this
.BR SA .
The key is expressed as
a string of hexadecimal digits, with an optional
.B /
at the end, for
example,
.BR 123/12 .
Bits are counted from the most-significant bits down.
For example, to express three '1' bits, the proper syntax is the string
"\fBe/3\fR". For multi-key algorithms, the string is the concatenation of
the multiple keys. This extension is used by the
.B add
and
.BR update
commands.
.RE

.sp
.ne 2
.mk
.na
\fBencrkey \fI<hexstring>\fR
.ad
.sp .6
.RS 4n
Specifies the encryption key for this
.BR SA .
The syntax of the key is
the same as
.BR authkey .
A concrete example of a multi-key encryption
algorithm is
.BR 3des ,
which would express itself as a 192-bit key, which
is three 64-bit parity-included
.B DES
keys. This extension is used by
the
.B add
and
.B update
commands.
.RE

.sp
.LP
Certificate identities are very useful in the context of automated key
management, as they tie the
.B SA
to the public key certificates used in
most automated key management protocols. They are less useful for manually
added
.BR SA "s. Unlike other extensions,"
.B srcidtype
takes two values,
a
.IR type ,
and an actual
.IR value .
The type can be one of the
following: 
.sp
.ne 2
.mk
.na
\fBprefix\fR
.ad
.sp .6
.RS 4n
An address prefix.
.RE

.sp
.ne 2
.mk
.na
\fBfqdn\fR
.ad
.sp .6
.RS 4n
A fully-qualified domain name.
.RE

.sp
.ne 2
.mk
.na
.B domain
.ad
.sp .6
.RS 4n
Domain name, synonym for \fBfqdn\fR.
.RE

.sp
.ne 2
.mk
.na
\fBuser_fqdn\fR
.ad
.sp .6
.RS 4n
User identity of the form \fIuser\fR@\fIfqdn\fR.
.RE

.sp
.ne 2
.mk
.na
.B mailbox
.ad
.sp .6
.RS 4n
Synonym for \fBuser_fqdn\fR.
.RE

.sp
.LP
The
.I value
is an arbitrary text string that should identify the
certificate.
.sp
.ne 2
.mk
.na
\fBsrcidtype \fI<type, value>\fR
.ad
.sp .6
.RS 4n
Specifies a source certificate identity for this
.BR SA .
This extension
is used by the
.B add
and
.B update
commands.
.RE

.sp
.ne 2
.mk
.na
\fBdstidtype \fI<type, value>\fR
.ad
.sp .6
.RS 4n
Specifies a destination certificate identity for this
.BR SA .
This
extension is used by the
.B add
and
.B update
commands
.RE

.SS "Tunnel Mode versus Transport Mode SAs"
.sp
.LP
An IPsec SA is a Tunnel Mode SA if the "proto" value is either 4
(\fBipip\fR) or 41 (\fBipv6\fR) \fBand\fR there is an inner-address or
inner-port value specified. Otherwise, the SA is a Transport Mode SA.
.SH SECURITY
.sp
.LP
Keying material is very sensitive and should be generated as randomly as
possible. Some algorithms have known weak keys. IPsec algorithms have
built-in weak key checks, so that if a weak key is in a newly added
.BR SA ,
the
.B add
command will fail with an invalid value.
.sp
.LP
The
.B ipseckey
command allows a privileged user to enter cryptographic
keying information. If an adversary gains access to such information, the
security of IPsec traffic is compromised. The following issues should be
taken into account when using the
.B ipseckey
command.
.RS +4
.TP
1.
Is the
.B TTY
going over a network (interactive mode)?
.RS +4
.TP
.ie t \(bu
.el o
If it is, then the security of the keying material is the security of the
network path for this \fBTTY\fR's traffic. Using
.B ipseckey
over a
clear-text
.B telnet
or
.B rlogin
session is risky.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Even local windows might be vulnerable to attacks where a concealed program
that reads window events is present.
.RE
.RE
.RS +4
.TP
2.
Is the file accessed over the network or readable to the world (\fB-f\fR
option)?
.RS +4
.TP
.ie t \(bu
.el o
A network-mounted file can be sniffed by an adversary as it is being
read.
.RE
.RS +4
.TP
.ie t \(bu
.el o
A world-readable file with keying material in it is also risky.
.RE
.RE
.RS +4
.TP
3.
The
.B ipseckey
command is designed to be managed by the
\fBmanual-key smf\fR(5) service. Because the
.BR smf (5)
log files
are world-readable, the
.B ipseckey
does not record any syntax errors in
the log files, as these errors might include secret information.
.sp
If a syntax error is found when the
.BR "manual-key smf" (5)
service
is enabled, the service enters maintenance mode. The log file will indicate
that there was a syntax error, but will not specify what the error was.
.sp
The administrator should use
.B "ipeckey -c"
\fIfilename\fR from the
command line to discover the cause of the errors. See \fBOPTIONS\fR.
.RE
.sp
.LP
If your source address is a host that can be looked up over the network and
your naming system itself is compromised, then any names used will not be
trustworthy.
.sp
.LP
Security weaknesses often lie in misapplication of tools, not in the tools
themselves. Administrators are urged to be cautious when using
.BR ipseckey .
The safest mode of operation is probably on a console or
other hard-connected \fBTTY\fR.
.sp
.LP
For further thoughts on this subject, see the afterward by Matt Blaze in
Bruce Schneier's \fIApplied Cryptography: Protocols, Algorithms, and Source
Code in C\fR.
.SS "Service Management Facility"
.sp
.LP
IPsec manual keys are managed by the service management facility,
\fBsmf\fR(5). The services listed below manage the components of IPsec.
These services are delivered as follows:
.sp
.in +2
.nf
svc:/network/ipsec/policy:default (enabled)
svc:/network/ipsec/ipsecalgs:default (enabled)
svc:/network/ipsec/manual-key:default (disabled)
svc:/network/ipsec/ike:default (disabled)
.fi
.in -2
.sp

.sp
.LP
The manual-key service is delivered disabled. The system administrator must
create manual IPsec Security Associations (SAs), as described in this man
page, before enabling that service.
.sp
.LP
The policy service is delivered enabled, but without a configuration file,
so that, as a starting condition, packets are not protected by IPsec. After
you create the configuration file \fB/etc/inet/ipsecinit.conf\fR and refresh
the service (\fBsvcadm refresh\fR, see below), the policy contained in the
configuration file is applied. If there is an error in this file, the
service enters maintenance mode. See \fBipsecconf\fR(1M).
.sp
.LP
Services that are delivered disabled are delivered that way because the
system administrator must create configuration files for those services
before enabling them. See
.BR ike.config (4)
for the
.B ike
service.
.sp
.LP
See \fBipsecalgs\fR(1M) for the
.B ipsecalgs
service.
.sp
.LP
The correct administrative procedure is to create the configuration file
for each service, then enable each service using \fBsvcadm\fR(1M).
.sp
.LP
If the configuration needs to be changed, edit the configuration file then
refresh the service, as follows:
.sp
.in +2
.nf
example# \fBsvcadm refresh manual-key\fR
.fi
.in -2
.sp

.sp
.LP
\fBWarning:\fR To prevent \fBipseckey\fR complaining about duplicate
Associations, the
.B ipseckey
command flushes the Security Association
Data Base (SADB) when the
.B ipseckey
command is run from \fBsmf\fR(5),
before adding any new Security Associations defined in the configuration
file. This differs from the command line behavior where the SADB is not
flushed before adding new Security Associations.
.sp
.LP
The
.BR smf (5)
framework will record any errors in the service-specific
log file. Use any of the following commands to examine the \fBlogfile\fR
property:
.sp
.in +2
.nf
example# \fBsvcs -l manual-key\fR
example# \fBsvcprop manual-key\fR
example# \fBsvccfg -s manual-key listprop\fR
.fi
.in -2
.sp

.sp
.LP
The following property is defined for the
.B manual-key
service:
.sp
.in +2
.nf
config/config_file
.fi
.in -2
.sp

.sp
.LP
This property can be modified using \fBsvccfg\fR(1M) by users who have been
assigned the following authorization:
.sp
.in +2
.nf
solaris.smf.value.ipsec
.fi
.in -2
.sp

.sp
.LP
See
.BR auths (1),
.BR user_attr (4),
.BR rbac (5).
.sp
.LP
The service needs to be refreshed using \fBsvcadm\fR(1M) before the new
property is effective. General non-modifiable properties can be viewed with
the
.BR svcprop (1)
command.
.sp
.in +2
.nf
# \fBsvccfg -s ipsec/manual-key setprop config/config_file = \e
/new/config_file\fR
# \fBsvcadm refresh manual-key\fR
.fi
.in -2
.sp

.sp
.LP
Administrative actions on this service, such as enabling, disabling,
refreshing, and requesting restart can be performed using \fBsvcadm\fR(1M).
A user who has been assigned the authorization shown below can perform these
actions:
.sp
.in +2
.nf
solaris.smf.manage.ipsec
.fi
.in -2
.sp

.sp
.LP
The service's status can be queried using the
.BR svcs (1)
command.
.sp
.LP
The
.B ipseckey
command is designed to be run under \fBsmf\fR(5)
management. While the \fBipsecconf\fR command can be run from the command
line, this is discouraged. If the
.B ipseckey
command is to be run from
the command line, the
.BR "manual-key smf" (5)
service should be
disabled first. See \fBsvcadm\fR(1M).
.SH EXAMPLES
.LP
\fBExample 1\fR Emptying Out All \fBSA\fRs
.sp
.LP
To empty out all
.BR SA :

.sp
.in +2
.nf
example# \fBipseckey flush\fR
.fi
.in -2
.sp

.LP
\fBExample 2\fR Flushing Out IPsec AH \fBSA\fRs Only
.sp
.LP
To flush out only IPsec
.BR "AH SA" s:

.sp
.in +2
.nf
example# \fBipseckey flush ah\fR
.fi
.in -2
.sp

.LP
\fBExample 3\fR Saving All \fBSA\fRs To Standard Output
.sp
.LP
To save all
.BR SA "s to the standard output:"

.sp
.in +2
.nf
example# \fBipseckey save all\fR
.fi
.in -2
.sp

.LP
\fBExample 4\fR Saving \fBESP SA\fRs To The File
.B /tmp/snapshot
.sp
.LP
To save \fBESP SA\fRs to the file \fB/tmp/snapshot\fR:

.sp
.in +2
.nf
example# \fBipseckey save esp /tmp/snapshot\fR
.fi
.in -2
.sp

.LP
\fBExample 5\fR Deleting an IPsec \fBSA\fR
.sp
.LP
To delete an IPsec
.BR SA ,
only the
.B SPI
and the destination address
are needed:

.sp
.in +2
.nf
example# \fBipseckey delete esp spi 0x2112 dst 224.0.0.1\fR
.fi
.in -2
.sp

.sp
.LP
An alternative would be to delete the SA and the SAs pair if it has one:

.sp
.in +2
.nf
example# \fBipseckey delete-pair esp spi 0x2112 dst 224.0.0.1\fR
.fi
.in -2
.sp

.LP
\fBExample 6\fR Getting Information on an IPsec \fBSA\fR
.sp
.LP
Likewise, getting information on a
.B SA
only requires the destination
address and
.BR SPI :

.sp
.in +2
.nf
example# \fBipseckey get ah spi 0x5150 dst mypeer\fR
.fi
.in -2
.sp

.LP
\fBExample 7\fR Adding or Updating IPsec \fBSA\fRs
.sp
.LP
Adding or updating
.BR SA "s requires entering interactive mode:"

.sp
.in +2
.nf
example# \fBipseckey\fR
ipseckey> \fBadd ah spi 0x90125 src me.domain.com dst you.domain.com \e
          authalg md5 authkey 1234567890abcdef1234567890abcdef\fR
ipseckey> \fBupdate ah spi 0x90125 dst you.domain.com hard_bytes \e
          16000000\fR
ipseckey> \fBexit\fR
.fi
.in -2
.sp

.sp
.LP
Adding two SAs that are linked together as a pair:

.sp
.in +2
.nf
example# \fBipseckey\fR
ipseckey> \fBadd esp spi 0x2345 src me.domain.com dst you.domain.com \e
   authalg md5 authkey bde359723576fdea08e56cbe876e24ad \e
   encralg des encrkey be02938e7def2839\fR
ipseckey> \fBadd esp spi 0x5432 src me.domain.com dst you.domain.com \e
   authalg md5 authkey bde359723576fdea08e56cbe876e24ad \e
   encralg des encrkey be02938e7def2839 pair-spi 0x2345\fR
ipseckey> \fBexit\fR
.fi
.in -2
.sp

.LP
\fBExample 8\fR Adding an \fBSA\fR in the Opposite Direction
.sp
.LP
In the case of IPsec, \fBSA\fRs are unidirectional. To communicate
securely, a second
.B SA
needs to be added in the opposite direction. The
peer machine also needs to add both
.BR SA s.

.sp
.in +2
.nf
example# \fBipseckey\fR
ipseckey> \fBadd ah spi 0x2112 src you.domain.com dst me.domain.com \e
          authalg md5 authkey bde359723576fdea08e56cbe876e24ad \e
          hard_bytes 16000000\fR
ipseckey> \fBexit\fR
.fi
.in -2
.sp

.LP
\fBExample 9\fR Monitoring \fBPF_KEY\fR Messages
.sp
.LP
Monitoring for
.B PF_KEY
messages is straightforward:

.sp
.in +2
.nf
example# \fBipseckey monitor\fR
.fi
.in -2
.sp

.LP
\fBExample 10\fR Using Commands in a File
.sp
.LP
Commands can be placed in a file that can be parsed with the \fB-f\fR
option. This file may contain comment lines that begin with the "#" symbol.
For example:

.sp
.in +2
.nf
# This is a sample file for flushing out the ESP table and
# adding a pair of SAs.

flush esp

### Watch out!  I have keying material in this file.  See the
### SECURITY section in this manual page for why this can be
### dangerous .

add esp spi 0x2112 src me.domain.com dst you.domain.com \e
    authalg md5 authkey bde359723576fdea08e56cbe876e24ad \e
    encralg des encrkey be02938e7def2839 hard_usetime 28800
add esp spi 0x5150 src you.domain.com dst me.domain.com \e
    authalg md5 authkey 930987dbe09743ade09d92b4097d9e93 \e
    encralg des encrkey 8bd4a52e10127deb hard_usetime 28800

## End of file  -  This is a gratuitous comment
.fi
.in -2

.LP
\fBExample 11\fR Adding SAs for IPv6 Addresses
.sp
.LP
The following commands from the interactive-mode create an SA to protect
IPv6 traffic between the site-local addresses

.sp
.in +2
.nf
example # \fBipseckey\fR
ipseckey> \fBadd esp spi 0x6789 src6 fec0:bbbb::4483 dst6 fec0:bbbb::7843\e
           authalg md5 authkey bde359723576fdea08e56cbe876e24ad \e
          encralg des encrkey be02938e7def2839 hard_usetime 28800\fR
ipseckey>\fBexit\fR
.fi
.in -2
.sp

.LP
\fBExample 12\fR Linking Two SAs as a Pair
.sp
.LP
The following command links two SAs together, as a pair:

.sp
.in +2
.nf
example# \fBipseckey update esp spi 0x123456 dst 192.168.99.2 \e
pair-spi 0x654321\fR
.fi
.in -2
.sp

.SH FILES
.sp
.ne 2
.mk
.na
.B /etc/inet/secret/ipseckeys
.ad
.sp .6
.RS 4n
Default configuration file used at boot time. See "Service Management
Facility" and \fBSECURITY\fR for more information.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR ps (1),
.BR svcprop (1),
.BR svcs (1),
\fBipsecconf\fR(1M),
.BR ipsecalgs (1M),
.BR route (1M),
.BR svcadm (1M),
\fBsvccfg\fR(1M),
\fBike.config\fR(4), \fBattributes\fR(5),
.BR smf (5),
.BR ipsec (7P),
.BR ipsecah (7P),
.BR ipsecesp (7P),
\fBpf_key\fR(7P)
.sp
.LP
Schneier, B., \fIApplied Cryptography: Protocols, Algorithms, and Source
Code in C\fR. Second ed. New York, New York: John Wiley & Sons, 1996.
.SH DIAGNOSTICS
.sp
.LP
The
.B ipseckey
command parses the configuration file and reports any
errors. In the case of multiple errors,
.B ipseckey
reports as many of
these as possible.
.sp
.LP
The
.B ipseckey
command does not attempt to use a
.B COMMAND
that has
a syntax error. A
.B COMMAND
might be syntactically correct but can
nevertheless generate an error because the kernel rejected the request made
to \fBpf_key\fR(7P). This might occur because a key had an invalid length or
because an unsupported algorithm was specified.
.sp
.LP
If there are any errors in the configuration file, ipseckey reports the
number of valid COMMANDS and the total number of COMMANDS parsed.
.sp
.ne 2
.mk
.na
\fBParse error on line \fIN\fR.\fR
.ad
.sp .6
.RS 4n
If an interactive use of
.B ipseckey
would print usage information, this
would print instead. Usually proceeded by another diagnostic. Because
\fBCOMMANDS\fR can cover more than a single line in the configuration file
by using the backslash character to delimit lines, its not always possible
to pinpoint in the configuration file the exact line that caused the
error.
.RE

.sp
.ne 2
.mk
.na
\fBUnexpected end of command line.\fR
.ad
.sp .6
.RS 4n
An additional argument was expected on the command line.
.RE

.sp
.ne 2
.mk
.na
.B Unknown
.ad
.sp .6
.RS 4n
A value for a specific extension was unknown.
.RE

.sp
.ne 2
.mk
.na
\fBAddress type \fIN\fR not supported.\fR
.ad
.sp .6
.RS 4n
A name-to-address lookup returned an unsupported address family.
.RE

.sp
.ne 2
.mk
.na
\fIN\fR is not a bit specifier\fR
.ad
.br
.na
\fBbit length \fIN\fR is too big for\fR
.ad
.br
.na
.B "string is not a hex string
.ad
.sp .6
.RS 4n
Keying material was not entered appropriately.
.RE

.sp
.ne 2
.mk
.na
\fBCan only specify single\fR
.ad
.sp .6
.RS 4n
A duplicate extension was entered.
.RE

.sp
.ne 2
.mk
.na
\fBDon't use extension for \fI<string>\fR for \fI<command>\fR\&.\fR
.ad
.sp .6
.RS 4n
An extension not used by a command was used.
.RE

.sp
.ne 2
.mk
.na
\fBOne of the entered values is incorrect: Diagnostic code
\fINN\fR:	\fI<msg>\fR
.ad
.sp .6
.RS 4n
This is a general invalid parameter error. The diagnostic code and message
provides more detail about what precise value was incorrect and why.
.RE

.SH NOTES
.sp
.LP
In spite of its IPsec-specific name,
.B ipseckey
is analogous to
.BR route (1M),
in that it is a command-line interface to a socket-based
administration engine, in this case,
.BR PF_KEY .
\fBPF_KEY\fR was
originally developed at the United States Naval Research Laboratory.
.sp
.LP
To have machines communicate securely with manual keying, \fBSA\fRs need to
be added by all communicating parties. If two nodes wish to communicate
securely, both nodes need the appropriate \fBSA\fRs added.
.sp
.LP
In the future
.B ipseckey
may be invoked under additional names as other
security protocols become available to
.BR PF_KEY .
.sp
.LP
This command requires \fBsys_ip_config\fR privilege to operate and thus can
run in the global zone and in exclusive-IP zones. The global zone can set up
security associations with
.B ipseckey
to protect traffic for shared-IP
zones on the system.
