'\" te
.\" Copyright (c) 1999 Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH fsdb_udfs 1M "11 Jun 1999" "SunOS 5.11" "System Administration Commands"
.SH NAME
fsdb_udfs \- udfs file system debugger
.SH SYNOPSIS
.LP
.nf
\fBfsdb \fR [\fB-F\fR] udfs [\fIgeneric_option\fR] [\fB-o \fIspecific_option\fR] \fIspecial\fR
.fi

.SH DESCRIPTION
.sp
.LP
The
.B fsdb_udfs
command is an interactive tool that can be used to patch
up a damaged \fBudfs\fR file system. \fBfsdb_udfs\fR has conversions to
translate block and i-numbers into their corresponding disk addresses.
Mnemonic offsets to access different parts of an inode are also included.
Mnemonic offsets greatly simplify the process of correcting control block
entries or descending the file system tree.
.sp
.LP
.B fsdb
contains several error-checking routines to verify inode and block
addresses. These can be disabled if necessary by invoking
.B fsdb
with the
.B -o
option or by using the
.B o
command.
.sp
.LP
.B fsdb
reads one block at a time, and therefore works with raw as well as
block
.B I/O
devices. A buffer management routine is used to retain
commonly used blocks of data in order to reduce the number of read system
calls. All assignment operations result in an immediate write-through of the
corresponding block. In order to modify any portion of the disk, \fBfsdb\fR
must be invoked with the
.B -w
option.
.sp
.LP
Wherever possible, \fBadb\fR-like syntax has been adopted to promote the use
of
.B fsdb
through familiarity.
.SH OPTIONS
.sp
.LP
The following options are supported:
.sp
.ne 2
.mk
.na
.B -o
.I specific_option
.ad
.RS 22n
.rt
Specify
.B udfs
file system specific options in a comma-separated list
with no intervening spaces. The following specific options are supported:
.sp
.ne 2
.mk
.na
.B o
.ad
.RS 12n
.rt
Override some error conditions.
.RE

.sp
.ne 2
.mk
.na
\fBp=\fIstring\fR
.ad
.RS 12n
.rt
Set prompt to
.IR string .
.RE

.sp
.ne 2
.mk
.na
.B w
.ad
.RS 12n
.rt
Open for write.
.RE

.sp
.ne 2
.mk
.na
.B ?
.ad
.RS 12n
.rt
Display usage.
.RE

.RE

.SH USAGE
.sp
.LP
Numbers are considered hexadecimal by default. The user has control over how
data is to be displayed or accepted. The
.B base
command displays or sets
the input and output base. Once set, all input defaults to this base and all
output displays in this base. The base can be overriden temporarily for input
by preceding hexadecimal numbers by
.BR 0x ,
preceding decimal numbers with a
.BR 0t ,
or octal numbers with a
.BR 0 .
Hexadecimal numbers beginning with
\fBa\fR-\fBf\fR or \fBA\fR -\fBF\fR must be preceded with a \fB0x\fR to
distinguish them from commands.
.sp
.LP
Disk addressing by \fBfsdb\fR is at the byte level. However, \fBfsdb\fR
offers many commands to convert a desired inode, directory entry, block, and
so forth, to a byte address. After the address has been calculated, \fBfsdb\fR
records the result in the current address
.RB ( dot ).
.sp
.LP
Several global values are maintained by
.BR fsdb :
.RS +4
.TP
.ie t \(bu
.el o
Current base (referred to as
.BR base )
.RE
.RS +4
.TP
.ie t \(bu
.el o
Current address (referred to as
.BR dot )
.RE
.RS +4
.TP
.ie t \(bu
.el o
Current inode (referred to as
.BR inode )
.RE
.RS +4
.TP
.ie t \(bu
.el o
Current count (referred to as
.BR count )
.RE
.RS +4
.TP
.ie t \(bu
.el o
Current type (referred to as
.BR type )
.RE
.sp
.LP
Most commands use the preset value of
.B dot
in their execution. For
example,
.sp
.in +2
.nf
 > 2:inode
.fi
.in -2
.sp

.sp
.LP
first sets the value of dot (\fB\&.\fR) to
.BR 2 ,
colon
.RB ( : ),
signifies the start of a command, and the
.B inode
command sets
.BR inode
to
.BR 2 .
A count is specified after a comma
.RB ( , ).
Once set, count
remains at this value until a new command is encountered that resets the value
back to
.B 1
(the default).
.sp
.LP
So, if
.sp
.in +2
.nf
> 2000,400/X
.fi
.in -2
.sp

.sp
.LP
is entered,
.B 400
hex longs are listed from
.BR 2000 ,
and when
completed, the value of dot is
.B " 2000 + 400 * sizeof"
(long). If a RETURN
is then entered, the output routine uses the current values of
.BR dot ,
.BR count ,
and
.B type
and displays
.B 400
more hex longs. An asterisk
(\fB*\fR) causes the entire block to be displayed. An example showing several
commands and the use of RETURN would be:
.sp
.in +2
.nf
> 2:ino; 0:dir?d
.fi
.in -2
.sp

.sp
.LP
or
.sp
.in +2
.nf
> 2:ino; 0:db:block?d
.fi
.in -2
.sp

.sp
.LP
The two examples are synonymous for getting to the first directory entry of
the root of the file system. Once there, subsequently entering a RETURN, plus
(\fB+\fR), or minus (\fB-\fR)  advances to subsequent entries. Notice that
.sp
.in +2
.nf
> 2:inode; :ls
.fi
.in -2
.sp

.sp
.LP
or
.sp
.in +2
.nf
> :ls /
.fi
.in -2
.sp

.sp
.LP
is again synonymous.
.SS "Expressions"
.sp
.LP
The following symbols are recognized by
.BR fsdb :
.sp
.ne 2
.mk
.na
.B RETURN
.ad
.RS 13n
.rt
Update the value of dot by the current value of
.I type
and
.IR display
using the current value of
.IR count .
.RE

.sp
.ne 2
.mk
.na
.I #
.ad
.RS 13n
.rt
Update the value of dot by specifying a numeric expression. Specify numeric
expressions using addition, subtraction, mulitiplication, and division
operators (
.BR + ,
.BR - ,
.BR * ,
and
.BR % ).
Numeric expressions are
evaluated from left to right and can use parentheses. After evaluation, the
value of dot is updated.
.RE

.sp
.ne 2
.mk
.na
.BI ", " count
.ad
.RS 13n
.rt
Update the count indicator. The global value of
.I count
is updated to
.IR count .
The value of
.I count
remains until a new command is run. A
.I count
specifier of
.B *
attempts to show a blocks's worth of
information. The default for
.I count
is
.BR 1 .
.RE

.sp
.ne 2
.mk
.na
\fB? \fI f\fR
.ad
.RS 13n
.rt
Display in structured style with format specifier
.BR f .
See \fBFormatted
Output\fR.
.RE

.sp
.ne 2
.mk
.na
\fB/ \fIf\fR
.ad
.RS 13n
.rt
Display in unstructured style with format specifier
.BR f .
See \fBFormatted
Output\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\&.\fR
.ad
.RS 13n
.rt
Display the value of dot.
.RE

.sp
.ne 2
.mk
.na
\fB+\fIe\fR
.ad
.RS 13n
.rt
Increment the value of dot by the expression
.IR e .
The amount actually
incremented is dependent on the size of type: \fBdot = dot + \fIe \fB*
.B sizeof
(\fItype\fR) The default for \fIe\fR is
.BR 1 .
.RE

.sp
.ne 2
.mk
.na
\fB\(mi\fIe\fR
.ad
.RS 13n
.rt
Decrement the value of dot by the expression
.I e
\&. See
.BR + .
.RE

.sp
.ne 2
.mk
.na
\fB*\fIe\fR
.ad
.RS 13n
.rt
Multiply the value of dot by the expression
.IR e .
Multiplication and
division don't use
.IR type .
In the above calculation of dot, consider the
.B sizeof
(\fItype\fR) to be
.BR 1 .
.RE

.sp
.ne 2
.mk
.na
\fB%\fIe\fR
.ad
.RS 13n
.rt
Divide the value of dot by the expression
.IR e .
See
.BR * .
.RE

.sp
.ne 2
.mk
.na
.BI "< " name
.ad
.RS 13n
.rt
Restore an address saved in register
.IR name .
.I name
must be a single
letter or digit.
.RE

.sp
.ne 2
.mk
.na
.BI "> " name
.ad
.RS 13n
.rt
Save an address in register
.IR name .
.I name
must be a single letter or
digit.
.RE

.sp
.ne 2
.mk
.na
\fB= \fIf\fR
.ad
.RS 13n
.rt
Display indicator. If
.I f
is a legitimate format specifier (see
.BR "Formatted Output" ),
then the value of dot is displayed using format
specifier
.IR f .
Otherwise, assignment is assumed. See
.BR "= [s] [e]" .
.RE

.sp
.ne 2
.mk
.na
\fB= [\fIs\fR] [\fIe\fR]\fR
.ad
.RS 13n
.rt
Change the value of dot using an assignment indicator. The address pointed to
by dot has its contents changed to the value of the expression
.I e
or to
the \fBASCII\fR representation of the quoted (\fB"\fR) string \fIs\fR. This
can be useful for changing directory names or
.B ASCII
file information.
.RE

.sp
.ne 2
.mk
.na
.BI "=+ " e
.ad
.RS 13n
.rt
Change the value of dot using an incremental assignment. The address pointed
to by dot has its contents incremented by expression
.IR e .
.RE

.sp
.ne 2
.mk
.na
.B =- e
.ad
.RS 13n
.rt
Change the value of dot using a decremental assignment. Decrement the
contents of the address pointed to by dot by expression
.IR e .
.RE

.SS "Commands"
.sp
.LP
A command must be prefixed by a colon
.RB ( : ).
Only enough letters of the
command to uniquely distinguish it are needed. Multiple commands can be
entered on one line by  separating them by a SPACE, TAB, or semicolon
(\fB;\fR).
.sp
.LP
To view a potentially unmounted disk in a reasonable manner, \fBfsdb\fR
supports the
.BR cd ,
.BR pwd ,
.BR ls ,
and
.B find
commands. The
functionality of each of these commands basically matches that of its UNIX
counterpart. See \fBcd\fR(1), \fBpwd\fR(1),\fBls\fR(1), and\fBfind\fR(1) for
details. The
.BR * ,
.BR , ,
.BR ? ,
and
.B -
wildcard characters are
also supported.
.sp
.LP
The following commands are supported:
.sp
.ne 2
.mk
.na
\fBbase[=\fIb\fR]\fR
.ad
.sp .6
.RS 4n
Display or set the base. All input and output is governed by the current
.RB "base. Without the" " ="
.IR b ,
displays the current base. Otherwise, sets
the current base to
.IR b .
Base is interpreted using the old value of base,
so to ensure correctness use the
.BR 0 ,
.BR 0t ,
or
.B 0x
prefix when
changing the base. The default for base is hexadecimal.
.RE

.sp
.ne 2
.mk
.na
.B block
.ad
.sp .6
.RS 4n
Convert the value of dot to a block address.
.RE

.sp
.ne 2
.mk
.na
\fBcd [\fIdir\fR]\fR
.ad
.sp .6
.RS 4n
Change the current directory to directory
.IR dir .
The current values of
inode and dot are also updated. If
.B dir
is not specified, changes
directories to inode 2, root
.RB ( / ).
.RE

.sp
.ne 2
.mk
.na
.B directory
.ad
.sp .6
.RS 4n
If the current inode is a directory, converts the value of dot to a directory
slot offset in that directory, and dot now points to this entry.
.RE

.sp
.ne 2
.mk
.na
.B file
.ad
.sp .6
.RS 4n
Set the value of dot as a relative block count from the beginning of the
file. The value of dot is updated to the first byte of  this block.
.RE

.sp
.ne 2
.mk
.na
\fBfind \fIdir\fR [\fB-name\fR \fIn\fR] | [\fB-inum\fI i\fR]\fR
.ad
.sp .6
.RS 4n
Find files by name or i-number. Recursively searches directory
.I dir
and
below for file names whose i-number matches\fB i\fR or whose name matches
pattern
.IR n .
Only one of the two options (\fB-name\fR or
.BR -inum )
can
be used at one time. The find
.B -print
is not necessary or accepted.
.RE

.sp
.ne 2
.mk
.na
\fBfill=\fIp\fR
.ad
.sp .6
.RS 4n
Fill an area of disk with pattern
.IR p .
The area of disk is delimited by
dot and count.
.RE

.sp
.ne 2
.mk
.na
.B inode
.ad
.sp .6
.RS 4n
Convert the value of dot to an inode address. If successful, the current
value of inode is updated as well as the value of dot. As a convenient
shorthand, if
.B :inode
appears at the beginning of the line, the value of
dot is set to the current inode and that inode is displayed in inode format.

.RE

.sp
.ne 2
.mk
.na
.B ls [ -R
] [\fB-l\fR ] \fIpat1 pat2\fR.\|.\|.\fR
.ad
.sp .6
.RS 4n
List directories or files. If no file is specified, the current directory is
assumed. Either or both of the options can be used (but, if used, must be
specified before the filename specifiers). Wild card characters are available
and multiple arguments are acceptable. The long listing shows only the
i-number and the name; use the inode command with
.B ?i
to get more
information.
.RE

.sp
.ne 2
.mk
.na
.B override
.ad
.sp .6
.RS 4n
Toggle the value of override. Some error conditions might be overridden if
override is toggled to
.BR on .
.RE

.sp
.ne 2
.mk
.na
\fBprompt "\fIp\fR"\fR
.ad
.sp .6
.RS 4n
Change the
.B fsdb
prompt to
.IR p .
.I p
must be enclosed in
quotes.
.RE

.sp
.ne 2
.mk
.na
.B pwd
.ad
.sp .6
.RS 4n
Display the current working directory.
.RE

.sp
.ne 2
.mk
.na
.B quit
.ad
.sp .6
.RS 4n
Quit
.BR fsdb .
.RE

.sp
.ne 2
.mk
.na
.B tag
.ad
.sp .6
.RS 4n
Convert the value of dot and if this is a valid tag, print the volume
structure according to the tag.
.RE

.sp
.ne 2
.mk
.na
.B !
.ad
.sp .6
.RS 4n
Escape to the shell.
.RE

.SS "Inode Commands"
.sp
.LP
In addition to the above commands, several other commands deal with inode
fields and operate directly on the current inode (they still require the colon
(\fB:\fR). They can be used to more easily display or change the particular
fields. The value of dot is only used by the
.B :db
and
.B :ib
commands.
Upon completion of the command, the value of dot is changed so that it points
to that particular field. For example,
.sp
.in +2
.nf
> :ln=+1
.fi
.in -2
.sp

.sp
.LP
increments the link count of the current inode and sets the value of dot to
the address of the link count field.
.sp
.LP
The following inode commands are supported:
.sp
.ne 2
.mk
.na
.B at
.ad
.RS 8n
.rt
Access time
.RE

.sp
.ne 2
.mk
.na
.B bs
.ad
.RS 8n
.rt
Block size
.RE

.sp
.ne 2
.mk
.na
.B ct
.ad
.RS 8n
.rt
Creation time
.RE

.sp
.ne 2
.mk
.na
.B gid
.ad
.RS 8n
.rt
Group id
.RE

.sp
.ne 2
.mk
.na
.B ln
.ad
.RS 8n
.rt
Link number
.RE

.sp
.ne 2
.mk
.na
.B mt
.ad
.RS 8n
.rt
Modification time
.RE

.sp
.ne 2
.mk
.na
.B md
.ad
.RS 8n
.rt
Mode
.RE

.sp
.ne 2
.mk
.na
.B maj
.ad
.RS 8n
.rt
Major device number
.RE

.sp
.ne 2
.mk
.na
.B min
.ad
.RS 8n
.rt
Minor device number
.RE

.sp
.ne 2
.mk
.na
.B nm
.ad
.RS 8n
.rt
This command actually operates on the directory name field. Once poised
at the desired directory entry (using the
.B directory
command), this
command allows you to change or display the directory name. For example,
.sp
.in +2
.nf
 > 7:dir:nm="foo"
.fi
.in -2
.sp

gets the \fB7\fRth directory entry of the current inode and changes its name
to
.BR foo .
Directory names cannot be made larger than the field allows. If
an attempt is made to make a directory name larger than the field allows,, the
string is truncated to fit and a warning message is displayed.
.RE

.sp
.ne 2
.mk
.na
.B sz
.ad
.RS 8n
.rt
File size
.RE

.sp
.ne 2
.mk
.na
.B uid
.ad
.RS 8n
.rt
User
.BR ID
.RE

.sp
.ne 2
.mk
.na
.B uniq
.ad
.RS 8n
.rt
Unique
.BR ID
.RE

.SS "Formatted Output"
.sp
.LP
Formatted output comes in two styles and many format types. The two styles of
formatted output are: structured and unstructured. Structured output is used
to display inodes, directories, and so forth. Unstructured output displays raw
data.
.sp
.LP
Format specifiers are preceded by the slash (\fB/\fR) or question mark
(\fB?\fR) character. \fItype\fR is updated as necessary upon completion.
.sp
.LP
The following format specifiers are preceded by the
.B ?
character:
.sp
.ne 2
.mk
.na
.B i
.ad
.RS 5n
.rt
Display as inodes in the current base.
.RE

.sp
.ne 2
.mk
.na
.B d
.ad
.RS 5n
.rt
Display as directories in the current base.
.RE

.sp
.LP
The following format specifiers are preceded by the
.B /
character:
.sp
.ne 2
.mk
.na
.B b
.ad
.RS 9n
.rt
Display as bytes in the current base.
.RE

.sp
.ne 2
.mk
.na
.B c
.ad
.RS 9n
.rt
Display as characters.
.RE

.sp
.ne 2
.mk
.na
.B o | O
.ad
.RS 9n
.rt
Display as octal shorts or longs.
.RE

.sp
.ne 2
.mk
.na
.B d | D
.ad
.RS 9n
.rt
Display as decimal shorts or longs.
.RE

.sp
.ne 2
.mk
.na
.B x | X
.ad
.RS 9n
.rt
Display as hexadecimal shorts or longs.
.RE

.SH EXAMPLES
.LP
.B Example 1
Using fsdb as a calculator for complex arithmetic
.sp
.LP
The following command displays
.B 2010
in decimal format, and is an
example of using
.B fsdb
as a calculator for complex arithmetic.

.sp
.in +2
.nf
> 2000+400%(20+20)=D
.fi
.in -2
.sp

.LP
.B Example 2
Using fsdb to display an i-number in idode fomat
.sp
.LP
The following command displays the i-number
.B 386
in inode
format.\fB386\fR becomes the current inode.

.sp
.in +2
.nf
> 386:ino?i
.fi
.in -2
.sp

.LP
.B Example 3
Using fsdb to change the link count
.sp
.LP
The following command changes the link count for the current inode to
.BR 4 .

.sp
.in +2
.nf
> :ln=4
.fi
.in -2
.sp

.LP
.B Example 4
Using fsdb to increment the link count
.sp
.LP
The following command increments the link count by
.BR 1 .

.sp
.in +2
.nf
> :ln=+1
.fi
.in -2
.sp

.LP
.B Example 5
Using fsdb to display the creation time as a hexadecimal
long
.sp
.LP
The following command displays the creation time as a hexadecimal long.

.sp
.in +2
.nf
> :ct=X
.fi
.in -2
.sp

.LP
.B Example 6
Using fsdb to display the modification time in time format
.sp
.LP
The following command displays the modification time in time format.

.sp
.in +2
.nf
> :mt=t
.fi
.in -2
.sp

.LP
.B Example 7
Using fsdb to display in ASCII
.sp
.LP
The following command displays, in
.BR ASCII ,
block
.B 0
of the file
associated with the current inode.

.sp
.in +2
.nf
> 0:file/c
.fi
.in -2
.sp

.LP
.B Example 8
Using fsdb to display the directory enteries for the root
inode
.sp
.LP
The following command displays the first block's directory entries for the
root inode of this file system. This command stops prematurely if the
.B EOF
is reached.

.sp
.in +2
.nf
> 2:ino,*?d
.fi
.in -2
.sp

.LP
.B Example 9
Using fsdb to change the current inode
.sp
.LP
 The following command changes the current inode to that associated with the \fB5\fRth directory entry (numbered from
.BR 0 )
of the current inode. The first logical block of the file is then displayed in
.BR ASCII .

.sp
.in +2
.nf
> 5:dir:inode; 0:file,*/c
.fi
.in -2
.sp

.LP
.B Example 10
Using fsdb to change the i-number
.sp
.LP
 The following command changes the i-number for the \fB7\fRth directory slot in the root directory to
.BR 3 .

.sp
.in +2
.nf
> 2:inode; 7:dir=3
.fi
.in -2
.sp

.LP
.B Example 11
Using fsdb to change the name field
.sp
.LP
The following command changes the
.I name
field in the directory slot to
.BR name .

.sp
.in +2
.nf
 > 7:dir:nm="name"
.fi
.in -2
.sp

.LP
.B Example 12
Using fsdb to display the a block
.sp
.LP
The following command displays the \fB3\fRrd block of the current inode as
directory entries.

.LP
.B Example 13
Using fsdb to set the contents of address
.sp
.LP
The following command sets the contents of address
.B 2050
to
.BR 0xffffffff .
.B 0xffffffff
can be truncated, depending on the current
type.

.sp
.in +2
.nf
> 2050=0xffff
.fi
.in -2
.sp

.LP
.B Example 14
Using fsdb to place an ASCII string at an address
.sp
.LP
The following command places the
.B ASCII
string
.BR "this is some text"
at address
.BR 1c92434 .

.sp
.in +2
.nf
> 1c92434="this is some text"
.fi
.in -2
.sp

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWudf
.TE

.SH SEE ALSO
.sp
.LP
.BR clri (1M),
.BR fsck_udfs (1M),
.BR dir (4),
.BR attributes (5)
