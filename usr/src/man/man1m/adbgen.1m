'\" te
.\" Copyright (c) 1998 Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH adbgen 1M "20 Feb 1998" "SunOS 5.11" "System Administration Commands"
.SH NAME
adbgen \- generate adb script
.SH SYNOPSIS
.LP
.nf
\fB/usr/lib/adb/adbgen\fR [\fB-m\fR \fImodel\fR] \fIfilename\fR.adb .\|.\|.
.fi

.SH DESCRIPTION
.sp
.LP
.B adbgen
makes it possible to write
.BR adb (1)
scripts that do not
contain hard-coded dependencies on structure member offsets. The input to
.B
adbgen \c
is a file named
.IB filename \&.adb
that contains header
information, then a null line, then the name of a structure, and finally an
.B adb
script.
.B adbgen
only deals with one structure per file; all
member names are assumed to be in this structure. The output of
.B adbgen
is an
.B adb
script in
.IR filename .
.B adbgen
operates by
generating a C program which determines structure member offsets and sizes,
which in turn generate the
.B adb
script.
.sp
.LP
The header lines, up to the null line, are copied verbatim into the
generated C program. Typically, these are
.B #include
statements, which
include the headers containing the relevant structure declarations.
.sp
.LP
The
.B adb
script part may contain any valid
.B adb
commands (see
.BR adb (1)),
and may also contain
.B adbgen
requests, each enclosed in
.RB "braces (" \|{\|} \|).
Request types are:
.RS +4
.TP
.ie t \(bu
.el o
Print a structure member. The request form is
\fB{\fImember\fB,\fI\|format\fB}.\fR
.I member
is a member
name of the
.I structure
given earlier, and
.B format
is any valid
.B adb
format request or any of the
.B adbgen
format specifiers (such
as
.BR {POINTER} )
.RB "listed below. For example, to print the" " p_pid"
field of the
.I proc
structure as a decimal number, you would write
.BR {p_pid,d} .
.RE
.RS +4
.TP
.ie t \(bu
.el o
Print the appropriate
.B adb
format character for the given
.BR adbgen
format specifier. This action takes the data model into consideration. The
request form is \fB{\fIformat specifier\fB}.\fR The valid \fBadbgen\fR
format specifiers are:
.RS

.sp
.ne 2
.mk
.na
.B {POINTER}
.ad
.RS 14n
.rt
pointer value in hexadecimal
.RE

.sp
.ne 2
.mk
.na
.B {LONGDEC}
.ad
.RS 14n
.rt
long value in decimal
.RE

.sp
.ne 2
.mk
.na
.B {ULONGDEC}
.ad
.RS 14n
.rt
unsigned long value in decimal
.RE

.sp
.ne 2
.mk
.na
.B {ULONGHEX}
.ad
.RS 14n
.rt
unsigned long value in hexadecimal
.RE

.sp
.ne 2
.mk
.na
.B {LONGOCT}
.ad
.RS 14n
.rt
long value in octal
.RE

.sp
.ne 2
.mk
.na
.B {ULONGOCT}
.ad
.RS 14n
.rt
unsigned long value in octal
.RE

.RE

.RE
.RS +4
.TP
.ie t \(bu
.el o
Reference a structure member. The request form is
\fB{*\fImember\fB,\fI\|base\fB}.\fR
.I member
is the member
name whose value is desired, and
.I base
is an
.B adb
register name
which contains the base address of the structure. For example, to get the
.B p_pid
field of the
.I proc
structure, you would get the
.I proc
structure address in an
.B adb
register, for example
.BR <f ,
and write
.BR {*p_pid,<f} .
.RE
.RS +4
.TP
.ie t \(bu
.el o
Tell
.B adbgen
that the offset is valid. The request form is
.BR {OFFSETOK} .
This is useful after invoking another
.B adb
script
which moves the
.B adb
.IR dot .
.RE
.RS +4
.TP
.ie t \(bu
.el o
Get the size of the
.IR structure .
The request form is
.BR {SIZEOF} .
.B adbgen
replaces this request with the size of the structure. This is
useful in incrementing a pointer to step through an array of structures.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Calculate an arbitrary C expression. The request form is
\fB{EXPR,\fI\|expression\fB}. adbgen\fR replaces this request
with the value of the expression. This is useful when more than one
structure is involved in the script.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Get the offset to the end of the structure. The request form is
.BR {END} .
This is useful at the end of the structure to get
.B adb
to
align the
.I dot
for printing the next structure member.
.RE
.sp
.LP
.B adbgen
keeps track of the movement of the
.B adb
.I dot
and
generates
.B adb
code to move forward or backward as necessary before
printing any structure member in a script.
.BR adbgen 's
model of the
behavior of
.BR adb 's
\fIdot\fR is simple: it is assumed that the first
.RI "line of the script is of the form " struct_address / "adb text" " and"
that subsequent lines are of the form +/\fIadb text\fR. The \fBadb\fR
.I dot
then moves in a sane fashion.
.B adbgen
does not check the
script to ensure that these limitations are met.
.B adbgen
also checks
the size of the structure member against the size of the
.B adb
format
code and warns if they are not equal.
.SH OPTIONS
.sp
.LP
The following option is supported:
.sp
.ne 2
.mk
.na
.B -m
.I model
.ad
.RS 12n
.rt
Specifies the data type model to be used by
.B adbgen
for the macro.
This affects the outcome of the \fB{\fIformat specifier\fB}\fR
requests described under
.B DESCRIPTION
and the offsets and sizes of data
types.
.I model
can be
.B ilp32
or
.BR lp64 .
If the
.B -m
option
is not given, the data type model defaults to
.BR ilp32 .
.RE

.SH OPERANDS
.sp
.LP
The following operand is supported:
.sp
.ne 2
.mk
.na
\fIfilename\fB\&.adb\fR
.ad
.RS 18n
.rt
Input file that contains header information, followed by a null line, the
name of the structure, and finally an
.B adb
script.
.RE

.SH EXAMPLES
.LP
.B Example 1
A sample
.B adbgen
file.
.sp
.LP
For an include file
.B x.h
which contained

.sp
.in +2
.nf
struct x {
         char	*x_cp;
         char	x_c;
         int	x_i;
};
.fi
.in -2
.sp

.sp
.LP
then , an
.B adbgen
file (call it
.BR script.adb )
to print the file
.B x.h
would be:

.sp
.in +2
.nf
#include "x.h"
x
\&./"x_cp"16t"x_c"8t"x_i"n{x_cp,{POINTER}}{x_c,C}{x_i,D}
.fi
.in -2
.sp

.sp
.LP
After running
.B adbgen
as follows,

.sp
.in +2
.nf
% /usr/lib/adb/adbgen \|script.adb
.fi
.in -2
.sp

.sp
.LP
the output file
.B script
contains:

.sp
.in +2
.nf
\&./"x_cp"16t"x_c"8t"x_i"nXC3+D
.fi
.in -2
.sp

.sp
.LP
For a macro generated for a 64-bit program using the
.B lp64
data model
as follows,

.sp
.in +2
.nf
\fB% /usr/lib/adb/adbgen/ \fB-m\fB lp64 \|script.adb\fR
.fi
.in -2
.sp

.sp
.LP
the output file
.B script
would contain:

.sp
.in +2
.nf
\&./"x_cp"16t"x_c"8t"x_i"nJC3+D
.fi
.in -2
.sp

.sp
.LP
To invoke the script, type:

.sp
.in +2
.nf
example% adb program
x$<script
.fi
.in -2
.sp

.SH FILES
.sp
.ne 2
.mk
.na
\fB/usr/platform/\fIplatform-name\fB/lib/adb/*\fR
.ad
.sp .6
.RS 4n
platform-specific
.B adb
scripts for debugging the 32-bit kernel
.RE

.sp
.ne 2
.mk
.na
\fB/usr/platform/\fIplatform-name\fB/lib/adb/sparcv9/*\fR
.ad
.sp .6
.RS 4n
platform-specific
.B adb
scripts for debugging the 64-bit SPARC V9
kernel
.RE

.sp
.ne 2
.mk
.na
.B /usr/lib/adb/*
.ad
.sp .6
.RS 4n
.B adb
scripts for debugging the 32-bit kernel
.RE

.sp
.ne 2
.mk
.na
.B /usr/lib/adb/sparcv9/*
.ad
.sp .6
.RS 4n
.B adb
scripts for debugging the 64-bit SPARC V9 kernel
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWesu
.TE

.SH SEE ALSO
.sp
.LP
.BR adb (1),
.BR uname (1),
.BR kadb (1M),
.BR attributes (5)
.SH DIAGNOSTICS
.sp
.LP
Warnings are given about structure member sizes not equal to
.BR adb
format items and about badly formatted requests. The C compiler complains if
a structure member that does not exist is referenced. It also complains
about an ampersand before array names; these complaints may be ignored.
.SH NOTES
.sp
.LP
.I platform-name
can be found using the
.B -i
option of
.BR uname (1).
.SH BUGS
.sp
.LP
.B adb
syntax is ugly; there should be a higher level interface for
generating scripts.
.sp
.LP
Structure members which are bit fields cannot be handled because C will not
give the address of a bit field. The address is needed to determine the
offset.
