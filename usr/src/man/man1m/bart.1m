'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH bart 1M "26 Oct 2005" "SunOS 5.11" "System Administration Commands"
.SH NAME
bart \- basic audit reporting tool
.SH SYNOPSIS
.LP
.nf
\fB/usr/bin/bart\fR create [ \fB-n\fR] [\fB-R\fR \fIroot_directory\fR]
     [\fB-r\fR \fIrules_file\fR | -]
.fi

.LP
.nf
\fB/usr/bin/bart\fR create [\fB-n\fR] [\fB-R\fR \fIroot_directory\fR] \fB-I\fR
     [\fIfile_name\fR].\|.\|.
.fi

.LP
.nf
\fB/usr/bin/bart\fR compare [\fB-i\fR \fIattribute\fR ] [\fB-p\fR]
     [\fB-r\fR \fIrules_file\fR | -] \fIcontrol-manifest\fR \fItest-manifest\fR
.fi

.SH DESCRIPTION
.sp
.LP
.BR bart (1M)
is a tool that performs a file-level check of the software
contents of a system.
.sp
.LP
You can also specify the files to track and the types of discrepancies to
flag by means of a rules file,
.BR bart_rules .
See
.BR bart_rules (4).
.sp
.LP
The
.B bart
utility performs two basic functions:
.sp
.ne 2
.mk
.na
.B bart create
.ad
.RS 16n
.rt
The manifest generator tool takes a file-level
.B snapshot
of a system.
The output is a catalog of file attributes referred to as a
.BR manifest .
See
.BR bart_manifest (4).
.sp
You can specify that the list of files be cataloged in three ways. Use
.B bart create
with no options, specify the files by name on the command
line, or create a rules file with directives that specify which the files to
monitor. See
.BR bart_rules (4).
.sp
By default, the manifest generator catalogs all attributes of all files in
the root (\fB/\fR) file system. File systems mounted on the root file system
are cataloged only if they are of the same type as the root file system.
.sp
For example,
.BR / ,
.BR /usr ,
and
.B /opt
are separate UFS file
systems.
.B /usr
and
.B /opt
are mounted on
.BR / .
Therefore, all
three file systems are cataloged. However,
.BR /tmp ,
also mounted on
.BR / ,
is not cataloged because it is a TMPFS file system. Mounted CD-ROMs
are not cataloged since they are HSFS file systems.
.RE

.sp
.ne 2
.mk
.na
.B bart compare
.ad
.RS 16n
.rt
The report tool compares two manifests. The output is a list of per-file
attribute discrepancies. These discrepancies are the differences between two
manifests: a control manifest and a test manifest.
.sp
A discrepancy is a change to any attribute for a given file cataloged by
both manifests. A new file or a deleted file in a manifest is reported as a
discrepancy.
.sp
The reporting mechanism provides two types of output: verbose and
programmatic. Verbose output is localized and presented on multiple lines,
while programmatic output is more easily parsable by other programs. See
.BR OUTPUT .
.sp
By default, the report tool generates verbose output where all
discrepancies are reported except for modified directory timestamps
(\fBdirmtime\fR attribute).
.sp
To ensure consistent and accurate comparison results,
.I control-manifest
and
.I test-manifest
must be built with the same
rules file.
.RE

.sp
.LP
Use the rules file to ignore specified files or subtrees when you generate
a manifest or compare two manifests. Users can compare manifests from
different perspectives by re-running the
.B "bart compare"
command with
different rules files.
.SH OPTIONS
.sp
.LP
The following options are supported:
.sp
.ne 2
.mk
.na
.B -i
.I attribute
\&.\|.\|.\fR
.ad
.RS 21n
.rt
Specify the file attributes to be ignored globally. Specify attributes as a
comma separated list.
.sp
This option produces the same behavior as supplying the file attributes to
a global
.B IGNORE
keyword in the rules file. See
.BR bart_rules (4).
.RE

.sp
.ne 2
.mk
.na
\fB-I\fR [\fIfile_name\fR.\|.\|.]\fR
.ad
.RS 21n
.rt
Specify the input list of files. The file list can be specified at the
command line or read from standard input.
.RE

.sp
.ne 2
.mk
.na
.B -n
.ad
.RS 21n
.rt
Prevent computation of content signatures for all regular files in the file
list.
.RE

.sp
.ne 2
.mk
.na
.B -p
.ad
.RS 21n
.rt
Display manifest comparison output in ``programmatic mode,'' which is
suitable for programmatic parsing. The output is not localized.
.RE

.sp
.ne 2
.mk
.na
.B -r
.I rules_file
.ad
.RS 21n
.rt
Use
.I rules_file
to specify which files and directories to catalog, and
to define which file attribute discrepancies to flag. If
.I rules_file
is
.BR - ,
then the rules are read from standard input. See
.BR bart_rules (4)
for the definition of the syntax.
.RE

.sp
.ne 2
.mk
.na
.B -R
.I root_directory
.ad
.RS 21n
.rt
Specify the root directory for the manifest. All paths specified by the
rules, and all paths reported in the manifest, are relative to
.IR root_directory .
.LP
Note -
.sp
.RS 2
The root file system of any non-global zones must not be referenced with
the
.B -R
option. Doing so might damage the global zone's file system,
might compromise the security of the global zone, and might damage the
non-global zone's file system. See
.BR zones (5).
.RE
.RE

.SH OPERANDS
.sp
.LP
bart allows quoting of operands. This is particularly important for
white-space appearing in subtree and subtree modifier specifications.
.sp
.LP
The following operands are supported:
.sp
.ne 2
.mk
.na
.I control-manifest
.ad
.RS 20n
.rt
Specify the manifest created by
.B "bart create"
on the control system.
.RE

.sp
.ne 2
.mk
.na
.I test-manifest
.ad
.RS 20n
.rt
Specify the manifest created by
.B "bart create"
on the test system.
.RE

.SH OUTPUT
.sp
.LP
The
.B "bart create"
and
.B "bart compare"
commands write output to
standard output, and write error messages to standard error.
.sp
.LP
The
.B "bart create"
command generates a system manifest. See
.BR bart_manifest (4).
.sp
.LP
When the
.B "bart compare"
command compares two system manifests, it
generates a list of file differences. By default, the comparison output is
localized. However, if the
.B -p
option is specified, the output is
generated in a form that is suitable for programmatic manipulation.
.SS "Default Format"
.sp
.in +2
.nf
\fIfilename\fR
\fIattribute\fR control:\fIxxxx\fR test:\fIyyyy\fR
.fi
.in -2
.sp

.sp
.ne 2
.mk
.na
.I filename
.ad
.RS 13n
.rt
Name of the file that differs between
.I control-manifest
and
.IR test-manifest .
For file names that contain embedded whitespace or
newline characters, see
.BR bart_manifest (4).
.RE

.sp
.ne 2
.mk
.na
.I attribute
.ad
.RS 13n
.rt
The name of the file attribute that differs between the manifests that are
compared.
.I xxxx
is the attribute value from
.IR control-manifest ,
and
.I yyyy
is the attribute value from
.IR test-manifest .
When
discrepancies for multiple attributes occur for the same file, each
difference is noted on a separate line.
.sp
The following attributes are supported:
.sp
.ne 2
.mk
.na
.B acl
.ad
.RS 12n
.rt
ACL attributes for the file. For a file with ACL attributes, this field
contains the output from
.BR acltotext() .
.RE

.sp
.ne 2
.mk
.na
.B all
.ad
.RS 12n
.rt
All attributes.
.RE

.sp
.ne 2
.mk
.na
.B contents
.ad
.RS 12n
.rt
Checksum value of the file. This attribute is only specified for regular
files. If you turn off context checking or if checksums cannot be computed,
the value of this field is
.BR - .
.RE

.sp
.ne 2
.mk
.na
.B dest
.ad
.RS 12n
.rt
Destination of a symbolic link.
.RE

.sp
.ne 2
.mk
.na
.B devnode
.ad
.RS 12n
.rt
Value of the device node. This attribute is for character device files and
block device files only.
.RE

.sp
.ne 2
.mk
.na
.B dirmtime
.ad
.RS 12n
.rt
Modification time in seconds since 00:00:00 UTC, January 1, 1970 for
directories.
.RE

.sp
.ne 2
.mk
.na
.B gid
.ad
.RS 12n
.rt
Numerical group ID of the owner of this entry.
.RE

.sp
.ne 2
.mk
.na
.B lnmtime
.ad
.RS 12n
.rt
Creation time for links.
.RE

.sp
.ne 2
.mk
.na
.B mode
.ad
.RS 12n
.rt
Octal number that represents the permissions of the file.
.RE

.sp
.ne 2
.mk
.na
.B mtime
.ad
.RS 12n
.rt
Modification time in seconds since 00:00:00 UTC, January 1, 1970 for
files.
.RE

.sp
.ne 2
.mk
.na
.B size
.ad
.RS 12n
.rt
File size in bytes.
.RE

.sp
.ne 2
.mk
.na
.B type
.ad
.RS 12n
.rt
Type of file.
.RE

.sp
.ne 2
.mk
.na
.B uid
.ad
.RS 12n
.rt
Numerical user ID of the owner of this entry.
.RE

.RE

.sp
.LP
The following default output shows the attribute differences for the
.B /etc/passwd
file. The output indicates that the
.BR size ,
.BR mtime ,
and
.B contents
attributes have changed.
.sp
.in +2
.nf
/etc/passwd:
  size  control:74  test:81
  mtime  control:3c165879  test:3c165979
  contents  control:daca28ae0de97afd7a6b91fde8d57afa
test:84b2b32c4165887355317207b48a6ec7
.fi
.in -2
.sp

.SS "Programmatic Format"
.sp
.in +2
.nf
\fIfilename\fR \fIattribute\fR \fIcontrol-val\fR \fItest-val\fR [\fIattribute\fR \fIcontrol-val\fR \fItest-val\fR]*
.fi
.in -2
.sp

.sp
.ne 2
.mk
.na
.I filename
.ad
.sp .6
.RS 4n
Same as
.I filename
in the default format.
.RE

.sp
.ne 2
.mk
.na
.I "attribute control-val" test-val
.ad
.sp .6
.RS 4n
A description of the file attributes that differ between the control and
test manifests for each file. Each entry includes the attribute value from
each manifest. See
.BR bart_manifest (4)
for the definition of the
attributes.
.RE

.sp
.LP
Each line of the programmatic output describes all attribute differences
for a single file.
.sp
.LP
The following programmatic output shows the attribute differences for the
.B /etc/passwd
file. The output indicates that the
.BR size ,
.BR mtime ,
and
.B contents
attributes have changed.
.sp
.in +2
.nf
/etc/passwd size 74 81 mtime 3c165879 3c165979
contents daca28ae0de97afd7a6b91fde8d57afa 84b2b32c4165887355317207b48a6ec7
.fi
.in -2
.sp

.SH EXIT STATUS
.SS "Manifest Generator"
.sp
.LP
The manifest generator returns the following exit values:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 6n
.rt
Success
.RE

.sp
.ne 2
.mk
.na
.B 1
.ad
.RS 6n
.rt
Non-fatal error when processing files; for example, permission problems
.RE

.sp
.ne 2
.mk
.na
.B >1
.ad
.RS 6n
.rt
Fatal error; for example, invalid command-line options
.RE

.SS "Report Tool"
.sp
.LP
The report tool returns the following exit values:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 6n
.rt
No discrepancies reported
.RE

.sp
.ne 2
.mk
.na
.B 1
.ad
.RS 6n
.rt
Discrepancies found
.RE

.sp
.ne 2
.mk
.na
.B >1
.ad
.RS 6n
.rt
Fatal error executing comparison
.RE

.SH EXAMPLES
.LP
.B Example 1
Creating a Default Manifest Without Computing Checksums
.sp
.LP
The following command line creates a default manifest, which consists of
all files in the
.B /
file system. The
.B -n
option prevents
computation of checksums, which causes the manifest to be generated more
quickly.

.sp
.in +2
.nf
bart create -n
.fi
.in -2
.sp

.LP
.B Example 2
Creating a Manifest for a Specified Subtree
.sp
.LP
The following command line creates a manifest that contains all files in
the
.B /home/nickiso
subtree.

.sp
.in +2
.nf
bart create -R /home/nickiso
.fi
.in -2
.sp

.LP
.B Example 3
Creating a Manifest by Using Standard Input
.sp
.LP
The following command line uses output from the
.BR find (1)
command to
generate the list of files to be cataloged. The
.B find
output is used as
input to the
.B "bart create"
command that specifies the
.B -I
option.

.sp
.in +2
.nf
find /home/nickiso -print | bart create -I
.fi
.in -2
.sp

.LP
.B Example 4
Creating a Manifest by Using a Rules File
.sp
.LP
The following command line uses a rules file,
.BR rules ,
to specify the
files to be cataloged.

.sp
.in +2
.nf
bart create -r rules
.fi
.in -2
.sp

.LP
.B Example 5
Comparing Two Manifests and Generating Programmatic
Output
.sp
.LP
The following command line compares two manifests and produces output
suitable for parsing by a program.

.sp
.in +2
.nf
bart compare -p manifest1 manifest2
.fi
.in -2
.sp

.LP
.B Example 6
Comparing Two Manifests and Specifying Attributes to
Ignore
.sp
.LP
The following command line compares two manifests. The
.BR dirmtime ,
.BR lnmtime ,
and
.B mtime
attributes are not compared.

.sp
.in +2
.nf
bart compare -i dirmtime,lnmtime,mtime manifest1 manifest2
.fi
.in -2
.sp

.LP
.B Example 7
Comparing Two Manifests by Using a Rules File
.sp
.LP
The following command line uses a rules file,
.BR rules ,
to compare two
manifests.

.sp
.in +2
.nf
bart compare -r rules manifest1 manifest2
.fi
.in -2
.sp

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWbart
_
Interface StabilityEvolving
.TE

.SH SEE ALSO
.sp
.LP
.BR cksum (1),
.BR digest (1),
.BR find (1),
.BR bart_manifest (4),
.BR bart_rules (4),
.BR attributes (5)
.SH NOTES
.sp
.LP
The file attributes of certain system libraries can be temporarily altered
by the system as it boots. To avoid triggering false warnings, you should
compare manifests only if they were both created with the system in the same
state; that is, if both were created in single-user or both in multi-user.
