'\" te
.\" Copyright (c) 1988 Regents of the University of California.
.\" All rights reserved. The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\" Copyright (c) 2003 Sun Microsystems,
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Inc.  All Rights Reserved.
.TH fsdb_ufs 1M "14 Apr 2003" "SunOS 5.11" "System Administration Commands"
.SH NAME
fsdb_ufs \- ufs file system debugger
.SH SYNOPSIS
.LP
.nf
\fBfsdb\fR \fB-F\fR ufs [\fIgeneric_options\fR] [\fIspecific_options\fR] \fIspecial\fR
.fi

.SH DESCRIPTION
.sp
.LP
The
.B fsdb_ufs
command is an interactive tool that can be used to patch
up a damaged
.B UFS
file system. It has conversions to translate block
and i-numbers into their corresponding disk addresses. Also included are
mnemonic offsets to access different parts of an inode. These greatly
simplify the process of correcting control block entries or descending the
file system tree.
.sp
.LP
.B fsdb
contains several error-checking routines to verify inode and
block addresses. These can be disabled if necessary by invoking \fBfsdb\fR
with the
.B -o
option or by the use of the
.B o
command.
.sp
.LP
.B fsdb
reads a block at a time and will therefore work with raw as well
as block
.B I/O
devices. A buffer management routine is used to retain
commonly used blocks of data in order to reduce the number of read system
calls. All assignment operations result in an immediate write-through of the
corresponding block. Note that in order to modify any portion of the disk,
.B fsdb
must be invoked with the
.B w
option.
.sp
.LP
Wherever possible, \fBadb-\fRlike syntax was adopted to promote the use of
.B fsdb
through familiarity.
.SH OPTIONS
.sp
.LP
The following option is supported:
.sp
.ne 2
.mk
.na
.B -o
.ad
.RS 6n
.rt
Specify
.B UFS
file system specific options. These options can be any
combination of the following separated by commas (with no intervening
spaces). The options available are:
.sp
.ne 2
.mk
.na
.B ?
.ad
.RS 14n
.rt
Display usage
.RE

.sp
.ne 2
.mk
.na
.B o
.ad
.RS 14n
.rt
Override some error conditions
.RE

.sp
.ne 2
.mk
.na
.B p='string'
.ad
.RS 14n
.rt
set prompt to string
.RE

.sp
.ne 2
.mk
.na
.B w
.ad
.RS 14n
.rt
open for write
.RE

.RE

.SH USAGE
.sp
.LP
Numbers are considered hexadecimal by default. However, the user has
control over how data is to be displayed or accepted. The
.B base
command
will display or set the input/output base. Once set, all input will default
to this base and all output will be shown in this base. The base can be
overridden temporarily for input by preceding hexadecimal numbers with
\&'\fB0x\fR', preceding decimal numbers with '\fB0t\fR', or octal numbers
with '\fB0\fR'. Hexadecimal numbers beginning with \fBa-f\fR or \fBA-F\fR
must be preceded with \&'\fB0x\fR' to distinguish them from commands.
.sp
.LP
Disk addressing by \fBfsdb\fR is at the byte level. However, \fBfsdb\fR
offers many commands to convert a desired inode, directory entry, block,
superblock and so forth to a byte address. Once the address has been
calculated, \fBfsdb\fR will record the result in dot (\fB\&.\fR).
.sp
.LP
Several global values are maintained by
.BR fsdb :
.RS +4
.TP
.ie t \(bu
.el o
the current base (referred to as
.BR base ),
.RE
.RS +4
.TP
.ie t \(bu
.el o
the current address (referred to as
.BR dot ),
.RE
.RS +4
.TP
.ie t \(bu
.el o
the current inode (referred to as
.BR inode ),
.RE
.RS +4
.TP
.ie t \(bu
.el o
the current count (referred to as
.BR count ),
.RE
.RS +4
.TP
.ie t \(bu
.el o
and the current type (referred to as
.BR type ).
.RE
.sp
.LP
Most commands use the preset value of
.B dot
in their execution. For
example,
.sp
.LP
.B > 2:inode
.sp
.LP
will first set the value of
.B dot
to 2, ':', will alert the start of a
command, and the
.B inode
command will set
.B inode
to 2. A count is
specified after a ','. Once set,
.B count
will remain at this value until
a new command is encountered which will then reset the value back to 1 (the
default). So, if
.sp
.LP
.B > 2000,400/X
.sp
.LP
is typed, 400 hex longs are listed from 2000, and when completed, the value
of
.B dot
will be
.BR "2000 + 400 * sizeof (long)" .
If a
.B RETURN
is
then typed, the output routine will use the current values of
.BR dot ,
.BR count ,
and
.B type
and display 400 more hex longs. A '*' will cause
the entire block to be displayed.
.sp
.LP
End of fragment, block and file are maintained by
.BR fsdb .
When
displaying data as fragments or blocks, an error message will be displayed
when the end of fragment or block is reached. When displaying data using the
.BR db ,
.BR ib ,
.BR directory ,
or
.B file
commands an error message
is displayed if the end of file is reached. This is mainly needed to avoid
passing the end of a directory or file and getting unknown and unwanted
results.
.sp
.LP
An example showing several commands and the use of
.B RETURN
would
be:
.sp
.in +2
.nf
\fB> 2:ino; 0:dir?d\fR
      or
\fB> 2:ino; 0:db:block?d\fR
.fi
.in -2
.sp

.sp
.LP
The two examples are synonymous for getting to the first directory entry of
the root of the file system. Once there, any subsequent
.B RETURN
(or +,
-) will advance to subsequent entries. Note that
.sp
.in +2
.nf
\fB> 2:inode; :ls\fR
      or
\fB> :ls /\fR
.fi
.in -2
.sp

.sp
.LP
is again synonymous.
.SS "Expressions"
.sp
.LP
The symbols recognized by
.B fsdb
are:
.sp
.ne 2
.mk
.na
.B RETURN
.ad
.RS 13n
.rt
update the value of
.B dot
by the current value of
.B type
and
display using the current value of
.BR count .
.RE

.sp
.ne 2
.mk
.na
.B #
.ad
.RS 13n
.rt
numeric expressions may be composed of +, -, *, and % operators (evaluated
left to right) and may use parentheses. Once evaluated, the value of
.B dot
is updated.
.RE

.sp
.ne 2
.mk
.na
.BI , " count"
.ad
.RS 13n
.rt
count indicator. The global value of
.B count
will be updated to
.BR count .
The value of
.B count
will remain until a new command is
run. A count specifier of '*' will attempt to show a
.I blocks's
worth of
information. The default for
.B count
is 1.
.RE

.sp
.ne 2
.mk
.na
\fB?\fI f\fR
.ad
.RS 13n
.rt
display in structured style with format specifier
.IR f .
See
\fBFormatted\fROutput\fB\&.\fR
.RE

.sp
.ne 2
.mk
.na
\fB/\fI f\fR
.ad
.RS 13n
.rt
display in unstructured style with format specifier
.I f
See
\fBFormatted\fROutput\fB\&.\fR
.RE

.sp
.ne 2
.mk
.na
\fB\&.\fR
.ad
.RS 13n
.rt
the value of
.BR dot .
.RE

.sp
.ne 2
.mk
.na
\fB+\fIe\fR
.ad
.RS 13n
.rt
increment the value of
.B dot
by the expression
.I e.
The amount
actually incremented is dependent on the size of
.BR type :
.sp
.B "dot = dot + e * sizeof (type)
.sp
The default for
.I e
is
.BR 1 .
.RE

.sp
.ne 2
.mk
.na
\fB-\fIe\fR
.ad
.RS 13n
.rt
decrement the value of
.B dot
by the expression
.IR e .
See
.BR + .
.RE

.sp
.ne 2
.mk
.na
\fB*\fIe\fR
.ad
.RS 13n
.rt
multiply the value of
.B dot
by the expression
.I e.
Multiplication
and division don't use
.BR type .
In the above calculation of
.BR dot ,
consider the
.B sizeof(type)
to be
.BR 1 .
.RE

.sp
.ne 2
.mk
.na
\fB%\fIe\fR
.ad
.RS 13n
.rt
divide the value of
.B dot
by the expression
.IR e .
See
.BR * .
.RE

.sp
.ne 2
.mk
.na
.BI < " name"
.ad
.RS 13n
.rt
restore an address saved in register
.IR name .
.I name
must be a
single letter or digit.
.RE

.sp
.ne 2
.mk
.na
.BI > " name"
.ad
.RS 13n
.rt
save an address in register
.IR name .
.I name
must be a single letter
or digit.
.RE

.sp
.ne 2
.mk
.na
\fB=\fI f\fR
.ad
.RS 13n
.rt
display indicator. If
.I f
is a legitimate format specifier. then the
value of
.B dot
is displayed using the format specifier
.IR f .
See
\fBFormatted\fROutput. Otherwise, assignment is assumed See
.BR = .
.RE

.sp
.ne 2
.mk
.na
\fB= [\fIs\fB] [\fIe\fB]\fR
.ad
.RS 13n
.rt
assignment indicator. The address pointed to by
.B dot
has its contents
changed to the value of the expression
.I e
or to the
.BR ASCII
representation of the quoted (") string \fIs\fR. This may be useful for
changing directory names or
.B ASCII
file information.
.RE

.sp
.ne 2
.mk
.na
.BI =+ " e"
.ad
.RS 13n
.rt
incremental assignment. The address pointed to by
.B dot
has its
contents incremented by expression
.IR e .
.RE

.sp
.ne 2
.mk
.na
.BI =- " e"
.ad
.RS 13n
.rt
decremental assignment. The address pointed to by
.B dot
has its
contents decremented by expression
.IR e .
.RE

.SS "Commands"
.sp
.LP
A command must be prefixed by a ':' character. Only enough letters of the
command to uniquely distinguish it are needed. Multiple commands may be
entered on one line by separating them by a
.B "SPACE, TAB"
or
\&';'.
.sp
.LP
In order to view a potentially unmounted disk in a reasonable manner,
.B fsdb
offers the
.BR cd ,
.BR pwd ,
.B ls
and
.B find
commands.
The functionality of these commands substantially matches those of its UNIX
counterparts. See individual commands for details. The '*', '?', and '[-]'
wild card characters are available.
.sp
.ne 2
.mk
.na
.B base=b
.ad
.sp .6
.RS 4n
display or set base. As stated above, all input and output is governed by
the current
.BR base .
If the
.B =b
.RB "is omitted, the current" " base"
is displayed. Otherwise, the current
.B base
is set to
.I b.
Note that
this is interpreted using the old value of
.BR base ,
so to ensure
correctness use the '0', '0t', or '0x' prefix when changing the
.BR base .
The default for
.B base
is hexadecimal.
.RE

.sp
.ne 2
.mk
.na
.B block
.ad
.sp .6
.RS 4n
convert the value of
.B dot
to a block address.
.RE

.sp
.ne 2
.mk
.na
.BI "cd " dir
.ad
.sp .6
.RS 4n
change the current directory to directory
.IR dir .
The current values of
.B inode
and
.B dot
are also updated. If no
.I dir
is specified,
then change directories to inode \fB2\fR ("/").
.RE

.sp
.ne 2
.mk
.na
.B cg
.ad
.sp .6
.RS 4n
convert the value of
.B dot
to a cylinder group.
.RE

.sp
.ne 2
.mk
.na
.B directory
.ad
.sp .6
.RS 4n
If the current
.B inode
is a directory, then the value of
.B dot
is
converted to a directory slot offset in that directory and
.B dot
now
points to this entry.
.RE

.sp
.ne 2
.mk
.na
.B file
.ad
.sp .6
.RS 4n
the value of
.B dot
is taken as a relative block count from the
beginning of the file. The value of
.B dot
is updated to the first byte
of this block.
.RE

.sp
.ne 2
.mk
.na
\fBfind\fR \fIdir\fR [ \fB-name\fR \fIn\fR] [\fB-inum\fR \fIi\fR]\fR
.ad
.sp .6
.RS 4n
find files by name or i-number.
.B find
recursively searches directory
.B dir
and below for filenames whose i-number matches
.I i
or whose
name matches pattern
.IR n .
Note that only one of the two options (-name
or -inum) may be used at one time. Also, the -print is not needed or
accepted.
.RE

.sp
.ne 2
.mk
.na
\fBfill\fI=p\fR
.ad
.sp .6
.RS 4n
fill an area of disk with pattern
.IR p .
The area of disk is delimited by
.B dot
and
.BR count .
.RE

.sp
.ne 2
.mk
.na
.B fragment
.ad
.sp .6
.RS 4n
convert the value of
.I dot
to a fragment address. The only difference
between the
.B fragment
command and the
.B block
command is the amount
that is able to be displayed.
.RE

.sp
.ne 2
.mk
.na
.B inode
.ad
.sp .6
.RS 4n
convert the value of
.I dot
to an inode address. If successful, the
current value of
.B inode
will be updated as well as the value of
.IR dot .
As a convenient shorthand, if ':inode' appears at the beginning
of the line, the value of
.I dot
is set to the current
.B inode
and
that inode is displayed in inode format.
.RE

.sp
.ne 2
.mk
.na
.B log_chk
.ad
.sp .6
.RS 4n
run through the valid log entries without printing any information and
verify the layout.
.RE

.sp
.ne 2
.mk
.na
.B log_delta
.ad
.sp .6
.RS 4n
count the number of deltas into the log, using the value of dot as an
offset into the log. No checking is done to make sure that offset is within
the head/tail offsets.
.RE

.sp
.ne 2
.mk
.na
.B log_head
.ad
.sp .6
.RS 4n
display the header information about the file system logging. This shows
the block allocation for the log and the data structures on the disk.
.RE

.sp
.ne 2
.mk
.na
.B log_otodb
.ad
.sp .6
.RS 4n
return the physical disk block number, using the value of dot as an offset
into the log.
.RE

.sp
.ne 2
.mk
.na
.B log_show
.ad
.sp .6
.RS 4n
display all deltas between  the beginning of the log (BOL) and the end of
the log (EOL).
.RE

.sp
.ne 2
.mk
.na
.B ls
.ad
.sp .6
.RS 4n
[ \fB-R\fR ] [ \fB-l\fR ] \fIpat1 pat2\fR\|.\|.\|. list directories or
files. If no file is specified, the current directory is assumed. Either or
both of the options may be used (but, if used,
.I must
be specified
before the filename specifiers). Also, as stated above, wild card characters
are available and multiple arguments may be given. The long listing shows
only the i-number and the name; use the
.B inode
command with '?i' to get
more information.
.RE

.sp
.ne 2
.mk
.na
.B override
.ad
.sp .6
.RS 4n
toggle the value of override. Some error conditions may be overriden if
override is toggled on.
.RE

.sp
.ne 2
.mk
.na
.BI prompt " p"
.ad
.sp .6
.RS 4n
change the
.B fsdb
prompt to
.IR p .
.I p
must be surrounded by
(")s.
.RE

.sp
.ne 2
.mk
.na
.B pwd
.ad
.sp .6
.RS 4n
display the current working directory.
.RE

.sp
.ne 2
.mk
.na
.B quit
.ad
.sp .6
.RS 4n
quit
.BR fsdb .
.RE

.sp
.ne 2
.mk
.na
.B sb
.ad
.sp .6
.RS 4n
the value of
.I dot
is taken as a cylinder group number and then
converted to the address of the superblock in that cylinder group. As a
shorthand, ':sb' at the beginning of a line will set the value of \fIdot\fR
to
.I the
superblock and display it in superblock format.
.RE

.sp
.ne 2
.mk
.na
.B shadow
.ad
.sp .6
.RS 4n
if the current inode is a shadow inode, then the value of
.I dot
is set
to the beginning of the shadow inode data.
.RE

.sp
.ne 2
.mk
.na
.B !
.ad
.sp .6
.RS 4n
escape to shell
.RE

.SS "Inode Commands"
.sp
.LP
In addition to the above commands, there are several commands that deal
with inode fields and operate directly on the current
.B inode
(they
still require the ':'). They may be used to more easily display or change
the particular fields. The value of
.I dot
is only used by the
\&'\fB:db\fR' and '\fB:ib\fR' commands. Upon completion of the command, the
value of
.I dot
is changed to point to that particular field. For
example,
.sp
.LP
.B > :ln=+1
.sp
.LP
would increment the link count of the current
.B inode
and set the value
of
.I dot
to the address of the link count field.
.sp
.ne 2
.mk
.na
.B at
.ad
.RS 7n
.rt
access time.
.RE

.sp
.ne 2
.mk
.na
.B bs
.ad
.RS 7n
.rt
block size.
.RE

.sp
.ne 2
.mk
.na
.B ct
.ad
.RS 7n
.rt
creation time.
.RE

.sp
.ne 2
.mk
.na
.B db
.ad
.RS 7n
.rt
use the current value of
.I dot
as a direct block index, where direct
blocks number from 0 - 11. In order to display the block itself, you need to
\&'pipe' this result into the \fBblock\fR or \fBfragment\fR command. For
example,
.sp
.in +2
.nf
\fB     > 1:db:block,20/X\fR
.fi
.in -2
.sp

would get the contents of data block field 1 from the inode and convert it
to a block address. 20 longs are then displayed in hexadecimal. See
\fBFormatted\fROutput\fB\&.\fR
.RE

.sp
.ne 2
.mk
.na
.B gid
.ad
.RS 7n
.rt
group id.
.RE

.sp
.ne 2
.mk
.na
.B ib
.ad
.RS 7n
.rt
use the current value of
.I dot
as an indirect block index where
indirect blocks number from 0 - 2. This will only get the indirect block
itself (the block containing the pointers to the actual blocks). Use the
.B file
command and start at block 12 to get to the actual blocks.
.RE

.sp
.ne 2
.mk
.na
.B ln
.ad
.RS 7n
.rt
link count.
.RE

.sp
.ne 2
.mk
.na
.B mt
.ad
.RS 7n
.rt
modification time.
.RE

.sp
.ne 2
.mk
.na
.B md
.ad
.RS 7n
.rt
mode.
.RE

.sp
.ne 2
.mk
.na
.B maj
.ad
.RS 7n
.rt
major device number.
.RE

.sp
.ne 2
.mk
.na
.B min
.ad
.RS 7n
.rt
minor device number.
.RE

.sp
.ne 2
.mk
.na
.B nm
.ad
.RS 7n
.rt
although listed here, this command actually operates on the directory name
field. Once poised at the desired directory entry (using the \fIdirectory\fR
command), this command will allow you to change or display the directory
name. For example,
.sp
\fB> 7:dir:nm="foo"\fR
.sp
will get the \fB7\fRth directory entry of the current
.B inode
and
change its name to foo. Note that names cannot be made larger than the field
is set up for. If an attempt is made, the string is truncated to fit and a
warning message to this effect is displayed.
.RE

.sp
.ne 2
.mk
.na
.B si
.ad
.RS 7n
.rt
shadow inode.
.RE

.sp
.ne 2
.mk
.na
.B sz
.ad
.RS 7n
.rt
file size.
.RE

.sp
.ne 2
.mk
.na
.B uid
.ad
.RS 7n
.rt
user id.
.RE

.SS "Formatted Output"
.sp
.LP
There are two styles and many format types. The two styles are structured
and unstructured. Structured output is used to display inodes, directories,
superblocks and the like. Unstructured displays raw data. The following
shows the different ways of displaying:
.sp
.ne 2
.mk
.na
.B ?
.ad
.RS 5n
.rt
.sp
.ne 2
.mk
.na
.B c
.ad
.RS 5n
.rt
display as cylinder groups
.RE

.sp
.ne 2
.mk
.na
.B i
.ad
.RS 5n
.rt
display as inodes
.RE

.sp
.ne 2
.mk
.na
.B d
.ad
.RS 5n
.rt
display as directories
.RE

.sp
.ne 2
.mk
.na
.B s
.ad
.RS 5n
.rt
display as superblocks
.RE

.sp
.ne 2
.mk
.na
.B S
.ad
.RS 5n
.rt
display as shadow inode data
.RE

.RE

.sp
.ne 2
.mk
.na
.B /
.ad
.RS 5n
.rt
.sp
.ne 2
.mk
.na
.B b
.ad
.RS 7n
.rt
display as bytes
.RE

.sp
.ne 2
.mk
.na
.B c
.ad
.RS 7n
.rt
display as characters
.RE

.sp
.ne 2
.mk
.na
.B o O
.ad
.RS 7n
.rt
display as octal shorts or longs
.RE

.sp
.ne 2
.mk
.na
.B d D
.ad
.RS 7n
.rt
display as decimal shorts or longs
.RE

.sp
.ne 2
.mk
.na
.B x X
.ad
.RS 7n
.rt
display as hexadecimal shorts or longs
.RE

The format specifier immediately follows the '/' or '?' character. The
values displayed by '/b' and all '?' formats are displayed in the current
.BR base .
Also,
.B type
is appropriately updated upon completion.
.RE

.SH EXAMPLES
.LP
.B Example 1
Displaying in Decimal
.sp
.LP
The following command displays
.B 2010
in decimal (use of
.B fsdb
as
a calculator for complex arithmetic):

.sp
.in +2
.nf
> 2000+400%(20+20)=D
.fi
.in -2
.sp

.LP
.B Example 2
Displaying an i-number in Inode Format
.sp
.LP
The following command displays i-number
.B 386
in an inode format. This
now becomes the current
.BR inode :

.sp
.in +2
.nf
> 386:ino?i
.fi
.in -2
.sp

.LP
.B Example 3
Changing the Link Count
.sp
.LP
The following command changes the link count for the current
.B inode
to
.BR 4 :

.sp
.in +2
.nf
> :ln=4
.fi
.in -2
.sp

.LP
.B Example 4
Incrementing the Link Count
.sp
.LP
The following command increments the link count by
.BR 1 :

.sp
.in +2
.nf
> :ln=+1
.fi
.in -2
.sp

.LP
.B Example 5
Displaying the Creation Time
.sp
.LP
The following command displays the creation time as a hexadecimal long:

.sp
.in +2
.nf
> :ct=X
.fi
.in -2
.sp

.LP
.B Example 6
Displaying the Modification Time
.sp
.LP
The following command displays the modification time in time format:

.sp
.in +2
.nf
> :mt=t
.fi
.in -2
.sp

.LP
.B Example 7
Displaying in ASCII
.sp
.LP
The following command displays in
.B ASCII,
block zero of the file
associated with the current
.BR inode :

.sp
.in +2
.nf
> 0:file/c
.fi
.in -2
.sp

.LP
.B Example 8
Displaying the First Block's Worth of Directorty Entries
.sp
.LP
The following command displays the first block's worth of directory entries
for the root inode of this file system. It will stop prematurely if the
.B EOF
is reached:

.sp
.in +2
.nf
> 2:ino,*?d
.fi
.in -2
.sp

.LP
.B Example 9
Displaying Changes to the Current Inode
.sp
.LP
The following command displays changes the current inode to that associated
with the \fB5\fRth directory entry (numbered from zero) of the current
.BR inode .
The first logical block of the file is then displayed in
.BR ASCII :

.sp
.in +2
.nf
> 5:dir:inode; 0:file,*/c
.fi
.in -2
.sp

.LP
.B Example 10
Displaying the Superblock
.sp
.LP
The following command displays the superblock of this file system:

.sp
.in +2
.nf
> :sb
.fi
.in -2
.sp

.LP
.B Example 11
Displaying the Cylinder Group
.sp
.LP
The following command displays cylinder group information and summary for
cylinder group
.BR 1 :

.sp
.in +2
.nf
> 1:cg?c
.fi
.in -2
.sp

.LP
.B Example 12
Changing the i-number
.sp
.LP
The following command changes the i-number for the seventh directory slot
in the root directory to
.BR 3 :

.sp
.in +2
.nf
> 2:inode; 7:dir=3
.fi
.in -2
.sp

.LP
.B Example 13
Displaying as Directory Entries
.sp
.LP
The following command displays the third block of the current
.BR inode
as directory entries:

.sp
.in +2
.nf
> 2:db:block,*?d
.fi
.in -2
.sp

.LP
.B Example 14
Changing the Name Field
.sp
.LP
The following command changes the name field in the directory slot to
.IR name :

.sp
.in +2
.nf
> 7:dir:nm="name"
.fi
.in -2
.sp

.LP
.B Example 15
Getting and Filling Elements
.sp
.LP
The following command gets fragment
.B 3c3
and fill
.BR "20 type"
elements with
.BR 0x20 :

.sp
.in +2
.nf
> 3c3:fragment,20:fill=0x20
.fi
.in -2
.sp

.LP
.B Example 16
Setting the Contents of an Address
.sp
.LP
The following command sets the contents of address
.B 2050
to
.BR 0xffffffff .
.B 0xffffffff
may be truncated depending on the current
.BR type :

.sp
.in +2
.nf
> 2050=0xffff
.fi
.in -2
.sp

.LP
.B Example 17
Placing ASCII
.sp
.LP
The following command places the
.B ASCII
for the string at
.BR 1c92434 :

.sp
.in +2
.nf
> 1c92434="this is some text"
.fi
.in -2
.sp

.LP
.B Example 18
Displaying Shadow Inode Data
.sp
.LP
The following command displays all of the shadow inode data in the shadow
inode associated with the root inode of this file system:

.sp
.in +2
.nf
> 2:ino:si:ino;0:shadow,*?S
.fi
.in -2
.sp

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
.TE

.SH SEE ALSO
.sp
.LP
.BR clri (1M),
.BR fsck_ufs (1M),
.BR dir_ufs (4),
.BR attributes (5),
.BR ufs (7FS)
.SH WARNINGS
.sp
.LP
Since
.B fsdb
reads the disk raw, extreme caution is advised in
determining its availability of
.B fsdb
on the system. Suggested
permissions are 600 and owned by bin.
.SH NOTES
.sp
.LP
The old command line syntax for clearing i-nodes using the ufs-specific
\fB\&'-z i-number'\fR option is still supported by the new debugger, though
it is obsolete and will be removed in a future release. Use of this flag
will result in correct operation, but an error message will be printed
warning of the impending obsolesence of this option to the command. The
equivalent functionality is available using the more flexible
.BR clri (1M)
command.
