'\" te
.\" Copyright (c) 2002, Sun Microsystems, Inc. All Rights Reserved.
.\" The contents of this file are subject to the terms of the Common Development and Distribution License (the "License").  You may not use this file except in compliance with the License.
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE or http://www.opensolaris.org/os/licensing.  See the License for the specific language governing permissions and limitations under the License.
.\" When distributing Covered Code, include this CDDL HEADER in each file and include the License file at usr/src/OPENSOLARIS.LICENSE.  If applicable, add the following below this CDDL HEADER, with the fields enclosed by brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
.TH prodreg 1M "6 Apr 2005" "SunOS 5.11" "System Administration Commands"
.SH NAME
prodreg \- Solaris Product Registry administration
.SH SYNOPSIS
.LP
.nf
\fBprodreg\fR [\fB--help\fR] | [\fIsubcommand\fR \fIoperand\fR \&.\|.\|.]
.fi

.SH DESCRIPTION
.sp
.LP
The \fBprodreg\fR utility browses, unregisters, and uninstalls components in the Solaris Product Registry.
.sp
.LP
Some installers make use of the \fBlibwsreg\fR(3LIB) interface to register information. The Solaris Product Registry contains information about this installed software.
.sp
.LP
The database associated with the Solaris Product Registry is relative to the root of the installed file system. Normally, this is the root of the file system (\fB/\fR). Sometimes, an alternate root, with a different Solaris Product Registry install database is used, as during live upgrade installation. See \fBlive_upgrade\fR(5).
.sp
.LP
The Registry database informs installers about installed software. The Registry and the \fBprodreg\fR utility do not directly perform installation or deinstallation. \fBprodreg\fR supports installers which are executed externally and launched by the \fBprodreg\fR utility or other means.
.sp
.LP
Depending on the subcommand, the \fBprodreg\fR command offers equivalent functions from the command line or a GUI viewer. Two versions of the GUI viewer are available. The default is the Java Swing GUI. The other version, the Java awt GUI is provided for environments without Java Swing support.
.sp
.LP
The only feature which exists in the CLI which is not present in the GUI is the \fBunregister\fR subcommand. It is possible for the product registry to become corrupted, if for example, some software is removed manually instead of by means of an uninstaller program. These entries can confuse installers which are run subsequently. The \fBunregister\fR subcommand allows stale entries to be removed, even forcefully. Care should be exercised when unregistering software with the recursive or force options so that valid entries in the registry are not removed by mistake. 
.sp
.LP
The \fBprodreg\fR command, whether it launches the GUI or the command line interface browser, displays the contents of the registry at that time only. If software is installed or uninstalled subsequent to or concurrent with launching either \fBprodreg\fR viewer, the view can be inconsistent with the Solaris Product Registry.
.SH SUBCOMMANDS
.sp
.LP
You can specify options to the \fBprodreg\fR command without specifying a subcommand. If the subcommand is omitted, the \fBswing\fR subcommand is assumed. 
.sp
.LP
The following subcommands are supported: 
.sp
.ne 2
.mk
.na
\fBawt\fR
.ad
.RS 28n
.rt  
Launch the Java \fBawt\fR GUI.
.sp
The \fBawt\fR subcommand has the following format:
.sp
.in +2
.nf
awt [-R \fIalt_root\fR | --help]
.fi
.in -2
.sp

.RE

.sp
.ne 2
.mk
.na
\fBbrowse\fR
.ad
.RS 28n
.rt  
Display the Solaris Product Registry using a command line interface. The text output of this command displays identifying information of any component in the product registry tree, including its ancestors and children. If you repeatedly invoke this subcommand, you can interactively browse the product registry. 
.sp
The database components are related as a tree. Components may have one or more children. Except for the root, components have one parent. This subcommand displays the ancestors and children for a given component in the Solaris Product Registry database. 
.sp
Each time the \fBprodreg browse\fR subcommand is executed, one component in the Registry is shown, along with its ancestry to the root of the Registry, as well as the component's children. To browse in the \fBprodreg\fR GUI, a user selects a node to expand and clicks on it. The analogous activity using the command line interface is to browse on children of nodes successively, which effectively expands a view into the registry. 
.sp
Start by browsing the root of the Registry with \fBprodreg browse\fR. Select components to expand the scope of the browsing activity. Use browse numbers as a convenience during this interactive browsing, but not in scripts. Browse numbers can change from one session to the next or on different systems. This is because browse numbers are generated as they are first used, by a given user on a particular system.
.sp
The \fBbrowse\fR subcommand has the following format:
.sp
.in +2
.nf
browse [-R \fIalt_root\fR] [-u \fIuuid\fR [-i \fIinstance\fR | -p \fIlocation\fR]]
browse [-R \fIalt_root\fR] -n \fIbnum\fR [-i \fIinstance\fR | -p \fIlocation\fR]
browse [-R \fIalt_root\fR] -m \fIname\fR 
browse --\fIhelp\fR
.fi
.in -2
.sp

This following information is output for each component: 
.sp
.ne 2
.mk
.na
\fBBROWSE #\fR
.ad
.RS 12n
.rt  
This is the browse number associated with each component. This number can be used as an argument to either the \fBprodreg browse\fR or \fBinfo\fR subcommands as a convenience
.RE

.sp
.ne 2
.mk
.na
\fB+/-/.\fR
.ad
.RS 12n
.rt  
The \fB+\fR indicates a component in the tree with children who are not shown. \fB-\fR indicates a component with children of which at least one child is being shown. The \fB\&.\fR indicates a component which has no children. This field is arranged so that each space (reading left to right) depicts a successive generation. 
.RE

.sp
.ne 2
.mk
.na
\fBUUID\fR
.ad
.RS 12n
.rt  
This is the component's unique identifier.
.RE

.sp
.ne 2
.mk
.na
\fB#\fR
.ad
.RS 12n
.rt  
This is the instance number of the component. Software components can be installed multiple times. The software registry assigns a unique instance to each one. 
.RE

.sp
.ne 2
.mk
.na
\fBNAME\fR
.ad
.RS 12n
.rt  
Each component in the Solaris Product Registry database has a localized name which is displayed in this field. It is possible that this name may not be unique in the registry since there could be another component that has the same name.
.RE

The \fBbrowse\fR subcommand provides four distinct options for viewing the registry database. If multiple instances are associated with the same component, then the output of the subcommand is the ambiguous list. The request must be made unambiguous. The instance or location operands can be used to disambiguate the browse subcommand when used with the \fB-u\fR or \fB-n\fR options.
.RS +4
.TP
.ie t \(bu
.el o
If no operand information is given, the root of the registry tree is displayed, as well as its children. This is the starting point for interactive browsing of the entire registry database.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If the browse number is given, the component associated is output.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If the \fBuuid\fR is given, the component associated with it is output. 
.RE
.RS +4
.TP
.ie t \(bu
.el o
If the name is given, the component associated with it is output.
.RE
.RE

.sp
.ne 2
.mk
.na
\fBinfo\fR
.ad
.RS 28n
.rt  
Display attributes for any component in the Solaris Product Registry by supplying identifying information for the component. 
.sp
Components in the product registry are associated with attributes. These attributes are composed of a \fIname\fR and a single \fIvalue\fR string. 
.sp
This subcommand outputs attribute information associated with components in the Solaris Product Registry. Individual components in the product registry are specified as for the \fBbrowse\fR subcommand, except that either the \fIuuid\fR, \fIname\fR or \fIbnum\fR must be specified.
.sp
If a component requested is ambiguous as it has more than one instance or the name is assigned to more than one component in the registry, the list of possibilities is output, not the attribute information. 
.sp
The default output of this subcommand is a complete list of each attributes, each on a new line. The attribute name is followed by a colon (\fB:\fR) and a SPACE. The attribute value follows, after which a RETURN is appended. Other options include can be specified using \fB-a\fR and \fB-d\fR.
.sp
The \fBinfo\fR subcommand has the following format:
.sp
.in +2
.nf
info --help
info [-R \fIalt_root\fR] -u \fIuuid\fR [-i \fIinstance\fR | -p \fIlocation\fR]
info [-R \fIalt_root\fR] -n \fIbnum\fR [-i \fIinstance\fR | -p \fIlocation\fR]
info [-R \fIalt_root\fR] -m \fIname\fR [-a \fIattr\fR | -d ] 
.fi
.in -2
.sp

.RE

.sp
.ne 2
.mk
.na
\fBhelp | \fB--help\fR | \fB-?\fR\fR
.ad
.RS 28n
.rt  
Display help text.
.sp
The \fBhelp\fR subcommand has the following format:
.sp
.in +2
.nf
help | \fB--help\fR | \fB-?\fR
.fi
.in -2
.sp

.RE

.sp
.ne 2
.mk
.na
\fBswing\fR
.ad
.RS 28n
.rt  
Launch the Java Swing GUI. If the Java Swing GUI is not available, this subcommand fails.
.sp
The \fBswing\fR subcommand has the following format:
.sp
.in +2
.nf
swing  [-R \fIalt_root\fR | --help]
.fi
.in -2
.sp

.RE

.sp
.ne 2
.mk
.na
\fBversion | \fB--version\fR | \fB-V\fR\fR
.ad
.RS 28n
.rt  
Outputs a current version string. 
.sp
The \fBversion\fR subcommand has the following format:
.sp
.in +2
.nf
version | \fB--version\fR | \fB-V\fR
.fi
.in -2
.sp

.RE

.sp
.ne 2
.mk
.na
\fBunregister\fR
.ad
.RS 28n
.rt  
Unregister an entry in the registry. 
.sp
Remove a component from the Solaris Product Registry. The component corresponding to the \fIuuid\fR specified with the \fB-u\fR option must be a single instance. If it is not, the subcommand fails and returns the list of instances with the associated \fIuuid\fR. The subcommand must be reissued using either \fB-p\fR or \fB-i\fR to uniquely determine which component instance to unregister. 
.sp
The \fBunregister\fR subcommand fails if there are components in the registry which depend on the component which is to be unregistered.
.sp
The \fBunregister\fR subcommand fails if the user does not have write access to the registry. See \fBwsreg_can_access_registry\fR(3WSREG). The \fBunregister\fR subcommand fails if the user attempts to unregister a system component, instead of a component registered with the Solaris Product Registry. System components include those which include the attribute \fBPKG\fR and certain special Registry nodes including the following:
.sp
.in +2
.nf
UUID                                  Name
====================================  =============================
root                                  System Registry
a01ee8dd-1dd1-11b2-a3f2-0800209a5b6b  Solaris System Software
8f64eabf-1dd2-11b2-a3f1-0800209a5b6b  Unclassified Software
b96ae9a9-1dd1-11b2-a3f2-0800209a5b6b  System Software Localizations
b1c43601-1dd1-11b2-a3f2-0800209a5b6b  Additional System Software
a8dcab4f-1dd1-11b2-a3f2-0800209a5b6b  Software Localizations
.fi
.in -2
.sp

Before the \fBunregister\fR subcommand with the \fB-f\fR option is used, you should carefully review what components depend upon the component which is to be unregistered. The \fB-r\fR option is even more dangerous, since all children and software components depending upon the component are also deregistered. You can obtain the list of dependent components for a component with UUID \fIuuid\fR using :
.sp
.in +2
.nf
prodreg info -u \fIuuid\fR -a "Dependent Components"
.fi
.in -2
.sp

You can obtain a list of required components using:
.sp
.in +2
.nf
prodreg info -u <uuid> -a "Required Components"
.fi
.in -2
.sp

The output lists the name, UUID and instance of the component.
.sp
The \fBunregister\fR subcommand has the following format:
.sp
.in +2
.nf
unregister [-R \fIalt_root\fR] [-fr] -u \fIuuid\fR [-p \fIlocation\fR | -i \fIinstance\fR]
unregister --help
.fi
.in -2
.sp

.RE

.sp
.ne 2
.mk
.na
\fBuninstall\fR
.ad
.RS 28n
.rt  
Launch an uninstaller program. 
.sp
Each component in the registry can have an uninstaller associated with it. This subcommand executes this associated installer, if there is one, for a component in the registry given by the \fB-u\fR option. If there is no uninstaller associated with the component, the subcommand fails. If the component given by the \fB-u\fR option is not unique (as there is more than one instance of the component installed), the subcommand outputs a list of all instances. The subcommand must then be reissued using \fB-i\fR or \fB-p\fR to disambiguate the uuid given with the \fB-u\fR option. Finally, if the component to uninstall is depended upon by other components, the command fails. 
.sp
The command may also launch an uninstaller with a \fB-x\fR option. No checks for whether this uninstalls a component upon which other components depend in this case. 
.sp
The \fBuninstall\fR command is not executed if the user does not have write access to the registry. See \fBwsreg_can_access_registry\fR(3WSREG).
.sp
The \fBuninstall\fR command has the following format:
.sp
.in +2
.nf
uninstall [-R \fIalt_root\fR] [-f] -u \fIuuid\fR -p \fIlocation\fR
uninstall [-R \fIalt_root\fR] -i \fIinstance\fR[\fIarguments\fR ...]
uninstall --help
.fi
.in -2
.sp

.RE

.SH OPTIONS
.sp
.LP
The \fBawt\fR subcommand supports the following options: 
.sp
.ne 2
.mk
.na
\fB\fB--help\fR\fR
.ad
.RS 15n
.rt  
Display help text, do not launch the viewer.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-R\fR \fIalt_root\fR\fR
.ad
.RS 15n
.rt  
Use the specified alternate root to locate the database to display with the GUI viewer.
.sp
See OPERANDS for information regarding specification of \fIalt_root\fR.
.LP
Note - 
.sp
.RS 2
The root file system of any non-global zones must not be referenced with the \fB-R\fR option. Doing so might damage the global zone's file system, might compromise the security of the global zone, and might damage the non-global zone's file system. See \fBzones\fR(5).
.RE
.RE

.sp
.LP
The \fBbrowse\fR subcommand supports the following options: 
.sp
.ne 2
.mk
.na
\fB\fB-help\fR\fR
.ad
.RS 15n
.rt  
Display help text, do not execute the browse subcommand.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-i\fR \fIinstance\fR\fR
.ad
.RS 15n
.rt  
Output the specified component instance. 
.RE

.sp
.ne 2
.mk
.na
\fB\fB-m\fR \fIname\fR\fR
.ad
.RS 15n
.rt  
Output the component instances associated with the name.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-n\fR \fIbnum\fR\fR
.ad
.RS 15n
.rt  
Output the component instances associated with the browse number. 
.RE

.sp
.ne 2
.mk
.na
\fB\fB-p\fR \fIlocation\fR\fR
.ad
.RS 15n
.rt  
Output the component instance installed in the specified location. The install location for a component can be obtained using the 'info' subcommand.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-R\fR \fIalt_root\fR\fR
.ad
.RS 15n
.rt  
Use the specified alternate root to locate the database.
.LP
Note - 
.sp
.RS 2
The root file system of any non-global zones must not be referenced with the \fB-R\fR option. Doing so might damage the global zone's file system, might compromise the security of the global zone, and might damage the non-global zone's file system. See \fBzones\fR(5).
.RE
.RE

.sp
.ne 2
.mk
.na
\fB\fB-u\fR \fIuuid\fR\fR
.ad
.RS 15n
.rt  
Output the component instances associated with the uuid. 
.RE

.sp
.LP
The \fBinfo\fR subcommand supports the following options: 
.sp
.ne 2
.mk
.na
\fB\fB-a\fR \fIattr\fR\fR
.ad
.RS 15n
.rt  
Output only the attribute whose name is given by the operand 'attr', instead of all attributes of the specified component. 
.RE

.sp
.ne 2
.mk
.na
\fB\fB-d\fR\fR
.ad
.RS 15n
.rt  
Output only the attribute whose name is \fBisDamaged\fR, instead of all attributes of the specified component. If the value is set to \fBtrue\fR, this attribute indicates that the component in the registry 
.RE

.sp
.ne 2
.mk
.na
\fB\fB--help\fR\fR
.ad
.RS 15n
.rt  
Output help text, do not execute the browse subcommand.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-i\fR \fIinstance\fR\fR
.ad
.RS 15n
.rt  
The instance operand distinguishes among multiple instances of components with the same \fBuuid\fR or browse number.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-m\fR \fIname\fR\fR
.ad
.RS 15n
.rt  
The name operand indicates one or more components in the registry.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-n\fR \fIbnum\fR\fR
.ad
.RS 15n
.rt  
Output the attributes of the component instance associated with the browse number bnum. If there is more than one instance, the command must be disambiguated using the \fB-i\fRor \fB-p\fR options.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-p\fR \fIlocation\fR\fR
.ad
.RS 15n
.rt  
The install location indicated distinguishes among multiple instances of components with the same uuid or browse number.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-R\fR \fIalt_root\fR\fR
.ad
.RS 15n
.rt  
Use the specified alternate root to locate the database.
.LP
Note - 
.sp
.RS 2
The root file system of any non-global zones must not be referenced with the \fB-R\fR option. Doing so might damage the global zone's file system, might compromise the security of the global zone, and might damage the non-global zone's file system. See \fBzones\fR(5).
.RE
.RE

.sp
.ne 2
.mk
.na
\fB\fB-u\fR \fIuuid\fR\fR
.ad
.RS 15n
.rt  
Output the attributes of the component instance associated with the uuid. If there is more than one instance, the subcommand must be disambiguated using the \fB-i\fR or \fB-p\fR options. 
.RE

.sp
.LP
The \fBswing\fR subcommand supports the following options: 
.sp
.ne 2
.mk
.na
\fB\fB--help\fR\fR
.ad
.RS 15n
.rt  
Output help text, do not execute the install subcommand.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-R\fR \fIalt_root\fR\fR
.ad
.RS 15n
.rt  
Use the specified alternate root to locate the database. 
.LP
Note - 
.sp
.RS 2
The root file system of any non-global zones must not be referenced with the \fB-R\fR option. Doing so might damage the global zone's file system, might compromise the security of the global zone, and might damage the non-global zone's file system. See \fBzones\fR(5).
.RE
.RE

.sp
.LP
The \fBuninstall\fR subcommand supports the following options: 
.sp
.ne 2
.mk
.na
\fB\fB-f\fR\fR
.ad
.RS 15n
.rt  
Force the uninstall. A forced subcommand uninstalls all instances of a component, even if there are multiple ambiguous instances of the uuid operand.
.RE

.sp
.ne 2
.mk
.na
\fB\fB--help\fR\fR
.ad
.RS 15n
.rt  
Output help text, do not execute the unregister subcommand.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-i\fR \fIinstance\fR\fR
.ad
.RS 15n
.rt  
Disambiguate the \fIuuid\fR operand.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-p\fR \fIlocation\fR\fR
.ad
.RS 15n
.rt  
Disambiguate the \fIuuid\fR operand. \fIlocation\fR corresponds to the where the software component was installed.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-R\fR \fIalt_root\fR\fR
.ad
.RS 15n
.rt  
Use the specified alternate root to locate the database.
.LP
Note - 
.sp
.RS 2
The root file system of any non-global zones must not be referenced with the \fB-R\fR option. Doing so might damage the global zone's file system, might compromise the security of the global zone, and might damage the non-global zone's file system. See \fBzones\fR(5).
.RE
.RE

.sp
.ne 2
.mk
.na
\fB\fB-u\fR \fIuuid\fR\fR
.ad
.RS 15n
.rt  
Unregister the \fIuuid\fR component. If this component has been installed multiple times, the instance to unregister must be indicated unambiguously by using the \fB-i\fR or \fB-p\fR option.
.RE

.sp
.LP
The \fBunregister\fR subcommand supports the following options: 
.sp
.ne 2
.mk
.na
\fB\fB-f\fR\fR
.ad
.RS 15n
.rt  
Force the unregistration. A forced subcommand unregisters a component even if there are other components which are dependent on this component.
.RE

.sp
.ne 2
.mk
.na
\fB\fB--help\fR\fR
.ad
.RS 15n
.rt  
Output help text, do not execute the unregister subcommand.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-i\fR \fIinstance\fR\fR
.ad
.RS 15n
.rt  
Disambiguate the \fIuuid\fR operand.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-p\fR \fIlocation\fR\fR
.ad
.RS 15n
.rt  
Disambiguate the \fBuuid\fR operand. The \fIlocation\fR corresponds to the where the software component was installed.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.RS 15n
.rt  
Causes a recursive deregistration of a component as well as that component's children and dependencies.
.RE

.sp
.ne 2
.mk
.na
\fB\fB-R\fR \fIalt_root\fR\fR
.ad
.RS 15n
.rt  
Use the specified alternate root to locate the database.
.LP
Note - 
.sp
.RS 2
The root file system of any non-global zones must not be referenced with the \fB-R\fR option. Doing so might damage the global zone's file system, might compromise the security of the global zone, and might damage the non-global zone's file system. See \fBzones\fR(5).
.RE
.RE

.sp
.ne 2
.mk
.na
\fB\fB-u\fR \fIuuid\fR\fR
.ad
.RS 15n
.rt  
Unregister component \fIuuid\fR of the component to unregister. If this component has been installed multiple times, the instance to unregister must be indicated unambiguously by using the \fB-i\fR or \fB-p\fR option.
.RE

.SH OPERANDS
.sp
.LP
The following operands are supported:
.sp
.ne 2
.mk
.na
\fB\fIalt_root\fR\fR
.ad
.RS 12n
.rt  
Pathname to a file indicating an alternate root. The Solaris Product Registry database is located relative to the alternate root. If database relative to this location does not exist, it is created.
.LP
Note - 
.sp
.RS 2
The root file system of any non-global zones must not be referenced by \fIalt_root\fR. Doing so might damage the global zone's file system, might compromise the security of the global zone, and might damage the non-global zone's file system. See \fBzones\fR(5).
.RE
.RE

.sp
.ne 2
.mk
.na
\fB\fIattr\fR\fR
.ad
.RS 12n
.rt  
Name of an attribute. This operand is used only with the \fBinfo\fR subcommand. If \fIattr\fR is associated with a component, the attribute name and value is displayed.
.RE

.sp
.ne 2
.mk
.na
\fB\fIbnum\fR\fR
.ad
.RS 12n
.rt  
The browse number.
.sp
Each component in the Solaris Product Registry is associated with a browse number. This number is generated for the convenience of an interactive user. The browse number can change if the system is rebooted or reinstalled. Do not store or use the browse number except to facilitate the \fBbrowse\fR and \fBinfo\fR subcommands. Browse numbers are always output by the \fBprodreg browse\fR subcommand. Only these values can be used as input values to the browse or info subcommand.
.RE

.sp
.ne 2
.mk
.na
\fB\fIinstance\fR\fR
.ad
.RS 12n
.rt  
Software can be installed in more than one location. The Solaris Product Registry associates a unique instance number for each. The browse subcommand shows the instance number associated with each component in the registry. The instance operand is used to distinguish between installed, and possibly different, copies of software, when such exist. 
.RE

.sp
.ne 2
.mk
.na
\fB\fIlocation\fR\fR
.ad
.RS 12n
.rt  
A path to a specific file or directory in the file system. This operand indicates the installed location of registered software. For instance, if software is installed relative to \fB/usr/local\fR the value of this operand would be \fB/usr/local\fR. The install location is used to installer or to indicate the location of an installer or to disambiguate which instance is intended, of a software component which can have multiple instances.
.RE

.sp
.ne 2
.mk
.na
\fB\fIname\fR\fR
.ad
.RS 12n
.rt  
Each software component in the Solaris Product Registry is associated with a name. This name is output by the \fBbrowse\fR subcommand. Some subcommands allow the user to input the software by name as an operand as a convenience. These names might not be unique. If the user supplies an ambiguous name, for which more than one components exist, the subcommand outputs a list of possible choices. The name can be localized; depending on the language setting the name can differ.
.RE

.sp
.ne 2
.mk
.na
\fB\fIuuid\fR\fR
.ad
.RS 12n
.rt  
Each software component in the Solaris Product Registry is associated with a unique identifier. This identifier is a handle which accesses an entry in the registry database. The uuid corresponds to the component irrespective of how many instances of the component have been installed, and what the localized name of the component is.
.RE

.SH EXAMPLES
.LP
\fBExample 1 \fRUsing the \fBprodreg\fR Command to Browse
.sp
.LP
Browsing is performed by means of the \fBprodreg\fR browse subcommand. Using these requests iteratively, one can peruse the tree, much as one would using a GUI by expanding components which are collections of other components. Browsing using browse numbers for convenience should be done only during this iterative browsing process, since the numbers are generated as a result of the browsing operation. 

.sp
.LP
Evoking the \fBbrowse\fR subcommand without any arguments browses from the top of the registry. The output varies depending on the software installed on a particular system.

.sp
.in +2
.nf
$ prodreg browse
BROWSE # +/-/.  UUID                                  #  NAME
======== =====  ====================================  =  ============
1        -      root                                  1  System
                                                         Registry
2         +     a01ee8dd-1dd1-11b2-a3f2-0800209a5b6b  1  Solaris 10
                                                         System
                                                         Software
3         +     8f64eabf-1dd2-11b2-a3f1-0800209a5b6b  1  Unclassified
                                                         Software
.fi
.in -2
.sp

.sp
.LP
The output of this command lists the browse number, UUID, instance number and name of the root component and its children. The ancestors of a component, each parent up to the root, are also shown. The \fB+/-/.\fR column indicates whether the component in the tree is an expanded parent (\fB-\fR), a child with children (\fB+\fR) or a child without children (\fB\&.\fR).

.LP
\fBExample 2 \fRRequesting Information About the Components in a Tree
.sp
.LP
The UUID, name and browse number fields can be used to request browsing information about components in the tree. The next example shows how a component can be browsed by UUID.

.sp
.in +2
.nf
$ prodreg browse -u a01ee8dd-1dd1-11b2-a3f2-0800209a5b6b
BROWSE #  +/-/.  UUID                                  #  NAME
========  =====  ====================================  =  ===========
1         -      root                                  1  System 
                                                          Registry
2          -     a01ee8dd-1dd1-11b2-a3f2-0800209a5b6b  1  Solaris 10 
                                                          System
                                                          Software
4           +    b96ae9a9-1dd1-11b2-a3f2-0800209a5b6b  1  System 
                                                          Software 
                                                          Localizations
5           +    SUNWCall                              1  Entire 
                                                          Distribution
.fi
.in -2
.sp

.LP
\fBExample 3 \fRBrowsing a Node by Name
.sp
.LP
The following example shows how a node can be browsed by name.

.sp
.in +2
.nf
$ prodreg browse -m "System Software Localizations"
BROWSE #  +/-/.  UUID                                  #  NAME
========  =====  ====================================  =  ===========
1         -      root                                  1  System 
                                                          Registry
2          -     a01ee8dd-1dd1-11b2-a3f2-0800209a5b6b  1  Solaris 10 
                                                          System
                                                          Software
4           -    b96ae9a9-1dd1-11b2-a3f2-0800209a5b6b  1  System 
                                                          Software 
                                                          Localizations
316          .   SUNWceuow                             1  Central 
                                                          Europe OW
                                                          Support
317          .   SUNWcsfw                              1  Simplified 
                                                          Chinese
                                                          freeware 
                                                          message
318          .   SUNWceuox                             1  Central 
                                                          Europe 
                                                          64-bit OS 
                                                          Support
.fi
.in -2
.sp

.LP
\fBExample 4 \fRBrowsing Iteratively
.sp
.LP
Additional output has been omitted. As a convenience, the browse number can be used for iterative browsing. This number should not be stored, as it differs depending on which system the \fBprodreg\fR command is run on, which user is running the command, and the log in session in which the command is run. 

.sp
.in +2
.nf
$ prodreg browse -n 3

BROWSE #  +/-/.  UUID                                  #  NAME
========  =====  ====================================  =  ===========
1         -      root                                  1  System 
                                                          Registry
2          -     a01ee8dd-1dd1-11b2-a3f2-0800209a5b6b  1  Solaris 10 
                                                          System 
                                                          Software
5           -    SUNWCall                              1  Entire 
                                                          Software 
                                                          Distribution
6            .   SUNWrsmo                              1  RSMPI 
                                                          Operations 
                                                          Registration 
                                                          Module
7            +   SUNWCjvx                              1  JavaVM 
                                                          (64-bit)
8            .   SUNWrsmx                              1  Remote 
                                                          Shared 
                                                          Memory 
                                                          (64-bit)
9            +   SUNWCacc                              1  System 
                                                          Accounting
.fi
.in -2
.sp

.LP
\fBExample 5 \fRBrowsing Using an Ambiguous Value
.sp
.LP
If the requested value is ambiguous, the list of ambiguous instances are displayed. In the following example, there are two distinct software components with the same name.

.sp
.in +2
.nf
$ ./prodreg browse -m JavaVM
The request failed because multiple components correspond to the 
criteria given. Use the list of possible components given below, 
select one and try again.

BROWSE #  +/-/.  UUID                                  #  NAME
========  =====  ====================================  =  ===========
12        .      org.spybeam.javavm                    1  JavaVM
51        .      SUNWCjv                               1  JavaVM
.fi
.in -2
.sp

.sp
.LP
Issue one of the following requests again:

.sp
.in +2
.nf
$ prodreg browse -u SUNWCjv
.fi
.in -2
.sp

.sp
.LP
or

.sp
.in +2
.nf
$ prodreg browse -u org.spybeam.javavm
.fi
.in -2
.sp

.LP
\fBExample 6 \fRBrowsing Multiple Installations of Software
.sp
.LP
Another possible ambiguous response arises when a particular software component is installed multiple times. In the example below \fBExample\fR software is registered three times.

.sp
.in +2
.nf
$ prodreg browse -m Example
The request failed because multiple components correspond to the 
criteria given. Use the list of possible components given below, 
select one and try again.
BROWSE #  +/-/.  UUID                                  #  NAME
========  =====  ====================================  =  ===========
7         .      org.spybeam.example                   2  Example
7         .      org.spybeam.example                   3  Example
7         .      org.spybeam.example                   1  Example
The component requested could not be found.
.fi
.in -2
.sp

.LP
\fBExample 7 \fRBrowsing Using a Particular Instance
.sp
.LP
The request can be repeated specifying a particular instance to disambiguate it. It is also possible to disambiguate a request with the \fB-p\fR option, followed by the install location. In this case, to browse the first instance of the \fBExample\fR software, one would use the command:

.sp
.in +2
.nf
$ prodreg browse -u org.spybeam.example -i 1 
.fi
.in -2
.sp

.LP
\fBExample 8 \fRUsing the \fBinfo\fR Subcommand
.sp
.LP
The install location, as well as other attributes of a component can be obtained with the info subcommand. The info subcommand accepts the same disambiguating options and returns all the attributes of a component, each on a single line.

.sp
.in +2
.nf
$ prodreg info -m Example
The request failed because multiple components correspond to the
criteria given. Use the list of possible components given below,
select one and try again.
BROWSE # +/-/. UUID                                 # NAME
======== ===== ==================================== = ===========
7        .     org.spybeam.example                  2 Example
7        .     org.spybeam.example                  3 Example
7        .     org.spybeam.example                  1 Example
The component requested could not be found.
.fi
.in -2
.sp

.sp
.LP
This variation of the info subcommand outputs all information associated with instance 1 of the \fBExample\fR component. The output from this variation is not displayed 

.sp
.in +2
.nf
$ prodreg info -u org.spybeam.example -i 1
.fi
.in -2
.sp

.LP
\fBExample 9 \fRObtaining Information on the Install Location
.sp
.LP
You can use the \fBinfo\fR subcommand to obtain the install location and other attributes of a component. The \fBinfo\fR subcommand accepts the same disambiguating options as the \fBbrowse\fR subcommand. It returns all the attributes of a component, each on a single line. You can also request a single attribute. 

.sp
.LP
The following command outputs the value of the install location attribute:

.sp
.in +2
.nf
$ prodreg info -n 23 -a Location
.fi
.in -2
.sp

.LP
\fBExample 10 \fRIdenitifying and Unregistering Damaged Software
.sp
.LP
Removing installed software without using the associated uninstaller can damage the software in the registry. A damaged component indicates that certain software is installed, when in fact it is not present. A component can be damaged by removing files or packages directly, without running the associated uninstaller. The general rule to follow is: If software has been installed by an installer program, it should be uninstalled using the supplied uninstaller program.

.sp
.LP
This example shows how to identify and repair damaged software components so that software can be reinstalled.

.sp
.LP
Browsing for \fBExamplesoft\fR, produces the following:

.sp
.in +2
.nf
$ prodreg browse -m Examplesoft
BROWSE #  +/-/.  UUID                                  #  NAME
========  =====  ====================================  =  ============
1         -      root                                  1  System 
                                                          Registry
2          +     a01ee8dd-1dd1-11b2-a3f2-0800209a5b6b  1  Solaris 10 
                                                          System
                                                          Software
3          +     8f64eabf-1dd2-11b2-a3f1-0800209a5b6b  1  Unclassified 
                                                          Software
4          -     95842091-725a-8501-ef29-0472985982be  1  ExampleSoft
233         .    90209809-9785-b89e-c821-0472985982be  1  Example Doc
234         .    EXSOzzt                               1
235         .    EXSOblob                              1  Example Data
.fi
.in -2
.sp

.sp
.LP
The \fBExamplesoft\fR child \fBEXSOzzt\fR, representing a package component of registered software does not display its name. This is likely to be because the software \fBExamplesoft\fR is damaged. Verify this with the following command:

.sp
.in +2
.nf
$ prodreg info -u 95842091-725a-8501-ef29-0472985982be \e
     -i 1 -d 
isDamaged=TRUE
.fi
.in -2
.sp

.sp
.LP
Since \fBDamaged\fR is \fBTRUE\fR, some part of \fBExamplesoft\fR is damaged. The following command lists the packages which make up \fBExamplesoft\fR:

.sp
.in +2
.nf
$ prodreg info \e
     -u 95842091-725a-8501-ef29-0472985982be\e 
     -i 1 -a PKGS pkgs: 
EXSOzzt EXSOblob
.fi
.in -2
.sp

.sp
.LP
Use the \fBpkginfo\fR command to verify if \fBEXSO\fR is installed:

.sp
.in +2
.nf
$ pkginfo EXSOzzt 
ERROR: information for "EXSOzzt" was not found 
$ pkginfo EXSOblob
application EXSOblob       Example Data
.fi
.in -2
.sp

.sp
.LP
The output of these commands shows that the package \fBEXSOzzt\fR has been removed, probably with the \fBpkgrm\fR command. The \fBExamplesoft\fR software will probably not function.  To repair the software, one should run the uninstaller registered with \fBExamplesoft\fR. You probably need to run the uninstaller with root permissions, as it unregisters the software and runs \fBpkgrm\fR commands. Both of these operations require root permissions.

.sp
.in +2
.nf
# prodreg uninstall -u 95842091-725a-8501-ef29-0472985982be -i 1
The install program requested could not be found.
.fi
.in -2
.sp

.sp
.LP
Something is wrong, or else you would be able to access uninstall program to uninstall the software. One possibility is that the uninstaller program has been removed manually. It is possible to determine where the uninstaller is located by requesting the \fBuninstallprogram\fR attribute:

.sp
.in +2
.nf
$ prodreg info -m ExampleSoft -a uninstallprogram
uninstallprogram: /usr/bin/java -mx64m -classpath 
/var/sadm/prod/org.example.ExampleSoft/987573587 uninstall_ExampleSoft
.fi
.in -2
.sp

.sp
.LP
Check to see if there is an uninstaller in the registered location.

.sp
.in +2
.nf
# ls /var/sadm/prod/org.example.ExampleSoft/987573587
/var/sadm/prod/org.example.ExampleSoft/987573587: 
No such file or directory
.fi
.in -2
.sp

.sp
.LP
Since there is no uninstaller at the desired location, you have two options. One is to load the uninstaller from back up storage and run it manually. Use the command line stored in the registry: 

.sp
.in +2
.nf
# /usr/bin/java -mmx64m -classpath \e
     /var/sadm/prod/org.example.ExampleSoft/987573587 \e
     uninstall_ExampleSoft   
.fi
.in -2
.sp

.sp
.LP
If there is no other possibility, manually unregister the  software.   

.sp
.in +2
.nf
# prodreg unregister -u 95842091-725a-8501-ef29-0472985982be -i 1
.fi
.in -2
.sp

.sp
.LP
This does not remove the remaining package \fBEXSOblob\fR. You must do this manually. 

.sp
.in +2
.nf
# pkgrm EXSOblob
.fi
.in -2
.sp

.LP
\fBExample 11 \fRRemoving Multiple Components
.sp
.LP
Component A has children B and C, and C has children D and E, and the you wish to remove all of the components at once. This is useful if the whole hierarchy has to be reinstalled and the uninstaller has been lost or cannot be run

.sp
.in +2
.nf
$ prodreg browse -u UUID-of-C
BROWSE #  +/-/.  UUID                                  #  NAME
========  =====  ====================================  =  ============
1         -      root                                  1  System 
                                                          Registry
2          +     a01ee8dd-1dd1-11b2-a3f2-0800209a5b6b  1  Solaris 10 
                                                          System
                                                          Software
3          +     8f64eabf-1dd2-11b2-a3f1-0800209a5b6b  1  Unclassified 
                                                          Software
1423       -     UUID-of-A                             1  Example A
1436        .    UUID-of-B                             1  Example B
1437        -    UUID-of-C                             1  Example C
1462         .   UUID-of-D                             1  Example D
1463         .   UUID-of-E                             1  Example E

# prodreg uninstall -u UUID-of-A -i 1
.fi
.in -2
.sp

.sp
.LP
The \fBuninstall\fR subcommand can fail various ways, for example if the java classes have been removed, if the user has insufficient permissions or if Java software is not present on the system. The recursive unregistration subcommand is very powerful and dangerous. Not only does it unregister every child of a component, it also unregisters every component which depends upon the component to unregister. It is a good idea to view all information about the component to determine if any components will be unintentionally unregistered with UUID-of-A.

.sp
.in +2
.nf
$ prodreg info -u UUID-of-A
Title: Example A Software
Version: 5.8.0.2001.11.02
Location: /usr
Vendor: Example Vendor
uninstallprogram: /usr/bin/java -mx64m -classpath 
/var/sadm/prod/org.example.ExampleA/90820965 uninstall_ExampleA
vendorurl: http://www.example.org
description: Example A Software has many uses
Supported Languages: en

Child Components:
Name                        UUID                                  #
--------------------------  ------------------------------------  -
Example B                   UUID-of-B                             1
Example C                   UUID-of-C                             1

Required Components:
Name                        UUID                                  #
--------------------------  ------------------------------------  -
Example B                   UUID-of-B                             1
Example C                   UUID-of-C                             1
.fi
.in -2
.sp

.sp
.LP
No software depends on Example A, or else an additional field, \fBDependent Components\fR would be shown. To further ensure that there are no surprises, one should examine the dependent components and children of UUID-of-B and UUID-of-C, all the components which depend on UUID-of-B, UUID-of-C and their children, and so on.

.sp
.LP
If you examine the browse tree, you know the entire list of descendents of UUID-of-A. You can also examine the dependent component attributes of all of Example A's descendents. 

.sp
.in +2
.nf
$ prodreg info -u UUID-of-B -i 1 -a "Dependent Components"
Dependent Components:
Name                         UUID                                  #
---------------------------  ------------------------------------  -
Example A                    UUID-of-A                             1

$ prodreg info -u UUID-of-C -i 1 -a "Dependent Components"
Dependent Components:
Name                         UUID                                  #
---------------------------  ------------------------------------  -
Example A                    UUID-of-A                             1

$ prodreg info -u UUID-of-D -i 1 -a "Dependent Components"
Dependent Components:
Name                         UUID                                  #
---------------------------  ------------------------------------  -
Example C                    UUID-of-C                             1

$ prodreg info -u UUID-of-E -i 1 -a "Dependent Components"
Dependent Components:
Name                         UUID                                  #
---------------------------  ------------------------------------  -
Example C                    UUID-of-C                             1
.fi
.in -2
.sp

.sp
.LP
A recursive unregistration of Example A only results in unregistering Example A and its descendents, as intended. 

.sp
.in +2
.nf
# prodreg unregister -r -u UUID-of-A -i 1
.fi
.in -2
.sp

.LP
\fBExample 12 \fRReinstalling a Damaged Component
.sp
.LP
In this example, there is a component, Software ZZZ which is depended upon by other software. Software ZZZ has been damaged and you need to reinstall it. The reinstallation is impossible until Software ZZZ is unregistered. 

.sp
.LP
First, you check what depends upon Software ZZZ:

.sp
.in +2
.nf
$ prodreg info -m "Software ZZZ" -a "Dependent Components"
Dependent Components:
Name                         UUID                                  #
---------------------------  ------------------------------------  -
Software Foobar              d9723500-9823-1432-810c-0100e09832ff  1
.fi
.in -2
.sp

.sp
.LP
Normally, you would have to uninstall Software Foobar before unregistering Software ZZZ, since Software Foobar depends on Software ZZZ. You decide that it is impossible or unreasonable to reinstall Software Foobar. Performing a recursive unregister of Software ZZZ is not an option as it would unregister Software Foobar as well. Instead you can do a forced unregister of Software ZZZ. The UUID of Software ZZZ is 90843fb1-9874-3a20-9b88-984b32098432.

.sp
.in +2
.nf
# prodreg unregister -f -u 90843fb1-9874-3a20-9b88-984b32098432 -i 1
.fi
.in -2
.sp

.sp
.LP
You can then reinstall Software ZZZ:

.sp
.in +2
.nf
# /usr/bin/java -cp /usr/installers/org.example.softwarezzz
.fi
.in -2
.sp

.SH BUGS
.sp
.LP
The registry can become out of date because of software being manually removed, or removed using \fBpkgrm\fR(1M) directly. To avoid damaging the registry, use uninstall programs to remove software which was initially installed using an install program.
.SH ENVIRONMENT VARIABLES
.sp
.LP
The following environment variable affects the execution of \fBprodreg\fR: 
.sp
.ne 2
.mk
.na
\fB\fBPKG_INSTALL_ROOT\fR\fR
.ad
.RS 20n
.rt  
If present, defines the full path name of a directory to use as the system's \fBPKG_INSTALL_ROOT\fR path. All product and package information files are then looked for in the directory tree, starting with the specified \fBPKG_INSTALL_ROOT\fR path. If not present, the default system path of \fB/\fR is used.
.RE

.SH EXIT STATUS
.sp
.LP
The following exit values are returned:
.sp
.ne 2
.mk
.na
\fB\fB0\fR\fR
.ad
.RS 6n
.rt  
Successful completion. 
.RE

.sp
.ne 2
.mk
.na
\fB>\fB0\fR\fR
.ad
.RS 6n
.rt  
An error occurred.
.RE

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWwsr2, SUNWwsrv
_
Interface StabilityEvolving
.TE

.SH SEE ALSO
.sp
.LP
\fBpkgadd\fR(1M), \fBpkgrm\fR(1M), \fBwsreg_can_access_registry\fR(3WSREG), \fBlibwsreg\fR(3LIB), \fBlive_upgrade\fR(5), \fBattributes\fR(5)
.sp
.LP
\fIApplication Packaging Developer's Guide\fR
.SH NOTES
.sp
.LP
The \fBprodreg\fR GUI and command line interface view both the Solaris Product Registry and the package database. Both look like components in the registry, but some of these cannot be unregistered or uninstalled. Packages do not have an associated uninstaller, so they cannot be uninstalled using the \fBprodreg\fR \fBuninstall\fR subcommand. Solaris packages cannot be unregistered using the \fBprodreg\fR \fBunregister\fR subcommand. Packages are removed using the \fBpkgrm\fR(1M) command, after which time the packages do not appear in the GUI or CLI \fBprodreg\fR viewer. 
.sp
.LP
It is preferable to remove software using the uninstaller associated with the software installed than to remove individual packages using \fBpkgrm\fR(1M), since the uninstaller software takes care of comprehensive removal of all resources associated with the installed software, including unregistering information in Registry and removing the appropriate packages.
.sp
.LP
The \fBprodreg\fR \fBuninstall\fR subcommand launches an external program. The command line conventions of these programs have to be used to indicate the alternate root for the product registry. Another possibility is to use the \fBPKG_INSTALL_ROOT\fR environment variable for this purpose as the install program is executed in the same environment as prodreg. Uninstall programs are frequently java classes which require Java to be installed. If Java software has been removed or is missing from a Solaris distribution, it is impossible to run java based uninstallers.
.sp
.LP
Only the \fBprodreg\fR \fBunregister\fR and \fBuninstall\fR subcommands can only be run with root permissions. This is because they modify the product registry in the case of unregister, and remove packages in the case of uninstall. The other operations merely read the registry and can be run with any user permissions. The \fBprodreg\fR \fBuninstall\fR subcommand might require root permissions as well, as installers can execute commands such as \fBpkgadd\fR(1M) or \fBpkgrm\fR(1M) which require root permissions to run.
.sp
.LP
Attributes associated with components are documented in various places -primarily in the \fIApplication Packaging Developer's Guide\fR. The attributes associated with the Solaris Product Registry itself are described in the following glossary.
.sp
.ne 2
.mk
.na
\fBDependent Components\fR
.ad
.RS 24n
.rt  
List of components upon which the component depends.
.RE

.sp
.ne 2
.mk
.na
\fBLocation\fR
.ad
.RS 24n
.rt  
The location relative to which software was installed.
.RE

.sp
.ne 2
.mk
.na
\fBpkgs\fR
.ad
.RS 24n
.rt  
List of packages which correspond to the component. These packages are added with \fBpkgadd\fR after the component is registered. They are removed with \fBpkgrm\fR before the component is unregistered.
.RE

.sp
.ne 2
.mk
.na
\fBRequired Components\fR
.ad
.RS 24n
.rt  
List of components on which the component depends.
.RE

.sp
.ne 2
.mk
.na
\fBSource\fR
.ad
.RS 24n
.rt  
Media from which the install was done.
.RE

.sp
.ne 2
.mk
.na
\fBSupported Languages\fR
.ad
.RS 24n
.rt  
List of locales for which there are registered titles. 
.RE

.sp
.ne 2
.mk
.na
\fBTitle\fR
.ad
.RS 24n
.rt  
\fBName\fR given by the \fBprodreg\fR \fBbrowse\fR subcommand. This name can be localized to the locale in which the shell is running.
.RE

.sp
.ne 2
.mk
.na
\fBUnique Name\fR
.ad
.RS 24n
.rt  
Name used by previous versions of the Solaris Product Registry. This value is often set to the package name corresponding to a given component in the registry.
.RE

.sp
.ne 2
.mk
.na
\fBVendor\fR
.ad
.RS 24n
.rt  
Vendor who produced the component. 
.RE

.sp
.ne 2
.mk
.na
\fBVersion\fR
.ad
.RS 24n
.rt  
Version string associated with the component.
.RE

.sp
.LP
The Registry can contain components which do not correspond to software actually installed on the system. This can be detected several ways. The easiest is to check using the \fBinfo\fR subcommand if a component is damaged. Another way is to determine where software was installed using the \fBinfo\fR subcommand, and verify it is still there.
