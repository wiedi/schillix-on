'\" te
.\" This manual page is derived from documentation obtained from Red Hat.
.\" Portions Copyright (c) 2009, Sun Microsystems, Inc. All Rights Reserved.
.\" The contents of this file are subject to the terms of the Common Development and Distribution License (the "License").  You may not use this file except in compliance with the License. You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE or http://www.opensolaris.org/os/licensing.
.\"  See the License for the specific language governing permissions and limitations under the License. When distributing Covered Code, include this CDDL HEADER in each file and include the License file at usr/src/OPENSOLARIS.LICENSE.  If applicable, add the following below this CDDL HEADER, with
.\" the fields enclosed by brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
.TH virsh 1M "9 Jul 2009" "SunOS 5.11" "System Administration Commands"
.SH NAME
virsh \- management user interface for guest domains
.SH SYNOPSIS
.LP
.nf
\fBvirsh\fR \fIsubcommand\fR [\fIarguments\fR]
.fi

.SH DESCRIPTION
.sp
.LP
The \fBvirsh\fR command provides the main interface for command and control of both xVM and guest domains. Users should use \fBvirsh\fR wherever possible, as it provides a generic and stable interface to controlling virtualized operating systems. Some xVM operations are not yet implemented by \fBvirsh\fR. In those cases, the legacy utility \fBxm\fR(1M) can be used for detailed control.
.sp
.LP
\fBvirsh\fR can be used to administer both transient and managed guests. A managed guest has a persistent configuration which is maintained across multiple invocations of the guest. The configuration of a transient guest is discarded when the guest shuts down.
.sp
.LP
With minor exceptions, the basic form of a \fBvirsh\fR command is:
.sp
.in +2
.nf
# \fBvirsh \fIsubcommand\fR \fIdomain-id\fR | \fIname\fR | \fIuuid\fR [\fIoptions\fR]\fR
.fi
.in -2
.sp

.sp
.LP
The components of a \fBvirsh\fR command are described as follows:
.sp
.ne 2
.mk
.na
\fB\fIsubcommand\fR\fR
.ad
.sp .6
.RS 4n
One of the subcommands described below.
.RE

.sp
.ne 2
.mk
.na
\fB\fIdomain-id\fR | \fIname\fR | \fIuuid\fR\fR
.ad
.sp .6
.RS 4n
An identifier for a specific domain.
.RE

.sp
.ne 2
.mk
.na
\fB\fIoptions\fR\fR
.ad
.sp .6
.RS 4n
A subcommand-specific option.
.RE

.sp
.LP
Exceptions to command form described above occur when a subcommand acts on all domains, the entire machine, or directly on the Solaris xVM hypervisor.
.sp
.LP
Most \fBvirsh\fR subcommands require root privileges or that you assume the Primary Administrator role.
.sp
.LP
Many \fBvirsh\fR commands act asynchronously, so that the system prompt returns immediately while activity proceeds in the background. Many operations on domains, such as \fBcreate\fR and \fBshutdown\fR, can take considerable time (30 seconds or more) to reach completion. Use the \fBlist\fR subcommand to determine whether such an operation is complete.
.SH SUBCOMMANDS
.sp
.LP
The \fBvirsh\fR subcommands are categorized under the rubrics "generic", "domain", and "device" and are described in the following subsections of those names.
.SS "Generic Subcommands"
.sp
.ne 2
.mk
.na
\fB\fBcapabilities\fR\fR
.ad
.sp .6
.RS 4n
Display an XML document describing the capabilities of the hypervisor to which we are currently connected. This includes a section on the host capabilities in terms of CPU features, and a description for each kind of guest which can be virtualized. For a more complete description, see the page under \fBlibvirt.org\fR entitled "XML Format". The XML also shows the NUMA topology information, if available.
.RE

.sp
.ne 2
.mk
.na
\fB\fBconnect\fR \fIURI\fR [\fB--readonly\fR]\fR
.ad
.sp .6
.RS 4n
Connect to the hypervisor. The URI parameter, if provided, specifies how to connect to the hypervisor. Without this parameter, the connection will be to the local hypervisor. The web page entitled "Connection URIs", under \fBlibvirt.org\fR, lists the possible values, but not all types are supported by all systems.
.sp
With the \fB--readonly\fR option, the connection is read-only.
.RE

.sp
.ne 2
.mk
.na
\fB\fBhelp\fR [\fIsubcommand\fR]\fR
.ad
.sp .6
.RS 4n
With no argument, \fBhelp\fR displays a brief synopsis of all subcommands. With a specified subcommand, displays a brief description of that subcommand.
.RE

.sp
.ne 2
.mk
.na
\fB\fBnodeinfo\fR\fR
.ad
.sp .6
.RS 4n
Returns basic information about a node, such as the number and type of CPUs, and the size of physical memory.
.RE

.sp
.ne 2
.mk
.na
\fB\fBquit\fR\fR
.ad
.sp .6
.RS 4n
Quit this interactive terminal.
.RE

.sp
.ne 2
.mk
.na
\fB\fBversion\fR\fR
.ad
.sp .6
.RS 4n
Display version information about this instance of \fBvirsh\fR.
.RE

.SS "Domain Subcommands"
.sp
.LP
The following subcommands manipulate domains directly. Most take a domain identifier as their first argument. In the following description, the notation \fIdomain\fR can be either a symbolic domain name, a numeric domain id, or a UUID, any of which uniquely identify a domain.
.sp
.ne 2
.mk
.na
\fB\fBconsole\fR \fIdomain\fR [\fB--verbose\fR]\fR
.ad
.sp .6
.RS 4n
Connect the virtual serial console for the guest. This subcommand takes the following option:
.sp
.ne 2
.mk
.na
\fB\fB--verbose\fR\fR
.ad
.sp .6
.RS 4n
Displays verbose connection and disconnection messages.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBcreate\fR \fIfile\fR\fR
.ad
.sp .6
.RS 4n
Create (and start) a domain based on the parameters contained in the XML file \fIfile\fR, where \fIfile\fR is an absolute pathname. Such a file can be created using \fBvirsh\fR \fBdumpxml\fR subcommand.  Directly editing XML configuration is not recommended. Use this subcommand to create a transient guest. Use \fBdefine\fR (below) to create a managed guest.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdefine\fR \fIfile\fR [\fB--relative-path\fR \fIpath\fR]\fR
.ad
.sp .6
.RS 4n
Define (but do not start) a domain from the specified XML file. If the disk paths in the XML file contain relative paths, the domain will be created with those paths relative to \fIpath\fR, if provided.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdestroy\fR \fIdomain\fR\fR
.ad
.sp .6
.RS 4n
Immediately terminate a domain. This is the equivalent of abruptly terminating power to a machine. In most cases, you should use the \fBshutdown\fR subcommand instead.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdomid\fR \fIdomain_name\fR\fR
.ad
.sp .6
.RS 4n
Converts a domain name to a numeric domain ID.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdominfo\fR \fIdomain\fR\fR
.ad
.sp .6
.RS 4n
Returns basic information about a domain. In \fBdominfo\fR output, note that the \fBOS Type\fR field displays the type of virtualization--\fBhvm\fR for a Hardware-assisted Virtual Machine (HVM), \fBlinux\fR for a paravirtualized domain--not the guest OS installed in a domain.
.sp
Note that, when the domain is running, \fBdominfo\fR displays dynamic data. Memory values include any hypervisor overhead.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdomname\fR \fIdomain_id\fR\fR
.ad
.sp .6
.RS 4n
Converts a numeric domain id to a domain name.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdomstate\fR \fIdomain\fR\fR
.ad
.sp .6
.RS 4n
Returns the state of a running domain. See the description of the \fBlist\fR subcommand.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdomuuid\fR \fIdomain\fR\fR
.ad
.sp .6
.RS 4n
Convert the specified domain name or ID to a domain UUID.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdump\fR \fIdomain\fR \fIfile\fR\fR
.ad
.sp .6
.RS 4n
Dump the core of the domain specified by \fIdomain\fR to the file specified by \fIfile\fR for analysis.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdumpxml\fR \fIdomain\fR [\fB--relative-path\fR \fIpath\fR]\fR
.ad
.sp .6
.RS 4n
Output the configuration of the given domain in XML format. Captured in a file, this data can be used as the argument to a subsequent \fBcreate\fR subcommand.
.sp
By default, all paths in the XML will be absolute. Adding the \fB--relative-path\fR option will make all disk paths relative to \fIpath\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBedit\fR\fR
.ad
.sp .6
.RS 4n
Starts the editor specified by the value of $EDITOR and, in this editor, opens the result of the command \fBvirsh dumpxml\fR. The subcommand then redefines the domain with the edited XML. Editing XML is \fBnot\fR recommended.
.RE

.sp
.ne 2
.mk
.na
\fB\fBhostname\fR\fR
.ad
.sp .6
.RS 4n
Returns the hostname of the control domain.
.RE

.sp
.ne 2
.mk
.na
\fB\fBlist\fR [\fIdomain\fR...]\fR
.ad
.sp .6
.RS 4n
Displays information about one or more domains. If no domains are specified, displays information about all defined domains. This subcommand takes the following options:
.sp
.ne 2
.mk
.na
\fB\fB--active\fR\fR
.ad
.RS 14n
.rt  
Display only running domains.
.RE

.sp
.ne 2
.mk
.na
\fB\fB--inactive\fR\fR
.ad
.RS 14n
.rt  
Display only non-running domains.
.RE

.sp
.ne 2
.mk
.na
\fB\fB--all\fR\fR
.ad
.RS 14n
.rt  
Display both running and non-running domains. 
.RE

By default, all domains are displayed.
.sp
An example of \fBlist\fR output is as follows:
.sp
.in +2
.nf
% \fBvirsh list\fR
Id Name                 State

----------------------------------

0 Domain-0              running
2 fedora                paused
- solaris-hvm           shut off
.fi
.in -2
.sp

\fBId\fR is the numeric id for a domain; \fBName\fR is the symbolic name. \fBState\fR is the run state and can be one of the following:
.sp
.ne 2
.mk
.na
\fB\fBrunning\fR\fR
.ad
.sp .6
.RS 4n
The domain is currently running on a CPU.
.RE

.sp
.ne 2
.mk
.na
\fB\fBidle\fR\fR
.ad
.sp .6
.RS 4n
The domain is not currently running on any CPU. This can be because the domain is waiting on I/O (a traditional wait state) or has gone to sleep because of inactivity.
.RE

.sp
.ne 2
.mk
.na
\fB\fBpaused\fR\fR
.ad
.sp .6
.RS 4n
The domain has been paused, usually as a result of the administrator running \fBvirsh suspend\fR. When in a \fBpaused\fR state the domain still consumes allocated resources, such as memory, but is not eligible for scheduling by the xVM hypervisor.
.RE

.sp
.ne 2
.mk
.na
\fB\fBin shutdown\fR\fR
.ad
.sp .6
.RS 4n
The domain is in process of shutting down, but has not completely shutdown or crashed.
.RE

.sp
.ne 2
.mk
.na
\fB\fBshut off\fR\fR
.ad
.sp .6
.RS 4n
The domain is down.
.RE

.sp
.ne 2
.mk
.na
\fB\fBcrashed\fR\fR
.ad
.sp .6
.RS 4n
The domain has crashed as a result of a sudden event. Normally, this state can occur only if the domain has been configured not to restart following a crash.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBmigrate\fR [\fB--live\fR] \fIdomain\fR \fIdest_uri\fR [\fImigrate_uri\fR]\fR
.ad
.sp .6
.RS 4n
Migrate the \fIdomain\fR to the host specified by \fIdest_uri\fR. The \fB--live\fR option attempts a live migration. The optional \fImigrate_uri\fR is a separate URI that specifies a transport method between the host and destination.
.RE

.sp
.ne 2
.mk
.na
\fB\fBreboot\fR \fIdomain\fR\fR
.ad
.sp .6
.RS 4n
Reboot a domain. The effect of this command is identical to the effect of running \fBinit 6\fR. The command returns immediately, however, if successful, the entire reboot process might take a minute or more. There is no guarantee that the subcommand will succeed and it might take an unexpected length of time, depending on what services  in the domain must be shutdown.
.RE

.sp
.ne 2
.mk
.na
\fB\fBrestore\fR \fIstate-file\fR\fR
.ad
.sp .6
.RS 4n
Restores a domain from a \fBvirsh save\fR state file. See the description of the \fBsave\fR subcommand.
.RE

.sp
.ne 2
.mk
.na
\fB\fBresume\fR \fIdomain\fR\fR
.ad
.sp .6
.RS 4n
Moves a domain out of the \fBpaused\fR state, making the domain eligible for scheduling by the underlying hypervisor.
.RE

.sp
.ne 2
.mk
.na
\fB\fBsave\fR \fIdomain\fR \fIstate-file\fR\fR
.ad
.sp .6
.RS 4n
Saves a running domain to a file \fIstate-file\fR, so that it can later be restored, using the \fBrestore\fR subcommand. Once saved, the domain will no longer be running on the system, thus the memory allocated for the domain will be free for the use of other domains.
.sp
Note that network connections present before the \fBsave\fR operation might be severed, as TCP timeouts might have expired.
.RE

.sp
.ne 2
.mk
.na
\fB\fBschedinfo\fR \fIdomain\fR\fR
.ad
.sp .6
.RS 4n
Show or set the scheduling parameters for the specified domain name, ID or UUID. \fBschedinfo\fR works only on running domains. This subcommand takes the following options:
.sp
.ne 2
.mk
.na
\fB\fB--weight\fR \fInumber\fR\fR
.ad
.RS 19n
.rt  
weight for credit scheduler
.RE

.sp
.ne 2
.mk
.na
\fB\fB--cap\fR \fInumber\fR\fR
.ad
.RS 19n
.rt  
cap for credit scheduler
.RE

.sp
.ne 2
.mk
.na
\fB\fB--set\fR\fR
.ad
.RS 19n
.rt  
Not implemented.
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBsetmaxmem\fR \fIdomain\fR \fIkilobytes\fR\fR
.ad
.sp .6
.RS 4n
Change the maximum memory allocation limit in the specified guest domain. The \fIkilobytes\fR parameter is the maximum memory limit in kilobytes. If this subcommand is applied to a running domain, the specified value applies only after the domain has been rebooted.
.RE

.sp
.ne 2
.mk
.na
\fB\fBsetmem\fR \fIdomain\fR \fIkilobytes\fR\fR
.ad
.sp .6
.RS 4n
Change the current memory allocation in the specified guest domain. The \fIkilobytes\fR parameter is the number of kilobytes of memory. Note that only paravirtualized domains support changing this value by means of the balloon driver, and it cannot exceed the maximum memory limit for the domain . A Solaris paravirtualized domain can never exceed the memory value set at boot time.
.RE

.sp
.ne 2
.mk
.na
\fB\fBsetvcpus\fR \fIdomain\fR \fIcount\fR\fR
.ad
.sp .6
.RS 4n
Change the number of virtual CPUs active in the specified guest domain. The \fIcount\fR parameter is the number of virtual CPUs. Only paravirtualized domains can dynamically change this value, and only up to the value that was set at boot time. To change the number of CPUs in a way that persists, you must change the value when the domain is not running.
.RE

.sp
.ne 2
.mk
.na
\fB\fBshutdown\fR \fIdomain\fR\fR
.ad
.sp .6
.RS 4n
Coordinates with the domain OS to perform graceful shutdown. The effect of this command is identical to the effect of running \fBinit 5\fR. There is no guarantee that the subcommand will succeed and it might take an unexpected length of time, depending on what services in the domain must be shutdown.
.RE

.sp
.ne 2
.mk
.na
\fB\fBstart\fR \fIdomain\fR\fR
.ad
.sp .6
.RS 4n
Start a (previously defined) inactive domain.
.RE

.sp
.ne 2
.mk
.na
\fB\fBsuspend\fR \fIdomain\fR\fR
.ad
.sp .6
.RS 4n
Suspend a domain. When in this state, a domain still consumes allocated resources, such as memory, but is not eligible for scheduling by the xVM hypervisor.
.RE

.sp
.ne 2
.mk
.na
\fB\fBttyconsole\fR\fR
.ad
.sp .6
.RS 4n
Return the pseudo-terminal used by the domain's serial console, if any.
.RE

.sp
.ne 2
.mk
.na
\fB\fBundefine\fR \fIdomain\fR\fR
.ad
.sp .6
.RS 4n
Undefine the configuration for the inactive domain which is specified by either its domain name or UUID.
.RE

.sp
.ne 2
.mk
.na
\fB\fBuri\fR\fR
.ad
.sp .6
.RS 4n
Return the URI of the \fBlibvirt\fR connection.
.RE

.sp
.ne 2
.mk
.na
\fB\fBvcpuinfo\fR \fIdomain\fR\fR
.ad
.sp .6
.RS 4n
Return basic information about the domain virtual CPUs.
.RE

.sp
.ne 2
.mk
.na
\fB\fBvcpupin\fR \fIdomain\fR \fIvcpu\fR \fIcpulist\fR\fR
.ad
.sp .6
.RS 4n
Pin domain VCPUs to the host physical CPUs. The \fIdomain\fR parameter is the domain name, ID, or \fIuuid\fR. The \fIvcpu\fR parameter is the VCPU number. The \fIcpulist\fR parameter is a list of host CPU numbers, separated by commas.
.sp
This subcommand applies only to running domains.
.RE

.sp
.ne 2
.mk
.na
\fB\fBvncdisplay\fR \fIdomain\fR\fR
.ad
.sp .6
.RS 4n
Output the IP address and port number for the VNC display.
.RE

.SS "Device Subcommands"
.sp
.LP
The following subcommands manipulate devices associated with domains. In the following descriptions, \fIdomain\fR can stand for either a symbolic domain name, a numeric domain id, or a UUID, any of which uniquely identify a domain.
.sp
.ne 2
.mk
.na
\fB\fBattach-device\fR \fIdomain\fR \fIfile\fR\fR
.ad
.sp .6
.RS 4n
Attach a device defined by the given XML file (\fIfile\fR) to the specified domain.
.RE

.sp
.ne 2
.mk
.na
\fB\fBattach-disk\fR \fIdomain\fR \fIsource\fR \fItarget\fR \fB--driver\fR \fIdriver\fR \fB--subdriver\fR \fIsubdriver\fR \fB--type\fR \fItype\fR \fB--mode\fR \fImode\fR\fR
.ad
.sp .6
.RS 4n
Attach a new or existing disk device to the domain. A disk device can be a removable media device, such as a CD or DVD drive. \fIsource\fR and \fItarget\fR are paths for the files and devices. \fIdriver\fR can be \fBfile\fR, \fBtap\fR or \fBphy\fR, depending on the kind of access. \fItype\fR can indicate \fBcdrom\fR or \fBfloppy\fR as an alternative to the default, \fBdisk\fR. \fImode\fR can specify either \fBreadonly\fR or \fBshareable\fR.
.sp
Note that in a Solaris Hardware-assisted Virtual Machine (HVM) domU, you must run \fBeject\fR(1) in the domU to unlock a removable-media device (for example, a CD device) before running the \fBattach-disk\fR subcommand.
.RE

.sp
.ne 2
.mk
.na
\fB\fBattach-interface\fR \fIdomain\fR \fItype\fR \fIsource\fR \fB--target\fR \fItarget\fR \fB--mac\fR \fImac\fR \fB--script\fR \fIscript\fR \fB--capped-bandwidth\fR \fIbandwidth\fR \fB--vlanid\fR \fIvid\fR\fR
.ad
.sp .6
.RS 4n
Attach a new network interface to the domain. \fItype\fR can be either \fBnetwork\fR, to indicate a physical network device, or \fBbridge\fR, to indicate a bridge to a device. \fIsource\fR indicates the source device. The \fB--target\fR option allows you to specify the target device in the guest. \fB--mac\fR allows you to specify the MAC address of the network interface. \fB--script\fR specifies a path to a script handling a bridge. \fB--capped-bandwidth\fR sets the bandwidth for this interface. Bandwidth should be specified as an integer with one of the scale suffixes (\fBK\fR, \fBM\fR, or \fBG\fR for Kbps, Mbps, or Gbps, respectively). Bandwidth will be rounded up to 1.2M, if the  input number is smaller than that. \fB--vlanid\fR sets the VLAN ID for this interface to \fIvid\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdetach-device\fR \fIdomain\fR \fIfile\fR\fR
.ad
.sp .6
.RS 4n
Detach a device defined by the given XML file (\fIfile\fR) from the specified domain. This subcommand takes the same type of XML descriptions as the subcommand \fBattach-device\fR.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdetach-disk\fR \fIdomain\fR \fItarget\fR\fR
.ad
.sp .6
.RS 4n
Detach a disk device from a domain. The target is the device as seen from the domain.
.RE

.sp
.ne 2
.mk
.na
\fB\fBdetach-interface\fR \fIdomain\fR \fItype\fR \fB--mac\fR \fImac\fR\fR
.ad
.sp .6
.RS 4n
Detach a network interface from a domain. \fItype\fR can be either \fBnetwork\fR, to indicate a physical network device, or \fBbridge\fR, to indicate a bridge to a device. It is recommended you use the \fB--mac\fR option to distinguish between the interfaces if more than one is present in the domain.
.RE

.SH EXAMPLES
.LP
\fBExample 1 \fRAdding an ISO File to a Solaris Domain as a Virtual Disk
.sp
.LP
The following command adds an ISO file to a paravirtualized Solaris domain as a virtual disk \fB/dev/dsk/c0t1d0\fR.

.sp
.in +2
.nf
# \fBvirsh attach-disk --type cdrom --driver file --mode readonly \e
domu-220 /data.iso xvdb\fR
.fi
.in -2
.sp

.LP
\fBExample 2 \fRMigrating a Domain, Relying on \fBsshd\fR Configuration
.sp
.LP
To migrate a domain named \fBdomu\fR to a machine named \fBfoo\fR over \fBssh\fR(1), first create the \fBssh\fR connection:

.sp
.in +2
.nf
# \fBssh -N -L 8003:localhost:8002 root@foo\fR
.fi
.in -2
.sp

.sp
.LP
\&...then run the \fBvirsh migrate\fR command:

.sp
.in +2
.nf
# \fBvirsh migrate --live domu xen:/// xenmigr://localhost:8003\fR
.fi
.in -2
.sp

.sp
.LP
This example assumes that TCP port forwarding is allowed by \fBsshd_config\fR(4). Note that this example does not require any modification of \fBxend\fR(1M) properties.

.LP
\fBExample 3 \fRMigrating a Domain, Relying on \fBxend\fR Configuration
.sp
.LP
The following \fBvirsh migrate\fR command requires the proper setting of the \fBxend\fR \fBxend-relocation-address\fR and \fBxend-relocation-hosts-allow\fR properties, as described in the \fBxend\fR(1M) man page.

.sp
.in +2
.nf
# \fBvirsh migrate --live domu xen:/// xenmigr://remotehost\fR
.fi
.in -2
.sp

.LP
\fBExample 4 \fRChanging a CD in a Solaris HVM Guest Domain
.sp
.LP
The following sequence of commands attaches a CD drive to a guest domain.

.sp
.LP
In the guest domain, eject the CD:

.sp
.in +2
.nf
solaris-hvm# \fBeject cdrom\fR
.fi
.in -2
.sp

.sp
.LP
Then, in the control domain, enter:

.sp
.in +2
.nf
# \fBvirsh attach-disk solaris-hvm --type cdrom --driver file \e
--mode readonly /isos/solaris.iso hdc\fR
.fi
.in -2
.sp

.sp
.LP
Finally, in the guest domain, load the CD:

.sp
.in +2
.nf
solaris-hvm# \fBrmformat\fR
.fi
.in -2
.sp

.LP
\fBExample 5 \fRDisplaying \fBdominfo\fR Output
.sp
.LP
The following command displays information about domain 0.

.sp
.in +2
.nf
# \fBvirsh dominfo Domain-0\fR

Id:             0
Name:           Domain-0
UUID:           00000000-0000-0000-0000-000000000000
OS Type:        linux
State:          running
CPU(s):         4
CPU time:       14436.6s
Max memory:     no limit
Used memory:    3145728 kB
.fi
.in -2
.sp

.sp
.LP
In the preceding output, note that the OS Type, \fBlinux\fR, indicates a paravirtualized domain.

.LP
\fBExample 6 \fRAttaching an Interface
.sp
.LP
The following command attaches a new network interface to a guest domain, connected to the NIC \fBe1000g0\fR, with an auto-generated MAC address (that is, the \fB--mac\fR option is omitted).

.sp
.in +2
.nf
# \fBvirsh attach-interface pv-domu bridge e1000g0\fR
.fi
.in -2
.sp

.LP
\fBExample 7 \fRAttaching a Disk
.sp
.LP
The following command attaches a disk generated by \fBvdiskadm\fR(1M) to a paravirtualized domain.

.sp
.in +2
.nf
# \fBvirsh attach-disk domu-223 /disks/data.vdisk xvdb --driver \e\fR
\fBtap --subdriver vdisk\fR
.fi
.in -2
.sp

.SH FILES
.sp
.ne 2
.mk
.na
\fB\fB/usr/share/lib/xml/rng/libvirt\fR\fR
.ad
.sp .6
.RS 4n
Relax-NG schemas for the XML formats used by \fBlibvirt\fR and \fBvirsh\fR.
.RE

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWlibvirt
_
Interface StabilityVolatile
.TE

.SH SEE ALSO
.sp
.LP
\fBinit\fR(1M), \fBvdiskadm\fR(1M), \fBxend\fR(1M), \fBxentop\fR(1M), \fBxm\fR(1M), \fBattributes\fR(5), \fBxVM\fR(5)
.sp
.LP
The \fBldm(1M)\fR man page shipped with the LDoms software.
.sp
.LP
The virtualization library (\fBlibvirt\fR) web site, at the date of this publication, at:
.sp
.in +2
.nf
http://www.libvirt.org
.fi
.in -2
.sp

.SH AUTHORS
.RS +4
.TP
.ie t \(bu
.el o
Andrew Puch, \fBapuch at redhat dot com\fR
.RE
.RS +4
.TP
.ie t \(bu
.el o
Daniel Veillard, \fBveillard at redhat dot com\fR
.RE
.sp
.LP
The preceding authors credit the \fBxm\fR man page authored by:
.RS +4
.TP
.ie t \(bu
.el o
Sean Dague, \fBsean at dague dot net\fR
.RE
.RS +4
.TP
.ie t \(bu
.el o
Daniel Stekloff, \fBdsteklof at us dot ibm dot com\fR
.RE
.SH NOTES
.sp
.LP
Terminology differs between \fBxm\fR(1M) and \fBvirsh\fR. In particular, the suspend and resume commands have different meanings.
.sp

.sp
.TS
tab();
cw(2.75i) cw(2.75i) 
lw(2.75i) lw(2.75i) 
.
virshxm
_
\fBsuspend\fR\fBpause\fR
\fBresume\fR\fBunpause\fR
\fBsave\fR\fBsuspend\fR (without output file argument)
\fBrestore\fR\fBresume\fR (without output file argument)
.TE

.sp
.LP
Terminology for the domain states differs between LDoms utilities, such as \fBldm\fR, and \fBvirsh\fR.
.sp

.sp
.TS
tab();
cw(2.75i) cw(2.75i) 
lw(2.75i) lw(2.75i) 
.
virshLDoms utility
_
\fBrunning\fR\fBactive\fR
\fBshut off\fR\fBinactive\fR
\fBin shutdown\fR\fBbound\fR
.TE

