'\" te
.\" Copyright (c) 1992, X/Open Company Limited  All Rights Reserved
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1995, Sun Microsystems, Inc.  All Rights Reserved
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH dd 1M "16 Sep 1996" "SunOS 5.11" "System Administration Commands"
.SH NAME
dd \- convert and copy a file
.SH SYNOPSIS
.LP
.nf
\fB/usr/bin/dd\fR [\fIoperand=value\fR]...
.fi

.SH DESCRIPTION
.sp
.LP
The
.B dd
utility copies the specified input file to the specified
output with possible conversions. The standard input and output are used by
default. The input and output block sizes may be specified to take advantage
of raw physical I/O. Sizes are specified in bytes; a number may end with
.BR k ,
.BR b ,
or
.B w
to specify multiplication by 1024, 512, or 2,
respectively. Numbers may also be separated by
.B x
to indicate
multiplication.
.sp
.LP
The
.B dd
utility reads the input one block at a time, using the
specified input block size.
.B dd
then processes the block of data
actually returned, which could be smaller than the requested block size.
\fBdd\fR applies any conversions that have been specified and writes the
resulting data to the output in blocks of the specified output block size.
.sp
.LP
\fBcbs\fR is used only if
.BR ascii ,
.BR asciib ,
.BR unblock ,
.BR ebcdic ,
.BR ebcdicb ,
.BR ibm ,
.BR ibmb ,
or
.BR block
conversion is specified. In the first two cases,
.B cbs
characters are
copied into the conversion buffer, any specified character mapping is done,
trailing blanks are trimmed, and a
.B NEWLINE
is added before sending the
line to output. In the last three cases, characters up to
.B NEWLINE
are
read into the conversion buffer and blanks are added to make up an output
record of size
.BR cbs .
\fBASCII\fR files are presumed to contain
\fBNEWLINE\fR characters. If \fBcbs\fR is unspecified or
.BR 0 ,
the
.BR ascii ,
.BR asciib ,
.BR ebcdic ,
.BR ebcdicb ,
.BR ibm ,
and
\fBibmb\fR options convert the character set without changing the input
file's block structure. The
.B unblock
and
.B block
options become a
simple file copy.
.sp
.LP
After completion,
.B dd
reports the number of whole and partial input
and output blocks.
.SH OPERANDS
.sp
.LP
The following operands are supported:
.sp
.ne 2
.mk
.na
\fBif=\fIfile\fR
.ad
.sp .6
.RS 4n
Specifies the input path. Standard input is the default.
.RE

.sp
.ne 2
.mk
.na
\fBof=\fIfile\fR
.ad
.sp .6
.RS 4n
Specifies the output path. Standard output is the default. If the
\fBseek=\fBexpr\fR conversion is not also specified, the output file will
be truncated before the copy begins, unless
.B conv=notrunc
is specified.
If \fBseek=\fBexpr\fR is specified, but \fBconv=notrunc\fR is not, the
effect of the copy will be to preserve the blocks in the output file over
which
.B dd
seeks, but no other portion of the output file will be
preserved. (If the size of the seek plus the size of the input file is less
than the previous size of the output file, the output file is shortened by
the copy.)
.RE

.sp
.ne 2
.mk
.na
\fBibs=\fIn\fR
.ad
.sp .6
.RS 4n
Specifies the input block size in
.I n
bytes (default is \fB512\fR).
.RE

.sp
.ne 2
.mk
.na
\fBobs=\fIn\fR
.ad
.sp .6
.RS 4n
Specifies the output block size in
.I n
bytes (default is \fB512\fR).
.RE

.sp
.ne 2
.mk
.na
\fBbs=\fIn\fR
.ad
.sp .6
.RS 4n
Sets both input and output block sizes to
.I n
bytes, superseding
\fBibs=\fR and \fBobs=\fR. If no conversion other than \fBsync\fR,\fB
noerror\fR, and \fBnotrunc\fR is specified, each input block is copied to
the output as a single block without aggregating short blocks.
.RE

.sp
.ne 2
.mk
.na
\fBcbs=\fIn\fR
.ad
.sp .6
.RS 4n
Specifies the conversion block size for
.B block
and
.B unblock
in
bytes by
.I n
(default is
.BR 0 ).
If
.B cbs=
is omitted or given a
value of
.BR 0 ,
using
.B block
or
.B unblock
produces unspecified
results.
.sp
This option is used only if
.B ASCII
or
.B EBCDIC
conversion is
specified. For the
.B ascii
and
.B asciib
operands, the input is
handled as described for the
.B unblock
operand except that characters
are converted to
.B ASCII
before the trailing
.B SPACE
characters are
deleted. For the
.BR ebcdic ,
.BR ebcdicb ,
.BR ibm ,
and
.BR ibmb
operands, the input is handled as described for the
.B block
operand
except that the characters are converted to
.B EBCDIC
or IBM
.BR EBCDIC
after the trailing
.B SPACE
characters are added.
.RE

.sp
.ne 2
.mk
.na
\fBfiles=\fIn\fR
.ad
.sp .6
.RS 4n
Copies and concatenates
.I n
input files before terminating (makes sense
only where input is a magnetic tape or similar device).
.RE

.sp
.ne 2
.mk
.na
\fBskip=\fIn\fR
.ad
.sp .6
.RS 4n
Skips
.I n
input blocks (using the specified input block size) before
starting to copy. On seekable files, the implementation reads the blocks or
seeks past them. On non-seekable files, the blocks are read and the data is
discarded.
.RE

.sp
.ne 2
.mk
.na
\fBiseek=\fIn\fR
.ad
.sp .6
.RS 4n
Seeks
.I n
blocks from beginning of input file before copying
(appropriate for disk files, where
.B skip
can be incredibly slow).
.RE

.sp
.ne 2
.mk
.na
\fBoseek=\fIn\fR
.ad
.sp .6
.RS 4n
Seeks
.I n
blocks from beginning of output file before copying.
.RE

.sp
.ne 2
.mk
.na
\fBseek=\fIn\fR
.ad
.sp .6
.RS 4n
Skips
.I n
blocks (using the specified output block size) from beginning
of output file before copying. On non-seekable files, existing blocks are
read and space from the current end-of-file to the specified offset, if any,
is filled with null bytes. On seekable files, the implementation seeks to
the specified offset or reads the blocks as described for non-seekable
files.
.RE

.sp
.ne 2
.mk
.na
\fBcount=\fIn\fR
.ad
.sp .6
.RS 4n
Copies only
.I n
input blocks.
.RE

.sp
.ne 2
.mk
.na
\fBconv=\fIvalue\fR[\fB,\fIvalue\fR.\|.\|.\|]\fR
.ad
.sp .6
.RS 4n
Where \fIvalue\fRs are comma-separated symbols from the following list:
.sp
.ne 2
.mk
.na
.B ascii
.ad
.RS 11n
.rt
Converts
.B EBCDIC
to
.BR ASCII .
.RE

.sp
.ne 2
.mk
.na
.B asciib
.ad
.RS 11n
.rt
Converts
.B EBCDIC
to
.B ASCII
using
.BR BSD "-compatible character"
translations.
.RE

.sp
.ne 2
.mk
.na
.B ebcdic
.ad
.RS 11n
.rt
Converts
.B ASCII
to
.BR EBCDIC .
If converting fixed-length
\fBASCII\fR records without NEWLINEs, sets up a pipeline with \fBdd
conv=unblock\fR beforehand.
.RE

.sp
.ne 2
.mk
.na
.B ebcdicb
.ad
.RS 11n
.rt
Converts
.B ASCII
to
.B EBCDIC
using
.BR BSD "-compatible character"
translations. If converting fixed-length
.B ASCII
records without
\fBNEWLINE\fRs, sets up a pipeline with \fBdd conv=unblock\fR beforehand.
.RE

.sp
.ne 2
.mk
.na
.B ibm
.ad
.RS 11n
.rt
Slightly different map of
.B ASCII
to
.BR EBCDIC .
If converting
fixed-length
.B ASCII
records without
.BR NEWLINE "s, sets up a pipeline"
with
.B "dd conv=unblock"
beforehand.
.RE

.sp
.ne 2
.mk
.na
.B ibmb
.ad
.RS 11n
.rt
Slightly different map of
.B ASCII
to
.B EBCDIC
using
\fBBSD\fR-compatible character translations. If converting fixed-length
\fBASCII\fR records without \fBNEWLINE\fRs, sets up a pipeline with \fBdd
conv=unblock\fR beforehand.
.RE

The
.B ascii
(or
.BR asciib ),
\fBebcdic\fR (or
.BR ebcdicb ),
and
\fBibm\fR (or
.BR ibmb )
values are mutually exclusive.
.sp
.ne 2
.mk
.na
.B block
.ad
.RS 11n
.rt
Treats the input as a sequence of
.BR NEWLINE "-terminated or"
\fBEOF\fR-terminated variable-length records independent of the input block
boundaries. Each record is converted to a record with a fixed length
specified by the conversion block size. Any
.B NEWLINE
character is
removed from the input line.
.B SPACE
characters are appended to lines
that are shorter than their conversion block size to fill the block. Lines
that are longer than the conversion block size are truncated to the largest
number of characters that will fit into that size. The number of truncated
lines is reported.
.RE

.sp
.ne 2
.mk
.na
.B unblock
.ad
.RS 11n
.rt
Converts fixed-length records to variable length. Reads a number of bytes
equal to the conversion block size (or the number of bytes remaining in the
input, if less than the conversion block size), delete all trailing
\fBSPACE\fR characters, and append a \fBNEWLINE\fR character.
.RE

The 
.B block
and
.B unblock
values are mutually exclusive.
.sp
.ne 2
.mk
.na
.B lcase
.ad
.RS 9n
.rt
Maps upper-case characters specified by the
.B LC_CTYPE
keyword
\fBtolower\fR to the corresponding lower-case character. Characters for
which no mapping is specified are not modified by this conversion.
.RE

.sp
.ne 2
.mk
.na
.B ucase
.ad
.RS 9n
.rt
Maps lower-case characters specified by the
.B LC_CTYPE
keyword
\fBtoupper\fR to the corresponding upper-case character. Characters for
which no mapping is specified are not modified by this conversion.
.RE

The
.B lcase
and
.B ucase
symbols are mutually exclusive.
.sp
.ne 2
.mk
.na
.B swab
.ad
.RS 11n
.rt
Swaps every pair of input bytes. If the current input record is an odd
number of bytes, the last byte in the input record is ignored.
.RE

.sp
.ne 2
.mk
.na
.B noerror
.ad
.RS 11n
.rt
Does not stop processing on an input error. When an input error occurs, a
diagnostic message is written on standard error, followed by the current
input and output block counts in the same format as used at completion. If
the
.B sync
conversion is specified, the missing input is replaced with
null bytes and processed normally. Otherwise, the input block will be
omitted from the output.
.RE

.sp
.ne 2
.mk
.na
.B notrunc
.ad
.RS 11n
.rt
Does not truncate the output file. Preserves blocks in the output file not
explicitly written by this invocation of
.BR dd .
(See also the preceding
\fBof=\fIfile\fR operand.)
.RE

.sp
.ne 2
.mk
.na
.B sync
.ad
.RS 11n
.rt
Pads every input block to the size of the
.B ibs=
buffer, appending null
bytes. (If either
.B block
or
.B unblock
is also specified, appends
\fBSPACE\fR characters, rather than null bytes.)
.RE

.RE

.sp
.LP
If operands other than
.B conv=
are specified more than once, the last
specified \fBoperand=\fIvalue\fR is used.
.sp
.LP
For the
.BR bs= ,
.BR cbs= ,
.BR ibs= ,
and
.B obs=
operands, the
application must supply an expression specifying a size in bytes. The
expression,
.BR expr ,
can be:
.RS +4
.TP
1.
a positive decimal number
.RE
.RS +4
.TP
2.
a positive decimal number followed by
.BR k ,
specifying multiplication by
1024
.RE
.RS +4
.TP
3.
a positive decimal number followed by
.BR b ,
specifying multiplication by
512
.RE
.RS +4
.TP
4.
two or more positive decimal numbers (with or without
.B k
or
.BR b )
separated by
.BR x ,
specifying the product of the indicated values.
.RE
.sp
.LP
All of the operands will be processed before any input is read.
.SH USAGE
.sp
.LP
See
.BR largefile (5)
for the description of the behavior of
.B dd
when
encountering files greater than or equal to 2 Gbyte ( 2^31 bytes).
.SH EXAMPLES
.LP
\fBExample 1\fR Copying from one tape drive to another
.sp
.LP
The following example copies from tape drive
.B 0
to tape drive
.BR 1 ,
using a common historical device naming convention.

.sp
.in +2
.nf
example% \fBdd if=/dev/rmt/0h  of=/dev/rmt/1h\fR
.fi
.in -2
.sp

.LP
\fBExample 2\fR Stripping the first 10 bytes from standard input
.sp
.LP
The following example strips the first 10 bytes from standard input:

.sp
.in +2
.nf
example% \fBdd ibs=10  skip=1\fR
.fi
.in -2
.sp

.LP
\fBExample 3\fR Reading a tape into an ASCII file
.sp
.LP
This example reads an
.B EBCDIC
.RB "tape blocked ten 80-byte" " EBCDIC"
card images per block into the
.B ASCII
file
.BR x :

.sp
.in +2
.nf
example% \fBdd if=/dev/tape of=x ibs=800 cbs=80 conv=ascii,lcase\fR
.fi
.in -2
.sp

.LP
\fBExample 4\fR Using conv=sync to write to tape
.sp
.LP
The following example uses
.B conv=sync
when writing to a tape:

.sp
.in +2
.nf
example% \fBtar cvf - . | compress | dd obs=1024k of=/dev/rmt/0 conv=sync\fR
.fi
.in -2
.sp

.SH ENVIRONMENT VARIABLES
.sp
.LP
See
.BR environ (5)
for descriptions of the following environment
variables that affect the execution of
.BR dd :
.BR LANG ,
.BR LC_ALL ,
.BR LC_CTYPE ,
.BR LC_MESSAGES ,
and
.BR NLSPATH .
.SH EXIT STATUS
.sp
.LP
The following exit values are returned:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 6n
.rt
The input file was copied successfully.
.RE

.sp
.ne 2
.mk
.na
.B >0
.ad
.RS 6n
.rt
An error occurred.
.RE

.sp
.LP
If an input error is detected and the
.B noerror
conversion has not been
specified, any partial output block will be written to the output file, a
diagnostic message will be written, and the copy operation will be
discontinued. If some other error is detected, a diagnostic message will be
written and the copy operation will be discontinued.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
_
Interface StabilityStandard
.TE

.SH SEE ALSO
.sp
.LP
.BR cp (1),
.BR sed (1),
.BR tr (1),
.BR attributes (5),
.BR environ (5),
\fBlargefile\fR(5), \fBstandards\fR(5)
.SH DIAGNOSTICS
.sp
.ne 2
.mk
.na
\fBf+p records in(out)\fR
.ad
.RS 23n
.rt
numbers of full and partial blocks read(written)
.RE

.SH NOTES
.sp
.LP
Do not use
.B dd
to copy files between file systems having different
block sizes.
.sp
.LP
Using a  blocked device to copy a file will result in extra nulls being
added to the file to pad the final block to the block boundary.
.sp
.LP
When 
.B dd
reads from a pipe, using the 
.B ibs=X
and 
.BR obs=Y
operands, the output will always be blocked in chunks of size Y. When
\fBbs=Z\fR is used, the output blocks will be whatever was available to be
read from the pipe at the time.
.sp
.LP
When using
.B dd
to copy files to a tape device, the file size must be a
multiple of the device sector size (for example, 512 Kbyte).  To  copy files
of arbitrary size to a tape device, use 
.BR tar (1)
or 
.BR cpio (1).
.sp
.LP
For
.BR SIGINT ,
\fBdd\fR writes status information to standard error
before exiting. It takes the standard action for all other signals.
