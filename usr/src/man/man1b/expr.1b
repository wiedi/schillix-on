'\" te
.\" Copyright (c) 2000, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH expr 1B "6 Jun 2000" "SunOS 5.11" "SunOS/BSD Compatibility Package Commands"
.SH NAME
expr \- evaluate arguments as a logical, arithmetic, or string expression
.SH SYNOPSIS
.LP
.nf
\fB/usr/ucb/expr\fR \fIargument\fR...
.fi

.SH DESCRIPTION
.sp
.LP
The
.B expr
utility evaluates expressions as specified by its arguments.
After evaluation, the result is written on the standard output. Each token of
the
expression is a separate argument, so terms of the expression must be separated
by blanks. Characters special to the shell must be escaped. Note:
.B 0
is
returned to indicate a zero value, rather than the null string. Strings
containing blanks or other special characters should be quoted. Integer-valued
arguments may be preceded by a unary minus sign. Internally, integers are
treated
as 32-bit, two's-complement numbers.
.sp
.LP
The operators and keywords are listed below. Characters that need to be escaped
.RB "are preceded by `" \e \&'.
The list is in order of increasing precedence,
with
equal precedence operators grouped within
.B {\|}
symbols.
.sp
.ne 2
.mk
.na
\fIexpr\fB \e| \fIexpr\fR
.ad
.sp .6
.RS 4n
Returns the evaluation of the first
.I expr
if it is neither
.I NULL
nor
.BR 0 ;
otherwise, returns the evaluation of the second
.I expr
if it is not
.IR NULL ;
otherwise,
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
\fIexpr\fB \e& \fIexpr\fR
.ad
.sp .6
.RS 4n
Returns the first
.I expr
if neither
.I expr
is
.I NULL
or
.BR 0 ,
otherwise returns
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
\fIexpr\fR {
.B =,
\e\fB,\fR \e , \fB\e<\fR,\fB \e<=\fR,\fB !=\fR }
.I expr
.ad
.sp .6
.RS 4n
Returns the result of an integer comparison if both arguments are integers,
otherwise returns the result of a lexical comparison.
.RE

.sp
.ne 2
.mk
.na
\fIexpr\fR { \fB+\fR,\fB \(mi\fR } \fIexpr\fR
.ad
.sp .6
.RS 4n
Addition or subtraction of integer-valued arguments.
.RE

.sp
.ne 2
.mk
.na
\fIexpr\fR { \fB\e\fR,\fB /\fR,\fB %\fR } \fBexpr\fR
.ad
.sp .6
.RS 4n
Multiplication, division, or remainder of the integer-valued arguments.
.RE

.sp
.ne 2
.mk
.na
\fIstring\fB : \fIregular-expression\fR
.ad
.br
.na
.BI match " string regular-expression"
.ad
.sp .6
.RS 4n
The two forms of the matching operator above are synonymous. The matching
operators
.B :
and
.B match
compare the first argument with the second
argument which must be a regular expression. Regular expression syntax is the
same as that of \fBregexp\fR(5), except that all patterns are "anchored" (treated
as if they begin with
.BR ^ )
and therefore
.B ^
is not a special character,
in that context. Normally, the matching operator returns the number of
characters
matched (\fB0\fR on failure). Alternatively, the \fB\e\|.\|.\|.\|\e\fR pattern
symbols can be used to return a portion of the first argument.
.RE

.sp
.ne 2
.mk
.na
.B substr
.I string integer-1 integer-2
.ad
.sp .6
.RS 4n
Extracts the substring of
.I string
starting at position
.I integer-1
and
of length
.I integer-2
characters. If
.I integer-1
has a value greater than
the length of
.IR string ,
.B expr
returns a null string. If you try to
extract more characters than there are in
.IR string ,
.B expr
returns all
the remaining characters from
.IR string .
Beware of using negative values for
either
.I integer-1
or
.I integer-2
as
.B expr
tends to run forever in
these cases.
.RE

.sp
.ne 2
.mk
.na
.B index
.I string character-list
.ad
.sp .6
.RS 4n
Reports the first position in
.I string
at which any one of the characters in
.I character-list
matches a character in
.IR string .
.RE

.sp
.ne 2
.mk
.na
.B length
.I string
.ad
.sp .6
.RS 4n
Returns the length (that is, the number of characters) of
.IR string .
.RE

.sp
.ne 2
.mk
.na
.B ( expr )
.ad
.sp .6
.RS 4n
Parentheses may be used for grouping.
.RE

.SH EXAMPLES
.LP
.B Example 1
Adding an integer to a shell variable
.sp
.LP
Add 1 to the shell variable
.BR a .

.sp
.in +2
.nf
\fBa='expr $a + 1'\fR
.fi
.in -2
.sp

.LP
.B Example 2
Returning a path name segment
.sp
.LP
Return the last segment of a path name (that is, the filename part). Watch out
for
.B /
alone as an argument:
.B expr
will take it as the division
operator (see
.B BUGS
below).

.sp
.in +2
.nf
\fB# 'For $a equal to either "/usr/abc/file" or just "file"'
expr  $a  :  '.*/\e  \e  $a\fR
.fi
.in -2
.sp

.LP
.B Example 3
Using // characters to simplify the expression
.sp
.LP
The addition of the
.B //
characters eliminates any ambiguity about the
division operator and simplifies the whole expression.

.sp
.in +2
.nf
\fB# A better representation of example 2.
expr  //$a  :  '.*/\e\fR
.fi
.in -2
.sp

.LP
.B Example 4
Returning the value of a variable
.sp
.LP
Returns the number of characters in
.BR $VAR .

.sp
.in +2
.nf
\fBexpr  $VAR  :  '.*'\fR
.fi
.in -2
.sp

.SH EXIT STATUS
.sp
.LP
.B expr
returns the following exit codes:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 5n
.rt
If the expression is neither
.I NULL
nor
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
.B 1
.ad
.RS 5n
.rt
If the expression
.I "is NULL"
or
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
.B 2
.ad
.RS 5n
.rt
For invalid expressions.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWscpu
.TE

.SH SEE ALSO
.sp
.LP
.BR sh (1),
.BR test (1),
.BR attributes (5),
.BR regexp (5)
.SH DIAGNOSTICS
.sp
.ne 2
.mk
.na
.B syntax error
.ad
.RS 24n
.rt
for operator/operand errors
.RE

.sp
.ne 2
.mk
.na
.B non-numeric argument
.ad
.RS 24n
.rt
if arithmetic is attempted on such a string
.RE

.sp
.ne 2
.mk
.na
.B division by zero
.ad
.RS 24n
.rt
if an attempt to divide by zero is made
.RE

.SH BUGS
.sp
.LP
After argument processing by the shell,
.B expr
cannot tell the difference
between an operator and an operand except by the value. If
.B $a
is an
.BR = ,
the command:
.sp
.in +2
.nf
\fBexpr  $a  =  '='\fR
.fi
.in -2
.sp

.sp
.LP
looks like:
.sp
.in +2
.nf
\fBexpr  =  =  =\fR
.fi
.in -2
.sp

.sp
.LP
as the arguments are passed to
.B expr
(and they will all be taken as the
.B =
operator). The following works:
.sp
.in +2
.nf
\fBexpr  X$a  =  X=\fR
.fi
.in -2
.sp

.sp
.LP
Note: the
.BR match ,
.BR substr ,
.BR length ,
and
.B index
operators
cannot themselves be used as ordinary strings.  That is, the expression:
.sp
.in +2
.nf
example% \fBexpr index expurgatorious length\fR
syntax error
example%
.fi
.in -2
.sp

.sp
.LP
.RB "generates the `" "syntax error" "' message as shown instead of the value " 1 
as you might expect.
