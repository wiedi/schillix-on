'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH getauevent 3BSM "25 Jun 2008" "SunOS 5.11" "Security and Auditing Library Functions"
.SH NAME
getauevent, getauevnam, getauevnum, getauevnonam, setauevent, endauevent,
getauevent_r, getauevnam_r, getauevnum_r \- get audit_event entry
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lbsm\fR \fB -lsocket \fR \fB -lnsl \fR  [ \fIlibrary\fR.\|.\|. ]
#include <sys/param.h>
#include <bsm/libbsm.h>

\fBstruct au_event_ent *\fBgetauevent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBstruct au_event_ent *\fBgetauevnam\fR(\fBchar *\fIname\fR);
.fi

.LP
.nf
\fBstruct au_event_ent *\fBgetauevnum\fR(\fBau_event_t\fR \fIevent_number\fR);
.fi

.LP
.nf
\fBau_event_t\fR \fBgetauevnonam\fR(\fBchar *\fIevent_name\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsetauevent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBvoid\fR \fBendauevent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBstruct au_event_ent *\fBgetauevent_r\fR(\fBau_event_ent_t *\fIe\fR);
.fi

.LP
.nf
\fBstruct au_event_ent *\fBgetauevnam_r\fR(\fBau_event_ent_t *\fIe\fR, \fBchar *\fIname\fR);
.fi

.LP
.nf
\fBstruct au_event_ent *\fBgetauevnum_r\fR(\fBau_event_ent_t *\fIe\fR,
     \fBau_event_t\fR \fIevent_number\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions document the programming interface for obtaining entries
from the
.BR audit_event (4)
file. The
.BR getauevent() ,
.BR getauevnam() ,
.BR getauevnum() ,
.BR getauevent() ,
.BR getauevnam() ,
and
.B getauevnum()
functions each return a pointer to
an
.B audit_event
structure.
.sp
.LP
The
.B getauevent()
and
.B getauevent_r()
functions enumerate
.B audit_event
entries. Successive calls to these functions return either
successive
.B audit_event
entries or
.IR NULL .
.sp
.LP
The
.B getauevnam()
and
.B getauevnam_r()
functions search for an
.B audit_event
entry with
.IR event_name .
.sp
.LP
The
.B getauevnum()
and
.B getauevnum_r()
functions search for an
.B audit_event
entry with
.IR event_number .
.sp
.LP
The
.B getauevnonam()
function searches for an
.B audit_event
entry
with
.I event_name
and returns the corresponding event number.
.sp
.LP
The
.B setauevent()
function ``rewinds'' to the beginning of the
enumeration of
.B audit_event
entries.  Calls to
.BR getauevnam() ,
.BR getauevnum() ,
.BR getauevnonum() ,
.BR getauevnam_r() ,
or
.B getauevnum_r()
can leave the enumeration in an indeterminate state. The
.B setauevent()
function should be called before the first call to
.B getauevent()
or
.BR getauevent_r() .
.sp
.LP
The
.B endauevent()
function can be called to indicate that
.B audit_event
processing is complete. The system can then close any open
.B audit_event
file, deallocate storage, and so forth.
.sp
.LP
The
.BR getauevent_r() ,
.BR getauevnam_r() ,
and
.BR getauevnum_r()
functions each take an argument
.IR e ,
which is a pointer to an
.BR au_event_ent_t .
This pointer is returned on a successful function call.
To assure there is enough space for the information returned, the
applications programmer should be sure to allocate
.BR AU_EVENT_NAME_MAX
and
.B AU_EVENT_DESC_MAX
bytes for the
.B ae_name
and
.BR ac_desc
elements of the
.B au_event_ent_t
data structure.
.sp
.LP
The internal representation of an
.B audit_event
entry is an
.B au_event_ent
structure defined in <\fBbsm/libbsm.h\fR> with the
following members:
.sp
.in +2
.nf
au_event_t      ae_number
char            *ae_name;
char            *ae_desc*;
au_class_t      ae_class;
.fi
.in -2

.SH RETURN VALUES
.sp
.LP
The
.BR getauevent() ,
.BR getauevnam() ,
.BR getauevnum() ,
.BR getauevent_r() ,
.BR getauevnam_r() ,
and
.BR getauevnum_r()
functions return a pointer to a
.B au_event_ent
structure if the requested
entry is successfully located. Otherwise they return
.IR NULL .
.sp
.LP
The
.B getauevnonam()
function returns an event number of type
.B au_event_t
if it successfully enumerates an entry. Otherwise it returns
.IR NULL ,
indicating it could not find the requested event name.
.SH FILES
.sp
.ne 2
.mk
.na
.B /etc/security/audit_event
.ad
.RS 29n
.rt
file that maps audit event numbers to audit event names
.RE

.sp
.ne 2
.mk
.na
.B /etc/passwd
.ad
.RS 29n
.rt
file that stores user-ID to username mappings
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe with exceptions
.TE

.sp
.LP
The
.BR getauevent() ,
.BR getauevnam() ,
and
.BR getauevnum()
functions are Unsafe. The equivalent functions
.BR getauevent_r() ,
.BR getauevnam_r() ,
and
.B getauevnum_r()
provide the same functionality
and an MT-Safe function call interface.
.SH SEE ALSO
.sp
.LP
.BR bsmconv (1M),
.BR getauclassent (3BSM),
.BR getpwnam (3C),
.BR audit_class (4),
.BR audit_event (4),
.BR passwd (4),
.BR attributes (5)
.SH NOTES
.sp
.LP
All information for the
.BR getauevent() ,
.BR getauevnam() ,
and
.B getauevnum()
functions is contained in a static area, so it must be
copied if it is to be saved.
.sp
.LP
The functionality described on this manual page is available only if the
Solaris Auditing has been enabled.  See \fBbsmconv\fR(1M) for more
information.
