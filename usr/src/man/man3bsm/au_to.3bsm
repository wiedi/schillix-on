'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH au_to 3BSM "31 Mar 2005" "SunOS 5.11" "Security and Auditing Library Functions"
.SH NAME
au_to, au_to_arg, au_to_arg32, au_to_arg64, au_to_attr, au_to_cmd,
au_to_data, au_to_groups, au_to_in_addr, au_to_ipc, au_to_iport, au_to_me,
au_to_newgroups, au_to_opaque, au_to_path, au_to_process, au_to_process_ex,
au_to_return, au_to_return32, au_to_return64, au_to_socket, au_to_subject,
au_to_subject_ex, au_to_text \- create audit record tokens
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lbsm\fR \fB -lsocket \fR \fB -lnsl \fR  [ \fIlibrary\fR.\|.\|. ]
#include <sys/types.h>
#include <sys/vnode.h>
#include <netinet/in.h>
#include <bsm/libbsm.h>

\fBtoken_t *\fBau_to_arg\fR(\fBchar\fR \fIn\fR, \fBchar *\fItext\fR, \fBuint32_t\fR \fIv\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_arg32\fR(\fBchar\fR \fIn\fR, \fBchar *\fItext\fR, \fBuint32_t\fR \fIv\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_arg64\fR(\fBchar\fR \fIn\fR, \fBchar *\fItext\fR, \fBuint64_t\fR \fIv\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_attr\fR(\fBstruct vattr *\fIattr\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_cmd\fR(\fBuint_t\fR \fIargc\fR, \fBchar **\fIargv\fR, \fBchar **\fIenvp\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_data\fR(\fBchar\fR \fIunit_print\fR, \fBchar\fR \fIunit_type\fR, \fBchar\fR \fIunit_count\fR,
     \fBchar *\fIp\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_groups\fR(\fBint *\fIgroups\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_in_addr\fR(\fBstruct in_addr *\fIinternet_addr\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_ipc\fR(\fBchar\fR \fItype\fR, \fBint\fR \fIid\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_iport\fR(\fBu_short_t\fR \fIiport\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_me\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_newgroups\fR(\fBint\fR \fIn\fR, \fBgid_t *\fIgroups\fR);
.fi

.LP
.nf
\fBtoken_t\fR \fB*au_to_opaque\fR(\fBchar *\fIdata\fR, \fBshort\fR \fIbytes\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_path\fR(\fBchar *\fIpath\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_process\fR(\fBau_id_t\fR \fIauid\fR, \fBuid_t\fR \fIeuid\fR, \fBgid_t\fR \fIegid\fR,
     \fBuid_t\fR \fIruid\fR, \fBgid_t\fR \fIrgid\fR, \fBpid_t\fR \fIpid\fR, \fBau_asid_t\fR \fIsid\fR, \fBau_tid_t *\fItid\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_process_ex\fR(\fBau_id_t\fR \fIauid\fR, \fBuid_t\fR \fIeuid\fR, \fBgid_t\fR \fIegid\fR,
     \fBuid_t\fR \fIruid\fR, \fBgid_t\fR \fIrgid\fR, \fBpid_t\fR \fIpid\fR, \fBau_asid_t\fR \fIsid\fR, \fBau_tid_addr_t *\fItid\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_return\fR(\fBchar\fR \fInumber\fR, \fBuin32t_t\fR \fIvalue\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_return32\fR(\fBchar\fR \fInumber\fR, \fBuin32t_t\fR \fIvalue\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_return64\fR(\fBchar\fR \fInumber\fR, \fBuin64t_t\fR \fIvalue\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_socket\fR(\fBstruct oldsocket *\fIso\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_subject\fR(\fBau_id_t\fR \fIauid\fR, \fBuid_t\fR \fIeuid\fR, \fBgid_t\fR \fIegid\fR,
     \fBuid_t\fR \fIruid\fR, \fBgid_t\fR \fIrgid\fR, \fBpid_t\fR \fIpid\fR, \fBau_asid_t\fR \fIsid\fR, \fBau_tid_t *\fItid\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_subject_ex\fR(\fBau_id_t\fR \fIauid\fR, \fBuid_t\fR \fIeuid\fR, \fBgid_t\fR \fIegid\fR,
     \fBuid_t\fR \fIruid\fR, \fBgid_t\fR \fIrgid\fR, \fBpid_t\fR \fIpid\fR, \fBau_asid_t\fR \fIsid\fR, \fBau_tid_addr_t *\fItid\fR);
.fi

.LP
.nf
\fBtoken_t *\fBau_to_text\fR(\fBchar *\fItext\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.BR au_to_arg() ,
.BR au_to_arg32() ,
and
.BR au_to_arg64()
functions format the data in \fIv\fR into an "argument token". The \fIn\fR
argument indicates the argument number. The
.I text
argument is a
null-terminated string describing the argument.
.sp
.LP
The
.B au_to_attr()
function formats the data pointed to by
.IR attr
into a "vnode attribute token".
.sp
.LP
The
.B au_to_cmd()
function formats the data pointed to by
.IR argv
into a "command token". A command token reflects a command and its
parameters as entered. For example, the
.BR pfexec (1)
utility uses
.B au_to_cmd()
to record the command and arguments it reads from the
command line.
.sp
.LP
The
.B au_to_data()
function formats the data pointed to by
.I p
into
an "arbitrary data token". The \fIunit_print\fR parameter determines the
preferred display base of the data and is one of
.BR AUP_BINARY ,
.BR AUP_OCTAL ,
.BR AUP_DECIMAL ,
.BR AUP_HEX ,
or
.BR AUP_STRING .
The
.I unit_type
parameter defines the basic unit of data and is one of
.BR AUR_BYTE ,
.BR AUR_CHAR ,
.BR AUR_SHORT ,
.BR AUR_INT ,
or
.BR AUR_LONG .
The
.I unit_count
parameter specifies the number of basic
data units to be used and must be positive.
.sp
.LP
The
.B au_to_groups()
function formats the array of 16 integers pointed
to by \fIgroups\fR into a "groups token". The \fBau_to_newgroups()\fR
function (see below) should be used in place of this function.
.sp
.LP
The
.B au_to_in_addr()
function formats the data pointed to by
\fIinternet_addr\fR into an "internet address token".
.sp
.LP
The
.B au_to_ipc()
function formats the data in the
.I id
parameter
into an "interprocess communications \fBID\fR token".
.sp
.LP
The
.B au_to_iport()
function formats the data pointed to by
.IR iport
into an "ip port address token".
.sp
.LP
The
.B au_to_me()
function collects audit information from the current
process and creates  a "subject token" by calling  \fBau_to_subject()\fR.
.sp
.LP
The
.B au_to_newgroups()
function formats the array of
.I n
integers
pointed to by \fIgroups\fR into a "newgroups token". This function should be
used in place of
.BR au_to_groups() .
.sp
.LP
The
.B au_to_opaque()
function formats the
.I bytes
bytes pointed to
by \fIdata\fR into an "opaque token". The value of \fIsize\fR must be
positive.
.sp
.LP
The
.B au_to_path()
function formats the path name pointed to by
.I path
into a ``path token.''
.sp
.LP
The
.B au_to_process()
function formats an
.I auid
(audit user
.BR ID ),
an
.I euid
(effective user
.BR ID ),
an
.I egid
(effective
group
.BR ID ),
a
.I ruid
(real user
.BR ID ),
a
.I rgid
(real group
.BR ID ),
a
.I pid
(process
.BR ID ),
an
.I sid
(audit session
.BR ID ),
and a
.I tid
(audit terminal
.B ID
containing an IPv4 IP
address), into a "process token".  A process token should be used when the
process is the object of an action (ie. when the process is the receiver of
a signal). The
.B au_to_process_ex()
function (see below) should be used
in place of this function.
.sp
.LP
The
.B au_to_process_ex()
function formats an
.I auid
(audit user
.B ID),
an
.I euid
(effective user
.B ID),
an
.I egid
(effective
group
.B ID),
a
.I ruid
(real user
.B ID),
a
.I rgid
(real group
.B ID),
a
.I pid
(process
.B ID),
an
.I sid
(audit session
.B ID),
and a
.I tid
(audit terminal \fBID containing an IPv4 or IPv6
IP address),\fR into a "process token".  A process token should be used when
the process is the object of an action (that is, when the process is the
receiver of a signal). This function should be used in place of
.BR au_to_process() .
.sp
.LP
The
.BR au_to_return() ,
.BR au_to_return32() ,
and
.B au_to_return64()
functions format an error number
.I number
and a
return value \fIvalue\fR into a "return value token".
.sp
.LP
The
.B au_to_socket()
function format the data pointed to by
.IR so
into a ``socket token.''
.sp
.LP
The
.B au_to_subject()
function formats an
.I auid
(audit user
.BR ID ),
an
.I euid
(effective user
.BR ID ),
an
.I egid
(effective
group
.BR ID ),
a
.I ruid
(real user
.BR ID ),
an
.I rgid
(real
group
.BR ID ),
a
.I pid
(process
.BR ID ),
an
.I sid
(audit session
.BR ID ),
an
.I tid
(audit terminal
.B ID
containing an IPv4 IP
address), into a "subject token". The \fBau_to_subject_ex()\fR function (see
below) should be used in place of this function.
.sp
.LP
The
.B au_to_subject_ex()
function formats an
.I auid
(audit user
.B ID),
an
.I euid
(effective user
.B ID),
an
.I egid
(effective
group
.B ID),
a
.I ruid
(real user
.B ID),
an
.I rgid
(real
group
.B ID),
a
.I pid
(process
.B ID),
an
.I sid
(audit session
.B ID),
an
.I tid
(audit terminal \fBID containing an IPv4 or IPv6 IP
address),\fR into a "subject token". This function should be used in place
of
.BR au_to_subject() .
.sp
.LP
The
.B au_to_text()
function formats the null-terminated string pointed
to by \fItext\fR into a "text token".
.SH RETURN VALUES
.sp
.LP
These functions return
.I NULL
if memory cannot be allocated to put the
resultant token into, or if an error in the input is detected.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStable
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR bsmconv (1M),
.BR au_open (3BSM),
.BR attributes (5)
.SH NOTES
.sp
.LP
The functionality described on this manual page is available only if the
Solaris Auditing has been enabled.  See \fBbsmconv\fR(1M) for more
information.
