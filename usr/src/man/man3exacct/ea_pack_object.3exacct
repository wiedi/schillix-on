'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ea_pack_object 3EXACCT "4 Oct 2007" "SunOS 5.11" "Extended Accounting File Access Library Functions"
.SH NAME
ea_pack_object, ea_unpack_object, ea_get_creator, ea_get_hostname,
ea_next_object, ea_previous_object, ea_get_object, ea_write_object,
ea_copy_object, ea_copy_object_tree, ea_get_object_tree \- construct, read,
and write extended accounting records
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lexacct\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <exacct.h>

\fBsize_t\fR \fBea_pack_object\fR(\fBea_object_t *\fIobj\fR, \fBvoid *\fIbuf\fR,
     \fBsize_t\fR \fIbufsize\fR);
.fi

.LP
.nf
\fBea_object_type_t\fR \fBea_unpack_object\fR(\fBea_object_t **\fIobjp\fR, \fBint\fR \fIflag\fR,
     \fBvoid *\fIbuf\fR, \fBsize_t\fR \fIbufsize\fR);
.fi

.LP
.nf
\fBconst char *\fBea_get_creator\fR(\fBea_file_t *\fIef\fR);
.fi

.LP
.nf
\fBconst char *\fBea_get_hostname\fR(\fBea_file_t *\fIef\fR);
.fi

.LP
.nf
\fBea_object_type_t\fR \fBea_next_object\fR(\fBea_file_t *\fIef\fR, \fBea_object_t *\fIobj\fR);
.fi

.LP
.nf
\fBea_object_type_t\fR \fBea_previous_object\fR(\fBea_file_t *\fIef\fR,
     \fBea_object_t *\fIobj\fR);
.fi

.LP
.nf
\fBea_object_type_t\fR \fBea_get_object\fR(\fBea_file_t *\fIef\fR, \fBea_object_t *\fIobj\fR);
.fi

.LP
.nf
\fBint\fR \fBea_write_object\fR(\fBea_file_t *\fIef\fR, \fBea_object_t *\fIobj\fR);
.fi

.LP
.nf
\fBea_object_type_t *\fBea_copy_object\fR(\fBconst ea_object_t *\fIsrc\fR);
.fi

.LP
.nf
\fBea_object_type_t *\fBea_copy_object_tree\fR(\fBconst ea_object_t *\fIsrc\fR);
.fi

.LP
.nf
\fBea_object_type_t *\fBea_get_object_tree\fR(\fBea_file_t *\fIef\fR,
     \fBuint32_t\fInobj\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B ea_pack_object()
function converts
.B exacct
objects from
their in-memory representation to their file representation. It is passed an
object pointer that points to the top of an
.B exacct
object hierarchy
representing one or more
.B exacct
records. It returns the size of the
buffer required to contain the packed buffer representing the object
hierarchy. To obtain the correct size of the required buffer, the \fIbuf\fR
and
.I bufsize
parameters can be set to
.I NULL
and 0 respectively,
and the required buffer size will be returned. The resulting packed record
can be passed to
.BR putacct (2)
or to
.BR ea_set_item "(3EXACCT) when"
constructing an object of type
.BR EXT_EXACCT_OBJECT .
.sp
.LP
The
.B ea_unpack_object()
function reverses the packing process
performed by
.BR ea_pack_object() .
A packed buffer passed to
.B ea_unpack_object()
is unpacked into the original hierarchy of objects.
If the unpack operation fails (for example, due to a corrupted or incomplete
buffer), it returns
.BR EO_ERROR ;
otherwise, the object type of the first
object in the hierarchy is returned.  If
.B ea_unpack_object()
is invoked
with
.I flag
equal to
.BR EUP_ALLOC ,
it allocates memory for the
variable-length data in the included objects.  Otherwise, with \fIflag\fR
equal to
.BR EUP_NOALLOC ,
it sets the variable length data pointers within
the unpacked object structures to point within the buffer indicated by
.IR buf .
In both cases,
.B ea_unpack_object()
allocates all the
necessary
.B exacct
objects to represent the unpacked record. The
resulting object hierarchy can be freed using \fBea_free_object\fR(3EXACCT)
with the same
.I flag
value.
.sp
.LP
The
.B ea_get_creator()
function returns a pointer to a string
representing the recorded creator of the
.B exacct
file. The
.B ea_get_hostname()
function returns a pointer to a string representing
the recorded hostname on which the
.B exacct
file was created.  These
functions will return
.I NULL
if their respective field was not recorded
in the exacct file header.
.sp
.LP
The
.B ea_next_object()
function reads the basic fields
(\fBeo_catalog\fR and
.BR eo_type )
into the
.B ea_object_t
indicated by
.I obj
from the
.B exacct
file referred to by
.I ef
and rewinds to
the head of the record.  If the read object is corrupted,
.B ea_next_object()
returns
.B EO_ERROR
and records the extended
accounting error code, accessible with \fBea_error\fR(3EXACCT). If
end-of-file is reached,
.B EO_ERROR
is returned and the extended
accounting error code is set to
.BR EXR_EOF .
.sp
.LP
The
.B ea_previous_object()
function skips back one object in the file
and reads its basic fields (\fBeo_catalog\fR and
.BR eo_type )
into the
indicated
.BR ea_object_t .
If the read object is corrupted,
.B ea_previous_object()
returns
.B EO_ERROR
and records the extended
accounting error code, accessible with \fBea_error\fR(3EXACCT). If
end-of-file is reached,
.B EO_ERROR
is returned and the extended
accounting error code is set to
.BR EXR_EOF .
.sp
.LP
The
.B ea_get_object()
function reads the value fields into the
.B ea_object_t
indicated by
.IR obj ,
allocating memory as necessary,
and advances to the head of the next record. Once a record group object is
retrieved using
.BR ea_get_object() ,
subsequent calls to
.B ea_get_object()
and
.B ea_next_object()
will track through the
objects within the record group, and on reaching the end of the group, will
return the next object at the same level as the group from the file. If the
read object is corrupted,
.B ea_get_object()
returns
.B EO_ERROR
and
records the extended accounting error code, accessible with
.BR ea_error (3EXACCT).
If end-of-file is reached,
.B EO_ERROR
is
returned and the extended accounting error code is set to
.BR EXR_EOF .
.sp
.LP
The
.B ea_write_object()
function appends the given object to the open
.B exacct
file indicated by
.I ef
and returns 0. If the write fails,
.B ea_write_object()
returns \(mi1 and sets the extended accounting error
code to indicate the error, accessible with
.BR ea_error (3EXACCT).
.sp
.LP
The
.B ea_copy_object()
function copies an
.BR ea_object_t .
If the
source object is part of a chain, only the current object is copied. If the
source object is a group, only the group object is copied without its list
of members and the
.B eg_nobjs
and
.B eg_objs
fields are set to 0 and
.IR NULL ,
respectively. Use
.B ea_copy_tree()
to copy recursively a
group or a list of items.
.sp
.LP
The
.B ea_copy_object_tree()
function recursively copies an
.BR ea_object_t .
All elements in the
.B eo_next
list are copied, and
any group objects are recursively copied. The returned object can be
completely freed with \fBea_free_object\fR(3EXACCT) by specifying the
.B EUP_ALLOC
flag.
.sp
.LP
The
.B ea_get_object_tree()
function reads in
.I nobj
top-level
objects from the file, returning the same data structure that would have
originally been passed to
.BR ea_write_object() .
On encountering a group
object, the
.B ea_get_object()
function reads only the group header part
of the group, whereas
.B ea_get_object_tree()
reads the group and all its
member items, recursing into sub-records if necessary. The returned object
data structure can be completely freed with
.B ea_free_object()
by
specifying the
.B EUP_ALLOC
flag.
.SH RETURN VALUES
.sp
.LP
The
.B ea_pack_object()
function returns the number of bytes required to
hold the
.B exacct
object being operated upon. If the returned size
exceeds
.IR bufsize ,
the pack operation does not complete and the function
returns (\fBsize_t\fR) -1 and sets the extended accounting error code to
indicate the error.
.sp
.LP
The
.B ea_get_object()
function returns the
.B ea_object_type
of the
object if the object was retrieved successfully. Otherwise, it returns
.B EO_ERROR
and sets the extended accounting error code to indicate the
error.
.sp
.LP
The
.B ea_next_object()
function returns the
.B ea_object_type
of the
next
.B exacct
object in the file.  It returns
.B EO_ERROR
if the
.B exacct
file is corrupted sets the extended accounting error code to
indicate the error.
.sp
.LP
The
.B ea_unpack_object()
function returns the
.B ea_object_type
of
the first
.B exacct
object unpacked from the buffer. It returns
.B EO_ERROR
if the exacct file is corrupted, and sets the extended
accounting error code to indicate the error.
.sp
.LP
The
.B ea_write_object()
function returns 0 on success. Otherwise it
returns \(mi1 and sets the extended accounting error code to indicate the
error.
.sp
.LP
The
.B ea_copy_object()
and
.B ea_copy_object_tree()
functions return
the copied object on success. Otherwise they return
.I NULL
and set the
extended accounting error code to indicate the error.
.sp
.LP
The
.B ea_get_object_tree()
function returns the list of objects read
from the file on success. Otherwise it returns
.I NULL
and sets the
extended accounting error code to indicate the error.
.sp
.LP
The extended account error code can be retrieved using
.BR ea_error (3EXACCT).
.SH ERRORS
.sp
.LP
These functions may fail if:
.sp
.ne 2
.mk
.na
.B EXR_SYSCALL_FAIL
.ad
.sp .6
.RS 4n
A system call invoked by the function failed. The
.B errno
variable
contains the error value set by the underlying call. On memory allocation
failure,
.B errno
will be set to
.BR ENOMEM .
.RE

.sp
.ne 2
.mk
.na
.B EXR_CORRUPT_FILE
.ad
.sp .6
.RS 4n
The file referred to by
.I name
is not a valid
.B exacct
file, or is
unparsable, and therefore appears corrupted. This error is also used by
.B ea_unpack_buffer()
to indicate a corrupted buffer.
.RE

.sp
.ne 2
.mk
.na
.B EXR_EOF
.ad
.sp .6
.RS 4n
The end of the file has been reached.  In the case of
.BR ea_previous_record() ,
the previous record could not be reached, either
because the head of the file was encountered or because the previous record
could not be skipped over.
.RE

.SH USAGE
.sp
.LP
The
.B exacct
file format can be used to represent data other than that
in the extended accounting format.  By using a unique creator type in the
file header, application writers can develop their own format suited to the
needs of their application.
.SH EXAMPLES
.LP
.B Example 1
Open and close
.B exacct
file.
.sp
.LP
The following example opens the extended accounting data file for
processes. The
.B exacct
file is then closed.

.sp
.in +2
.nf
#include <stdio.h>
#include <exacct.h>

ea_file_t ef;
ea_object_t *obj;

\&.\|.\|.

ea_open(&ef, "foo", O_RDONLY, .\|.\|.);

while ((obj = ea_get_object_tree(&ef, 1)) != NULL) {
    if (obj->eo_type == EO_ITEM) {
        /* handle item */
    } else {
        /* handle group */
    }
    ea_free_object(obj, EUP_ALLOC);
}

if (ea_error() != EXR_EOF) {
    /* handle error */
}

ea_close(&ef);
.fi
.in -2

.LP
.B Example 2
Construct an
.B exacct
file consisting of a single
object containing the current process ID.
.sp
.in +2
.nf
#include <sys/types.h>
#include <unistd.h>
#include <exacct.h>

\&.\|.\|.

ea_file_t ef;
ea_object_t obj;
pid_t my_pid;

ea_open(&ef, "foo", O_CREAT | O_WRONLY, .\|.\|.);

my_pid = getpid();
ea_set_item(&obj, EXT_UINT32 | EXC_DEFAULT | EXT_PROC_PID, &my_pid, 0);
(void) ea_write_object(&ef, &obj);

ea_close(&ef);

\&.\|.\|.
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR read (2),
.BR ea_error (3EXACCT),
.BR ea_open (3EXACCT),
.BR ea_set_item (3EXACCT),
.BR libexacct (3LIB),
.BR attributes (5)
