'\" te
.\" Copyright (c) 2001, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ea_set_item 3EXACCT "28 Nov 2001" "SunOS 5.11" "Extended Accounting File Access Library Functions"
.SH NAME
ea_set_item, ea_alloc, ea_strdup, ea_set_group, ea_match_object_catalog,
ea_attach_to_object, ea_attach_to_group, ea_free, ea_strfree, ea_free_item,
ea_free_object \- create, destroy and manipulate exacct objects
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lexacct\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <exacct.h>

\fBint\fR \fBea_set_item\fR(\fBea_object_t *\fIobj\fR, \fBea_catalog_t\fR \fItag\fR, \fBvoid *\fIvalue\fR,
     \fBsize_t\fR \fIvalsize\fR);
.fi

.LP
.nf
\fBvoid *\fBea_alloc\fR(\fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBchar *\fBea_strdup\fR(\fBchar *\fIptr\fR);
.fi

.LP
.nf
\fBint\fR \fBea_set_group\fR(\fBea_object_t *\fIobj\fR, \fBea_catalog_t\fR \fItag\fR);
.fi

.LP
.nf
\fBint\fR \fBea_match_object_catalog\fR(\fBea_object_t *\fIobj\fR, \fBea_catalog_t\fR \fIcatmask\fR);
.fi

.LP
.nf
\fBvoid\fR \fBea_attach_to_object\fR(\fBea_object_t *\fIhead_obj\fR, \fBea_object_t *\fIobj\fR);
.fi

.LP
.nf
\fBvoid\fR \fBea_attach_to_group\fR(\fBea_object_t *\fIgroup_obj\fR, \fBea_object_t *\fIobj\fR);
.fi

.LP
.nf
\fBvoid\fR \fBea_free\fR(\fBvoid *\fIptr\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBvoid\fR \fBea_strfree\fR(\fBchar *\fIptr\fR);
.fi

.LP
.nf
\fBint\fR \fBea_free_item\fR(\fBea_object_t *\fIobj\fR, \fBint\fR \fIflag\fR);
.fi

.LP
.nf
\fBvoid\fR \fBea_free_object\fR(\fBea_object_t *\fIobj\fR, \fBint\fR \fIflag\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B ea_alloc()
function allocates a block of memory of the requested
size. This block can be safely passed to
.B libexacct
functions, and can be
safely freed by any of the
.B ea_free()
functions.
.sp
.LP
The
.B ea_strdup()
function can be used to duplicate a string that is to
be stored inside an
.B ea_object_t
structure.
.sp
.LP
The
.B ea_set_item()
function  assigns the given
.B exacct
object to be
a data item with
.I value
set according to the remaining arguments.  For
buffer-based data values (\fBEXT_STRING\fR,
.BR EXT_EXACCT_OBJECT ,
and
.BR EXT_RAW ),
a copy of the passed buffer is taken. In the case of
.BR EXT_EXACCT_OBJECT ,
the passed buffer should be a packed
.BR exacct
object as returned by
.BR ea_pack_object "(3EXACCT). Any item assigned with"
.B ea_set_item()
should be freed with
.B ea_free_item()
specifying a
flag value of
.B EUP_ALLOC
when the item is no longer needed.
.sp
.LP
The
.B ea_match_object_catalog()
function returns
.B TRUE
if the
.B exacct
object specified by
.I obj
has a catalog tag that matches the
mask specified by
.IR catmask .
.sp
.LP
The
.B ea_attach_to_object()
function attaches an object to the given
object. The
.B ea_attach_to_group()
function attaches a chain of objects as
member items of the given group. Objects are inserted at the end of the list
of any previously attached objects.
.sp
.LP
The
.B ea_free()
function frees a block of memory previously allocated by
.BR ea_alloc() .
.sp
.LP
The
.B ea_strfree()
function frees a string previously copied by
.BR ea_strdup() .
.sp
.LP
The \fBea_free_item()\fR function frees the \fIvalue\fR fields in the
.B ea_object_t
indicated by
.IR obj ,
if
.B EUP_ALLOC
is specified. The
object itself is not freed. The
.B ea_free_object()
function frees the
specified object and any attached hierarchy of objects. If the \fIflag\fR
argument is set to
.BR EUP_ALLOC ,
.B ea_free_object()
will also free any
variable-length data in the object hierarchy; if set to
.BR EUP_NOALLOC ,
.B ea_free_object()
will not free variable-length data.  In particular,
these flags should correspond to those specified in calls to
.BR ea_unpack_object (3EXACCT).
.SH RETURN VALUES
.sp
.LP
The
.B ea_match_object_catalog()
function returns 0 if the object's
catalog tag does not match the given mask, and 1 if there is a match.
.sp
.LP
Other integer-valued functions return 0 if successful. Otherwise these
functions return -1 and set the extended accounting error code appropriately.
Pointer-valued functions return a valid pointer if successful and NULL
otherwise, setting the extended accounting error code appropriately. The
extended accounting error code can be examined with
.BR ea_error (3EXACCT).
.SH ERRORS
.sp
.LP
The
.BR ea_set_item() ,
.BR ea_set_group() ,
and
.B ea_match_object_catalog()
functions may fail if:
.sp
.ne 2
.mk
.na
.B EXR_SYSCALL_FAIL
.ad
.RS 22n
.rt
A system call invoked by the function failed. The
.B errno
variable
contains the error value set by the underlying call.
.RE

.sp
.ne 2
.mk
.na
.B EXR_INVALID_OBJECT
.ad
.RS 22n
.rt
The passed object is of an incorrect type, for example passing a group object
to
.BR ea_set_item() .
.RE

.SH USAGE
.sp
.LP
The
.B exacct
file format can be used to represent data other than that in
the extended accounting format.  By using a unique creator type in the file
header, application writers can develop their own format suited to the needs
of their application.
.SH EXAMPLES
.LP
.B Example 1
Open and close
.B exacct
file.
.sp
.LP
Construct an exacct file consisting of a single object containing the current
process ID.

.sp
.in +2
.nf
#include <sys/types.h>
#include <unistd.h>
#include <exacct.h>

\&...

ea_file_t ef;
ea_object_t obj;
pid_t my_pid;

my_pid = getpid();
ea_set_item(&obj, EXT_UINT32 | EXC_DEFAULT | EXT_PROC_PID,
       &my_pid, sizeof(my_pid));

\&...
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR read (2),
.BR ea_error (3EXACCT),
.BR ea_open (3EXACCT),
.BR ea_pack_object (3EXACCT),
.BR libexacct (3LIB),
.BR attributes (5)
