'\" te
.\" Copyright (C) 1990, Regents of the University of Michigan.  All Rights Reserved.
.\" Portions Copyright 2004, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ldap_bind 3LDAP "14 Jan 2004" "SunOS 5.11" "LDAP Library Functions"
.SH NAME
ldap_bind, ldap_bind_s, ldap_sasl_bind, ldap_sasl_bind_s, ldap_simple_bind,
ldap_simple_bind_s, ldap_unbind, ldap_unbind_s, ldap_unbind_ext,
ldap_set_rebind_proc, ldap_sasl_interactive_bind_s \- LDAP bind functions
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. -lldap [ \fIlibrary\fR.\|.\|. ]
#include <lber.h>
#include <ldap.h>

\fBint\fR \fBldap_bind\fR(\fBLDAP *\fIld\fR, \fBchar *\fIwho\fR, \fBchar *\fIcred\fR, \fBint\fR \fImethod\fR);
.fi

.LP
.nf
\fBint\fR \fBldap_bind_s\fR(\fBLDAP *\fIld\fR, \fBchar *\fIwho\fR, \fBchar *\fIcred\fR, \fBint\fR \fImethod\fR);
.fi

.LP
.nf
\fBint\fR \fBldap_simple_bind\fR(\fBLDAP *\fIld\fR, \fBchar *\fIwho\fR, \fBchar *\fIpasswd\fR);
.fi

.LP
.nf
\fBint\fR \fBldap_simple_bind_s\fR(\fBLDAP *\fIld\fR, \fBchar *\fIwho\fR, \fBchar *\fIpasswd\fR);
.fi

.LP
.nf
\fBint\fR \fBldap_unbind\fR(\fBLDAP *\fIld\fR);
.fi

.LP
.nf
\fBint\fR \fBldap_unbind_s\fR(\fBLDAP *\fIld\fR);
.fi

.LP
.nf
\fBint\fR \fBldap_unbind_ext\fR(\fBLDAP\fR \fI*ld\fR, \fBLDAPControl **\fIserverctrls\fR,
     \fBLDAPControl **\fIclientctrls\fR);
.fi

.LP
.nf
\fBvoid\fR \fBldap_set_rebind_proc\fR(\fBLDAP\fR \fI*ld\fR, \fBint (*\fIrebindproc\fR);
.fi

.LP
.nf
\fBint\fR \fBldap_sasl_bind\fR(\fBLDAP *\fIld\fR, \fBchar *\fIdn\fR, \fBchar *\fImechanism\fR,
     \fBstruct berval **\fIserverctrls\fR, \fBLDAPControl **\fIclientctrls\fR,
     \fBint *\fImsgidp\fR);
.fi

.LP
.nf
\fBint\fR \fBldap_sasl_bind_s\fR(\fBLDAP *\fIld\fR, \fBchar *\fIdn\fR, \fBchar *\fImechanism\fR,
     \fBstruct berval *\fIcred\fR, \fBLDAPControl **\fIserverctrls\fR,
     \fBLDAPControl **\fIclientctrls\fR);
.fi

.LP
.nf
\fBint\fR \fBldap_sasl_interactive_bind_s\fR(\fBLDAP *\fIld\fR, \fBchar *\fIdn\fR,
     \fBchar *\fIsaslMechanism\fR, \fBLDAPControl **\fIsctrl\fR, \fBLDAPControl **\fIcctrl\fR,
     \fBLDAPControl **\fIunsigned flags\fR, \fBLDAP_SASL_INTERACT_PROC *\fIcallback\fR,
     \fBvoid *\fIdefaults\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions provide various interfaces to the LDAP bind operation. After
a connection is made to an LDAP server, the
.B ldap_bind()
function
returns the message ID of the request initiated. The \fBldap_bind_s()\fR
function returns an LDAP error code.
.SS "Simple Authentication"
.sp
.LP
The simplest form of the bind call is
.BR ldap_simple_bind_s() .
The
function takes the DN (Distinguished Name) of the
.I dn
parameter and the
\fBuserPassword\fR associated with the entry in \fIpasswd\fR to return an
LDAP error code. See \fBldap_error\fR(3LDAP).
.sp
.LP
The
.B ldap_simple_bind()
call is asynchronous. The function takes the
same parameters as
.B ldap_simple_bind_s()
but initiates the bind
operation and returns the message ID of the request sent. The result of the
operation can be obtained by a subsequent call to
.BR ldap_result (3LDAP).
.SS "General Authentication"
.sp
.LP
The
.B ldap_bind()
and
.B ldap_bind_s()
functions are used to select
the authentication method at runtime. Both functions take an extra
\fImethod\fR parameter to set the authentication method. For simple
authentication, the
.I method
parameter is set to
.BR LDAP_AUTH_SIMPLE .
The
.B ldap_bind()
function returns the message id of the request
initiated. The
.B ldap_bind_s()
function returns an LDAP error code.
.SS "SASL Authentication"
.sp
.LP
The
.B ldap_sasl_bind()
and
.B ldap_sasl_bind_s()
functions are used
for general and extensible authentication over LDAP through the use of the
Simple Authentication Security Layer. The routines both take the
.B DN
to
bind as the authentication method. A dotted-string representation of an OID
identifies the method, and the
.B berval
structure holds the credentials.
The special constant value \fBLDAP_SASL_SIMPLE\fR ("") can be passed to
.RB "request simple authentication. Otherwise, the" " ldap_simple_bind()"
function or the
.B ldap_simple_bind_s()
function can be used.
.sp
.LP
The
.B ldap_sasl_interactive_bind_s()
helper function takes its data and
performs the necessary
.B ldap_sasl_bind()
and associated SASL library
authentication sequencing with the LDAP server that uses the provided
connection
.RI ( ld ).
.sp
.LP
Upon a successful bind, the
.B ldap_sasl_bind()
function will, if
negotiated by the SASL interface, install the necessary internal
\fBlibldap\fR plumbing to enable SASL integrity and privacy (over the wire
encryption) with the LDAP server.
.sp
.LP
The
.B LDAP_SASL_INTERACTIVE
option flag is passed to the libldap API
through the flags argument of the API. The flag tells the API to use the SASL
interactive mode and to have the API request SASL authentication data through
the
.B LDAP_SASL_INTERACTIVE_PROC
callback as needed. The callback
provided is in the form:
.sp
.in +2
.nf
typedef int (LDAP_SASL_INTERACT_PROC)
    (LDAP *ld, unsigned flags, void* defaults, void *interact);
.fi
.in -2
.sp

.sp
.LP
The user-provided SASL callback is passed to the current LDAP connection
pointer, the current flags field, an optional pointer to user-defined data,
and the list of
.B sasl_interact_t
authentication values requested by
.BR libsasl (3LIB)
to complete authentication.
.sp
.LP
The user-defined callback collects and returns the authentication
information in the
.B sasl_interact_t
array according to
.BR libsasl
rules. The authentication information can include user IDs, passwords,
realms, or other information defined by SASL. The SASL library uses this date
during sequencing to complete authentication.
.SS "Unbinding"
.sp
.LP
The
.B ldap_unbind()
call is used to unbind from a directory, to
terminate the current association, and to free the resources contained in the
\fIld\fR structure. Once the function is called, the connection to the LDAP
server is closed and the
.I ld
structure is invalid. The
\fBldap_unbind_s()\fR and \fBldap_unbind()\fR calls are identical and
synchronous in nature.
.sp
.LP
The
.B ldap_unbind_ext()
function is used to unbind from a directory, to
terminate the current association, and to free the resources contained in the
LDAP structure. Unlike
.B ldap_unbind()
and
.BR ldap_unbind_s() ,
both
server and client controls can be explicitly included with
\fBldap_unbind_ext()\fR requests. No server response is made to an unbind
request and responses should not be expected from server controls included
with unbind requests.
.SS "Rebinding While Following Referral"
.sp
.LP
The
.B ldap_set_rebind_proc()
call is used to set a function called back
to obtain bind credentials. The credentials are used when a new server is
contacted after an LDAP referral. If
.B ldap_set_rebind_proc()
is never
called, or if it is called with a
.B NULL
\fIrebindproc\fR parameter, an
unauthenticated simple LDAP bind is always done when chasing referrals.
.sp
.LP
The
.B rebindproc()
function is declared as shown below:
.sp
.in +2
.nf
int rebindproc(LDAP *ld, char **whop, char **credp,
    int *methodp, int freeit);
.fi
.in -2

.sp
.LP
The LDAP library first calls the
.B rebindproc()
to obtain the referral
bind credentials. The \fIfreeit\fR parameter is zero. The \fIwhop\fR,
.IR credp ,
and
.I methodp
parameters should be set as appropriate. If
\fBrebindproc()\fR returns
.BR LDAP_SUCCESS ,
referral processing continues.
The
.B rebindproc()
is called a second time with a non-zero \fIfreeit\fR
value to give the application a chance to free any memory allocated in the
previous call.
.sp
.LP
If anything but
.B LDAP_SUCCESS
is returned by the first call to
.BR rebindproc() ,
referral processing is stopped and the error code is
returned for the original LDAP operation.
.SH RETURN VALUES
.sp
.LP
Make a call to \fBldap_result\fR(3LDAP) to obtain the result of a bind
operation.
.SH ERRORS
.sp
.LP
Asynchronous functions will return \fB\(mi1\fR in case of error. See
.BR ldap_error (3LDAP)
for more information on error codes returned. If no
credentials are returned, the result parameter is set to \fINULL\fR.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR ldap (3LDAP),
.BR ldap_error (3LDAP),
.BR ldap_open (3LDAP),
.BR ldap_result (3LDAP),
.BR libsasl (3LIB),
.BR attributes (5)
