'\" te
.\" Copyright (C) 1990, Regents of the University of Michigan.  All Rights Reserved.
.\" Portions Copyright (C) 2002, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ldap_sort 3LDAP "27 Jan 2002" "SunOS 5.11" "LDAP Library Functions"
.SH NAME
ldap_sort, ldap_sort_entries, ldap_sort_values, ldap_sort_strcasecmp \-
LDAP entry sorting functions
.SH SYNOPSIS
.LP
.nf
cc[ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. -lldap[ \fIlibrary\fR.\|.\|. ]
#include <lber.h>
#include <ldap.h>

\fBldap_sort_entries\fR(\fBLDAP\fR \fI*ld\fR, \fBLDAPMessage\fR \fI**chain\fR, \fBchar\fR \fI*attr\fR,
     \fBint (\fI*cmp\fR)());
.fi

.LP
.nf
\fBldap_sort_values\fR(\fBLDAP\fR \fI*ld\fR, \fBchar\fR \fI**vals\fR, \fBint (\fI*cmp\fR)());
.fi

.LP
.nf
\fBldap_sort_strcasecmp\fR(\fBchar\fR \fI*a\fR, \fBchar\fR \fI*b\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions are used to sort lists of entries and values retrieved from
an LDAP server.
.B ldap_sort_entries()
is used to sort a chain of entries
retrieved from an LDAP search call either by DN or by some arbitrary
attribute in the entries.  It takes
.IR ld ,
the LDAP structure, which is
only used for error reporting,
.IR chain ,
the list of entries as returned
by
.BR ldap_search_s "(3LDAP) or"
.BR ldap_result (3LDAP).
.I attr
is the
.RI "attribute to use as a key in the sort or NULL to sort by DN, and " " cmp"
is the comparison function to use when comparing values (or individual DN
components if sorting by DN). In this case,
.I cmp
should be a function
taking two single values of the
.I attr
to sort by, and returning a
value less than zero, equal to zero, or greater than zero, depending on
whether the first argument is less than, equal to, or greater than the
second argument. The convention is the same as used by
.BR qsort (3C),
which is called to do the actual sorting.
.sp
.LP
.B ldap_sort_values()
is used to sort an array of values from an entry,
as returned by
.BR ldap_get_values "(3LDAP). It takes the LDAP connection"
structure
.IR ld ,
the array of values to sort
.IR vals ,
and
.IR cmp ,
the comparison function to use during the sort. Note that
.I cmp
will be
passed a pointer to each element in the
.I vals
array, so if you pass the
normal char ** for this parameter,
.I cmp
should take two char **'s as
arguments (that is, you cannot pass
.I strcasecmp
or its friends for
.IR cmp ).
You can, however, pass the function
.B ldap_sort_strcasecmp()
for this purpose.
.sp
.LP
For example:
.sp
.in +2
.nf
	LDAP *ld;
	LDAPMessage *res;
	/* .\|.\|. call to ldap_search_s(\|), fill in res, retrieve sn attr .\|.\|. */

	/* now sort the entries on surname attribute */
	if ( ldap_sort_entries( ld, &res, "sn", ldap_sort_strcasecmp ) != 0 )
		ldap_perror( ld, "ldap_sort_entries" );
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
AvailabilitySUNWcsl (32-bit)
SUNWcslx (64-bit)
Interface StabilityEvolving
.TE

.SH SEE ALSO
.sp
.LP
.BR ldap (3LDAP),
.BR ldap_search (3LDAP),
.BR ldap_result (3LDAP),
.BR qsort (3C),
.BR attributes (5)
.SH NOTES
.sp
.LP
The
.B ldap_sort_entries()
function applies the comparison function to
each value of the attribute in the array as returned by a call to
.BR ldap_get_values (3LDAP),
until a mismatch is found. This works fine for
single-valued attributes, but may produce unexpected results for
multi-valued attributes. When sorting by DN, the comparison function is
applied to an exploded version of the DN, without types. The return values
for all of these functions are declared in the
.RB < ldap.h >
header file.
Some functions may allocate memory which must be freed by the calling
application.
