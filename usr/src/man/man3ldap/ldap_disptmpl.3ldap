'\" te
.\" Copyright (C) 1990, Regents of the University of Michigan.  All Rights Reserved.
.\" Portions Copyright (C) 2002, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ldap_disptmpl 3LDAP "27 Jan 2002" "SunOS 5.11" "LDAP Library Functions"
.SH NAME
ldap_disptmpl, ldap_init_templates, ldap_init_templates_buf,
ldap_free_templates, ldap_first_disptmpl, ldap_next_disptmpl,
ldap_oc2template, ldap_name2template, ldap_tmplattrs, ldap_first_tmplrow,
ldap_next_tmplrow, ldap_first_tmplcol, ldap_next_tmplcol \- LDAP display
template functions
.SH SYNOPSIS
.LP
.nf
cc[ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. -lldap[ \fIlibrary\fR.\|.\|. ]
#include <lber.h>
#include <ldap.h>

\fBint\fR \fBldap_init_templates\fR(\fBchar\fR \fI*file\fR, \fBstruct ldap_disptmpl\fR \fI**tmpllistp\fR);
.fi

.LP
.nf
\fBint\fR \fBldap_init_templates_buf\fR(\fBchar\fR \fI*buf\fR, \fBunsigned long\fR \fIlen\fR,
     \fBstruct ldap_disptmpl\fR \fI**tmpllistp\fR);
.fi

.LP
.nf
\fBvoid\fR \fBldap_free_templates\fR(\fBstruct ldap_disptmpl\fR \fI*tmpllist\fR);
.fi

.LP
.nf
\fBstruct ldap_disptmpl\fR \fB*ldap_first_disptmpl\fR
     (\fBstruct ldap_disptmpl\fR \fI*tmpllist\fR);
.fi

.LP
.nf
\fBstruct ldap_disptmpl\fR \fB*ldap_next_disptmpl\fR
     (\fBstruct ldap_disptmpl\fR \fI*tmpllist\fR,\fBstruct ldap_disptmpl\fR \fI*tmpl\fR);
.fi

.LP
.nf
\fBstruct ldap_disptmpl\fR \fB*ldap_oc2template\fR (\fBchar\fR \fI**oclist\fR,
     \fBstruct ldap_disptmpl\fR \fI*tmpllist\fR);
.fi

.LP
.nf
\fBstruct ldap_disptmpl\fR \fB*ldap_name2template\fR (\fBchar\fR \fI*name\fR,
     \fBstruct ldap_disptmpl\fR \fI*tmpllist\fR);
.fi

.LP
.nf
\fBchar\fR \fB**ldap_tmplattrs\fR(\fBstruct ldap_disptmpl\fR \fI*tmpl\fR, \fBchar\fR \fI**includeattrs\fR,
     \fBint\fR \fIexclude;\fR, \fBunsigned long\fR \fIsyntaxmask\fR);
.fi

.LP
.nf
\fBstruct ldap_tmplitem\fR \fB*ldap_first_tmplrow\fR(\fBstruct ldap_disptmpl\fR \fI*tmpl\fR);
.fi

.LP
.nf
\fBstruct ldap_tmplitem\fR \fB*ldap_next_tmplrow\fR(\fBstruct ldap_disptmpl\fR \fI*tmpl\fR,
     \fBstruct ldap_tmplitem\fR \fI*row\fR);
.fi

.LP
.nf
\fBstruct ldap_tmplitem\fR \fB*ldap_first_tmplcol\fR(\fBstruct ldap_disptmpl\fR \fI*tmpl\fR,
     \fBstruct ldap_tmplitem\fR \fI*row\fR, \fBstruct ldap_tmplitem\fR \fI*col\fR);
.fi

.LP
.nf
\fBstruct ldap_tmplitem\fR \fB*ldap_next_tmplcol\fR(\fBstruct ldap_disptmpl\fR \fI*tmpl\fR,
     \fBstruct ldap_tmplitem\fR \fI*row\fR, \fBstruct ldap_tmplitem\fR \fI*col\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions provide a standard way to access LDAP entry display
templates. Entry display templates provide a standard way for LDAP
applications to display directory entries.  The general idea is that it is
possible to map the list of object class values present in an entry to an
appropriate display template.  Display templates are defined in a
configuration file. See
.BR ldaptemplates.conf (4).
Each display template
contains a pre-determined list of items, where each item generally
corresponds to an attribute to be displayed.  The items contain information
and flags that the caller can use to display the attribute and values in a
reasonable fashion.  Each item has a syntaxid, which are described in the
SYNTAX IDS section below.  The
.BR ldap_entry2text (3LDAP)
functions use
the display template functions and produce text output.
.sp
.LP
.B ldap_init_templates()
reads a sequence of templates from a valid LDAP
template configuration file (see
.BR ldaptemplates.conf (4)).
Upon
success,
.B 0
is returned, and
.I tmpllistp
is set to point to a list
of templates.  Each member of the list is an
.B ldap_disptmpl
structure
(defined below in the DISPTMPL Structure Elements section).
.sp
.LP
.B ldap_init_templates_buf()
reads a sequence of templates from
.I buf
(whose size is
.I "buflen). buf"
should point to the data
in the format defined for an LDAP template configuration file (see
.BR ldaptemplates.conf (4)).
Upon success,
.B 0
is returned, and
.I tmpllistp
is set to point to a list of templates.
.sp
.LP
The
.B LDAP_SET_DISPTMPL_APPDATA()
macro is used to set the value of the
.B dt_appdata
field in an
.B ldap_disptmpl
structure.  This field is
reserved for the calling application to use; it is not used internally.
.sp
.LP
The
.B LDAP_GET_DISPTMPL_APPDATA()
macro is used to retrieve the value
in the
.B dt_appdata
field.
.sp
.LP
The
.B LDAP_IS_DISPTMPL_OPTION_SET()
macro is used to test a
.B ldap_disptmpl
structure for the existence of a template option.  The
options currently defined are:
.B LDAP_DTMPL_OPT_ADDABLE
(it is
appropriate to allow entries of this type to be added),
\fBLDAP_DTMPL_OPT_ALLOWMODRDN\fR (it is appropriate to offer the "modify
rdn"operation), \fBLDAP_DTMPL_OPT_ALTVIEW\fR (this template is merely an
alternate view of another template, typically used for templates pointed to
be an
.B LDAP_SYN_LINKACTION
item).
.sp
.LP
.B ldap_free_templates()
disposes of the templates allocated by
.BR ldap_init_templates() .
.sp
.LP
.B ldap_first_disptmpl()
returns the first template in the list
.I tmpllist.
The
.I tmpllist
is typically obtained by calling
.B ldap_init_templates()
\fB\&.\fR
.sp
.LP
.B ldap_next_disptmpl()
returns the template after
.I tmpl
in the
template list
.I "tmpllist. A"
.I NULL
pointer is returned if
.I tmpl
is the last template in the list.
.sp
.LP
.B ldap_oc2template()
searches
.I tmpllist
for the best template to
use to display an entry that has a specific set of
.BR objectClass
values.
.I oclist
should be a null-terminated array of strings that
contains the values of the
.B objectClass
attribute of the entry.  A
pointer to the first template where all of the object classes listed in one
of the template's
.B dt_oclist
elements are contained in
.I oclist
is
returned. A
.I NULL
pointer is returned if no appropriate template is
found.
.sp
.LP
.B ldap_tmplattrs()
returns a null-terminated array that contains the
names of attributes that need to be retrieved if the template
.I tmpl
is
to be used to display an entry.  The attribute list should be freed using
\fBldap_value_free\fR(\|). The
.I includeattrs
parameter contains a
null-terminated array of attributes that should always be included (it may
be
.I NULL
if no extra attributes are required).  If
.I syntaxmask
is
non-zero, it is used to restrict the attribute set returned.  If
.I exclude
is zero, only attributes where the logical
.B AND
of the
template item syntax id and the
.I syntaxmask
is non-zero are included.
If
.I exclude
is non-zero, attributes where the logical
.B AND
of the
template item syntax id and the
.I syntaxmask
is non-zero are excluded.
.sp
.LP
.B ldap_first_tmplrow()
returns a pointer to the first row of items in
template
.IR tmpl.
.sp
.LP
.B ldap_next_tmplrow()
returns a pointer to the row that follows
.I row
in template
.IR tmpl.
.sp
.LP
.B ldap_first_tmplcol()
returns a pointer to the first item (in the
first column) of row
.I row
within template
.IR tmpl .
A pointer to an
.B ldap_tmplitem
structure (defined below in the TMPLITEM Structure
Elements section) is returned.
.sp
.LP
The
.B LDAP_SET_TMPLITEM_APPDATA()
macro is used to set the value of the
.B ti_appdata
field in a
.B ldap_tmplitem
structure.  This field is
reserved for the calling application to use; it is not used internally.
.sp
.LP
The
.B LDAP_GET_TMPLITEM_APPDATA()
macro is used to retrieve the value
of the
.B ti_appdata
field.
.sp
.LP
The
.B LDAP_IS_TMPLITEM_OPTION_SET()
macro is used to test a
.B ldap_tmplitem
structure for the existence of an item option.  The
options currently defined are:
.B LDAP_DITEM_OPT_READONLY
(this attribute
should not be modified),
.B LDAP_DITEM_OPT_SORTVALUES
(it makes sense to
sort the values),
.B LDAP_DITEM_OPT_SINGLEVALUED
(this attribute can only
hold a single value),
.B LDAP_DITEM_OPT_VALUEREQUIRED
(this attribute
must contain at least one value),
.B LDAP_DITEM_OPT_HIDEIFEMPTY
(do not
show this item if there are no values), and
.B LDAP_DITEM_OPT_HIDEIFFALSE
(for boolean attributes only:  hide this item if the value  is
.BR FALSE ).
.sp
.LP
.B ldap_next_tmplcol()
returns a pointer to the item (column) that
follows column
.B col
within row
.I row
of template
.IR tmpl.
.SS "DISPTMPL Structure Elements"
.sp
.LP
The
.B ldap_disptmpl
structure is defined as:
.sp
.in +2
.nf
struct ldap_disptmpl {
	char                    	*dt_name;
	char			*dt_pluralname;
	char                    	*dt_iconname;
	unsigned long           	dt_options;
	char                    	*dt_authattrname;
	char                    	*dt_defrdnattrname;
	char                    	*dt_defaddlocation;
	struct ldap_oclist	*dt_oclist;
	struct ldap_adddeflist	*dt_adddeflist;
	struct ldap_tmplitem	*dt_items;
	void			*dt_appdata;
	struct ldap_disptmpl	*dt_next;
};
\fR
.fi
.in -2

.sp
.LP
The
.B dt_name
member is the singular name of the template.  The
.B dt_pluralname
is the plural name.  The
.B dt_iconname
member will
contain the name of an icon or other graphical element that can be used to
depict entries that correspond to this display template.  The
.B dt_options
contains options which may be tested using the
.B LDAP_IS_TMPLITEM_OPTION_SET()
macro.
.sp
.LP
The
.B dt_authattrname
contains the name of the DN-syntax attribute
whose value(s) should be used to authenticate to make changes to an entry.
If
.B dt_authattrname
is
.IR NULL ,
then authenticating as the entry
itself is appropriate. The
.B dt_defrdnattrname
is the name of the
attribute that is normally used to name entries of this type, for example,
"cn"for person entries.  The  \fBdt_defaddlocation\fR is the distinguished
name of an entry below which new entries of this type are typically created
(its value is site-dependent).
.sp
.LP
.B dt_oclist
is a pointer to a linked list of object class arrays,
defined as:
.sp
.in +2
.nf
struct ldap_oclist {
	char			**oc_objclasses;
	struct ldap_oclist	*oc_next;
};
.fi
.in -2

.sp
.LP
These are used by the
.B ldap_oc2template()
function.
.sp
.LP
.B dt_adddeflist
is a pointer to a linked list of rules for defaulting
the values of attributes when new entries are created.  The
.B ldap_adddeflist
structure is defined as:
.sp
.in +2
.nf
struct ldap_adddeflist {
	int			ad_source;
	char			*ad_attrname;
	char			*ad_value;
	struct ldap_adddeflist	*ad_next;
};
.fi
.in -2

.sp
.LP
The ad_attrname member contains the name of the attribute whose value this
rule sets.  If
.B ad_source
is
.B LDAP_ADSRC_CONSTANTVALUE
then the
.B ad_value
member contains the (constant) value to use. If
.B ad_source
is
.B LDAP_ADSRC_ADDERSDN
then ad_value is ignored and
the distinguished name of the person who is adding the new entry is used as
the default value for
.BR ad_attrname .
.SS "TMPLITEM Structure Elements"
.sp
.LP
The
.B ldap_tmplitem
structure is defined as:
.sp
.in +2
.nf
struct ldap_tmplitem {
	unsigned long		ti_syntaxid;
	unsigned long		ti_options;
	char			*ti_attrname;
	char			*ti_label;
	char			**ti_args;
	struct ldap_tmplitem	*ti_next_in_row;
	struct ldap_tmplitem	*ti_next_in_col;
	void			*ti_appdata;
};
.fi
.in -2

.SS "Syntax IDs"
.sp
.LP
Syntax ids are found in the
.B ldap_tmplitem
structure element
.BR ti_syntaxid ,
and they can be used to determine how to display the
values for the attribute associated with an item.  The
.B LDAP_GET_SYN_TYPE()
macro can be used to return a general type from a
syntax id.  The five general types currently defined are:
.B LDAP_SYN_TYPE_TEXT
(for attributes that are most appropriately shown
as text),
.B LDAP_SYN_TYPE_IMAGE
(for JPEG or FAX format images),
.B LDAP_SYN_TYPE_BOOLEAN
(for boolean attributes),
.B LDAP_SYN_TYPE_BUTTON
(for attributes whose values are to be retrieved
and display only upon  request, for example, in response to the press of a
button, a JPEG image is retrieved, decoded, and displayed), and
\fBLDAP_SYN_TYPE_ACTION\fR (for special purpose actions such as "search for
the entries where this entry is listed in the seeAlso attribute").
.sp
.LP
The
.B LDAP_GET_SYN_OPTIONS
macro can be used to retrieve an unsigned
long bitmap that defines options.  The only currently defined option is
.B LDAP_SYN_OPT_DEFER,
which (if set) implies that the values for the
attribute should not be retrieved until requested.
.sp
.LP
There are sixteen distinct syntax ids currently defined.  These generally
correspond to one or more X.500 syntaxes.
.sp
.LP
.B LDAP_SYN_CASEIGNORESTR
is used for text attributes which are simple
strings whose case is ignored for comparison purposes.
.sp
.LP
.B LDAP_SYN_MULTILINESTR
is used for text attributes which consist of
multiple lines, for example,
.BR postalAddress ,
.BR homePostalAddress ,
.BR multilineDescription ,
or any attributes of syntax
.BR caseIgnoreList .
.sp
.LP
.B LDAP_SYN_RFC822ADDR
is used for case ignore string attributes that
are RFC-822 conformant mail addresses, for example, mail.
.sp
.LP
.B LDAP_SYN_DN
is used for attributes with a Distinguished Name syntax,
for example,
.BR seeAlso .
.sp
.LP
.B LDAP_SYN_BOOLEAN
is used for attributes with a boolean syntax.
.sp
.LP
.B LDAP_SYN_JPEGIMAGE
is used for attributes with a jpeg syntax, for
example, jpegPhoto.
.sp
.LP
.B LDAP_SYN_JPEGBUTTON
is used to provide a button (or equivalent
interface element) that can be used to retrieve, decode, and display an
attribute of jpeg syntax.
.sp
.LP
.B LDAP_SYN_FAXIMAGE
is used for attributes with a photo syntax, for
example, Photo.  These are actually Group 3 Fax (T.4) format images.
.sp
.LP
.B LDAP_SYN_FAXBUTTON
is used to provide a button (or equivalent
interface element) that can be used to retrieve, decode, and display an
attribute of photo syntax.
.sp
.LP
.B LDAP_SYN_AUDIOBUTTON
is used to provide a button (or equivalent
interface element) that can be used to retrieve and play an attribute of
audio syntax.  Audio values are in the "mu law" format, also known as "au"
format.
.sp
.LP
.B LDAP_SYN_TIME
is used for attributes with the UTCTime syntax, for
example,
.BR lastModifiedTime .
The value(s) should be displayed in
complete date and time fashion.
.sp
.LP
.B LDAP_SYN_DATE
is used for attributes with the UTCTime syntax, for
example,
.BR lastModifiedTime .
Only the date portion of the value(s)
should be displayed.
.sp
.LP
.B LDAP_SYN_LABELEDURL
is used for
.B labeledURL
attributes.
.sp
.LP
.B LDAP_SYN_SEARCHACTION
is used to define a search that is used to
retrieve related information. If
.B ti_attrname
is not
.IR NULL ,
it is
assumed to be a boolean attribute which will cause no search to be performed
if its value is
.BR FALSE .
The
.B ti_args
structure member will
have four strings in it:
.B "ti_args[ 0"
.B ]
should be the name
of an attribute whose values are used to help construct a search filter or
"-dn" is the distinguished name of the entry being displayed should be used,
.B ti_args[ 1
.B ]
should be a filter pattern where any
occurrences of "%v" are replaced with the value derived from  \fBti_args[ 0
]\fR, \fBti_args[ 2\fR
.B ]
should be the name of an additional
attribute to retrieve when performing the search, and 
.B ti_args[
.B 3 ]
should be a human-consumable name for that attribute.  The
.B ti_args[ 2
.B ]
attribute is typically displayed along with a
list of distinguished names when multiple entries are returned by the
search.
.sp
.LP
.B LDAP_SYN_LINKACTION
is used to define a link to another template by
name.
.BR "ti_args[ 0" " "
.B ]
will contain the name of the display
template to use.  The
.B ldap_name2template()
function can be used to
obtain a pointer to the correct
.B ldap_disptmpl
structure.
.sp
.LP
.B LDAP_SYN_ADDDNACTION
and
.B LDAP_SYN_VERIFYDNACTION
are reserved
as actions but currently undefined.
.SH ERRORS
.sp
.LP
The init template functions return
.B LDAP_TMPL_ERR_VERSION
if
.I buf
points to data that is newer than can be handled,
.B LDAP_TMPL_ERR_MEM
if there is a memory allocation problem,
.B LDAP_TMPL_ERR_SYNTAX
if there is a problem with the format of the
templates buffer or file.
.B LDAP_TMPL_ERR_FILE
is returned by
.B ldap_init_templates
if the file cannot be read.   Other functions
generally return
.I NULL
upon error.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
AvailabilitySUNWcsl (32-bit)
SUNWcslx (64-bit)
Interface StabilityEvolving
.TE

.SH SEE ALSO
.sp
.LP
.BR ldap (3LDAP),
.BR ldap_entry2text (3LDAP),
.BR ldaptemplates.conf (4),
.BR attributes (5)
