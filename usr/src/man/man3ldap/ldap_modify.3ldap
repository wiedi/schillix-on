'\" te
.\" Copyright (C) 1990, Regents of the University of Michigan.  All Rights Reserved.
.\" Portions Copyright (C) 2002, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ldap_modify 3LDAP "28 Jan 2002" "SunOS 5.11" "LDAP Library Functions"
.SH NAME
ldap_modify, ldap_modify_s, ldap_mods_free, ldap_modify_ext,
ldap_modify_ext_s \- LDAP entry modification functions
.SH SYNOPSIS
.LP
.nf
cc[ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. -lldap[ \fIlibrary\fR.\|.\|. ]
#include <lber.h>
#include <ldap.h>

\fBint\fR \fBldap_modify\fR(\fBLDAP\fR \fI*ld\fR, \fBchar\fR \fI*dn\fR, \fBLDAPMod\fR \fI*mods\fR[]);
.fi

.LP
.nf
\fBint\fR \fBldap_modify_s\fR(\fBLDAP\fR \fI*ld\fR, \fBchar\fR \fI*dn\fR, \fBLDAPMod\fR \fI*mods\fR[]);
.fi

.LP
.nf
\fBvoid\fR \fBldap_mods_free\fR(\fBLDAPMod\fR \fI**mods\fR, \fBint\fR \fIfreemods\fR);
.fi

.LP
.nf
\fBint\fR \fBldap_modify_ext\fR(\fBLDAP\fR \fI*ld\fR, \fBchar\fR \fI*dn\fR, \fBLDAPMod\fR \fI**mods\fR,
     \fBLDAPControl\fR \fI**serverctrls\fR, \fBLDAPControl\fR \fI**clientctrls\fR, \fBint\fR \fI*msgidp\fR);
.fi

.LP
.nf
\fBint\fR \fBldap_modify_ext_s\fR(\fBLDAP\fR \fI*ld\fR, \fBchar\fR \fI*dn\fR, \fBLDAPMod\fR \fI**mods\fR,
     \fBLDAPControl\fR \fI**serverctrls\fR, \fBLDAPControl\fR \fI**clientctrls\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The function
.B ldap_modify_s()
is used to perform an LDAP modify
operation.
.I dn
is the DN of the entry to modify, and
.I mods
is a
null-terminated array of modifications to make to the entry.   Each element
of the
.I mods
array is a pointer to an
.B LDAPMod
structure, which
is defined below.
.sp
.in +2
.nf
	typedef struct ldapmod {
	    int mod_op;
	    char *mod_type;
	    union {
		char **modv_strvals;
		struct berval **modv_bvals;
	      } mod_vals;
	    } LDAPMod;
	#define mod_values mod_vals.modv_strvals
	#define mod_bvalues mod_vals.modv_bvals
.fi
.in -2

.sp
.LP
The
.I mod_op
field is used to specify the type of modification to
perform and should be one of
.BR LDAP_MOD_ADD ,
.BR LDAP_MOD_DELETE ,
or
.BR LDAP_MOD_REPLACE .
The
.I mod_type
and
.I mod_values
fields
specify the attribute type to modify and a null-terminated array of values
to add, delete, or replace respectively.
.sp
.LP
If you need to specify a non-string value (for example, to add a photo or
audio attribute value), you should set
.I mod_op
to the logical OR of the
operation as above (for example,
.BR LDAP_MOD_REPLACE )
and the constant
.BR LDAP_MOD_BVALUES .
In this case,
.I mod_bvalues
should be used
instead of
.IR mod_values ,
and it should point to a null-terminated array
of struct bervals, as defined in 
.RB < lber.h >.
.sp
.LP
For
.B LDAP_MOD_ADD
modifications, the given values are added to the
entry, creating the attribute if necessary.  For 
.B LDAP_MOD_DELETE
modifications, the given values are deleted from the entry, removing the
attribute if no values remain.  If the entire attribute is to be deleted,
the
.I mod_values
field should be set to NULL.  For
.B LDAP_MOD_REPLACE
modifications, the attribute will have the listed
values after the modification, having been created if necessary.  All
modifications are performed in the order in which they are listed.
.sp
.LP
.B ldap_modify_s()
returns the LDAP error code resulting from the modify
operation.
.sp
.LP
The
.B ldap_modify()
operation works the same way as
.BR ldap_modify_s() ,
except that it is asynchronous, returning the message
id of the request it initiates, or  \fB\(mi1\fR on error.  The result of the
operation can be obtained by calling
.BR ldap_result (3LDAP).
.sp
.LP
.B ldap_mods_free()
can be used to free each element of a
null-terminated array of mod structures.  If
.I freemods
is non-zero, the
.I mods
pointer itself is freed as well.
.sp
.LP
The
.B ldap_modify_ext()
function initiates an asynchronous modify
operation and returns
.B LDAP_SUCCESS
if the request was successfully
sent to the server, or else it returns a LDAP error code if not. See
.BR ldap_error (3LDAP).
If successful,
.B ldap_modify_ext()
places the
message id of the request in
.IR *msgidp .
A subsequent call to
.BR ldap_result (3LDAP),
can be used to obtain the result of the add
request.
.sp
.LP
The
.B ldap_modify_ext_s()
function initiates a synchronous modify
operation and returns the result of the operation itself.
.SH ERRORS
.sp
.LP
.B ldap_modify_s()
returns an LDAP error code, either
.B LDAP_SUCCESS
or an error. See
.BR ldap_error (3LDAP).
.sp
.LP
.B ldap_modify()
returns  \fB\(mi1\fR in case of trouble, setting the
.B error
field of
.IR ld .
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
AvailabilitySUNWcsl (32-bit)
SUNWcslx (64-bit)
Interface StabilityEvolving
.TE

.SH SEE ALSO
.sp
.LP
.BR ldap (3LDAP),
.BR ldap_add (3LDAP),
.BR ldap_error (3LDAP),
.BR ldap_get_option (3LDAP),
.BR attributes (5)
