'\" te
.\" Copyright (C) 1990, Regents of the University of Michigan.  All Rights Reserved.
.\" Portions Copyright (C) 2002, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ldap_getfilter 3LDAP "28 Jan 2002" "SunOS 5.11" "LDAP Library Functions"
.SH NAME
ldap_getfilter, ldap_init_getfilter, ldap_init_getfilter_buf,
ldap_getfilter_free, ldap_getfirstfilter, ldap_getnextfilter,
ldap_setfilteraffixes, ldap_build_filter \- LDAP filter generating
functions
.SH SYNOPSIS
.LP
.nf
cc[ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. -lldap[ \fIlibrary\fR.\|.\|. ]
#include <lber.h>
#include <ldap.h>
#define LDAP_FILT_MAXSIZ	1024

\fBLDAPFiltDesc *\fBldap_init_getfilter\fR(\fBchar\fR \fI*file\fR);
.fi

.LP
.nf
\fBLDAPFiltDesc *\fBldap_init_getfilter_buf\fR(\fBchar\fR \fI*buf\fR, \fBlong\fR \fIbuflen\fR);
.fi

.LP
.nf
\fBldap_getfilter_free\fR(\fBLDAPFiltDesc\fR \fI*lfdp\fR);
.fi

.LP
.nf
\fBLDAPFiltInfo *\fBldap_getfirstfilter\fR(\fBLDAPFiltDesc\fR \fI*lfdp\fR, \fBchar\fR \fI*tagpat\fR,
     \fBchar\fR \fI*value\fR);
.fi

.LP
.nf
\fBLDAPFiltInfo *\fBldap_getnextfilter\fR(\fBLDAPFiltDesc\fR \fI*lfdp\fR);
.fi

.LP
.nf
\fBvoid\fR \fBldap_setfilteraffixes\fR(\fBLDAPFiltDesc\fR \fI*lfdp\fR, \fBchar\fR \fI*prefix\fR,
     \fBchar\fR \fI*suffix\fR);
.fi

.LP
.nf
\fBvoid\fR \fBldap_build_filter\fR(\fBchar\fR \fI*buf\fR, \fBunsigned long\fR \fIbuflen\fR, \fBchar\fR \fI*pattern\fR,
     \fBchar\fR \fI*prefix\fR, \fBchar\fR \fI*suffix\fR, \fBchar\fR \fI*attr\fR, \fBchar\fR \fI*value\fR,
     \fBchar\fR \fI**valwords\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions are used to generate filters to be used in
.BR ldap_search (3LDAP)
or
.BR ldap_search_s "(3LDAP). Either"
.B ldap_init_getfilter
or
.B ldap_init_getfilter_buf
must be called
prior to calling any of the other functions except
.BR ldap_build_filter .

.sp
.LP
.B ldap_init_getfilter()
takes a file name as its only argument.  The
contents of the file must be a valid LDAP filter configuration file (see
.BR ldapfilter.conf (4)).
If the file is successfully read, a pointer to an
.B LDAPFiltDesc
is returned.  This is an opaque object that is passed in
subsequent get filter calls.
.sp
.LP
.B ldap_init_getfilter_buf()
reads from
.IR buf ,
whose length is
.IR buflen ,
the LDAP filter configuration information.
.I buf
must
point to the contents of a valid LDAP filter configuration file. See
.BR ldapfilter.conf (4).
If the filter configuration information is
successfully read, a pointer to an
.B LDAPFiltDesc
is returned.  This is
an opaque object that is passed in subsequent get filter calls.
.sp
.LP
.B ldap_getfilter_free()
deallocates the memory consumed by
.BR ldap_init_getfilter .
Once it is called, the
.B LDAPFiltDesc
is no
longer valid and cannot be used again.
.sp
.LP
.B ldap_getfirstfilter()
retrieves the first filter that is appropriate
for
.I value.
Only filter sets that have tags that match the regular
expession
.I tagpat
are considered.
.B ldap_getfirstfilter
returns a
pointer to an
.B LDAPFiltInfo
structure, which contains a filter with
.I value
inserted as appropriate in
.B lfi_filter,
a text match
description in
.B "lfi_desc, lfi_scope"
set to indicate the search
scope, and
.B lfi_isexact
set to indicate the type of filter.
.I NULL
is returned if no matching filters are found.  
.B lfi_scope
will be one of
.BR LDAP_SCOPE_BASE ,
.BR LDAP_SCOPE_ONELEVEL ,
or
\fBLDAP_SCOPE_SUBTREE\&.\fR
.B lfi_isexact
will be zero if the
filter has any '~' or '*' characters in it and non-zero otherwise.
.sp
.LP
.B ldap_getnextfilter()
retrieves the next appropriate filter in the
filter set that was determined when
.B ldap_getfirstfilter
was called.
It returns
.I NULL
when the list has been exhausted.
.sp
.LP
.B ldap_setfilteraffixes()
sets a
.I prefix
to be prepended and a
.I suffix
to be appended to all filters returned in the future.
.sp
.LP
.B ldap_build_filter()
constructs an LDAP search filter in
.I buf.
.I buflen
is the size, in bytes, of the largest filter
.I buf
can
hold. A pattern for the desired filter is passed in
.I pattern.
Where the
.RI "string %a appears in the pattern it is replaced with" " attr."
.I prefix
is pre-pended to the resulting filter, and
.I suffix
is
.RI "appended. Either can be NULL , in which case they are not used." " value"
and
.I valwords
are used when the string %v appears in
.I pattern.
See
.BR ldapfilter.conf (4)
for a description of how %v is handled.
.SH ERRORS
.sp
.LP
.I NULL
is returned by
.B ldap_init_getfilter
if there is an error
reading \fIfile. NULL\fR
.B is returned
\fBby\fR
.B ldap_getfirstfilter
and
.B ldap_getnextfilter
when there are no
more appropriate filters to return.
.SH FILES
.sp
.ne 2
.mk
.na
.B ETCDIR/ldapfilter.conf
.ad
.RS 26n
.rt
LDAP filtering routine configuration file.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
AvailabilitySUNWcsl (32-bit)
SUNWcslx (64-bit)
Interface StabilityEvolving
.TE

.SH SEE ALSO
.sp
.LP
.BR ldap (3LDAP),
.BR ldapfilter.conf (4),
.BR attributes (5)
.SH NOTES
.sp
.LP
The return values for all of these functions are declared in the
.RB < ldap.h >
header file.  Some functions may allocate memory which must
be freed by the calling application.
