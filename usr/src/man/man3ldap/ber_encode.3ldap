'\" te
.\" Copyright (C) 1990, Regents of the University of Michigan.  All Rights Reserved.
.\" Portions Copyright (C) 2008, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ber_encode 3LDAP "6 Oct 2008" "SunOS 5.11" "LDAP Library Functions"
.SH NAME
ber_encode, ber_alloc, ber_printf, ber_put_int, ber_put_ostring,
ber_put_string, ber_put_null, ber_put_boolean, ber_put_bitstring,
ber_start_seq, ber_start_set, ber_put_seq, ber_put_set \- simplified Basic
Encoding Rules library encoding functions
.SH SYNOPSIS
.LP
.nf
cc[ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. -lldap[ \fIlibrary\fR.\|.\|. ]
#include <lber.h>

\fBBerElement *\fBber_alloc\fR();
.fi

.LP
.nf
\fBber_printf\fR(\fBBerElement\fR \fI*ber\fR, \fBchar\fR \fI**fmt\fR[, \fIarg\fR.\|.\|. ]);
.fi

.LP
.nf
\fBber_put_int\fR(\fBBerElement\fR \fI*ber\fR, \fBlong\fR \fInum\fR, \fBchar\fR \fItag\fR);
.fi

.LP
.nf
\fBber_put_ostring\fR(\fBBerElement\fR \fI*ber\fR, \fBchar\fR \fI**str\fR, \fBunsigned long\fR \fIlen\fR,
     \fBchar\fR \fItag\fR);
.fi

.LP
.nf
\fBber_put_string\fR(\fBBerElement\fR \fI*ber\fR, \fBchar\fR \fI**str\fR, \fBchar\fR \fItag\fR);
.fi

.LP
.nf
\fBber_put_null\fR(\fBBerElement\fR \fI*ber\fR, \fBchar\fR \fItag\fR);
.fi

.LP
.nf
\fBber_put_boolean\fR(\fBBerElement\fR \fI*ber\fR, \fBint\fR \fIbool\fR, \fBchar\fR \fItag\fR);
.fi

.LP
.nf
\fBber_put_bitstring\fR(\fBBerElement\fR \fI*ber\fR, \fBchar\fR \fI*str\fR, \fBint\fR \fIblen\fR, \fBchar\fR \fItag\fR);
.fi

.LP
.nf
\fBber_start_seq\fR(\fBBerElement\fR \fI*ber\fR, \fBchar\fR \fItag\fR);
.fi

.LP
.nf
\fBber_start_set\fR(\fBBerElement\fR \fI*ber\fR, \fBchar\fR \fItag\fR);
.fi

.LP
.nf
\fBber_put_seq\fR(\fBBerElement\fR \fI*ber\fR);
.fi

.LP
.nf
\fBber_put_set\fR(\fBBerElement\fR \fI*ber\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions provide a subfunction interface to a simplified
implementation of the Basic Encoding Rules of ASN.1.  The version of BER these
functions support is the one defined for the LDAP protocol.  The encoding
rules are the same as BER, except that  only definite form lengths are used,
and bitstrings and octet strings are always encoded in primitive form.  In
addition, these lightweight BER functions restrict tags and class to fit in a
single octet (this means the actual tag must be less than 31). When a "tag"is
specified in the descriptions below, it refers to the tag, class, and
primitive or constructed bit in the first octet of the encoding.  This man
page describes the encoding functions in the lber library.  See
.BR ber_decode (3LDAP)
for details on the corresponding decoding functions.
.sp
.LP
Normally, the only functions that need be called by an application are
.BR ber_alloc() ,
to allocate a
.B BER
element, and
.B ber_printf()
to
do the actual encoding.  The other functions are provided for those
applications that need more control than
.B ber_printf()
provides.  In
general, these functions return the length of the element encoded, or
\fB\(mi1\fR if an error occurred.
.sp
.LP
The
.B ber_alloc()
function is used to allocate a new BER element.
.sp
.LP
The
.B ber_printf()
function is used to encode a BER element in much the
same way that
.B sprintf(3S)
works.  One important difference, though, is
that some state information is kept with the
.I ber
parameter so that
multiple calls can be made to
.B ber_printf()
to append things to the end
of the BER element.
.B Ber_printf()
writes to
.IR ber ,
a pointer to a
.B BerElement
such as returned by
.BR ber_alloc() .
It interprets and
formats its arguments according to the format string
.BR fmt .
The format
string can contain the following characters:
.sp
.ne 2
.mk
.na
.B b
.ad
.RS 5n
.rt
Boolean.  An integer parameter should be supplied.  A boolean element is
output.
.RE

.sp
.ne 2
.mk
.na
.B B
.ad
.RS 5n
.rt
Bitstring.  A
.B "char *"
pointer to the start of the bitstring is supplied,
followed by the number of bits in the bitstring.  A bitstring element is
output.
.RE

.sp
.ne 2
.mk
.na
.B i
.ad
.RS 5n
.rt
Integer.  An integer parameter should be supplied.  An integer element is
output.
.RE

.sp
.ne 2
.mk
.na
.B n
.ad
.RS 5n
.rt
Null.  No parameter is required.  A null element is output.
.RE

.sp
.ne 2
.mk
.na
.B o
.ad
.RS 5n
.rt
Octet string.  A
.B "char *"
is supplied, followed by the length of the
string pointed to.  An octet string element is output.
.RE

.sp
.ne 2
.mk
.na
.B O
.ad
.RS 5n
.rt
Octet string.  A
.B "struct berval *"
is supplied.  An octet string element
is output.
.RE

.sp
.ne 2
.mk
.na
.B s
.ad
.RS 5n
.rt
Octet string.  A null-terminated string is supplied.  An octet string element
is output, not including the trailing null octet.
.RE

.sp
.ne 2
.mk
.na
.B t
.ad
.RS 5n
.rt
Tag.  An int specifying the tag to give the next element is provided. This
works across calls.
.RE

.sp
.ne 2
.mk
.na
.B v
.ad
.RS 5n
.rt
Several octet strings.  A null-terminated array of
.B "char *"
is supplied.
Note that a construct like '{v}' is required to get an actual sequence of
octet strings.
.RE

.sp
.ne 2
.mk
.na
.B {
.ad
.RS 5n
.rt
Begin sequence.  No parameter is required.
.RE

.sp
.ne 2
.mk
.na
.B }
.ad
.RS 5n
.rt
End sequence.  No parameter is required.
.RE

.sp
.ne 2
.mk
.na
.B [
.ad
.RS 5n
.rt
Begin set.  No parameter is required.
.RE

.sp
.ne 2
.mk
.na
.B ]
.ad
.RS 5n
.rt
End set.  No parameter is required.
.RE

.sp
.LP
The
.B ber_put_int()
function writes the integer element
.I num
to the
BER element
.IR ber .
.sp
.LP
The
.B ber_put_boolean()
function writes the boolean value given by
.I bool
to the BER element.
.sp
.LP
The
.B ber_put_bitstring()
function writes
.I blen
bits starting at
.I str
as a bitstring value to the given BER element.  Note that
.I blen
is the length in
.I bits
of the bitstring.
.sp
.LP
The
.B ber_put_ostring()
function writes
.I len
bytes starting at
.I str
to the BER element as an octet string.
.sp
.LP
The
.B ber_put_string()
function writes the null-terminated string (minus
the terminating '') to the BER element as an octet string.
.sp
.LP
The
.B ber_put_null()
function writes a
.I NULL
element to the BER
element.
.sp
.LP
The
.B ber_start_seq()
function is used to start a sequence in the BER
element. The
.B ber_start_set()
function works similarly. The end of the
sequence or set is marked by the nearest matching call to
.BR ber_put_seq()
or
.BR ber_put_set() ,
respectively.
.sp
.LP
The
.B ber_first_element()
function is used to return the tag and length
of the first element in a set or sequence.  It also returns in
.I cookie
a
magic cookie parameter that should be passed to subsequent calls to
.BR ber_next_element() ,
which returns similar information.
.SH EXAMPLES
.LP
.B Example 1
Assuming the following variable declarations, and that the
variables have been assigned appropriately, an BER encoding of the following
ASN.1 object:
.sp
.in +2
.nf
      AlmostASearchRequest := SEQUENCE {
          baseObject      DistinguishedName,
          scope           ENUMERATED {
              baseObject    (0),
              singleLevel   (1),
              wholeSubtree  (2)
          },
          derefAliases    ENUMERATED {
              neverDerefaliases   (0),
              derefInSearching    (1),
              derefFindingBaseObj (2),
              alwaysDerefAliases  (3N)
          },
          sizelimit       INTEGER (0 .. 65535),
          timelimit       INTEGER (0 .. 65535),
          attrsOnly       BOOLEAN,
          attributes      SEQUENCE OF AttributeType
      }
.fi
.in -2

.sp
.LP
can be achieved like so:
.sp
.in +2
.nf
      int    scope, ali, size, time, attrsonly;
      char   *dn, **attrs;

      /* .\|.\|. fill in values .\|.\|. */
      if ( (ber = ber_alloc(\|)) == NULLBER )
      /* error */

      if ( ber_printf( ber, "{siiiib{v}}", dn, scope, ali,
          size, time, attrsonly, attrs ) == -1 )
              /* error */
      else
              /* success */
.fi
.in -2

.SH RETURN VALUES
.sp
.LP
If an error occurs during encoding,
.B ber_alloc()
returns
.IR NULL ;
other functions generally return \fB\(mi1\fR\&.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsl (32-bit)
_
SUNWcslx (64-bit)
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR ber_decode (3LDAP),
.BR attributes (5)
.sp
.LP
Yeong, W., Howes, T., and Hardcastle-Kille, S., "Lightweight Directory Access
Protocol", OSI-DS-26, April 1992.
.sp
.LP
Information Processing - Open Systems Interconnection - Model and Notation -
Service Definition - Specification of Basic Encoding Rules for Abstract Syntax
Notation One, International Organization for Standardization, International
Standard 8825.
.SH NOTES
.sp
.LP
The return values for all of these functions are declared in
.BR <lber.h> .
