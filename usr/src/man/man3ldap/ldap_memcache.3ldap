'\" te
.\" Copyright (C) 1990, Regents of the University of Michigan.  All Rights Reserved.
.\" Portions Copyright (C) 2003, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ldap_memcache 3LDAP "6 Jan 2003" "SunOS 5.11" "LDAP Library Functions"
.SH NAME
ldap_memcache, ldap_memcache_init, ldap_memcache_set, ldap_memcache_get,
ldap_memcache_flush, ldap_memcache_destroy, ldap_memcache_update \- LDAP
client caching functions
.SH SYNOPSIS
.LP
.nf
\fBcc\fR \fB-flag \&.\|.\|.\fR \fIfile\fR\&.\|.\|.\fB-l\fRldap [\fB -library \&.\|.\|. \fR]
#include <ldap.h>

\fBint\fR \fBldap_memcache_init\fR(\fBunsigned long\fR \fIttl\fR, \fBunsigned long\fR \fIsize\fR,
     \fBchar **\fIbaseDNs\fR,\fBstruct ldap_thread_fns *\fIthread_fns\fR,
     \fBLDAPMemCache **\fIcachep\fR
.fi

.LP
.nf
\fBint\fR \fBldap_memcache_set\fR(\fBLDAP *\fIld\fR, \fBLDAPMemCache **\fIcache\fR
.fi

.LP
.nf
\fBint\fR \fBldap_memcache_get\fR(\fBLDAP *\fIld\fR, \fBLDAPMemCache **\fIcachep\fR
.fi

.LP
.nf
\fBvoid\fR \fBldap_memcache_flush\fR(\fBLDAPMemCache *\fIcache\fR, \fBchar *\fIdn\fR, \fBint\fR \fIscope\fR
.fi

.LP
.nf
\fBvoid\fR \fBldap_memcache_destroy\fR(\fBLDAPMemCache *\fIcache\fR
.fi

.LP
.nf
\fBvoid\fR \fBldap_memcache_update\fR(\fBLDAPMemCache *\fIcache\fR
.fi

.SH DESCRIPTION
.sp
.LP
Use the
.B ldap_memcache
functions to maintain an in-memory client side
cache to store search requests. Caching improves performance and reduces
.RI "network bandwidth when a client makes repeated requests. The" " cache"
uses search criteria as the key to the cached items. When you send a search
request, the
.I cache
checks the search criteria to determine if that
request has been previously stored . If the request was stored, the search
results are read from the
.IR cache .
.sp
.LP
Make a call to
.B ldap_memcache_init()
to create the in-memory client
side
.IR cache .
The function passes back a pointer to an
\fBLDAPMemCache\fR structure, which represents the
.IR cache .
Make a call
to the
.B ldap_memcache_set()
function to associate this
.I cache
with
an LDAP connection handle, an LDAP structure.
.I ttl
is the the maximum
amount of time (in seconds) that an item can be cached. If a
.I ttl
value
of 0 is passed, there is no limit to the amount of time that an item can be
cached.
.I size
is the maximum amount of memory (in bytes) that the cache
will consume. A zero value of
.I size
means the cache has  no size limit.
\fIbaseDNS\fR is an array of the base DN strings representing  the base DNs
of the search requests you want cached. If
.I baseDNS
is not
.IR NULL ,
only the search requests with the specified base DNs will be cached. If
\fIbaseDNS\fR is
.IR NULL ,
all search requests are cached. The
\fIthread_fns\fR parameter takes an \fBldap_thread_fns structure\fR
specifying the functions that you want used to ensure that the cache is
thread-safe. You should specify this if you have multiple threads that are
using the same connection handle and cache. If you are not using multiple
threads, pass
.I NULL
for this parameter.
.sp
.LP
\fBldap_memcache_set()\fR associates an in-memory \fIcache\fR that you have
already created by calling the
.B ldap_memcache_init()
function with an
LDAP connection handle. The
.I ld
parameter should be the result of a
successful call to
.BR ldap_open "(3LDAP). The"
.I cache
parameter should
be the result of a
.I cache
created by the
.BR ldap_memcache_init()
call. After you call this function, search requests made over the specified
LDAP connection will use this cache. To disassociate the cache from the LDAP
connection handle, make a call to the
.BR ldap_bind (3LDAP)
or
.BR ldap_bind (3LDAP)
function. Make a call to
.B ldap_memcache_set()
if
you want to associate  a cache with multiple LDAP connection handles. For
example, call the
.B ldap_memcache_get()
function to get the
.IR cache
associated with one connection, then you can call this function and
associate the
.I cache
with another connection.
.sp
.LP
The
.B ldap_memcache_get()
function gets the
.I cache
associated with
the specified connection handle (LDAP structure). This
.I cache
is used
by all search  requests made through that connection. When you call this
function, the function sets the
.I cachep
parameter as a pointer to the
\fBLDAPMemCache\fR structure that is associated with the connection
handle.
.sp
.LP
\fBldap_memcache_flush()\fR flushes search requests from the
.IR cache .
If the base DN of a search request is within the scope specified by the
\fIdn\fR and \fIscope\fR arguments, the search request is flushed from the
.IR cache .
If no DN is specified, the entire cache is flushed. The
\fIscope\fR parameter, along with the \fIdn\fR parameter, identifies the
search requests that you want flushed from the
.IR cache .
This argument
can have one of the following values:
.br
.in +2
.B LDAP_SCOPE_BASE
.in -2
.br
.in +2
.B LDAP_SCOPE_ONELEVEL
.in -2
.br
.in +2
.B LDAP_SCOPE_SUBTREE
.in -2
.sp
.LP
\fBldap_memcache_destroy()\fR frees the specified \fBLDAPMemCache\fR
structure pointed to by
.I cache
from memory. Call this function after
you are done working with a
.IR cache .
.sp
.LP
\fBldap_memcache_update()\fR checks the cache for items that have expired
and removes them. This check is typically done as part of the way the
\fIcache\fR normally works. You do not need to call this function unless you
want to update the
.I cache
at this point in time. This function is only
useful in a multithreaded application, since it will not return until the
\fIcache\fR is destroyed.
.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I ttl
.ad
.RS 14n
.rt
The maximum amount of time (in seconds) that an item can be cached
.RE

.sp
.ne 2
.mk
.na
.I size
.ad
.RS 14n
.rt
The maximum amount of memory (in bytes)  that the cache will consume.
.RE

.sp
.ne 2
.mk
.na
.I baseDNs
.ad
.RS 14n
.rt
An array of the base DN strings representing  the base DNs of the search
requests you want cached
.RE

.sp
.ne 2
.mk
.na
\fIthread_fns\fR
.ad
.RS 14n
.rt
A pointer to the \fBldap_thread_fns structure\fR structure.
.RE

.sp
.ne 2
.mk
.na
.I cachep
.ad
.RS 14n
.rt
A pointer to the
.B LDAPMemCache
structure
.RE

.sp
.ne 2
.mk
.na
.I cache
.ad
.RS 14n
.rt
The result of a
.I cache
created by the
.BR ldap_memcache_init()
call
.RE

.sp
.ne 2
.mk
.na
.I ld
.ad
.RS 14n
.rt
The result of a successful call to
.BR ldap_open (3LDAP)
.RE

.sp
.ne 2
.mk
.na
.I dn
.ad
.RS 14n
.rt
The search requests that you want flushed from the
.IR cache
.RE

.sp
.ne 2
.mk
.na
.I scope
.ad
.RS 14n
.rt
The search requests that you want flushed from the
.IR cache
.RE

.SH ERRORS
.sp
.LP
The functions that have
.B int
return values return
.BR LDAP_SUCCESS
if the operation was successful. Otherwise, they return another LDAP error
code. See \fBldap_error\fR(3LDAP) for a list of the LDAP error codes.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsl (32-bit)
_
SUNWcslx (64-bit)
_
Interface StabilityEvolving
.TE

.SH SEE ALSO
.sp
.LP
.BR ldap_error (3LDAP),
.BR ldap_open (3LDAP),
.BR ldap_search (3LDAP),
.BR attributes (5)
