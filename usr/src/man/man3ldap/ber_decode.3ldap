'\" te
.\" Copyright (C) 1990, Regents of the University of Michigan.  All Rights Reserved.
.\" Portions Copyright (C) 2009, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ber_decode 3LDAP "15 May 2009" "SunOS 5.11" "LDAP Library Functions"
.SH NAME
ber_decode, ber_alloc_t, ber_free, ber_bvdup, ber_init, ber_flatten,
ber_get_next, ber_skip_tag, ber_peek_tag, ber_scanf, ber_get_int,
ber_get_stringa, ber_get_stringal, ber_get_stringb, ber_get_null,
ber_get_boolean, ber_get_bitstring, ber_first_element, ber_next_element,
ber_bvfree, ber_bvecfree \- Basic Encoding Rules library decoding functions
.SH SYNOPSIS
.LP
.nf
cc[ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. -lldap[ \fIlibrary\fR.\|.\|. ]
#include <lber.h>

\fBBerElement *\fBber_alloc_t\fR(\fBint\fR \fIoptions\fR);
.fi

.LP
.nf
\fBstruct berval *\fBber_bvdup\fR(\fBconst struct berval *\fIbv\fR);
.fi

.LP
.nf
\fBvoid\fR \fBber_free\fR(\fBBerElement *\fIber\fR, \fBint\fR \fIfreebuf\fR);
.fi

.LP
.nf
\fBBerElement *\fBber_init\fR(\fBconst struct berval *\fIbv\fR);
.fi

.LP
.nf
\fBint\fR \fBber_flatten\fR(\fBBerElement *\fIber\fR, \fBstruct berval **\fIbvPtr\fR);
.fi

.LP
.nf
\fBber_tag_t\fBber_get_next\fR(\fBSockbuf *\fIsb\fR, \fBber_len_t *\fIlen\fR, \fBBerElement *\fIber\fR);
.fi

.LP
.nf
\fBber_tag_t\fR \fBber_skip_tag\fR(\fBBerElement *\fIber\fR, \fBber_len_t *\fIlen\fR);
.fi

.LP
.nf
\fBber_tag_t\fR \fBber_peek_tag\fR(\fBBerElement *\fIber\fR, \fBber_len_t *\fIlen\fR);
.fi

.LP
.nf
\fBber_tag_t\fR \fBber_get_int\fR(\fBBerElement *\fIber\fR, \fBber_int_t *\fInum\fR);
.fi

.LP
.nf
\fBber_tag_t\fR \fBber_get_stringb\fR(\fBBerElement *\fIber\fR, \fBchar *\fIbuf\fR,
     \fBber_len_t *\fIlen\fR);
.fi

.LP
.nf
\fBber_tag_t\fR \fBber_get_stringa\fR(\fBBerElement *\fIber\fR, \fBchar **\fIbuf\fR);
.fi

.LP
.nf
\fBber_tag_t\fR \fBber_get_stringal\fR(\fBBerElement *\fIber\fR, \fBstruct berval **\fIbv\fR);
.fi

.LP
.nf
\fBber_tag_t\fR \fBber_get_null\fR(\fBBerElement *\fIber\fR);
.fi

.LP
.nf
\fBber_tag_t\fR \fBber_get_boolean\fR(\fBBerElement *\fIber\fR, \fBint *\fIboolval\fR);
.fi

.LP
.nf
\fBber_tag_t\fR \fBber_get_bitstringa\fR(\fBBerElement *\fIber\fR, \fBchar **\fIbuf\fR,
     \fBber_len_t *\fIlen\fR);
.fi

.LP
.nf
\fBber_tag_t\fR \fBber_first_element\fR(\fBBerElement *\fIber\fR, \fBber_len_t *\fIlen\fR,
     \fBchar **\fIlast\fR);
.fi

.LP
.nf
\fBber_tag_t\fR \fBber_next_element\fR(\fBBerElement *\fIber\fR, \fBber_len_t *\fIlen\fR,
     \fBchar *\fIlast\fR);
.fi

.LP
.nf
\fBber_tag_t\fR \fBber_scanf\fR(\fBBerElement *\fIber\fR, \fBconst char *\fIfmt\fR [, arg.\|.\|.]);
.fi

.LP
.nf
\fBvoid\fR \fBber_bvfree\fR(\fBstruct berval *\fIbv\fR);
.fi

.LP
.nf
\fBvoid\fR \fBber_bvecfree\fR(\fBstruct berval **\fIbvec\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions provide a subfunction interface to a simplified
implementation of the Basic Encoding Rules of ASN.1.  The version of BER these
functions support is the one defined for the LDAP protocol.  The encoding
rules are the same as BER, except that  only definite form lengths are used,
and bitstrings and octet strings are always encoded in primitive form.  In
addition, these lightweight BER functions restrict tags and class to fit in a
single octet (this means the actual tag must be less than 31). When a "tag"is
specified in the descriptions below, it refers to the tag, class, and
primitive or constructed bit in the first octet of the encoding.  This man
page describes the decoding functions in the lber library.  See
.BR ber_encode (3LDAP)
for details on the corresponding encoding functions.
.sp
.LP
Normally, the only functions that need be called by an application are
.B ber_get_next()
to get the next BER element and
.B ber_scanf()
to do
the actual decoding.  In some cases,
.B ber_peek_tag()
may also need to be
called in normal usage. The other functions are provided for those
applications that need more control than
.B ber_scanf()
provides. In
general, these functions return the tag of the element decoded, or \fB\(mi1\fR
if an error occurred.
.sp
.LP
The
.B ber_get_next()
function is used to read the next BER element from
the given
.BR Sockbuf ,
.IR sb .
A
.B Sockbuf
consists of the descriptor
(usually socket, but a file descriptor works just as well) from which to read,
and a
.B BerElement
structure used to maintain a buffer.  On the first
call, the
.I sb_ber
struct should be zeroed.  It strips off and returns the
leading tag byte, strips off and returns the length of the entire element in
.IR len ,
and sets up
.I ber
for subsequent calls to
.BR ber_scanf() ,
and all to decode the element.
.sp
.LP
The
.B ber_peek_tag()
function returns the tag of the next element to be
parsed in the
.B BerElement
argument. The length of this element is stored
in the *\fIlenPtr\fR argument. \fBLBER_DEFAULT\fR is returned if there is no
further data to be read. The decoding position within the
.I ber
argument
is unchanged by this call; that is, the fact that
.B ber_peek_tag()
has
been called does not affect future use of
.IR ber .
.sp
.LP
The
.B ber_skip_tag()
function is similar to
.BR ber_peek_tag() ,
except
that the state pointer in the
.B BerElement
argument is advanced past the
first tag and length, and is pointed to the value part of the next element.
This function should only be used with constructed types and situations when a
BER encoding is used as the value of an OCTET STRING.  The length of the value
is stored in *\fIlenPtr\fR.
.sp
.LP
The
.B ber_scanf()
function is used to decode a BER element in much the
same way that  \fBscanf\fR(3C) works.  It reads from
.IR ber ,
a pointer to a
.B BerElement
such as returned by
.BR ber_get_next() ,
interprets the
bytes according to the format string
.BR fmt ,
and stores the results in its
additional arguments.  The format string contains conversion specifications
which are used to direct the interpretation of the BER element.  The format
string can contain the following characters.
.sp
.ne 2
.mk
.na
.B a
.ad
.RS 5n
.rt
Octet string.  A char ** should be supplied.  Memory is allocated, filled
with the contents of the octet string, null-terminated, and returned in the
parameter.
.RE

.sp
.ne 2
.mk
.na
.B s
.ad
.RS 5n
.rt
Octet string.  A char * buffer should be supplied, followed by a pointer to
an integer initialized to the size of the buffer.  Upon return, the
null-terminated octet string is put into the buffer, and the integer is set to
the actual size of the octet string.
.RE

.sp
.ne 2
.mk
.na
.B O
.ad
.RS 5n
.rt
Octet string.  A struct ber_val ** should be supplied, which upon return
points to a memory allocated struct berval containing the octet string and its
length.
.B ber_bvfree()
can be called to free the allocated memory.
.RE

.sp
.ne 2
.mk
.na
.B b
.ad
.RS 5n
.rt
Boolean.  A pointer to an integer should be supplied.
.RE

.sp
.ne 2
.mk
.na
.B i
.ad
.RS 5n
.rt
Integer.  A pointer to an integer should be supplied.
.RE

.sp
.ne 2
.mk
.na
.B B
.ad
.RS 5n
.rt
Bitstring.  A char ** should be supplied which will point to the memory
allocated bits, followed by an unsigned long *, which will point to the length
(in bits) of the bitstring returned.
.RE

.sp
.ne 2
.mk
.na
.B n
.ad
.RS 5n
.rt
Null.  No parameter is required.  The element is simply skipped if it is
recognized.
.RE

.sp
.ne 2
.mk
.na
.B v
.ad
.RS 5n
.rt
Sequence of octet strings.  A char *** should be supplied, which upon return
points to a memory allocated null-terminated array of char *'s containing the
octet strings.
.I NULL
is returned if the sequence is empty.
.RE

.sp
.ne 2
.mk
.na
.B V
.ad
.RS 5n
.rt
Sequence of octet strings with lengths. A struct berval *** should be
supplied, which upon return points to a memory allocated, null-terminated
array of struct berval *'s containing the octet strings and their lengths.
.I NULL
is returned if the sequence is empty.
.B ber_bvecfree()
can be
called to free the allocated memory.
.RE

.sp
.ne 2
.mk
.na
.B x
.ad
.RS 5n
.rt
Skip element.  The next element is skipped.
.RE

.sp
.ne 2
.mk
.na
.B {
.ad
.RS 5n
.rt
Begin sequence.  No parameter is required.  The initial sequence tag and
length are skipped.
.RE

.sp
.ne 2
.mk
.na
.B }
.ad
.RS 5n
.rt
End sequence.  No parameter is required and no action is taken.
.RE

.sp
.ne 2
.mk
.na
.B [
.ad
.RS 5n
.rt
Begin set.  No parameter is required.  The initial set tag and length are
skipped.
.RE

.sp
.ne 2
.mk
.na
.B ]
.ad
.RS 5n
.rt
End set.  No parameter is required and no action is taken.
.RE

.sp
.LP
The
.B ber_get_int()
function tries to interpret the next element as an
integer, returning the result in
.IR num .
The tag of whatever it finds is
returned on success,
.B -1
on failure.
.sp
.LP
The
.B ber_get_stringb()
function is used to read an octet string into a
pre-allocated buffer. The
.I len
parameter should be initialized to the
size of the buffer, and will contain the length of the octet string read upon
return. The buffer should be big enough to take the octet string value plus a
terminating
.I NULL
byte.
.sp
.LP
The
.B ber_get_stringa()
function is used to allocate memory space into
which an octet string is read.
.sp
.LP
The
.B ber_get_stringal()
function is used to allocate memory space into
which an octet string and its length are read.  It takes a \fBstruct berval
**\fR, and returns the result in this parameter.
.sp
.LP
The
.B ber_get_null()
function is used to read a
.I NULL
element.  It
returns the tag of the element it skips over.
.sp
.LP
The
.B ber_get_boolean()
function is used to read a boolean value. It is
called the same way that
.B ber_get_int()
is called.
.sp
.LP
The
.B ber_get_bitstringa()
function is used to read a bitstring value. It
takes a
.B "char **"
which will hold the allocated memory bits, followed by
an
.BR "unsigned long *" ,
which will point to the length (in bits) of the
bitstring returned.
.sp
.LP
The
.B ber_first_element()
function is used to return the tag and length
of the first element in a set or sequence. It also returns in
.I last
a
magic cookie parameter that should be passed to subsequent calls to
.BR ber_next_element() ,
which returns similar information.
.sp
.LP
The
.B ber_alloc_t()
function constructs and returns
.BR BerElement .
A
null pointer  is returned on error. The options field contains a bitwise-OR of
options which are to be used when generating the encoding of this
.BR BerElement .
One option is defined and must always be supplied:
.sp
.in +2
.nf
#define LBER_USE_DER 0x01
.fi
.in -2

.sp
.LP
When this option is present, lengths will always be encoded in the minimum
number of octets. Note that this option does not cause values of sets and
sequences to be rearranged in tag and byte order, so these functions are not
suitable for generating DER output as defined in  X.509 and X.680
.sp
.LP
The
.B ber_init
function constructs a
.B BerElement
and returns a new
.B BerElement
containing a copy of the data in the
.I bv
argument. The
.B ber_init
function returns the null pointer on error.
.sp
.LP
The \fBber_free()\fR function frees a \fBBerElement\fR which is returned from
the API calls
.B ber_alloc_t()
or
.BR ber_init() .
Each
.BR BerElement
must be freed by the caller. The second argument
.I freebuf
should always
be set to 1 to ensure that the internal buffer used by the BER functions is
freed as well as the
.B BerElement
container itself.
.sp
.LP
The
.B ber_bvdup()
function returns a copy of a
.IR berval .
The
.I bv_val
field in the returned
.I berval
points to a different area of
memory as the
.I bv_val
field in the argument
.IR berval .
The null
pointer is returned on  error (that is, is out of memory).
.sp
.LP
The
.B ber_flatten()
function allocates a
.B "struct  berval"
whose
contents are BER encoding taken from the
.I ber
.RI "argument. The" " bvPtr"
pointer points to the returned
.IR berval ,
which must be freed using
.BR ber_bvfree() .
This  function returns
.B 0
on success and  \fB\(mi1\fR
on error.
.SH EXAMPLES
.LP
.B Example 1
Assume the variable
.I ber
contains a lightweight BER
encoding of the following ASN.1 object:
.sp
.in +2
.nf
      AlmostASearchRequest := SEQUENCE {
          baseObject      DistinguishedName,
          scope           ENUMERATED {
              baseObject    (0),
              singleLevel   (1),
              wholeSubtree  (2)
          },
          derefAliases    ENUMERATED {
              neverDerefaliases   (0),
              derefInSearching    (1),
              derefFindingBaseObj (2),
              alwaysDerefAliases  (3N)
          },
          sizelimit       INTEGER (0 .. 65535),
          timelimit       INTEGER (0 .. 65535),
          attrsOnly       BOOLEAN,
          attributes      SEQUENCE OF AttributeType
      }
.fi
.in -2

.LP
.B Example 2
The element can be decoded using
.B ber_scanf()
as
follows.
.sp
.in +2
.nf
      int    scope, ali, size, time, attrsonly;
      char   *dn, **attrs;
      if ( ber_scanf( ber, "{aiiiib{v}}", &dn, &scope, &ali,
          &size, &time, &attrsonly, &attrs ) == -1 )
              /* error */
      else
              /* success */
.fi
.in -2

.SH ERRORS
.sp
.LP
If an error occurs during decoding, generally these functions return
.BR \(mi1 \&.
.SH NOTES
.sp
.LP
The return values for all of these functions are declared in the
.B <lber.h>
header.  Some functions may allocate memory which must be freed
by the calling application.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsl (32-bit)
_
SUNWcslx (64-bit)
_
Interface StabilityCommitted
.TE

.SH SEE ALSO
.sp
.LP
.BR ber_encode (3LDAP),
.BR attributes (5)
.sp
.LP
Yeong, W., Howes, T., and Hardcastle-Kille, S., "Lightweight Directory Access
Protocol", OSI-DS-26, April 1992.
.sp
.LP
Information Processing - Open Systems Interconnection - Model and Notation -
Service Definition - Specification of Basic Encoding Rules for Abstract Syntax
Notation One, International Organization for Standardization, International
Standard 8825.
