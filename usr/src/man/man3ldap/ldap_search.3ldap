'\" te
.\" Copyright (C) 1990, Regents of the University of Michigan.  All Rights Reserved.
.\" Portions Copyright (C) 2003, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ldap_search 3LDAP "05 Dec 2003" "SunOS 5.11" "LDAP Library Functions"
.SH NAME
ldap_search, ldap_search_s, ldap_search_ext, ldap_search_ext_s,
ldap_search_st \- LDAP search operations
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. -lldap[ \fIlibrary\fR.\|.\|.]
#include <sys/time.h> /* for struct timeval definition */
#include <lber.h>
#include <ldap.h>

\fBint\fR \fBldap_search\fR(\fBLDAP\fR \fI*ld\fR, \fBchar\fR \fI*base\fR, \fBint\fR \fIscope\fR, \fBchar\fR \fI*filter\fR,
     \fBchar\fR \fI*attrs\fR[], \fBint\fR \fIattrsonly\fR);
.fi

.LP
.nf
\fBint\fR \fBldap_search_s\fR(\fBLDAP\fR \fI*ld\fR, \fBchar\fR \fI*base\fR, \fBint\fR \fIscope\fR, \fBchar\fR \fI*filter\fR,
     \fBchar\fR \fI*attrs\fR[],\fBint\fR \fIattrsonly\fR, \fBLDAPMessage\fR \fI**res\fR);
.fi

.LP
.nf
\fBint\fR \fBldap_search_st\fR(\fBLDAP\fR \fI*ld\fR, \fBchar\fR \fI*base\fR, \fBint\fR \fIscope\fR, \fBchar\fR \fI*filter\fR,
     \fBchar\fR \fI*attrs\fR[], \fBint\fR \fIattrsonly\fR, \fBstruct timeval\fR \fI*timeout\fR,
     \fBLDAPMessage\fR \fI**res\fR);
.fi

.LP
.nf
\fBint\fR \fBldap_search_ext\fR(\fBLDAP\fR \fI*ld\fR, \fBchar\fR \fI*base\fR, \fBint\fR \fIscope\fR, \fBchar\fR
     \fI*filter\fR, \fBchar\fR \fI**attrs\fR,\ \fBint\fR \fIattrsonly\fR, \fBLDAPControl\fR \fI**serverctrls\fR,
     \fBLDAPControl\fR \fI**clientctrls\fR, \fBstruct timeval\fR \fI*timeoutp\fR,
     \fBint\fR \fIsizelimit\fR, \fBint\fR \fI*msgidp\fR);
.fi

.LP
.nf
\fBint\fR \fBldap_search_ext_s\fR(\fBLDAP\fR \fI*ld\fR,char \fI*base\fR, \fBint\fR \fIscope\fR, \fBchar\fR \fI*filter\fR,
     \fBchar\fR \fI**attrs\fR, \fBint\fR \fIattrsonly\fR, \fBLDAPControl\fR \fI**serverctrls\fR,
     \fBLDAPControl\fR \fI**clientctrls\fR, \fBstruct timeval\fR \fI*timeoutp\fR,
     \fBint\fR \fIsizelimit\fR, \fBLDAPMessage\fR \fI**res\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions are used to perform LDAP search operations. The
.B ldap_search_s()
function does the search synchronously (that is, not
.RB "returning until the operation completes). The" " ldap_search_st()"
function does the same, but allows a
.I timeout
to be specified. The
.B ldap_search()
function is the asynchronous version, initiating the
search and returning the message ID of the operation it initiated.
.sp
.LP
The
.I base
is the DN of the entry at which to start the search. The
.I scope
is the scope of the search and should be one of
.BR LDAP_SCOPE_BASE ,
to search the object itself,
.BR LDAP_SCOPE_ONELEVEL ,
to search the object's immediate children, or
.BR LDAP_SCOPE_SUBTREE ,
to search the object and all its descendents.
.sp
.LP
The
.I filter
is a string representation of the filter to apply in the
search. Simple filters can be specified as
.IR attributetype=attributevalue .
More complex filters are specified using
a prefix notation according to the following BNF:
.sp
.in +2
.nf
        <filter> ::= '(' <filtercomp> ')'
        <filtercomp> ::= <and> | <or> | <not> | <simple>
        <and> ::= '&' <filterlist>
        <or> ::= '|' <filterlist>
        <not> ::= '!' <filter>
        <filterlist> ::= <filter> | <filter> <filterlist>
        <simple> ::= <attributetype> <filtertype> <attributevalue>
        <filtertype> ::= '=' | '~=' | '<=' | '>='
.fi
.in -2

.sp
.LP
The '~=' construct is used to specify approximate matching. The
representation for <attributetype> and <attributevalue> are as described in
RFC 1778. In addition, <attributevalue> can be a single * to achieve an
attribute existence test, or can contain text and *'s interspersed to
achieve substring matching.
.sp
.LP
For example, the filter
.B mail=*
finds entries that have a mail
attribute. The filter
.B mail=*@terminator.rs.itd.umich.edu
finds entries
that have a mail attribute ending in the specified string. Use a backslash
(\fB\efR) to escape parentheses characters in a filter. See RFC 1588 for a
more complete description of the filters that are allowed. See
.BR ldap_getfilter (3LDAP)
for functions to help construct search filters
automatically.
.sp
.LP
The
.I attrs
is a null-terminated array of attribute types to return
from entries that match
.IR filter .
If
.B NULL
is specified, all
attributes are returned. The
.I attrsonly
is set to
.B 1
when
attribute types only are wanted. The
.I attrsonly
is set to
.B 0
when
both attributes types and attribute values are wanted.
.sp
.LP
The
.I sizelimit
argument returns the number of matched entries
specified for a search operation. When
.I sizelimit
is set to 50, for
example, no more than 50 entries are returned. When
.I sizelimit
is set
to 0, all matched entries are returned. The LDAP server can be configured to
send a maximum number of entries, different from the size limit specified.
If 5000 entries are matched in the database of a server configured to send a
maximum number of 500 entries, no more than 500 entries are returned even
when
.I sizelimit
is set to 0.
.sp
.LP
The
.B ldap_search_ext()
function initiates an asynchronous search
operation and returns
.B LDAP_SUCCESS
when the request is successfully
sent to the server. Otherwise,
.B ldap_search_ext()
returns an LDAP error
code. See \fBldap_error\fR(3LDAP). If successful, \fBldap_search_ext()\fR
places the message ID of the request in
.IR *msgidp .
A subsequent call to
.BR ldap_result (3LDAP)
can be used to obtain the result of the add
request.
.sp
.LP
The
.B ldap_search_ext_s()
function initiates a synchronous search
operation and returns the result of the operation itself.
.SH ERRORS
.sp
.LP
The
.B ldap_search_s()
and
.B ldap_search_st()
functions return the
LDAP error code that results from a search operation. See
.BR ldap_error (3LDAP)
for details.
.sp
.LP
The
.B ldap_search()
function returns \fB\(mi1\fR when the operation
terminates unsuccessfully.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for a description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
Interface StabilityEvolving
.TE

.SH SEE ALSO
.sp
.LP
.BR ldap (3LDAP),
.BR ldap_result (3LDAP),
.BR ldap_getfilter (3LDAP),
.BR ldap_error (3LDAP)
,
.BR attributes (5)
.sp
.LP
Howes, T., Kille, S., Yeong, W., Robbins, C., Wenn, J. \fIRFC 1778, The
String Representation of Standard Attribute Syntaxes\fR. Network Working
Group. March 1995.
.sp
.LP
Postel, J., Anderson, C.
.IR "RFC 1588, White Pages Meeting Report" .
Network Working Group. February 1994.
.SH NOTES
.sp
.LP
The read and list functionality are subsumed by
.BR ldap_search()
functions, when a filter such as
.B objectclass=*
is used with the scope
.B LDAP_SCOPE_BASE
to emulate read or the scope
.BR LDAP_SCOPE_ONELEVEL
to emulate list.
.sp
.LP
The
.B ldap_search()
functions may allocate memory which must be freed
by the calling application. Return values are contained in <\fBldap.h\fR>.

