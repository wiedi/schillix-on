'\" te
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1996, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH curs_kernel 3CURSES "31 Dec 1996" "SunOS 5.11" "Curses Library Functions"
.SH NAME
curs_kernel, def_prog_mode, def_shell_mode, reset_prog_mode,
reset_shell_mode, resetty, savetty, getsyx, setsyx, ripoffline, curs_set,
napms \- low-level curses routines
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lcurses\fR [ \fIlibrary\fR .\|.\|. ]
#include <curses.h>

\fBint\fR \fBdef_prog_mode\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBint\fR \fBdef_shell_mode\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBint\fR \fBreset_prog_mode\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBint\fR \fBreset_shell_mode\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBint\fR \fBresetty\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBint\fR \fBsavetty\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBint\fR \fBgetsyx\fR(\fBint\fR \fIy\fR, \fBint\fR \fIx\fR);
.fi

.LP
.nf
\fBint\fR \fBsetsyx\fR(\fBint\fR \fIy\fR, \fBint\fR \fIx\fR);
.fi

.LP
.nf
\fBint\fR \fBripoffline\fR(\fBint\fR \fIline\fR, \fBint (*\fIinit\fR)(WINDOW *, \fBint)\fR);
.fi

.LP
.nf
\fBint\fR \fBcurs_set\fR(\fBint\fR \fIvisibility\fR);
.fi

.LP
.nf
\fBint\fR \fBnapms\fR(\fBint\fR \fIms\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The following routines give low-level access to various \fBcurses\fR
functionality. Theses routines typically are used inside library routines.
.sp
.LP
The \fBdef_prog_mode()\fR and \fBdef_shell_mode()\fR routines save the
current terminal modes as the ``program''
.RB "(in " curses )
or ``shell''
(not in
.B "curses )"
state for use by the
.BR reset_prog_mode()
and
.B reset_shell_mode()
routines. This is done automatically by
.BR initscr() .
.sp
.LP
The
.B reset_prog_mode()
and
.B reset_shell_mode()
routines restore
the terminal to ``program''
.RB "(in " curses )
or ``shell'' (out of
.BR curses )
state. These are done automatically by
.B endwin()
and,
after an
.BR endwin() ,
by
.BR doupdate() ,
so they normally are not
called.
.sp
.LP
The
.B resetty()
and
.B savetty()
routines save and restore the state
of the terminal modes.
.B savetty()
saves the current state in a buffer
and
.B resetty()
restores the state to what it was at the last call to
.BR savetty() .
.sp
.LP
With the
.B getsyx()
routine, the current coordinates of the virtual
screen cursor are returned in
.I y
and
.I x.
If
.B leaveok()
is
currently
.BR TRUE ,
then \fB\(mi1\fR,\fB\(mi1\fR is returned. If lines
have been removed from the top of the screen, using
.BR ripoffline() ,
\fIy\fR and \fIx\fR include these lines; therefore, \fIy\fR and \fIx\fR
should be used only as arguments for
.BR setsyx() .
.sp
.LP
With the
.B setsyx()
routine, the virtual screen cursor is set to
.IR y ,
.IR x .
If
.I y
and
.I x
are both \fB\(mi1\fR, then
\fBleaveok()\fR is set. The two routines \fBgetsyx()\fR and \fBsetsyx()\fR
.RB "are designed to be used by a library routine, which manipulates" " curses"
windows but does not want to change the current position of the program's
cursor. The library routine would call
.B getsyx()
at the beginning, do
its manipulation of its own windows, do a \fBwnoutrefresh()\fR on its
windows, call
.BR setsyx() ,
and then call
.BR doupdate() .
.sp
.LP
The \fBripoffline()\fR routine provides access to the same facility that
\fBslk_init()\fR (see \fBcurs_slk\fR(3CURSES)) uses to reduce the size of
the screen. \fBripoffline()\fR must be called before
.B initscr()
or
\fBnewterm()\fR is called. If \fBline\fR is positive, a line is removed from
the top of
.BR stdscr() ;
if
.B line
is negative, a line is removed from
the bottom. When this is done inside
.BR initscr() ,
the routine
\fBinit()\fR (supplied by the user) is called with two arguments: a window
pointer to the one-line window that has been allocated and an integer with
the number of columns in the window. Inside this initialization routine, the
integer variables
.B LINES
and
.B COLS
(defined in
.BR <curses.h> )
are not guaranteed to be accurate and \fBwrefresh()\fR or \fBdoupdate()\fR
must not be called. It is allowable to call \fBwnoutrefresh()\fR during the
initialization routine.
.sp
.LP
\fBripoffline()\fR can be called up to five times before calling
\fBinitscr()\fR or
.BR newterm() .
.sp
.LP
With the
.B curs_set()
routine, the cursor state is set to invisible,
normal, or very visible for
.I visibility
equal to
.BR 0 ,
.BR 1 ,
or
\fB2\fR respectively. If the terminal supports the  \fIvisibility\fR
requested, the previous
.I cursor
state is returned; otherwise,
\fBERR\fR is returned.
.sp
.LP
The
.B napms()
routine is used to sleep for
.I ms
milliseconds.
.SH RETURN VALUES
.sp
.LP
Except for
.BR curs_set() ,
these routines always return
.BR OK .
\fBcurs_set()\fR returns the previous cursor state, or \fBERR\fR if the
requested
.I visibility
is not supported.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR curs_initscr (3CURSES),
.BR curs_outopts (3CURSES),
.BR curs_refresh (3CURSES),
.BR curs_scr_dump (3CURSES),
.BR curs_slk (3CURSES),
.BR curses (3CURSES),
.BR attributes (5)
.SH NOTES
.sp
.LP
The header <\fBcurses.h\fR> automatically includes the headers
<\fBstdio.h\fR> and <\fBunctrl.h\fR>.
.sp
.LP
Note that
.B getsyx()
is a macro, so an ampersand (\fB&\fR) is not
necessary before the variables
.I y
and
.IR x .
