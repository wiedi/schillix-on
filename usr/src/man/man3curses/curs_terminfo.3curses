'\" te
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1996, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH curs_terminfo 3CURSES "31 Dec 1996" "SunOS 5.11" "Curses Library Functions"
.SH NAME
curs_terminfo, setupterm, setterm, set_curterm, del_curterm, restartterm,
tparm, tputs, putp, vidputs, vidattr, mvcur, tigetflag, tigetnum, tigetstr \-
curses interfaces to terminfo database
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lcurses\fR [ \fIlibrary\fR .\|.\|. ]
#include <curses.h>
#include <term.h>

\fBint\fR \fBsetupterm\fR(\fBchar *\fIterm\fR, \fBint\fR \fIfildes\fR, \fBint *\fIerrret\fR);
.fi

.LP
.nf
\fBint\fR \fBsetterm\fR(\fBchar *\fIterm\fR);
.fi

.LP
.nf
\fBint\fR \fBset_curterm\fR(\fBTERMINAL *\fInterm\fR);
.fi

.LP
.nf
\fBint\fR \fBdel_curterm\fR(\fBTERMINAL *\fIoterm\fR);
.fi

.LP
.nf
\fBint\fR \fBrestartterm\fR(\fBchar *\fIterm\fR, \fBint\fR \fIfildes\fR, \fBint *\fIerrret\fR);
.fi

.LP
.nf
\fBchar *\fBtparm\fR(\fBchar *\fIstr\fR, \fBlong int\fR \fIp1\fR, \fBlong int\fR \fIp2\fR, \fBlong int\fR \fIp3\fR, \fBlong int\fR \fIp4\fR,
     \fBlong int\fR \fIp5\fR, \fBlong int\fR \fIp6\fR, \fBlong int\fR \fIp7\fR, \fBlong int\fR \fIp8\fR, \fBlong int\fR \fIp9\fR);
.fi

.LP
.nf
\fBint\fR \fBtputs\fR(\fBchar *\fIstr\fR, \fBint\fR \fIaffcnt\fR, \fBint (*\fIputc\fR)(\fIchar\fR));
.fi

.LP
.nf
\fBint\fR \fBputp\fR(\fBchar *\fIstr\fR);
.fi

.LP
.nf
\fBint\fR \fBvidputs\fR(\fBchtype\fR \fIattrs\fR, \fBint (*\fIputc\fR)(\fIchar\fR));
.fi

.LP
.nf
\fBint\fR \fBvidattr\fR(\fBchtype\fR \fIattrs\fR);
.fi

.LP
.nf
\fBint\fR \fBmvcur\fR(\fBint\fR \fIoldrow\fR, \fBint\fR \fIoldcol\fR, \fBint\fR \fInewrow\fR, \fBint\fR \fInewcol\fR);
.fi

.LP
.nf
\fBint\fR \fBtigetflag\fR(\fBchar *\fIcapname\fR);
.fi

.LP
.nf
\fBint\fR \fBtigetnum\fR(\fBchar *\fIcapname\fR);
.fi

.LP
.nf
\fBchar *\fBtigetstr\fR(\fBchar *\fIcapname\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These low-level routines must be called by programs that have to deal
directly with the \fIterminfo\fR database to handle certain terminal
capabilities, such as programming function keys. For all other functionality,
\fBcurses\fR routines are more suitable and their use is recommended.
.sp
.LP
Initially,
.B setupterm()
should be called. Note that
.B setupterm()
is
automatically called by
.B initscr()
and
.BR newterm() .
This defines the
set of terminal-dependent variables (listed in
.BR terminfo (4)).
The
\fIterminfo\fR variables \fBlines\fR and \fBcolumns\fR are initialized by
\fBsetupterm()\fR as follows:  If \fBuse_env(FALSE)\fR has been called, values
for
.B lines
and
.B columns
specified in \fIterminfo\fR are used.
Otherwise, if the environment variables
.B LINES
and
.B COLUMNS
exist,
their values are used. If these environment variables do not exist and the
program is running in a window, the current window size is used. Otherwise, if
the environment variables do not exist, the values for
.B lines
and
\fBcolumns\fR specified in the \fIterminfo\fR database are used.
.sp
.LP
The headers
.B <curses.h>
and
.B <term.h>
should be included (in this
order) to get the definitions for these strings, numbers, and flags.
Parameterized strings should be passed through
.B tparm()
to instantiate
them. All \fIterminfo\fR strings (including the output of
.BR tparm() )
should be printed with
.B tputs()
or
.BR putp() .
Call the
\fBreset_shell_mode()\fR routine to restore the tty modes before exiting (see
.BR curs_kernel (3CURSES)).
Programs which use cursor addressing should
output
.B enter_ca_mode
upon startup and should output
.BR exit_ca_mode
before exiting. Programs desiring shell escapes should call
\fBreset_shell_mode\fR and output \fBexit_ca_mode\fR before the shell is
called and should output
.B enter_ca_mode
and call
.BR reset_prog_mode
after returning from the shell.
.sp
.LP
The
.B setupterm()
routine reads in the \fIterminfo\fR database,
initializing the \fIterminfo\fR structures, but does not set up the output
virtualization structures used by
.BR curses .
The terminal type is the
character string
.I term;
if
.I term
is null, the environment variable
\fBTERM\fR is used. All output is to file descriptor \fIfildes\fR which is
initialized for output. If
.I errret
.RB "is not null, then" " setupterm()"
returns
.B OK
or
.B ERR
and stores a status value in the integer pointed
to by
.IR errret .
A status of
.B 1
in
.I errret
.RB "is normal," " 0"
means that the terminal could not be found, and \fB\(mi1\fR means that the
\fIterminfo\fR database could not be found. If \fIerrret\fR is null,
\fBsetupterm()\fR prints an error message upon finding an error and exits.
Thus, the simplest call is:
.sp
.LP
setupterm((char *)0, 1, (int *)0);,
.sp
.LP
which uses all the defaults and sends the output to
.BR stdout .
.sp
.LP
The
.B setterm()
routine is being replaced by
.BR setupterm() .
The
call:
.sp
.LP
\fBsetupterm(\fIterm\fR, 1, (int *)0)
.sp
.LP
provides the same functionality as \fBsetterm(\fIterm\fR). The
\fBsetterm()\fR routine is included here for compatibility and is supported at
Level 2.
.sp
.LP
The
.B set_curterm()
routine sets the variable
.B cur_term
to
.IR nterm ,
and makes all of the \fIterminfo\fR boolean, numeric, and string
variables use the values from
.IR nterm .
.sp
.LP
The
.B del_curterm()
routine frees the space pointed to by
.I oterm
and
makes it available for further use. If
.I oterm
is the same as
.BR cur_term ,
references to any of the \fIterminfo\fR boolean, numeric, and
string variables thereafter may refer to invalid memory locations until
another
.B setupterm()
has been called.
.sp
.LP
The
.B restartterm()
routine is similar to
.B setupterm()
and
.BR initscr() ,
except that it is called after restoring memory to a previous
state. It assumes that the windows and the input and output options are the
same as when memory was saved, but the terminal type and baud rate may be
different.
.sp
.LP
The
.B tparm()
routine instantiates the string
.I str
with parameters
.IR pi .
A pointer is returned to the result of
.I str
with the parameters
applied.
.sp
.LP
The
.B tputs()
routine applies padding information to the string
.IR str
and outputs it. The
.I str
must be a terminfo string variable or the return
value from
.BR tparm() ,
.BR tgetstr() ,
or
.BR tgoto() .
\fIaffcnt\fR is
the number of lines affected, or 1 if not applicable.
.I putc
is a
\fBputchar()\fR-like routine to which the characters are passed, one at a
time.
.sp
.LP
The \fBputp()\fR routine calls \fBtputs(\fIstr\fR, 1, putchar). Note that
the output of
.B putpA()
always goes to
.BR stdout ,
not to the
\fIfildes\fR specified in
.BR setupterm() .
.sp
.LP
The
.B vidputs()
routine displays the string on the terminal in the video
attribute mode
.IR attrs ,
which is any combination of the attributes listed
in
.BR curses "(3CURSES). The characters are passed to the"
\fBputchar()\fR-like routine \fBputc()\fR \fB\&.\fR
.sp
.LP
The
.B vidattr()
routine is like the
.B vidputs()
routine, except that
it outputs through
.BR putchar() .
.sp
.LP
The
.B mvcur()
routine provides low-level cursor motion.
.sp
.LP
The
.BR tigetflag() ,
\fBtigetnum()\fR and \fBtigetstr()\fR routines return
the value of the capability corresponding to the \fIterminfo capname\fR
passed to them, such as
.BR xenl .
.sp
.LP
With the \fBtigetflag()\fR routine, the value \fB\(mi1\fR is returned if
\fIcapname\fR is not a boolean capability.
.sp
.LP
With the
.B tigetnum()
routine, the value \fB\(mi2\fR is returned if
\fIcapname\fR is not a numeric capability.
.sp
.LP
With the
.B tigetstr()
routine, the value \fB(char *)\(mi1\fR is returned
if
.I capname
is not a string capability.
.sp
.LP
The
.I capname
for each capability is given in the table column entitled
\fIcapname\fR code in the capabilities section of \fBterminfo\fR(4).
.sp
.in +2
.nf
char *boolnames, *boolcodes, *boolfnames
char *numnames, *numcodes, *numfnames
char *strnames, *strcodes, *strfnames
.fi
.in -2

.sp
.LP
These null-terminated arrays contain the
.IR capnames ,
the
.IR termcap
codes, and the full C names, for each of the \fIterminfo\fR variables.
.SH RETURN VALUES
.sp
.LP
All routines return the integer
.B ERR
upon failure and an integer value
other than
.B ERR
upon successful completion, unless otherwise noted in the
preceding routine descriptions.
.sp
.LP
Routines that return pointers always return
.I NULL
on error.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR curs_initscr (3CURSES),
.BR curs_kernel (3CURSES),
.BR curs_termcap (3CURSES),
.BR curses (3CURSES),
.BR putc (3C),
.BR terminfo (4),
.BR attributes (5)
.SH NOTES
.sp
.LP
The header <\fBcurses.h\fR> automatically includes the headers
<\fBstdio.h\fR> and <\fBunctrl.h\fR>.
.sp
.LP
The
.B setupterm()
routine should be used in place of
.BR setterm() .
.sp
.LP
Note that
.B vidattr()
and
.B vidputs()
may be macros.
