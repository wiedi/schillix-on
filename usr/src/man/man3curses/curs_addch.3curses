'\" te
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1996, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH curs_addch 3CURSES "31 Dec 1996" "SunOS 5.11" "Curses Library Functions"
.SH NAME
curs_addch, addch, waddch, mvaddch, mvwaddch, echochar, wechochar \- add a
character (with attributes) to a curses window and advance cursor
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lcurses\fR [ \fIlibrary\fR .. ]
#include <curses.h>

\fBint\fR \fBaddch\fR(\fBchtype\fR \fIch\fR);
.fi

.LP
.nf
\fBint\fR \fBwaddch\fR(\fBWINDOW *\fIwin\fR, \fBchtype\fR \fIch\fR);
.fi

.LP
.nf
\fBint\fR \fBmvaddch\fR(\fBint\fR \fIy\fR, \fBint\fR \fIx\fR, \fBchtype\fR \fIch\fR);
.fi

.LP
.nf
\fBint\fR \fBmvwaddch\fR(\fBWINDOW *\fIwin\fR, \fBint\fR \fIy\fR, \fBint\fR \fIx\fR, \fBchtype\fR \fIch\fR);
.fi

.LP
.nf
\fBint\fR \fBechochar\fR(\fBchtype\fR \fIch\fR);
.fi

.LP
.nf
\fBint\fR \fBwechochar\fR(\fBWINDOW *\fIwin\fR, \fBchtype\fR \fIch\fR);
.fi

.SH DESCRIPTION
.sp
.LP
With the
.BR addch() ,
.BR waddch() ,
.BR mvaddch() ,
and
.B mvwaddch()
routines, the character
.I ch
is put into the window at
the current cursor position of the window and the position of the window
cursor is advanced. Its function is similar to that of
.BR putchar() .
At
the right margin, an automatic newline is performed. At the bottom of the
scrolling region, if
.B scrollok()
is enabled, the scrolling region is
scrolled up one line.
.sp
.LP
If
.I ch
is a tab, newline, or backspace, the cursor is moved
.RB "appropriately within the window. A newline also does a" " clrtoeol()"
before moving. Tabs are considered to be at every eighth column. If \fIch\fR
is another control character, it is drawn in the \fB^\fIX\fR notation.
Calling
.B winch()
after adding a control character does not return the
control character, but instead returns the representation of the control
character. See
.BR curs_inch (3CURSES).
.sp
.LP
Video attributes can be combined with a character by OR-ing them into the
parameter. This results in these attributes also being set. (The intent here
is that text, including attributes, can be copied from one place to another
using
.B inch()
and
.BR addch() .)
(see
.BR standout() ,
predefined
video attribute constants, on the
.BR curs_attr (3CURSES)
page).
.sp
.LP
The
.B echochar()
and
.B wechochar()
routines are functionally
equivalent to a call to
.B addch()
followed by a call to
.BR refresh() ,
or a call to
.B waddch
followed by a call to
.BR wrefresh() .
The
knowledge that only a single character is being output is taken into
consideration and, for non-control characters, a considerable performance
gain might be seen by using these routines instead of their equivalents.
.SS "Line Graphics"
.sp
.LP
The following variables may be used to add line drawing characters to the
screen with routines of the
.B addch()
family.  When variables are
defined for the terminal, the
.B A_ALTCHARSET
bit is turned on (see
.BR curs_attr (3CURSES)).
Otherwise, the default character listed below is
stored in the variable. The names chosen are consistent with the VT100
nomenclature.
.sp

.sp
.TS
tab() box;
cw(1.83i) |cw(1.25i) |cw(2.42i)
lw(1.83i) |lw(1.25i) |lw(2.42i)
.
NameDefaultGlyph Description
_
ACS_ULCORNER+upper left-hand corner
_
ACS_LLCORNER+lower left-hand corner
_
ACS_URCORNER+upper right-hand corner
_
ACS_LRCORNER+lower right-hand corner
_
ACS_RTEE+right tee
_
ACS_LTEE+left tee
_
ACS_BTEE+bottom tee
_
ACS_TTEE+top tee
_
ACS_HLINE-horizontal line
_
ACS_VLINE|vertical line
_
ACS_PLUS+plus
_
ACS_S1-scan line 1
_
ACS_S9-scan line 9
_
ACS_DIAMOND+diamond
_
ACS_CKBOARD:checker board (stipple)
_
ACS_DEGREE\&'degree symbol
_
ACS_PLMINUS#plus/minus
_
ACS_BULLETobullet
_
ACS_LARROW<arrow pointing left
_
ACS_RARROW>arrow pointing right
_
ACS_DARROWvarrow pointing down
_
ACS_UARROW^arrow pointing up
_
ACS_BOARD#board of squares
_
ACS_LANTERN#lantern symbol
_
ACS_BLOCK	#solid square block
.TE

.SH RETURN VALUES
.sp
.LP
All routines return the integer
.B ERR
upon failure and an integer value
other than
.B ERR
upon successful completion.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR curs_attr (3CURSES),
.BR curs_clear (3CURSES),
.BR curs_inch (3CURSES),
.BR curs_outopts (3CURSES),
.BR curs_refresh (3CURSES),
.BR curses (3CURSES),
.BR putc (3C),
.BR attributes (5)
.SH NOTES
.sp
.LP
The header <\fBcurses.h\fR> automatically includes the headers
<\fBstdio.h\fR> and <\fBunctrl.h\fR>.
.sp
.LP
Note that
.BR addch() ,
.BR mvaddch() ,
.BR mvwaddch() ,
and
.B echochar()
may be macros.
