'\" te
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1996, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH curs_inopts 3CURSES "31 Dec 1996" "SunOS 5.11" "Curses Library Functions"
.SH NAME
curs_inopts, cbreak, nocbreak, echo, noecho, halfdelay, intrflush, keypad,
meta, nodelay, notimeout, raw, noraw, noqiflush, qiflush, timeout, wtimeout,
typeahead \- curses terminal input option control routines
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lcurses\fR [ \fIlibrary\fR .\|.\|. ]
#include <curses.h>

\fBint\fR \fBcbreak\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBint\fR \fBnocbreak\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBint\fR \fBecho\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBint\fR \fBnoecho\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBint\fR \fBhalfdelay\fR(\fBint\fR \fItenths\fR);
.fi

.LP
.nf
\fBint\fR \fBintrflush\fR(\fBWINDOW *\fIwin\fR, \fBbool\fR \fIbf\fR);
.fi

.LP
.nf
\fBint\fR \fBkeypad\fR(\fBWINDOW *\fIwin\fR, \fBbool\fR \fIbf\fR);
.fi

.LP
.nf
\fBint\fR \fBmeta\fR(\fBWINDOW *\fIwin\fR, \fBbool\fR \fIbf\fR);
.fi

.LP
.nf
\fBint\fR \fBnodelay\fR(\fBWINDOW *\fIwin\fR, \fBbool\fR \fIbf\fR);
.fi

.LP
.nf
\fBint\fR \fBnotimeout\fR(\fBWINDOW *\fIwin\fR, \fBbool\fR \fIbf\fR);
.fi

.LP
.nf
\fBint\fR \fBraw\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBint\fR \fBnoraw\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBvoid\fR \fBnoqiflush\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBvoid\fR \fBqiflush\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBvoid\fR \fBtimeout\fR(\fBint\fR \fIdelay\fR);
.fi

.LP
.nf
\fBvoid\fR \fBwtimeout\fR(\fBWINDOW *\fIwin\fR, \fBint\fR \fIdelay\fR);
.fi

.LP
.nf
\fBint\fR \fBtypeahead\fR(\fBint\fR \fIfildes\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B cbreak()
and
.B nocbreak()
routines put the terminal into and out
of
.B cbreak()
mode, respectively. In this mode, characters typed by the
user are immediately available to the program, and erase/kill
character-processing is not performed. When out of this mode, the tty driver
buffers the typed characters until a newline or carriage return is typed.
Interrupt and flow control characters are unaffected by this mode. Initially
the terminal may or may not be in
.B cbreak()
mode, as the mode is
inherited; therefore, a program should call
.B cbreak()
or
.BR nocbreak()
explicitly. Most interactive programs using
.B curses
set the
.BR cbreak()
mode.
.sp
.LP
Note that
.B cbreak()
overrides
.BR raw() .
(See
.BR curs_getch (3CURSES)
for a discussion of how these routines interact with
.B echo()
and
.BR noecho() .)
.sp
.LP
The
.B echo()
and
.B noecho()
routines control whether characters typed
by the user are echoed by
.B getch()
as they are typed. Echoing by the tty
driver is always disabled, but initially
.B getch()
is in echo mode, so
characters typed are echoed. Authors of most interactive programs prefer to do
their own echoing in a controlled area of the screen, or not to echo at all, so
they disable echoing by calling
.BR noecho() .
(See
.BR curs_getch (3CURSES)
for a discussion of how these routines interact with
.B cbreak()
and
.BR nocbreak() .)
.sp
.LP
The
.B halfdelay()
routine is used for half-delay mode, which is similar to
.B cbreak()
mode in that characters typed by the user are immediately
available to the program. However, after blocking for
.I tenths
tenths of
seconds,
.B ERR
is returned if nothing has been typed. The value of
.I tenths
must be a number between 1 and 255. Use
.B nocbreak()
to leave
half-delay mode.
.sp
.LP
If the \fBintrflush()\fR option is enabled, (\fIbf\fR is
.BR TRUE ),
when an
interrupt key is pressed on the keyboard (interrupt, break, quit) all output in
the tty driver queue will be flushed, giving the effect of faster response to
the interrupt, but causing
.B curses
to have the wrong idea of what is on
the screen. Disabling (\fIbf\fR is
.BR FALSE ),
the option prevents the flush.
The default for the option is inherited from the tty driver settings. The
window argument is ignored.
.sp
.LP
The
.B keypad()
option enables the keypad of the user's terminal. If
enabled (\fIbf\fR is
.BR TRUE ),
the user can press a function key (such as an
arrow key) and
.B wgetch()
returns a single value representing the function
key, as in
.BR KEY_LEFT .
If disabled (\fIbf\fR is
.BR FALSE ),
.B curses
does not treat function keys specially and the program has to interpret the
escape sequences itself. If the keypad in the terminal can be turned on (made
to transmit) and off (made to work locally), turning on this option causes the
terminal keypad to be turned on when
.B wgetch()
is called.  The default
value for keypad is false.
.sp
.LP
Initially, whether the terminal returns 7 or 8 significant bits on input
depends on the control mode of the tty driver (see \fBtermio\fR(7I)). To force
8 bits to be returned, invoke \fBmeta\fR(\fIwin\fR,  \fBTRUE\fR). To force 7
bits to be returned, invoke \fBmeta\fR(\fIwin\fR,  \fBFALSE\fR). The window
argument,
.IR win ,
is always ignored. If the terminfo capabilities \fBsmm\fR
(meta_on) and
.B rmm
(meta_off) are  defined for the terminal,
.B smm
is
sent to the terminal when  \fBmeta\fR(\fIwin\fR, \fBTRUE\fR) is called and
\fBrmm\fR is sent when  \fBmeta\fR(\fIwin\fR, \fBFALSE\fR) is called.
.sp
.LP
The
.B nodelay()
option causes
.B getch()
to be a non-blocking call.  If
no input is ready,
.B getch()
returns
.BR ERR .
If disabled (\fIbf\fR is
.BR FALSE ),
.B getch()
waits until a key is pressed.
.sp
.LP
While interpreting an input escape sequence,
.B wgetch()
sets a timer while
waiting for the next character. If \fBnotimeout(\fIwin\fR, \fBTRUE\fR) is
called, then
.B wgetch()
does not set a timer. The purpose of the timeout is
to differentiate between sequences received from a function key and those typed
by a user.
.sp
.LP
With the
.B raw()
and
.B noraw()
routines, the terminal is placed into
or out of raw mode. Raw mode is similar to
.B cbreak()
mode, in that
characters typed are immediately passed through to the user program. The
differences are that in raw mode, the interrupt, quit, suspend, and flow
control characters are all passed through uninterpreted, instead of generating
a signal. The behavior of the
.B BREAK
key depends on other bits in the tty
driver that are not set by
.BR curses .
.sp
.LP
When the
.B noqiflush()
routine is used, normal flush of input and output
queues associated with the
.BR INTR ,
.B QUIT
and
.B SUSP
characters
will not be done (see \fBtermio\fR(7I)). When \fBqiflush()\fR is called, the
queues will be flushed when these control characters are read.
.sp
.LP
The
.B timeout()
and
.B wtimeout()
routines set blocking or non-blocking
read for a given window. If
.I delay
is negative, blocking read is used
(that is, waits indefinitely for input). If
.I delay
is zero, then
non-blocking read is used (that is, read returns
.B ERR
if no input is
waiting). If
.I delay
is positive, then read blocks for \fIdelay\fR
milliseconds, and returns
.B ERR
if there is still no input. Hence, these
routines provide the same functionality as
.BR nodelay() ,
plus the additional
capability of being able to block for only
.I delay
milliseconds (where
.I delay
is positive).
.sp
.LP
.B curses
does ``line-breakout optimization'' by looking for typeahead
periodically while updating the screen. If input is found, and it is coming
from a tty, the current update is postponed until
.B refresh()
or
.B doupdate()
is called again. This allows faster response to commands typed
in advance. Normally, the input
.B FILE
pointer passed to
.BR newterm() ,
or
.B stdin
in the case that
.B initscr()
was used, will be used to do
this typeahead checking. The
.B typeahead()
routine specifies that the file
descriptor
.I fildes
is to be used to check for typeahead instead. If
.I fildes
is \(mi1, then no typeahead checking is done.
.SH RETURN VALUES
.sp
.LP
All routines that return an integer return
.B ERR
upon failure and an
integer value other than
.B ERR
upon successful completion, unless otherwise
noted in the preceding routine descriptions.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR curs_getch (3CURSES),
.BR curs_initscr (3CURSES),
.BR curses (3CURSES),
.BR attributes (5),
.BR termio (7I)
.SH NOTES
.sp
.LP
The header <\fBcurses.h\fR> automatically includes the headers
<\fBstdio.h\fR> and <\fBunctrl.h\fR>.
.sp
.LP
Note that
.BR echo() ,
.BR noecho() ,
.BR halfdelay() ,
.BR intrflush() ,
.BR meta() ,
.BR nodelay() ,
.BR notimeout() ,
.BR noqiflush() ,
.BR qiflush() ,
.BR timeout() ,
and
.B wtimeout()
may be macros.
