'\" te
.\" Copyright 1989 AT&T  Copyright (c) 1990, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" 1990, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH fmlexpr 1F "5 Jul 1990" "SunOS 5.11" "FMLI Commands"
.SH NAME
fmlexpr \- evaluate arguments as an expression
.SH SYNOPSIS
.LP
.nf
\fBfmlexpr\fR \fIarguments\fR
.fi

.SH DESCRIPTION
.sp
.LP
The
.B fmlexpr
function evaluates its arguments as an expression. After
evaluation, the result is written on the standard output. Terms of the
.RB "expression must be separated by blanks. Characters special to" " FMLI"
must be escaped. Note that
.B 30
is returned to indicate a zero value,
rather than the null string. Strings containing blanks or other special
characters should be quoted. Integer-valued arguments may be preceded by a
unary minus sign. Internally, integers are treated as 32-bit, 2s complement
numbers.
.sp
.LP
The operators and keywords are listed below. Characters that need to be
.RB "escaped are preceded by " \e \&.
The list is in order of increasing
precedence, with equal precedence operators grouped within \fB{\|}\fR
symbols.
.SH USAGE
.SS "Expressions"
.sp
.ne 2
.mk
.na
\fIexpr \fB\e|\fI expr\fR
.ad
.sp .6
.RS 4n
Returns the first
.B expr
if it is neither
.I NULL
nor
.BR 0 ,
otherwise returns the second
.BR expr .
.RE

.sp
.ne 2
.mk
.na
\fIexpr \fB\e&\fI expr\fR
.ad
.sp .6
.RS 4n
Returns the first
.B expr
if neither
.B expr
is
.I NULL
or
.BR 0 ,
otherwise returns
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
.IR expr " {
.BR = ,
.BR \e> ,
.BR \e>= ,
.BR \e< ,
.BR \e<= ,
.BR != " }
.I expr
.ad
.sp .6
.RS 4n
Returns the result of an integer comparison if both arguments are integers,
otherwise returns the result of a lexical comparison.
.RE

.sp
.ne 2
.mk
.na
.I expr
{
.BR + ,
.BR \(mi " }
.I expr
.ad
.sp .6
.RS 4n
Addition or subtraction of integer-valued arguments.
.RE

.sp
.ne 2
.mk
.na
.I expr
{
.BR * ,
.BR / ,
.BR % " }
.I expr
.ad
.sp .6
.RS 4n
Multiplication, division, or remainder of the integer-valued arguments.
.RE

.sp
.ne 2
.mk
.na
\fIexpr\fB : \fIexpr\fR
.ad
.sp .6
.RS 4n
The matching operator
.B :
(colon) compares the first argument with the
second argument which must be a regular expression. Regular expression
syntax is the same as that of
.BR ed (1),
except that all patterns are
"anchored" (that is, begin with \fB^\fR) and, therefore, \fB^\fR is not a
special character, in that context. Normally, the matching operator returns
the number of bytes matched (\fB0\fR on failure). Alternatively, the
\fB(\|.\|.\|.\|)\fR pattern symbols can be used to return a portion of the
first argument.
.RE

.SH EXAMPLES
.LP
.B Example 1
Incrementing a variable
.sp
.LP
Add
.B 1
to the variable
.BR a :

.sp
.in +2
.nf
example% \fBfmlexpr\| $a\| +\| 1 | set \fB-l\fB a\fR
.fi
.in -2
.sp

.LP
.B Example 2
Setting a variable equal to a filename
.sp
.LP
For
.B $a
.RB "equal to either " /usr/abc/file " or just " file :

.sp
.in +2
.nf
example% \fBfmlexpr  $a  :   .*/\e(.*\e)  \e|  $a\fR
.fi
.in -2
.sp

.sp
.LP
returns the last segment of a path name (that is,
.BR file ).
Watch out
for
.B /
alone as an argument:
.B fmlexpr
will take it as the division
operator (see
.B NOTES
below).

.LP
.B Example 3
A better representation of Example 2
.sp
.in +2
.nf
example% \fBfmlexpr  //$a  :  .*/\e(.*\e)\fR
.fi
.in -2
.sp

.sp
.LP
The addition of the
.B //
characters eliminates any ambiguity about the
division operator (because it makes it impossible for the left-hand
expression to be interpreted as the division operator), and simplifies the
whole expression.

.LP
.B Example 4
Counting characters in a variable
.sp
.LP
Return the number of characters in
.BR $VAR:

.sp
.in +2
.nf
example% \fBfmlexpr $VAR : .*\fR
.fi
.in -2
.sp

.SH EXIT STATUS
.sp
.LP
As a side effect of expression evaluation,
.B fmlexpr
returns the
following exit values:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 5n
.rt
if the expression is neither
.I NULL
nor
.B 0
(that is, TRUE)
.RE

.sp
.ne 2
.mk
.na
.B 1
.ad
.RS 5n
.rt
if the expression
.I "is NULL"
or
.B 0
(that is, FALSE)
.RE

.sp
.ne 2
.mk
.na
.B 2
.ad
.RS 5n
.rt
for invalid expressions (that is, FALSE).
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
\fBATTRIBUTE TYPE\fR\fBATTRIBUTE VALUE\fR
_
AvailabilitySUNWcsu
.TE

.SH SEE ALSO
.sp
.LP
.BR ed (1),
.BR expr (1),
.BR set (1F),
.BR sh (1),
.BR attributes (5)
.SH DIAGNOSTICS
.sp
.ne 2
.mk
.na
.B syntax error
.ad
.RS 24n
.rt
for operator/operand errors
.RE

.sp
.ne 2
.mk
.na
.B non-numeric argument
.ad
.RS 24n
.rt
if arithmetic is attempted on such a string
.RE

.sp
.LP
In the case of syntax errors and non-numeric arguments, an error message
will be printed at the current cursor position. Use
.B refresh
to redraw
the screen.
.SH NOTES
.sp
.LP
After argument processing by
.B "FMLI, fmlexpr"
cannot tell the
difference between an operator and an operand except by the value. If
.B $a
is an
.BR = ,
the command:
.sp
.in +2
.nf
example% \fBfmlexpr $a = =\fR
.fi
.in -2
.sp

.sp
.LP
looks like:
.sp
.in +2
.nf
example% \fBfmlexpr = = =\fR
.fi
.in -2
.sp

.sp
.LP
as the arguments are passed to
.B fmlexpr
(and they will all be taken as
the
.B =
operator). The following works, and returns TRUE:
.sp
.in +2
.nf
example% \fBfmlexpr X$a = X=\fR
.fi
.in -2
.sp

