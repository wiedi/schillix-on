'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH coproc 1F "5 Jul 1990" "SunOS 5.11" "FMLI Commands"
.SH NAME
coproc, cocreate, cosend, cocheck, coreceive, codestroy \- communicate with
a process
.SH SYNOPSIS
.LP
.nf
\fBcocreate\fR [\fB-r\fR \fIrpath\fR] [\fB-w\fR \fIwpath\fR] [\fB-i\fR \fIid\fR] [\fB-R\fR \fIrefname\fR]
     [\fB-s\fR \fIsend_string\fR] [\fB-e\fR \fIexpect_string\fR] \fIcommand\fR
.fi

.LP
.nf
\fBcosend\fR [\fB-n\fR] \fIproc_id\fR \fIstring\fR
.fi

.LP
.nf
\fBcocheck\fR \fIproc_id\fR
.fi

.LP
.nf
\fBcoreceive\fR \fIproc_id\fR
.fi

.LP
.nf
\fBcodestroy\fR [\fB-R\fR \fIrefname\fR] \fIproc_id\fR [\fIstring\fR]
.fi

.SH DESCRIPTION
.sp
.LP
These co-processing functions provide a flexible means of interaction
between
.B FMLI
and an independent process;  especially, they enable
.B FMLI
to be responsive to asynchronous activity.
.sp
.LP
The
.B cocreate
function starts
.I command
as a co-process and
initializes communications by setting up pipes between
.B FMLI
and the
standard input and standard output of
.IR command .
The argument
.B command
must be an executable and its arguments (if any). This means
that
.I command
expects strings on its input (supplied by
.BR cosend )
and sends information on its output that can be handled in various ways by
FMLI.
.sp
.LP
The
.B cosend
function sends
.I string
to the co-process identified
by
.I proc_id
via the pipe set up by
.B cocreate
(optionally
.IR wpath ),
where
.I proc_id
can be either the
.I command
or
.I id
specified in
.BR cocreate .
By default,
.B cosend
blocks,
waiting for a response from the co-process. Also by default, 
.B FMLI
does not send a
.I send_string
and does not expect an
.IR expect_string
(except a newline). That is, it reads only one line of output from the
co-process. If
.BI -e " expect_string"
was not defined when the pipe
was created, then the output of the co-process is any single string followed
by a newline: any other lines of output remain on the pipe. If the
.B -e
option was specified when the pipe was created,
.B cosend
reads lines
from the pipe until it reads a line starting with
.IR expect_string .
All
lines except the line starting with
.I expect_string
become the output of
.BR cosend .
.sp
.LP
The
.B cocheck
function determines if input is available from the
process identified by
.IR proc_id ,
where
.I proc_id
can be either the
.B command
or
.B id
specified in
.BR cocreate .
It returns a Boolean
value, which makes
.B cocheck
useful in
.B if
statements and in other
backquoted expressions in Boolean descriptors.
.B cocheck
receives no
input from the co-process; it simply indicates if input is available from
the co-process. You must use
.B coreceive
to actually accept the input.
The
.B cocheck
function can be called from a
.B reread
descriptor to
force a frame to update when new data is available. This is useful when the
default value of a field in a form includes
.BR coreceive .
.sp
.LP
The
.B coreceive
function is used to read input from the co-process
identified by
.IR proc_id ,
where
.I proc_id
can be either the
.I command
or
.I id
specified in
.BR cocreate .
It should only be
used when it has been determined, using
.BR cocheck ,
that input is
actually available. If the
.B -e
option was used when the co-process was
created,
.B coreceive
will continue to return lines of input until
.I expect_string
is read. At this point,
.B coreceive
will terminate.
The output of
.B coreceive
is all the lines that were read excluding the
line starting with
.I expect_string
\&. If the
.B -e
option was not used
in the
.BR cocreate ,
each invocation of
.B coreceive
will return
exactly one line from the co-process. If no input is available when
.B coreceive
is invoked, it will simply terminate without producing
output.
.sp
.LP
The
.B codestroy
function terminates the read/write pipes to
.IR proc-id ,
where
.I proc_id
can be either the
.I command
or
.I id
specified in
.BR cocreate .
It generates a
.B SIGPIPE
signal to
the (child) co-process. This kills the co-process, unless the co-process
ignores the
.B SIGPIPE
signal. If the co-process ignores the
.BR SIGPIPE ,
it will not die, even after the
.B FMLI
process
terminates (the parent process id of the co-process will be
.BR 1 ).
.sp
.LP
The optional argument
.I string
is sent to the co-process before the
co-process dies. If
.I string
is not supplied, a  NULL string is passed,
followed by the normal
.I send_string
(newline by default). That is,
.B codestroy
will call \fBcosend
.IR "proc_id string" :
this implies
that
.B codestroy
will write any output generated by the co-process to
.IR stdout .
For example, if an interactive co-process is written to expect
a "quit" string when the communication is over, the \fBclose\fR descriptor
could be defined;
.B "close=`codestroy ID 'quit' | message`"
and any
output generated by the co-process when the string
.B quit
is sent to it
via
.B codestroy
(using
.BR cosend )
would be redirected to the message
line.
.sp
.LP
The
.B codestroy
function should usually be given the
.B -R
option,
since you may have more than one process with the same name, and you do not
want to kill the wrong one.
.B codestroy
keeps track of the number of
.I refnames
you have assigned to a process with
.BR cocreate ,
and when
the last instance is killed, it kills the process
.RI ( id )
for you.
.B codestroy
is typically called as part of a
.B close
descriptor
because
.B close
is evaluated when a frame is closed. This is important
because the co-process will continue to run if
.B codestroy
is not
issued.
.sp
.LP
When writing programs to use as co-processes, the following tips may be
useful. If the co-process program is written in C language, be sure to flush
output after writing to the pipe. (Currently,
.BR awk (1)
and
.BR sed (1)
cannot be used in a co-process program because they do not flush after lines
of output.) Shell scripts are well-mannered, but slow. C language is
recommended. If possible, use the default
.IR send_string ,
.I rpath
and
.IR wpath .
In most cases,
.I " expect_string"
will have to be specified.
This, of course, depends on the co-process.
.sp
.LP
In the case where asynchronous communication from a co-process is desired,
a co-process program should use
.B vsig
to force strings into the pipe
and then signal
.B FMLI
that output from the co-process is available.
This causes the
.B reread
descriptor of all frames to be evaluated
immediately.
.SH OPTIONS
.sp
.LP
.B cocreate
options are:
.sp
.ne 2
.mk
.na
.BI -r " rpath"
.ad
.RS 20n
.rt
If
.B -r
is specified,
.I rpath
is the pathname from which
.B FMLI
reads information. This option is usually used to set up
communication with processes that naturally write to a certain path. If
.B -r
is not specified,
.B cocreate
will choose a unique path in
.BR /var/tmp .
.RE

.sp
.ne 2
.mk
.na
.BI -w " wpath"
.ad
.RS 20n
.rt
If
.B -w
is specified,
.I wpath
is the pathname to which
.BR cosend
writes information. This option is usually used so that one process can talk
to many different
.B FMLI
processes through the same pipe. If
.B -w
is
not specified,
.B cocreate
will choose a unique path in
.BR /var/tmp .
.RE

.sp
.ne 2
.mk
.na
.BI -i " id"
.ad
.RS 20n
.rt
If
.B -i
is specified,
.B id
is an alternative name for the
co-processinitialized by this
.BR cocreate .
If
.B -i
is not specified,
.I id
defaults to
.IR command .
The argument
.I id
can later be used
with the other co-processing functions rather than
.IR command .
This
option is typically used, since it facilitates the creation of two or more
co-processes generated from the same
.IR command .
(For example,
.B "cocreate -i"
.B "ID1 program args"
and
.BR "cocreate -i"
\fBID2 program different_args\fR).
.RE

.sp
.ne 2
.mk
.na
.BI -R " refname"
.ad
.RS 20n
.rt
If
.B -R
is specified,
.I refname
is a local name for the co-process.
Since the
.B cocreate
function can be issued more than once, a
.I refname
is useful when the same co-process is referenced a second or
subsequent time. With the
.B -R
option, if the co-process already exists
a new one will not be created: the same pipes will be shared. Then,
.I refname
can be used as an argument to the
.B -R
option to
.B codestroy
when you want to end a particular connection to a co-process
and leave other connections undisturbed. (The co-process is only killed
after
.B " codestroy"
.B -R
has been called as many times as
.B cocreate -R
was called.)
.RE

.sp
.ne 2
.mk
.na
.BI -s " send_string"
.ad
.RS 20n
.rt
The
.B -s
option specifies
.I send_string
as a string that will be
appended to all output sent to the co-process using
.BR cosend .
This
option allows a co-process to know when input from
.B FMLI
has
completed. The default
.I send_string
is a newline if
.B -s
is not
specified.
.RE

.sp
.ne 2
.mk
.na
.BI -e " expect_string"
.ad
.RS 20n
.rt
The
.B -e
option specifies
.I expect_string
as a string that
identifies the end of all output returned by the co-process. (Note:
.I expect_string
need only be the initial part of a line, and there must
be a newline at the end of the co-process output.) This option allows
.B FMLI
to know when output from the co-process has completed. The
default
.I expect_string
is a newline if
.B -e
is not specified.
.RE

.sp
.LP
.B cosend
options are:
.sp
.ne 2
.mk
.na
.B -n
.ad
.RS 6n
.rt
If the
.B -n
option is specified,
.B cosend
will not wait for a
response from the co-process. It simply returns, providing no output. If the
.B -n
option is not used, a co-process that does not answer will cause
.B FMLI
to permanently hang, waiting for input from the co-process.
.RE

.SH EXAMPLES
.LP
.B Example 1
Sample commands
.sp
.in +2
.nf
\fB   .
   .
   .
init=`cocreate \fB-i\fB BIGPROCESS initialize`
close=`codestroy BIGPROCESS`
   .
   .
   .
reread=`cocheck BIGPROCESS`

name=`cosend \fB-n\fB BIGPROCESS field1`
   .
   .
   .
name="Receive field"
inactive=TRUE
value=`coreceive BIGPROCESS`\fR
.fi
.in -2
.sp

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
.TE

.SH SEE ALSO
.sp
.LP
.BR awk (1),
.BR cat (1),
.BR sed (1),
.BR vsig (1F),
.BR attributes (5)
.SH NOTES
.sp
.LP
If
.B cosend
is used without the
.B -n
option, a co-process that does
not answer will cause
.B FMLI
to permanently hang.
.sp
.LP
The use of non-alphabetic characters in input and output strings to a
co-process should be avoided because they may not get transferred correctly.

