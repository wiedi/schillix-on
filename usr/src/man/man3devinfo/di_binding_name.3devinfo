'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH di_binding_name 3DEVINFO "22 Mar 2004" "SunOS 5.11" "Device Information Library Functions"
.SH NAME
di_binding_name, di_bus_addr, di_compatible_names, di_devid,
di_driver_name, di_driver_ops, di_driver_major, di_instance, di_nodeid,
di_node_name \- return libdevinfo node information
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-ldevinfo\fR [ \fIlibrary\fR.\|.\|. ]
#include <libdevinfo.h>

\fBchar *\fBdi_binding_name\fR(\fBdi_node_t\fR \fInode\fR);
.fi

.LP
.nf
\fBchar *\fBdi_bus_addr\fR(\fBdi_node_t\fR \fInode\fR);
.fi

.LP
.nf
\fBint\fR \fBdi_compatible_names\fR(\fBdi_node_t\fR \fInode\fR, \fBchar **\fInames\fR);
.fi

.LP
.nf
\fBddi_devid_t\fR \fBdi_devid\fR(\fBdi_node_t\fR \fInode\fR);
.fi

.LP
.nf
\fBchar *\fBdi_driver_name\fR(\fBdi_node_t\fR \fInode\fR);
.fi

.LP
.nf
\fBuint_t\fR \fBdi_driver_ops\fR(\fBdi_node_t\fR \fInode\fR);
.fi

.LP
.nf
\fBint\fR \fBdi_driver_major\fR(\fBdi_node_t\fR \fInode\fR);
.fi

.LP
.nf
\fBint\fR \fBdi_instance\fR(\fBdi_node_t\fR \fInode\fR);
.fi

.LP
.nf
\fBint\fR \fBdi_nodeid\fR(\fBdi_node_t\fR \fInode\fR);
.fi

.LP
.nf
\fBchar *\fBdi_node_name\fR(\fBdi_node_t\fR \fInode\fR);
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I names
.ad
.RS 9n
.rt
The address of a pointer.
.RE

.sp
.ne 2
.mk
.na
.I node
.ad
.RS 9n
.rt
A  handle to a device node.
.RE

.SH DESCRIPTION
.sp
.LP
These functions extract information associated with a device node.
.SH RETURN VALUES
.sp
.LP
The
.B di_binding_name()
function returns a pointer to the binding name.
The binding name is the name used by the system to select a driver for the
device.
.sp
.LP
The
.B di_bus_addr()
function returns a pointer to a null-terminated
string containing the assigned bus address for the device.
.B NULL
is
returned if a bus address has not been assigned to the device. A zero-length
string may be returned and is considered a valid bus address.
.sp
.LP
The return value of
.B di_compatible_names()
is the number of compatible
names.
.I names
is updated to point to a buffer contained within the
snapshot. The buffer contains a concatenation of null-terminated strings,
for example:
.sp
.in +2
.nf
<\fIname1\fR>/0<\fIname2\fR>/0.\|.\|.<\fInamen\fR>/0
.fi
.in -2

.sp
.LP
See the discussion of generic names in
.I "Writing Device Drivers"
for a
description of how compatible names are used by Solaris to achieve driver
binding for the node.
.sp
.LP
The
.B di_devid()
function returns the device
.B ID
for
.IR node ,
if it is registered. Otherwise, a null pointer is returned. Interfaces in
the
.BR libdevid "(3LIB) library may be used to manipulate the handle to the"
device id. This function is obsolete and might be removed from a future
Solaris release. Applications should use the "devid" property instead.
.sp
.LP
The
.B di_driver_name()
function returns the name of the driver bound to
the
.IR node .
A null pointer is returned if
.I node
is not bound to
any driver.
.sp
.LP
The
.B di_driver_ops()
function returns a bit array of  device driver
entry points that are supported by the driver bound to this
.IR node .
Possible bit fields supported by the driver are
.BR DI_CB_OPS ,
.BR DI_BUS_OPS ,
.BR DI_STREAM_OPS .
.sp
.LP
The
.B di_driver_major()
function returns the major number associated
with the driver bound to
.IR node .
If there is no driver bound to the
node, this function returns \(mi1.
.sp
.LP
The
.B di_instance()
function returns the instance number of the device.
A value of
.B -1
indicates an instance number has not been assigned to
the device by the system.
.sp
.LP
The
.B di_nodeid()
function returns  the type of device, which may be
one of the following possible values:
.BR DI_PSEUDO_NODEID ,
.BR DI_PROM_NODEID ,
and
.BR DI_SID_NODEID .
Devices of type
\fBDI_PROM_NODEID\fR may have additional properties that are defined by the
.BR PROM .
See
.BR di_prom_prop_data "(3DEVINFO) and"
.BR di_prom_prop_lookup_bytes (3DEVINFO).
.sp
.LP
The
.B di_node_name()
function returns a pointer to a null-terminated
string containing the node name.
.SH EXAMPLES
.sp
.LP
See \fBdi_init\fR(3DEVINFO) for an example demonstrating typical use of
these functions.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving (\fBdi_devid()\fR is obsolete)
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR di_init (3DEVINFO),
.BR di_prom_init (3DEVINFO),
.BR di_prom_prop_data (3DEVINFO),
.BR di_prom_prop_lookup_bytes (3DEVINFO),
.BR libdevid (3LIB),
.BR libdevinfo (3LIB),
.BR attributes (5)
.sp
.LP
.I Writing Device Drivers
