'\" te
.\"  Portions Copyright 1989 AT&T Portions Copyright (c) 1985, 1995 Regents of the University of California.
.\" Copyright (C) 2006, Sun Microsystems, Inc. All Rights Reserved
.TH resolver 3RESOLV "26 Dec 2006" "SunOS 5.11" "Resolver Library Functions"
.SH NAME
resolver, res_ninit, fp_resstat, res_hostalias, res_nquery, res_nsearch,
res_nquerydomain, res_nmkquery, res_nsend, res_nclose, res_nsendsigned,
dn_comp, dn_expand, hstrerror, res_init, res_query, res_search, res_mkquery,
res_send, herror, res_getservers, res_setservers, res_ndestroy \- resolver
routines
.SH SYNOPSIS
.LP
.nf
BIND 8.2.2 Interfaces
.fi

.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lresolv\fR \fB -lsocket \fR \fB -lnsl \fR [ \fIlibrary\fR .\|.\|. ]
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/nameser.h>
#include <resolv.h>
#include <netdb.h>

\fBint\fR \fBres_ninit\fR(\fBres_state\fR \fIstatp\fR);
.fi

.LP
.nf
\fBvoid\fR \fBres_ndestroy\fR(\fBres_state\fR \fIstatp\fR);
.fi

.LP
.nf
\fBvoid\fR \fBfp_resstat\fR(\fBconst res_state\fR \fIstatp\fR, \fBFILE *\fIfp\fR);
.fi

.LP
.nf
\fBconst char *\fBres_hostalias\fR(\fBconst res_state\fR \fIstatp\fR, \fBconst char *\fIname\fR,
     \fBchar *\fR \fIname\fR, \fBchar *\fIbuf\fR, \fBsize_t\fIbuflen\fR);
.fi

.LP
.nf
\fBint\fR \fBres_nquery\fR(\fBres_state\fR \fIstatp\fR, \fBconst char *\fIdname\fR, \fBint\fR \fIclass\fR, \fBint\fR \fItype\fR,
     \fBu_char *\fIanswer\fR, \fBint\fR \fIdatalen\fR, \fBint\fR \fIanslen\fR);
.fi

.LP
.nf
\fBint\fR \fBres_nsearch\fR(\fBres_state\fR \fIstatp\fR, \fBconst char *\fIdname\fR, \fBint\fR \fIclass\fR, \fBint\fR \fItype\fR,
     \fBu_char *\fIanswer\fR, \fBint\fR \fIanslen\fR);
.fi

.LP
.nf
\fBint\fR \fBres_nquerydomain\fR(\fBres_state\fR \fIstatp\fR, \fBconst char *\fIname\fR,
     \fBconst char *\fIdomain\fR, \fBint\fR \fIclass\fR, \fBint\fR \fItype\fR,
     \fBu_char *\fIanswer\fR, \fBint\fR \fIanslen\fR);
.fi

.LP
.nf
\fBint\fR \fBres_nmkquery\fR(\fBres_state\fR \fIstatp\fR, \fBint\fR \fIop\fR, \fBconst char *\fIdname\fR, \fBint\fR \fIclass\fR,
     \fBint\fR \fItype\fR, \fBu_char *\fIanswer\fR, \fBint\fR \fIdatalen\fR,
     \fBint\fR \fIanslen\fR);
.fi

.LP
.nf
\fBint\fR \fBres_nsend\fR(\fBres_state\fR \fIstatp\fR, \fBconst u_char *\fImsg\fR, \fBint\fR \fImsglen\fR,
     \fBu_char *\fIanswer\fR, \fBint\fR \fIanslen\fR);
.fi

.LP
.nf
\fBvoid\fR \fBres_nclose\fR(\fBres_state\fR \fIstatp\fR);
.fi

.LP
.nf
\fBint\fR \fBres_snendsigned\fR(\fBres_state\fR \fIstatp\fR, \fBconst u_char *\fImsg\fR,
     \fBint\fR \fImsglen\fR, \fBns_tsig_key *\fIkey\fR, \fBu_char *\fIanswer\fR, \fBint\fR \fIanslen\fR);
.fi

.LP
.nf
\fBint\fR \fBdn_comp\fR(\fBconst char *\fIexp_dn\fR, \fBu_char *\fIcomp_dn\fR, \fBint\fR \fIlength\fR,
     \fBu_char **\fIdnptrs\fR, \fB**\fIlastdnptr\fR);
.fi

.LP
.nf
\fBint\fR \fBdn_expand\fR(\fBconst u_char *\fImsg\fR, \fB*\fIeomorig\fR, \fB*\fIcomp_dn\fR, \fBchar *\fIexp_dn\fR,
     \fBint\fR \fIlength\fR);
.fi

.LP
.nf
\fBconst char *\fBhstrerror\fR(\fBint\fR \fIerr\fR);
.fi

.LP
.nf
\fBvoid\fR \fBres_setservers\fR(\fBres_state\fR \fIstatp\fR, \fBconst union res_sockaddr_union *\fIset\fR,
     \fBint\fR \fIcnt\fR);
.fi

.LP
.nf
\fBint\fR \fBres_getservers\fR(\fBres_state\fR \fIstatp\fR, \fBunion res_sockaddr_union *\fIset\fR,
     \fBint\fR \fIcnt\fR);
.fi

.LP
.nf
Deprecated Interfaces
.fi

.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lresolv\fR \fB -lsocket \fR \fB -lnsl \fR [ \fIlibrary\fR .\|.\|. ]
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/nameser.h>
#include <resolv.h>
#include <netdb.h>

\fBint\fR \fBres_init\fR(void)
.fi

.LP
.nf
\fBint\fR \fBres_query\fR(\fBconst char *\fIdname\fR, \fBint\fR \fIclass\fR,
     \fBint\fR \fItype\fR, \fBu_char *\fIanswer\fR,
     \fBint\fR \fIanslen\fR);
.fi

.LP
.nf
\fBint\fR \fBres_search\fR(\fBconst char *\fIdname\fR, \fBint\fR \fIclass\fR,
     \fBint\fR \fItype\fR, \fBu_char *\fIanswer\fR, \fBint\fR \fIanslen\fR);
.fi

.LP
.nf
\fBint\fR \fBres_mkquery\fR(\fBint\fR \fIop\fR, \fBconst char *\fIdname\fR, \fBint\fR \fIclass\fR,
     \fBint\fR \fItype\fR, \fBconst char *\fIdata\fR,\fBint\fR \fIdatalen\fR,
     \fBstruct rrec *\fInewrr\fR, \fBu_char *\fIbuf\fR, \fBint\fR \fIbuflen\fR);
.fi

.LP
.nf
\fBint\fR \fBres_send\fR(\fBconst u_char *\fImsg\fR, \fBint\fR \fImsglen\fR, \fBu_char *\fIanswer\fR,
     \fBint\fR \fIanslen\fR);
.fi

.LP
.nf
\fBvoid\fR \fBherror\fR(\fBconst char *\fIs\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These routines are used for making, sending, and interpreting query and reply
messages with Internet domain name servers.
.sp
.LP
State information is kept in
.I statp
and is used to control the behavior
of these functions. Set
.I statp
to all zeros prior to making the first
call to any of these functions.
.sp
.LP
The
.B res_ndestroy()
function should be called to free memory allocated
by
.B res_ninit()
after the last use of
.IR statp .
.sp
.LP
The functions
.BR res_init() ,
.BR res_query() ,
.BR res_search() ,
.BR res_mkquery() ,
.BR res_send() ,
and
.B herror()
are deprecated. They
are supplied for backwards compatability. They use global configuration and
state information that is kept in the structure
.B _res
rather than state
information referenced through
.IR statp .
.sp
.LP
Most of the values in
.I statp
and
.B _res
are initialized to
reasonable defaults on the first call to
.B res_ninit()
or
.BR res_init()
and can be ignored. Options stored in
.B statp->options
or
\fB_res.options\fR are defined in <\fBresolv.h\fR>. They are stored as a
simple bit mask containing the bitwise
.B OR
of the options enabled.
.sp
.ne 2
.mk
.na
.B RES_INIT
.ad
.RS 17n
.rt
True if the initial name server address and default domain name are
initialized, that is,
.B res_init()
or
.B res_ninit()
has been called.
.RE

.sp
.ne 2
.mk
.na
.B RES_DEBUG
.ad
.RS 17n
.rt
Print debugging messages.
.RE

.sp
.ne 2
.mk
.na
.B RES_AAONLY
.ad
.RS 17n
.rt
Accept authoritative answers only. With this option,
.B res_send()
will
continue until it finds an authoritative answer or finds an error. Currently
this option is not implemented.
.RE

.sp
.ne 2
.mk
.na
.B RES_USEVC
.ad
.RS 17n
.rt
Use
.B TCP
connections for queries instead of
.B UDP
datagrams.
.RE

.sp
.ne 2
.mk
.na
.B RES_STAYOPEN
.ad
.RS 17n
.rt
Use with
.B RES_USEVC
to keep the
.B TCP
connection open between
queries. This is a useful option for programs that regularly do many queries.
The normal mode used should be
.BR UDP .
.RE

.sp
.ne 2
.mk
.na
.B RES_IGNTC
.ad
.RS 17n
.rt
Ignore truncation errors; that is, do not retry with \fBTCP\fR.
.RE

.sp
.ne 2
.mk
.na
.B RES_RECURSE
.ad
.RS 17n
.rt
Set the recursion-desired bit in queries. This is the default.
\fBres_send()\fR and \fBres_nsend()\fR do not do iterative queries and expect
the name server to handle recursion.
.RE

.sp
.ne 2
.mk
.na
.B RES_DEFNAMES
.ad
.RS 17n
.rt
If set,
.B res_search()
and
.B res_nsearch()
append the default domain
name to single-component names, that is, names that do not contain a dot. This
option is enabled by default.
.RE

.sp
.ne 2
.mk
.na
.B RES_DNSRCH
.ad
.RS 17n
.rt
If this option is set,
.B res_search()
and
.B res_nsearch()
search for
host names in the current domain and in parent domains. See \fBhostname\fR(1).
This option is used by the standard host lookup routine
.BR gethostbyname (3NSL).
This option is enabled by default.
.RE

.sp
.ne 2
.mk
.na
.B RES_NOALIASES
.ad
.RS 17n
.rt
This option turns off the user level aliasing feature controlled by the
\fBHOSTALIASES\fR environment variable. Network daemons should set this
option.
.RE

.sp
.ne 2
.mk
.na
.B RES_BLAST
.ad
.RS 17n
.rt
If the
.B RES_BLAST
option is defined,
.B resolver()
queries will be
sent to all servers. If the
.B RES_BLAST
option is not defined, but
\fBRES_ROTATE\fR is , the list of nameservers are rotated according to a
round-robin scheme.
.B RES_BLAST
overrides
.BR RES_ROTATE .
.RE

.sp
.ne 2
.mk
.na
.B RES_ROTATE
.ad
.RS 17n
.rt
This option causes
.B res_nsend()
and
.B res_send()
to rotate the list
of nameservers in
.B statp->nsaddr_list
or
.BR _res.nsaddr_list .
.RE

.sp
.ne 2
.mk
.na
.B RES_KEEPTSIG
.ad
.RS 17n
.rt
This option causes
.B res_nsendsigned()
to leave the message unchanged
after
.B TSIG
verification. Otherwise the
.B TSIG
record would be
removed and the header would be updated.
.RE

.SS "\fBres_ninit()\fR, \fBres_init()\fR"
.sp
.LP
The
.B res_ninit()
and
.B res_init()
routines read the configuration
file, if any is present, to get the default domain name, search list and the
Internet address of the local name server(s). See
.BR resolv.conf (4).
If no
server is configured,
.B res_init()
or
.B res_ninit()
will try to obtain
name resolution services from the host on which it is running. The current
domain name is defined by \fBdomainname\fR(1M), or by the hostname if it is
not specified in the configuration file. Use the environment variable
\fBLOCALDOMAIN\fR to override the domain name. This environment variable may
contain several blank-separated tokens if you wish to override the search list
on a per-process basis. This is similar to the search command in the
configuration file. You can set the
.B RES_OPTIONS
environment variable to
override certain internal resolver options. You can otherwise set them by
changing fields in the
.B statp
/\fB_res\fR structure. Alternatively, they
are inherited from the configuration file's
.B options
command. See
\fBresolv.conf\fR(4) for information regarding the syntax of the
\fBRES_OPTIONS\fR environment variable. Initialization normally occurs on the
first call to one of the other resolver routines.
.SS "\fBres_nquery()\fR, \fBres_query()\fR"
.sp
.LP
The
.B res_nquery()
and
.B res_query()
functions provide interfaces to
the server query mechanism. They construct a query, send it to the local
server, await a response, and make preliminary checks on the reply. The query
requests information of the specified
.I type
and
.I class
for the
specified fully-qualified domain name
.IR dname .
The reply message is left
in the
.I answer
buffer with length
.I anslen
supplied by the caller.
\fBres_nquery()\fR and \fBres_query()\fR return the length of the
.IR answer ,
or -1 upon error.
.sp
.LP
The
.B res_nquery()
and
.B res_query()
routines return a length that
may be bigger than
.IR anslen .
In that case, retry the query with a larger
\fIbuf\fR. The \fIanswer\fR to the second query may be larger still], so it is
recommended that you supply a \fIbuf\fR larger than the
.I answer
returned
by the previous query.
.I answer
must be large enough to receive a maximum
\fBUDP\fR response from the server or parts of the \fIanswer\fR will be
silently discarded. The default maximum
.B UDP
response size is 512
bytes.
.SS "\fBres_nsearch()\fR, \fBres_search()\fR"
.sp
.LP
The
.B res_nsearch()
and
.B res_search()
routines make a query and
await a response, just like like
.B res_nquery()
and
.BR res_query() .
In
addition, they implement the default and search rules controlled by the
\fBRES_DEFNAMES\fR and \fBRES_DNSRCH\fR options. They return the length of the
first successful reply which is stored in
.IR answer .
On error, they reurn
-1.
.sp
.LP
The
.B res_nsearch()
and
.B res_search()
routines return a length that
may be bigger than
.IR anslen .
In that case, retry the query with a larger
\fIbuf\fR. The \fIanswer\fR to the second query may be larger still], so it is
recommended that you supply a \fIbuf\fR larger than the
.I answer
returned
by the previous query.
.I answer
must be large enough to receive a maximum
\fBUDP\fR response from the server or parts of the \fIanswer\fR will be
silently discarded. The default maximum
.B UDP
response size is 512
bytes.
.SS "\fBres_nquerydomain()\fR"
.sp
.LP
The
.B res_nquerydomain()
function calls
.B res_query()
on the
concatenation of
.I name
and
.IR domain ,
removing a trailing dot from
\fIname\fR if \fIdomain\fR is \fINULL\fR.
.SS "\fBres_nmkquery()\fR, \fBres_mkquery()\fR"
.sp
.LP
These routines are used by
.B res_nquery()
and
.BR res_query() .
The
\fBres_nmkquery()\fR and \fBres_mkquery()\fR functions construct a standard
query message and place it in
.IR buf .
The routine returns the
.I size
of
the query, or -1 if the query is larger than
.IR buflen .
The query type
\fIop\fR is usually
.BR QUERY ,
but can be any of the query types defined in
<\fBarpa/nameser.h\fR>. The domain name for the query is given by \fIdname\fR.
\fInewrr\fR is currently unused but is intended for making update messages.
.SS "\fBres_nsend()\fR, \fBres_send()\fR, \fBres_nsendsigned()\fR"
.sp
.LP
The
.BR res_nsend() ,
.BR res_send() ,
and
.B res_nsendsigned()
routines
send a pre-formatted query that returns an
.IR answer .
The routine calls
\fBres_ninit()\fR or
.BR res_init() .
If
.B RES_INIT
is not set, the
routine sends the query to the local name server and handles timeouts and
retries. Additionally, the
.B res_nsendsigned()
uses
.B TSIG
signatures
to add authentication to the query and verify the response. In this case, only
one name server will be contacted. The routines return the length of the reply
message, or -1 if there are errors.
.sp
.LP
The
.B res_nsend()
and
.B res_send()
routines return a length that may
be bigger than
.IR anslen .
In that case, retry the query with a larger
\fIbuf\fR. The \fIanswer\fR to the second query may be larger still], so it is
recommended that you supply a \fIbuf\fR larger than the
.I answer
returned
by the previous query.
.I answer
must be large enough to receive a maximum
\fBUDP\fR response from the server or parts of the \fIanswer\fR will be
silently discarded. The default maximum
.B UDP
response size is 512
bytes.
.SS "\fBfp_resstat()\fR"
.sp
.LP
The function \fBfp_resstat()\fR prints out the active flag bits in
\fIstatp\fR->\fBoptions\fR preceded by the text "\fB;; res options:\fR" on
\fIfile\fR.
.SS "\fBres_hostalias()\fR"
.sp
.LP
The function
.B res_hostalias()
looks up
.I name
in the file referred
to by the
.B HOSTALIASES
environment variable and returns the fully
qualified host name. If
.I name
is not found or an error occurs, \fBNULL\fR
is returned.
.B res_hostalias()
stores the result in \fIbuf\fR.
.SS "\fBres_nclose()\fR"
.sp
.LP
The
.B res_nclose()
function closes any open files referenced through
.IR statp .
.SS "\fBres_ndestroy()\fR"
.sp
.LP
The
.B res_ndestroy()
function calls
.BR res_nclose() ,
then frees any
memory allocated by
.B res_ninit()
referenced through
.IR statp .
.SS "\fBdn_comp()\fR"
.sp
.LP
The
.B dn_comp()
function compresses the domain name
.I exp_dn
and
stores it in
.IR comp_dn .
The
.B dn_comp()
function returns the size of
the compressed name, or \fB\(mi1\fR if there were errors.
.I length
is the
size of the array pointed to by
.IR comp_dn .
.sp
.LP
The
.I dnptrs
parameter is a pointer to the head of the list of pointers
to previously compressed names in the current message. The first pointer must
point to the beginning of the message. The list ends with
.IR NULL .
The
limit to the array is specified by
.IR lastdnptr .
.sp
.LP
A side effect of calling
.B dn_comp()
is to update the list of pointers
for labels inserted into the message by
.B dn_comp()
as the name is
compressed. If
.I dnptrs
is
.IR NULL ,
names are not compressed. If
\fIlastdnptr\fR is
.IR NULL ,
\fBdn_comp()\fR does not update the list of
labels.
.SS "\fBdn_expand()\fR"
.sp
.LP
The
.B dn_expand()
function expands the compressed domain name
\fIcomp_dn\fR to a full domain name. The compressed name is contained in a
query or reply message.
.I msg
is a pointer to the beginning of that
message. The uncompressed name is placed in the buffer indicated by
.IR exp_dn ,
which is of size
.IR length .
The
.B dn_expand()
function
returns the size of the compressed name, or \fB\(mi1\fR if there was an
error.
.SS "\fBhstrerror()\fR, \fBherror()\fR"
.sp
.LP
The variables
.I statp->res_h_errno
and
.I _res.res_h_errno
and
external variable
.I h_errno
are set whenever an error occurs during a
resolver operation. The following definitions are given in <\fBnetdb.h\fR>:
.sp
.in +2
.nf
#define NETDB_INTERNAL -1 /* see errno */
#define NETDB_SUCCESS  0  /* no problem */
#define HOST_NOT_FOUND 1  /* Authoritative Answer Host not found */
#define TRY_AGAIN      2  /* Non-Authoritative not found, or SERVFAIL */
#define NO_RECOVERY    3  /* Non-Recoverable: FORMERR, REFUSED, NOTIMP*/
#define NO_DATA        4  /* Valid name, no data for requested type */
.fi
.in -2
.sp

.sp
.LP
The
.B herror()
function writes a message to the diagnostic output
consisting of the string parameters, the constant string "\fB:\fR", and a
message corresponding to the value of
.IR h_errno .
.sp
.LP
The
.B hstrerror()
function returns a string, which is the message text
that corresponds to the value of the
.I err
parameter.
.SS "\fBres_setservers()\fR, \fBres_getservers()\fR"
.sp
.LP
The functions
.B res_getservers()
and
.B res_setservers()
are used to
get and set the list of servers to be queried.
.SH FILES
.sp
.ne 2
.mk
.na
\fB/etc/resolv.conf\fR
.ad
.RS 20n
.rt
resolver configuration file
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsl (32-bit)
SUNWcslx (64-bit)
_
Interface StabilityCommitted
_
MT-LevelT{
Unsafe for deprecated interfaces; MT-Safe for all others.
T}
.TE

.SH SEE ALSO
.sp
.LP
.BR domainname (1M),
.BR gethostbyname (3NSL),
.BR libresolv (3LIB),
\fBresolv.conf\fR(4), \fBattributes\fR(5)
.sp
.LP
Lottor, M.
.IR "RFC 1033, Domain Administrators Operations Guide" .
Network
Working Group. November 1987.
.sp
.LP
Mockapetris, Paul. \fIRFC 1034, Domain Names - Concepts and Facilities\fR.
Network Working Group. November 1987.
.sp
.LP
Mockapetris, Paul. \fIRFC 1035, Domain Names - Implementation and
Specification\fR. Network Working Group. November 1987.
.sp
.LP
Partridge, Craig.
.IR "RFC 974, Mail Routing and the Domain System" .
Network
Working Group. January 1986.
.sp
.LP
Stahl, M.
.IR "RFC 1032, Domain Administrators Guide" .
Network Working Group.
November 1987.
.sp
.LP
Vixie, Paul, Dunlap, Kevin J., Karels, Michael J. \fIName Server Operations
Guide for BIND\fR. Internet Software Consortium, 1996.
.SH NOTES
.sp
.LP
When the caller supplies a work buffer, for example the
.I answer
buffer
argument to
.B res_nsend()
or
.BR res_send() ,
the buffer should be
.RB "aligned on an eight byte boundary. Otherwise, an error such as a" " SIGBUS"
may result.
