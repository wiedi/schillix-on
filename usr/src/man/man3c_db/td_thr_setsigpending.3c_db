'\" te
.\" Copyright (c) 1998 Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH td_thr_setsigpending 3C_DB "20 Oct 1998" "SunOS 5.11" "Threads Debugging Library Functions"
.SH NAME
td_thr_setsigpending, td_thr_sigsetmask \- manage thread signals for
libc_db
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. -lc_db [ \fIlibrary\fR.\|.\|. ]
#include <proc_service.h>
#include <thread_db.h>

\fBtd_err_e\fR \fBtd_thr_setsigpending\fR(\fBconst td_thrhandle_t *\fR \fIth_p\fR, \fBconst uchar_ t\fR \fIti_sigpending_flag\fR,
     \fBconst sigset_t\fR \fIti_sigmask\fR;);
.fi

.LP
.nf
\fBtd_err_e\fR \fBtd_thr_sigsetmask\fR(\fBconst td_thrhandle_t *\fIth_p\fR, \fBconst sigset_t\fR \fIti_sigmask\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B td_thr_setsigpending()
and
.B td_thr_setsigmask()
functions
affect the signal state of the thread identified by
.IR th_p .
.sp
.LP
The
.B td_thr_setsigpending()
function sets the set of pending signals
for thread
.I th_p
to
.IR ti_sigpending .
The value of the
\fBlibc\fR-internal field that indicates whether a thread has any signal
pending is set to
.IR ti_sigpending_flag .
To be consistent,
.I ti_sigpending_flag
should be 0 if and only if all of the bits in
.I ti_sigpending
are 0.
.sp
.LP
The
.B td_thr_sigsetmask()
function sets the signal mask of the thread
.I th_p
as if the thread had set its own signal mask with
.BR thr_sigsetmask (3C).
The new signal mask is the value of
.BR ti_sigmask .
.sp
.LP
There is no equivalent to the
.B SIG_BLOCK
or
.BR SIG_UNBLOCK
operations of \fBthr_sigsetmask\fR(3C), which mask or unmask specific
signals without affecting the mask state of other signals. To block or
unblock specific signals,
.RS +4
.TP
1.
stop either the entire process or the thread with
.BR td_thr_dbsuspend() ,
.RE
.RS +4
.TP
2.
determine the thread's existing signal mask by calling
.BR td_thr_get_info (3C_DB),
.RE
.RS +4
.TP
3.
modify the
.I ti_sigmask
member of the
.B td_thrinfo_t
structure as
desired, and
.RE
.RS +4
.TP
4.
set the new signal mask with\fBtd_thr_sigsetmask()\fR.
.RE
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B TD_OK
.ad
.RS 12n
.rt
The call completed successfully.
.RE

.sp
.ne 2
.mk
.na
.B TD_BADTH
.ad
.RS 12n
.rt
An invalid thread handle was passed in.
.RE

.sp
.ne 2
.mk
.na
.B TD_DBERR
.ad
.RS 12n
.rt
A call to one of the imported interface routines failed.
.RE

.sp
.ne 2
.mk
.na
.B TD_ERR
.ad
.RS 12n
.rt
A
.B libc_db
internal error occurred.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libc_db (3LIB),
.BR td_thr_dbsuspend (3C_DB),
\fBtd_thr_get_info\fR(3C_DB),
.BR attributes (5)
