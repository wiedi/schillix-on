'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH td_sync_get_info 3C_DB "5 Jun 2007" "SunOS 5.11" "Threads Debugging Library Functions"
.SH NAME
td_sync_get_info, td_ta_sync_tracking_enable, td_sync_get_stats,
td_sync_setstate, td_sync_waiters \- operations on a synchronization object
in libc_db
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. -lc_db [ \fIlibrary\fR.\|.\|. ]
#include <proc_service.h>
#include <thread_db.h>

\fBtd_err_e\fR \fBtd_sync_get_info\fR(\fBconst td_synchandle_t *\fIsh_p\fR, \fBtd_syncinfo_t *\fIsi_p\fR);
.fi

.LP
.nf
\fBtd_err_e\fR \fBtd_ta_sync_tracking_enable\fR(\fBconst td_thragent_t *\fIta_p\fR, \fBint\fR \fIon_off\fR);
.fi

.LP
.nf
\fBtd_err_e\fR \fBtd_sync_get_stats\fR(\fBconst td_synchandle_t *\fIsh_p\fR, \fBtd_syncstats_t *\fIss_p\fR);
.fi

.LP
.nf
\fBtd_err_e\fR \fBtd_sync_setstate\fR(\fBconst td_synchandle_t *\fIsh_p\fR);
.fi

.LP
.nf
\fBtypedef int\fR \fBtd_thr_iter_f\fR(\fBconst td_thrhandle_t *\fIth_p\fR, \fBvoid *\fIcb_data_p\fR);
.fi

.LP
.nf
\fBtd_err_e\fR \fBtd_sync_waiters\fR(\fBconst td_synchandle_t *\fIsh_p\fR, \fBtd_thr_iter_f *\fIcb\fR,
     \fBvoid *\fIcb_data_p\fR);
.fi

.SH DESCRIPTION
.sp
.LP
Synchronization objects include mutexes, condition variables, semaphores,
and reader-writer locks. In the same way that thread operations use a thread
handle of type
.BR td_thrhandle_t ,
operations on synchronization objects
use a synchronization object handle of type
.BR td_synchandle_t .
.sp
.LP
The controlling process obtains synchronization object handles either by
calling the function
.B td_ta_sync_iter()
to obtain handles for all
synchronization objects of the target process that are known to the
.B libc_db
library of interfaces, or by mapping the address of a
synchronization object in the address space of the target process to a
handle by calling
.BR td_ta_map_addr2sync (3C_DB).
.sp
.LP
Not all synchronization objects that a process uses can be known to the
.B libc_db
library and returned by
.BR td_ta_sync_iter "(3C_DB). A"
synchronization object is known to
.B libc_db
only if it has been the
target of a synchronization primitive in the process (such as
.BR mutex_lock() ,
described on the
.BR mutex_init (3C)
manual page) after
\fBtd_ta_new\fR(3C_DB) has been called to attach to the process and
.B td_ta_sync_tracking_enable()
has been called to enable synchronization
object tracking.
.sp
.LP
The
.B td_ta_sync_tracking_enable()
function turns synchronization
object tracking on or off for the process identified by
.IR ta_p ,
depending on whether
.I on_off
is 0 (off) or non-zero (on).
.sp
.LP
.RB "The " td_sync_get_info() " function fills in the " td_syncinfo_t 
structure
.BI * si_p
with values for the synchronization object
identified by
.BR sh_p .
The
.B td_syncinfo_t
structure contains the
following fields:
.sp
.ne 2
.mk
.na
.BI "td_thragent_t *" si_ta_p
.ad
.RS 29n
.rt
The internal process handle identifying the target process through which
this synchronization object handle was obtained.  Synchronization objects
may be process-private or process-shared. In the latter case, the same
synchronization object may have multiple handles, one for each target
process's "view" of the synchronization object.
.RE

.sp
.ne 2
.mk
.na
.B psaddr_t
.I si_sv_addr
.ad
.RS 29n
.rt
The address of the synchronization object in this target process's address
space.
.RE

.sp
.ne 2
.mk
.na
.B td_sync_type_e
.I si_type
.ad
.RS 29n
.rt
The type of the synchronization variable: mutex, condition variable,
semaphore, or readers-writer lock.
.RE

.sp
.ne 2
.mk
.na
.B int
.I si_shared_type
.ad
.RS 29n
.rt
If
.I si_shared_type
is non-zero, this synchronization object is
process-shared, otherwise it is process-private.
.RE

.sp
.ne 2
.mk
.na
.B td_sync_flags_t
.I si_flags
.ad
.RS 29n
.rt
Flags dependent on the type of the synchronization object.
.RE

.sp
.ne 2
.mk
.na
.B int
.I si_state.sema_count
.ad
.RS 29n
.rt
Semaphores only.  The current value of the semaphore
.RE

.sp
.ne 2
.mk
.na
.B int
.I si_state.nreaders
.ad
.RS 29n
.rt
Readers-writer locks only. The number of readers currently holding the
lock, or
.BR -1 ,
if a writer is currently holding the lock.
.RE

.sp
.ne 2
.mk
.na
.B int
.I si_state.mutex_locked
.ad
.RS 29n
.rt
For mutexes only. Non-zero if and only if the mutex is currently locked.
.RE

.sp
.ne 2
.mk
.na
.B int
.I si_size
.ad
.RS 29n
.rt
The size of the synchronization object.
.RE

.sp
.ne 2
.mk
.na
.B uint8_t
.I si_has_waiters
.ad
.RS 29n
.rt
Non-zero if and only if at least one thread is blocked on this
synchronization object.
.RE

.sp
.ne 2
.mk
.na
.B uint8_t
.I si_is_wlocked
.ad
.RS 29n
.rt
For reader-writer locks only. The value is non-zero if and only if this
lock is  held by a writer.
.RE

.sp
.ne 2
.mk
.na
.B uint8_t
.I si_rcount
.ad
.RS 29n
.rt
.B PTHREAD_MUTEX_RECURSIVE
mutexes only. If the mutex is held, the
recursion count.
.RE

.sp
.ne 2
.mk
.na
.B uint8_t
.I si_prioceiling
.ad
.RS 29n
.rt
.B PTHREAD_PRIO_PROTECT
protocol mutexes only. The priority ceiling.
.RE

.sp
.ne 2
.mk
.na
.B td_thrhandle_t
.I si_owner
.ad
.RS 29n
.rt
Mutexes and readers-writer locks only. This is the thread holding the
mutex, or the write lock, if this is a reader-writer lock. The value is
.I NULL
if no one holds the mutex or write-lock.
.RE

.sp
.ne 2
.mk
.na
.B pid_t
.I si_ownerpid
.ad
.RS 29n
.rt
Mutexes only.  For a locked process-shared mutex, this is the process-ID of
the process containing the owning thread.
.RE

.sp
.LP
The
.B td_sync_get_stats()
function fills in the
.BR td_syncstats_t
structure *\fIss_p\fR with values for the synchronization object identified
by
.IR sh_p .
The
.B td_syncstats_t
structure contains an embedded
.B td_syncinfo_t
structure that is filled in as described above for
.BR td_sync_get_info() .
In addition, usage statistics gathered since
.B td_ta_sync_tracking_enable()
was called to enable synchronization
object tracking are returned in the
.BR ss_un.mutex ,
.BR ss_un.cond ,
.BR ss_un.rwlock ,
or
.B ss_un.sema
members of the
.BR td_syncstats_t
structure, depending on the type of the synchronization object.
.sp
.LP
The
.B td_sync_setstate
function modifies the state of synchronization
object
.IR si_p ,
depending on the synchronization object type. For
mutexes,
.B td_sync_setstate
is unlocked if the value is
.BR 0 .
Otherwise it is locked. For semaphores, the semaphore's count is set to the
value. For reader-writer locks, the reader count set to the value if value
is
.BR >0 .
The count is set to write-locked if value is
.BR -1 \&.
It is
set to unlocked if the value is
.BR 0 .
Setting the state of a
synchronization object from a
.B libc_db
interface may cause the
synchronization object's semantics to be violated from the point of view of
the threads in the target process. For example, if a thread holds a mutex,
and
.B td_sync_setstate
is used to set the mutex to unlocked, then a
different thread  will also be able to subsequently acquire the same
mutex.
.sp
.LP
The
.B td_sync_waiters
function iterates over the set of thread handles
of threads blocked on
.IR sh_p .
The callback function
.I cb
is called
once for each such thread handle, and is passed  the thread handle and
.IR cb_data_p .
If the callback function returns a non-zero value,
iteration is terminated early. See
.BR td_ta_thr_iter (3C_DB).
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B TD_OK
.ad
.RS 13n
.rt
The call returned successfully.
.RE

.sp
.ne 2
.mk
.na
.B TD_BADTH
.ad
.RS 13n
.rt
An invalid thread handle was passed in.
.RE

.sp
.ne 2
.mk
.na
.B TD_DBERR
.ad
.RS 13n
.rt
A call to one of the imported interface routines failed.
.RE

.sp
.ne 2
.mk
.na
.B TD_ERR
.ad
.RS 13n
.rt
A libc_db-internal error occurred.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libc_db (3LIB),
.BR mutex_init (3C),
\fBtd_ta_map_addr2sync\fR(3C_DB), \fBtd_ta_sync_iter\fR(3C_DB),
.BR td_ta_thr_iter (3C_DB),
.BR attributes (5)
