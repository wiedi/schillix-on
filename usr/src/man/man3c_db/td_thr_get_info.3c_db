'\" te
.\"  All Rights Reserved  Copyright (c) 1998, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH td_thr_get_info 3C_DB "20 Oct 1998" "SunOS 5.11" "Threads Debugging Library Functions"
.SH NAME
td_thr_get_info \- get thread information in libc_db library of
interfaces
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. -lc_db [ \fIlibrary\fR.\|.\|. ]
#include <proc_service.h>
#include <thread_db.h>

\fBtd_err_e\fR \fBtd_thr_get_info\fR(\fBconst td_thrhandle_t *\fIth_p\fR, \fBtd_thrinfo_t *\fIti_p\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBtd_thr_get_info()\fR function fills in the \fBtd_thrinfo_t\fR
structure *\fIti_p\fR with values for the thread identified by
.IR th_p .

.sp
.LP
The
.B td_thrinfo_t
structure contains the following fields:
.sp
.in +2
.nf
typedef struct td_thrinfo_t {
  td_thragen_tx    *ti_ta_p           /* internal process handle */
  unsigned         ti_user_flags;     /* value of flags parameter */
  thread_t         ti_tid;            /* thread identifier */
  char             *ti_tls;           /* pointer to thread-local storage*/
  paddr            ti_startfunc;      /* address of function at which thread
                                         execution began*/
  paddr            ti_stkbase;        /* base of thread's stack area*/
  int              ti_stksize;        /* size in bytes of thread's allocated
                                         stack region*/
  paddr            ti_ro_area;        /* address of ulwp_t structure*/
  int              ti_ro_size         /* size of the ulwp_t structure in
                                         bytes */
  td_thr_state_e   ti_state           /* state of the thread */
  uchar_t          ti_db_suspended    /* non-zero if thread suspended by
                                         td_thr_dbsuspend*/
  td_thr_type_e    ti_type            /* type of the thread*/
  int              ti_pc              /* value of thread's program counter*/
  int              ti_sp              /* value of thread's stack counter*/
  short            ti_flags           /* set of special flags used by
                                         libc*/
  int              ti_pri             /* priority of thread returned by
                                         thr_getprio(3T)*/
  lwpid_t          ti_lid             /* id of light weight process (LWP)
                                         executing this thread*/
  sigset_t         ti_sigmask         /* thread's signal mask.  See
                                         thr_sigsetmask(3T)*/
  u_char           ti_traceme         /* non-zero if event tracing is on*/
  u_char_t         ti_preemptflag     /* non-zero if thread preempted when
                                         last active*/
  u_char_t         ti_pirecflag      /* non-zero if thread runs priority
                                        beside regular */
  sigset_t         ti_pending        /* set of signals pending for this
                                        thread*/
  td_thr_events_t  ti_events         /* bitmap of events enabled for this
                                        thread*/
} ;
.fi
.in -2

.sp
.LP
The
.B ti_ta_p
member is the internal process handle identifying the
process of which the thread is a member.
.sp
.LP
The
.B ti_user_flags
member is the value of the flags parameter passed
to
.BR thr_create "(3C) when the thread was created."
.sp
.LP
The
.B ti_tid
member is the thread identifier for the thread returned by
.BR thr_create (3C).
.sp
.LP
The
.B ti_tls
member is the thread's pointer to thread-local storage.
.sp
.LP
The
.B ti_startfunc
member is the address of the function at which
thread execution began, as specified when the thread was created with
.BR thr_create (3C).
.sp
.LP
The
.B ti_stkbase
member is the base of the thread's stack area.
.sp
.LP
The
.B ti_stksize
member is the size in bytes of the thread's allocated
stack region.
.sp
.LP
The
.B ti_ro_area
member is the address of the
.B ulwp_t
structure
for this thread.  Since accessing the
.B ulwp_t
structure directly
violates the encapsulation provided by
.BR libc_db ,
this member should
generally not be used.  However, it might be useful as a prototype for
extensions.
.sp
.LP
The
.B ti_state
member is the state of the thread.  The
.B td_thr_state_e
enumeration type can contain the following values:
.sp
.ne 2
.mk
.na
.B TD_THR_ANY_STATE
.ad
.RS 26n
.rt
This value is never returned by
.B td_thr_get_info()
but is used as a
wildcard to select threads in
.BR td_ta_thr_iter() .
.RE

.sp
.ne 2
.mk
.na
.B TD_THR_UNKNOWN
.ad
.RS 26n
.rt
The
.B libc_db
library cannot determine the state of the thread.
.RE

.sp
.ne 2
.mk
.na
.B TD_THR_STOPPED
.ad
.RS 26n
.rt
The thread has been stopped by a call to
.BR thr_suspend (3C).
.RE

.sp
.ne 2
.mk
.na
.B TD_THR_RUN
.ad
.RS 26n
.rt
The thread is runnable, but it is not currently assigned to an
.BR LWP .
.RE

.sp
.ne 2
.mk
.na
.B TD_THR_ACTIVE
.ad
.RS 26n
.rt
The thread is currently executing on an
.BR LWP .
.RE

.sp
.ne 2
.mk
.na
.B TD_THR_ZOMBIE
.ad
.RS 26n
.rt
The thread has exited, but it has not yet been deallocated by a call to
.BR thr_join (3C).
.RE

.sp
.ne 2
.mk
.na
.B TD_THR_SLEEP
.ad
.RS 26n
.rt
The thread is not currently runnable.
.RE

.sp
.ne 2
.mk
.na
.B TD_THR_STOPPED_ASLEEP
.ad
.RS 26n
.rt
The thread is both blocked by
.B TD_THR_SLEEP
and stopped by a call to
.BR td_thr_dbsuspend (3C_DB).
.RE

.sp
.LP
The
.B ti_db_suspended
member is non-zero if and only if this thread is
currently suspended because the controlling process has called
.B td_thr_dbsuspend
on it.
.sp
.LP
The
.B ti_type
member is a type of thread.  It is either
.B TD_THR_USER
for a user thread (one created by the application), or
.B TD_THR_SYSTEM
for one created by
.BR libc .
.sp
.LP
The
.B ti_pc
member is the value of the thread's program counter,
provided that the thread's
.B ti_state
value is
.BR TD_THR_SLEEP ,
.BR TD_THR_STOPPED ,
or
.BR TD_THR_STOPPED_ASLEEP .
Otherwise, the value
of this member is undefined.
.sp
.LP
The
.B ti_sp
member is the value of the thread's stack pointer, provided
that the thread's
.B ti_state
value is
.BR TD_THR_SLEEP ,
.BR TD_THR_STOPPED ,
or
.BR TD_THR_STOPPED_ASLEEP .
Otherwise, the value
of this member is undefined.
.sp
.LP
The
.B ti_flags
member is a set of special flags used by
.BR libc ,
currently of use only to those debugging
.BR libc .
.sp
.LP
The
.B ti_pri
member is the thread's priority as it would be returned by
.BR thr_getprio (3C).
.sp
.LP
The
.B ti_lid
member is the ID of the
.B LWP
executing this thread,
or the ID of the
.B LWP
that last executed this thread, if this thread
is not currently assigned to an\fBLWP\fR.
.sp
.LP
The
.B ti_sigmask
member is this thread's signal mask. See
.BR thr_sigsetmask (3C).
.sp
.LP
The
.B ti_traceme
member is non-zero if and only if event tracing for
this thread is on.
.sp
.LP
The
.B ti_preemptflag
member is non-zero if and only if the thread was
preempted the last time it was active.
.sp
.LP
The
.B ti_pirecflag
member is non-zero if and only if due to priority
inheritance the thread is currently running at a priority other than its
regular priority.
.sp
.LP
The
.B ti_events
member is the bitmap of events enabled for this
thread.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B TD_OK
.ad
.RS 12n
.rt
The call completed successfully.
.RE

.sp
.ne 2
.mk
.na
.B TD_BADTH
.ad
.RS 12n
.rt
An invalid thread handle was passed in.
.RE

.sp
.ne 2
.mk
.na
.B TD_DBERR
.ad
.RS 12n
.rt
A call to one of the imported interface routines failed.
.RE

.sp
.ne 2
.mk
.na
.B TD_ERR
.ad
.RS 12n
.rt
The call did not complete successfully.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libc_db (3LIB),
.BR td_ta_thr_iter (3C_DB),
.BR td_thr_dbsuspend (3C_DB),
.BR thr_create (3C),
.BR thr_getprio (3C),
.BR thr_join (3C),
.BR thr_sigsetmask (3C),
.BR thr_suspend (3C),
.BR attributes (5),
.BR threads (5)
