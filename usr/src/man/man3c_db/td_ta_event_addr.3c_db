'\" te
.\" Copyright (c) 1998 Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH td_ta_event_addr 3C_DB "19 Oct 1998" "SunOS 5.11" "Threads Debugging Library Functions"
.SH NAME
td_ta_event_addr, td_thr_event_enable, td_ta_set_event, td_thr_set_event,
td_ta_clear_event, td_thr_clear_event, td_ta_event_getmsg, td_thr_event_getmsg,
td_event_emptyset, td_event_fillset, td_event_addset, td_event_delset,
td_eventismember, td_eventisempty \- thread events in libc_db
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|.  -lc_db  [ \fIlibrary\fR.\|.\|. ]
#include <proc_service.h>
#include <thread_db.h>

\fBtd_err_e\fR \fBtd_ta_event_addr\fR(\fBconst td_thragent_t *\fIta_p\fR, \fBu_long event,td_notify_t *\fInotify_p\fR);
.fi

.LP
.nf
\fBtd_err_e\fR \fBtd_thr_event_enable\fR(\fBconst td_thrhandle_t *\fIth_p\fR, \fBint\fR \fIon_off\fR);
.fi

.LP
.nf
\fBtd_err_e\fR \fBtd_thr_set_event\fR(\fBconst td_thrhandle_t *\fIth_p\fR, \fBtd_thr_events_t *\fIevents\fR);
.fi

.LP
.nf
\fBtd_err_e\fR \fBtd_ta_set_event\fR(\fBconst td_thragent_t *\fIta_p\fR, \fBtd_thr_events_t *\fIevents\fR);
.fi

.LP
.nf
\fBtd_err_e\fR \fBtd_thr_clear_event\fR(\fBconst td_thrhandle_t *\fIth_p\fR, \fBtd_thr_events_t *\fIevents\fR);
.fi

.LP
.nf
\fBtd_err_e\fR \fBtd_ta_clear_event\fR(\fBconst td_thragent_t *\fIta_p\fR, \fBtd_thr_events_t *\fIevents\fR);
.fi

.LP
.nf
\fBtd_err_e\fR \fBtd_thr_event_getmsg\fR(\fBconst td_thrhandle_t *\fIth_p\fR, \fBtd_event_msg_t *\fImsg\fR);
.fi

.LP
.nf
\fBtd_err_e\fR \fBtd_ta_event_getmsg\fR(\fBconst td_thragent_t *\fIta_p\fR, \fBtd_event_msg_t *\fImsg\fR);
.fi

.LP
.nf
\fBvoid\fR \fBtd_event_emptyset\fR(\fBtd_thr_events_t\fR  *);
.fi

.LP
.nf
\fBvoid\fR \fBtd_event_fillset\fR(\fBtd_thr_events_t\fR *);
.fi

.LP
.nf
\fBvoid\fR \fBtd_event_addset\fR(\fBtd_thr_events_t\fR \fI*\fR, \fBtd_thr_events_e\fI n\fR);
.fi

.LP
.nf
\fBvoid\fR \fBtd_event_delset\fR(\fBtd_thr_events_t\fR \fI*\fR, \fBtd_thr_events_e\fI n\fR);
.fi

.LP
.nf
\fBvoid\fR \fBtd_eventismember\fR(\fBtd_thr_events_t\fR \fI*\fR, \fBtd_thr_events_e\fI n\fR);
.fi

.LP
.nf
\fBvoid\fR \fBtd_eventisempty\fR(\fBtd_thr_events_t\fI*\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions comprise the thread event facility for
.BR libc_db (3LIB).
This facility allows the controlling process to be notified when certain
thread-related events occur in a target process and to retrieve information
associated with these events.  An event consists of an event type, and
optionally, some  associated event data, depending on the event type. See the
section titled "Event Set Manipulation Macros" that follows.
.sp
.LP
The event type  and the associated event data, if any, constitute an "event
message." "Reporting an event" means delivering  an event message to the
controlling process by way of
.BR libc_db .
.sp
.LP
Several flags can control event reporting, both a per-thread and per event
basis. Event reporting may further be enabled  or disabled for a thread. There
is not only a per-thread event mask that specifies which  event types should be
reported for that thread, but there is also  a global event mask that applies to
all threads.
.sp
.LP
An event is reported, if and only if, the executing thread has event reporting
enabled, and either the event type is enabled in the executing thread's event
mask, or the event type is enabled in the global event mask.
.sp
.LP
Each thread has associated with it an event buffer in which it stores the most
recent event message it has generated, the type of the most recent event that it
reported, and, depending on the event type, some additional information related
to that event.  See the section titled  "Event Set Manipulation Macros" for a
description of the
.B td_thr_events_e
and
.B td_event_msg_t
types and a
list of the event types and the values reported with them. The thread handle,
type
.BR td_thrhandle_t ,
the event type, and the possible value, together
constitute an event message. Each thread's event buffer holds at most one event
message.
.sp
.LP
Each event type has an event reporting address associated with it.  A thread
reports an event by writing the event message into the thread's event buffer and
having control reach the event reporting address for that event type.
.sp
.LP
Typically, the controlling process sets a breakpoint at the event reporting
address for one or more event types. When the breakpoint is hit, the controlling
process knows that an event of the corresponding type has occurred.
.sp
.LP
The event types, and the additional information, if any, reported with each
event, are:
.sp
.ne 2
.mk
.na
.B TD_READY
.ad
.RS 18n
.rt
The thread became ready to execute.
.RE

.sp
.ne 2
.mk
.na
.B TD_SLEEP
.ad
.RS 18n
.rt
The thread has blocked on a synchronization object.
.RE

.sp
.ne 2
.mk
.na
.B TD_SWITCHTO
.ad
.RS 18n
.rt
A runnable thread is being assigned to
.BR LWP.
.RE

.sp
.ne 2
.mk
.na
.B TD_SWITCHFROM
.ad
.RS 18n
.rt
A running thread is being removed from its
.BR LWP.
.RE

.sp
.ne 2
.mk
.na
.B TD_LOCK_TRY
.ad
.RS 18n
.rt
A thread is trying to get an unavailable lock.
.RE

.sp
.ne 2
.mk
.na
.B TD_CATCHSIG
.ad
.RS 18n
.rt
A signal was posted to a thread.
.RE

.sp
.ne 2
.mk
.na
.B TD_IDLE
.ad
.RS 18n
.rt
An
.B LWP
is becoming idle.
.RE

.sp
.ne 2
.mk
.na
.B TD_CREATE
.ad
.RS 18n
.rt
A thread is being created.
.RE

.sp
.ne 2
.mk
.na
.B TD_DEATH
.ad
.RS 18n
.rt
A thread has terminated.
.RE

.sp
.ne 2
.mk
.na
.B TD_PREEMPT
.ad
.RS 18n
.rt
A thread is being preempted.
.RE

.sp
.ne 2
.mk
.na
.B TD_PRI_INHERIT
.ad
.RS 18n
.rt
A thread is inheriting an elevated priority from another thread.
.RE

.sp
.ne 2
.mk
.na
.B TD_REAP
.ad
.RS 18n
.rt
A thread is being reaped.
.RE

.sp
.ne 2
.mk
.na
.B TD_CONCURRENCY
.ad
.RS 18n
.rt
The number of
.B LWPs
is changing.
.RE

.sp
.ne 2
.mk
.na
.B TD_TIMEOUT
.ad
.RS 18n
.rt
A condition-variable timed wait expired.
.RE

.sp
.LP
The
.B td_ta_event_addr()
function returns in *\fInotify_p\fR the event
reporting address associated with event type
.BR event .
The controlling
process may then set a breakpoint at that address.  If a thread hits that
breakpoint, it reports an event of type
.BR event .
.sp
.LP
The
.B td_thr_event_enable()
function enables or disables event reporting
for thread
.IR th_p .
If a thread has event reporting disabled, it will not
report any events. Threads are started with event reporting disabled.  Event
reporting is enabled if
.B on_off
is non-zero; otherwise, it is disabled. To
determine whether or not event reporting is enabled on a thread, call
.B td_thr_getinfo()
for the thread and examine the
.B ti_traceme
member of
the
.B td_thrinfo_t
structure it returns.
.sp
.LP
The
.B td_thr_set_event()
and
.B td_thr_clear_event()
functions set and
clear, respectively, a set of event types in the event mask associated with the
thread
.IR th_p .
To inspect a thread's event mask, call
.B td_thr_getinfo()
for the thread and examine the
.B ti_events
member of
the
.B td_thrinfo_t
structure it returns.
.sp
.LP
The
.B td_ta_set_event()
and
.B td_ta_clear_event()
functions identical
to
.B td_thr_set_event()
and
.BR td_thr_clear_event() ,
respectively, except
that the target process's global event mask is  modified. There is no provision
for inspecting the value of a  target process's global event mask.
.sp
.LP
The
.B td_thr_event_getmsg()
function returns in *\fImsg\fR the event
message associated with thread *\fIth_p\fR. Reading a thread's event message
consumes the message, emptying the thread's event buffer.  As noted above, each
thread's event buffer holds at most one event message; if a thread reports a
second event before the first event message has been read, the second event
message overwrites the first.
.sp
.LP
The
.B td_ta_event_getmsg()
function is identical to
.BR td_thr_event_getmsg() ,
except that it is passed a process handle rather
than a thread handle. It selects some thread that has an event message buffered
and returns that thread's message.  The thread selected is undefined, except
that as long as at least one thread has an event message buffered, it returns an
event message from some such thread.
.SS "Event Set Manipulation Macros"
.sp
.LP
Several macros are provided for manipulating event sets of type
.BR td_thr_events_t :
.sp
.ne 2
.mk
.na
.B td_event_emptyset
.ad
.RS 22n
.rt
Sets its argument to the
.I NULL
event set.
.RE

.sp
.ne 2
.mk
.na
.B td_event_fillset
.ad
.RS 22n
.rt
Sets its argument to the set of all events.
.RE

.sp
.ne 2
.mk
.na
.B td_event_addset
.ad
.RS 22n
.rt
Adds a specific event type to an event set.
.RE

.sp
.ne 2
.mk
.na
.B td_event_delset
.ad
.RS 22n
.rt
Deletes a specific event type from an event set.
.RE

.sp
.ne 2
.mk
.na
.B td_eventismember
.ad
.RS 22n
.rt
Tests whether a specific event type is a member of an event set.
.RE

.sp
.ne 2
.mk
.na
.B td_eventisempty
.ad
.RS 22n
.rt
Tests whether an event set is the
.I NULL
set.
.RE

.SH RETURN VALUES
.sp
.LP
The following values may be returned for all thread event routines:
.sp
.ne 2
.mk
.na
.B TD_OK
.ad
.RS 12n
.rt
The call returned successfully.
.RE

.sp
.ne 2
.mk
.na
.B TD_BADTH
.ad
.RS 12n
.rt
An invalid thread handle was passed in.
.RE

.sp
.ne 2
.mk
.na
.B TD_BADTA
.ad
.RS 12n
.rt
An invalid internal process handle was passed.
.RE

.sp
.ne 2
.mk
.na
.B TD_BADPH
.ad
.RS 12n
.rt
There is a
.I NULL
external process handle associated with this internal
process handle.
.RE

.sp
.ne 2
.mk
.na
.B TD_DBERR
.ad
.RS 12n
.rt
A call to one of the imported interface routines failed.
.RE

.sp
.ne 2
.mk
.na
.B TD_NOMSG
.ad
.RS 12n
.rt
No event message was available to return to
.B td_thr_event_getmsg()
or
.BR td_ta_event_getmsg() .
.RE

.sp
.ne 2
.mk
.na
.B TD_ERR
.ad
.RS 12n
.rt
Some other parameter error occurred, or a
.B libc_db()
internal error
occurred.
.RE

.sp
.LP
The following value can be returned for
.BR td_thr_event_enable() ,
.BR td_thr_set_event() ,
and
.B td_thr_clear_event()
only:
.sp
.ne 2
.mk
.na
.B TD_NOCAPAB
.ad
.RS 15n
.rt
Because the agent thread in the target process has not completed
initialization, this operation cannot be performed. The operation can be
performed after the target process has been allowed to make some forward
progress. See
.BR libc_db (3LIB).
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libc_db (3LIB),
.BR attributes (5)
