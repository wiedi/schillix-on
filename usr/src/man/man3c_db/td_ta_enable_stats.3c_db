'\" te
.\" Copyright (c) 1996 Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH td_ta_enable_stats 3C_DB "20 Oct 1998" "SunOS 5.11" "Threads Debugging Library Functions"
.SH NAME
td_ta_enable_stats, td_ta_reset_stats, td_ta_get_stats \- collect target
process statistics for libc_db
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. -lc_db [ \fIlibrary\fR.\|.\|. ]
#include <proc_service.h>
#include <thread_db.h>

\fBtd_err_e\fR \fBtd_ta_enable_stats\fR(\fBconst td_thragent_t *\fIta_p\fR, \fBint\fI on_off\fR);
.fi

.LP
.nf
\fBtd_err_e_stats\fR \fBtd_ta_reset\fR(\fBconst td_thragent_t *\fIta_p\fR);
.fi

.LP
.nf
\fBtd_err_e\fR \fBtd_ta_get_stats\fR(\fBconst td_thragent_t *\fIta_p\fR, \fBtd_ta_stats_t *\fItstats\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The controlling process can request the collection of certain statistics
about a target process.  Statistics gathering is disabled by default. Each
target process has a
.B td_ta_stats_t
structure that contains current
values when statistic gathering is enabled.
.sp
.LP
The
.B td_ta_enable_stats()
function turns statistics gathering on or
off for the process identified by
.IR ta_p ,
depending on whether or not
.I on_off
is non-zero. When statistics gathering is turned on, all
statistics are implicitly reset as though
.B td_ta_reset_stats()
had been
called. Statistics are not reset when statistics gathering  is turned off.
Except for
.BR "nthreads and"
.BR r_concurrency ,
the values do not
change further, but they remain available for inspection by way of
.BR td_ta_get_stats() .
.sp
.LP
The
.B td_ta_reset_stats()
function resets all counters in the
.B td_ta_stats_t
structure to zero for the target process.
.sp
.LP
The
.B td_ta_get_stats()
function returns the structure for the process
in
.IR tstats .
.sp
.LP
The
.B td_ta_stats_t
structure is defined in <\fBthread_db.h\fR> and
contains the following members:
.sp
.in +2
.nf
typedef struct {
   int nthreads;            /* total number of threads in use */
   int r_concurrency;       /* requested concurrency level */
   int nrunnable_num;       /* numerator of avg runnable threads */
   int nrunnable_den;       /* denominator of avg runnable threads */
   int a_concurrency_num;   /* numerator, avg achieved concurrency */
   int a_concurrency_den;   /* denominator, avg achieved concurrency */
   int nlwps_num;           /* numerator, avg number of LWPs in use */
   int nlwps_den;           /* denominator, avg number of LWPs in use */
   int nidle_num;           /* numerator, avg number of idling LWPs */
   int nidle_den;           /* denominator, avg number of idling LWPs */
} td_ta_stats_t;\fR
.fi
.in -2

.sp
.LP
The
.B nthreads
member is the number of threads that are currently part
of the target process.  The
.B r_concurrency
member is the current
requested concurrency level, such as would be returned by
.BR thr_setconcurrency (3C).
The remaining members are averages over time,
each expressed as  a fraction with an integral numerator and denominator.
The
.B nrunnable_num
and
.B nrunnable_den
members represent the
average number of runnable threads.  The
.B a_concurrency_num
and
.B a_concurrency_den
members represent the average achieved concurrency,
the number of actually running threads.  The
.B a_concurrency_num
and
.B a_concurrency_den
members are less than or equal to
.B nrunnable_num
and
.BR nrunnable_den ,
respectively. The
.B nlwps_num
and
.B nlwps_den
members represent the average number of
lightweight processes  (\fBLWP\fRs) participating in this process. They must
be greater than or equal to
.B a_concurrency_num
and
.BR a_concurrency_den ,
respectively, since every running thread is
assigned to an
.BR LWP ,
but there can at times be additional idling
\fBLWP\fRs with no thread assigned to them. The \fBnidle_num\fR and
.B nidle_den
members represent the average number of idle
.BR LWP s.
.SH RETURN VALUES
.sp
.ne 2
.mk
.na
.B TD_OK
.ad
.RS 13n
.rt
The call completed successfully.
.RE

.sp
.ne 2
.mk
.na
.B TD_BADTA
.ad
.RS 13n
.rt
An invalid internal process handle was passed in.
.RE

.sp
.ne 2
.mk
.na
.B TD_DBERR
.ad
.RS 13n
.rt
A call to one of the imported interface routines failed.
.RE

.sp
.ne 2
.mk
.na
.B TD_ERR
.ad
.RS 13n
.rt
Something else went wrong.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for description of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR libc_db (3LIB),
.BR thr_getconcurrency (3C),
.BR attributes (5)
