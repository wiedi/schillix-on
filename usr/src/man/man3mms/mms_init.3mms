'\" te
.\" Copyright (c) 2008, Sun Microsystems Inc. All Rights Reserved.
.\" The contents of this file are subject to the terms of the Common Development and Distribution License (the "License").  You may not use this file except in compliance with the License.
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE or http://www.opensolaris.org/os/licensing.  See the License for the specific language governing permissions and limitations under the License.
.\" When distributing Covered Code, include this CDDL HEADER in each file and include the License file at usr/src/OPENSOLARIS.LICENSE.  If applicable, add the following below this CDDL HEADER, with the fields enclosed by brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
.TH mms_init 3MMS "28 Oct 2008" "SunOS 5.11" "Media Management System Library Functions"
.SH NAME
mms_init, mms_ainit, mms_goodbye, mms_agoodbye, mms_hello \- manage sessions between the client application and MMS
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR...] \fIfile\fR... -\fBlmms\fR [ \fIlibrary\fR...]
#include <mms_api.h>

\fBint\fR \fBmms_init\fR(\fBvoid *\fR\fIsession\fR, \fBint *\fR\fIversion\fR);
.fi

.LP
.nf
\fBint\fR \fBmms_ainit\fR(\fBvoid *\fR\fIsession\fR, \fBint *\fR\fIversion\fR,
     \fBvoid\fR (*\fIcallbk\fR)(\fBvoid *\fR\fIarg\fR));
.fi

.LP
.nf
\fBint\fR \fBmms_hello\fR(\fBvoid *\fR\fIsession\fR, \fBchar *\fR\fIhost\fR, \fBchar *\fR\fIapp\fR, \fBchar *\fR\fIai\fR,
     \fBchar *\fR\fItag\fR, \fBchar *\fR\fIpass\fR);
.fi

.LP
.nf
\fBint\fR \fBmms_goodbye\fR(\fBvoid *\fR\fIsession\fR, \fBint\fR \fIforce\fR);
.fi

.LP
.nf
\fBint\fR \fBmms_agoodbye\fR(\fBvoid *\fR\fIsession\fR, \fBint\fR \fIforce\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBmms_init()\fR function creates and initializes the data structure used by a client to communicate with the Media Management System (MMS) synchronously. The \fBmms_ainit()\fR function creates and initializes the data structure used by a client to communicate with MMS asynchronously. On successful completion, \fIsession\fR contains the pointer to the data structure and \fIversion\fR contains the MMS API library version. If non-null, the \fIcallbk\fR argument specifies which client routine to invoke if the asynchronous session shuts down.
.sp
.LP
In the following functions, \fIsession\fR is a session pointer returned by either \fBmms_init()\fR or \fBmms_ainit()\fR. The format of the client's logging routine is the following:
.sp
.in +2
.nf
void logfunctionname(char *, char *)
.fi
.in -2

.sp
.LP
The first argument is the prefix and the second is the API error message of the error encountered.
.sp
.LP
The \fBmms_hello()\fR function establishes the session connection between the client and MMS. The client specifies the host where MM is running (\fIhost\fR), application name (\fIapp\fR), application instance (\fIai\fR), application tag (\fItag\fR), and application password (\fIpass\fR) to use to connect with MMS. These values must be present in MMS for the connection to be allowed.
.sp
.LP
The \fBmms_goodbye()\fR function shuts down a synchronous session between the client and MMS.
.sp
.LP
The \fBmms_agoodbye()\fR function shuts down an asynchronous session between the client and MMS. If force is set, no goodbye is sent to MM.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, \fBMMS_API_OK\fR is returned. If a function has a processing error, it returns an error code indicating the type of error.
.SH ERRORS
.sp
.LP
These functions will fail if:
.sp
.ne 2
.mk
.na
\fB\fBMMS_API_ERR\fR\fR
.ad
.RS 26n
.rt  
Unrecoverable internal processing error occurred.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMMS_API_NOT_ERR_RSP\fR\fR
.ad
.RS 26n
.rt  
Response is not an error response.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMMS_API_SHUTDOWN\fR\fR
.ad
.RS 26n
.rt  
Client has shut down API.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMMS_ASYNC_API_FAILURE\fR\fR
.ad
.RS 26n
.rt  
Reader thread unable to obtain reader mutex.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMMS_CFG_FILE_ERR\fR\fR
.ad
.RS 26n
.rt  
Unable to open watcher daemon's network configuration file.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMMS_DUPLICATE_REG\fR\fR
.ad
.RS 26n
.rt  
Event is already registered.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMMS_E_CONNECT_ERR\fR\fR
.ad
.RS 26n
.rt  
Failed to connect to MMS.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMMS_E_INVALID_RESPONSE\fR\fR
.ad
.RS 26n
.rt  
Invalid MMS response to command.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMMS_E_NET_IO_ERR\fR\fR
.ad
.RS 26n
.rt  
Connection failure to MMS.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMMS_E_SYNTAX_ERR\fR\fR
.ad
.RS 26n
.rt  
MMS response contained a syntax error.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMMS_ERR_BIAS\fR\fR
.ad
.RS 26n
.rt  
Unknown Error code.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMMS_EV_REG_FAILED\fR\fR
.ad
.RS 26n
.rt  
MMS did not accept event registration.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMMS_EV_UNREG_FAILED\fR\fR
.ad
.RS 26n
.rt  
MMS did not accept event unregistration.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMMS_INVALID_RSP\fR\fR
.ad
.RS 26n
.rt  
Unknown response type received.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMMS_MALLOC_ERROR\fR\fR
.ad
.RS 26n
.rt  
Unable to allocate required space.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMMS_MISSING_TASKID\fR\fR
.ad
.RS 26n
.rt  
Unable to find task ID in response.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMMS_SELECT_ERROR\fR\fR
.ad
.RS 26n
.rt  
Select system call failed.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMMS_TRACE_FAILURE\fR\fR
.ad
.RS 26n
.rt  
Unable to open API's trace file.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMMS_WRONG_API_MODE\fR\fR
.ad
.RS 26n
.rt  
API session does not support this API command.
.RE

.sp
.ne 2
.mk
.na
\fB\fBMMS_WRONG_TASKID\fR\fR
.ad
.RS 26n
.rt  
Wrong task ID found for accept response.
.RE

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityUncommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
\fBlibmms\fR(3LIB), \fBmms_rsp_type\fR(3MMS), \fBmms_send_cmd\fR(3MMS), \fBattributes\fR(5)
