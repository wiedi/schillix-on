'\" te
.\" Copyright (c) 2008, Sun Microsystems Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH mms_init 3MMS "28 Oct 2008" "SunOS 5.11" "Media Management System Library Functions"
.SH NAME
mms_init, mms_ainit, mms_goodbye, mms_agoodbye, mms_hello \- manage
sessions between the client application and MMS
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|.] \fIfile\fR.\|.\|. -\fBlmms\fR [ \fIlibrary\fR.\|.\|.]
#include <mms_api.h>

\fBint\fR \fBmms_init\fR(\fBvoid *\fIsession\fR, \fBint *\fIversion\fR);
.fi

.LP
.nf
\fBint\fR \fBmms_ainit\fR(\fBvoid *\fIsession\fR, \fBint *\fIversion\fR,
     \fBvoid\fR (*\fIcallbk\fR)(\fBvoid *\fIarg\fR));
.fi

.LP
.nf
\fBint\fR \fBmms_hello\fR(\fBvoid *\fIsession\fR, \fBchar *\fIhost\fR, \fBchar *\fIapp\fR, \fBchar *\fIai\fR,
     \fBchar *\fItag\fR, \fBchar *\fIpass\fR);
.fi

.LP
.nf
\fBint\fR \fBmms_goodbye\fR(\fBvoid *\fIsession\fR, \fBint\fR \fIforce\fR);
.fi

.LP
.nf
\fBint\fR \fBmms_agoodbye\fR(\fBvoid *\fIsession\fR, \fBint\fR \fIforce\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B mms_init()
function creates and initializes the data structure
used by a client to communicate with the Media Management System (MMS)
synchronously. The
.B mms_ainit()
function creates and initializes the
data structure used by a client to communicate with MMS asynchronously. On
successful completion,
.I session
contains the pointer to the data
structure and
.I version
contains the MMS API library version. If
non-null, the
.I callbk
argument specifies which client routine to invoke
if the asynchronous session shuts down.
.sp
.LP
In the following functions,
.I session
is a session pointer returned by
either
.B mms_init()
or
.BR mms_ainit() .
The format of the client's
logging routine is the following:
.sp
.in +2
.nf
void logfunctionname(char *, char *)
.fi
.in -2

.sp
.LP
The first argument is the prefix and the second is the API error message of
the error encountered.
.sp
.LP
The
.B mms_hello()
function establishes the session connection between
the client and MMS. The client specifies the host where MM is running
.RI ( host ),
application name
.RI ( app ),
application instance
.RI ( ai ),
application tag
.RI ( tag ),
and application password
.RI ( pass )
to use to
connect with MMS. These values must be present in MMS for the connection to
be allowed.
.sp
.LP
The
.B mms_goodbye()
function shuts down a synchronous session between
the client and MMS.
.sp
.LP
The
.B mms_agoodbye()
function shuts down an asynchronous session
between the client and MMS. If force is set, no goodbye is sent to MM.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B MMS_API_OK
is returned. If a function has
a processing error, it returns an error code indicating the type of error.
.SH ERRORS
.sp
.LP
These functions will fail if:
.sp
.ne 2
.mk
.na
.B MMS_API_ERR
.ad
.RS 26n
.rt
Unrecoverable internal processing error occurred.
.RE

.sp
.ne 2
.mk
.na
.B MMS_API_NOT_ERR_RSP
.ad
.RS 26n
.rt
Response is not an error response.
.RE

.sp
.ne 2
.mk
.na
.B MMS_API_SHUTDOWN
.ad
.RS 26n
.rt
Client has shut down API.
.RE

.sp
.ne 2
.mk
.na
.B MMS_ASYNC_API_FAILURE
.ad
.RS 26n
.rt
Reader thread unable to obtain reader mutex.
.RE

.sp
.ne 2
.mk
.na
.B MMS_CFG_FILE_ERR
.ad
.RS 26n
.rt
Unable to open watcher daemon's network configuration file.
.RE

.sp
.ne 2
.mk
.na
.B MMS_DUPLICATE_REG
.ad
.RS 26n
.rt
Event is already registered.
.RE

.sp
.ne 2
.mk
.na
.B MMS_E_CONNECT_ERR
.ad
.RS 26n
.rt
Failed to connect to MMS.
.RE

.sp
.ne 2
.mk
.na
.B MMS_E_INVALID_RESPONSE
.ad
.RS 26n
.rt
Invalid MMS response to command.
.RE

.sp
.ne 2
.mk
.na
.B MMS_E_NET_IO_ERR
.ad
.RS 26n
.rt
Connection failure to MMS.
.RE

.sp
.ne 2
.mk
.na
.B MMS_E_SYNTAX_ERR
.ad
.RS 26n
.rt
MMS response contained a syntax error.
.RE

.sp
.ne 2
.mk
.na
.B MMS_ERR_BIAS
.ad
.RS 26n
.rt
Unknown Error code.
.RE

.sp
.ne 2
.mk
.na
.B MMS_EV_REG_FAILED
.ad
.RS 26n
.rt
MMS did not accept event registration.
.RE

.sp
.ne 2
.mk
.na
.B MMS_EV_UNREG_FAILED
.ad
.RS 26n
.rt
MMS did not accept event unregistration.
.RE

.sp
.ne 2
.mk
.na
.B MMS_INVALID_RSP
.ad
.RS 26n
.rt
Unknown response type received.
.RE

.sp
.ne 2
.mk
.na
.B MMS_MALLOC_ERROR
.ad
.RS 26n
.rt
Unable to allocate required space.
.RE

.sp
.ne 2
.mk
.na
.B MMS_MISSING_TASKID
.ad
.RS 26n
.rt
Unable to find task ID in response.
.RE

.sp
.ne 2
.mk
.na
.B MMS_SELECT_ERROR
.ad
.RS 26n
.rt
Select system call failed.
.RE

.sp
.ne 2
.mk
.na
.B MMS_TRACE_FAILURE
.ad
.RS 26n
.rt
Unable to open API's trace file.
.RE

.sp
.ne 2
.mk
.na
.B MMS_WRONG_API_MODE
.ad
.RS 26n
.rt
API session does not support this API command.
.RE

.sp
.ne 2
.mk
.na
.B MMS_WRONG_TASKID
.ad
.RS 26n
.rt
Wrong task ID found for accept response.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityUncommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR libmms (3LIB),
.BR mms_rsp_type (3MMS),
.BR mms_send_cmd (3MMS),
.BR attributes (5)
