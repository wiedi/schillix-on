'\" te
.\" Copyright (c) 2003, Sun Microsystems, Inc. All Rights Reserved.
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH fputc 3C "1 Nov 2003" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
fputc, putc, putc_unlocked, putchar, putchar_unlocked, putw \- put a byte on
a stream
.SH SYNOPSIS
.LP
.nf
#include <stdio.h>

\fBint\fR \fBfputc\fR(\fBint\fR \fIc\fR, \fBFILE *\fIstream\fR);
.fi

.LP
.nf
\fBint\fR \fBputc\fR(\fBint\fR \fIc\fR, \fBFILE *\fIstream\fR);
.fi

.LP
.nf
\fBint\fR \fBputc_unlocked\fR(\fBint\fR \fIc\fR, \fBFILE *\fIstream\fR);
.fi

.LP
.nf
\fBint\fR \fBputchar\fR(\fBint\fR \fIc\fR);
.fi

.LP
.nf
\fBint\fR \fBputchar_unlocked\fR(\fBint\fR \fIc\fR);
.fi

.LP
.nf
\fBint\fR \fBputw\fR(\fBint\fR \fIw\fR, \fBFILE *\fIstream\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBfputc()\fR function writes the byte specified by
.I c
(converted to
an
.BR "unsigned char" )
to the output stream pointed to by
.IR stream ,
at
the position indicated by the associated file-position indicator for the
stream (if defined), and advances the indicator appropriately. If the file
cannot support positioning requests, or if the stream was opened with append
mode, the byte is appended to the output stream.
.sp
.LP
The
.B st_ctime
and
.B st_mtime
fields of the file will be marked for
update between the successful execution of \fBfputc()\fR and the next
successful completion of a call to \fBfflush\fR(3C) or \fBfclose\fR(3C) on the
same stream or a call to \fBexit\fR(3C) or \fBabort\fR(3C).
.sp
.LP
The
.B putc()
routine behaves like
.BR fputc() ,
except that it is
implemented as a macro. It runs faster than
.BR fputc() ,
but it takes up
more space per invocation and its name cannot be passed as an argument to a
function call.
.sp
.LP
The call \fBputchar(\fIc\fB)\fR is equivalent to \fBputc(\fIc\fB,
\fIstdout\fB).\fR The \fBputchar()\fR routine is implemented as a
macro.
.sp
.LP
The
.B putc_unlocked()
and
.B putchar_unlocked()
routines are variants
of
.B putc()
and
.BR putchar() ,
respectively, that do not lock the
stream. It is the caller's responsibility to acquire the stream lock before
calling these routines and releasing the lock afterwards; see
\fBflockfile\fR(3C) and \fBstdio\fR(3C). These routines are implemented as
macros.
.sp
.LP
The
.B putw()
function writes the word (that is, type
.BR int )
.I w
to the output
.I stream
(at the position at which the file offset, if
defined, is pointing). The size of a word is the size of a type
.B int
and
varies from machine to machine.  The
.B putw()
function neither assumes nor
causes special alignment in the file.
.sp
.LP
The
.B st_ctime
and
.B st_mtime
fields of the file will be marked for
update between the successful execution of
.B putw()
and the next
successful completion of a call to \fBfflush\fR(3C) or \fBfclose\fR(3C) on the
same stream or a call to \fBexit\fR(3C) or \fBabort\fR(3C).
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.BR fputc() ,
.BR putc() ,
.BR putc_unlocked() ,
.BR putchar() ,
and
.B putchar_unlocked()
return
the value that was written.  Otherwise, these functions return EOF, the error
indicator for the stream is set, and
.B errno
is set to indicate the
error.
.sp
.LP
Upon successful completion,
.B putw()
returns
.BR 0 .
Otherwise, it
returns a non-zero value, sets the error indicator for the associated
.IR stream ,
and sets
.B errno
to indicate the error.
.sp
.LP
An unsuccessful completion will occur, for example, if the file associated
with
.I stream
is not open for writing or if the output file cannot grow.
.SH ERRORS
.sp
.LP
The
.BR fputc() ,
.BR putc() ,
.BR putc_unlocked() ,
.BR putchar() ,
.BR putchar_unlocked() ,
and
.B putw()
functions will fail if either the
\fIstream\fR is unbuffered or the \fIstream\fR's buffer needs to be flushed,
and:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
The
.B O_NONBLOCK
flag is set for the file descriptor underlying
\fIstream\fR and the process would be delayed in the write operation.
.RE

.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 10n
.rt
The file descriptor underlying
.I stream
is not a valid file descriptor
open for writing.
.RE

.sp
.ne 2
.mk
.na
.B EFBIG
.ad
.RS 10n
.rt
An attempt was made to write to a file that exceeds the maximum file size  or
the process' file size limit.
.RE

.sp
.ne 2
.mk
.na
.B EFBIG
.ad
.RS 10n
.rt
The file is a regular file and an attempt was made to write at or beyond the
offset maximum.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 10n
.rt
The write operation was terminated due to the receipt of a signal, and no
data was transferred.
.RE

.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 10n
.rt
A physical I/O error has occurred, or  the process is a member of a
background process group attempting to write to its controlling terminal,
\fBTOSTOP\fR is set, the process is neither ignoring nor blocking
\fBSIGTTOU\fR and the process group of the process is orphaned. This error may
also be returned under implementation-dependent conditions.
.RE

.sp
.ne 2
.mk
.na
.B ENOSPC
.ad
.RS 10n
.rt
There was no free space remaining on the device containing the file.
.RE

.sp
.ne 2
.mk
.na
.B EPIPE
.ad
.RS 10n
.rt
An attempt is made to write to a pipe or
.B FIFO
that is not open for
reading by any process. A
.B SIGPIPE
signal will also be sent to the
calling thread.
.RE

.sp
.LP
The
.BR fputc() ,
.BR putc() ,
.BR putc_unlocked() ,
.BR putchar() ,
.BR putchar_unlocked() ,
and
.B putw()
functions may fail if:
.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
Insufficient storage space is available.
.RE

.sp
.ne 2
.mk
.na
.B ENXIO
.ad
.RS 10n
.rt
A request was made of a non-existent device, or the request was outside the
capabilities of the device.
.RE

.SH USAGE
.sp
.LP
Functions exist for the
.BR putc() ,
.BR putc_unlocked() ,
.BR putchar() ,
and
.B putchar_unlocked()
macros. To get the function form, the macro name
must be undefined (for example,
.BR "#undef putc" ).
.sp
.LP
When the macro forms are used,
.B putc()
and
.BR putc_unlocked()
evaluate the
.I stream
argument more than once. In particular,
\fBputc(\fIc\fB, \fI*f++\fB);\fR does not work sensibly.  The
\fBfputc()\fR function should be used instead when evaluating the \fIstream\fR
argument has side effects.
.sp
.LP
Because of possible differences in word length and byte ordering, files
written using
.B putw()
are implementation-dependent, and possibly cannot
be read using \fBgetw\fR(3C) by a different application or by the same
application running in a different environment.
.sp
.LP
The
.B putw()
function is inherently byte stream oriented and is not
tenable in the context of either multibyte character streams or wide-character
streams. Application programmers are encouraged to use one of the
character-based output functions instead.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityT{
\fBfputc()\fR, \fBputc()\fR, \fBputc_unlocked()\fR, \fBputchar()\fR, and \fBputchar_unlocked()\fR are Standard.
T}
_
MT-LevelSee \fBNOTES\fR below.
.TE

.SH SEE ALSO
.sp
.LP
.BR getrlimit (2),
.BR ulimit (2)
.BR write (2),
.BR Intro (3),
.BR abort (3C),
.BR exit (3C),
\fBfclose\fR(3C), \fBferror\fR(3C),
\fBfflush\fR(3C), \fBflockfile\fR(3C), \fBfopen\fR(3UCB), \fBprintf\fR(3C),
.BR putc (3C),
.BR puts (3C),
\fBsetbuf\fR(3C), \fBstdio\fR(3C),
.BR attributes (5),
.BR standards (5)
.SH NOTES
.sp
.LP
The
.BR fputc() ,
.BR putc() ,
.BR putchar() ,
and
.B putw()
routines
are MT-Safe in multithreaded applications.  The
.B putc_unlocked()
and
\fBputchar_unlocked()\fR routines are unsafe in multithreaded applications.
