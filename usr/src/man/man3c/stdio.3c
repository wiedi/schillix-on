'\" te
.\" Copyright 1989 AT&T.  Copyright (c) 2005, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH stdio 3C "18 May 2005" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
stdio \- standard buffered input/output package
.SH SYNOPSIS
.LP
.nf
#include <stdio.h>
.fi

.LP
.nf
\fBextern FILE *\fIstdin\fB;\fR
.fi

.LP
.nf
\fBextern FILE *\fIstdout\fB;\fR
.fi

.LP
.nf
\fBextern FILE *\fIstderr\fB;\fR
.fi

.SH DESCRIPTION
.sp
.LP
The standard I/O functions described in section 3C of this manual
constitute an efficient, user-level
.B I/O
buffering scheme. The in-line
macros
.B getc()
and
.B putc()
handle characters quickly. The macros
.BR getchar (3C)
and
.BR putchar "(3C), and the higher-level routines"
.BR fgetc (3C),
.BR fgets (3C),
.BR fprintf (3C),
.BR fputc (3C),
.BR fputs (3C),
.BR fread (3C),
.BR fscanf (3C),
.BR fwrite (3C),
.BR gets (3C),
.BR getw (3C),
.BR printf (3C),
.BR puts (3C),
.BR putw (3C),
and \fBscanf\fR(3C) all use or act as if they use
.B getc()
and
.BR putc() ;
they can be freely intermixed.
.sp
.LP
A file with associated buffering is called a
.I stream
(see
.BR Intro (3))
and is declared to be a pointer to a defined type
.BR FILE .
The \fBfopen\fR(3C) function creates certain descriptive data
for a stream and returns a pointer to designate the stream in all further
transactions. Normally, there are three open streams with constant pointers
declared in the
.B <stdio.h>
header and associated with the standard open
files:
.sp
.ne 2
.mk
.na
.B stdin
.ad
.RS 10n
.rt
standard input file
.RE

.sp
.ne 2
.mk
.na
.B stdout
.ad
.RS 10n
.rt
standard output file
.RE

.sp
.ne 2
.mk
.na
.B stderr
.ad
.RS 10n
.rt
standard error file
.RE

.sp
.LP
The following symbolic values in <\fBunistd.h\fR> define the file
descriptors that will be associated with the C-language
.BR stdin ,
.B stdout
and
.B stderr
when the application is started:
.sp

.sp
.TS
tab();
lw(1.38i) lw(1.65i) lw(.31i) lw(2.17i)
lw(1.38i) lw(1.65i) lw(.31i) lw(2.17i)
.
\fBSTDIN_FILENO\fRStandard input value0\fBstdin\fR
\fBSTDOUT_FILENO\fRStandard output value1\fBstdout\fR
\fBSTDERR_FILENO\fRStandard error value2\fBstderr\fR
.TE

.sp
.LP
The constant
.I NULL
designates a null pointer.
.sp
.LP
The integer-constant
.B EOF
is returned upon end-of-file or error by
most integer functions that deal with streams (see the individual
descriptions for details).
.sp
.LP
The integer constant
.B BUFSIZ
specifies the size of the buffers used by
the particular implementation.
.sp
.LP
The integer constant
.B FILENAME_MAX
specifies the number of bytes
needed to hold the longest pathname of a file allowed by the implementation.
If the system does not impose a maximum limit, this value is the recommended
size for a buffer intended to hold a file's pathname.
.sp
.LP
The integer constant
.B FOPEN_MAX
specifies the minimum number of files
that the implementation guarantees can be open simultaneously. Note that no
more than 255 files may be opened using
.BR fopen() ,
and only file
descriptors 0 through 255 can be used in a stream.
.sp
.LP
The functions and constants mentioned in the entries of section 3S of this
manual are declared in that header and need no further declaration. The
constants and the following "functions" are implemented as macros
(redeclaration of these names is perilous):
.BR getc() ,
.BR getchar() ,
.BR putc() ,
.BR putchar() ,
.BR ferror (3C),
.BR feof (3C),
.BR clearerr (3C),
and \fBfileno\fR(3C). There are also function versions
of
.BR getc() ,
.BR getchar() ,
.BR putc() ,
.BR putchar() ,
.BR ferror() ,
.BR feof() ,
.BR clearerr() ,
and
.BR fileno() .
.sp
.LP
Output streams, with the exception of the standard error stream
.BR stderr ,
are by default buffered if the output refers to a file and
line-buffered if the output refers to a terminal. The standard error output
stream
.B stderr
is by default unbuffered, but use of \fBfreopen()\fR
(see \fBfopen\fR(3C)) will cause it to become buffered or line-buffered.
When an output stream is unbuffered, information is queued for writing on
the destination file or terminal as soon as written; when it is buffered,
many characters are saved up and written as a block. When it is
line-buffered, each line of output is queued for writing on the destination
terminal as soon as the line is completed (that is, as soon as a new-line
character is written or terminal input is requested). The
.B setbuf()
or
.B setvbuf()
functions (both described on the \fBsetbuf\fR(3C) manual
page) may be used to change the stream's buffering strategy.
.SS "Interactions of Other FILE-Type C Functions"
.sp
.LP
A single open file description can be accessed both through streams and
through file descriptors.  Either a file descriptor or a stream will be
called a
.I handle
on the open file description to which it refers; an
open file description may have several handles.
.sp
.LP
Handles can be created or destroyed by user action without affecting the
underlying open file description.  Some of the ways to create them include
.BR fcntl (2),
.BR dup (2),
.BR fdopen (3C),
.BR fileno (3C)
and
.BR fork (2)
(which duplicates existing ones into new processes). They can
be destroyed by at least \fBfclose\fR(3C) and
.BR close (2),
and by the
.B exec
functions (see
.BR exec (2)),
which close some file descriptors
and destroy streams.
.sp
.LP
A file descriptor that is never used in an operation and could affect the
file offset (for example
.BR read (2),
.BR write (2),
or
.BR lseek (2))
is not considered a handle in this discussion, but could give rise to one
(as a consequence of
.BR fdopen() ,
.BR dup() ,
or
.BR fork() ,
for
example). This exception does include the file descriptor underlying a
stream, whether created with
.B fopen()
or
.BR fdopen() ,
as long as it
is not used directly by the application to affect the file offset.  (The
.B read()
and
.B write()
functions implicitly affect the file offset;
.B lseek()
explicitly affects it.)
.sp
.LP
If two or more handles are used, and any one of them is a stream, their
actions shall be coordinated as described below.  If this is not done, the
result is undefined.
.sp
.LP
A handle that is a stream is considered to be closed when either an
.B fclose()
or \fBfreopen\fR(3C) is executed on it (the result of
.B freopen()
is a new stream for this discussion, which cannot be a
handle on the same open file description as its previous value) or when the
process owning that stream terminates the
.BR exit (2)
or
.BR abort (3C).
A file descriptor is closed by
.BR close() ,
.B _exit()
(see
.BR exit (2)),
or by one of the
.B exec
functions when
.BR FD_CLOEXEC
is set on that file descriptor.
.sp
.LP
For a handle to become the active handle, the actions below must be
performed between the last other user of the first handle (the current
active handle) and the first other user of the second handle (the future
active handle). The second handle then becomes the active handle. All
activity by the application affecting the file offset on the first handle
shall be suspended until it again becomes the active handle. (If a stream
function has as an underlying function that affects the file offset, the
stream function will be considered to affect the file offset.  The
underlying functions are described below.)
.sp
.LP
The handles need not be in the same process for these rules to apply. Note
that after a
.BR fork() ,
two handles exist where one existed before.  The
application shall assure that, if both handles will ever be accessed, that
they will both be in a state where the other could become the active handle
first. The application shall prepare for a
.B fork()
exactly as if it
were a change of active handle.  (If the only action performed by one of the
processes is one of the
.B exec
functions or
.BR _exit() ,
the handle is
never accessed in that process.)
.RS +4
.TP
1.
For the first handle, the first applicable condition below shall apply.
After the actions required below are taken, the handle may be closed if it
is still open.
.RS +4
.TP
a.
If it is a file descriptor, no action is required.
.RE
.RS +4
.TP
b.
If the only further action to be performed on any handle to this open file
description is to close it, no action need be taken.
.RE
.RS +4
.TP
c.
If it is a stream that is unbuffered, no action need be taken.
.RE
.RS +4
.TP
d.
If it is a stream that is line-buffered and the last character written to
the stream was a newline (that is, as if a \fBputc('\en')\fR was the most
recent operation on that stream), no action need be taken.
.RE
.RS +4
.TP
e.
If it is a stream that is open for writing or append (but not also open for
reading), either an \fBfflush\fR(3C) shall occur or the stream shall be
closed.
.RE
.RS +4
.TP
f.
If the stream is open for reading and it is at the end of the file (
.BR feof (3C)
is true), no action need be taken.
.RE
.RS +4
.TP
g.
If the stream is open with a mode that allows reading and the underlying
open file description refers to a device that is capable of seeking, either
an
.B fflush()
shall occur or the stream shall be closed.
.RE
.RS +4
.TP
h.
Otherwise, the result is undefined.
.RE
.RE
.RS +4
.TP
2.
For the second handle: if any previous active handle has called a function
that explicitly changed the file offset, except as required above for the
first handle, the application shall perform an
.B lseek()
or an
.BR fseek (3C)
(as appropriate to the type of the handle) to an appropriate
location.
.RE
.RS +4
.TP
3.
If the active handle ceases to be accessible before the requirements on the
first handle above have been met, the state of the open file description
becomes undefined.  This might occur, for example, during a
.B fork()
or
an
.BR _exit() .
.RE
.RS +4
.TP
4.
The
.B exec
functions shall be considered to make inaccessible all
streams that are open at the time they are called, independent of what
streams or file descriptors may be available to the new process image.
.RE
.RS +4
.TP
5.
Implementation shall assure that an application, even one consisting of
several processes, shall yield correct results (no data is lost or
duplicated when writing, all data is written in order, except as requested
by seeks) when the rules above are followed, regardless of the sequence of
handles used.  If the rules above are not followed, the result is
unspecified. When these rules are followed, it is implementation defined
whether, and under what conditions, all input is seen exactly once.
.RE
.SS "Use of stdio in Multithreaded Applications"
.sp
.LP
All the
.B stdio
functions are safe unless they have the
.BR _unlocked
suffix. Each
.B FILE
pointer has its own lock to guarantee that only one
thread can access it. In the case that output needs to be synchronized, the
lock for the
.B FILE
pointer can be acquired before performing a series
of
.B stdio
operations.  For example:
.sp
.in +2
.nf
FILE iop;
flockfile(iop);
fprintf(iop, "hello ");
fprintf(iop, "world);
fputc(iop, 'a');
funlockfile(iop);
.fi
.in -2

.sp
.LP
will print everything out together, blocking other threads that might want
to write to the same file between calls to
.BR fprintf() .
.sp
.LP
An unlocked interface is available in case performace is an issue.  For
example:
.sp
.in +2
.nf
flockfile(iop);
while (!feof(iop)) {
        *c++ = getc_unlocked(iop);
}
funlockfile(iop);
.fi
.in -2

.SH RETURN VALUES
.sp
.LP
Invalid stream pointers usually cause grave disorder, possibly including
program termination. Individual function descriptions describe the possible
error conditions.
.SH SEE ALSO
.sp
.LP
.BR close (2),
.BR lseek (2),
.BR open (2),
.BR pipe (2),
.BR read (2),
.BR write (2),
.BR ctermid (3C),
.BR cuserid (3C),
.BR fclose (3C),
.BR ferror (3C),
.BR fopen (3C),
.BR fread (3C),
.BR fseek (3C),
.BR flockfile (3C),
.BR getc (3C),
.BR gets (3C),
.BR popen (3C),
.BR printf (3C),
.BR putc (3C),
.BR puts (3C),
.BR scanf (3C),
.BR setbuf (3C),
.BR system (3C),
.BR tmpfile (3C),
.BR tmpnam (3C),
.BR ungetc (3C)
