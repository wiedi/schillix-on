'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ucred_get 3C "4 Apr 2008" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
ucred_get, ucred_free, ucred_geteuid, ucred_getruid, ucred_getsuid,
ucred_getegid, ucred_getrgid, ucred_getsgid, ucred_getgroups,
ucred_getprivset, ucred_getpid, ucred_getprojid, ucred_getzoneid,
ucred_getpflags, ucred_getlabel, ucred_size \- user credential functions
.SH SYNOPSIS
.LP
.nf
#include <ucred.h>

\fBucred_t *\fBucred_get\fR(\fBpid_t\fR \fIpid\fR);
.fi

.LP
.nf
\fBvoid\fR \fBucred_free\fR(\fBucred_t *\fIuc\fR);
.fi

.LP
.nf
\fBuid_t\fR \fBucred_geteuid\fR(\fBconst ucred_t *\fIuc\fR);
.fi

.LP
.nf
\fBuid_t\fR \fBucred_getruid\fR(\fBconst ucred_t *\fIuc\fR);
.fi

.LP
.nf
\fBuid_t\fR \fBucred_getsuid\fR(\fBconst ucred_t *\fIuc\fR);
.fi

.LP
.nf
\fBgid_t\fR \fBucred_getegid\fR(\fBconst ucred_t *\fIuc\fR);
.fi

.LP
.nf
\fBgid_t\fR \fBucred_getrgid\fR(\fBconst ucred_t *\fIuc\fR);
.fi

.LP
.nf
\fBgid_t\fR \fBucred_getsgid\fR(\fBconst ucred_t *\fIuc\fR);
.fi

.LP
.nf
\fBint\fR \fBucred_getgroups\fR(\fBconst ucred_t *\fIuc\fR, \fBconst gid_t **\fIgroups\fR);
.fi

.LP
.nf
\fBconst priv_set_t *\fBucred_getprivset\fR(\fBconst ucred_t *\fIuc\fR,
     \fBpriv_ptype_t\fR \fIset\fR);
.fi

.LP
.nf
\fBpid_t\fR \fBucred_getpid\fR(\fBconst ucred_t *\fIuc\fR);
.fi

.LP
.nf
\fBprojid_t\fR \fBucred_getprojid\fR(\fBconst ucred_t *\fIuc\fR);
.fi

.LP
.nf
\fBzoneid_t\fR \fBucred_getzoneid\fR(\fBconst ucred_t *\fIuc\fR);
.fi

.LP
.nf
\fBuint_t\fR \fBucred_getpflags\fR(\fBconst ucred_t *\fIuc\fR, \fBuint_t\fR \fIflags\fR);
.fi

.LP
.nf
\fBm_label_t *\fBucred_getlabel\fR(\fBconst ucred_t *\fIuc\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBucred_size\fR(\fBvoid\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions return or act on a user credential,
.BR ucred_t .
User
credentials are returned by various functions and describe the credentials of
a process. Information about the process can then be obtained by calling the
access functions. Access functions can fail if the underlying mechanism did
not return sufficient information.
.sp
.LP
The
.B ucred_get()
function returns the user credential of the specified
.I pid
or
.I NULL
if none can be obtained. A
.I pid
value of
.B P_MYID
returns information about the calling process. The return value
is dynamically allocated and must be freed using
.BR ucred_free() .
.sp
.LP
The
.BR ucred_geteuid() ,
.BR ucred_getruid() ,
.BR ucred_getsuid() ,
.BR ucred_getegid() ,
.BR ucred_getrgid() ,
and
.BR ucred_getsgid()
functions return the effective UID, real UID, saved UID, effective GID, real
GID, saved GID, respectively, or -1 if the user credential does not contain
sufficient information.
.sp
.LP
The
.B ucred_getgroups()
function stores a pointer to the group list in
the
.B "gid_t *"
pointed to by the second argument and returns the number of
groups in the list. It returns -1 if the information is not available. The
returned group list is valid until
.B ucred_free()
is called on the user
credential given as argument.
.sp
.LP
The
.B ucred_getpid()
function returns the process ID of the process or
-1 if the process ID is not available. The process ID returned in a user
credential is only guaranteed to be correct in a very limited number of cases
when returned by
.BR door_ucred "(3C) and"
.BR ucred_get() .
In all other
cases, the process in question might have handed of the file descriptor, the
process might have exited or executed another program, or the process ID
might have been reused by a completely unrelated process after the original
program exited.
.sp
.LP
The
.B ucred_getprojid()
function returns the project ID of the process
or -1 if the project ID is not available.
.sp
.LP
The
.B ucred_getzoneid()
function returns the zone ID of the process or
\(mi1 if the zone ID is not available.
.sp
.LP
The
.B ucred_getprivset()
function returns the specified privilege set
specified as second argument, or
.I NULL
if either the requested
information is not available or the privilege set name is invalid. The
returned privilege set is valid until
.B ucred_free()
is called on the
specified user credential.
.sp
.LP
The
.B ucred_getpflags()
function returns the value of the specified
privilege flags from the
.B ucred
structure, or (\fBuint_t\fR)-1 if none
was present.
.sp
.LP
The
.B ucred_getlabel()
function returns the value of the label, or
.I NULL
if the label is not available. The returned label is valid until
.B ucred_free()
is called on the specified user credential. This function
is available only if the system is configured with Trusted Extensions.
.sp
.LP
The
.B ucred_free()
function frees the memory allocated for the specified
user credential.
.sp
.LP
The
.B ucred_size()
function returns \fBsizeof\fR(\fBucred_t\fR). This
value is constant only until the next boot, at which time it could change.
The
.B ucred_size()
function can be used to determine the size of the
buffer needed to receive a credential option with
.BR SO_RECVUCRED .
See
.BR socket.h (3HEAD).
.SH RETURN VALUES
.sp
.LP
See DESCRIPTION.
.SH ERRORS
.sp
.LP
The
.B ucred_get()
function will fail if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
There is not enough memory available to allocate sufficient memory to hold a
user credential. The application can try again later.
.RE

.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 10n
.rt
The caller does not have sufficient privileges to examine the target
process.
.RE

.sp
.ne 2
.mk
.na
.B EMFILE
.ad
.br
.na
.B ENFILE
.ad
.RS 10n
.rt
The calling process cannot open any more files.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
The physical limits of the system are exceeded by the memory allocation
needed to hold a user credential.
.RE

.sp
.ne 2
.mk
.na
.B ESRCH
.ad
.RS 10n
.rt
The target process does not exist.
.RE

.sp
.LP
The
.B ucred_getprivset()
function will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The privilege set argument is invalid.
.RE

.sp
.LP
The
.B ucred_getlabel()
function will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The label is not present.
.RE

.sp
.LP
The
.BR ucred_geteuid() ,
.BR ucred_getruid() ,
.BR ucred_getsuid() ,
.BR ucred_getegid() ,
.BR ucred_getrgid() ,
.BR ucred_getsgid() ,
.BR ucred_getgroups() ,
.BR ucred_getpflags() ,
.BR ucred_getprivset() ,
.BR ucred_getprojid() ,
.BR ucred_getpid() ,
and
.BR ucred_getlabel()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The requested user credential attribute is not available in the specified
user credential.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR getpflags (2),
.BR getppriv (2),
.BR door_ucred (3C),
.BR getpeerucred (3C),
.BR priv_set (3C),
.BR socket.h (3HEAD),
.BR attributes (5),
.BR labels (5),
.BR privileges (5)
