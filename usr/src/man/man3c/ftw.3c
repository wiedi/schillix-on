'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 2001, the Institute of Electrical and Electronics Engineers, Inc. and The Open Group. All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ftw 3C "30 Jan 2007" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
ftw, nftw \- walk a file tree
.SH SYNOPSIS
.LP
.nf
#include <ftw.h>

\fBint\fR \fBftw\fR(\fBconst char *\fIpath\fR, \fBint\fR (*\fIfn\fR) (\fBconst char *\fR,
     \fBconst struct stat *\fR, \fBint\fR), \fBint\fR \fIdepth\fR);
.fi

.LP
.nf
\fBint\fR \fBnftw\fR(\fBconst char *\fIpath\fR, \fBint (*\fIfn\fR) (\fBconst char *\fR,
     \fBconst struct stat *\fR, \fBint\fR, \fBstruct FTW *\fR), \fBint\fR \fIdepth\fR,
     \fBint\fR \fIflags\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B ftw()
function recursively descends the directory hierarchy
rooted in
.IR path .
For each object in the hierarchy,
.B ftw()
calls
the user-defined function
.IR fn ,
passing it a pointer to a
null-terminated character string containing the name of the object, a
pointer to a
.B stat
structure (see
.BR stat (2))
containing information
about the object, and an integer. Possible values of the integer, defined in
the <\fBftw.h\fR> header, are:
.sp
.ne 2
.mk
.na
.B FTW_F
.ad
.RS 11n
.rt
The object is a file.
.RE

.sp
.ne 2
.mk
.na
.B FTW_D
.ad
.RS 11n
.rt
The object is a directory.
.RE

.sp
.ne 2
.mk
.na
.B FTW_DNR
.ad
.RS 11n
.rt
The object is a directory that cannot be read. Descendants of the directory
are not processed.
.RE

.sp
.ne 2
.mk
.na
.B FTW_NS
.ad
.RS 11n
.rt
The
.B stat()
function failed on the object because of lack of
appropriate permission or the object is a symbolic link that points to a
non-existent file. The
.B stat
buffer passed to
.I fn
is undefined.
.RE

.sp
.LP
The
.B ftw()
function visits a directory before visiting any of its
descendants.
.sp
.LP
The tree traversal continues until the tree is exhausted, an invocation of
.I fn
returns a non-zero value, or some error is detected within
.B ftw()
(such as an I/O error). If the tree is exhausted, \fBftw()\fR
returns
.BR 0 .
If \fIfn\fR returns a non-zero value, \fBftw()\fR stops its
tree traversal and returns whatever value was returned by
.IR fn .
.sp
.LP
The  \fBnftw()\fR function is similar to \fBftw()\fR except that it takes
the additional argument
.IR flags ,
which is a bitwise-inclusive OR of zero
or more of the following flags:
.sp
.ne 2
.mk
.na
.B FTW_CHDIR
.ad
.RS 13n
.rt
If set,
.B nftw()
changes the current working directory to each
directory as it reports files in that directory. If clear,
.B nftw()
does
not change the current working directory.
.RE

.sp
.ne 2
.mk
.na
.B FTW_DEPTH
.ad
.RS 13n
.rt
If set,
.B nftw()
reports all files in a directory before reporting the
directory itself. If clear,
.B nftw()
reports any directory before
reporting the files in that directory.
.RE

.sp
.ne 2
.mk
.na
.B FTW_MOUNT
.ad
.RS 13n
.rt
If set,
.B nftw()
reports only files in the same file system as path. If
clear,
.B nftw()
reports all files encountered during the walk.
.RE

.sp
.ne 2
.mk
.na
.B FTW_PHYS
.ad
.RS 13n
.rt
If set,
.B nftw()
performs a physical walk and does not follow symbolic
links.
.RE

.sp
.LP
If
.B FTW_PHYS
is clear and
.B FTW_DEPTH
is set,
.B nftw()
follows
links instead of reporting them, but does not report any directory that
would be a descendant of itself. If
.B FTW_PHYS
is clear and
.B FTW_DEPTH
is clear,
.B nftw()
follows links instead of reporting
them, but does not report the contents of any directory that would be a
descendant of itself.
.sp
.LP
At each file it encounters,
.B nftw()
calls the user-supplied function
.I fn
with four arguments:
.RS +4
.TP
.ie t \(bu
.el o
The first argument is the pathname of the object.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The second argument is a pointer to the
.B stat
buffer containing
information on the object.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The third argument is an integer giving additional information. Its value
is one of the following:
.RS

.sp
.ne 2
.mk
.na
.B FTW_F
.ad
.RS 11n
.rt
The object is a file.
.RE

.sp
.ne 2
.mk
.na
.B FTW_D
.ad
.RS 11n
.rt
The object is a directory.
.RE

.sp
.ne 2
.mk
.na
.B FTW_DP
.ad
.RS 11n
.rt
The object is a directory and subdirectories have been visited. (This
condition only occurs if the FTW_DEPTH flag is included in flags.)
.RE

.sp
.ne 2
.mk
.na
.B FTW_SL
.ad
.RS 11n
.rt
The object is a symbolic link. (This condition only occurs if the FTW_PHYS
flag is included in flags.)
.RE

.sp
.ne 2
.mk
.na
.B FTW_SLN
.ad
.RS 11n
.rt
The object is a symbolic link that points to a non-existent file. (This
condition only occurs if the FTW_PHYS flag is not included in flags.)
.RE

.sp
.ne 2
.mk
.na
.B FTW_DNR
.ad
.RS 11n
.rt
The object is a directory that cannot be read.  The user-defined function
.I fn
will not be called for any of its descendants.
.RE

.sp
.ne 2
.mk
.na
.B FTW_NS
.ad
.RS 11n
.rt
The
.B stat()
function failed on the object because of lack of
appropriate permission. The stat buffer passed to
.I fn
is undefined.
Failure of
.B stat()
for any other reason is considered an error and
.B nftw()
returns \(mi1.
.RE

.RE

.RE
.RS +4
.TP
.ie t \(bu
.el o
The fourth argument is a pointer to an
.B FTW
structure that contains
the following members:
.sp
.in +2
.nf
int   base;
int   level;
.fi
.in -2

The
.B base
member is the offset of the object's filename in the
pathname passed as the first argument to
.IR fn ().
The value of
.B level
indicates the depth relative to the root of the walk, where the
root level is 0.
.sp
The results are unspecified if the application-supplied
.IR fn ()
function
does not preserve the current working directory.
.RE
.sp
.LP
Both \fBftw()\fR and \fBnftw()\fR use one file descriptor for each level in
the tree. The
.I depth
argument limits the number of file descriptors
used. If
.I depth
is zero or negative, the effect is the same as if it
were 1. It must not be greater than the number of file descriptors currently
available for use.  The
.B ftw()
function runs faster if
.I depth
is
at least as large as the number of levels in the tree. Both
.B ftw()
and
.B nftw()
are able to descend to arbitrary depths in a file hierarchy and
do not fail due to path length limitations unless either the length of the
path name pointed to by the
.I path
argument exceeds {\fBPATH_MAX\fR}
requirements, or for
.BR ftw() ,
the specified depth is less than 2, or for
.BR nftw() ,
the specified depth is less than 2 and
.B FTW_CHDIR
is not
set. When \fBftw()\fR and \fBnftw()\fR return, they close any file
descriptors they have opened; they do not close any file descriptors that
might have been opened by
.IR fn .
.SH RETURN VALUES
.sp
.LP
If the tree is exhausted, \fBftw()\fR and \fBnftw()\fR return
.BR 0 .
If
the function pointed to by \fIfn\fR returns a non-zero value, \fBftw()\fR
and
.B nftw()
stop their tree traversal and return whatever value was
returned by the function pointed to by
.IR fn .
If
.B ftw()
and
.B nftw()
detect an error,  they return \fB\(mi1\fR and set \fBerrno\fR
to indicate the error.
.sp
.LP
If \fBftw()\fR and \fBnftw()\fR encounter an error other than \fBEACCES\fR
(see
.B FTW_DNR
and
.B FTW_NS
above),  they return \fB\(mi1\fR and set
.B errno
to indicate the error. The external variable
.B errno
can
contain any error value that is possible when a directory is opened or when
one of the
.B stat
functions is executed on a directory or file.
.SH ERRORS
.sp
.LP
The \fBftw()\fR and \fBnftw()\fR functions will fail if:
.sp
.ne 2
.mk
.na
.B ELOOP
.ad
.RS 16n
.rt
A loop exists in symbolic links encountered during resolution of the
.I path
argument
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
The length of the path name pointed to by the
.I path
argument exceeds
{\fBPATH_MAX\fR}, or a path name component is longer than
{\fBNAME_MAX\fR}.
.RE

.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 16n
.rt
A component of
.I path
does not name an existing file or
.I path
is
an empty string.
.RE

.sp
.ne 2
.mk
.na
.B ENOTDIR
.ad
.RS 16n
.rt
A component of
.I path
is not a directory.
.RE

.sp
.ne 2
.mk
.na
.B EOVERFLOW
.ad
.RS 16n
.rt
A field in the
.B stat
structure cannot be represented correctly in the
current programming environment for one or more files found in the file
hierarchy.
.RE

.sp
.LP
The
.B ftw()
function will fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 16n
.rt
Search permission is denied for any component of
.I path
or read
permission is denied for
.IR path .
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
The
.B ftw()
function has descended to a path that exceeds
{\fBPATH_MAX\fR} and the depth argument specified by the application is less
than 2 and
.B FTW_CHDIR
is not set.
.RE

.sp
.LP
The
.B nftw()
function will fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 10n
.rt
Search permission is denied for any component of
.I path
or read
permission is denied for
.IR path ,
or
.IR fn ()
returns \(mi1 and does
not reset
.BR errno .
.RE

.sp
.LP
The \fBnftw()\fR and \fBftw()\fR functions may fail if:
.sp
.ne 2
.mk
.na
.B ELOOP
.ad
.RS 16n
.rt
Too many symbolic links were encountered during resolution of the
.I path
argument.
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
Pathname resolution of a symbolic link in the path name pointed to by the
.I path
argument produced an intermediate result whose length exceeds
{\fBPATH_MAX\fR}.
.RE

.sp
.LP
The
.B ftw()
function may fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The value of the
.I depth
argument is invalid.
.RE

.sp
.LP
The
.B nftw()
function may fail if:
.sp
.ne 2
.mk
.na
.B EMFILE
.ad
.RS 10n
.rt
There are {\fBOPEN_MAX\fR} file descriptors currently open in the calling
process.
.RE

.sp
.ne 2
.mk
.na
.B ENFILE
.ad
.RS 10n
.rt
Too many files are currently open in the system.
.RE

.sp
.LP
If the function pointed to by
.I fn
encounters system errors,
.B errno
may be set accordingly.
.SH EXAMPLES
.LP
.B Example 1
Walk a directory structure using \fBftw()\fR.
.sp
.LP
The following example walks the current directory structure, calling the
.IR fn ()
function for every directory entry, using at most 10 file
descriptors:

.sp
.in +2
.nf
#include <ftw.h>
\&...
if (ftw(".", fn, 10) != 0) {
       perror("ftw"); exit(2);
}
.fi
.in -2

.LP
.B Example 2
Walk a directory structure using \fBnftw()\fR.
.sp
.LP
The following example walks the
.B /tmp
directory and its
subdirectories, calling the
.B nftw()
function for every directory entry,
to a maximum of 5 levels deep.

.sp
.in +2
.nf
#include <ftw.h>
\&...
int nftwfunc(const char *, const struct stat *, int, struct FTW *);
int nftwfunc(const char *filename, const struct stat *statptr,
      int fileflags, struct FTW *pfwt)
{
      return 0;
}
\&...
char *startpath = "/tmp";
int depth = 5;
int flags = FTW_CHDIR | FTW_DEPTH | FTW_MOUNT;
int ret;
ret = nftw(startpath, nftwfunc, depth, flags);
.fi
.in -2

.SH USAGE
.sp
.LP
Because \fBftw()\fR and \fBnftw()\fR are recursive, they can terminate with
a memory fault when applied by a thread with a small stack to very deep file
structures.
.sp
.LP
The \fBftw()\fR and \fBnftw()\fR functions allocate resources (memory, file
descriptors) during their operation. If
.B ftw()
they are forcibly
terminated, such as by \fBlongjmp\fR(3C) being executed by \fIfn\fR or an
interrupt routine, they will not have a chance to free those resources, so
they remain permanently allocated. A safe way to handle interrupts is to
store the fact that an interrupt has occurred and arrange to have \fIfn\fR
return a non-zero value at its next invocation.
.sp
.LP
The \fBftw()\fR and \fBnftw()\fR functions have transitional interfaces for
64-bit file offsets.  See
.BR lf64 (5).
.sp
.LP
The
.B ftw()
function is safe in multithreaded applications. The
.B nftw()
function is safe in multithreaded applications when the
.B FTW_CHDIR
flag is not set.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelMT-Safe with exceptions
.TE

.SH SEE ALSO
.sp
.LP
.BR stat (2),
.BR longjmp (3C),
.BR attributes (5),
.BR lf64 (5),
.BR standards (5)
