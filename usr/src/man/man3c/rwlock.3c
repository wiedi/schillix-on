'\" te
.\" Copyright (c) 1998 Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH rwlock 3C "14 May 1998" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
rwlock, rwlock_init, rwlock_destroy, rw_rdlock, rw_wrlock, rw_tryrdlock,
rw_trywrlock, rw_unlock \- multiple readers, single writer locks
.SH SYNOPSIS
.LP
.nf
cc -mt [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|.[ \fIlibrary\fR.\|.\|. ]

#include <synch.h>

\fBint\fR \fBrwlock_init\fR(\fBrwlock_t *\fIrwlp\fR, \fBint\fR \fItype\fR, \fBvoid *\fR \fIarg\fR);
.fi

.LP
.nf
\fBint\fR \fBrwlock_destroy\fR(\fBrwlock_t *\fIrwlp\fR);
.fi

.LP
.nf
\fBint\fR \fBrw_rdlock\fR(\fBrwlock_t *\fIrwlp\fR);
.fi

.LP
.nf
\fBint\fR \fBrw_wrlock\fR(\fBrwlock_t *\fIrwlp\fR);
.fi

.LP
.nf
\fBint\fR \fBrw_unlock\fR(\fBrwlock_t *\fIrwlp\fR);
.fi

.LP
.nf
\fBint\fR \fBrw_tryrdlock\fR(\fBrwlock_t *\fIrwlp\fR);
.fi

.LP
.nf
\fBint\fR \fBrw_trywrlock\fR(\fBrwlock_t *\fIrwlp\fR);
.fi

.SH DESCRIPTION
.sp
.LP
Many threads can have simultaneous read-only access to data, while only one
thread can have write access at any given time. Multiple read access with
single write access is controlled by locks, which are generally used to
protect data that is frequently searched.
.sp
.LP
Readers/writer locks can synchronize threads in this process and other
processes if they are allocated in writable memory  and shared among
cooperating processes (see
.BR mmap (2)),
and are initialized for this
purpose.
.sp
.LP
Additionally, readers/writer locks must be initialized prior to use.
.B rwlock_init()
The readers/writer lock pointed to by
.I rwlp
is
initialized by
.BR rwlock_init() .
A readers/writer lock is capable of
having several types of behavior, which is specified by
.BR type .
.I arg
is currently not used, although a future type may define new
behavior parameters by way of
.IR arg .
.sp
.LP
The
.I type
argument can be one of the following:
.sp
.ne 2
.mk
.na
.B USYNC_PROCESS
.ad
.RS 18n
.rt
The readers/writer lock can synchronize threads in this process and other
processes. The readers/writer lock should be initialized by only one
process.
.I arg
is ignored. A readers/writer lock initialized with this
type, must be allocated in memory shared between processses, i.e. either in
Sys V shared memory (see
.BR shmop (2))
or in memory mapped to a file (see
.BR mmap (2)).
It is illegal to initialize the object this way and to not
allocate it in such shared memory.
.RE

.sp
.ne 2
.mk
.na
.B USYNC_THREAD
.ad
.RS 18n
.rt
The readers/writer lock can synchronize  threads in this process, only.
.I arg
is ignored.
.RE

.sp
.LP
Additionally, readers/writer locks can be initialized by allocation  in
zeroed memory. A
.B type
of
.B USYNC_THREAD
is assumed in this case.
Multiple threads must not simultaneously initialize the same readers/writer
lock. And a readers/writer lock must not be re-initialized while in use by
other threads.
.sp
.LP
The following are default readers/writer lock initialization
(intra-process):
.sp
.in +2
.nf
rwlock_t rwlp;
rwlock_init(&rwlp, NULL, NULL);

.fi
.in -2

.sp
.LP
or
.sp
.in +2
.nf
rwlock_init(&rwlp, USYNC_THREAD, NULL);
.fi
.in -2

.sp
.LP
or
.sp
.in +2
.nf
rwlock_t  rwlp  =  DEFAULTRWLOCK;
.fi
.in -2

.sp
.LP
The following is a customized readers/writer lock initialization
(inter-process):
.sp
.in +2
.nf
rwlock_init(&rwlp, USYNC_PROCESS, NULL);
.fi
.in -2

.sp
.LP
.RI "Any state associated with the readers/writer lock pointed to by" " rwlp"
are destroyed by
.B rwlock_destroy()
and the readers/writer lock storage
space is not released.
.sp
.LP
.B rw_rdlock()
gets a read lock on the readers/writer lock pointed to by
.IR rwlp .
If the readers/writer lock is currently locked for writing, the
calling thread blocks until the write lock is freed. Multiple threads may
simultaneously hold a read lock on a  readers/writer lock.
.sp
.LP
.B rw_tryrdlock()
trys to get a read lock on the readers/writer lock
pointed to by
.IR rwlp .
If the readers/writer lock is locked for writing,
it returns an error; otherwise, the read lock is acquired.
.sp
.LP
.B rw_wrlock()
gets a write lock on the readers/writer lock pointed to
by
.IR rwlp .
If the readers/writer lock is currently locked for reading or
writing, the calling thread blocks until all the read and write locks are
freed. At any given time, only one thread may have a write lock on a
readers/writer lock.
.sp
.LP
.B rw_trywrlock()
trys to get a write lock on the readers/writer lock
pointed to by
.IR rwlp .
If the readers/writer lock is currently locked for
reading or writing, it returns an error.
.sp
.LP
.B rw_unlock()
unlocks a readers/writer lock pointed to by
.IR rwlp ,
if the readers/writer lock is locked and the calling thread holds the lock
for either reading or writing. One of the other threads that is waiting for
the readers/writer  lock to be freed will be unblocked, provided there is
other waiting threads. If the calling thread does not hold the lock for
either reading or writing, no error status is returned, and the program's
behavior is unknown.
.SH RETURN VALUES
.sp
.LP
If successful, these functions return
.BR 0 .
Otherwise, a non-zero value
is returned to indicate the error.
.SH ERRORS
.sp
.LP
The
.B rwlock_init()
function will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 11n
.rt
.B type
is invalid.
.RE

.sp
.LP
The
.B rw_tryrdlock()
or
.B rw_trywrlock()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EBUSY
.ad
.RS 10n
.rt
The reader or writer lock pointed to by
.I rwlp
was already locked.
.RE

.sp
.LP
These functions may fail if:
.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 11n
.rt
.I rwlp
or
.I arg
points to an illegal address.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR mmap (2),
.BR attributes (5)
.SH NOTES
.sp
.LP
These interfaces also available by way of:
.sp
.LP
.B #include <thread.h>
.sp
.LP
If multiple threads are waiting for a readers/writer lock, the acquisition
order is random by default. However, some implementations may bias
acquisition order to avoid depriving writers. The current implementation
favors writers over readers.
