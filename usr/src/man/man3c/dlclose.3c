'\" te
.\" Copyright 1989 AT&T Copyright (c) 2004, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH dlclose 3C "1 March 2004" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
dlclose \- close a shared object
.SH SYNOPSIS
.LP
.nf
#include <dlfcn.h>

\fBint\fR \fBdlclose\fR(\fBvoid *\fIhandle\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B dlclose()
function decrements the reference count of the supplied
.IR handle .
This
.I handle
represents an executable object file and its
dependencies, acquired from a previous call to
.BR dlopen() .
A
.I handle
that is no longer referenced is processed in an attempt to
unload any objects that are associated with the
.I handle
from the
current process. An unreferenced
.I handle
is no longer available to
.BR dlsym() .
.sp
.LP
Any finalization code within an object is executed prior to that object
being unloaded. Any routines registered by an object using
.BR atexit (3C)
are called prior to that object being unloaded. See NOTES.
.SH RETURN VALUES
.sp
.LP
If the
.I handle
was successfully unreferenced,
.B dlclose()
returns
.BR 0 .
If the
.I handle
is invalid, or an error occurred as a result of
unloading an object,
.B dlclose()
returns a non-zero value. Additional
diagnostic information is available through
.BR dlerror() .
.SH USAGE
.sp
.LP
The
.B dlclose()
function is one of a family of functions that give the
user direct access to the dynamic linking facilities. These facilities are
available to dynamically-linked processes only. See the \fILinker and
Libraries Guide\fR.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR ld (1),
.BR ld.so.1 (1),
.BR atexit (3C),
.BR dladdr (3C),
.BR dldump (3C),
.BR dlerror (3C),
.BR dlopen (3C),
.BR dlsym (3C),
.BR attributes (5),
.BR standards (5)
.sp
.LP
.I Linker and Libraries Guide
.SH NOTES
.sp
.LP
A successful invocation of
.B dlclose()
does not guarantee that the
objects associated with the
.I handle
are removed from the address space
of the current process. Objects can be referenced by multiple
.IR handles ,
or by other objects. An object is not removed from the address space of the
current process until all references to that object are removed.
.sp
.LP
Once an object has been closed by
.BR dlclose() ,
referencing symbols
contained in that object can cause undefined behavior.
.sp
.LP
As part of unloading an object, finalization code within the object is
called \fBbefore\fR the \fBdlclose()\fR returns. This finalization is user
code, and as such, can produce errors that can not be caught by
.BR dlclose() .
For example, an object loaded using
.B RTLD_LAZY
that
attempts to call a function that can not be located, results in process
termination. Erroneous programming practices within the finalization code
can also result in process termination. The runtime linkers debugging
facility can offer help identifying these types of error. See the
.B LD_DEBUG
environment variable of
.BR ld.so.1 (1).
