'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc. All Rights Reserved.
.\" Portions Copyright 1999, Forrest J. Cavalier III. All Rights Reserved.
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 2001, the Institute of Electrical and Electronics Engineers, Inc. and The Open Group. All Rights Reserved.
.\" Portions Copyright (c) 1997, The Open Group. All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH printf 3C "7 Jan 2009" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
printf, fprintf, sprintf, snprintf, asprintf \- print formatted output
.SH SYNOPSIS
.LP
.nf
#include <stdio.h>

\fBint\fR \fBprintf\fR(\fBconst char *restrict\fR \fIformat\fR,
     \fB/*\fR \fIargs\fR*/ .\|.\|.);
.fi

.LP
.nf
\fBint\fR \fBfprintf\fR(\fBFILE *restrict\fR \fIstream\fR, \fBconst char *restrict\fR \fIformat\fR,
     \fB/*\fR \fIargs\fR*/ .\|.\|.);
.fi

.LP
.nf
\fBint\fR \fBsprintf\fR(\fBchar *restrict\fR \fIs\fR, \fBconst char *restrict\fR \fIformat\fR,
     \fB/*\fR \fIargs\fR*/ .\|.\|.);
.fi

.LP
.nf
\fBint\fR \fBsnprintf\fR(\fBchar *restrict\fR \fIs\fR, \fBsize_t\fR \fIn\fR,
     \fBconst char *restrict\fR \fIformat\fR, \fB/*\fR \fIargs\fR*/ .\|.\|.);
.fi

.LP
.nf
\fBint\fR \fBasprintf\fR(\fBchar **\fR \fIret\fR, \fBconst char *restrict\fR \fIformat\fR,
     \fB/*\fR \fIargs\fR*/ .\|.\|.);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBprintf()\fR function places output on the standard output stream
.BR stdout .
.sp
.LP
The \fBfprintf()\fR function places output on on the named output stream
.IR stream .
.sp
.LP
The \fBsprintf()\fR function places output, followed by the null byte
(\fB\e0\fR), in consecutive bytes starting at
.IR s ;
it is the user's
responsibility to ensure that enough storage is available.
.sp
.LP
The \fBsnprintf()\fR function is identical to \fBsprintf()\fR with the
addition of the argument
.IR n ,
which specifies the size of the buffer
referred to by
.IR s .
If
.I n
is 0, nothing is written and
.I s
can
be a null pointer. Otherwise, output bytes beyond the \fIn\fR-1st are
discarded instead of being written to the array and a null byte is written
at the end of the bytes actually written into the array.
.sp
.LP
The \fBasprintf()\fR function is the same as the \fBsprintf()\fR function
except that it returns, in the
.I ret
argument, a pointer to a buffer
sufficiently large to hold the output string. This pointer should be passed
to \fBfree\fR(3C) to release the allocated storage when it is no longer
needed. If sufficient space cannot be allocated, the \fBasprintf()\fR
function returns -1 and sets
.I ret
to be a
.I NULL
pointer.
.sp
.LP
Each of these functions converts, formats, and prints its arguments under
control of the
.IR format .
The \fIformat\fR is a character string,
beginning and ending in its initial shift state, if any. The \fIformat\fR is
composed of zero or more directives:
.BR "ordinary characters" ,
which are
simply copied to the output stream and
.BR "conversion specifications" ,
each
of which results in the fetching of zero or more arguments. The results are
undefined if there are insufficient arguments for the
.IR format .
If the
\fIformat\fR is exhausted while arguments remain, the excess arguments are
evaluated but are otherwise ignored.
.sp
.LP
Conversions can be applied to the \fIn\fRth argument after the \fIformat\fR
in the argument list, rather than to the next unused argument. In this case,
the conversion specifier
.B %
(see below) is replaced by the sequence
\fB%\fIn\fB$\fR, where \fIn\fR is a decimal integer in the range [1,
\fBNL_ARGMAX\fR], giving the position of the argument in the argument list.
This feature provides for the definition of format strings that select
arguments in an order appropriate to specific languages (see the
\fBEXAMPLES\fR section).
.sp
.LP
In format strings containing the \fB%\fIn\fB$\fR form of conversion
specifications, numbered arguments in the argument list can be referenced
from the format string as many times as required.
.sp
.LP
In format strings containing the
.B %
form of conversion specifications,
each argument in the argument list is used exactly once.
.sp
.LP
All forms of the \fBprintf()\fR functions allow for the insertion of a
language-dependent radix character in the output string. The radix character
is defined by the program's locale (category
.BR LC_NUMERIC ).
In the POSIX
locale, or in a locale where the radix character is not defined, the radix
character defaults to a period (\fB\&.\fR).
.SS "Conversion Specifications"
.sp
.LP
Each conversion specification is introduced by the
.B %
character or by
the character sequence \fB%\fIn\fB$\fR, after which the following
appear in sequence:
.RS +4
.TP
.ie t \(bu
.el o
An optional field, consisting of a decimal digit string followed by a
.BR $ ,
specifying the next argument to be converted. If this field is not
provided, the
.I args
following the last argument converted will be
used.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Zero or more \fIflags\fR (in any order), which modify the meaning of the
conversion specification.
.RE
.RS +4
.TP
.ie t \(bu
.el o
An optional minimum
.IR "field width" .
If the converted value has fewer
bytes than the field width, it will be padded with spaces by default on the
left; it will be padded on the right, if the left-adjustment flag
(\fB\(hy\fR), described below, is given to the field width. The field width
takes the form of an asterisk (*), described below, or a decimal integer.
.sp
If the conversion specifier is
.BR s ,
a standard-conforming application
(see
.BR standards (5))
interprets the field width as the minimum number of
bytes to be printed; an application that is not standard-conforming
interprets the field width as the minimum number of columns of screen
display. For an application that is not standard-conforming, \fB%10s\fR
means if the converted value has a screen width of 7 columns, 3 spaces would
be padded on the right.
.sp
If the format is
.BR %ws ,
then the field width should be interpreted as
the minimum number of columns of screen display.
.RE
.RS +4
.TP
.ie t \(bu
.el o
An optional
.I precision
that gives the minimum number of digits to
appear for the
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
and
.BR X
conversions (the field is padded with leading zeros); the number of digits
to appear after the radix character for the
.BR a ,
.BR A ,
.BR e ,
.BR E ,
\fBf\fR, and \fBF\fR conversions, the maximum number of significant
digits for the
.B g
and
.B G
conversions; or the maximum number of
bytes to be printed from a string in
.B s
and
.B S
conversions. The
precision takes the form of a period (.) followed either by an asterisk (*),
described below, or an optional decimal digit string, where a null digit
string is treated as 0. If a precision appears with any other conversion
specifier, the behavior is undefined.
.sp
If the conversion specifier is
.B s
or
.BR S ,
a standard-conforming
application (see
.BR standards (5))
interprets the precision as the maximum
number of bytes to be written; an application that is not
standard-conforming interprets the precision as the maximum number of
columns of screen display. For an application that is not
standard-conforming,
.B %.5s
would print only the portion of the string
that would display in 5 screen columns. Only complete characters are
written.
.sp
For
.BR %ws ,
the precision should be interpreted as the maximum number of
columns of screen display. The precision takes the form of a period
(\fB\&.\fR) followed by a decimal digit string; a null digit string is
treated as zero. Padding specified by the precision overrides the padding
specified by the field width.
.RE
.RS +4
.TP
.ie t \(bu
.el o
An optional \fIlength modifier\fR that specified the size of the
argument.
.RE
.RS +4
.TP
.ie t \(bu
.el o
A \fIconversion specifier\fR that indicates the type of conversion to be
applied.
.RE
.sp
.LP
A field width, or precision, or both can be indicated by an asterisk
(\fB*\fR) . In this case, an argument of type \fBint\fR supplies the field
width or precision. Arguments specifying field width, or precision, or both
must appear in that order before the argument, if any, to be converted. A
negative field width is taken as a \(mi flag followed by a positive field
width. A negative precision is taken as if the precision were omitted. In
format strings containing the \fB%\fIn\fB$\fR form of a conversion
specification, a field width or precision may be indicated by the sequence
\fB*\fIm\fB$\fR, where \fIm\fR is a decimal integer in the range [1,
\fBNL_ARGMAX\fR] giving the position in the argument list (after the format
argument) of an integer argument containing the field width or precision,
for example:
.sp
.in +2
.nf
printf("%1$d:%2$.*3$d:%4$.*3$d\en", hour, min, precision, sec);
.fi
.in -2

.sp
.LP
The \fIformat\fR can contain either numbered argument specifications (that
is, \fB%\fIn\fB$\fR and \fB*\fIm\fB$\fR), or unnumbered argument
specifications (that is,
.B %
and
.BR * ),
but normally not both. The
only exception to this is that
.B %%
can be mixed with the
\fB%\fIn\fB$\fR form. The results of mixing numbered and unnumbered
argument specifications in a \fIformat\fR string are undefined. When
numbered argument specifications are used, specifying the \fIN\fRth argument
requires that all the leading arguments, from the first to the
(\fIN-1\fR)th, are specified in the format string.
.SS "Flag Characters"
.sp
.LP
The flag characters and their meanings are:
.sp
.ne 2
.mk
.na
\fB\&'\fR
.ad
.RS 9n
.rt
The integer portion of the result of a decimal conversion (\fB%i\fR,
.BR %d ,
.BR %u ,
\fB%f\fR,
.BR %F ,
.BR %g ,
or
.BR %G )
will be
formatted with thousands' grouping characters. For other conversions the
behavior is undefined. The non-monetary grouping character is used.
.RE

.sp
.ne 2
.mk
.na
\fB\(mi\fR
.ad
.RS 9n
.rt
The result of the conversion will be left-justified within the field. The
conversion will be right-justified if this flag is not specified.
.RE

.sp
.ne 2
.mk
.na
.B +
.ad
.RS 9n
.rt
The result of a signed conversion will always begin with a sign (+ or -).
The conversion will begin with a sign only when a negative value is
converted if this flag is not specified.
.RE

.sp
.ne 2
.mk
.na
.B space
.ad
.RS 9n
.rt
If the first character of a signed conversion is not a sign or if a signed
conversion results in no characters, a space will be placed before the
result. This means that if the
.B space
and
.B +
flags both appear,
the space flag will be ignored.
.RE

.sp
.ne 2
.mk
.na
.B #
.ad
.RS 9n
.rt
The value is to be converted to an alternate form. For
.BR c ,
.BR d ,
.BR i ,
.BR s ,
and
.B u
conversions, the flag has no effect. For an
\fBo\fR conversion, it increases the precision (if necessary) to force the
first digit of the result to be a zero. For
.B x
or
.B X
conversion, a
non-zero result will have
.B 0x
(or
.BR 0X )
prepended to it. For
.BR a ,
.BR A ,
.BR e ,
.BR E ,
\fBf\fR,
.BR F ,
.BR g ,
and
.BR G
conversions, the result will always contain a radix character, even if no
digits follow the radix character. Without this flag, the radix character
appears in the result of these conversions only if a digit follows it. For
\fBg\fR and \fBG\fR conversions, trailing zeros will not be removed from the
result as they normally are.
.RE

.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 9n
.rt
For
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
.BR X ,
.BR a ,
.BR A ,
.BR e ,
.BR E ,
\fBf\fR,
.BR F ,
.BR g ,
and
.B G
conversions,
leading zeros (following any indication of sign or base) are used to pad to
the field width; no space padding is performed. If the
.B 0
and
\fB\(mi\fR flags both appear, the \fB0\fR flag will be ignored. For \fBd\fR,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
and
.B X
conversions, if a precision
is specified, the
.B 0
flag will be ignored. If the
.B 0
and \fB\&'\fR
flags both appear, the grouping characters are inserted before zero padding.
For other conversions, the behavior is undefined.
.RE

.SS "Length Modifiers"
.sp
.LP
The length modifiers and their meanings are:
.sp
.ne 2
.mk
.na
.B hh
.ad
.RS 16n
.rt
Specifies that a following
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
or
\fBX\fR conversion specifier applies to a \fBsigned char\fR or \fBunsigned
char\fR argument (the argument will have been promoted according to the
integer promotions, but its value will be converted to
.B "signed char"
or
\fBunsigned char\fR before printing); or that a following \fBn\fR conversion
specifier applies to a pointer to a
.B "signed char"
argument.
.RE

.sp
.ne 2
.mk
.na
.B h
.ad
.RS 16n
.rt
Specifies that a following
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
or
\fBX\fR conversion specifier applies to a \fBshort\fR or \fBunsigned
short\fR argument (the argument will have been promoted according to the
integer promotions, but its value will be converted to
.B short
or
\fBunsigned short\fR before printing); or that a following \fBn\fR
conversion specifier applies to a pointer to a
.B short
argument.
.RE

.sp
.ne 2
.mk
.na
.B l (ell)
.ad
.RS 16n
.rt
Specifies that a following
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
or
\fBX\fR conversion specifier applies to a \fBlong\fR or \fBunsigned long\fR
argument; that a following
.B n
conversion specifier applies to a pointer
to a
.B long
argument; that a following
.B c
conversion specifier
applies to a
.B wint_t
argument; that a following
.B s
conversion
specifier applies to a pointer to a
.B wchar_t
argument; or has no effect
on a following
.BR a ,
.BR A ,
.BR e ,
.BR E ,
\fBf\fR, \fBF\fR,
.BR g ,
or
.B G
conversion specifier.
.RE

.sp
.ne 2
.mk
.na
.B ll (ell-ell)
.ad
.RS 16n
.rt
Specifies that a following
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
or
\fBX\fR conversion specifier applies to a \fBlong long\fR or \fBunsigned
long long\fR argument; or that a following \fBn\fR conversion specifier
applies to a pointer to a
.B "long long"
argument.
.RE

.sp
.ne 2
.mk
.na
.B j
.ad
.RS 16n
.rt
Specifies that a following
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
or
\fBX\fR conversion specifier applies to an \fBintmax_t\fR or \fBuintmax_t\fR
argument; or that a following
.B n
conversion specifier applies to a
pointer to an
.B intmax_t
argument. See NOTES.
.RE

.sp
.ne 2
.mk
.na
.B z
.ad
.RS 16n
.rt
Specifies that a following
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
or
\fBX\fR conversion specifier applies to a \fBsize_t\fR or the corresponding
signed integer type argument; or that a following
.B n
conversion
specifier applies to a pointer to a signed integer type corresponding to
\fBsize_t\fR argument.
.RE

.sp
.ne 2
.mk
.na
.B t
.ad
.RS 16n
.rt
Specifies that a following
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
or
\fBX\fR conversion specifier applies to a \fBptrdiff_t\fR or the
corresponding unsigned type argument; or that a following n conversion
specifier applies to a pointer to a \fBptrdiff_t\fR argument.
.RE

.sp
.ne 2
.mk
.na
.B L
.ad
.RS 16n
.rt
Specifies that a following
.BR a ,
.BR A ,
.BR e ,
.BR E ,
\fBf\fR,
.BR F ,
.BR g ,
or
.B G
conversion specifier applies to a \fBlong
double\fR argument.
.RE

.sp
.LP
If a length modifier appears with any conversion specifier other than as
specified above, the behavior is undefined.
.SS "Conversion Specifiers"
.sp
.LP
Each conversion specifier results in fetching zero or more arguments. The
results are undefined if there are insufficient arguments for the format. If
the format is exhausted while arguments remain, the excess arguments are
ignored.
.sp
.LP
The conversion specifiers and their meanings are:
.sp
.ne 2
.mk
.na
.BR d ,
.B i
.ad
.RS 8n
.rt
The
.B int
argument is converted to a signed decimal in the style
\fB[\fR\(mi\fB]\fIdddd\fR. The precision specifies the minimum number of
digits to appear; if the value being converted can be represented in fewer
digits, it will be expanded with leading zeros. The default precision is 1.
The result of converting 0 with an explicit precision of 0 is no
characters.
.RE

.sp
.ne 2
.mk
.na
.B o
.ad
.RS 8n
.rt
The
.B "unsigned int"
argument is converted to unsigned octal format in
the style
.IR dddd .
The precision specifies the minimum number of digits
to appear; if the value being converted can be represented in fewer digits,
it will be expanded with leading zeros. The default precision is 1. The
result of converting 0 with an explicit precision of 0 is no characters.
.RE

.sp
.ne 2
.mk
.na
.B u
.ad
.RS 8n
.rt
The
.B "unsigned int"
argument is converted to unsigned decimal format in
the style
.IR dddd .
The precision specifies the minimum number of digits
to appear; if the value being converted can be represented in fewer digits,
it will be expanded with leading zeros. The default precision is 1. The
result of converting 0 with an explicit precision of 0 is no characters.
.RE

.sp
.ne 2
.mk
.na
.B x
.ad
.RS 8n
.rt
The
.B "unsigned int"
argument is converted to unsigned hexadecimal format
in the style
.IR dddd ;
the letters \fBabcdef\fR are used. The precision
specifies the minimum number of digits to appear; if the value being
converted can be represented in fewer digits, it will be expanded with
leading zeros. The default precision is 1. The result of converting 0 with
an explicit precision of 0 is no characters.
.RE

.sp
.ne 2
.mk
.na
.B X
.ad
.RS 8n
.rt
Behaves the same as the
.B x
conversion specifier except that letters
\fBABCDEF\fR are used instead of \fBabcdef\fR.
.RE

.sp
.ne 2
.mk
.na
\fBf\fR, \fBF\fR
.ad
.RS 8n
.rt
The
.B double
argument is converted to decimal notation in the style
[\fB\(mi\fR]\fIddd\fB\&.\fIddd\fR, where the number of digits after
the radix character (see
.BR setlocale (3C))
is equal to the precision
specification. If the precision is missing it is taken as 6; if the
precision is explicitly 0 and the
.B #
flag is not specified, no radix
character appears. If a radix character appears, at least 1 digit appears
before it. The converted value is rounded to fit the specified output format
according to the prevailing floating point rounding direction mode. If the
conversion is not exact, an inexact exception is raised.
.sp
For the \fBf\fR specifier, a double argument representing an infinity or
NaN is converted in the style of the
.B e
conversion specifier, except
that for an infinite argument, "infinity" or "Infinity" is printed when the
precision is at least 8 and "inf" or "Inf" is printed otherwise.
.sp
For the F specifier, a double argument representing an infinity or NaN is
converted in the SUSv3 style of the E conversion specifier, except that for
an infinite argument, "INFINITY" is printed when the precision is at least 8
and or "INF" is printed otherwise.
.RE

.sp
.ne 2
.mk
.na
.BR e ,
.B E
.ad
.RS 8n
.rt
The
.B double
argument is converted to the style
[\fB\(mi\fR]\fId\fB\&.\fIddd\fBe\fI\(+-dd\fR, where there is one
digit before the radix character (which is non-zero if the argument is
non-zero) and the number of digits after it is equal to the precision. When
the precision is missing it is taken as 6; if the precision is 0 and the
\fB#\fR flag is not specified, no radix character appears. The \fBE\fR
conversion specifier will produce a number with
.B E
instead of
.BR e
introducing the exponent. The exponent always contains at least two digits.
The converted value is rounded to fit the specified output format according
to the prevailing floating point rounding direction mode. If the conversion
is not exact, an inexact exception is raised.
.sp
Infinity and NaN values are handled in one of the following ways:
.sp
.ne 2
.mk
.na
.B SUSv3
.ad
.RS 11n
.rt
For the
.B e
specifier, a
.B double
argument representing an infinity
is printed as "[\(mi]\fBinfinity\fR", when the precision for the conversion
is at least 7 and as "[\(mi]\fBinf\fR" otherwise. A \fBdouble\fR argument
representing a NaN is printed as "[\(mi]\fBnan\fR". For the \fBE\fR
specifier, "\fBINF\fR", "\fBINFINITY\fR", and "\fBNAN\fR" are printed
instead of "\fBinf\fR", "\fBinfinity\fR", and "\fBnan\fR", respectively.
Printing of the sign follows the rules described above.
.RE

.sp
.ne 2
.mk
.na
\fBDefault\fR
.ad
.RS 11n
.rt
A
.B double
argument representing an infinity is printed as
"[\(mi]\fBInfinity\fR", when the precision for the conversion is at least 7
and as "[\(mi]\fBInf\fR" otherwise. A double argument representing a NaN is
printed as "[\(mi]\fBNaN\fR". Printing of the sign follows the rules
described above.
.RE

.RE

.sp
.ne 2
.mk
.na
.BR g ,
.B G
.ad
.RS 8n
.rt
The
.B double
argument is printed in style \fBf\fR or
.B e
(or in
style
.B E
in the case of a
.B G
conversion specifier), with the
precision specifying the number of significant digits. If an explicit
precision is 0, it is taken as 1. The style used depends on the value
converted: style
.B e
(or
.BR E )
will be used only if the exponent
resulting from the conversion is less than -4 or greater than or equal to
the precision. Trailing zeros are removed from the fractional part of the
result. A radix character appears only if it is followed by a digit.
.sp
A
.B double
argument representing an infinity or NaN is converted in the
style of the
.B e
or
.B E
conversion specifier, except that for an
infinite argument, "infinity", "INFINITY", or "Infinity" is printed when the
precision is at least 8 and "inf", "INF", or "Inf" is printed otherwise.
.RE

.sp
.ne 2
.mk
.na
.BR a ,
.B A
.ad
.RS 8n
.rt
A
.B double
argument representing a floating-point number is converted
in the style "[-]0\fIxh\fR.\fIhhhhp\fR\(+-\fId\fR", where the single
hexadecimal digit preceding the radix point is 0 if the value converted is
zero and 1 otherwise and the number of hexadecimal digits after it is equal
to the precision; if the precision is missing, the number of digits printed
after the radix point is 13 for the conversion of a double value, 16 for the
conversion of a long double value on x86, and 28 for the conversion of a
long double value on SPARC; if the precision is zero and the '#' flag is not
specified, no decimal-point character will appear. The letters
"\fBabcdef\fR" are used for \fBa\fR conversion and the letters
"\fBABCDEF\fR" for \fBA\fR conversion. The \fBA\fR conversion specifier
produces a number with '\fBX\fR' and '\fBP\fR' instead of '\fBx\fR' and
\&'\fBp\fR'. The exponent will always contain at least one digit, and only
as many more digits as necessary to represent the decimal exponent of 2. If
the value is zero, the exponent is zero.
.sp
The converted value is rounded to fit the specified output format according
to the prevailing floating point rounding direction mode. If the conversion
is not exact, an inexact exception is raised.
.sp
A
.B double
argument representing an infinity or NaN is converted in the
SUSv3 style of an
.B e
or
.B E
conversion specifier.
.RE

.sp
.ne 2
.mk
.na
.B c
.ad
.RS 8n
.rt
The
.B int
argument is converted to an
.BR "unsigned char" ,
and the
resulting byte is printed.
.sp
If an
.B l
(ell) qualifier is present, the
.B wint_t
argument is
converted as if by an
.B ls
conversion specification with no precision
and an argument that points to a two-element array of type \fBwchar_t\fR,
the first element of which contains the
.B wint_t
argument to the
\fBls\fR conversion specification and the second element contains a null
wide-character.
.RE

.sp
.ne 2
.mk
.na
.B C
.ad
.RS 8n
.rt
Same as
.BR lc .
.RE

.sp
.ne 2
.mk
.na
.B wc
.ad
.RS 8n
.rt
The
.B int
argument is converted to a wide character
.RB ( wchar_t ),
and the resulting wide character is printed.
.RE

.sp
.ne 2
.mk
.na
.B s
.ad
.RS 8n
.rt
The argument must be a pointer to an array of
.BR char .
Bytes from the
array are written up to (but not including) any terminating null byte. If a
precision is specified, a standard-conforming application (see
.BR standards (5))
will write only the number of bytes specified by
precision; an application that is not standard-conforming will write only
the portion of the string that will display in the number of columns of
screen display specified by precision. If the precision is not specified, it
is taken to be infinite, so all bytes up to the first null byte are printed.
An argument with a null value will yield undefined results.
.sp
If an
.B l
(ell) qualifier is present, the argument must be a pointer to
an array of type
.BR wchar_t .
Wide-characters from the array are converted
to characters (each as if by a call to the \fBwcrtomb\fR(3C) function, with
the conversion state described by an
.B mbstate_t
object initialized to
zero before the first wide-character is converted) up to and including a
terminating null wide-character. The resulting characters are written up to
(but not including) the terminating null character (byte). If no precision
is specified, the array must contain a null wide-character. If a precision
is specified, no more than that many characters (bytes) are written
(including shift sequences, if any), and the array must contain a null
wide-character if, to equal the character sequence length given by the
precision, the function would need to access a wide-character one past the
end of the array. In no case is a partial character written.
.RE

.sp
.ne 2
.mk
.na
.B S
.ad
.RS 8n
.rt
Same as
.BR ls .
.RE

.sp
.ne 2
.mk
.na
.B ws
.ad
.RS 8n
.rt
The argument must be a pointer to an array of
.BR wchar_t .
Bytes from the
array are written up to (but not including) any terminating null character.
If the precision is specified, only that portion of the wide-character array
that will display in the number of columns of screen display specified by
precision will be written. If the precision is not specified, it is taken to
be infinite, so all wide characters up to the first null character are
printed. An argument with a null value will yield undefined results.
.RE

.sp
.ne 2
.mk
.na
.B p
.ad
.RS 8n
.rt
The argument must be a pointer to
.BR void .
The value of the pointer is
converted to a set of sequences of printable characters, which should be the
same as the set of sequences that are matched by the
.B %p
conversion of
the \fBscanf\fR(3C) function.
.RE

.sp
.ne 2
.mk
.na
.B n
.ad
.RS 8n
.rt
The argument must be a pointer to an integer into which is written the
number of bytes written to the output standard I/O stream so far by this
call to one of the \fBprintf()\fR functions. No argument is converted.
.RE

.sp
.ne 2
.mk
.na
.B %
.ad
.RS 8n
.rt
Print a
.BR % ;
no argument is converted. The entire conversion
specification must be %%.
.RE

.sp
.LP
If a conversion specification does not match one of the above forms, the
behavior is undefined.
.sp
.LP
In no case does a non-existent or small field width cause truncation of a
field; if the result of a conversion is wider than the field width, the
field is simply expanded to contain the conversion result. Characters
generated by \fBprintf()\fR and \fBfprintf()\fR are printed as if the
.BR putc (3C)
function had been called.
.sp
.LP
The
.B st_ctime
and
.B st_mtime
fields of the file will be marked for
update between the call to a successful execution of \fBprintf()\fR or
\fBfprintf()\fR and the next successful completion of a call to
\fBfflush\fR(3C) or \fBfclose\fR(3C) on the same stream or a call to
.BR exit (3C)
or
.BR abort (3C).
.SH RETURN VALUES
.sp
.LP
The
.BR printf() ,
\fBfprintf()\fR,
.BR sprintf() ,
and \fBasprintf()\fR
functions return the number of bytes transmitted (excluding the terminating
null byte in the case of \fBsprintf()\fR and \fBasprintf()\fR).
.sp
.LP
The \fBsnprintf()\fR function returns the number of bytes that would have
been written to
.I s
if
.I n
had been sufficiently large (excluding
the terminating null byte.) If the value of
.I n
is 0 on a call to
\fBsnprintf()\fR, \fIs\fR can be a null pointer and the number of bytes that
would have been written if
.I n
had been sufficiently large (excluding
the terminating null byte) is returned.
.sp
.LP
Each function returns a negative value if an output error was
encountered.
.SH ERRORS
.sp
.LP
For the conditions under which \fBprintf()\fR and \fBfprintf()\fR will fail
and may fail, refer to \fBfputc\fR(3C) or \fBfputwc\fR(3C).
.sp
.LP
The \fBsnprintf()\fR function will fail if:
.sp
.ne 2
.mk
.na
.B EOVERFLOW
.ad
.RS 13n
.rt
The value of
.I n
is greater than
.B INT_MAX
or the number of bytes
needed to hold the output excluding the terminating null is greater than
.BR INT_MAX .
.RE

.sp
.LP
The
.BR printf() ,
\fBfprintf()\fR,
.BR sprintf() ,
and \fBsnprintf()\fR
functions may fail if:
.sp
.ne 2
.mk
.na
.B EILSEQ
.ad
.RS 10n
.rt
A wide-character code that does not correspond to a valid character has
been detected.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
There are insufficient arguments.
.RE

.sp
.LP
The
.BR printf() ,
\fBfprintf()\fR, and \fBasprintf()\fR functions may
fail due to an underlying \fBmalloc\fR(3C) failure if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
Storage space is temporarily unavailable.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
Insufficient storage space is available.
.RE

.SH USAGE
.sp
.LP
If the application calling the \fBprintf()\fR functions has any objects of
type
.B wint_t
or
.BR wchar_t ,
it must also include the header
\fB<wchar.h>\fR to have these objects defined.
.SS "Escape Character Sequences"
.sp
.LP
It is common to use the following escape sequences built into the C
language when entering format strings for the \fBprintf()\fR functions, but
these sequences are processed by the C compiler, not by the \fBprintf()\fR
function.
.sp
.ne 2
.mk
.na
\fB\ea\fR
.ad
.RS 7n
.rt
Alert. Ring the bell.
.RE

.sp
.ne 2
.mk
.na
\fB\eb\fR
.ad
.RS 7n
.rt
Backspace. Move the printing position to one character before the current
position, unless the current position is the start of a line.
.RE

.sp
.ne 2
.mk
.na
\fB\ef\fR
.ad
.RS 7n
.rt
Form feed. Move the printing position to the initial printing position of
the next logical page.
.RE

.sp
.ne 2
.mk
.na
\fB\en\fR
.ad
.RS 7n
.rt
Newline. Move the printing position to the start of the next line.
.RE

.sp
.ne 2
.mk
.na
\fB\er\fR
.ad
.RS 7n
.rt
Carriage return. Move the printing position to the start of the current
line.
.RE

.sp
.ne 2
.mk
.na
\fB\et\fR
.ad
.RS 7n
.rt
Horizontal tab. Move the printing position to the next
implementation-defined horizontal tab position on the current line.
.RE

.sp
.ne 2
.mk
.na
\fB\ev\fR
.ad
.RS 7n
.rt
Vertical tab. Move the printing position to the start of the next
implementation-defined vertical tab position.
.RE

.sp
.LP
In addition, the C language supports character sequences of the form
.sp
.LP
\eoctal-number
.sp
.LP
and
.sp
.LP
\ehex-number
.sp
.LP
which translates into the character represented by the octal or hexadecimal
number. For example, if ASCII representations are being used, the letter 'a'
may be written as '\e141' and 'Z' as '\e132'. This syntax is most frequently
used to represent the null character as '\e0'. This is exactly equivalent to
the numeric constant zero (0). Note that the octal number does not include
the zero prefix as it would for a normal octal constant. To specify a
hexadecimal number, omit the zero so that the prefix is an 'x' (uppercase
\&'X' is not allowed in this context). Support for hexadecimal sequences is
an ANSI extension. See \fBstandards\fR(5).
.SH EXAMPLES
.LP
\fBExample 1\fR To print the language-independent date and time format, the
following statement could be used:
.sp
.in +2
.nf
\fBprintf (format, weekday, month, day, hour, min);\fR
.fi
.in -2

.sp
.LP
For American usage, \fIformat\fR could be a pointer to the string:

.sp
.in +2
.nf
\fB"%s, %s %d, %d:%.2d\en"\fR
.fi
.in -2

.sp
.LP
producing the message:

.sp
.in +2
.nf
\fBSunday, July 3, 10:02\fR
.fi
.in -2

.sp
.LP
whereas for German usage, \fIformat\fR could be a pointer to the string:

.sp
.in +2
.nf
"%1$s, %3$d. %2$s, %4$d:%5$.2d\en"
.fi
.in -2

.sp
.LP
producing the message:

.sp
.in +2
.nf
Sonntag, 3. Juli, 10:02
.fi
.in -2

.LP
\fBExample 2\fR To print a date and time in the form \fBSunday, July 3,
10:02\fR, where
.B weekday
and
.B month
are pointers to
null-terminated strings:
.sp
.in +2
.nf
printf("%s, %s %i, %d:%.2d", weekday, month, day, hour, min);
.fi
.in -2

.LP
\fBExample 3\fR To print pi to 5 decimal places:
.sp
.in +2
.nf
printf("pi = %.5f", 4 * atan(1.0));
.fi
.in -2

.SS "Default"
.LP
\fBExample 4\fR The following example applies only to applications that are
not standard-conforming. To print a list of names in columns which are 20
characters wide:
.sp
.in +2
.nf
\fBprintf("%20s%20s%20s", lastname, firstname, middlename);\fR
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
lw(2.75i) |lw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
CSIEnabled
_
Interface StabilityCommitted
_
MT-LevelSee below.
_
StandardSee below.
.TE

.sp
.LP
All of these functions can be used safely in multithreaded applications, as
long as
.BR setlocale "(3C) is not being called to change the locale. The"
\fBsprintf()\fR and \fBsnprintf()\fR functions are Async-Signal-Safe.
.sp
.LP
See
.BR standards (5)
for the standards conformance of \fBprintf()\fR,
\fBfprintf()\fR,
.BR sprintf() ,
and
.BR snprintf() .
The \fBasprintf()\fR
function is modeled on the one that appears in the FreeBSD, NetBSD, and GNU
C libraries.
.SH SEE ALSO
.sp
.LP
.BR exit (2),
.BR lseek (2),
.BR write (2),
.BR abort (3C),
.BR ecvt (3C),
.BR exit (3C),
\fBfclose\fR(3C), \fBfflush\fR(3C),
\fBfputwc\fR(3C), \fBfree\fR(3C), \fBmalloc\fR(3C), \fBputc\fR(3C),
\fBscanf\fR(3C), \fBsetlocale\fR(3C), \fBstdio\fR(3C), \fBvprintf\fR(3C),
.BR wcstombs (3C),
.BR wctomb (3C),
.BR attributes (5),
.BR environ (5),
.BR standards (5)
.SH NOTES
.sp
.LP
If the
.B j
length modifier is used, 32-bit applications that were
compiled using
.B c89
on releases prior to Solaris 10 will experience
undefined behavior.
.sp
.LP
The \fBsnprintf()\fR return value when
.I n
= 0 was changed in the
Solaris 10 release. The change was based on the SUSv3 specification. The
previous behavior was based on the initial SUSv2 specification, where
\fBsnprintf()\fR when \fIn\fR = 0 returns an unspecified value less than
1.
