'\" te
.\" Copyright 1989 AT&T.  Copyright (c) 2004 Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH getutxent 3C "27 Jul 2004" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
getutxent, getutxid, getutxline, pututxline, setutxent, endutxent,
utmpxname, getutmp, getutmpx, updwtmp, updwtmpx \- user accounting database
functions
.SH SYNOPSIS
.LP
.nf
#include <utmpx.h>

\fBstruct utmpx *\fBgetutxent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBstruct utmpx *\fBgetutxid\fR(\fBconst struct utmpx *\fIid\fR);
.fi

.LP
.nf
\fBstruct utmpx *\fBgetutxline\fR(\fBconst struct utmpx *\fIline\fR);
.fi

.LP
.nf
\fBstruct utmpx *\fBpututxline\fR(\fBconst struct utmpx *\fIutmpx\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsetutxent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBvoid\fR \fBendutxent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBint\fR \fButmpxname\fR(\fBconst char *\fIfile\fR);
.fi

.LP
.nf
\fBvoid\fR \fBgetutmp\fR(\fBstruct utmpx *\fIutmpx\fR, \fBstruct utmp *\fIutmp\fR);
.fi

.LP
.nf
\fBvoid\fR \fBgetutmpx\fR(\fBstruct utmp *\fIutmp\fR, \fBstruct utmpx *\fIutmpx\fR);
.fi

.LP
.nf
\fBvoid\fR \fBupdwtmp\fR(\fBchar *\fIwfile\fR, \fBstruct utmp *\fIutmp\fR);
.fi

.LP
.nf
\fBvoid\fR \fBupdwtmpx\fR(\fBchar *\fIwfilex\fR, \fBstruct utmpx *\fIutmpx\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions provide access to the user accounting database,
.B utmpx
(see
.BR utmpx (4)).
Entries in the database are described by the
definitions and data structures in
.BR <utmpx.h> \&.
.sp
.LP
The
.B utmpx
structure contains the following members:
.sp
.in +2
.nf
char                 ut_user[32];   /* user login name */
char                 ut_id[4];      /* /etc/inittab id */
                                    /* (usually line #) */
char                 ut_line[32];   /* device name */
                                    /* (console, lnxx) */
pid_t                ut_pid;        /* process id */
short                ut_type;       /* type of entry */
struct exit_status   ut_exit;       /* exit status of a process */
                                    /* marked as DEAD_PROCESS */
struct timeval       ut_tv;         /* time entry was made */
int                  ut_session;    /* session ID, used for */
                                    /* windowing */
short                ut_syslen;     /* significant length of */
                                    /* ut_host */
                                    /* including terminating null */
char                 ut_host[257];  /* host name, if remote */
.fi
.in -2

.sp
.LP
The
.B exit_status
structure includes the following members:
.sp
.in +2
.nf
short   e_termination;   /* termination status */
short   e_exit;          /* exit status */
.fi
.in -2

.SS "\fBgetutxent()\fR"
.sp
.LP
The
.B getutxent()
function reads in the next entry from a
.BR utmpx
database. If the database is not already open, it opens it. If it reaches
the end of the database, it fails.
.SS "\fBgetutxid()\fR"
.sp
.LP
The
.B getutxid()
function searches forward from the current point in
the
.B utmpx
database until it finds an entry with a
.BR ut_type
.RI "matching " id ->\c
.BR ut_type ,
if the type specified is
.BR RUN_LVL ,
.BR BOOT_TIME ,
.BR DOWN_TIME ,
.BR OLD_TIME ,
or
.BR NEW_TIME .
If the
type specified in
.I id
is
.BR INIT_PROCESS ,
.BR LOGIN_PROCESS ,
.BR USER_PROCESS ,
or
.BR DEAD_PROCESS ,
then
.B getutxid()
will return
a pointer to the first entry whose type is one of these four and whose
.B
ut_id \c
.RI "member matches " id ->\c
.BR ut_id .
If the end of database is
reached without a match, it fails.
.SS "\fBgetutxline()\fR"
.sp
.LP
The
.B getutxline()
function searches forward from the current point in
the
.B utmpx
database until it finds an entry of the type
.B LOGIN_PROCESS
or
.B USER_PROCESS
which also has a
.IR ut_line
string matching the \fIline\fR->\fBut_line\fR string.  If the end of the
database is reached without a match, it fails.
.SS "\fBpututxline()\fR"
.sp
.LP
The
.B pututxline()
function writes the supplied
.B utmpx
structure
into the
.B utmpx
database.  It uses
.B getutxid()
to search forward
for the proper place if it finds that it is not already at the proper place.
It is expected that normally the user of
.B pututxline()
will have
searched for the proper entry using one of the
.B getutx()
routines.  If
so,
.B pututxline()
will not search.  If
.B pututxline()
does not find
a matching slot for the new entry, it will add a new entry to the end of the
database. It returns a pointer to the
.B utmpx
structure. When called by
a non-root user,
.B pututxline()
invokes a
.B setuid()
root program to
verify and write the entry, since the
.B utmpx
database is normally
writable only by root.  In this event, the
.B ut_name
member must
correspond to the actual user name associated with the process; the
.B ut_type
member must be either
.B USER_PROCESS
or
.BR DEAD_PROCESS ;
and the
.B ut_line
member must be a device special
file and be writable by the user.
.SS "\fBsetutxent()\fR"
.sp
.LP
The
.B setutxent()
function resets the input stream to the beginning.
This should be done before each search for a new entry if it is desired that
the entire database be examined.
.SS "\fBendutxent()\fR"
.sp
.LP
The
.B endutxent()
function closes the currently open database.
.SS "\fButmpxname()\fR"
.sp
.LP
The
.B utmpxname()
function allows the user to change the name of the
database file examined from
.B /var/adm/utmpx
to any other file, most
often
.BR /var/adm/wtmpx .
If the file does not exist, this will not be
apparent until the first attempt to reference the file is made.  The
.B utmpxname()
function does not open the file, but closes the old file
if it is currently open and saves the new file name. The new file name must
end with the "x" character to allow the name of the corresponding \fButmp\fR
file to be easily obtainable.; otherwise, an error value of
.B 0
is
returned. The function returns
.B 1
on success.
.SS "\fBgetutmp()\fR"
.sp
.LP
The
.B getutmp()
function copies the information stored in the members
of the
.B utmpx
structure to the corresponding members of the
.BR utmp
structure. If the information in any member of
.B utmpx
does not fit in
the corresponding
.B utmp
member, the data is silently truncated. (See
.BR getutent (3C)
for
.B utmp
structure)
.SS "\fBgetutmpx()\fR"
.sp
.LP
The
.B getutmpx()
function copies the information stored in the members
of the
.B utmp
structure to the corresponding members of the
.BR utmpx
structure. (See
.BR getutent (3C)
for
.B utmp
structure)
.SS "\fBupdwtmp()\fR"
.sp
.LP
The
.B updwtmp()
function can be used in two ways.
.sp
.LP
If
.IR wfile " is"
.BR /var/adm/wtmp ,
the
.B utmp
format record
supplied by the caller is converted to a
.B utmpx
format record and the
.B /var/adm/wtmpx
file is updated (because the
.B /var/adm/wtmp
file
no longer exists, operations on
.B wtmp
are converted to operations on
.B wtmpx
by the library functions.
.sp
.LP
If
.I wfile
is a file other than
.BR /var/adm/wtmp ,
it is assumed to
be an old file in
.B utmp
format and is updated directly with the
.B utmp
format record supplied by the caller.
.SS "\fBupdwtmpx()\fR"
.sp
.LP
The
.B updwtmpx()
function writes the contents of the
.BR utmpx
structure pointed to by
.I utmpx
to the database.
.SS "\fButmpx\fR structure"
.sp
.LP
The values of the
.B e_termination
and
.B e_exit
members of the
.B ut_exit
structure are valid only for records of type
.BR DEAD_PROCESS .
For
.B utmpx
entries created by
.BR init (1M),
these values are set according to the result of the
.B wait()
call that
.B init
performs on the process when the process exits. See the
.BR wait (3C),
manual page for the values
.B init
uses. Applications
creating
.B utmpx
entries can set
.B ut_exit
values using the
following code example:
.sp
.in +2
.nf
u->ut_exit.e_termination = WTERMSIG(process->p_exit)
u->ut_exit.e_exit = WEXITSTATUS(process->p_exit)
.fi
.in -2

.sp
.LP
See
.BR wait.h (3HEAD)
for descriptions of the
.B WTERMSIG
and
.B WEXITSTATUS
macros.
.sp
.LP
The
.B ut_session
member is not acted upon by the operating system. It
is used by applications interested in creating
.B utmpx
entries.
.sp
.LP
For records of type
.BR USER_PROCESS ,
the
.B nonuser()
and
.B nonuserx()
macros use the value of the
.B ut_exit.e_exit
member to
mark
.B utmpx
entries as real logins (as opposed to multiple xterms
started by the same user on a window system).  This allows the system
utilities that display users to obtain an accurate indication of the number
of actual users, while still permitting each
.B pty
to have a
.BR utmpx
record (as most applications expect.). The
.B NONROOT_USER
macro defines
the value that
.B login
places in the
.B ut_exit.e_exit
member.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.BR getutxent() ,
.BR getutxid() ,
and
.B getutxline()
each return a pointer to a
.B utmpx
structure
containing a copy of the requested entry in the user accounting database.
Otherwise a null pointer is returned.
.sp
.LP
The return value may point to a static area which is overwritten by a
subsequent call to
.B "getutxid ()"
or
.BR getutxline() .
.sp
.LP
Upon successful completion,
.B pututxline()
returns a pointer to a
.B utmpx
structure containing a copy of the entry added to the user
accounting database.  Otherwise a null pointer is returned.
.sp
.LP
The
.B endutxent()
and
.B setutxent()
functions return no value.
.sp
.LP
A null pointer is returned upon failure to read, whether for permissions or
having reached the end of file, or upon failure to write.
.SH USAGE
.sp
.LP
These functions use buffered standard I/O for input, but
.B pututxline()
uses an unbuffered write to avoid race conditions between processes trying
to modify the
.B utmpx
and
.B wtmpx
files.
.sp
.LP
Applications should not access the
.B utmpx
and
.B wtmpx
databases
directly, but should use these functions to ensure that these databases are
maintained consistently.
.SH FILES
.sp
.ne 2
.mk
.na
.B /var/adm/utmpx
.ad
.RS 18n
.rt
user access and accounting information
.RE

.sp
.ne 2
.mk
.na
.B /var/adm/wtmpx
.ad
.RS 18n
.rt
history of user access and accounting information
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilitySee below.
_
MT-LevelUnsafe
.TE

.sp
.LP
The
.BR endutxent() ,
.BR getutxent() ,
.BR getutxid() ,
.BR getutxline() ,
.BR pututxline() ,
and
.B setutxent()
functions are
Standard.
.SH SEE ALSO
.sp
.LP
.BR getutent (3C),
.BR ttyslot (3C),
.BR wait (3C),
.BR wait.h (3HEAD),
.BR utmpx (4),
.BR attributes (5),
.BR standards (5)
.SH NOTES
.sp
.LP
The most current entry is saved in a static structure.  Multiple accesses
require that it be copied before further accesses are made. On each call to
either
.B getutxid()
or
.BR getutxline() ,
the routine examines the
static structure before performing more I/O. If the contents of the static
structure match what it is searching for, it looks no further. For this
reason, to use
.B getutxline()
to search for multiple occurrences it
would be necessary to zero out the static after each success, or
.B getutxline()
would just return the same structure over and over again.
There is one exception to the rule about emptying the structure before
further reads are done.  The implicit read done by
.B pututxline()
(if it
finds that it is not already at the correct place in the file) will not hurt
the contents of the static structure returned by the
.BR getutxent() ,
.BR getutxid() ,
or
.B getutxline()
routines, if the user has just
modified those contents and passed the pointer back to
.BR pututxline() .
