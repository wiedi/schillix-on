'\" te
.\" Copyright (c) 2002, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH _stack_grow 3C "18 Jul 2002" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
_stack_grow \- express an intention to extend the stack
.SH SYNOPSIS
.LP
.nf
#include <ucontext.h>

\fBvoid *\fB_stack_grow\fR(\fBvoid *\fIaddr\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B _stack_grow()
function indicates to the system that the stack is
about to be extended to the address specified by
.IR addr .
If extending
the stack to this address would violate the stack boundaries as retreived by
.BR stack_getbounds (3C),
a
.B SIGSEGV
is raised.
.sp
.LP
If the disposition of
.B SIGSEGV
is
.BR SIG_DFL ,
the process is
terminated and a core dump is generated.  If the application has installed
its own
.B SIGSEGV
handler to run on the alternate signal stack, the
signal information passed to the handler will be such that a call to
.BR stack_violation (3C)
with these parameters returns 1.
.sp
.LP
The
.I addr
argument is a biased stack pointer value. See the Solaris
64-bit Developer's Guide.
.sp
.LP
This function has no effect if the specified address,
.IR addr ,
is within
the bounds of the current stack.
.SH RETURN VALUES
.sp
.LP
If the
.B _stack_grow()
function  succeeds and does not detect a stack
violation, it returns
.IR addr .
.SH ERRORS
.sp
.LP
No errors are defined.
.SH USAGE
.sp
.LP
The
.B _stack_grow()
function does not actually adjust the stack pointer
register. The caller is responsible for manipulating the stack pointer
register once
.B _stack_grow()
returns.
.sp
.LP
The
.B _stack_grow()
function is typically invoked by code created by
the compilation environment prior to executing code that modifies the stack
pointer. It can also be used by hand-written assembly routines to allocate
stack-based storage safely.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelAsync-Signal-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR stack_getbounds (3C),
.BR stack_inbounds (3C),
.BR stack_violation (3C),
.BR attributes (5)
.sp
.LP
Solaris 64-bit Developer's Guide
