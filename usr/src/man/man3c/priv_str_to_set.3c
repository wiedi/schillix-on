'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH priv_str_to_set 3C "6 Jan 2004" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
priv_str_to_set, priv_set_to_str, priv_getbyname, priv_getbynum,
priv_getsetbyname, priv_getsetbynum, priv_gettext \- privilege name
functions
.SH SYNOPSIS
.LP
.nf
#include <priv.h>

\fBpriv_set_t *\fBpriv_str_to_set\fR(\fBconst char *\fIbuf\fR, \fBconst char *\fIsep\fR,
     \fBconst char **\fIendptr\fR);
.fi

.LP
.nf
\fBchar *\fBpriv_set_to_str\fR(\fBconst priv_set_t *\fIset\fR, \fBchar\fR \fIsep\fR, \fBint\fR \fIflag\fR);
.fi

.LP
.nf
\fBint\fR \fBpriv_getbyname\fR(\fBconst char *\fIprivname\fR);
.fi

.LP
.nf
\fBconst char *\fBpriv_getbynum\fR(\fBint\fR \fIprivnum\fR);
.fi

.LP
.nf
\fBint\fR \fBpriv_getsetbyname\fR(\fBconst char *\fIprivsetname\fR);
.fi

.LP
.nf
\fBconst char *\fBpriv_getsetbynum\fR(\fBint\fR \fIprivname\fR);
.fi

.LP
.nf
\fBchar *\fBpriv_gettext\fR(\fBconst char *\fIprivname\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B priv_str_to_set()
function maps the privilege specification in
.I buf
to a privilege set. It returns a privilege set on success or
.I NULL
on failure. If an error occurs when parsing the string, a pointer
to the remainder of the string is stored in the object pointed to by
.IR endptr ,
provided that
.I endptr
is not a null pointer. If an error
occurs when allocating memory,
.B errno
is set and the object pointed to
by
.I endptr
is set to the null pointer, provided that
.I endptr
is not
a null pointer.
.sp
.LP
The application is responsible for freeing the returned privilege set using
.BR priv_freeset (3C).
.sp
.LP
A privilege specification should contain one or more privilege names,
separated by characters in
.I sep
using the same algorithm as
.BR strtok (3C).
Privileges can optionally be preceded by a dash (-) or an
exclamation mark (!), in which case they are excluded from the resulting set.
The special strings "none" for the empty set, "all" for the set of all
privileges, "zone" for the set of all privileges available within the
caller's zone, and "basic" for the set of basic privileges are also
recognized. Set specifications are interpreted from left to right.
.sp
.LP
The
.B priv_set_to_str()
function converts the privilege set to a
sequence of privileges separated by
.IR sep ,
returning the a pointer to the
dynamically allocated result. The application is responsible for freeing the
memory using
.BR free (3C).
.sp
.LP
To maintain future compatibility, the "basic" set of privileges is included
as "basic,!missing_basic_priv1,.\|.\|.". When further currently unprivileged
operations migrate to the basic privilege set, the conversion back of the
result with
.B priv_str_to_set()
includes the additional basic privileges,
guaranteeing that the resulting privilege set carries the same privileges.
This behavior is the default and is equivalent to specifying a
.I flag
argument of
.BR PRIV_STR_PORT .
When specifying a
.I flag
argument of
.BR PRIV_STR_LIT ,
the result does not treat basic privileges differently
and the privileges present are all literally presented in the output. A flag
argument of
.B PRIV_STR_SHORT
attempts to arrive at the shortest output,
using the tokens "basic", "zone", "all", and negated privileges. This output
is most useful for trace output.
.sp
.LP
The
.B priv_getbyname()
and
.B priv_getsetbyname()
functions map
privilege names and privilege set names to numbers. The numbers returned are
valid for the current kernel instance only and could change at the next boot.
Only the privilege names should be committed to persistent storage. The
numbers should not be committed to persistent storage. Both functions return
-1 on error, setting
.B errno
to
.BR EINVAL .
.sp
.LP
The
.B priv_getbynum()
and
.B priv_getsetbynum()
functions map
privileges numbers to names. The strings returned point to shared storage
that should not be modified and is valid for the lifetime of the process.
Both functions return
.I NULL
on error, setting
.B errno
to
.BR EINVAL .
.sp
.LP
The
.B priv_gettext()
function returns a pointer to a string consisting
of one or more newline-separated lines of text describing the privilege. The
text is localized using
.RB { LC_MESSAGES }.
The application is responsibe
for freeing the memory returned.
.sp
.LP
These functions pick up privileges allocated during the lifetime of the
process using
.BR priv_getbyname (9F)
by refreshing the internal data
structures when necessary.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B priv_str_to_set()
and
.B priv_set_to_str()
return a non-null pointer to allocated memory that
should be freed by the application using the appropriate functions when it is
no longer referenced.
.sp
.LP
The
.B priv_getbynum()
and
.B priv_getsetbynum()
functions return
non-null pointers to constant memory that should not be modified or freed by
the application. Otherwise,
.I NULL
is returned and
.B errno
is set to
indicate the error.
.sp
.LP
Upon successful completion,
.B priv_getbyname()
and
.B priv_getsetbyname()
return a non-negative integer. Otherwise, -1 is
returned and
.B errno
is set to indicate the error.
.sp
.LP
Upon successful completion,
.B priv_gettext()
returns a non-null value.
It returns
.I NULL
if an error occurs or no descriptive text for the
specified privilege can be found.
.SH ERRORS
.sp
.LP
The
.B priv_str_to_set()
and
.B priv_set_to_str()
functions will fail
if:
.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
The physical limits of the system are exceeded by the memory allocation
needed to hold a privilege set.
.RE

.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
There is not enough memory available to allocate sufficient memory to hold a
privilege set, but the application could try again later.
.RE

.sp
.LP
All of these functions will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
One or more of the arguments is invalid.
.RE

.SH EXAMPLES
.LP
.B Example 1
List all the sets and privileges defined in the system.
.sp
.LP
The following example lists all the sets and privileges defined in the
system.

.sp
.in +2
.nf
#include <priv.h>
#include <stdio.h>

/* list all the sets and privileges defined in the system */

const char *name;
int i;

printf("Each process has the following privilege sets:\en");
for (i = 0; (name = priv_getsetbynum(i++)) != NULL; )
        printf("\et%s\en", name);

printf("Each set can contain the following privileges:\en");
for (i = 0; (name = priv_getbynum(i++)) != NULL; )
        printf("\et%s\en", name);
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR free (3C),
.BR priv_set (3C),
.BR attributes (5),
.BR privileges (5),
.BR priv_getbyname (9F)
