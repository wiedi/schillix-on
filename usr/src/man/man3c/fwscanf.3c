'\" te
.\" Copyright (c) 1992, X/Open Company Limited. All Rights Reserved.
.\" Portions Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH fwscanf 3C "10 Jul 2008" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
fwscanf, wscanf, swscanf, vfwscanf, vwscanf, vswscanf \- convert formatted
wide-character input
.SH SYNOPSIS
.LP
.nf
#include <stdio.h>
#include <wchar.h>

\fBint\fR \fBfwscanf\fR(\fBFILE *restrict\fR \fIstream\fR, \fBconst wchar_t *restrict\fR \fIformat\fR, \fI\&.\|.\|.\fR);
.fi

.LP
.nf
\fBint\fR \fBwscanf\fR(\fBconst wchar_t *restrict\fR \fIformat\fR, \fI\&.\|.\|.\fR);
.fi

.LP
.nf
\fBint\fR \fBswscanf\fR(\fBconst wchar_t *restrict\fR \fIs\fR, \fBconst wchar_t *restrict\fR \fIformat\fR,
     \fI\&.\|.\|.\fR);
.fi

.LP
.nf
#include <stdarg.h>
#include <stdio.h>
#include <wchar.h>

\fBint\fR \fBvfwscanf\fR(\fBFILE *restrict\fR \fIstream\fR, \fBconst wchar_t *restrict\fR \fIformat\fR,
     \fBva_list\fR \fIarg\fR);
.fi

.LP
.nf
\fBint\fR \fBvswcanf\fR(\fBconst wchar_t *restrict\fR \fIws\fR, \fBconst wchar_t *restrict\fR \fIformat\fR,
     \fBva_list\fR \fIarg\fR);
.fi

.LP
.nf
\fBint\fR \fBvwscanf\fR(\fBconst wchar_t *restrict\fR \fIformat\fR, \fBva_list\fR \fIarg\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBfwscanf()\fR function reads from the named input
.IR stream .
.sp
.LP
The \fBwscanf()\fR function reads from the standard input stream
.BR stdin .
.sp
.LP
The \fBswscanf()\fR function reads from the wide-character string
.IR s .
.sp
.LP
The
.BR vfwscanf() ,
\fBvswscanf()\fR, and \fBvwscanf()\fR functions are
equivalent to the
.BR fwscanf() ,
\fBswscanf()\fR, and \fBwscanf()\fR
functions, respectively, except that instead of being called with a variable
number of arguments, they are called with an argument list as defined by the
<\fBstdarg.h\fR> header . These functions do not invoke the \fBva_end()\fR
macro. Applications using these functions should call \fBva_end\fR(\fIap\fR)
afterwards to clean up.
.sp
.LP
Each function reads wide-characters, interprets them according to a format, and
stores the results in its arguments. Each expects, as arguments, a control
wide-character string \fIformat\fR described below, and a set of \fIpointer\fR
arguments indicating where the converted input should be stored. The result is
undefined if there are insufficient arguments for the format. If the format is
exhausted while arguments remain, the excess arguments are evaluated but are
otherwise ignored.
.sp
.LP
Conversions can be applied to the \fIn\fRth argument after the \fIformat\fR in
the argument list, rather than to the next unused argument. In this case, the
conversion wide-character
.B %
(see below) is replaced by the sequence
\fB%\fIn\fB$\fR, where \fIn\fR is a decimal integer in the range [1,
\fBNL_ARGMAX\fR]. This feature provides for the definition of format
wide-character strings that select arguments in an order appropriate to specific
languages. In format wide-character strings containing the \fB%\fIn\fB$\fR
form of conversion specifications, it is unspecified whether numbered arguments
in the argument list can be referenced from the format  wide-character string
more than once.
.sp
.LP
The \fIformat\fR can contain either form of a conversion specification, that
is, \fB%\fR or \fB%\fIn\fB$\fR, but the two forms cannot normally be mixed
within a single \fIformat\fR wide-character string. The only exception to this
is that \fB%%\fR or \fB%*\fR can be mixed with the \fB%\fIn\fB$\fR form.
.sp
.LP
The \fBfwscanf()\fR function in all its forms allows for detection of a
language-dependent radix character in the input string, encoded as a
wide-character value.  The  radix character is defined in the program's locale
(category
.BR LC_NUMERIC ).
In the POSIX locale, or in a locale where the radix
character is not defined, the radix character defaults to a period (.).
.sp
.LP
The format is a wide-character string composed of zero or more directives. Each
directive is composed of one of the following: one or more white-space
wide-characters (space, tab, newline,  vertical-tab or form-feed characters); an
ordinary wide-character (neither
.B %
nor a white-space character); or a
conversion specification. Each conversion specification is introduced by a
\fB%\fR or the sequence \fB%\fIn\fB$\fR after which the following appear
in sequence:
.RS +4
.TP
.ie t \(bu
.el o
An optional assignment-suppressing character
.BR * .
.RE
.RS +4
.TP
.ie t \(bu
.el o
An optional non-zero decimal integer that specifies the maximum field width.
.RE
.RS +4
.TP
.ie t \(bu
.el o
An option length modifier that specifies the size of the receiving object.
.RE
.RS +4
.TP
.ie t \(bu
.el o
A conversion specifier wide-character that specifies the type of conversion to
be applied. The valid conversion wide-characters are described below.
.RE
.sp
.LP
The \fBfwscanf()\fR functions execute each directive of the format in turn.  If
a directive fails, as detailed below, the function returns.  Failures are
described as input failures (due to the unavailability of input bytes) or
matching failures (due to inappropriate input).
.sp
.LP
A directive composed of one or more white-space wide-characters is executed by
reading input until no more valid input can be read, or up to the first
wide-character which is not a white-space  wide-character, which remains
unread.
.sp
.LP
A directive that is an ordinary wide-character is executed as follows. The next
wide-character is read from the input and compared with the wide-character that
comprises the directive; if the comparison shows that they are not equivalent,
the directive fails, and the differing and subsequent wide-characters remain
unread.
.sp
.LP
A directive that is a conversion specification defines a set of matching input
sequences, as described below for each conversion wide-character. A conversion
specification is executed in the following steps:
.sp
.LP
Input white-space wide-characters (as specified by
.BR iswspace (3C))
are
skipped, unless the conversion specification includes a
.BR [ ,
.BR c ,
or
\fBn\fR conversion character.
.sp
.LP
An item is read from the input unless the conversion specification includes an
\fBn\fR conversion wide-character. The length of the item read is limited to any
specified maximum field width. In Solaris default mode, the input item is
defined as the longest sequence of input wide-characters that forms a matching
sequence. In some cases, \fBfwscanf()\fR might need to read several extra
wide-characters beyond the end of the input item to find the end of a matching
sequence. In C99/SUSv3 mode, the input item is defined as the longest sequence
of input wide-characters that is, or is a prefix of, a matching sequence. With
this definition, \fBfwscanf()\fR need only read at most one wide-character
beyond the end of the input item. Therefore, in C99/SUSv3 mode, some sequences
that are acceptable to \fBwcstod\fR(3C), \fBwcstol\fR(3C), and similar functions
are unacceptable to
.BR fwscanf() .
In either mode, \fBfwscanf()\fR attempts to
push back any excess bytes read using
.BR ungetc "(3C). Assuming all such"
attempts succeed, the first wide-character, if any, after the input item remains
unread. If the length of the input item is 0, the conversion fails. This
condition is a matching failure unless end-of-file, an encoding error, or a read
error prevented input from the stream, in which case it is an input failure.
.sp
.LP
Except in the case of a
.B %
conversion wide-character, the input item (or,
in the case of a \fB%\fIn\fR conversion specification, the count of input
wide-characters) is converted to a type appropriate to the conversion
wide-character. If the input item is not a matching sequence, the execution of
the conversion specification fails; this condition is a matching failure. Unless
assignment suppression was indicated by a
.BR * ,
the result of the conversion
is placed in the object pointed to by the first argument following the
\fIformat\fR argument that has not already received a conversion result if the
conversion specification is introduced by
.BR % ,
or in the
.IR n "th argument"
if introduced by the wide-character sequence \fB%\fIn\fB$\fR. If this
object does not have an appropriate type, or if the result of the conversion
cannot be represented in the space provided, the behavior is undefined.
.sp
.LP
The length modifiers and their meanings are:
.sp
.ne 2
.mk
.na
.B hh
.ad
.RS 16n
.rt
Specifies that a following
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
.BR X ,
or
.B n
conversion specifier applies to an argument with type
pointer to
.B "signed char"
or
.BR "unsigned char" .
.RE

.sp
.ne 2
.mk
.na
.B h
.ad
.RS 16n
.rt
Specifies that a following
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
.BR X ,
or
.B n
conversion specifier applies to an argument with type
pointer to
.B short
or
.BR "unsigned short" .
.RE

.sp
.ne 2
.mk
.na
.BR l " (ell)"
.ad
.RS 16n
.rt
Specifies that a following
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
.BR X ,
or
.B n
conversion specifier applies to an argument with type
pointer to
.B long
or
.BR "unsigned long" ;
that a following
.BR a ,
.BR A ,
.BR e ,
.BR E ,
.BR f ,
.BR F ,
.BR g ,
or
.B G
conversion specifier
applies to an argument with type pointer to
.BR double ;
or that a following
.BR c ,
.BR s ,
or
.B [
conversion specifier applies to an argument with
type pointer to
.BR wchar_t .
.RE

.sp
.ne 2
.mk
.na
.BR ll " (ell-ell)"
.ad
.RS 16n
.rt
Specifies that a following
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
.BR X ,
or
.B n
conversion specifier applies to an argument with type
pointer to
.B "long long"
or
.BR "unsigned long long" .
.RE

.sp
.ne 2
.mk
.na
.B j
.ad
.RS 16n
.rt
Specifies that a following
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
.BR X ,
or
.B n
conversion specifier applies to an argument with type
pointer to
.B intmax_t
or
.BR uintmax_t .
.RE

.sp
.ne 2
.mk
.na
.B z
.ad
.RS 16n
.rt
Specifies that a following
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
.BR X ,
or
.B n
conversion specifier applies to an argument with type
pointer to
.B size_t
or the corresponding signed integer type.
.RE

.sp
.ne 2
.mk
.na
.B t
.ad
.RS 16n
.rt
Specifies that a following
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
.BR X ,
or
.B n
conversion specifier applies to an argument with type
pointer to \fBptrdiff_t\fR or the corresponding
.B unsigned
type.
.RE

.sp
.ne 2
.mk
.na
.B L
.ad
.RS 16n
.rt
Specifies that a following
.BR a ,
.BR A ,
.BR e ,
.BR E ,
.BR f ,
.BR F ,
.BR g ,
or
.B G
conversion specifier applies to an argument with
type pointer to
.BR "long double" .
.RE

.sp
.LP
If a length modifier appears with any conversion specifier other than as
specified above, the behavior is undefined.
.sp
.LP
The following conversion wide-characters are valid:
.sp
.ne 2
.mk
.na
.B d
.ad
.RS 11n
.rt
Matches an optionally signed decimal integer, whose format is the same as
expected for the subject sequence of \fBwcstol\fR(3C) with the value 10 for the
\fIbase\fR argument. In the absence of a size modifier, the corresponding
argument must be a pointer to
.BR int .
.RE

.sp
.ne 2
.mk
.na
.B i
.ad
.RS 11n
.rt
Matches an optionally signed integer, whose format is the same as expected for
the subject sequence of \fBwcstol\fR(3C) with 0 for the
.I base
argument. In
the absence of a size modifier, the corresponding argument must be a pointer to
.BR int .
.RE

.sp
.ne 2
.mk
.na
.B o
.ad
.RS 11n
.rt
Matches an optionally signed octal integer, whose format is the same as
expected for the subject sequence of \fBwcstoul\fR(3C) with the value 8 for the
\fIbase\fR argument. In the absence of a size modifier, the corresponding
argument must be a pointer to
.BR "unsigned int" .
.RE

.sp
.ne 2
.mk
.na
.B u
.ad
.RS 11n
.rt
Matches an optionally signed decimal integer, whose format is the same as
expected for the subject sequence of \fBwcstoul\fR(3C) with the value 10 for the
\fIbase\fR argument. In the absence of a size modifier, the corresponding
argument must be a pointer to
.BR "unsigned int" .
.RE

.sp
.ne 2
.mk
.na
.B x
.ad
.RS 11n
.rt
Matches an optionally signed hexadecimal integer, whose format is the same as
expected for the subject sequence of \fBwcstoul\fR(3C) with the value 16 for the
\fIbase\fR argument. In the absence of a size modifier, the corresponding
argument must be a pointer to
.BR "unsigned int" .
.RE

.sp
.ne 2
.mk
.na
\fBa\fR,\fBe\fR,\fBf\fR,\fBg\fR
.ad
.RS 11n
.rt
Matches an optionally signed floating-point number, whose format is the same as
expected for the subject sequence of \fBwcstod\fR(3C). In the absence of a size
modifier, the corresponding argument must be a pointer to
.BR float .
The
.BR e ,
\fBf\fR, and \fBg\fR specifiers match hexadecimal floating point values
only in C99/SUSv3 (see
.BR standards (5))
mode, but the
.B a
specifier
always matches hexadecimal floating point values.
.sp
These conversion specifiers match any subject sequence accepted by
.BR strtod (3C),
including the INF, INFINITY, NAN, and
NAN(\fIn-char-sequence\fR) forms.  The result of the conversion is the same as
that of calling
.B strtod()
(or \fBstrtof()\fR or
.BR strtold() )
with the
matching sequence, including the raising of floating point exceptions and the
setting of
.B errno
to
.BR ERANGE ,
if applicable.
.RE

.sp
.ne 2
.mk
.na
.B s
.ad
.RS 11n
.rt
Matches a sequence of non white-space wide-characters.  If no
.B l
(ell)
qualifier is present, characters from the input field are converted as if by
repeated calls to the \fBwcrtomb\fR(3C) function, with the conversion state
described by an
.B mbstate_t
object initialized to zero before the first
wide-character is converted.  The corresponding argument must be a pointer to a
character array large enough to accept the sequence and the terminating null
character, which will be added automatically.
.sp
Otherwise, the corresponding argument must be a pointer to an array of
\fBwchar_t\fR large enough to accept the sequence and the terminating null
wide-character, which will be added automatically.
.RE

.sp
.ne 2
.mk
.na
\fB[\fR
.ad
.RS 11n
.rt
Matches a non-empty sequence of wide-characters from a set of expected
wide-characters (the
.IR scanset ).
If no
.B l
(ell) qualifier is present,
wide-characters from the input field are converted as if by repeated calls to
the
.B wcrtomb()
function, with the conversion state described by an
\fBmbstate_t\fR object initialized to zero before the first wide-character is
converted. The corresponding argument must be a pointer to a character array
large enough to accept the sequence and the terminating null character, which
will be added automatically.
.sp
If an
.B l
(ell) qualifier is present, the corresponding argument must be a
pointer to an array of
.B wchar_t
large enough to accept the sequence and the
terminating null  wide-character, which will be added automatically.
.sp
The conversion specification includes all subsequent widw characters in the
\fIformat\fR string up to and including the matching right square bracket
(\fB]\fR). The wide-characters between the square brackets (the
.IR scanlist )
comprise the scanset, unless the wide-character after the left square bracket is
a circumflex
.RB ( ^ ),
in which case the scanset contains all wide-characters
that do not appear in the scanlist between the circumflex and the right square
bracket. If the conversion specification begins with \fB[\|]\fR or \fB[^],\fR
the right square bracket is included in the scanlist and the next right square
bracket is the matching right square bracket that ends the conversion
specification; otherwise the first right square bracket is the one that ends the
conversion specification. If a minus-sign (\fB\(mi\fR) is in the scanlist and is
not the first wide-character, nor the second where the first wide-character is a
.BR ^ ,
nor the last wide-character, it indicates a range of characters to be
matched.
.RE

.sp
.ne 2
.mk
.na
.B c
.ad
.RS 11n
.rt
Matches a sequence of wide-characters of the number specified by the field
width (1 if no field width is present in the conversion specification). If no
\fBl\fR (ell) qualifier is present, wide-characters from the input field are
converted as if by repeated calls to the
.B wcrtomb()
function, with the
conversion state described by an
.B mbstate_t
object initialized to zero
before the first wide-character is converted.  The corresponding argument must
be a pointer to a character array large enough to accept the sequence.  No null
character is added.
.sp
Otherwise, the corresponding argument must be a pointer to an array of
\fBwchar_t\fR large enough to accept the sequence.  No null wide-character is
added.
.RE

.sp
.ne 2
.mk
.na
.B p
.ad
.RS 11n
.rt
Matches the set of sequences that is the same as the set of sequences that is
produced by the
.B %p
conversion of the corresponding \fBfwprintf\fR(3C)
functions. The corresponding argument must be a pointer to a pointer to
.BR void .
If the input item is a value converted earlier during the same
program execution, the pointer that results will compare equal to that value;
otherwise the behavior of the
.B %p
conversion is undefined.
.RE

.sp
.ne 2
.mk
.na
.B n
.ad
.RS 11n
.rt
No input is consumed. The corresponding argument must be a pointer to the
integer into which is to be written the number of wide-characters read from the
input so far by this call to the \fBfwscanf()\fR functions. Execution of a
\fB%n\fR conversion specification does not increment the assignment count
returned at the completion of execution of the function.
.RE

.sp
.ne 2
.mk
.na
.B C
.ad
.RS 11n
.rt
Same as
.BR lc .
.RE

.sp
.ne 2
.mk
.na
.B S
.ad
.RS 11n
.rt
Same as
.BR ls .
.RE

.sp
.ne 2
.mk
.na
.B %
.ad
.RS 11n
.rt
Matches a single
.BR % ;
no conversion or assignment occurs. The complete
conversion specification must be
.BR %% .
.RE

.sp
.LP
If a conversion specification is invalid, the behavior is undefined.
.sp
.LP
The conversion characters
.BR A ,
.BR E ,
.BR F ,
.BR G ,
and
.B X
are
also valid and behave the same as, respectively,
.BR a ,
.BR e ,
.BR f ,
.BR g ,
and
.BR x .
.sp
.LP
If end-of-file is encountered during input, conversion is terminated. If
end-of-file occurs before any wide-characters matching the current conversion
specification (except for
.BR %n )
have been read (other than leading
white-space, where permitted), execution of the current conversion specification
terminates with an input failure.  Otherwise, unless execution of the current
conversion specification is terminated with a matching failure, execution of the
following conversion specification (if any) is terminated with an input
failure.
.sp
.LP
Reaching the end of the string in \fBswscanf()\fR is equivalent to encountering
end-of-file for
.BR fwscanf() .
.sp
.LP
If conversion terminates on a conflicting input, the offending input is left
unread in the input. Any trailing white space (including newline) is left unread
unless matched by a conversion specification. The success of literal matches and
suppressed assignments is only directly determinable via the %n conversion
specification.
.sp
.LP
The \fBfwscanf()\fR and \fBwscanf()\fR functions may mark the \fBst_atime\fR
field of the file associated with
.I stream
for update. The \fBst_atime\fR
field will be marked for update by the first successful execution of
\fBfgetc\fR(3C), \fBfgetwc\fR(3C), \fBfgets\fR(3C), \fBfgetws\fR(3C),
.BR fread (3C),
.BR getc (3C),
.BR getwc (3C),
.BR getchar (3C),
.BR getwchar (3C),
.BR gets (3C),
\fBfscanf\fR(3C) or \fBfwscanf()\fR using
\fIstream\fR that returns data not supplied by a prior call to
.BR ungetc (3C).
.SH RETURN VALUES
.sp
.LP
Upon successful completion, these functions return the number of successfully
matched and assigned input items; this number can be 0 in the event of an early
matching failure.  If the input ends before the first matching failure or
conversion,
.B EOF
is returned.  If a read error occurs the error indicator
for the stream is set,
.B EOF
is returned, and
.B errno
is set to indicate
the error.
.SH ERRORS
.sp
.LP
For the conditions under which the \fBfwscanf()\fR functions will fail and may
fail, refer to \fBfgetwc\fR(3C).
.sp
.LP
In addition, \fBfwscanf()\fR may fail if:
.sp
.ne 2
.mk
.na
.B EILSEQ
.ad
.RS 10n
.rt
Input byte sequence does not form a valid character.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
There are insufficient arguments.
.RE

.SH USAGE
.sp
.LP
In format strings containing the
.B %
form of conversion specifications,
each argument in the argument list is used exactly once.
.SH EXAMPLES
.LP
\fBExample 1 wscanf()\fR example
.sp
.LP
The call:

.sp
.in +2
.nf
int i, n; float x; char name[50];
n = wscanf(L"%d%f%s", &i, &x, name);
.fi
.in -2

.sp
.LP
with the input line:

.sp
.in +2
.nf
25 54.32E\(mi1 Hamster
.fi
.in -2

.sp
.LP
will assign to
.I n
the value 3, to
.I i
the value 25, to
.I x
the
value 5.432, and
.I name
will contain the string Hamster.

.sp
.LP
The call:

.sp
.in +2
.nf
int i; float x; char name[50];
(void) wscanf(L"%2d%f%*d %[0123456789], &i, &x, name);
.fi
.in -2

.sp
.LP
with input:

.sp
.in +2
.nf
56789 0123 56a72
.fi
.in -2

.sp
.LP
will assign 56 to
.IR i ,
789.0 to
.IR x ,
skip 0123, and place the string
56\e0 in
.IR name .
The next call to
.BR getchar "(3C) will return the"
character
.BR a .

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
\fBfgetc\fR(3C), \fBfgets\fR(3C), \fBfgetwc\fR(3C), \fBfgetws\fR(3C),
\fBfread\fR(3C), \fBfscanf\fR(3C), \fBfwprintf\fR(3C),
.BR getc (3C),
.BR getchar (3C),
.BR gets (3C),
.BR getwc (3C),
.BR getwchar (3C),
.BR setlocale (3C),
.BR strtod (3C),
.BR wcrtomb (3C),
.BR wcstod (3C),
.BR wcstol (3C),
.BR wcstoul (3C),
.BR attributes (5),
.BR standards (5)
.SH NOTES
.sp
.LP
The behavior of the conversion specifier "%%" has changed for all of the
functions described on this manual page. Previously the "%%" specifier accepted
a "%" character from input only if there were no preceding whitespace
characters. The new behavior accepts "%" even if there are preceding whitespace
characters. This new behavior now aligns with the description on this manual
page and in various standards. If the old behavior is desired, the conversion
specification "%*[%]" can be used.
