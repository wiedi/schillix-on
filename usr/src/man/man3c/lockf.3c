'\" te
.\" Copyright 1989 AT&T
.\" Copyright (c) 2002, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Portions Copyright (c) 1992, X/Open Company Limited  All Rights Reserved
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH lockf 3C "10 Apr 2002" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
lockf \- record locking on files
.SH SYNOPSIS
.LP
.nf
#include <unistd.h>

\fBint\fR \fBlockf\fR(\fBint\fR \fIfildes\fR, \fBint\fR \fIfunction\fR, \fBoff_t\fR \fIsize\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B lockf()
function allows sections of a file to be locked; advisory
or mandatory write locks depending  on the mode bits of the file (see
.BR chmod (2)).
Calls to
.B lockf()
from other threads that attempt to
lock the locked file section will either return an error value or be put to
sleep until the resource becomes unlocked. All the locks for a process are
removed when the process terminates. See
.BR fcntl (2)
for more information
about record locking.
.sp
.LP
The
.I fildes
argument is an open file descriptor. The file descriptor
must have
.B O_WRONLY
or
.B O_RDWR
permission in order to establish
locks with this function call.
.sp
.LP
The
.B function
argument is a control value that specifies the action to
be taken. The permissible values for
.B function
are defined in
.RB < unistd.h >
as follows:
.sp
.in +2
.nf
#define   F_ULOCK   0   /* unlock previously locked section */
#define   F_LOCK    1   /* lock section for exclusive use */
#define   F_TLOCK   2   /* test & lock section for exclusive use */
#define   F_TEST    3   /* test section for other locks */
.fi
.in -2

.sp
.LP
All other values of
.B function
are reserved for future extensions and
will result in an error if not implemented.
.sp
.LP
.B F_TEST
is used to detect if a lock by another process is present on
the specified section.
.B F_LOCK
and
.B F_TLOCK
both lock a section of
a file if the section is available.
.B F_ULOCK
removes locks from a
section of the file.
.sp
.LP
The
.B size
argument is the number of contiguous bytes to be locked or
unlocked. The resource to be locked or unlocked starts at the current offset
in the file and extends forward for a positive size and backward for a
negative size (the preceding bytes up to but not including the current
offset). If
.B size
is zero, the section from the current offset through
the largest file offset is locked (that is, from the current offset through
the present or any future end-of-file). An area need not be allocated to the
file in order to be locked as such locks may exist past the end-of-file.
.sp
.LP
The sections locked with
.B F_LOCK
or
.B F_TLOCK
may, in whole or in
part, contain or be contained by a previously locked section for the same
process. Locked sections will be unlocked starting at the point of the
offset through
.B size
bytes or to the end of file if
.B size
is
.RB ( off_t )
0. When this situation occurs, or if this situation occurs in
adjacent sections, the sections are combined into a single section. If the
request requires that a new element be added to the table of active locks
and this table is already full, an error is returned, and the new section is
not locked.
.sp
.LP
.B F_LOCK
and
.B F_TLOCK
requests differ only by the action taken if
the resource is not available.
.B F_LOCK
blocks the calling thread until
the resource is available.
.B F_TLOCK
causes the function to return \(mi1
and set
.B errno
to
.B EAGAIN
if the section is already locked by
another process.
.sp
.LP
File locks are released on first close by the locking process of any file
descriptor for the file.
.sp
.LP
.B F_ULOCK
requests may, in whole or in part, release one or more locked
sections controlled by the process. When sections are not fully released,
the remaining sections are still locked by the process. Releasing the center
section of a locked section requires an additional element in the table of
active locks. If this table is full, an
.B errno
is set to
.BR EDEADLK
and the requested section is not released.
.sp
.LP
An
.B F_ULOCK
request in which
.B size
is non-zero and the offset of
the last byte of the requested section is the maximum value for an object of
type
.BR off_t ,
when the process has an existing lock in which
.BR size
is 0 and which includes the last byte of the requested section, will be
treated as a request to unlock from the start of the requested section with
a size equal to 0. Otherwise, an
.B F_ULOCK
request will attempt to
unlock only the requested section.
.sp
.LP
A potential for deadlock occurs if the threads of a process controlling a
locked resource is put to sleep by requesting another process's locked
resource. Thus calls to
.B lockf()
or
.BR fcntl (2)
scan for a deadlock
prior to sleeping on a locked resource. An error return is made if sleeping
on the locked resource would cause a deadlock.
.sp
.LP
Sleeping on a resource is interrupted with any signal. The
.BR alarm (2)
function may be used to provide a timeout facility in applications that
require this facility.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B 0
is returned.  Otherwise,
.B \(mi1
is
returned and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B lockf()
function will fail if:
.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 20n
.rt
The
.I fildes
argument is not a valid open file descriptor; or
.B function
is
.B F_LOCK
or
.B F_TLOCK
and
.I fildes
is not a
valid file descriptor open for writing.
.RE

.sp
.ne 2
.mk
.na
.B EACCES
or
.BR EAGAIN
.ad
.RS 20n
.rt
The
.B function
argument is
.B F_TLOCK
or
.B F_TEST
and the
section is already locked by another process.
.RE

.sp
.ne 2
.mk
.na
.B EDEADLK
.ad
.RS 20n
.rt
The
.B function
argument is
.B F_LOCK
and a deadlock is detected.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 20n
.rt
A signal was caught during execution of the function.
.RE

.sp
.ne 2
.mk
.na
.B ECOMM
.ad
.RS 20n
.rt
The
.I fildes
argument is on a remote machine and the link to that
machine is no longer active.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 20n
.rt
The
.B function
argument is not one of
.BR F_LOCK ,
.BR F_TLOCK ,
.BR F_TEST ,
or
.BR F_ULOCK ;
or
.B size
plus the current file offset
is less than 0.
.RE

.sp
.ne 2
.mk
.na
.B EOVERFLOW
.ad
.RS 20n
.rt
The offset of the first, or if
.B size
is not 0 then the last, byte in
the requested section cannot be represented correctly in an object of type
.BR off_t .
.RE

.sp
.LP
The
.B lockf()
function may fail if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 24n
.rt
The \fBfunction\fR argument is \fBF_LOCK\fR or
.B F_TLOCK
and the file
is mapped with
.BR mmap (2).
.RE

.sp
.ne 2
.mk
.na
.B EDEADLK
or
.BR ENOLCK
.ad
.RS 24n
.rt
The
.B function
argument is
.BR F_LOCK ,
.BR F_TLOCK ,
or
.B F_ULOCK
and the request would cause the number of locks to exceed a
system-imposed limit.
.RE

.sp
.ne 2
.mk
.na
.B EOPNOTSUPP
or
.BR EINVAL
.ad
.RS 24n
.rt
The locking of files of the type indicated by the
.I fildes
argument is
not supported.
.RE

.SH USAGE
.sp
.LP
Record-locking should not be used in combination with the
.BR fopen (3C),
.BR fread (3C),
.BR fwrite (3C)
and other
.B stdio
functions.  Instead,
the more primitive, non-buffered functions (such as
.BR open (2))
should be
used. Unexpected results may occur in processes that do buffering in the
user address space.  The process may later read/write data which is/was
locked. The
.B stdio
functions are the most common source of unexpected
buffering.
.sp
.LP
The
.BR alarm (2)
function may be used to provide a timeout facility in
applications requiring it.
.sp
.LP
The
.B lockf()
function has a transitional interface for 64-bit file
offsets. See
.BR lf64 (5).
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR Intro (2),
.BR alarm (2),
.BR chmod (2),
.BR close (2),
.BR creat (2),
.BR fcntl (2),
.BR mmap (2),
.BR open (2),
.BR read (2),
.BR write (2),
.BR attributes (5),
.BR lf64 (5),
.BR standards (5)
