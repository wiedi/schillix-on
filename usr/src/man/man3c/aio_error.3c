'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH aio_error 3C "5 Feb 2008" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
aio_error \- retrieve errors status for an asynchronous I/O operation
.SH SYNOPSIS
.LP
.nf
#include <aio.h>

\fBint\fR \fBaio_error\fR(\fBconst struct aiocb *\fIaiocbp\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B aio_error()
function returns the error status associated with the
.B aiocb
structure referenced by the
.I aiocbp
argument. The error
status for an asynchronous I/O operation is the
.B errno
value that would
be set by the corresponding
.BR read (2),
.BR write (2),
or
.BR fsync (3C)
operation. If the operation has not yet completed, then the
error status will be equal to
.BR EINPROGRESS .
.SH RETURN VALUES
.sp
.LP
If the asynchronous I/O operation has completed successfully, then \fB0\fR
is returned. If the asynchronous operation has completed unsuccessfully,
then the error status, as described for
.BR read (2),
.BR write (2),
and
.BR fsync (3C),
is returned. If the asynchronous I/O operation has not yet
completed, then
.B EINPROGRESS
is returned.
.SH ERRORS
.sp
.LP
The
.B aio_error()
function may fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I aiocbp
argument does not refer to an asynchronous operation whose
return status has not yet been retrieved.
.RE

.SH USAGE
.sp
.LP
The
.B aio_error()
function has a transitional interface for 64-bit file
offsets. See
.BR lf64 (5).
.SH EXAMPLES
.LP
.B Example 1
The following is an example of an error handling routine
using the
.B aio_error()
function.
.sp
.in +2
.nf
#include <aio.h>
#include <errno.h>
#include <signal.h>
struct aiocb      my_aiocb;
struct sigaction  my_sigaction;
void              my_aio_handler(int, siginfo_t *, void *);
\|.\|.\|.
my_sigaction.sa_flags = SA_SIGINFO;
my_sigaction.sa_sigaction = my_aio_handler;
sigemptyset(&my_sigaction.sa_mask);
(void) sigaction(SIGRTMIN, &my_sigaction, NULL);
\|.\|.\|.
my_aiocb.aio_sigevent.sigev_notify = SIGEV_SIGNAL;
my_aiocb.aio_sigevent.sigev_signo = SIGRTMIN;
my_aiocb.aio_sigevent.sigev_value.sival_ptr = &myaiocb;
\|.\|.\|.
(void) aio_read(&my_aiocb);
\|.\|.\|.
void
my_aio_handler(int signo, siginfo_t *siginfo, void *context) {
int	my_errno;
struct aiocb	*my_aiocbp;

my_aiocbp = siginfo->si_value.sival_ptr;
    if ((my_errno = aio_error(my_aiocb)) != EINPROGRESS) {
        int my_status = aio_return(my_aiocb);
            if (my_status >= 0){ /* start another operation */
                    \|.\|.\|.
            } else        { /* handle I/O error */
                     \|.\|.\|.
            }
    }
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelAsync-Signal-Safe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
.BR _Exit (2),
.BR close (2),
.BR fork (2),
.BR lseek (2),
.BR read (2),
.BR write (2),
.BR aio.h (3HEAD),
.BR aio_cancel (3C),
.BR aio_fsync (3C),
.BR aio_read (3C),
.BR aio_return (3C),
.BR aio_write (3C),
.BR lio_listio (3C),
.BR signal.h (3HEAD),
.BR attributes (5),
.BR lf64 (5),
.BR standards (5)
