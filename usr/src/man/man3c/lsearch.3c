'\" te
.\" Copyright 1989 AT&T.  Copyright (c) 2004, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH lsearch 3C "6 Dec 2004" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
lsearch, lfind \- linear search and update
.SH SYNOPSIS
.LP
.nf
#include <search.h>

\fBvoid *\fBlsearch\fR(\fBconst void *\fIkey\fR, \fBvoid *\fIbase\fR, \fBsize_t *\fInelp\fR,
     \fBsize_t\fR \fIwidth\fR, \fBint\fR (*\fIcompar\fR)(\fBconst void *\fR, \fBconst void *\fR));
.fi

.LP
.nf
\fBvoid *\fBlfind\fR(\fBconst void *\fIkey\fR, \fBconst void *\fIbase\fR, \fBsize_t *\fInelp\fR,
     \fBsize_t\fR \fIwidth\fR, \fBint (*\fIcompar\fR)(const void *, \fBconst void *));\fR
.fi

.SH DESCRIPTION
.sp
.LP
The
.B lsearch()
function is a linear search routine generalized from
Knuth (6.1) Algorithm S. (see
.IR "The Art of Computer Programming, Volume 3, Section 6.1, by Donald E. Knuth." ).
It returns a pointer to a table
indicating where a datum can be found. If the datum does not occur, it is
added at the end of the table. The
.I key
argument points to the datum to
be sought in the table. The
.I base
argument points to the first element
in the table. The
.I nelp
argument points to an integer containing the
current number of  elements in the table. The integer is incremented if the
datum is added to the table. The
.I width
argument is the size of an
element in bytes. The
.I compar
argument is a pointer to the comparison
function that the user must supply
.RB ( strcmp (3C)
for example). It is
called with two arguments that point to the elements being compared. The
function must return zero if the elements are equal and non-zero
otherwise.
.sp
.LP
The
.BR lfind() " function is the same as "
.B lsearch()
except that if
the datum is not found, it is not added to the table.  Instead, a null
pointer is returned.
.sp
.LP
It is important to note the following:
.RS +4
.TP
.ie t \(bu
.el o
The pointers to the key and the element at the base of the table can be
pointers to any type.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The comparison function need not compare every byte, so arbitrary data can
be contained in the elements in addition to the values being compared.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The value returned should be cast into type pointer-to-element.
.RE
.SH RETURN VALUES
.sp
.LP
If the searched-for datum is found, both
.B lsearch()
and
.B lfind()
return a pointer to it. Otherwise,
.B lfind()
returns
.I NULL
and
.B lsearch()
returns a pointer to the newly added element.
.SH USAGE
.sp
.LP
Undefined results can occur if there is not enough room in the table to add
a new item.
.sp
.LP
The
.B lsearch()
and
.B lfind()
functions safely allows concurrent
access by multiple threads to disjoint data, such as overlapping subtrees or
tables.
.SH EXAMPLES
.LP
.B Example 1
A sample code using the
.B lsearch()
function.
.sp
.LP
This program will read in less than
.B TABSIZE
strings of length less
than
.B ELSIZE
and store them in a table, eliminating duplicates, and
then will print each entry.

.sp
.in +2
.nf
#include <search.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#define TABSIZE 50
#define ELSIZE 120

main()
{
    char line[ELSIZE];          /* buffer to hold input string */
    char tab[TABSIZE][ELSIZE];  /* table of strings */
    size_t nel = 0;             /* number of entries in tab */
    int i;

    while (fgets(line, ELSIZE, stdin) != NULL &&
            nel < TABSIZE)
            (void) lsearch(line, tab, &nel, ELSIZE, mycmp);
    for( i = 0; i < nel; i++ )
            (void)fputs(tab[i], stdout);
    return 0;
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR bsearch (3C),
.BR hsearch (3C),
.BR string (3C),
.BR tsearch (3C),
.BR attributes (5),
.BR standards (5)
.sp
.LP
.I "The Art of Computer Programming, Volume 3, Sorting and Searching by Donald E. Knuth, published by Addison-Wesley Publishing Company, 1973."
