'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Portions Copyright (c) 2001, the Institute of Electrical and Electronics Engineers, Inc. and The Open Group. All Rights Reserved.
.\" Portions Copyright (c) 1995 IEEE.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH cond_init 3C "5 Jun 2007" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
cond_init, cond_wait, cond_timedwait, cond_reltimedwait, cond_signal,
cond_broadcast, cond_destroy \- condition variables
.SH SYNOPSIS
.LP
.nf
cc -mt [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. [ \fIlibrary\fR.\|.\|. ]
#include <thread.h>
#include <synch.h>

\fBint\fR \fBcond_init\fR(\fBcond_t *\fIcvp\fR, \fBint\fR \fItype\fR, \fBvoid *\fIarg\fR);
.fi

.LP
.nf
\fBint\fR \fBcond_wait\fR(\fBcond_t *\fIcvp\fR, \fBmutex_t *\fImp\fR);
.fi

.LP
.nf
\fBint\fR \fBcond_timedwait\fR(\fBcond_t *\fIcvp\fR, \fBmutex_t *\fImp\fR,
     \fBtimestruc_t *\fIabstime\fR);
.fi

.LP
.nf
\fBint\fR \fBcond_reltimedwait\fR(\fBcond_t *\fIcvp\fR, \fBmutex_t *\fImp\fR,
     \fBtimestruc_t *\fIreltime\fR);
.fi

.LP
.nf
\fBint\fR \fBcond_signal\fR(\fBcond_t *\fIcvp\fR);
.fi

.LP
.nf
\fBint\fR \fBcond_broadcast\fR(\fBcond_t *\fIcvp\fR);
.fi

.LP
.nf
\fBint\fR \fBcond_destroy\fR(\fBcond_t *\fIcvp\fR);
.fi

.SH DESCRIPTION
.SS "Initialize"
.sp
.LP
Condition variables and mutexes should be global. Condition variables that
are allocated in writable memory can synchronize threads among processes if
they are shared by the cooperating processes (see
.BR mmap (2))
and are
initialized for this purpose.
.sp
.LP
The scope of a condition variable is either intra-process or inter-process.
This is dependent upon whether the argument is passed implicitly or
explicitly to the initialization of that condition variable. A condition
variable does not need to be explicitly initialized. A condition variable is
initialized with all zeros, by default, and its scope is set to within the
calling process. For inter-process synchronization, a condition variable
must be initialized once, and only once, before use.
.sp
.LP
A condition variable must not be simultaneously initialized by multiple
threads or re-initialized while in use by other threads.
.sp
.LP
Attributes of condition variables can be set to the default or customized
at initialization.
.sp
.LP
The
.B cond_init()
function initializes the condition variable pointed
to by
.IR cvp .
A condition variable can have several different types of
behavior, specified by
.IR type .
No current type uses
.I arg
although
a future type may specify additional behavior parameters with
.IR arg .
The
.I type
argument c take one of the following values:
.sp
.ne 2
.mk
.na
.B USYNC_THREAD
.ad
.RS 17n
.rt
The condition variable can synchronize  threads only in this process. This
is the default.
.RE

.sp
.ne 2
.mk
.na
.B USYNC_PROCESS
.ad
.RS 17n
.rt
The condition variable can synchronize threads in this process and other
processes. Only one process should initialize the condition variable. The
object initialized with this attribute must be allocated in memory shared
between processes, either in System V shared memory (see
.BR shmop (2))
or
in memory mapped to a file (see
.BR mmap (2)).
It is illegal to initialize
the object this way and to not allocate it in such shared memory.
.RE

.sp
.LP
Initializing condition variables can also be accomplished by allocating in
zeroed memory, in which case, a
.I type
of
.B USYNC_THREAD
is
assumed.
.sp
.LP
If default condition variable attributes are used, statically allocated
condition variables can be initialized by the macro
.BR DEFAULTCV .
.sp
.LP
Default condition variable initialization (intra-process):
.sp
.in +2
.nf
cond_t cvp;

cond_init(&cvp, NULL, NULL); /*initialize condition variable
                                with default*/
.fi
.in -2

.sp
.LP
or
.sp
.in +2
.nf
cond_init(&cvp, USYNC_THREAD, NULL);
.fi
.in -2

.sp
.LP
or
.sp
.in +2
.nf
cond_t  cond  = DEFAULTCV;
.fi
.in -2

.sp
.LP
Customized condition variable initialization (inter-process):
.sp
.in +2
.nf
cond_init(&cvp, USYNC_PROCESS, NULL); /* initialize cv with
                                        inter-process scope */
.fi
.in -2

.SS "Condition Wait"
.sp
.LP
The condition wait interface allows a thread to wait for a condition and
atomically release the associated mutex that it needs to hold to check the
condition. The thread waits for another thread to make the condition true
and that thread's resulting call to signal and wakeup the waiting thread.
.sp
.LP
The
.B cond_wait()
function atomically releases the mutex pointed to by
.I mp
and causes the calling thread to block on the condition variable
pointed to by
.IR cvp .
The blocked thread may be awakened by
.BR cond_signal() ,
.BR cond_broadcast() ,
or when interrupted by delivery
of a
.B UNIX
signal or a
.BR fork() .
.sp
.LP
The
.BR cond_wait() ,
.BR cond_timedwait() ,
and
.B cond_reltimedwait()
functions always return with the mutex locked and
owned by the calling thread even when returning an error, except when the
mutex has the
.B LOCK_ROBUST
attribute and has been left irrecoverable by
the mutex's last owner. The
.BR cond_wait() ,
.BR cond_timedwait() ,
and
.B cond_reltimedwait()
functions return the appropriate error value if
they fail to internally reacquire the mutex.
.SS "Condition Signaling"
.sp
.LP
A condition signal allows a thread to unblock a single thread waiting on
the condition variable, whereas a condition broadcast allows a thread to
unblock all threads waiting on the condition variable.
.sp
.LP
The
.B cond_signal()
function unblocks one thread that is blocked on the
condition variable pointed to by
.IR cvp .
.sp
.LP
The
.B cond_broadcast()
function unblocks all threads that are blocked
on the condition variable pointed to by
.IR cvp .
.sp
.LP
If no threads are blocked on the condition variable, then
.B cond_signal()
and
.B cond_broadcast()
have no effect.
.sp
.LP
The
.B cond_signal()
or
.B cond_broadcast()
functions can be called
by a thread whether or not it currently owns the mutex that threads calling
.BR cond_wait() ,
.BR cond_timedwait() ,
or
.B cond_reltimedwait()
have
associated with the condition variable during their waits. If, however,
predictable scheduling behavior is required, then that mutex should be
locked by the thread prior to calling
.B cond_signal()
or
.BR cond_broadcast() .
.SS "Destroy"
.sp
.LP
The condition destroy functions destroy any state, but not the space,
associated with the condition variable.
.sp
.LP
The
.B cond_destroy()
function destroys any state associated with the
condition variable pointed to by
.IR cvp .
The space for storing the
condition variable is not freed.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, these functions return
.BR 0 .
Otherwise, a
non-zero value is returned to indicate the error.
.SH ERRORS
.sp
.LP
The
.B cond_timedwait()
and
.B cond_reltimedwait()
functions will
fail if:
.sp
.ne 2
.mk
.na
.B ETIME
.ad
.RS 9n
.rt
The time specified by
.I abstime
or
.I reltime
has passed.
.RE

.sp
.LP
The
.BR cond_wait() ,
.BR cond_timedwait() ,
and
.B cond_reltimedwait()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 9n
.rt
Interrupted. The calling thread was awakened by the delivery of a UNIX
signal.
.RE

.sp
.LP
If the mutex pointed to by
.I mp
is a robust mutex (initialized with the
.B LOCK_ROBUST
attribute), the
.BR cond_wait() ,
.B cond_timedwait()
and
.B cond_reltimedwait()
functions will, under the specified
conditions, return the following error values.  For complete information,
see the description of the
.B mutex_lock()
function on the
.BR mutex_init (3C)
manual page.
.sp
.ne 2
.mk
.na
.B ENOTRECOVERABLE
.ad
.RS 19n
.rt
The mutex was protecting the state that has now been left irrecoverable.
The mutex has not been acquired.
.RE

.sp
.ne 2
.mk
.na
.B EOWNERDEAD
.ad
.RS 19n
.rt
The last owner of the mutex died while  holding the mutex, possibly leaving
the state it was protecting inconsistent. The mutex is now owned by the
caller.
.RE

.sp
.LP
These functions may fail if:
.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The
.IR cond ,
.IR attr ,
.IR cvp ,
.IR arg ,
.IR abstime ,
or
.I mutex
argument points to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
Invalid argument. For
.BR cond_init() ,
.I type
is not a recognized
type. For
.BR cond_timedwait() ,
the number of nanoseconds is greater than
or equal to 1,000,000,000.
.RE

.SH EXAMPLES
.LP
.B Example 1
Use
.B cond_wait()
in a loop to test some condition.
.sp
.LP
The
.B cond_wait()
functin is normally used in a loop testing some
condition, as follows:

.sp
.in +2
.nf
(void) mutex_lock(mp);
while (cond == FALSE) {
     (void) cond_wait(cvp, mp);
}
(void) mutex_unlock(mp);
.fi
.in -2

.LP
.B Example 2
Use
.B cond_timedwait()
in a loop to test some
condition.
.sp
.LP
The
.B cond_timedwait()
function is normally used in a loop testing some
condition. It uses an absolute timeout value as follows:

.sp
.in +2
.nf
timestruc_t to;
\&.\|.\|.
(void) mutex_lock(mp);
to.tv_sec = time(NULL) + TIMEOUT;
to.tv_nsec = 0;
while (cond == FALSE) {
      err = cond_timedwait(cvp, mp, &to);
      if (err == ETIME) {
            /* timeout, do something */
            break;
      }
}
(void) mutex_unlock(mp);
.fi
.in -2

.LP
.B Example 3
Use
.B cond_reltimedwait()
in a loop to test some
condition.
.sp
.LP
The
.B cond_reltimedwait()
function is normally used in a loop testing
in some condition. It uses a relative timeout value as follows:

.sp
.in +2
.nf
timestruc_t to;
\&.\|.\|.
(void) mutex_lock(mp);
while (cond == FALSE) {
     to.tv_sec = TIMEOUT;
     to.tv_nsec = 0;
     err = cond_reltimedwait(cvp, mp, &to);
     if (err == ETIME) {
          /* timeout, do something */
          break;
     }
}
(void) mutex_unlock(mp);
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR fork (2),
.BR mmap (2),
.BR setitimer (2),
.BR shmop (2),
.BR mutex_init (3C),
.BR signal (3C),
.BR attributes (5),
.BR condition (5),
.BR mutex (5),
.BR standards (5)
.SH NOTES
.sp
.LP
If more than one thread is blocked on a condition variable, the order in
which threads are unblocked is determined by the scheduling policy. When
each thread, unblocked as a result of a
.B cond_signal()
or
.BR cond_broadcast() ,
returns from its call to
.B cond_wait()
or
.B cond_timedwait()
, the thread owns the mutex with which it called
.BR cond_wait() ,
.BR cond_timedwait() ,
or
.BR cond_reltimedwait() .
The
thread(s) that are unblocked compete for the mutex according to the
scheduling policy and as if each had called
.BR mutex_lock (3C).
.sp
.LP
When
.B cond_wait()
returns the value of the condition is indeterminate
and must be reevaluated.
.sp
.LP
The
.B cond_timedwait()
and
.B cond_reltimedwait()
functions are
similar to
.BR cond_wait() ,
except that the calling thread will not wait
for the condition to become true past the absolute time specified by
.I abstime
or the relative time specified by
.IR reltime .
Note that
.B cond_timedwait()
or
.B cond_reltimedwait()
might continue to block
as it trys to reacquire the mutex pointed to by
.IR mp ,
which may be
locked by another thread. If either
.B cond_timedwait()
or
.B cond_reltimedwait()
returns because of a timeout, it returns the error
value
.BR ETIME .
