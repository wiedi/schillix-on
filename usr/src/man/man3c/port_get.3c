'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH port_get 3C "31 Jan 2007" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
port_get, port_getn \- retrieve event information from a port
.SH SYNOPSIS
.LP
.nf
#include <port.h>

\fBint\fR \fBport_get\fR(\fBint\fR \fIport\fR, \fBport_event_t *\fIpe\fR,
     \fBconst timespec_t *\fItimeout\fR);
.fi

.LP
.nf
\fBint\fR \fBport_getn\fR(\fBint\fR \fIport\fR, \fBport_event_t\fR \fIlist\fR[], \fBuint_t\fR \fImax\fR,
     \fBuint_t *\fInget\fR, \fBconst timespec_t *\fItimeout\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B port_get()
and
.B port_getn()
functions retrieve events from a
port. The
.B port_get()
function retrieves at most a single event. The
.B port_getn()
function can retrieve multiple events.
.sp
.LP
The
.I pe
argument points to an uninitialized
.BR port_event_t
structure that is filled in by the system when the
.B port_get()
function
returns successfully.
.sp
.LP
The
.B port_event_t
structure contains the following members:
.sp
.in +2
.nf
int       portev_events;   /* detected events           */
ushort_t  portev_source;   /* event source              */
uintptr_t portev_object;   /* specific to event source  */
void      *portev_user;    /* user defined cookie       */
.fi
.in -2

.sp
.LP
The
.B portev_events
and
.B portev_object
members are specific to the
event source. The
.B portev_events
denotes the delivered events. The
.B portev_object
refers to the associated object (see
.BR port_create (3C)).
The
.B portev_source
member specifies the source
of the event. The
.B portev_user
member is a user-specified value.
.sp
.LP
If the
.I timeout
pointer is
.IR NULL ,
the
.B port_get()
function
blocks until an event is available. To poll for an event without waiting,
.I timeout
should point to a zeroed
.BR timespec .
A non-zeroed
.B timespec
specifies the desired time to wait for events. The
.B port_get()
function returns before the timeout elapses if an event is
available, a signal occurs, a port is closed by another thread, or the port
is in or enters alert mode. See
.BR port_alert (3C)
for details on alert
mode.
.sp
.LP
The
.B port_getn()
function can retrieve multiple events from a port.
The
.I list
argument is an array of uninitialized
.BR port_event_t
structures that is filled in by the system when the
.BR port_getn()
function returns succesfully. The
.I nget
argument points to the desired
number of events to be retrieved. The
.I max
parameter specifies the
maximum number of events that can be returned in
.IR list [].
If
.IR max
is 0, the value pointed to by
.I nget
is set to the number of events
available on the port. The
.B port_getn()
function returns immediately
but no events are retrieved.
.sp
.LP
The
.B port_getn()
function block until the desired number of events are
available, the timeout elapses, a signal occurs, a port is closed by another
thread, or the port is in or enters alert mode.
.sp
.LP
On return, the value pointed to by
.I nget
is updated to the actual
number of events retrieved in list.
.sp
.LP
Threads calling the
.B port_get()
function might starve threads waiting
in the
.B port_getn()
function for more than one event.  Similarly,
threads calling the
.B port_getn()
function for
.I n
events might
starve threads waiting in the
.B port_getn()
function for more than
.I n
events.
.sp
.LP
The
.B port_get()
and the
.B port_getn()
functions ignore
non-shareable events (see
.BR port_create (3C))
generated by other
processes.
.SH RETURN VALUES
.sp
.LP
Upon succesful completion, 0 is returned. Otherwise, -1 is returned and
errno is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B port_get()
and
.B port_getn()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 10n
.rt
The
.I port
identifier is not valid.
.RE

.sp
.ne 2
.mk
.na
.B EBADFD
.ad
.RS 10n
.rt
The
.I port
argument is not an event port file descriptor.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
Event or event list can not be delivered
.RI ( list []
pointer and/or user
space reserved to accomodate the list of events is not reasonable), or the
.I timeout
argument is not reasonable.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 10n
.rt
A signal was caught during the execution of the function.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I timeout
element
.B tv_sec
is < 0 or the
.I timeout
element
.B tv_nsec
is < 0 or > 1000000000.
.RE

.sp
.ne 2
.mk
.na
.B ETIME
.ad
.RS 10n
.rt
The time interval expired before the expected number of events have been
posted to the port.
.RE

.sp
.LP
The
.B port_getn()
function will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.IR list []
argument is
.IR NULL ,
the
.I nget
argument is
.IR NULL ,
or the content of
.I nget
is >
.I max
and
.I max
is >
0.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The
.I timeout
argument is not reasonable.
.RE

.sp
.ne 2
.mk
.na
.B ETIME
.ad
.RS 10n
.rt
The time interval expired before the expected number of events have been
posted to the port (original value in
.IR nget ),
or
.I nget
is updated
with the number of returned
.B port_event_t
structures in \fIlist\fR[].
.RE

.SH EXAMPLES
.LP
.B Example 1
Send a user event (PORT_SOURCE_USER) to a port and retrieve
it with
.BR port_get() .
.sp
.LP
The following example sends a user event
.RB ( PORT_SOURCE_USER )
to a port
and retrieves it with
.BR port_get() .
The
.B portev_user
and
.B portev_events
members of the
.B port_event_t
structure are the same
as the corresponding user and events arguments of the
.BR port_send (3C)
function.

.sp
.in +2
.nf
#include <port.h>

int             myport;
port_event_t    pe;
struct timespec timeout;
int             ret;
void            *user;
uintptr_t       object;

myport = port_create();
if (myport < 0) {
        /* port creation failed .\|.\|. */
        .\|.\|.
        return(.\|.\|.);
}
\&.\|.\|.
events = 0x01;          /* own event definition(s) */
object = <myobject>;
user = <my_own_value>;
ret = port_send(myport, events, user);
if (ret == -1) {
        /* error detected .\|.\|. */
        .\|.\|.
        close(myport);
        return (.\|.\|.);
}

/*
 * The following code could also be executed in another thread or
 * process.
 */
timeout.tv_sec = 1;     /* user defined */
timeout.tv_nsec = 0;
ret = port_get(myport, &pe, &timeout);
if (ret == -1) {
        /*
         * error detected :
         * - EINTR or ETIME : log error code and try again .\|.\|.
         * - Other kind of errors : may have to close the port .\|.\|.
         */
        return(.\|.\|.);
}

/*
 * After port_get() returns successfully, the port_event_t
 * structure will be filled with:
 * pe.portev_source =   PORT_SOURCE_USER
 * pe.portev_events = 0x01
 * pe.portev_object = <myobject>
 * pe.portev_user = <my_own_value>
 */
\&.\|.\|.
close(myport);
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Architectureall
_
AvailabilitySUNWcsr, SUNWhea
_
Interface StabilityEvolving
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR port_alert (3C),
.BR port_associate (3C),
.BR port_create (3C),
.BR port_send (3C),
.BR attributes (5)
