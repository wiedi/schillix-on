'\" te
.\" Copyright (c) 1992, X/Open Company Limited. All Rights Reserved.
.\" Portions Copyright (c) 2003, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH wordexp 3C "1 Nov 2003" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
wordexp, wordfree \- perform word expansions
.SH SYNOPSIS
.LP
.nf
#include <wordexp.h>

\fBint\fR \fBwordexp\fR(\fBconst char *restrict\fR \fIwords\fR, \fBwordexp_t *restrict\fR \fIpwordexp\fR,
     \fBint\fR \fIflags\fR);
.fi

.LP
.nf
\fBvoid\fR \fBwordfree\fR(\fBwordexp_t *\fIpwordexp\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B wordexp()
function performs word expansions, subject to quoting,
and places the list of expanded words into the structure pointed to by
.IR pwordexp .
.sp
.LP
The \fBwordfree()\fR function frees any memory allocated by \fBwordexp()\fR
associated with
.IR pwordexp .
.SS "\fIwords\fR Argument"
.sp
.LP
The
.I words
argument is a pointer to a string containing one or more
words to be expanded. The expansions will be the same as would be performed
by the shell if
.I words
were the part of a command line representing the
arguments to a utility. Therefore,
.I words
must not contain an unquoted
.B NEWLINE
or any of the unquoted shell special characters:
.sp
.LP
.B  |   &   ;   <   >
.sp
.LP
except in the context of command substitution. It also must not contain
unquoted parentheses or braces, except in the context of command or variable
substitution. If the argument
.I words
contains an unquoted comment
character (number sign) that is the beginning of a token,
.B wordexp()
may
treat the comment character as a regular character, or may interpret it as a
comment indicator and ignore the remainder of
.IR words .
.SS "\fIpwordexp\fR Argument"
.sp
.LP
The structure type
.B wordexp_t
is defined in the header
<\fBwordexp.h\fR> and includes at least the following members:
.sp
.ne 2
.mk
.na
.B size_t we_wordc
.ad
.RS 19n
.rt
Count of words matched by
.IR words .
.RE

.sp
.ne 2
.mk
.na
.B char **we_wordv
.ad
.RS 19n
.rt
Pointer to list of expanded words.
.RE

.sp
.ne 2
.mk
.na
.B size_t we_offs
.ad
.RS 19n
.rt
Slots to reserve at the beginning of \fIpwordexp\(mi>\fBwe_wordv\fR.
.RE

.sp
.LP
The
.B wordexp()
function stores the number of generated words into
\fIpwordexp\(mi>\fBwe_wordc\fR and a pointer to a list of pointers to
words in \fIpwordexp\(mi>\fBwe_wordv.\fR Each individual field created
during field splitting is a separate word in the
\fIpwordexp\(mi>\fBwe_wordv\fR list.  The words are in order. The first
pointer after the last word pointer will be a null pointer.
.sp
.LP
It is the caller's responsibility to allocate the storage pointed to by
.IR pwordexp .
The
.B wordexp()
function allocates other space as needed,
including memory pointed to by \fIpwordexp\(mi>\fBwe_wordv\fR. The
.B wordfree()
function frees any memory associated with
.IR pwordexp
from a previous call to
.BR wordexp() .
.SS "\fIflags\fR Argument"
.sp
.LP
The
.I flags
argument is used to control the behavior of
.BR wordexp() .
The value of \fIflags\fR is the bitwise inclusive \fBOR\fR of zero or more of
the following constants, which are defined in
.BR <wordexp.h> :
.sp
.ne 2
.mk
.na
.B WRDE_APPEND
.ad
.RS 16n
.rt
Append words generated to the ones from a previous call to
.BR wordexp() .
.RE

.sp
.ne 2
.mk
.na
.B WRDE_DOOFFS
.ad
.RS 16n
.rt
Make use of \fIpwordexp\(mi>\fBwe_offs.\fR If this flag is set,
\fIpwordexp\(mi>\fBwe_offs\fR is used to specify how many \fINULL\fR
pointers to add to the beginning of \fIpwordexp\(mi>\fBwe_wordv.\fR In
other words, \fIpwordexp\(mi>\fBwe_wordv\fR will point to
\fIpwordexp\(mi>\fBwe_offs\fR \fINULL\fR pointers, followed by
\fIpwordexp\(mi>\fBwe_wordc\fR word pointers, followed by a \fINULL\fR
pointer.
.RE

.sp
.ne 2
.mk
.na
.B WRDE_NOCMD
.ad
.RS 16n
.rt
Fail if command substitution is requested.
.RE

.sp
.ne 2
.mk
.na
.B WRDE_REUSE
.ad
.RS 16n
.rt
The
.I pwordexp
argument was passed to a previous successful call to
.BR wordexp() ,
and has not been passed to
.BR wordfree() .
The result will
be the same as if the application had called
.B wordfree()
and then called
.B wordexp()
without
.BR WRDE_REUSE .
.RE

.sp
.ne 2
.mk
.na
.B WRDE_SHOWERR
.ad
.RS 16n
.rt
Do not redirect
.B stderr
to
.BR /dev/null .
.RE

.sp
.ne 2
.mk
.na
.B WRDE_UNDEF
.ad
.RS 16n
.rt
Report error on an attempt to expand an undefined shell variable.
.RE

.sp
.LP
The
.B WRDE_APPEND
flag can be used to append a new set of words to those
generated by a previous call to
.BR wordexp() .
The following rules apply
when two or more calls to
.B wordexp()
are made with the same value of
.I pwordexp
and without intervening calls to \fBwordfree()\fR:
.RS +4
.TP
1.
The first such call must not set
.BR WRDE_APPEND .
All subsequent calls
must set it.
.RE
.RS +4
.TP
2.
All of the calls must set
.BR WRDE_DOOFFS ,
or all must not set it.
.RE
.RS +4
.TP
3.
After the second and each subsequent call, \fIpwordexp\(mi>\fBwe_wordv\fR
will point to a list containing the following:
.RS +4
.TP
a.
zero or more
.I NULL
pointers, as specified by
.B WRDE_DOOFFS
and
\fIpwordexp\(mi>\fBwe_offs.\fR
.RE
.RS +4
.TP
b.
pointers to the words that were in the \fIpwordexp\(mi>\fBwe_wordv\fR
list before the call, in the same order as before.
.RE
.RS +4
.TP
c.
pointers to the new words generated by the latest call, in the specified
order.
.RE
.RE
.RS +4
.TP
4.
The count returned in \fIpwordexp\(mi>\fBwe_wordc\fR will be the total
number of words from all of the calls.
.RE
.RS +4
.TP
5.
The application can change any of the fields after a call to
.BR wordexp() ,
but if it does it must reset them to the original value
before a subsequent call, using the same
.I pwordexp
value, to
.B wordfree()
or
.B wordexp()
with the
.B WRDE_APPEND
or
.B WRDE_REUSE
flag.
.RE
.sp
.LP
If
.I words
contains an unquoted:
.sp
.LP
.B "NEWLINE |   &   ;   <   >   (   )   {   }
.sp
.LP
in an inappropriate context,
.B wordexp()
will fail, and the number of
expanded words will be zero.
.sp
.LP
Unless
.B WRDE_SHOWERR
is set in
.IR flags ,
.B wordexp()
will
redirect
.B stderr
to
.B /dev/null
for any utilities executed as a
result of command substitution while expanding
.IR words .
.sp
.LP
If
.B WRDE_SHOWERR
is set,
.B wordexp()
may write messages to
.I stderr
if syntax errors are detected while expanding
.IR words .
If
.B WRDE_DOOFFS
is set, then \fIpwordexp\(mi>\fB we_offs\fR must have
the same value for each
.B wordexp()
call and
.B wordfree()
call using
a given
.IR pwordexp .
.sp
.LP
The following constants are defined as error return values:
.sp
.ne 2
.mk
.na
.B WRDE_BADCHAR
.ad
.RS 16n
.rt
One of the unquoted characters:
.sp
.B "NEWLINE |   &   ;   <   >   (   )   {   }
.sp
appears in
.I words
in an inappropriate context.
.RE

.sp
.ne 2
.mk
.na
.B WRDE_BADVAL
.ad
.RS 16n
.rt
Reference to undefined shell variable when
.B WRDE_UNDEF
is set in
.IR flags .
.RE

.sp
.ne 2
.mk
.na
.B WRDE_CMDSUB
.ad
.RS 16n
.rt
Command substitution requested when
.B WRDE_NOCMD
was set in flags.
.RE

.sp
.ne 2
.mk
.na
.B WRDE_NOSPACE
.ad
.RS 16n
.rt
Attempt to allocate memory failed.
.RE

.sp
.ne 2
.mk
.na
.B WRDE_SYNTAX
.ad
.RS 16n
.rt
Shell syntax error, such as unbalanced parentheses or unterminated string.
.RE

.SH RETURN VALUES
.sp
.LP
On successful completion,
.B wordexp()
returns
.BR 0 .
.sp
.LP
Otherwise, a non-zero value as described in
.B <wordexp.h>
is returned to
indicate an error.  If
.B wordexp()
returns the value
.BR WRDE_NOSPACE ,
then \fIpwordexp\(mi>\fBwe_wordc\fR and \fIpwordexp\(mi>\fBwe_wordv\fR
will be updated to reflect any words that were successfully expanded. In
other cases, they will not be modified.
.sp
.LP
The
.B wordfree()
function returns no value.
.SH ERRORS
.sp
.LP
No errors are defined.
.SH USAGE
.sp
.LP
This function is intended to be used by an application that wants to do all
of the shell's expansions on a word or words obtained from a user. For
example, if the application prompts for a filename (or list of filenames) and
then uses
.B wordexp()
to process the input, the user could respond with
anything that would be valid as input to the shell.
.sp
.LP
The
.B WRDE_NOCMD
flag is provided for applications that, for security or
other reasons, want to prevent a user from executing shell command.
Disallowing unquoted shell special characters also prevents unwanted side
effects such as executing a command or writing a file.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR fnmatch (3C),
.BR glob (3C),
.BR attributes (5),
.BR standards (5)
