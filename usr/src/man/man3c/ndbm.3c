'\" te
.\" Copyright (c) 1985 Regents of the University of California.  All rights reserved.
.\" The Berkeley software License Agreement  specifies the terms and conditions for redistribution.
.\" Copyright (c) 2001, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Portions Copyright (c) 1992 X/Open Company Limited  All Rights Reserved
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.TH ndbm 3C "17 Sep 2001" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
ndbm, dbm_clearerr, dbm_close, dbm_delete, dbm_error, dbm_fetch,
dbm_firstkey, dbm_nextkey, dbm_open, dbm_store \- database functions
.SH SYNOPSIS
.LP
.nf
#include <ndbm.h>

\fBint\fR \fBdbm_clearerr\fR(\fBDBM *\fIdb\fR);
.fi

.LP
.nf
\fBvoid\fR \fBdbm_close\fR(\fBDBM *\fIdb\fR);
.fi

.LP
.nf
\fBint\fR \fBdbm_delete\fR(\fBDBM *\fIdb\fR, \fBdatum\fR \fIkey\fR);
.fi

.LP
.nf
\fBint\fR \fBdbm_error\fR(\fBDBM *\fIdb\fR);
.fi

.LP
.nf
\fBdatum\fR \fBdbm_fetch\fR(\fBDBM *\fIdb\fR, \fBdatum\fR \fIkey\fR);
.fi

.LP
.nf
\fBdatum\fR \fBdbm_firstkey\fR(\fBDBM *\fIdb\fR);
.fi

.LP
.nf
\fBdatum\fR \fBdbm_nextkey\fR(\fBDBM *\fIdb\fR);
.fi

.LP
.nf
\fBDBM *\fBdbm_open\fR(\fBconst char *\fIfile\fR, \fBint\fR \fIopen_flags\fR, \fBmode_t\fR \fIfile_mode\fR);
.fi

.LP
.nf
\fBint\fR \fBdbm_store\fR(\fBDBM *\fIdb\fR, \fBdatum\fR \fIkey\fR, \fBdatum\fR \fIcontent\fR, \fBint\fR \fIstore_mode\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions create, access and modify a database. They maintain
.IR key / content
pairs in a database. The functions will handle large
databases (up to a billion blocks) and will access a keyed item in one or
two file system accesses. This package replaces the earlier
.BR dbm (3UCB)
library, which managed only a single database.
.sp
.LP
.IR key s
and
.IR content s
are described by the
.B datum
typedef. A
.B datum
consists of at least two members,
.B dptr
and
.BR dsize .
The
.B dptr
member points to an object that is
.B dsize
bytes in
length. Arbitrary binary data, as well as ASCII character strings, may be
stored in the object pointed to by
.BR dptr .
.sp
.LP
The database is stored in two files. One file is a directory containing a
bit map of keys and has
.B \&.dir
as its suffix.  The second file
contains all data and has
.B \&.pag
as its suffix.
.sp
.LP
The
.B dbm_open()
function opens a database.  The
.B file
argument to
the function is the pathname of the database.  The function opens two files
named
.B
file\&.dir \c
and
\fBfile\&.pag.\fR The
.I open_flags
argument has the same meaning as the
.I flags
argument
of
.BR open (2)
except that a database opened for write-only access opens
the files for read and write access.  The
.I file_mode
argument has the
same meaning as the third argument of
.BR open (2).
.sp
.LP
The
.B dbm_close()
function closes a database.  The argument
.I db
must be a pointer to a
.B dbm
structure that has been returned from a
call to
.BR dbm_open() .
.sp
.LP
The
.B dbm_fetch()
function reads a record from a database.  The
argument
.I db
is a pointer to a database structure that has been
returned from a call to
.BR dbm_open() .
The argument
.I key
is a
.B datum
that has been initialized by the application program to the
value of the key that matches the key of the record the program is
fetching.
.sp
.LP
The
.B dbm_store()
function writes a record to a database.  The argument
.I db
is a pointer to a database structure that has been returned from a
call to
.BR dbm_open() .
The argument
.I key
is a
.B datum
that has
been initialized by the application program to the value of the key that
identifies (for subsequent reading, writing or deleting) the record the
program is writing. The argument
.I content
is a
.B datum
that has
been initialized by the application program to the value of the record the
program is writing.  The argument
.I store_mode
controls whether
.B dbm_store()
replaces any pre-existing record that has the same key
that is specified by the
.I key
argument.  The application program must
set
.I store_mode
to either
.B DBM_INSERT
or
.BR DBM_REPLACE .
If
the database contains a record that matches the
.I key
argument and
.I store_mode
is
.BR DBM_REPLACE ,
the existing record is replaced with
the new record.  If the database contains a record that matches the
.I key
argument and
.I store_mode
is
.BR DBM_INSERT ,
the existing
record is not replaced with the new record.  If the database does not
contain a record that matches the
.I key
argument and
.I store_mode
is
either
.B DBM_INSERT
or
.BR DBM_REPLACE ,
the new record is inserted in
the database.
.sp
.LP
The
.B dbm_delete()
function deletes a record and its key from the
database. The argument
.I db
is a pointer to a database structure that
has been returned from a call to
.BR dbm_open() .
The argument
.I key
is
a
.B datum
that has been initialized by the application program to the
value of the key that identifies the record the program is deleting.
.sp
.LP
The
.B dbm_firstkey()
function returns the first key in the database.
The argument
.I db
is a pointer to a database structure that has been
returned from a call to
.BR dbm_open() .
.sp
.LP
The
.B dbm_nextkey()
function returns the next key in the database.  The
argument
.I db
is a pointer to a database structure that has been
returned from a call to
.BR dbm_open() .
The
.B dbm_firstkey()
function
must be called before calling
.BR dbm_nextkey() .
Subsequent calls to
.B dbm_nextkey()
return the next key until all of the keys in the
database have been returned.
.sp
.LP
The
.B dbm_error()
function returns the error condition of the database.
The argument
.I db
is a pointer to a database structure that has been
returned from a call to
.BR dbm_open() .
.sp
.LP
The
.B dbm_clearerr()
function clears the error condition of the
database. The argument
.I db
is a pointer to a database structure that
has been returned from a call to
.BR dbm_open() .
.sp
.LP
These database functions support key/content pairs of at least 1024
bytes.
.SH RETURN VALUES
.sp
.LP
The
.B dbm_store()
and
.B dbm_delete()
functions return
.B 0
when
they succeed and a negative value when they fail.
.sp
.LP
The
.B dbm_store()
function returns
.B 1
if it is called with a
.I flags
value of
.B DBM_INSERT
and the function finds an existing
record with the same key.
.sp
.LP
The
.B dbm_error()
function returns
.B 0
if the error condition is
not set and returns a non-zero value if the error condition is set.
.sp
.LP
The return value of
.B dbm_clearerr()
is unspecified .
.sp
.LP
The
.BR dbm_firstkey() " and "
.B dbm_nextkey()
functions return a key
.BR datum .
When the end of the database is reached, the
.B dptr
member
of the key is a null pointer.  If an error is detected, the
.B dptr
member of the key is a null pointer and the error condition of the database
is set.
.sp
.LP
The
.B dbm_fetch()
function returns a content
.BR datum .
If no record
in the database matches the key or if an error condition has been detected
in the database, the
.B dptr
member of the content is a null pointer.
.sp
.LP
The
.B dbm_open()
function returns a pointer to a database structure.
If an error is detected during the operation,
.B dbm_open()
returns a
.RB ( "DBM *" )0.
.SH ERRORS
.sp
.LP
No errors are defined.
.SH USAGE
.sp
.LP
The following code can be used to traverse the database:
.sp
.in +2
.nf
for(key = dbm_firstkey(db); key.dptr != NULL; key = dbm_nextkey(db))
.fi
.in -2

.sp
.LP
The
.B dbm_
functions provided in this library should not be confused in
any way with those of a general-purpose database management system.  These
functions do not provide for multiple search keys per entry, they do not
protect against multi-user access (in other words they do not lock records
or files), and they do not provide the many other useful database functions
that are found in more robust database management systems.  Creating and
updating databases by use of these functions is relatively slow because of
data copies that occur upon hash collisions.  These functions are useful for
applications requiring fast lookup of relatively static information that is
to be indexed by a single key.
.sp
.LP
The
.B dptr
pointers returned by these functions may point into static
storage that may be changed by subsequent calls.
.sp
.LP
The
.B dbm_delete()
function does not physically reclaim file space,
although it does make it available for reuse.
.sp
.LP
After calling
.B dbm_store()
or
.B dbm_delete()
during a pass through
the keys by
.B dbm_firstkey()
and
.BR dbm_nextkey() ,
the application
should reset the database by calling
.B dbm_firstkey()
before again
calling
.BR dbm_nextkey() .
.SH EXAMPLES
.LP
.B Example 1
Using the Database Functions
.sp
.LP
The following example stores and retrieves a phone number, using the name
as the key.  Note that this example does not include error checking.

.sp
.in +2
.nf
#include <ndbm.h>
#include <stdio.h>
#include <fcntl.h>
#define NAME      "Bill"
#define PHONE_NO          "123-4567"
#define DB_NAME   "phones"
main()
{
     DBM *db;
     datum name = {NAME, sizeof (NAME)};
     datum put_phone_no = {PHONE_NO, sizeof (PHONE_NO)};
     datum get_phone_no;
     /* Open the database and store the record */
     db = dbm_open(DB_NAME, O_RDWR | O_CREAT, 0660);
     (void) dbm_store(db, name, put_phone_no, DBM_INSERT);
     /* Retrieve the record */
     get_phone_no = dbm_fetch(db, name);
     (void) printf("Name: %s, Phone Number: %s\en", name.dptr,
     get_phone_no.dptr);
     /* Close the database */
     dbm_close(db);
     return (0);
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR ar (1),
.BR cat (1),
.BR cp (1),
.BR tar (1),
.BR open (2),
.BR dbm (3UCB),
.BR netconfig (4),
.BR attributes (5),
.BR standards (5)
.SH NOTES
.sp
.LP
The
.B \&.pag
file will contain holes so that its apparent size may be
larger than its actual content. Older versions of the UNIX operating system
may create real file blocks for these holes when touched. These files cannot
be copied by normal means (
.BR cp (1),
.BR cat (1),
.BR tar (1),
.BR ar (1))
without filling in the holes.
.sp
.LP
.RI "The sum of the sizes of a " key / content " pair must not exceed the"
internal block size (currently 1024 bytes). Moreover all
.IR key / content
pairs that hash together must fit on a single block.
.B dbm_store()
will return an error in the event that a disk block fills
with inseparable data.
.sp
.LP
.RB "The order of keys presented by " dbm_firstkey() " and " dbm_nextkey() 
depends on a hashing function.
.sp
.LP
There are no interlocks and no reliable cache flushing; thus concurrent
updating and reading is risky.
.sp
.LP
The database files (\fBfile\&.dir\fR and \fBfile\&.pag\fR) are
binary and are architecture-specific (for example, they depend on the
architecture's byte order.)  These files are not guaranteed to be portable
across architectures.
