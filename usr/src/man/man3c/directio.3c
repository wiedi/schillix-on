'\" te
.\" Copyright (c) 2003, Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH directio 3C "9 Apr 2003" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
directio \- provide advice to file system
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/fcntl.h>

\fBint\fR \fBdirectio\fR(\fBint\fR \fIfildes\fR, \fBint\fR \fIadvice\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B directio()
function provides advice to the system about the
expected behavior of the application when accessing the data in the file
associated with the open file descriptor
.IR fildes .
The system uses this
information to help optimize accesses to the file's data. The
\fBdirectio()\fR function has no effect on the semantics of the other
operations on the data, though it may affect the performance of other
operations.
.sp
.LP
The
.I advice
argument is kept per file; the last caller of
\fBdirectio()\fR sets the \fIadvice\fR for all applications using the file
associated with
.IR fildes .
.sp
.LP
Values for
.I advice
are defined in \fB<sys/fcntl.h>\fR\&.
.sp
.ne 2
.mk
.na
.B DIRECTIO_OFF
.ad
.RS 16n
.rt
Applications get the default system behavior when accessing file data.
.sp
When an application reads data from a file, the data is first cached in
system memory and then copied into the application's buffer (see
.BR read (2)).
If the system detects that the application is reading
sequentially from a file, the system will asynchronously "read ahead" from
the file into system memory so the data is immediately available for the
next
.BR read (2)
operation.
.sp
When an application writes data into a file, the data is first cached in
system memory and is written to the device at a later time (see
.BR write (2)).
When possible, the system increases the performance of
.BR write (2)
operations by cacheing the data in memory pages. The data is
copied into system memory and the
.BR write (2)
operation returns
immediately to the application. The data is later written asynchronously to
the device. When possible, the cached data is "clustered" into large chunks
and written to the device in a single write operation.
.sp
The system behavior for
.B DIRECTIO_OFF
can change without notice.
.RE

.sp
.ne 2
.mk
.na
.B DIRECTIO_ON
.ad
.RS 16n
.rt
The system behaves as though the application is not going to reuse the file
data in the near future. In other words, the file data is not cached in the
system's memory pages.
.sp
When possible, data is read or written directly between the application's
memory and the device when the data is accessed with
.BR read (2)
and
.BR write (2)
operations. When such transfers are not possible, the system
switches back to the default behavior, but just for that operation. In
general, the transfer is possible when the application's buffer is aligned
on a two-byte (short) boundary, the offset into the file is on a device
sector boundary, and the size of the operation is a multiple of device
sectors.
.sp
This advisory is ignored while the file associated with \fIfildes\fR is
mapped (see
.BR mmap (2)).
.sp
The system behavior for
.B DIRECTIO_ON
can change without notice.
.RE

.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B directio()
returns
.BR 0 .
Otherwise, it
returns \fB\(mi1\fR and sets
.B errno
to indicate the error.
.SH ERRORS
.sp
.LP
The
.B directio()
function will fail if:
.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 10n
.rt
The \fIfildes\fR argument is not a valid open file descriptor.
.RE

.sp
.ne 2
.mk
.na
.B ENOTTY
.ad
.RS 10n
.rt
The \fIfildes\fR argument is not associated with a file system that accepts
advisory functions.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The value in
.I advice
is invalid.
.RE

.SH USAGE
.sp
.LP
Small sequential I/O generally performs best with
.BR DIRECTIO_OFF .
.sp
.LP
Large sequential I/O generally performs best with
.BR DIRECTIO_ON ,
except when a file is sparse or is being extended and is opened with
\fBO_SYNC\fR or \fBO_DSYNC\fR (see
.BR open (2)).
.sp
.LP
The
.B directio()
function is supported for the NFS and UFS file system
types (see \fBfstyp\fR(1M)).
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR fstyp (1M),
.BR mmap (2),
.BR open (2),
.BR read (2),
.BR write (2),
.BR fcntl.h (3HEAD),
.BR attributes (5)
.SH WARNINGS
.sp
.LP
Switching between
.B DIRECTIO_OFF
and
.B DIRECTIO_ON
can slow the
system because each switch to
.B DIRECTIO_ON
might entail flushing the
file's data from the system's memory.
