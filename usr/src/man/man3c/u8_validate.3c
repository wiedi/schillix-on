'\" te
.\" Copyright (c) 2007, Sun Microsystems Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH u8_validate 3C "18 Sep 2007" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
u8_validate \- validate UTF-8 characters and calculate the byte length
.SH SYNOPSIS
.LP
.nf
#include <sys/u8_textprep.h>

\fBint\fR u8_validate(\fBchar *\fIu8str\fR, \fBsize_t\fR \fIn\fR, \fBchar **\fIlist\fR, \fBint\fR \fIflag\fR,
     \fBint *\fIerrnum\fR);
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I u8str
.ad
.RS 10n
.rt
The UTF-8 string to be validated.
.RE

.sp
.ne 2
.mk
.na
.I n
.ad
.RS 10n
.rt
The maximum number of bytes in
.I u8str
that can be examined and
validated.
.RE

.sp
.ne 2
.mk
.na
.I list
.ad
.RS 10n
.rt
A list of null-terminated character strings in UTF-8 that must be
additionally checked against as invalid characters. The last string in
\fIlist\fR must be null to indicate there is no further string.
.RE

.sp
.ne 2
.mk
.na
\fIflag\fR
.ad
.RS 10n
.rt
Possible validation options constructed by a bitwise-inclusive-OR of the
following values:
.sp
.ne 2
.mk
.na
.B U8_VALIDATE_ENTIRE
.ad
.sp .6
.RS 4n
By default,
.B u8_validate()
looks at the first character or up to
\fIn\fR bytes, whichever is smaller in terms of the number of bytes to be
consumed, and returns with the result.
.sp
When this option is used,
.B u8_validate()
will check up to
.IR n
bytes from
.I u8str
and possibly more than a character before returning
the result.
.RE

.sp
.ne 2
.mk
.na
.B U8_VALIDATE_CHECK_ADDITIONAL
.ad
.sp .6
.RS 4n
By default,
.B u8_validate()
does not use list supplied.
.sp
When this option is supplied with a list of character strings,
\fBu8_validate()\fR additionally validates \fIu8str\fR against the character
strings supplied with
.I list
and returns EBADF in
.I errnum
if
\fIu8str\fR has any one of the character strings in
.IR list .
.RE

.sp
.ne 2
.mk
.na
.B U8_VALIDATE_UCS2_RANGE
.ad
.sp .6
.RS 4n
By default,
.B u8_validate()
uses the entire Unicode coding space of
U+0000 to U+10FFFF.
.sp
When this option is specified, the valid Unicode coding space is smaller to
U+0000 to U+FFFF.
.RE

.RE

.sp
.ne 2
.mk
.na
.I errnum
.ad
.RS 10n
.rt
An error occurred during validation.  The following values are supported:
.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 10n
.rt
Validation failed because list-specified characters were found in the
string pointed to by
.IR u8str .
.RE

.sp
.ne 2
.mk
.na
.B EILSEQ
.ad
.RS 10n
.rt
Validation failed because an illegal byte was found in the string pointed
to by
.IR u8str .
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
Validation failed because an incomplete byte was found in the string
pointed to by
.IR u8str .
.RE

.sp
.ne 2
.mk
.na
.B ERANGE
.ad
.RS 10n
.rt
Validation failed because character bytes were encountered that are outside
the range of the Unicode coding space.
.RE

.RE

.SH DESCRIPTION
.sp
.LP
The
.B u8_validate()
function validates
.I u8str
in UTF-8 and
determines the number of bytes constituting the character(s) pointed to by
.IR u8str .
.SH RETURN VALUES
.sp
.LP
If
.I u8str
is a null pointer,
.B u8_validate()
returns 0. Otherwise,
\fBu8_validate()\fR returns either the number of bytes that constitute the
characters if the next
.I n
or fewer bytes form valid characters, or -1
if there is an validation failure, in which case it may set
.I errnum
to
indicate the error.
.SH EXAMPLES
.LP
\fBExample 1\fR Determine the length of the first UTF-8 character.
.sp
.in +2
.nf
#include <sys/u8_textprep.h>

char u8[MAXPATHLEN];
int errnum;
\&.
\&.
\&.
len = u8_validate(u8, 4, (char **)NULL, 0, &errnum);
if (len == -1) {
    switch (errnum) {
        case EILSEQ:
        case EINVAL:
            return (MYFS4_ERR_INVAL);
        case EBADF:
            return (MYFS4_ERR_BADNAME);
        case ERANGE:
            return (MYFS4_ERR_BADCHAR);
        default:
            return (-10);
    }
}
.fi
.in -2

.LP
\fBExample 2\fR Check if there are any invalid characters in the entire
string.
.sp
.in +2
.nf
#include <sys/u8_textprep.h>

char u8[MAXPATHLEN];
int n;
int errnum;
\&.
\&.
\&.
n = strlen(u8);
len = u8_validate(u8, n, (char **)NULL, U8_VALIDATE_ENTIRE, &errnum);
if (len == -1) {
    switch (errnum) {
        case EILSEQ:
        case EINVAL:
            return (MYFS4_ERR_INVAL);
        case EBADF:
            return (MYFS4_ERR_BADNAME);
        case ERANGE:
            return (MYFS4_ERR_BADCHAR);
        default:
            return (-10);
    }
}
.fi
.in -2

.LP
\fBExample 3\fR Check if there is any invalid character, including
prohibited characters, in the entire string.
.sp
.in +2
.nf
#include <sys/u8_textprep.h>

char u8[MAXPATHLEN];
int n;
int errnum;
char *prohibited[4] = {
    ".", "..", "\e\e", NULL
};
\&.
\&.
\&.
n = strlen(u8);
len = u8_validate(u8, n, prohibited,
    (U8_VALIDATE_ENTIRE|U8_VALIDATE_CHECK_ADDITIONAL), &errnum);
if (len == -1) {
    switch (errnum) {
        case EILSEQ:
        case EINVAL:
            return (MYFS4_ERR_INVAL);
        case EBADF:
            return (MYFS4_ERR_BADNAME);
        case ERANGE:
            return (MYFS4_ERR_BADCHAR);
        default:
            return (-10);
    }
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR u8_strcmp (3C),
.BR u8_textprep_str (3C),
.BR attributes (5),
.BR u8_strcmp (9F),
.BR u8_textprep_str (9F),
.BR u8_validate (9F)
.sp
.LP
The Unicode Standard (http://www.unicode.org)
