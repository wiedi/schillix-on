'\" te
.\" Copyright (c) 1992, X/Open Company Limited  All Rights Reserved
.\" Portions Copyright (c) 2002, Sun Microsystems, Inc.  All Rights Reserved
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH wcstring 3C "14 Aug 2002" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
wcstring, wcscat, wscat, wcsncat, wsncat, wcscmp, wscmp, wcsncmp, wsncmp,
wcscpy, wscpy, wcsncpy, wsncpy, wcslen, wslen, wcschr, wschr, wcsrchr,
wsrchr, windex, wrindex, wcspbrk, wspbrk, wcswcs, wcsspn, wsspn, wcscspn,
wscspn, wcstok, wstok \- wide-character string operations
.SH SYNOPSIS
.LP
.nf
#include <wchar.h>

\fBwchar_t *\fBwcscat\fR(\fBwchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR);
.fi

.LP
.nf
\fBwchar_t *\fBwcsncat\fR(\fBwchar_t *restrict\fR \fIws1\fR, \fBconst wchar_t *restrict\fR \fIws2\fR,
     \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBint\fR \fBwcscmp\fR(\fBconst wchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR);
.fi

.LP
.nf
\fBint\fR \fBwcsncmp\fR(\fBconst wchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBwchar_t *\fBwcscpy\fR(\fBwchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR);
.fi

.LP
.nf
\fBwchar_t *\fBwcsncpy\fR(\fBwchar_t *restrict\fR \fIws1\fR, \fBconst wchar_t *restrict\fR \fIws2\fR,
     \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBwcslen\fR(\fBconst wchar_t *\fIws\fR);
.fi

.LP
.nf
\fBwchar_t *\fBwcschr\fR(\fBconst wchar_t *\fIws\fR, \fBwchar_t\fR \fIwc\fR);
.fi

.LP
.nf
\fBwchar_t *\fBwcsrchr\fR(\fBconst wchar_t *\fIws\fR, \fBwchar_t\fR \fIwc\fR);
.fi

.LP
.nf
\fBwchar_t *\fBwcspbrk\fR(\fBconst wchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR);
.fi

.LP
.nf
\fBwchar_t *\fBwcswcs\fR(\fBconst wchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBwcsspn\fR(\fBconst wchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBwcscspn\fR(\fBconst wchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR);
.fi

.SS "XPG4, SUS, SUSv2, SUSv3"
.LP
.nf
\fBwchar_t *\fBwcstok\fR(\fBwchar_t *restrict\fR \fIws1\fR, \fBconst wchar_t *restrict\fR \fIws2\fR);
.fi

.SS "Default and other standards"
.LP
.nf
\fBwchar_t *\fBwcstok\fR(\fBwchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR, \fBwchar_t **\fIptr\fR);
.fi

.LP
.nf
#include <widec.h>

\fBwchar_t *\fBwscat\fR(\fBwchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR);
.fi

.LP
.nf
\fBwchar_t *\fBwsncat\fR(\fBwchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBint\fR \fBwscmp\fR(\fBconst wchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR);
.fi

.LP
.nf
\fBint\fR \fBwsncmp\fR(\fBconst wchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBwchar_t *\fBwscpy\fR(\fBwchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR);
.fi

.LP
.nf
\fBwchar_t *\fBwsncpy\fR(\fBwchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBwslen\fR(\fBconst wchar_t *\fIws\fR);
.fi

.LP
.nf
\fBwchar_t *\fBwschr\fR(\fBconst wchar_t *\fIws\fR, \fBwchat_t\fR \fIwc\fR);
.fi

.LP
.nf
\fBwchar_t *\fBwsrchr\fR(\fBconst wchar_t *\fIws\fR, \fBwchat_t\fR \fIwc\fR);
.fi

.LP
.nf
\fBwchar_t *\fBwspbrk\fR(\fBconst wchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBwsspn\fR(\fBconst wchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBwscspn\fR(\fBconst wchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR);
.fi

.LP
.nf
\fBwchar_t *\fBwstok\fR(\fBwchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR);
.fi

.LP
.nf
\fBwchar_t *\fBwindex\fR(\fBconst wchar_t *\fIws\fR, \fBwchar_t\fR \fIwc\fR);
.fi

.LP
.nf
\fBwchar_t *\fBwrindex\fR(\fBconst wchar_t *\fIws\fR, \fBwchar_t\fR \fIwc\fR);
.fi

.SS "ISO C++"
.LP
.nf
#include <wchar.h>

\fBconst wchar_t *\fBwcschr\fR(\fBconst wchar_t *\fIws\fR, \fBwchar_t\fR \fIwc\fR);
.fi

.LP
.nf
\fBconst wchar_t *\fBwcspbrk\fR(\fBconst wchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR);
.fi

.LP
.nf
\fBconst wchar_t *\fBwcsrchr\fR(\fBconst wchar_t *\fIws\fR, \fBwchar_t\fR \fIwc\fR);
.fi

.LP
.nf
#include <cwchar>

\fBwchar_t *std::\fBwcschr\fR(\fBwchar_t *\fIws\fR, \fBwchar_t\fR \fIwc\fR);
.fi

.LP
.nf
\fBwchar_t *std::\fBwcspbrk\fR(\fBwchar_t *\fIws1\fR, \fBconst wchar_t *\fIws2\fR);
.fi

.LP
.nf
\fBwchar_t *std::\fBwcsrchr\fR(\fBwchar_t *\fIws\fR, \fBwchar_t\fR \fIwc\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions operate on wide-character strings terminated by
.B wchar_t
.I NULL
characters. During appending or copying, these
routines do not check for an overflow condition of the receiving string. In
the following,
.IR ws ,
.IR ws1 ,
and
.I ws2
point to wide-character
strings terminated by a
.BR "wchar_t NULL" .
.SS "wcscat(\|), wscat(\|)"
.sp
.LP
The
.B wcscat()
and
.B wscat()
functions append a copy of the
wide-character string pointed to by
.I ws2
(including the terminating null
wide-character code) to the end of the wide-character string pointed to by
.IR ws1 .
The initial wide-character code of
.I ws2
overwrites the null
wide-character code at the end of
.IR ws1 .
If copying takes place between
objects that overlap, the behavior is undefined. Both functions return
.IR s1 ;
no return value is reserved to indicate an error.
.SS "wcsncat(\|), wsncat(\|)"
.sp
.LP
The
.B wcsncat()
and
.B wsncat()
functions append not more than
.I n
wide-character codes (a null wide-character code and wide-character
codes that follow it are not appended) from the array pointed to by \fIws2\fR
to the end of the wide-character string pointed to by
.IR ws1 .
The initial
wide-character code of
.I ws2
overwrites the null wide-character code at
the end of
.IR ws1 .
A terminating null wide-character code is always
appended to the result. Both functions return
.IR ws1 ;
no return value is
reserved to indicate an error.
.SS "wcscmp(\|), wscmp(\|)"
.sp
.LP
The
.B wcscmp()
and
.B wscmp()
functions compare the wide-character
string pointed to by
.I ws1
to the wide-character string pointed to by
.IR ws2 .
The sign of a non-zero return value is determined by the sign of
the difference between the values of the first pair of wide-character codes
that differ in the objects being compared. Upon completion, both functions
return an integer greater than, equal to, or less than zero, if the
wide-character string pointed to by
.I ws1
is greater than, equal to, or
less than the wide-character string pointed to by
.IR ws2 .
.SS "wcsncmp(\|), wsncmp(\|)"
.sp
.LP
The
.B wcsncmp()
and
.B wsncmp()
functions compare not more than
.I n
wide-character codes (wide-character codes that follow a null wide
character code are not compared) from the array pointed to by
.I ws1
to
the array pointed to by
.IR ws2 .
The sign of a non-zero return value is
determined by the sign of the difference between the values of the first pair
of wide-character codes that differ in the objects being compared. Upon
successful completion, both functions return an integer greater than, equal
to, or less than zero, if the possibly null-terminated array pointed to by
.I ws1
is greater than, equal to, or less than the possibly
null-terminated array pointed to by
.IR ws2 .
.SS "wcscpy(\|), wscpy(\|)"
.sp
.LP
The
.B wcscpy()
and
.B wscpy()
functions copy the wide-character
string pointed to by
.I ws2
(including the terminating null wide-character
code) into the array pointed to by
.IR ws1 .
If copying takes place between
objects that overlap, the behavior is undefined. Both functions return
.IR ws1 ;
no return value is reserved to indicate an error.
.SS "wcsncpy(\|), wsncpy(\|)"
.sp
.LP
The
.B wcsncpy()
and
.B wsncpy()
functions  copy not more than
.IR n
wide-character codes (wide-character codes that follow a null wide character
code are not copied) from the array pointed to by
.I ws2
to the array
pointed to by
.IR ws1 .
If copying takes place between objects that overlap,
the behavior is undefined. If the array pointed to by
.I ws2
is a
wide-character string that is shorter than
.I n
wide-character codes, null
wide-character codes are appended to the copy in the array pointed to by
.IR ws1 ,
until a total
.I n
wide-character codes are written. Both
functions return
.IR " ws1" ;
no return value is reserved to indicate an
error.
.SS "wcslen(\|), wslen(\|)"
.sp
.LP
The
.B wcslen()
and
.B wslen()
functions compute the number of
wide-character codes in the wide-character string to which
.I ws
points,
not including the terminating null wide-character code. Both functions return
.IR ws ;
no return value is reserved to indicate an error.
.SS "wcschr(\|), wschr(\|)"
.sp
.LP
The
.B wcschr()
and
.B wschr()
functions locate the first occurrence
of
.I wc
in the wide-character string pointed to by
.IR ws .
The value of
.I wc
must be a character representable as a type
.B wchar_t
and must
be a wide-character code corresponding to a valid character in the current
locale. The terminating null wide-character code is considered to be part of
the wide-character string. Upon completion, both functions return a pointer
to the wide-character code, or a null pointer if the wide-character code is
not found.
.SS "wcsrchr(\|), wsrchr(\|)"
.sp
.LP
The
.B wcsrchr()
and
.B wsrchr()
functions locate the last occurrence
of
.I wc
in the wide-character string pointed to by
.IR ws .
The value of
.I wc
must be a character representable as a type
.B wchar_t
and must
be a wide-character code corresponding to a valid character in the current
locale. The terminating null wide-character code is considered to be part of
the wide-character string. Upon successful completion, both functions return
a pointer to the wide-character code, or a null pointer if
.I wc
does not
occur in the wide-character string.
.SS "windex(\|), wrindex(\|)"
.sp
.LP
The
.B windex()
and
.B wrindex()
functions behave the same as
.B wschr()
and
.BR wsrchr() ,
respectively.
.SS "wcspbrk(\|), wspbrk(\|)"
.sp
.LP
The
.B wcspbrk()
and
.B wspbrk()
functions locate the first occurrence
in the wide character string pointed to by
.I ws1
of any wide-character
code from the wide-character string pointed to by
.IR ws2 .
Upon successful
completion, the function returns a pointer to the wide-character code, or a
null pointer if no wide-character code from
.I ws2
occurs in
.IR ws1 .
.SS "wcswcs(\|)"
.sp
.LP
The
.B wcswcs()
function locates the first occurrence in the
wide-character string pointed to by
.I ws1
of the sequence of
wide-character codes (excluding the terminating null wide-character code) in
the wide-character string pointed to by
.IR ws2 .
Upon successful
completion, the function returns a pointer to the located wide-character
string, or a null pointer if the wide-character string is not found. If
.I ws2
points to a wide-character string with zero length, the function
returns
.IR ws1 .
.SS "wcsspn(\|), wsspn(\|)"
.sp
.LP
The
.B wcsspn()
and
.B wsspn()
functions compute the length of the
maximum initial segment of the wide-character string pointed to by \fIws1\fR
which consists entirely of wide-character codes from the wide-character
string pointed to by
.IR ws2 .
Both functions return the length
.IR ws1 ;
no return value is reserved to indicate an error.
.SS "wcscspn(\|), wscspn(\|)"
.sp
.LP
The
.B wcscspn()
and
.B wscspn()
functions compute the length of the
maximum initial segment of the wide-character string pointed to by \fIws1\fR
which consists entirely of wide-character codes
.I not
from the
wide-character string pointed to by
.IR ws2 .
Both functions return the
length of the initial substring of
.IR ws1 ;
no return value is reserved to
indicate an error.
.SS "wcstok(\|), wstok(\|)"
.sp
.LP
A sequence of calls to the
.B wcstok()
and
.B wstok()
functions break
the wide-character string pointed to by
.I ws1
into a sequence of tokens,
each of which is delimited by a wide-character code from the wide-character
string pointed to by
.IR ws2 .
.SS "Default and other standards"
.sp
.LP
The third argument points to a caller-provided
.B wchar_t
pointer into
which the
.B wcstok()
function stores information necessary for it to
continue scanning the same wide-character string. This argument is not
available with the XPG4 and SUS versions of
.BR wcstok() ,
nor is it
available with the
.B wstok()
function.  See
.BR standards (5).
.sp
.LP
The first call in the sequence has
.I ws1
as its first argument, and is
followed by calls with a null pointer as their first argument. The separator
string pointed to by
.I ws2
may be different from call to call.
.sp
.LP
The first call in the sequence searches the wide-character string pointed to
by
.I ws1
for the first wide-character code that is
.I not
contained in
the current separator string pointed to by
.IR ws2 .
If no such
wide-character code is found, then there are no tokens in the wide-character
string pointed to by
.IR ws1 ,
and
.B wcstok()
and
.B wstok()
return a
null pointer. If such a wide-character code is found, it is the start of the
first token.
.sp
.LP
The
.B wcstok()
and
.B wstok()
functions then search from that point
for a wide-character code that
.I is
contained in the current separator
string. If no such wide-character code is found, the current token extends to
the end of the wide-character string pointed to by
.IR ws1 ,
and subsequent
searches for a token will return a null pointer. If such a wide-character
code is found, it is overwritten by a null wide character, which terminates
the current token. The
.B wcstok()
and
.B wstok()
functions save a
pointer to the following wide-character code, from which the next search for
a token will start.
.sp
.LP
Each subsequent call, with a null pointer as the value of the first
argument, starts searching from the saved pointer and behaves as described
above.
.sp
.LP
Upon successful completion, both functions return a pointer to the first
wide-character code of a token. Otherwise, if there is no token, a null
pointer is returned.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
CSIEnabled
_
Interface StabilitySee NOTES.
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR malloc (3C),
.BR string (3C),
.BR wcswidth (3C),
.BR wcwidth (3C),
.BR attributes (5),
.BR standards (5)
.SH NOTES
.sp
.LP
The
.BR wcscat() ,
.BR wcsncat() ,
.BR wcscmp() ,
.BR wcsncmp() ,
.BR wcscpy() ,
.BR wcsncpy() ,
.BR wcslen() ,
.BR wcschr() ,
.BR wcsrchr() ,
.BR wcspbrk() ,
.BR wcswcs() ,
.BR wcsspn() ,
.BR wcscspn() ,
and
.B wcstok()
functions are Standard. The
.BR wscat() ,
.BR wsncat() ,
.BR wscmp() ,
.BR wsncmp() ,
.BR wscpy() ,
.BR wsncpy() ,
.BR wslen() ,
.BR wschr() ,
.BR wsrchr() ,
.BR wspbrk() ,
.BR wsspn() ,
.BR wstok() ,
.BR windex() ,
and
.B wrindex()
functions
are Stable.
