'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1994 Man-cgi 1.15, Panagiotis Christias (christia@softlab.ntua.gr)
.\" Portions Copyright (c) 1996-2008 Modified for NetBSD by Kimmo Suominen (kimmo@suominen.com)
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH string 3C "1 Aug 2008" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
string, strcasecmp, strncasecmp, strcat, strncat, strlcat, strchr, strrchr,
strcmp, strncmp, strcpy, strncpy, strlcpy, strcspn, strspn, strdup, strlen,
strnlen, strpbrk, strsep, strstr, strtok, strtok_r \- string operations
.SH SYNOPSIS
.LP
.nf
#include <strings.h>

\fBint\fR \fBstrcasecmp\fR(\fBconst char *\fIs1\fR, \fBconst char *\fIs2\fR);
.fi

.LP
.nf
\fBint\fR \fBstrncasecmp\fR(\fBconst char *\fIs1\fR, \fBconst char *\fIs2\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
#include <string.h>

\fBchar *\fBstrcat\fR(\fBchar *restrict\fR \fIs1\fR, \fBconst char *restrict\fR \fIs2\fR);
.fi

.LP
.nf
\fBchar *\fBstrncat\fR(\fBchar *restrict\fR \fIs1\fR, \fBconst char *restrict\fR \fIs2\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBstrlcat\fR(\fBchar *\fIdst\fR, \fBconst char *\fIsrc\fR, \fBsize_t\fR \fIdstsize\fR);
.fi

.LP
.nf
\fBchar *\fBstrchr\fR(\fBconst char *\fIs\fR, \fBint\fR \fIc\fR);
.fi

.LP
.nf
\fBchar *\fBstrrchr\fR(\fBconst char *\fIs\fR, \fBint\fR \fIc\fR);
.fi

.LP
.nf
\fBint\fR \fBstrcmp\fR(\fBconst char *\fIs1\fR, \fBconst char *\fIs2\fR);
.fi

.LP
.nf
\fBint\fR \fBstrncmp\fR(\fBconst char *\fIs1\fR, \fBconst char *\fIs2\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBchar *\fBstrcpy\fR(\fBchar *restrict\fR \fIs1\fR, \fBconst char *restrict\fR \fIs2\fR);
.fi

.LP
.nf
\fBchar *\fBstrncpy\fR(\fBchar *restrict\fR \fIs1\fR, \fBconst char *restrict\fR \fIs2\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBstrlcpy\fR(\fBchar *\fIdst\fR, \fBconst char *\fIsrc\fR, \fBsize_t\fR \fIdstsize\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBstrcspn\fR(\fBconst char *\fIs1\fR, \fBconst char *\fIs2\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBstrspn\fR(\fBconst char *\fIs1\fR, \fBconst char *\fIs2\fR);
.fi

.LP
.nf
\fBchar *\fBstrdup\fR(\fBconst char *\fIs1\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBstrlen\fR(\fBconst char *\fIs\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBstrnlen\fR(\fBconst char *\fIs\fR, \fBsize_t\fR \fIn\fR);
.fi

.LP
.nf
\fBchar *\fBstrpbrk\fR(\fBconst char *\fIs1\fR, \fBconst char *\fIs2\fR);
.fi

.LP
.nf
\fBchar *\fBstrsep\fR(\fBchar **\fIstringp\fR, \fBconst char *\fIdelim\fR);
.fi

.LP
.nf
\fBchar *\fBstrstr\fR(\fBconst char *\fIs1\fR, \fBconst char *\fIs2\fR);
.fi

.LP
.nf
\fBchar *\fBstrtok\fR(\fBchar *restrict\fR \fIs1\fR, \fBconst char *restrict\fR \fIs2\fR);
.fi

.LP
.nf
\fBchar *\fBstrtok_r\fR(\fBchar *\fIs1\fR, \fBconst char *\fIs2\fR, \fBchar **\fIlasts\fR);
.fi

.SS "ISO C++"
.LP
.nf
#include <string.h>

\fBconst char *\fBstrchr\fR(\fBconst char *\fIs\fR, \fBint\fR \fIc\fR);
.fi

.LP
.nf
\fBconst char *\fBstrpbrk\fR(\fBconst char *\fIs1\fR, \fBconst char *\fIs2\fR);
.fi

.LP
.nf
\fBconst char *\fBstrrchr\fR(\fBconst char *\fIs\fR, \fBint\fR \fIc\fR);
.fi

.LP
.nf
\fBconst char *\fBstrstr\fR(\fBconst char *\fIs1\fR, \fBconst char *\fIs2\fR);
.fi

.LP
.nf
#include <cstring>

\fBchar *std::\fBstrchr\fR(\fBchar *\fIs\fR, \fBint\fR \fIc\fR);
.fi

.LP
.nf
\fBchar *std::\fBstrpbrk\fR(\fBchar *\fIs1\fR, \fBconst char *\fIs2\fR);
.fi

.LP
.nf
\fBchar *std::\fBstrrchr\fR(\fBchar *\fIs\fR, \fBint\fR \fIc\fR);
.fi

.LP
.nf
\fBchar *std::\fBstrstr\fR(\fBchar *\fIs1\fR, \fBconst char *\fIs2\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The arguments
.IR s ,
.IR s1 ,
and
.I s2
point to strings (arrays of
characters terminated by a null character). The
.BR strcat() ,
.BR strncat() ,
.BR strlcat() ,
.BR strcpy() ,
.BR strncpy() ,
.BR strlcpy() ,
.BR strsep() ,
.BR strtok() ,
and
.BR strtok_r()
functions all alter their first argument. Additionally, the \fBstrcat()\fR
and
.B strcpy()
functions do not check for overflow of the array.
.SS "\fBstrcasecmp()\fR, \fBstrncasecmp()\fR"
.sp
.LP
The
.B strcasecmp()
and
.B strncasecmp()
functions are
case-insensitive versions of
.B strcmp()
and
.BR strncmp()
respectively, described below.  They assume the
.B ASCII
character set
and ignore differences in case when comparing lower and upper case
characters.
.SS "\fBstrcat()\fR, \fBstrncat()\fR, \fBstrlcat()\fR"
.sp
.LP
The
.B strcat()
function appends a copy of string
.IR s2 ,
including
the terminating null character, to the end of string
.IR s1 .
The
\fBstrncat()\fR function appends at most \fIn\fR characters. Each returns a
pointer to the null-terminated result. The initial character of  \fIs2\fR
overrides the null character at the end of
.IR s1 .
If copying takes place
between objects that overlap, the behavior of
.BR strcat() ,
.BR strncat() ,
and
.B strlcat()
is undefined.
.sp
.LP
The
.B strlcat()
function appends at most
(\fIdstsize\fR-\fBstrlen\fR(\fIdst\fR)-1) characters of \fIsrc\fR to
\fIdst\fR (\fIdstsize\fR being the size of the string buffer
.IR dst ).
If the string pointed to by
.I dst
contains a null-terminated string that
fits into
.I dstsize
bytes when
.B strlcat()
is called, the string
pointed to by
.I dst
will be a null-terminated string that fits in
\fIdstsize\fR bytes (including the terminating null character) when it
completes, and the initial character of
.I src
will override the null
character at the end of
.IR dst .
If the string pointed to by
.I dst
is
longer than
.I dstsize
bytes when
.B strlcat()
is called, the string
pointed to by
.I dst
will not be changed. The function returns
\fBmin\fR{\fIdstsize\fR,\fBstrlen\fR(\fIdst\fR)}+\fBstrlen\fR(\fIsrc\fR).
Buffer overflow can be checked as follows:
.sp
.in +2
.nf
if (strlcat(dst, src, dstsize) >= dstsize)
        return \(mi1;
.fi
.in -2

.SS "\fBstrchr()\fR, \fBstrrchr()\fR"
.sp
.LP
The
.B strchr()
function returns a pointer to the first occurrence of
\fIc\fR (converted to a
.BR char )
in string
.IR s ,
or a null pointer if
\fIc\fR does not occur in the string. The \fBstrrchr()\fR function returns a
pointer to the last occurrence of
.IR c .
The null character terminating a
string is considered to be part of the string.
.SS "\fBstrcmp()\fR, \fBstrncmp()\fR"
.sp
.LP
The
.B strcmp()
function compares two strings byte-by-byte, according to
the ordering of your machine's character set.  The function returns an
integer greater than, equal to, or less than 0, if  the string pointed to by
\fIs1\fR is greater than, equal to, or less than the string pointed to by
\fIs2\fR respectively. The sign of a non-zero return value is determined  by
the sign of the difference between the values of the first pair of bytes
that differ in the strings being compared. The
.B strncmp()
function
makes the same comparison but looks at a maximum of
.I n
bytes. Bytes
following a null byte are not compared.
.SS "\fBstrcpy()\fR, \fBstrncpy()\fR, \fBstrlcpy()\fR"
.sp
.LP
The
.B strcpy()
function copies string
.I s2
to
.IR s1 ,
including
the terminating null character, stopping after the null character has been
copied. The
.B strncpy()
function copies exactly
.I n
bytes,
truncating
.I s2
or adding null characters to
.I s1
if necessary. The
result will not be null-terminated if the length of
.I s2
is
.I n
or
more. Each function returns
.IR s1 .
If copying takes place between
objects that overlap, the behavior of
.BR strcpy() ,
.BR strncpy() ,
and
\fBstrlcpy()\fR is undefined.
.sp
.LP
The
.B strlcpy()
function copies  at most \fIdstsize\fR\(mi1 characters
(\fIdstsize\fR being the  size of the  string buffer
.IR dst )
from
\fIsrc\fR to
.IR dst ,
truncating
.I src
if necessary.  The result is
always null-terminated. The function returns \fBstrlen\fR(\fIsrc\fR). Buffer
overflow can be checked as follows:
.sp
.in +2
.nf
if (strlcpy(dst, src, dstsize) >= dstsize)
        return \(mi1;
.fi
.in -2

.SS "\fBstrcspn()\fR, \fBstrspn()\fR"
.sp
.LP
The
.B strcspn()
function returns the length of the initial segment of
string
.I s1
that consists entirely of characters not from string
.IR s2 .
The
.B strspn()
function returns the length of the initial
segment of string
.I s1
that consists entirely of characters from string
.IR s2 .
.SS "\fBstrdup()\fR"
.sp
.LP
The
.B strdup()
function returns a pointer to a new string that is a
duplicate of the string pointed to by
.IR s1 .
The returned pointer can be
passed to
.BR free() .
The space for the new string is obtained using
.BR malloc (3C).
If the new string cannot be created, a null pointer is
returned and
.B errno
may be set to
.B ENOMEM
to indicate that the
storage space available is insufficient.
.SS "\fBstrlen()\fR, \fBstrnlen()\fR"
.sp
.LP
The
.B strlen()
function returns the number of bytes in
.IR s ,
not
including the terminating null character.
.sp
.LP
The
.B strnlen()
function returns the smaller of
.I n
or the number
of bytes in
.IR s ,
not including the terminating null character. The
\fBstrnlen()\fR function never examines more than \fIn\fR bytes of the
string pointed to by
.IR s .
.SS "\fBstrpbrk()\fR"
.sp
.LP
The
.B strpbrk()
function returns a pointer to the first occurrence in
string
.I s1
of any character from string
.IR s2 ,
or a null pointer if
no character from
.I s2
exists in
.IR s1 .
.SS "\fBstrsep()\fR"
.sp
.LP
The
.B strsep()
function locates, in the null-terminated string
referenced by *\fIstringp\fR, the first occurrence of any character in the
string
.I delim
(or the terminating `\e0' character) and replaces it with
a `\e0'.  The location of the next character after the delimiter character
(or
.IR NULL ,
if the end of the string was reached) is stored in
*\fIstringp\fR. The original value of *\fIstringp\fR is returned.
.sp
.LP
An ``empty'' field (one caused by two adjacent delimiter characters) can be
detected by comparing the location referenced by the pointer returned by
\fBstrsep()\fR to `\e0'.
.sp
.LP
If *\fIstringp\fR is initially
.IR NULL ,
\fBstrsep()\fR returns
.IR NULL .
.SS "\fBstrstr()\fR"
.sp
.LP
The
.B strstr()
function locates the first occurrence of the string
\fIs2\fR (excluding the terminating null character) in string \fIs1\fR and
returns a pointer to the located string, or a null pointer if the string is
not found. If
.I s2
points to a string with zero length (that is, the
string \fB""\fR), the function returns  \fIs1\fR.
.SS "\fBstrtok()\fR"
.sp
.LP
A sequence of calls to
.B strtok()
breaks the string pointed to by
\fIs1\fR into a sequence of tokens, each of which is delimited by a byte
from the string pointed to by
.IR s2 .
The first call in the sequence has
\fIs1\fR as its first argument, and is followed by calls with a null pointer
as their first argument. The separator string pointed to by
.I s2
can be
different from call to call.
.sp
.LP
The first call in the sequence searches the string pointed to by
.IR s1
for the first byte that is not contained in the current separator string
pointed to by
.IR s2 .
If no such byte is found, then there are no tokens
in the string pointed to by
.I s1
and
.B strtok()
returns a null
pointer. If such a byte is found, it is the start of the first token.
.sp
.LP
The
.B strtok()
function then searches from there for a byte that is
contained in the current separator string. If no such byte is found, the
current token extends to the end of the string pointed to by
.IR s1 ,
and
subsequent searches for a token return a null pointer. If such a byte is
found, it is overwritten by a null byte that terminates the current token.
The
.B strtok()
function saves a pointer to the following byte in
thread-specific data, from which the next search for a token starts.
.sp
.LP
Each subsequent call, with a null pointer as the value of the first
argument, starts searching from the saved pointer and behaves as described
above.
.sp
.LP
See Example 1, 2, and 3 in the
.B EXAMPLES
section for examples of
\fBstrtok()\fR usage and the explanation in
.BR NOTES .
.SS "\fBstrtok_r()\fR"
.sp
.LP
The
.B strtok_r()
function considers the null-terminated string \fIs1\fR
as a sequence of zero or more text tokens separated by spans of one or more
characters from the separator string
.IR s2 .
The argument
.IR lasts
points to a user-provided pointer which points to stored information
necessary for
.B strtok_r()
to continue scanning the same string.
.sp
.LP
In the first call to
.BR strtok_r() ,
\fIs1\fR points to a null-terminated
string,
.I s2
to a null-terminated string of separator characters, and
the value pointed to by
.I lasts
.RB "is ignored. The" " strtok_r()"
function returns a pointer to the first character of the first token, writes
a null character into
.I s1
immediately following the returned token, and
updates the pointer to which
.I lasts
points.
.sp
.LP
In subsequent calls,
.I s1
is a null pointer and
.I lasts
is
unchanged from the previous call so that subsequent calls move through the
string
.IR s1 ,
returning successive tokens until no tokens remain. The
separator string
.I s2
can be different from call to call. When no token
remains in
.IR s1 ,
a null pointer is returned.
.sp
.LP
See Example 3 in the
.B EXAMPLES
section for an example of
\fBstrtok_r()\fR usage and the explanation in
.BR NOTES .
.SH EXAMPLES
.LP
\fBExample 1\fR Search for word separators.
.sp
.LP
The following example searches for tokens separated by space characters.

.sp
.in +2
.nf
#include <string.h>
\&...
char *token;
char line[] = "LINE TO BE SEPARATED";
char *search = " ";

/* Token will point to "LINE". */
token = strtok(line, search);

/* Token will point to "TO". */
token = strtok(NULL, search);
.fi
.in -2

.LP
\fBExample 2\fR Break a Line.
.sp
.LP
The following example uses strtok to break a line into two character
strings separated by any combination of SPACEs, TABs, or NEWLINEs.

.sp
.in +2
.nf
#include <string.h>
\&...
struct element {
       char *key;
       char *data;
};
\&...
char line[LINE_MAX];
char *key, *data;
\&...
key = strtok(line, " \en");
data = strtok(NULL, " \en");
.fi
.in -2

.LP
\fBExample 3\fR Search for tokens.
.sp
.LP
The following example uses both
.B strtok()
and
.B strtok_r()
to
search for tokens separated by one or more characters from the string
pointed to by the second argument, "/".

.sp
.in +2
.nf
#define __EXTENSIONS__
#include <stdio.h>
#include <string.h>

int
main() {
        char *buf="5/90/45";
        char *token;
        char *lasts;

        printf("tokenizing \e"%s\e" with strtok():\en", buf);
        if ((token = strtok(buf, "/")) != NULL) {
                printf("token = "%s\e"\en", token);
                while ((token = strtok(NULL, "/")) != NULL) {
                        printf("token = \e"%s\e"\en", token);
                }
        }

        buf = "//5//90//45//";
        printf("\entokenizing \e"%s\e" with strtok_r():\en", buf);
        if ((token = strtok_r(buf, "/", &lasts)) != NULL) {
                printf("token = \e"%s\e"\en", token);
                while ((token = strtok_r(NULL, "/", &lasts)) != NULL) {
                        printf("token = \e"%s\e"\en", token);
                }
        }
}
.fi
.in -2

.sp
.LP
When compiled and run, this example produces the following output:

.sp
.in +2
.nf
tokenizing "5/90/45" with \fBstrtok()\fR:
token = "5"
token = "90"
token = "45"

tokenizing "//5//90//45//" with \fBstrtok_r()\fR:
token = "5"
token = "90"
token = "45"
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelSee below.
_
StandardSee below.
.TE

.sp
.LP
The
.B strtok()
and
.B strdup()
functions are MT-Safe. The remaining
functions are Async-Signal-Safe.
.sp
.LP
For all except
.BR strlcat() ,
.BR strlcpy() ,
and
.BR strsep() ,
see
.BR standards (5).
.SH SEE ALSO
.sp
.LP
.BR malloc (3C),
.BR setlocale (3C),
.BR strxfrm (3C),
.BR attributes (5),
.BR standards (5)
.SH NOTES
.sp
.LP
When compiling multithreaded applications, the
.B _REENTRANT
flag must
be defined on the compile line. This flag should only be used in
multithreaded applications.
.sp
.LP
A single-threaded application can gain access to
.B strtok_r()
only by
defining
.B __EXTENSIONS__
or by defining
.B _POSIX_C_SOURCE
to a
value greater than or equal to 199506L.
.sp
.LP
All of these functions assume the default locale ``C.'' For some locales,
\fBstrxfrm\fR(3C) should be applied to the strings before they are passed to
the functions.
.sp
.LP
The
.B strtok()
function is safe to use in multithreaded applications
because it saves its internal state in a thread-specific data area.
However, its use is discouraged, even for single-threaded applications. The
\fBstrtok_r()\fR function should be used instead.
.sp
.LP
Do not pass the address of a character string literal as the argument
\fIs1\fR to either \fBstrtok()\fR or
.BR strtok_r() .
Similarly, do not
pass a pointer to the address of a character string literal as the argument
\fIstringp\fR to
.BR strsep() .
These functions can modify the storage
pointed to by
.I s1
in the case of
.B strtok()
and
.B strtok_r()
or
*\fIstringp\fR in the case of
.BR strsep() .
The C99 standard specifies
that attempting to modify the storage occupied by a string literal results
in undefined behavior. This allows compilers (including
.B gcc
and the
Sun Studio compilers when the
.B -xstrconst
flag is used) to place string
literals in read-only memory. Note that in Example 1 above, this problem is
avoided because the variable
.I line
is declared as a writable array of
type
.B char
that is initialized by a string literal rather than a
pointer to
.B char
that points to a string literal.
