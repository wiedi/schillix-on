'\" te
.\" Copyright 1989 AT&T Copyright (c) 2005, Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH dlopen 3C "4 Feb 2005" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
dlopen, dlmopen \- gain access to an executable object file
.SH SYNOPSIS
.LP
.nf
#include <dlfcn.h>
#include <link.h>

\fBvoid *\fR \fBdlopen\fR(\fBconst char *\fIpathname\fR, \fBint\fR \fImode\fR);
.fi

.LP
.nf
\fBvoid *\fR \fBdlmopen\fR(\fBLmid_t\fR \fIlmid\fR, \fBconst char *\fIpathname\fR, \fBint\fR \fImode\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B dlopen()
function makes an executable object file available to a
running process.
.B dlopen()
returns to the process a
.I handle
that the
process can use on subsequent calls to
.BR dlsym (3C),
.BR dladdr (3C),
.BR dlinfo (3C),
and \fBdlclose\fR(3C). The value of this
.I handle
should
not be interpreted in any way by the process. The
.I pathname
argument is
the path name of the object to be opened. A path name containing an embedded
\fB\&'/'\fR is interpreted as an absolute path or relative to the current
directory. Otherwise, the set of search paths currently in effect by the
runtime linker are used to locate the specified file. See
.BR NOTES .
.sp
.LP
The
.B dlopen()
function also loads any dependencies recorded within
.IR pathname .
These dependencies are searched in the order in which the
dependencies were loaded to locate any additional dependencies. This process
continues until all the dependencies of
.I pathname
are loaded. This
dependency tree is referred to as a group.
.sp
.LP
If the value of
.I pathname
is
.BR 0 ,
.B dlopen()
provides a
.I handle
on a set of global symbol objects. These objects consist of the
original program image file, any dependencies loaded at program startup, and
any objects loaded using
.B dlopen()
with the
.B RTLD_GLOBAL
flag.
Because the latter set of objects can change during process execution, the set
identified by
.I handle
can also change dynamically.
.sp
.LP
The
.I mode
argument describes how
.B dlopen()
operates on
.I pathname
with respect to the processing of reference relocations. The
.I mode
also affects the scope of visibility of the symbols provided by
.I pathname
and its dependencies. This visibility can affect how the
resulting
.I handle
is used.
.sp
.LP
When an object is loaded, the object can contain references to symbols whose
addresses are not known until the object is loaded. These references must be
relocated before the symbols can be accessed. References are categorized as
either
.B immediate
or
.BR lazy .
Immediate references are typically
references to data items used by the object code. Immediate references include
pointers to functions and calls to functions made from position-dependent
shared objects. Lazy references are typically calls to global functions that
are made from position-independent shared objects. The
.I mode
argument
governs when these references take place. The
.I mode
argument can be one
of the following values:
.sp
.ne 2
.mk
.na
.B RTLD_LAZY
.ad
.RS 13n
.rt
Only immediate symbol references are relocated when the object is first
loaded. Lazy references are not relocated until a given function is called for
the first time. This value for
.I mode
should improve performance, since a
process might not require all lazy references in any given object. This
behavior mimics the normal loading of dependencies during process
initialization. See
.BR NOTES .
.RE

.sp
.ne 2
.mk
.na
.B RTLD_NOW
.ad
.RS 13n
.rt
All necessary relocations are performed when the object is first loaded. This
process might waste some processing if relocations are performed for lazy
references that are never used. However, this mode ensures that when an object
is loaded, all symbols referenced during execution are available. This
behavior mimics the loading of dependencies when the environment variable
.B LD_BIND_NOW
is in effect.
.RE

.sp
.LP
See the
.I "Linker and Libraries Guide"
for more information about symbol
references.
.sp
.LP
The visibility of symbols that are available for relocation can be affected
by
.IR mode .
To specify the scope of visibility for symbols that are loaded
with a
.B dlopen()
call,
.I mode
should be a bitwise-inclusive OR with
one of the following values:
.sp
.ne 2
.mk
.na
.B RTLD_GLOBAL
.ad
.RS 15n
.rt
The object's global symbols are made available for the relocation processing
of any other object. In addition, symbol lookup using \fBdlopen(0,\fR
\fImode\fB)\fR and an associated \fBdlsym()\fR allows objects that are
loaded with
.B RTLD_GLOBAL
to be searched.
.RE

.sp
.ne 2
.mk
.na
.B RTLD_LOCAL
.ad
.RS 15n
.rt
The object's globals symbols are only available for the relocation processing
of other objects that include the same group.
.RE

.sp
.LP
The program image file and any objects loaded at program startup have the
mode
.BR RTLD_GLOBAL .
The mode
.B RTLD_LOCAL
is the default mode for any
objects that are acquired with
.BR dlopen() .
A local object can be a
dependency of more then one group. Any object of mode
.B RTLD_LOCAL
that is
referenced as a dependency of an object of mode
.B RTLD_GLOBAL
is promoted
to
.BR RTLD_GLOBAL .
In other words, the
.B RTLD_LOCAL
mode is ignored.
.sp
.LP
Any object loaded by
.B dlopen()
that requires relocations against global
symbols can reference the symbols in any
.B RTLD_GLOBAL
object. Objects of
this mode are at least the program image file and any objects loaded at
program startup. A loaded object can also reference symbols from itself, and
from any dependencies the object references. However, the
.I mode
parameter
can also be a bitwise-inclusive
.B OR
with one of the following values to
affect the scope of symbol availability:
.sp
.ne 2
.mk
.na
.B RTLD_GROUP
.ad
.RS 15n
.rt
Only symbols from the associated group are made available for relocation. A
group is established from the defined object and all the dependencies of that
object. A group must be completely self-contained. All dependency
relationships between the members of the group must be sufficient to satisfy
the relocation requirements of each object that defines the group.
.RE

.sp
.ne 2
.mk
.na
.B RTLD_PARENT
.ad
.RS 15n
.rt
The symbols of the object initiating the
.B dlopen()
call are made
available to the objects obtained by
.BR dlopen() .
This option is useful
when hierarchical
.B dlopen()
families are created. Although the parent
object can supply symbols for the relocation of this object, the parent object
is not available to
.B dlsym()
through the returned
.IR handle .
.RE

.sp
.ne 2
.mk
.na
.B RTLD_WORLD
.ad
.RS 15n
.rt
Only symbols from
.B RTLD_GLOBAL
objects are made available for
relocation.
.RE

.sp
.LP
The default modes for
.B dlopen()
are both
.B RTLD_WORLD
and
.BR RTLD_GROUP .
If an object is requires additional modes, the \fImode\fR
parameter can be the bitwise-inclusive OR of the required modes together with
the default modes.
.sp
.LP
The following modes provide additional capabilities outside of relocation
processing:
.sp
.ne 2
.mk
.na
.B RTLD_NODELETE
.ad
.RS 17n
.rt
The specified object is tagged to prevent its deletion from the address space
as part of a
.BR dlclose() .
.RE

.sp
.ne 2
.mk
.na
.B RTLD_NOLOAD
.ad
.RS 17n
.rt
The specified object is not loaded as part of the
.BR dlopen() .
However, a
valid
.I handle
is returned if the object already exists as part of the
process address space. Additional modes can be specified as a
bitwise-inclusive OR with the present mode of the object and its dependencies.
The
.B RTLD_NOLOAD
mode provides a means of querying the presence or
promoting the modes of an existing dependency.
.RE

.sp
.LP
The default use of a
.I handle
with
.B dlsym()
allows a symbol search
to inspect all objects that are associated with the group of objects that are
loaded from
.BR dlopen() .
The
.I mode
parameter can also be a
bitwise-inclusive OR with the following value to restrict this symbol
search:
.sp
.ne 2
.mk
.na
.B RTLD_FIRST
.ad
.RS 14n
.rt
Use of this
.I handle
with
.BR dlsym() ,
restricts the symbol search to
the first object associated with the
.IR handle .
.RE

.sp
.LP
An object can be accessed from a process both with and without
.BR RTLD_FIRST .
Although the object will only be loaded once, two different
\fIhandle\fRs are created to provide for the different \fBdlsym()\fR
requirements.
.sp
.LP
The
.B dlmopen()
function is identical to
.BR dlopen() ,
except that an
identifying link-map ID
.I (lmid)
is provided. This link-map ID informs the
dynamic linking facilities upon which link-map list to load the object. See
the
.I "Linker and Libraries Guide"
for details about link-maps.
.sp
.LP
The
.I lmid
passed to
.B dlmopen()
identifies the link-map list on
.RB "which the object is loaded. This parameter can be any valid" " Lmid_t"
returned by
.B dlinfo()
or one of the following special values:
.sp
.ne 2
.mk
.na
.B LM_ID_BASE
.ad
.RS 15n
.rt
Load the object on the applications link-map list.
.RE

.sp
.ne 2
.mk
.na
.B LM_ID_LDSO
.ad
.RS 15n
.rt
Load the object on the dynamic linkers (\fBld.so.1\fR) link-map list.
.RE

.sp
.ne 2
.mk
.na
.B LM_ID_NEWLM
.ad
.RS 15n
.rt
Cause the object to create a new link-map list as part of loading. Objects
that are opened on a new link-map list must express all of their
dependencies.
.RE

.SH RETURN VALUES
.sp
.LP
The
.B dlopen()
function returns
.I NULL
if
.I pathname
cannot be
found, cannot be opened for reading, or is not a shared object or a
relocatable object.
.B dlopen()
also returns
.I NULL
if an error occurs
during the process of loading
.I pathname
or relocating its symbolic
references. See
.BR NOTES .
Additional diagnostic information is available
through
.BR dlerror() .
.SH USAGE
.sp
.LP
The
.B dlopen()
and
.B dlmopen()
functions are members of a family of
functions that give the user direct access to the dynamic linking facilities.
This family of functions is available only to dynamically-linked processes.
See the
.IR "Linker and Libraries Guide" .
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT\(miLevelMT\(miSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR ld (1),
.BR ld.so.1 (1),
.BR dladdr (3C),
.BR dlclose (3C),
.BR dldump (3C),
.BR dlerror (3C),
.BR dlinfo (3C),
.BR dlsym (3C),
.BR attributes (5),
.BR standards (5)
.sp
.LP
.I Linker and Libraries Guide
.SH NOTES
.sp
.LP
If
.I pathname
has dependencies on other objects, these objects are
automatically loaded by
.BR dlopen() .
The directory search path used to find
.I pathname
and any dependencies can be affected by setting the environment
variable
.BR LD_LIBRARY_PATH .
Any
.B LD_LIBRARY_PATH
variable is analyzed
once at process startup. The search path can also be affected from a runpath
setting within the object from which the call to
.B dlopen()
originates.
These search rules will only be applied to path names that do not contain an
embedded \fB\&'/'\fR. Objects whose names resolve to the same absolute path
name or relative path name can be opened any number of times using
.BR dlopen() .
However, the object that is referenced will only be loaded
once into the address space of the current process.
.sp
.LP
When loading shared objects, the application should open a specific version
of the shared object. Do not rely on the version of the shared object pointed
to by the symbolic link.
.sp
.LP
When building objects to be loaded on a new link-map list, some precautions
need to be taken. In general, all dependencies must be included when building
an object. Also, include
.B /usr/lib/libmapmalloc.so.1
before
.B /lib/libc.so.1
when building an object.
.sp
.LP
When an object is loaded on a new link-map list, the object is isolated from
the main running program. Certain global resources are only usable from one
link-map list. A few examples are the
.B sbrk()
based
.BR malloc() ,
.BR libthread() ,
and the signal vectors. Care must be taken not to use any
of these resources other than from the primary link-map list. These issues are
discussed in further detail in the
.IR "Linker and Libraries Guide" .
.sp
.LP
Some symbols defined in dynamic executables or shared objects can not be
available to the runtime linker. The symbol table created by
.B ld
for use
by the runtime linker might contain only a subset of the symbols that are
defined in the object.
.sp
.LP
As part of loading a new object, initialization code within the object is
called
.B before
the
.B dlopen()
returns. This initialization is user
code, and as such, can produce errors that can not be caught by
.BR dlopen() .
For example, an object loaded using
.B RTLD_LAZY
that
attempts to call a function that can not be located results in process
termination. Erroneous programming practices within the initialization code
can also result in process termination. The runtime linkers debugging facility
can offer help identifying these types of error. See the \fBLD_DEBUG\fR
environment variable of
.BR ld.so.1 (1).
.sp
.LP
Loading relocatable objects is an expensive operation that requires
converting the relocatable object into a shared object memory image. This
capability may be useful in a debugging environment, but is not recommended
for production software.
