'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH aiowait 3C "5 Feb 2008" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
aiowait \- wait for completion of asynchronous I/O operation
.SH SYNOPSIS
.LP
.nf
#include <sys/asynch.h>
#include <sys/time.h>

\fBaio_result_t *\fBaiowait\fR(\fBconst struct timeval *\fItimeout\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B aiowait()
function suspends the calling process until one of its
outstanding asynchronous I/O operations completes, providing a synchronous
method of notification.
.sp
.LP
If
.I timeout
is a non-zero pointer, it specifies a maximum interval to wait
for the completion of an asynchronous I/O operation. If
.I timeout
is a zero
pointer,
.B aiowait()
blocks indefinitely.  To effect a poll, the
\fItimeout\fR parameter should be non-zero, pointing to a zero-valued
\fItimeval\fR structure.
.sp
.LP
The
.B timeval
structure is defined in <\fBsys/time.h\fR> and contains the
following members:
.sp
.in +2
.nf
long  tv_sec;           /* seconds */
long  tv_usec;          /* and microseconds */
.fi
.in -2

.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B aiowait()
returns a pointer to the result
structure used when the completed asynchronous I/O operation was requested. Upon
failure,
.B aiowait()
returns \fB\(mi1\fR and sets
.B errno
to indicate
the error.
.B aiowait()
returns
.B 0
if the time limit expires.
.SH ERRORS
.sp
.LP
The
.B aiowait()
function will fail if:
.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The
.I timeout
argument points to an address outside the address space of
the requesting process.  See
.BR NOTES .
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 10n
.rt
The execution of
.B aiowait()
was interrupted by a signal.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
There are no outstanding asynchronous I/O requests.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.B tv_secs
member of the
.B timeval
structure pointed to by
\fItimeout\fR is less than 0 or the \fBtv_usecs\fR member is greater than the
number of seconds in a microsecond.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR aiocancel (3C),
.BR aioread (3C),
.BR attributes (5)
.SH NOTES
.sp
.LP
The
.B aiowait()
function is the only way to dequeue an asynchronous
notification. It can be used either inside a
.B SIGIO
signal handler or in
the main program. One
.B SIGIO
signal can represent several queued events.
.sp
.LP
Passing an illegal address as
.I timeout
will result in setting
.BR errno
to
.B EFAULT
only if detected by the application process.
