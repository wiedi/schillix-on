'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH getdate 3C "1 Nov 2003" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
getdate \- convert user format date and time
.SH SYNOPSIS
.LP
.nf
#include <time.h>

\fBstruct tm *\fBgetdate\fR(\fBconst char *\fIstring\fR);
extern int getdate_err;
.fi

.SH DESCRIPTION
.sp
.LP
The
.B getdate()
function converts user-definable date and/or time
specifications pointed to by
.I string
to a
.B tm
.RB "structure. The" " tm"
structure is defined in the <\fBtime.h\fR> header.
.sp
.LP
User-supplied templates are used to parse and interpret the input string.  The
templates are  text files created by the user and identified via the environment
variable
.BR DATEMSK .
Each line in the template represents an acceptable date
and/or time specification using  conversion specifications similar to those used
by \fBstrftime\fR(3C) and \fBstrptime\fR(3C). Dates before 1902 and after 2037
are illegal. The first line in the template that matches the input specification
is used for interpretation and conversion into  the internal time format.
.SS "Conversion Specifications"
.sp
.LP
The following conversion specifications are supported:
.sp
.ne 2
.mk
.na
.B %%
.ad
.RS 6n
.rt
Same as
.BR % .
.RE

.sp
.ne 2
.mk
.na
.B %a
.ad
.RS 6n
.rt
Locale's abbreviated weekday name.
.RE

.sp
.ne 2
.mk
.na
.B %A
.ad
.RS 6n
.rt
Locale's full weekday name.
.RE

.sp
.ne 2
.mk
.na
.B %b
.ad
.RS 6n
.rt
Locale's abbreviated month name.
.RE

.sp
.ne 2
.mk
.na
.B %B
.ad
.RS 6n
.rt
Locale's full month name.
.RE

.sp
.ne 2
.mk
.na
.B %c
.ad
.RS 6n
.rt
Locale's appropriate date and time representation.
.RE

.sp
.ne 2
.mk
.na
.B %C
.ad
.RS 6n
.rt
Century number (the year divided by 100 and truncated to an integer as a decimal
number [1,99]); single digits are preceded by 0; see
.BR standards (5).
If used
without the
.B %y
specifier, this format specifier will assume the current
year offset in whichever century is specified. The only valid years are between
1902-2037.
.RE

.sp
.ne 2
.mk
.na
.B %d
.ad
.RS 6n
.rt
day of month [01,31]; leading zero is permitted but not required.
.RE

.sp
.ne 2
.mk
.na
.B %D
.ad
.RS 6n
.rt
Date as \fB%m\fR/\fB%d\fR/\fB%y\fR.
.RE

.sp
.ne 2
.mk
.na
.B %e
.ad
.RS 6n
.rt
Same as
.BR %d .
.RE

.sp
.ne 2
.mk
.na
.B %h
.ad
.RS 6n
.rt
Locale's abbreviated month name.
.RE

.sp
.ne 2
.mk
.na
.B %H
.ad
.RS 6n
.rt
Hour (24-hour clock) [0,23]; leading zero is permitted but not required.
.RE

.sp
.ne 2
.mk
.na
.B %I
.ad
.RS 6n
.rt
Hour (12-hour clock) [1,12]; leading zero is permitted but not required.
.RE

.sp
.ne 2
.mk
.na
.B %j
.ad
.RS 6n
.rt
Day number of the year [1,366]; leading zeros are permitted but not required.
.RE

.sp
.ne 2
.mk
.na
.B %m
.ad
.RS 6n
.rt
Month number [1,12]; leading zero is permitted but not required.
.RE

.sp
.ne 2
.mk
.na
.B %M
.ad
.RS 6n
.rt
Minute [0,59]; leading zero is permitted but not required.
.RE

.sp
.ne 2
.mk
.na
.B %n
.ad
.RS 6n
.rt
Any white space.
.RE

.sp
.ne 2
.mk
.na
.B %p
.ad
.RS 6n
.rt
Locale's equivalent of either a.m. or p.m.
.RE

.sp
.ne 2
.mk
.na
.B %r
.ad
.RS 6n
.rt
Appropriate time representation in the 12-hour clock format with \fB%p\fR.
.RE

.sp
.ne 2
.mk
.na
.B %R
.ad
.RS 6n
.rt
Time as \fB%H\fR:\fB%M\fR.
.RE

.SS "SUSv3"
.sp
.ne 2
.mk
.na
.B %S
.ad
.RS 6n
.rt
Seconds [0,60]; leading zero is permitted but not required. The range of values
is [00,60] rather than [00,59] to allow for the occasional leap second.
.RE

.SS "Default and other standards"
.sp
.ne 2
.mk
.na
.B %S
.ad
.RS 6n
.rt
Seconds [0,61]; leading zero is permitted but not required. The range of values
is [00,61] rather than [00,59] to allow for the occasional leap second and even
more occasional double leap second.
.RE

.sp
.ne 2
.mk
.na
.B %t
.ad
.RS 6n
.rt
Any white space.
.RE

.sp
.ne 2
.mk
.na
.B %T
.ad
.RS 6n
.rt
Time as \fB%H\fR:\fB%M\fR:\fB%S\fR.
.RE

.sp
.ne 2
.mk
.na
.B %U
.ad
.RS 6n
.rt
Week number of the year as a decimal number [0,53], with Sunday as the first day
of the week; leading zero is permitted but not required.
.RE

.sp
.ne 2
.mk
.na
.B %w
.ad
.RS 6n
.rt
Weekday as a decimal number [0,6], with 0 representing Sunday.
.RE

.sp
.ne 2
.mk
.na
.B %W
.ad
.RS 6n
.rt
Week number of the year as a decimal number [0,53], with Monday as the first day
of the week; leading zero is permitted but not required.
.RE

.sp
.ne 2
.mk
.na
.B %x
.ad
.RS 6n
.rt
Locale's appropriate date representation.
.RE

.sp
.ne 2
.mk
.na
.B %X
.ad
.RS 6n
.rt
Locale's appropriate time representation.
.RE

.sp
.ne 2
.mk
.na
.B %y
.ad
.RS 6n
.rt
Year within century. When a century is not otherwise specified, values in the
range 69-99 refer to years in the twentieth century (1969 to 1999 inclusive);
values in the range 00-68 refer to years in the twenty-first century (2000 to
2068 inclusive).
.RE

.sp
.ne 2
.mk
.na
.B %Y
.ad
.RS 6n
.rt
Year, including the century (for example, 1993).
.RE

.sp
.ne 2
.mk
.na
.B %Z
.ad
.RS 6n
.rt
Time zone name or no characters if no time zone exists.
.RE

.SS "Modified Conversion Specifications"
.sp
.LP
Some conversion specifications can be modified by the
.B E
and
.BR O
modifier characters to indicate that an alternative format or specification
should be used rather than the one normally used by the unmodified specification.
If the alternative format or specification does not exist in the current locale,
the behavior be as if the unmodified  conversion specification were used.
.sp
.ne 2
.mk
.na
.B %Ec
.ad
.RS 7n
.rt
Locale's alternative appropriate date and time representation.
.RE

.sp
.ne 2
.mk
.na
.B %EC
.ad
.RS 7n
.rt
Name of the base year (period) in the locale's alternative representation.
.RE

.sp
.ne 2
.mk
.na
.B %Ex
.ad
.RS 7n
.rt
Locale's alternative date representation.
.RE

.sp
.ne 2
.mk
.na
.B %EX
.ad
.RS 7n
.rt
Locale's alternative time representation.
.RE

.sp
.ne 2
.mk
.na
.B %Ey
.ad
.RS 7n
.rt
Offset from
.B %EC
(year only) in the locale's alternative representation.
.RE

.sp
.ne 2
.mk
.na
.B %EY
.ad
.RS 7n
.rt
Full alternative year representation.
.RE

.sp
.ne 2
.mk
.na
.B %Od
.ad
.RS 7n
.rt
Day of the month using the locale's alternative  numeric symbols; leading zeros
are permitted but not required.
.RE

.sp
.ne 2
.mk
.na
.B %Oe
.ad
.RS 7n
.rt
Same as
.BR %Od .
.RE

.sp
.ne 2
.mk
.na
.B %OH
.ad
.RS 7n
.rt
Hour (24-hour clock) using the locale's alternative numeric symbols.
.RE

.sp
.ne 2
.mk
.na
.B %OI
.ad
.RS 7n
.rt
Hour (12-hour clock) using the locale's alternative numeric symbols.
.RE

.sp
.ne 2
.mk
.na
.B %Om
.ad
.RS 7n
.rt
Month using the locale's alternative numeric symbols.
.RE

.sp
.ne 2
.mk
.na
.B %OM
.ad
.RS 7n
.rt
Minutes using the locale's alternative numeric symbols.
.RE

.sp
.ne 2
.mk
.na
.B %OS
.ad
.RS 7n
.rt
Seconds using the locale's alternative numeric symbols.
.RE

.sp
.ne 2
.mk
.na
.B %OU
.ad
.RS 7n
.rt
Week number of the year (Sunday as the first day of the week) using the locale's
alternative numeric symbols.
.RE

.sp
.ne 2
.mk
.na
.B %Ow
.ad
.RS 7n
.rt
Number of the weekday (Sunday=0) using the  locale's alternative numeric
symbols.
.RE

.sp
.ne 2
.mk
.na
.B %OW
.ad
.RS 7n
.rt
Week number of the year (Monday as the first day of the week) using the locale's
alternative numeric symbols.
.RE

.sp
.ne 2
.mk
.na
.B %Oy
.ad
.RS 7n
.rt
Year (offset from
.BR %C )
in the locale's alternative  representation and
using the locale's alternative numeric symbols.
.RE

.SS "Internal Format Conversion"
.sp
.LP
The following rules are applied for converting the input specification into the
internal format:
.RS +4
.TP
.ie t \(bu
.el o
If only the weekday is given, today is assumed if the given day is equal to the
current day and next week if it is less.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If only the month is given, the current month is assumed if the given month is
equal to the current month and next year if it is less and no year is given. (The
first day of month is assumed if no day is given.)
.RE
.RS +4
.TP
.ie t \(bu
.el o
If only the year is given, the values of the
.BR tm_mon ,
.BR tm_mday ,
.BR tm_yday ,
.BR tm_wday ,
and \fBtm_isds\fRt members of the returned \fBtm\fR
structure are not specified.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If the century is given, but the year within the century is not given, the
current year within the century is assumed.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If no hour, minute, and second are given, the current hour, minute, and second
are assumed.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If no date is given, today is assumed if the given hour is greater than the
current hour and tomorrow is assumed if it is less.
.RE
.SS "General Specifications"
.sp
.LP
A conversion specification that is an ordinary character is executed by scanning
the next character from the buffer. If the character scanned from the buffer
differs from the one comprising the conversion specification, the specification
fails, and the differing and subsequent characters remain unscanned.
.sp
.LP
A series of conversion specifications composed of
.BR %n ,
.BR %t ,
white
space characters, or any combination is executed by scanning up to the first
character that is not white space (which remains unscanned), or until no more
characters can be scanned.
.sp
.LP
Any other conversion specification is executed by scanning characters until a
character matching the next conversion specification is scanned, or until no more
characters can be scanned.  These characters, except the one matching the next
conversion specification, are then compared to the locale values associated with
the conversion specifier.  If a match is found, values for the appropriate
\fItm\fR structure members are set to values corresponding to the locale
information. If no match is found,
.B getdate()
fails and no more characters
are scanned.
.sp
.LP
The month names, weekday names, era names, and alternative numeric symbols can
consist of any combination of upper and lower case letters.  The user can request
that the input date or time specification be in a specific language by setting
the
.B LC_TIME
category using
.BR setlocale (3C).
.SH RETURN VALUES
.sp
.LP
If successful,
.B getdate()
returns a pointer to a
.B tm
structure;
otherwise, it returns
.I NULL
and sets the global variable
.BR getdate_err
to indicate the error. Subsequent calls to
.B getdate()
alter the contents of
.BR getdate_err .
.sp
.LP
The following is a complete list of the 
.B getdate_err
settings and their
meanings:
.sp
.ne 2
.mk
.na
.B 1
.ad
.RS 5n
.rt
The
.B DATEMSK
environment variable is null or undefined.
.RE

.sp
.ne 2
.mk
.na
.B 2
.ad
.RS 5n
.rt
The template file cannot be opened for reading.
.RE

.sp
.ne 2
.mk
.na
.B 3
.ad
.RS 5n
.rt
Failed to get file status information.
.RE

.sp
.ne 2
.mk
.na
.B 4
.ad
.RS 5n
.rt
The template file is not a regular file.
.RE

.sp
.ne 2
.mk
.na
.B 5
.ad
.RS 5n
.rt
An error is encountered while reading the template file.
.RE

.sp
.ne 2
.mk
.na
.B 6
.ad
.RS 5n
.rt
The
.B malloc()
function failed (not enough memory is available).
.RE

.sp
.ne 2
.mk
.na
.B 7
.ad
.RS 5n
.rt
There is no line in the template that matches the input.
.RE

.sp
.ne 2
.mk
.na
.B 8
.ad
.RS 5n
.rt
The input specification is invalid (for example, \fBFebruary 31\fR).
.RE

.SH USAGE
.sp
.LP
The
.B getdate()
function makes explicit use of macros described on the
.BR ctype (3C)
manual page.
.SH EXAMPLES
.LP
\fBExample 1\fR Examples of the \fBgetdate()\fR function.
.sp
.LP
The following example shows the possible contents of a template:

.sp
.in +2
.nf
%m
%A %B %d %Y, %H:%M:%S
%A
%B
%m/%d/%y %I %p
%d,%m,%Y %H:%M
at %A the %dst of %B in %Y
run job at %I %p,%B %dnd
%A den %d. %B %Y %H.%M Uhr
.fi
.in -2

.sp
.LP
The following are examples of valid input specifications for the above
template:

.sp
.in +2
.nf
getdate("10/1/87 4 PM")
getdate("Friday")
getdate("Friday September 19 1987, 10:30:30")
getdate("24,9,1986 10:30")
getdate("at monday the 1st of december in 1986")
getdate("run job at 3 PM, december 2nd")
.fi
.in -2

.sp
.LP
If the
.B LANG
environment variable is set to 
.B de
(German), the
following is valid:

.sp
.in +2
.nf
getdate("freitag den 10. oktober 1986 10.30 Uhr")
.fi
.in -2

.sp
.LP
Local time and date specification are also supported. The following examples
show how local date and time specification can be defined in the template.

.sp

.sp
.TS
tab() box;
lw(2.75i) |lw(2.75i)
lw(2.75i) |lw(2.75i)
.
InvocationLine in Template
_
getdate("11/27/86")%m/%d/%y
getdate("27.11.86")%d.%m.%y
getdate("86-11-27")%y-%m-%d
getdate("Friday 12:00:00")%A %H:%M:%S
.TE

.sp
.LP
The following examples illustrate the Internal Format Conversion rules. Assume
.RB "that the current date is Mon Sep 22 12:19:47 EDT 1986 and the" " LANG"
environment variable is not set.

.sp

.sp
.TS
tab() box;
lw(1.32i) |lw(1.39i) |lw(2.79i)
lw(1.32i) |lw(1.39i) |lw(2.79i)
.
InputTemplate Line Date
_
\fBMon\fR\fB%a\fRMon Sep 22 12:19:48 EDT 1986
\fBSun\fR\fB%a\fRSun Sep 28 12:19:49 EDT 1986
\fBFri\fR\fB%a\fRFri Sep 26 12:19:49 EDT 1986
\fBSeptember\fR\fB%B\fRMon Sep  1 12:19:49 EDT 1986
\fBJanuary\fR\fB%B\fRThu Jan  1 12:19:49 EST 1987
\fBDecember\fR\fB%B\fRMon Dec  1 12:19:49 EDT 1986
\fBSep Mon\fR\fB%b %a\fRMon Sep  1 12:19:50 EDT 1986
\fBJan Fri\fR\fB%b %a\fRFri Jan  2 12:19:50 EST 1987
\fBDec Mon\fR\fB%b %a\fRMon Dec  1 12:19:50 EST 1986
\fBJan Wed 1989\fR\fB%b\fR \fB%a\fR \fB%Y\fRWed Jan  4 12:19:51 EST 1989
\fBFri 9\fR\fB%a %H\fRFri Sep 26 09:00:00 EDT 1986
\fBFeb 10:30\fR\fB%b %H:%S\fRSun Feb  1 10:00:30 EST 1987
\fB10:30\fR\fB%H:%M\fRTue Sep 23 10:30:00 EDT 1986
\fB13:30\fR\fB%H:%M\fRMon Sep 22 13:30:00 EDT 1986
.TE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
lw(2.75i) |lw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
CSIEnabled
_
Interface StabilityStandard
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR ctype (3C),
.BR mktime (3C),
.BR setlocale (3C),
\fBstrftime\fR(3C),
.BR strptime (3C),
.BR attributes (5),
.BR environ (5),
.BR standards (5)
