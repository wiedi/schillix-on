'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH port_associate 3C "9 Nov 2007" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
port_associate, port_dissociate \- associate or dissociate the object with
the port
.SH SYNOPSIS
.LP
.nf
#include <port.h>

\fBint\fR \fBport_associate\fR(\fBint\fR \fIport\fR, \fBint\fR \fIsource\fR, \fBuintptr_t\fR \fIobject\fR,
     \fBint\fR \fIevents\fR, \fBvoid *\fIuser\fR);
.fi

.LP
.nf
\fBint\fR \fBport_dissociate\fR(\fBint\fR \fIport\fR, \fBint\fR \fIsource\fR, \fBuintptr_t\fR \fIobject\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B port_associate()
function associates specific
.I events
of a
given
.I object
with a
.IR port .
Only objects associated with a
particular port are able to generate events that can be retrieved using
.BR port_get (3C)
or
.BR port_getn "(3C). The delivery event has its"
.B portev_user
member set to the value specified in the
.IR user
parameter. If the specified object is already associated with the specified
port, the
.B port_associate()
function serves to update the
.IR events
and
.I user
arguments of the association.  The
.B port_dissociate()
function removes the association of an object with a port.
.sp
.LP
The objects that can be associated with a port by way of the
.B port_associate()
function are objects of type
.B PORT_SOURCE_FD
and
.BR PORT_SOURCE_FILE .
Objects of other types have type-specific
association mechanisms. A
.B port_notify_t
structure, defined in
.BR <port.h> ,
is used to specify the event port and an application-defined
cookie to associate with these event sources. See
.BR port_create (3C)
and
.BR signal.h (3HEAD).
.sp
.LP
The
.B port_notify_t
structure contains the following members:
.sp
.in +2
.nf
int       portntfy_port;  /* bind request(s) to port */
void      *portntfy_user; /* user defined cookie */
.fi
.in -2

.sp
.LP
Objects of type
.B PORT_SOURCE_FD
are file descriptors. The event types
for
.B PORT_SOURCE_FD
objects are described in
.BR poll (2).
At most one
event notification will be generated per associated file descriptor.  For
example, if a file descriptor is associated with a port for the
.B POLLRDNORM
event and data is available on the file descriptor at the
time the
.B port_associate()
function is called, an event is immediately
sent to the port. If data is not yet available, one event is sent to the
port when data first becomes available.
.sp
.LP
When an event for a
.B PORT_SOURCE_FD
object is retrieved, the object no
longer has an association with the port.  The event can be processed without
the possibility that another thread can retrieve a subsequent event for the
same object.  After processing of the file descriptor is completed, the
.B port_associate()
function can be called to reassociate the object with
the port.
.sp
.LP
Objects of type
.B PORT_SOURCE_FILE
are pointer to the structure
.B file_obj
defined in
.BR <sys/port.h> .
This event source provides
event notification when the specified file/directory is accessed or modified
or when its status changes. The path name of the file/directory to be
watched is passed in the
.B "struct file_obj"
along with the
.BR access ,
.BR modification ,
and
.B change
time stamps acquired from a
.BR stat (2)
call. If the file name is a symbolic links, it is followed by
default. The
.B FILE_NOFOLLOW
needs to be passed in along with the
specified events if the symbolic link itself needs to be watched and
.B lstat()
needs to be used to get the file status of the symbolic link
file.
.sp
.LP
The
.B "struct file_obj"
contains the following elements:
.sp
.in +2
.nf
timestruc_t     fo_atime;  /* Access time got from stat() */
timestruc_t     fo_mtime;  /* Modification time from stat() */
timestruc_t     fo_ctime;  /* Change time from stat() */
char            *fo_name;  /* Pointer to a null terminated path name */
.fi
.in -2

.sp
.LP
At the time the
.B port_associate()
function is called, the time stamps
passed in the structure
.B file_obj
are compared with the file or
directory's current time stamps and, if there has been a change, an event is
immediately sent to the port. If not, an event will be sent when such a
change occurs.
.sp
.LP
The event types that can be specified at
.B port_associate()
time for
.B PORT_SOURCE_FILE
are
.BR FILE_ACCESS ,
.BR FILE_MODIFIED ,
and
.BR FILE_ATTRIB ,
corresponding to the three time stamps. An
.B fo_atime
change results in the
.B FILE_ACCESS
event, an
.B fo_mtime
change
results in the
.B FILE_MODIFIED
event, and an
.B fo_time
change
results in the
.B FILE_ATTRIB
event.
.sp
.LP
The following exception events are delivered when they occur. These event
types cannot be filtered.
.sp
.in +2
.nf
FILE_DELETE       /* Monitored file/directory was deleted */
FILE_RENAME_TO    /* Monitored file/directory was renamed */
FILE_RENAME_FROM  /* Monitored file/directory was renamed */
UNMOUNTED         /* Monitored file system got unmounted */
MOUNTEDOVER       /* Monitored file/directory was mounted over */
.fi
.in -2

.sp
.LP
At most one event notification will be generated per associated
.BR file_obj .
When the event for the associated
.B file_obj
is
retrieved, the object is no longer associated with the port. The event can
be processed without the possibility that another thread can retrieve a
subsequent event for the same object. The
.B port_associate()
can be
called to reassociate the
.B file_obj
object with the port.
.sp
.LP
The association is also removed if the port gets closed or when
.B port_dissociate()
is called.
.sp
.LP
The parent and child processes are allowed to retrieve events from file
descriptors shared after a call to
.BR fork (2).
The process performing the
first association with a port (parent or child process) is designated as the
owner of the association. Only the owner of an association is allowed to
dissociate the file descriptor from a port. The association is removed if
the owner of the association closes the port .
.sp
.LP
On NFS file systems, events from only the client side (local)
access/modifications to files or directories will be delivered.
.SH RETURN VALUES
.sp
.LP
Upon succesful completion, 0 is returned. Otherwise, \(mi1 is returned and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B port_associate()
and
.B port_dissociate()
functions will fail
if:
.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 10n
.rt
The
.I port
identifier is not valid.
.RE

.sp
.ne 2
.mk
.na
.B EBADFD
.ad
.RS 10n
.rt
The
.I source
argument is of type
.B PORT_SOURCE_FD
and the object
argument is not a valid file descriptor.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I source
argument is not valid.
.RE

.sp
.LP
The
.B port_associate()
function will fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 11n
.rt
The source argument is
.B PORT_SOURCE_FILE
and, Search permission is
denied on a component of path prefix or the file exists and the permissions,
corresponding to the events argument, are denied.
.RE

.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 11n
.rt
The maximum number of objects associated with the port was exceeded. The
maximum allowable number of events or association of objects per port is the
minimum value of the
.B process.max-port-events
resource control at the
time
.BR port_create "(3C) was used to create the port. See"
.BR setrctl (2)
and
.BR rctladm (1M)
for information on using resource controls.
.sp
The number of objects associated with a port is composed of all supported
resource types. Some of the source types do not explicitly use the
.B port_associate()
function.
.RE

.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 11n
.rt
The source argument is
.B PORT_SOURCE_FILE
and the file does not exist
or the path prefix does not exist or the path points to an empty string.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 11n
.rt
The physical memory limits of the system have been exceeded.
.RE

.sp
.ne 2
.mk
.na
.B ENOTSUP
.ad
.RS 11n
.rt
The source argument is
.B PORT_SOURCE_FILE
and the file system on which
the specified file resides, does not support watching for file events
notifications.
.RE

.sp
.LP
The
.B port_dissociate()
function will fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 10n
.rt
The process is not the owner of the association.
.RE

.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 10n
.rt
The specified object is not associated with the port.
.RE

.SH EXAMPLES
.LP
.B Example 1
Retrieve data from a pipe file descriptor.
.sp
.LP
The following example retrieves data from a pipe file descriptor.

.sp
.in +2
.nf
#include <port.h>

int               port;
int               fd;
int               error;
int               index;
void              *mypointer;
port_event_t      pev;
struct timespec_t timeout;
char              rbuf[STRSIZE];
int               fds[MAXINDEX];

/* create a port */
port = port_create();

for (index = 0; index < MAXINDEX; index++) {
    error = mkfifo(name[index], S_IRWXU | S_IRWXG | S_IRWXO);
    if (error)
            /* handle error code */
    fds[index] = open(name[index], O_RDWR);

    /* associate pipe file descriptor with the port */
    error = port_associate(port, PORT_SOURCE_FD, fds[index],
        POLLIN, mypointer);
}
\&.\|.\|.
timeout.tv_sec = 1;     /* user defined */
timeout.tv_nsec = 0;

/* loop to retrieve data from the list of pipe file descriptors */
for (.\|.\|.) {
    /* retrieve a single event */
    error = port_get(port, &pev, &timeout);
    if (error) {
            /* handle error code */
    }
    fd = pev.portev_object;
    if (read(fd, rbuf, STRSIZE)) {
            /* handle error code */
    }
    if (fd-still-accepting-data) {
            /*
             * re-associate the file descriptor with the port.
             * The re-association is required for the
             * re-activation of the data detection.
             * Internals events and user arguments are set to the
             * new (or the same) values delivered here.
             */
            error = port_associate(port, PORT_SOURCE_FD, fd, POLLIN,
                pev.portev_user);
    } else {
            /*
             * If file descriptor is no longer required,
             * - it can remain disabled but still associated with
             *   the port, or
             * - it can be dissociated from the port.
             */
        }
.fi
.in -2

.LP
.B Example 2
Bind AIO transaction to a specific port.
.sp
.LP
The following example binds the AIO transaction to a specific port.

.sp
.in +2
.nf
#include <port.h>

int             port;
port_notify_t   pn;
aiocb_t         aiocb;
aiocb_t         *aiocbp;
void            *mypointer;
int             error;
int             my_errno;
int             my_status;
struct timespec_t timeout;
port_event_t    pev;

port = port_create();
\&.\|.\|.
/* fill AIO specific part */
aiocb.aio_fildes = fd;
aiocb.aio_nbytes = BUFSIZE;
aiocb.aio_buf = bufp;
aiocb.aio_offset = 0;

/* port specific part */
pn.portnfy_port = port;
pn.portnfy_user = mypointer;
aiocb.aio_sigevent.sigev_notify = SIGEV_PORT;
aiocb.aio_sigevent.sigev_value.sival_ptr = &pn

/*
 * The aio_read() function binds internally the asynchronous I/O
 * transaction with the port delivered in port_notify_t.
 */
error = aio_read(&aiocb);

timeout.tv_sec = 1;     /* user defined */
timeout.tv_nsec = 0;

/* retrieve a single event */
error = port_get(port, &pev, &timeout);
if (error) {
        /* handle error code */
}

/*
 * pev.portev_object contains a pointer to the aiocb structure
 * delivered in port_notify_t (see aio_read()).
 */
aiocbp = pev.portev_object;

/* check error code and return value in
my_errno = aio_error(aiocbp);
\&.\|.\|.
my_status = aio_return(aiocbp);
\&.\|.\|.
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Architectureall
_
AvailabilitySUNWcsr, SUNWhea
_
Interface StabilityCommitted
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR rctladm (1M),
.BR poll (2),
.BR setrctl (2),
.BR port_alert (3C),
.BR port_create (3C),
.BR port_get (3C),
.BR port_send (3C),
.BR signal.h (3HEAD),
.BR attributes (5)
