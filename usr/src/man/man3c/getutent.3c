'\" te
.\" Copyright 1989 AT&T  Copyright (c) 1998, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH getutent 3C "27 Oct 1998" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
getutent, getutid, getutline, pututline, setutent, endutent, utmpname \-
user accounting database functions
.SH SYNOPSIS
.LP
.nf
#include <utmp.h>

\fBstruct utmp *\fBgetutent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBstruct utmp *\fBgetutid\fR(\fBconst struct utmp *\fIid\fR);
.fi

.LP
.nf
\fBstruct utmp *\fBgetutline\fR(\fBconst struct utmp *\fIline\fR);
.fi

.LP
.nf
\fBstruct utmp *\fBpututline\fR(\fBconst struct utmp *\fIutmp\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsetutent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBvoid\fR \fBendutent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBint\fR \fButmpname\fR(\fBconst char *\fIfile\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions provide access to the user accounting database,
.BR utmp .
Entries in the database are described by the definitions and data structures
in \fB<utmp.h>\fR\&.
.sp
.LP
The
.B utmp
structure contains the following members:
.sp
.in +2
.nf
char                ut_user[8];   /* user login name */
char                ut_id[4];     /* /sbin/inittab id */
                                  /* (usually line #) */
char                ut_line[12];  /* device name (console, lnxx) */
short               ut_pid;       /* process id */
short               ut_type;      /* type of entry */
struct exit_status  ut_exit;      /* exit status of a process */
                                  /* marked as DEAD_PROCESS */
time_t              ut_time;      /* time entry was made */
.fi
.in -2

.sp
.LP
The structure
.B exit_status
includes the following members:
.sp
.in +2
.nf
short   e_termination;   /* termination status */
short   e_exit;          /* exit status */
.fi
.in -2

.SS "\fBgetutent()\fR"
.sp
.LP
The
.B getutent()
function reads in the next entry from a
.BR utmp
database. If the database is not already open, it opens it.  If it reaches
the end of the database, it fails.
.SS "\fBgetutid()\fR"
.sp
.LP
The
.B getutid()
function searches forward from the current point in the
.B utmp
database until it finds an entry with a
.B ut_type
matching
\fIid\fR->\fBut_type\fR if the type specified is \fBRUN_LVL\fR,
.BR BOOT_TIME ,
.BR DOWN_TIME ,
.BR OLD_TIME ,
or
.BR NEW_TIME .
If the
type specified in
.I id
is
.BR INIT_PROCESS ,
.BR LOGIN_PROCESS ,
.BR USER_PROCESS ,
or
.BR DEAD_PROCESS ,
then
.B getutid()
will return
a pointer to the first entry whose type is one of these four and whose
\fBut_id\fR member matches \fIid\fR->\fBut_id\fR. If the end of database is
reached without a match, it fails.
.SS "\fBgetutline()\fR"
.sp
.LP
The
.B getutline()
function searches forward from the current point in
the
.B utmp
database until it finds an entry of the type
.B LOGIN_PROCESS
or
.B ut_line
string matching the
\fIline\fR->\fBut_line\fR string. If the end of database is reached without
a match, it fails.
.SS "\fBpututline()\fR"
.sp
.LP
The
.B pututline()
function writes the supplied
.B utmp
structure
into the
.B utmp
database.  It uses
.B getutid()
to search forward for
the proper place if it finds that it is not already at the proper place.  It
is expected that normally the user of
.B pututline()
will have searched
for the proper entry using one of the these functions.  If so,
.B pututline()
will not search.  If
.B pututline()
does not find a
matching slot for the new entry, it will add a new entry to the end of the
database. It returns a pointer to the
.B utmp
structure. When called by a
non-root user,
.B pututline()
invokes a
.B setuid()
root program to
verify and write the entry, since the
.B utmp
database is normally
writable only by root.  In this event, the
.B ut_name
member must
correspond to the actual user name associated with the process; the
.B ut_type
member must be either
.B USER_PROCESS
or
.BR DEAD_PROCESS ;
and the
.B ut_line
member must be a device special
file and be writable by the user.
.SS "\fBsetutent()\fR"
.sp
.LP
The
.B setutent()
function resets the input stream to the beginning.
This reset should be done before each search for a new entry if it is
desired that the entire database be examined.
.SS "\fBendutent()\fR"
.sp
.LP
The
.B endutent()
function closes the currently open database.
.SS "\fButmpname()\fR"
.sp
.LP
The
.B utmpname()
function allows the user to change the name of the
database file examined to another file.  If the file does not exist, this
will not be apparent until the first attempt to reference the file is made.
The
.B utmpname()
function does not open the file but closes the old file
if it is currently open and saves the new file name.
.SH RETURN VALUES
.sp
.LP
A null pointer is returned upon failure to read, whether for permissions or
having reached the end of file, or upon failure to write. If the file name
given is longer than 79 characters,
.B utmpname()
returns
.BR 0 .
Otherwise, it returns
.BR 1 .
.SH USAGE
.sp
.LP
These functions use buffered standard I/O for input, but \fBpututline()\fR
uses an unbuffered non-standard write to avoid race conditions between
processes trying to modify the
.B utmp
and
.B wtmp
databases.
.sp
.LP
Applications should not access the
.B utmp
and
.B wtmp
databases
directly, but should use these functions to ensure that these databases are
maintained consistently. Using these functions, however, may cause
applications to fail if user accounting data cannot be represented properly
in the
.B utmp
structure (for example, on a system where PIDs can exceed
32767). Use the functions described on the
.BR getutxent (3C)
manual page
instead.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR getutxent (3C),
.BR ttyslot (3C),
.BR utmpx (4),
.BR attributes (5)
.SH NOTES
.sp
.LP
The most current entry is saved in a static structure.  Multiple accesses
require that it be copied before further accesses are made. On each call to
either
.B getutid()
or
.BR getutline() ,
the function examines the
static structure before performing more I/O. If the contents of the static
structure match what it is searching for, it looks no further.  For this
reason, to use
.B getutline()
to search for multiple occurrences, it
would be necessary to zero out the static area after each success, or
.B getutline()
would just return the same structure over and over again.
There is one exception to the rule about emptying the structure before
further reads are done.  The implicit read done by
.B pututline()
(if it
finds that it is not already at the correct place in the file) will not hurt
the contents of the static structure returned by the
.BR getutent() ,
.B getutid()
or
.B getutline()
functions, if the user has just
modified those contents and passed the pointer back to
.BR pututline() .
