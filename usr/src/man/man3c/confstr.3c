'\" te
.\" Copyright (c) 1992, X/Open Company Limited. All Rights Reserved.
.\" Portions Copyright (c) 2003, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH confstr 3C "15 Dec 2003" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
confstr \- get configurable variables
.SH SYNOPSIS
.LP
.nf
#include <unistd.h>

\fBsize_t\fR \fBconfstr\fR(\fBint\fR \fIname\fR, \fBchar *\fIbuf\fR, \fBsize_t\fR \fIlen\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B confstr()
function provides a method for applications to get
configuration-defined string values.  Its use and purpose are similar to the
.BR sysconf (3C)
function, but it is used where string values rather than
numeric values are returned.
.sp
.LP
The
.I name
argument represents the system variable to be queried.
.sp
.LP
If
.I len
is not
.BR 0 ,
and if
.I name
has a configuration-defined
value, \fBconfstr()\fR copies that value into the  \fIlen\fR-byte buffer
pointed to by
.IR buf .
If the string to be returned is longer than
.I len
bytes, including the terminating null, then \fBconfstr()\fR
truncates the string to  \fIlen\fR\(mi1 bytes and null-terminates the
result. The application can detect that the string was truncated by
comparing the value returned by
.B confstr()
with
.IR len .
.sp
.LP
If
.I len
is
.BR 0 ,
.B confstr()
still returns the integer value as
defined below, but does not return the string.
.sp
.LP
The
.B confstr()
function supports the following values for
.IR name ,
defined in
.BR <unistd.h> ,
for both SPARC and x86:
.sp
.ne 2
.mk
.na
.B _CS_LFS64_CFLAGS
.ad
.sp .6
.RS 4n
If
.B _LFS64_LARGEFILE
is defined in
.BR <unistd.h> ,
this value is the
set of initial options to be given to the
.B cc
and
.B c89
utilities
to build an application using the Large File Summit transitional compilation
environment (see
.BR lfcompile64 (5)).
.RE

.sp
.ne 2
.mk
.na
.B _CS_LFS64_LDFLAGS
.ad
.sp .6
.RS 4n
If
.B _LFS64_LARGEFILE
is defined in
.BR <unistd.h> ,
this value is the
set of final options to be given to the
.B cc
and
.B c89
utilities to
build an application using the Large File Summit transitional compilation
environment (see
.BR lfcompile64 (5)).
.RE

.sp
.ne 2
.mk
.na
.B _CS_LFS64_LIBS
.ad
.sp .6
.RS 4n
If
.B _LFS64_LARGEFILE
is defined in
.BR <unistd.h> ,
this value is the
set of libraries to be given to the
.B cc
and
.B c89
utilities to
build an application using the Large File Summit transitional compilation
environment (see
.BR lfcompile64 (5)).
.RE

.sp
.ne 2
.mk
.na
.B _CS_LFS64_LINTFLAGS
.ad
.sp .6
.RS 4n
If
.B _LFS64_LARGEFILE
is defined in
.BR <unistd.h> ,
this value is the
set of options to be given to the
.B lint
utility to check application
source using the Large File Summit transitional compilation environment (see
.BR lfcompile64 (5)).
.RE

.sp
.ne 2
.mk
.na
.B _CS_LFS_CFLAGS
.ad
.sp .6
.RS 4n
If
.B _LFS_LARGEFILE
is defined in
.BR <unistd.h> ,
this value is the
set of initial options to be given to the
.B cc
and
.B c89
utilities
to build an application using the Large File Summit large file compilation
environment for 32-bit applications (see
.BR lfcompile (5)).
.RE

.sp
.ne 2
.mk
.na
.B _CS_LFS_LDFLAGS
.ad
.sp .6
.RS 4n
If
.B _LFS_LARGEFILE
is defined in
.BR <unistd.h> ,
this value is the
set of final options to be given to the
.B cc
and
.B c89
utilities to
build an application using the Large File Summit large file compilation
environment for 32-bit applications (see
.BR lfcompile (5)).
.RE

.sp
.ne 2
.mk
.na
.B _CS_LFS_LIBS
.ad
.sp .6
.RS 4n
If
.B _LFS_LARGEFILE
is defined in
.BR <unistd.h> ,
this value is the
set of libraries to be given to the
.B cc
and
.B c89
utilities to
build an application using the Large File Summit large file compilation
environment for 32-bit applications (see
.BR lfcompile (5)).
.RE

.sp
.ne 2
.mk
.na
.B _CS_LFS_LINTFLAGS
.ad
.sp .6
.RS 4n
If
.B _LFS_LARGEFILE
is defined in
.BR <unistd.h> ,
this value is the
set of options to be given to the
.B lint
utility to check application
source using the Large File Summit large file compilation environment for
32-bit applications (see
.BR lfcompile (5)).
.RE

.sp
.ne 2
.mk
.na
.B _CS_PATH
.ad
.sp .6
.RS 4n
If the ISO POSIX.2 standard is supported, this is the value for the
.B PATH
environment variable that finds all standard utilities.
Otherwise the meaning of this value is unspecified.
.RE

.sp
.ne 2
.mk
.na
.B _CS_POSIX_V6_ILP32_OFF32_CFLAGS
.ad
.sp .6
.RS 4n
If \fBsysconf\fR(\fB_SC_V6_ILP32_OFF32\fR) returns -1, the meaning of this
value is unspecified.  Otherwise, this value is the set of initial options
to be given to the
.B c99
utility to build an application using a
programming model with 32-bit
.BR int ,
.BR long ,
.BR pointer ,
and
.B off_t
types.
.RE

.sp
.ne 2
.mk
.na
.B _CS_POSIX_V6_ILP32_OFF32_LDFLAGS
.ad
.sp .6
.RS 4n
If \fBsysconf\fR(\fB_SC_V6_ILP32_OFF32\fR) returns -1, the meaning of this
value is unspecified. Otherwise, this value is the set of final options to
be given to the
.B c99
utility to build an application using a
programming model with 32-bit
.BR int ,
.BR long ,
.BR pointer ,
and
.B off_t
types.
.RE

.sp
.ne 2
.mk
.na
.B _CS_POSIX_V6_ILP32_OFF32_LIBS
.ad
.sp .6
.RS 4n
If \fBsysconf\fR(\fB_SC_V6_ILP32_OFF32\fR) returns -1, the meaning of this
value is unspecified. Otherwise, this value is the set of libraries to be
given to the
.B c99
utility to build an application using a programming
model with 32-bit
.BR int ,
.BR long ,
.BR pointer ,
and \fBoff_t\fR
types.
.RE

.sp
.ne 2
.mk
.na
.B _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
.ad
.sp .6
.RS 4n
 If \fBsysconf\fR(\fB_SC_V6_ILP32_OFFBIG\fR) returns -1, the meaning of this value is unspecified. Otherwise, this value is the set of initial options to be given to the \fBc99\fR utility to build an application using a programming model with 32-bit \fBint\fR,
.BR long ,
and
.B pointer
types, and an
.B off_t
type using at least 64 bits.
.RE

.sp
.ne 2
.mk
.na
.B _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
.ad
.sp .6
.RS 4n
If \fBsysconf\fR(\fB_SC_V6_ILP32_OFFBIG\fR) returns -1, the meaning of this
value is unspecified. Otherwise, this value is the set of final options to
be given to the
.B c99
utility to build an application using a
programming model with 32-bit
.BR int ,
.BR long ,
and
.BR pointer
types, and an
.B off_t
type using at least 64 bits.
.RE

.sp
.ne 2
.mk
.na
.B _CS_POSIX_V6_ILP32_OFFBIG_LIBS
.ad
.sp .6
.RS 4n
If \fBsysconf\fR(\fB_SC_V6_ILP32_OFFBIG\fR) returns -1, the meaning of this
value is unspecified. Otherwise, this value is the set of libraries to be
given to the
.B c99
utility to build an application using a programming
model with 32-bit
.BR int ,
.BR long ,
and
.B pointer
types, and an
.B off_t
type using at least 64 bits.
.RE

.sp
.ne 2
.mk
.na
.B _CS_POSIX_V6_LP64_OFF64_CFLAGS
.ad
.sp .6
.RS 4n
If \fBsysconf\fR(\fB_SC_V6_LP64_OFF64\fR) returns -1, the meaning of this
value is unspecified. Otherwise, this value is the set of initial options to
be given to the
.B c99
utility to build an application using a
programming model with 64-bit
.BR int ,
.BR long ,
.BR pointer ,
and
.B off_t
types.
.RE

.sp
.ne 2
.mk
.na
.B _CS_POSIX_V6_LP64_OFF64_LDFLAGS
.ad
.sp .6
.RS 4n
If \fBsysconf\fR(\fB_SC_V6_LP64_OFF64\fR) returns -1, the meaning of this
value is unspecified. Otherwise, this value is the set of final options to
be given to the
.B c99
utility to build an application using a
programming model with 64-bit
.BR int ,
.BR long ,
.BR pointer ,
and
.B off_t
types.
.RE

.sp
.ne 2
.mk
.na
.B _CS_POSIX_V6_LP64_OFF64_LIBS
.ad
.sp .6
.RS 4n
If \fBsysconf\fR(\fB_SC_V6_LP64_OFF64\fR) returns -1, the meaning of this
value is unspecified. Otherwise, this value is the set of libraries to be
given to the
.B c99
utility to build an application using a programming
model with 64-bit
.BR int ,
.BR long ,
.BR pointer ,
and \fBoff_t\fR
types.
.RE

.sp
.ne 2
.mk
.na
.B _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
.ad
.sp .6
.RS 4n
If \fBsysconf\fR(\fB_SC_V6_LPBIG_OFFBIG\fR) returns -1, the meaning of this
value is unspecified. Otherwise, this value is the set of initial options to
be given to the
.B c99
utility to build an application using a
programming model with an
.B int
type using at least 32 bits and
.BR long ,
.BR pointer ,
and
.B off_t
types using at least 64 bits.
.RE

.sp
.ne 2
.mk
.na
.B _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
.ad
.sp .6
.RS 4n
If \fBsysconf\fR(\fB_SC_V6_LPBIG_OFFBIG\fR) returns -1, the meaning of this
value is unspecified. Otherwise, this value is the set of final options to
be given to the
.B c99
utility to build an application using a
programming model with an
.B int
type using at least 32 bits and
.BR long ,
.BR pointer ,
and
.B off_t
types using at least 64 bits.
.RE

.sp
.ne 2
.mk
.na
.B _CS_POSIX_V6_LPBIG_OFFBIG_LIBS
.ad
.sp .6
.RS 4n
If \fBsysconf\fR(\fB_SC_V6_LPBIG_OFFBIG\fR) returns -1, the meaning of this
value is unspecified. Otherwise, this value is the set of libraries to be
given to the
.B c99
utility to build an application using a programming
model with an
.B int
type using at least 32 bits and
.BR long ,
.BR pointer ,
and
.B off_t
types using at least 64 bits.
.RE

.sp
.ne 2
.mk
.na
.B _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
.ad
.sp .6
.RS 4n
This value is a <newline>-separated list of names of programming
environments supported  by the implementation in which the widths of the
.BR blksize_t ,
.BR cc_t ,
.BR mode_t ,
.BR nfds_t ,
.BR pid_t ,
.BR ptrdiff_t ,
.BR size_t ,
.BR speed_t ,
.BR ssize_t ,
.BR suseconds_t ,
.BR tcflag_t ,
.BR useconds_t ,
.BR wchar_t ,
and
.B wint_t
types are no greater than the width of type
.BR long .
.RE

.sp
.ne 2
.mk
.na
.B _CS_XBS5_ILP32_OFF32_CFLAGS
.ad
.sp .6
.RS 4n
If \fBsysconf(_SC_XBS5_ILP32_OFF32)\fR returns \(mi1 the meaning of this
value is unspecified.  Otherwise, this value is the set of initial options
to be given to the
.B cc
and
.B c89
utilities to build an application
using a programming model with 32-bit
.BR int ,
.BR long ,
.BR pointer ,
and
.B off_t
types.
.RE

.sp
.ne 2
.mk
.na
.B _CS_XBS5_ILP32_OFF32_LDFLAGS
.ad
.sp .6
.RS 4n
If \fBsysconf(_SC_XBS5_ILP32_OFF32)\fR returns \(mi1 the meaning of this
value is unspecified.  Otherwise, this value is the set of final options to
be given to the
.B cc
and
.B c89
utilities to build an application
using a programming model with 32-bit
.BR int ,
.BR long ,
.BR pointer ,
and
.B off_t
types.
.RE

.sp
.ne 2
.mk
.na
.B _CS_XBS5_ILP32_OFF32_LIBS
.ad
.sp .6
.RS 4n
If \fBsysconf(_SC_XBS5_ILP32_OFF32)\fR returns \(mi1 the meaning of this
value is unspecified.  Otherwise, this value is the set of libraries to be
given to the
.B cc
and
.B c89
utilities to build an application using
a programming model with 32-bit
.BR int ,
.BR long ,
.BR pointer ,
and
.B off_t
types.
.RE

.sp
.ne 2
.mk
.na
.B _CS_XBS5_ILP32_OFF32_LINTFLAGS
.ad
.sp .6
.RS 4n
If \fBsysconf(_SC_XBS5_ILP32_OFF32)\fR returns \(mi1 the meaning of this
value is unspecified.  Otherwise, this value is the set of options to be
given to the
.B lint
utility to check application source using a
programming model with 32-bit
.BR int ,
.BR long ,
.BR pointer ,
and
.B off_t
types.
.RE

.sp
.ne 2
.mk
.na
.B _CS_XBS5_ILP32_OFFBIG_CFLAGS
.ad
.sp .6
.RS 4n
If \fBsysconf(_SC_XBS5_ILP32_OFFBIG)\fR returns \(mi1 the meaning of this
value is unspecified.  Otherwise, this value is the set of initial options
to be given to the
.B cc
and
.B c89
utilities to build an application
using a programming model with 32-bit
.BR int ,
.BR long ,
and
.B pointer
types, and an
.B off_t
type using at least 64 bits.
.RE

.sp
.ne 2
.mk
.na
.B _CS_XBS5_ILP32_OFFBIG_LDFLAGS
.ad
.sp .6
.RS 4n
If \fBsysconf(SC_XBS5_ILP32_OFFBIG)\fR returns \(mi1 the meaning of this
value is unspecified.  Otherwise, this value is the set of final options to
be given to the
.B cc
and
.B c89
utilities to build an application
using a programming model with 32-bit
.BR int ,
.BR long ,
and
.B pointer
types, and an
.B off_t
type using at least 64 bits.
.RE

.sp
.ne 2
.mk
.na
.B _CS_XBS5_ILP32_OFFBIG_LIBS
.ad
.sp .6
.RS 4n
If \fBsysconf(_SC_XBS5_ILP32_OFFBIG)\fR returns \(mi1 the meaning of this
value is unspecified.  Otherwise, this value is the set of libraries to be
given to the
.B cc
and
.B c89
utilities to build an application using
a programming model with 32-bit
.BR int ,
.BR long ,
and
.BR pointer
types, and an
.B off_t
type using at least 64 bits.
.RE

.sp
.ne 2
.mk
.na
.B _CS_XBS5_ILP32_OFFBIG_LINTFLAGS
.ad
.sp .6
.RS 4n
If \fBsysconf(_SC_XBS5_ILP32_OFFBIG)\fR returns \(mi1 the meaning of this
value is unspecified.  Otherwise, this value is the set of options to be
given to the
.B lint
utility to check an application using a programming
model with 32-bit
.BR int ,
.BR long ,
and
.B pointer
types, and an
.B off_t
type using at least 64 bits.
.RE

.sp
.LP
The
.B confstr()
function supports the following values for
.IR name ,
defined in
.BR <unistd.h> ,
for SPARC only:
.sp
.ne 2
.mk
.na
.B _CS_XBS5_LP64_OFF64_CFLAGS
.ad
.sp .6
.RS 4n
If \fBsysconf(_SC_XBS5_LP64_OFF64)\fR returns \(mi1 the meaning of this
value is unspecified.  Otherwise, this value is the set of initial options
to be given to the
.B cc
and
.B c89
utilities to build an application
using a programming model with 64-bit
.BR int ,
.BR long ,
.BR pointer ,
and
.B off_t
types.
.RE

.sp
.ne 2
.mk
.na
.B _CS_XBS5_LP64_OFF64_LDFLAGS
.ad
.sp .6
.RS 4n
If \fBsysconf(_SC_XBS5_LP64_OFF64)\fR returns \(mi1 the meaning of this
value is unspecified.  Otherwise, this value is the set of final options to
be given to the
.B cc
and
.B c89
utilities to build an application
using a programming model with 64-bit
.BR int ,
.BR long ,
.BR pointer ,
and
.B off_t
types.
.RE

.sp
.ne 2
.mk
.na
.B _CS_XBS5_LP64_OFF64_LIBS
.ad
.sp .6
.RS 4n
If \fBsysconf(_SC_XBS5_LP64_OFF64)\fR returns \(mi1 the meaning of this
value is unspecified.  Otherwise, this value is the set of libraries to be
given to the
.B cc
and
.B c89
utilities to build an application using
a programming model with 64-bit
.BR int ,
.BR long ,
.BR pointer ,
and
.B off_t
types.
.RE

.sp
.ne 2
.mk
.na
.B _CS_XBS5_LP64_OFF64_LINTFLAGS
.ad
.sp .6
.RS 4n
If \fBsysconf(_SC_XBS5_LP64_OFF64)\fR returns \(mi1 the meaning of this
value is unspecified.  Otherwise, this value is the set of options to be
given to the
.B lint
utility to check application source using a
programming model with 64-bit
.BR int ,
.BR long ,
.BR pointer ,
and
.B off_t
types.
.RE

.sp
.ne 2
.mk
.na
.B _CS_XBS5_LPBIG_OFFBIG_CFLAGS
.ad
.sp .6
.RS 4n
If \fBsysconf(_SC_XBS5_LPBIG_OFFBIG)\fR returns \(mi1 the meaning of this
value is unspecified.  Otherwise, this value is the set of initial options
to be given to the
.B cc
and
.B c89
utilities to build an application
using a programming model with an
.B int
type using at least 32 bits and
.BR long ,
.BR pointer ,
and
.B off_t
types using at least 64 bits.
.RE

.sp
.ne 2
.mk
.na
.B _CS_XBS5_LPBIG_OFFBIG_LDFLAGS
.ad
.sp .6
.RS 4n
If \fBsysconf(_SC_XBS5_LPBIG_OFFBIG)\fR returns \(mi1 the meaning of this
value is unspecified.  Otherwise, this value is the set of final options to
be given to the
.B cc
and
.B c89
utilities to build an application
using a programming model with an
.B int
type using at least 32 bits and
.BR long ,
.BR pointer ,
and
.B off_t
types using at least 64 bits.
.RE

.sp
.ne 2
.mk
.na
.B _CS_XBS5_LPBIG_OFFBIG_LIBS
.ad
.sp .6
.RS 4n
If \fBsysconf(_SC_XBS5_LPBIG_OFFBIG)\fR returns \(mi1 the meaning of this
value is unspecified.  Otherwise, this value is the set of libraries to be
given to the
.B cc
and
.B c89
utilities to build an application using
a programming model with an
.B int
type using at least 32 bits and
.BR long ,
.BR pointer ,
and
.B off_t
types using at least 64 bits.
.RE

.sp
.ne 2
.mk
.na
.B _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
.ad
.sp .6
.RS 4n
If \fBsysconf(_SC_XBS5_LPBIG_OFFBIG)\fR returns \(mi1 the meaning of this
value is unspecified.  Otherwise, this value is the set of options to be
given to the
.B lint
utility to check application source using a
programming model with an
.B int
type using at least 32 bits and
.BR long ,
.BR pointer ,
and
.B off_t
types using at least 64 bits.
.RE

.SH RETURN VALUES
.sp
.LP
If
.I name
has a configuration-defined value, the \fBconfstr()\fR
function returns the size of buffer that would be needed to hold the entire
configuration-defined value.  If this return value is greater than
.IR len ,
the string returned in
.I buf
is truncated.
.sp
.LP
If
.I name
is invalid,
.B confstr()
returns
.B 0
and sets
.B errno
to indicate the error.
.sp
.LP
If
.I name
does not have a configuration-defined value, \fBconfstr()\fR
returns
.B 0
and leaves
.B errno
unchanged.
.SH ERRORS
.sp
.LP
The
.B confstr()
function will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The value of the
.I name
argument is invalid.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelMt-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR pathconf (2),
.BR sysconf (3C),
.BR attributes (5),
.BR lfcompile (5),
.BR lfcompile64 (5),
.BR standards (5)
