'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH setlocale 3C "19 Sep 2005" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
setlocale \- modify and query a program's locale
.SH SYNOPSIS
.LP
.nf
#include <locale.h>

\fBchar *\fBsetlocale\fR(\fBint\fR \fIcategory\fR, \fBconst char *\fIlocale\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B setlocale()
function selects the appropriate piece of the
program's locale as specified by the
.I category
and
.IR locale
arguments. The
.I category
argument may have the following values:
.BR LC_CTYPE ,
.BR LC_NUMERIC ,
.BR LC_TIME ,
.BR LC_COLLATE ,
.BR LC_MONETARY ,
.BR LC_MESSAGES ,
and
.BR LC_ALL .
These names are
defined in the
.RB < locale.h >
header.  The
.B LC_ALL
variable names all
of a program's locale categories.
.sp
.LP
The
.B LC_CTYPE
variable affects the behavior of character handling
functions such as
.BR isdigit "(3C) and"
.BR tolower (3C),
and multibyte
character functions such as
.BR mbtowc "(3C) and"
.BR wctomb (3C).
.sp
.LP
The
.B LC_NUMERIC
variable affects the decimal point character and
thousands separator character for the formatted input/output functions and
string conversion functions.
.sp
.LP
The
.B LC_TIME
variable affects the date and time format as delivered by
.BR ascftime (3C),
.BR cftime (3C),
.BR getdate (3C),
.BR strftime (3C),
and
.BR strptime (3C).
.sp
.LP
The
.B LC_COLLATE
variable affects the sort order produced by collating
functions such as
.BR strcoll (3C)
and
.BR strxfrm (3C).
.sp
.LP
The
.B LC_MONETARY
variable affects the monetary formatted information
returned by
.BR localeconv (3C).
.sp
.LP
The
.B LC_MESSAGES
variable affects the behavior of messaging functions
such as
.BR dgettext (3C),
.BR gettext (3C),
and
.BR gettxt (3C).
.sp
.LP
A value of "C" for
.I locale
specifies the traditional
.B
UNIX
system
behavior. At program startup, the equivalent of
.sp
.LP
\fBsetlocale(LC_ALL, "C")\fR
.sp
.LP
is executed. This has the effect of initializing each category to the
locale described by the environment "C".
.sp
.LP
A value of "" for
.I locale
specifies that the locale should be taken
from environment variables. The order in which the environment variables are
checked for the various categories is given below:
.sp

.sp
.TS
tab() box;
cw(1.38i) |cw(1.38i) |cw(1.38i) |cw(1.38i)
lw(1.38i) |lw(1.38i) |lw(1.38i) |lw(1.38i)
.
Category1st Env Var2nd Env Var3rd Env Var
_
LC_CTYPE:LC_ALLLC_CTYPELANG
_
LC_COLLATE:LC_ALLLC_COLLATELANG
_
LC_TIME:LC_ALLLC_TIMELANG
_
LC_NUMERIC:LC_ALLLC_NUMERICLANG
_
LC_MONETARY:LC_ALLLC_MONETARYLANG
_
LC_MESSAGES:LC_ALLLC_MESSAGESLANG
.TE

.sp
.LP
If a pointer to a string is given for
.IR locale ,
.B setlocale()
attempts to set the locale for the given category to
.IR locale .
If
.B setlocale()
succeeds,
.I locale
is returned. If
.B setlocale()
fails, a null pointer is returned and the program's locale is not changed.
.sp
.LP
For category
.BR LC_ALL ,
the behavior is slightly different. If a pointer
to a string is given for
.I locale
and
.B LC_ALL
is given for
.IR category ,
.B setlocale()
attempts to set the locale for all the
categories to
.IR locale .
The
.I locale
may be a simple locale,
consisting of a single locale, or a composite locale. If the locales for all
the categories are the same after all the attempted locale changes,
.B setlocale()
will return a pointer to the common simple locale. If
there is a mixture of locales among the categories,
.B setlocale()
will
return a composite locale.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B setlocale()
returns the string associated
with the specified category for the new locale. Otherwise,
.B setlocale()
returns a null pointer and the program's locale is not changed.
.sp
.LP
A null pointer for
.I locale
causes
.B setlocale()
to return a
pointer to the string associated with the
.I category
for the program's
current locale.  The program's locale is not changed.
.sp
.LP
The string returned by
.B setlocale()
is such that a subsequent call
with that string and its associated
.I category
will restore that part of
the program's locale. The string returned must not be modified by the
program, but may be overwritten by a subsequent call to
.BR setlocale() .
.SH ERRORS
.sp
.LP
No errors are defined.
.SH FILES
.sp
.ne 2
.mk
.na
.BI /usr/lib/locale/ locale
.ad
.RS 26n
.rt
locale database directory for
.IR locale
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
CSIEnabled
_
Interface StabilityStandard
_
MT-LevelMT-Safe with exceptions
.TE

.SH SEE ALSO
.sp
.LP
.BR locale (1),
.BR ctype (3C),
.BR getdate (3C)
.BR gettext (3C),
.BR gettxt (3C),
.BR isdigit (3C),
.BR libc (3LIB),
.BR localeconv (3C),
.BR mbtowc (3C),
.BR strcoll (3C),
.BR strftime (3C),
.BR strptime (3C)
.BR strxfrm (3C)
.BR tolower (3C),
.BR wctomb (3C),
.BR attributes (5),
.BR environ (5),
.BR locale (5),
.BR standards (5)
.SH NOTES
.sp
.LP
It is unsafe for any thread to change locale (by calling
.B setlocale()
with a non-null locale argument) in a multithreaded application while any
other thread in the application is using any locale-sensitive routine. To
change locale in a multithreaded application,
.B setlocale()
should be
.RB "called prior to using any locale-sensitive routine. Using" " setlocale()"
to query the current locale is safe and can be used anywhere in a
multithreaded application except when some other thread is changing
locale.
.sp
.LP
It is the user's responsibility to ensure that mixed locale categories are
compatible. For example, setting
.B LC_CTYPE=C
and
.BR LC_TIME=ja
(where
.B ja
indicates Japanese) will not work, because Japanese time
cannot be represented in the "C" locale's ASCII codeset.
