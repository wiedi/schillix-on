'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH priv_addset 3C "28 Jan 2005" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
priv_addset, priv_allocset, priv_copyset, priv_delset, priv_emptyset,
priv_fillset, priv_freeset, priv_intersect, priv_inverse, priv_isemptyset,
priv_isequalset, priv_isfullset, priv_ismember, priv_issubset, priv_union \-
privilege set manipulation functions
.SH SYNOPSIS
.LP
.nf
#include <priv.h>

\fBint\fR \fBpriv_addset\fR(\fBpriv_set_t *\fIsp\fR, \fBconst char *\fIpriv\fR);
.fi

.LP
.nf
\fBpriv_set_t *\fBpriv_allocset\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBvoid\fR \fBpriv_copyset\fR(\fBconst priv_set_t *\fIsrc\fR, \fBpriv_set_t *\fIdst\fR);
.fi

.LP
.nf
\fBint\fR \fBpriv_delset\fR(\fBpriv_set_t *\fIsp\fR, \fBconst char *\fIpriv\fR);
.fi

.LP
.nf
\fBvoid\fR \fBpriv_emptyset\fR(\fBpriv_set_t *\fIsp\fR);
.fi

.LP
.nf
\fBvoid\fR \fBpriv_fillset\fR(\fBpriv_set_t *\fIsp\fR);
.fi

.LP
.nf
\fBvoid\fR \fBpriv_freeset\fR(\fBpriv_set_t *\fIsp\fR);
.fi

.LP
.nf
\fBvoid\fR \fBpriv_intersect\fR(\fBconst priv_set_t *\fIsrc\fR, \fBpriv_set_t *\fIdst\fR);
.fi

.LP
.nf
\fBvoid\fR \fBpriv_inverse\fR(\fBpriv_set_t *\fIsp\fR);
.fi

.LP
.nf
\fBboolean_t\fR \fBpriv_isemptyset\fR(\fBconst priv_set_t *\fIsp\fR);
.fi

.LP
.nf
\fBboolean_t\fR \fBpriv_isequalset\fR(\fBconst priv_set_t *\fIsrc\fR, \fBconst priv_set_t *\fIdst\fR);
.fi

.LP
.nf
\fBboolean_t\fR \fBpriv_isfullset\fR(\fBconst priv_set_t *\fIsp\fR);
.fi

.LP
.nf
\fBboolean_t\fR \fBpriv_ismember\fR(\fBconst priv_set_t *\fIsp\fR, \fBconst char *\fIpriv\fR);
.fi

.LP
.nf
\fBboolean_t\fR \fBpriv_issubset\fR(\fBconst priv_set_t *\fIsrc\fR, \fBconst priv_set_t *\fIdst\fR);
.fi

.LP
.nf
\fBvoid\fR \fBpriv_union\fR(\fBconst priv_set_t *\fIsrc\fR, \fBpriv_set_t *\fIdst\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.IR sp ,
.IR src ,
and
.I dst
arguments point to privilege sets.
The
.I priv
argument points to a named privilege.
.sp
.LP
The
.B priv_addset()
function adds the named privilege
.I priv
to
.IR sp .
.sp
.LP
The
.B priv_allocset()
function allocates sufficient memory to contain a
privilege set. The value of the returned privilege set is indeterminate. The
function returns
.I NULL
and sets
.B errno
when it fails to allocate
memory.
.sp
.LP
The
.B priv_copyset()
function copies the set
.I src
to
.IR dst .
.sp
.LP
The
.B priv_delset()
function removes the named privilege
.IR priv
from
.IR sp .
.sp
.LP
The
.B priv_emptyset()
function clears all privileges from
.IR sp .
.sp
.LP
The \fBpriv_fillset()\fR function asserts all privileges in \fIsp\fR,
including the privileges not currently defined in the system.
.sp
.LP
The \fBpriv_freeset()\fR function frees the storage allocated by
.BR priv_allocset() .
.sp
.LP
The
.B priv_intersect()
function intersects
.I src
with
.I dst
and
places the results in
.IR dst .
.sp
.LP
The
.B priv_inverse()
function inverts the privilege set given as
argument in place.
.sp
.LP
The
.B priv_isemptyset()
function checks whether the argument is an
empty set.
.sp
.LP
The
.B priv_isequalset()
function checks whether the privilege set
\fIsrc\fR is equal to \fIdst\fR.
.sp
.LP
The \fBpriv_isfullset()\fR function checks whether the argument is a full
set. A full set is a set with all bits set, regardless of whether the
privilege is currently defined in the system.
.sp
.LP
The
.B priv_ismember()
function checks whether the named privilege
\fIpriv\fR is a member of \fIsp\fR.
.sp
.LP
The
.B priv_issubset()
function checks whether
.I src
is a subset of
.IR dst .
.sp
.LP
The
.B priv_union()
function takes the union of
.I src
and
.IR dst
and places the result in
.IR dst .
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B priv_allocset()
returns a pointer to an
opaque data structure. It returns
.I NULL
if memory allocation fails and
sets
.B errno
to indicate the error.
.sp
.LP
Upon successful completion, \fBpriv_isemptyset()\fR,
\fBpriv_isfullset()\fR, \fBpriv_isequalset()\fR,
.BR priv_issubset() ,
and
\fBpriv_ismember()\fR return
.BR B_TRUE .
Otherwise, they return
.BR B_FALSE .
.sp
.LP
Upon successful completion,
.B priv_delset()
and
.BR priv_addset()
return 0. Otherwise, they return -1 and set
.B errno
to indicate the
error.
.SH ERRORS
.sp
.LP
The
.B priv_allocset()
function will fail if:
.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
The physical limits of the system are exceeded by the memory allocation
needed to hold a privilege set.
.RE

.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
There is insufficient memory for allocation to hold a privilege set. The
application can try again later.
.RE

.sp
.LP
The
.B priv_delset()
and
.B priv_addset()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The privilege argument is not a valid privilege name.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR setppriv (2),
.BR malloc (3C),
.BR priv_str_to_set (3C),
.BR attributes (5),
.BR privileges (5)
.SH NOTES
.sp
.LP
The functions that compare sets operate on all bits of the set, regardless
of whether the specific privileges are currently defined in the system.
