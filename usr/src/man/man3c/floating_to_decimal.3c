'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH floating_to_decimal 3C "7 Jun 2005" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
floating_to_decimal, single_to_decimal, double_to_decimal,
extended_to_decimal, quadruple_to_decimal \- convert floating-point value to
decimal record
.SH SYNOPSIS
.LP
.nf
#include <floatingpoint.h>

\fBvoid\fR \fBsingle_to_decimal\fR(\fBsingle *\fIpx\fR, \fBdecimal_mode *\fIpm\fR,
     \fBdecimal_record *\fIpd\fR, \fBfp_exception_field_type *\fIps\fR);
.fi

.LP
.nf
\fBvoid\fR \fBdouble_to_decimal\fR(\fBdouble *\fIpx\fR, \fBdecimal_mode *\fIpm\fR,
     \fBdecimal_record *\fIpd\fR, \fBfp_exception_field_type *\fIps\fR);
.fi

.LP
.nf
\fBvoid\fR \fBextended_to_decimal\fR(\fBextended *\fIpx\fR, \fBdecimal_mode *\fIpm\fR,
     \fBdecimal_record *\fIpd\fR, \fBfp_exception_field_type *\fIps\fR);
.fi

.LP
.nf
\fBvoid\fR \fBquadruple_to_decimal\fR(\fBquadruple *\fIpx\fR, \fBdecimal_mode *\fIpm\fR,
     \fBdecimal_record *\fIpd\fR, \fBfp_exception_field_type *\fIps\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B floating_to_decimal
functions convert the floating-point value at
.I *px
into a decimal record at
.RI * pd ,
observing the modes specified
.RI "in *" pm " and setting exceptions in *" ps .
If there are no IEEE
exceptions,
.RI * ps
will be zero.
.sp
.LP
If
.RI * px
is zero, infinity, or NaN, then only \fIpd\fR\(->\fIsign\fR
and
.IR pd \(-> fpclass
are set. Otherwise \fIpd\fR\(->\fIexponent\fR
.RI "and " pd \(-> ds
are also set so that
.sp
.in +2
.nf
(sig)*(pd->ds)*10**(pd->exponent)
.fi
.in -2

.sp
.LP
is a correctly rounded approximation to
.RI * px ,
where
.I sig
is +1 or
\(mi1, depending upon whether \fIpd\fR\(->\fIsign\fR is  0 or \(mi1.
.IR pd \(-> ds
has at least one and no more than
.BR DECIMAL_STRING_LENGTH -1
significant digits because one character is
used to terminate the string with a null.
.sp
.LP
.IR pd \(-> ds
is correctly rounded according to the IEEE rounding
modes in \fIpm\fR\(->\fIrd\fR. *\fIps\fR has
.I fp_inexact
set if the
result was inexact, and has
.I fp_overflow
set if the string result does
.RI "not fit in " pd \(-> ds
because of the limitation
.BR DECIMAL_STRING_LENGTH .
.sp
.LP
.RI "If " pm \(-> df
==
.IR floating_form ,
then
.IR pd \(->\fIds\fR
.RI "always contains " pm \(-> ndigits
significant digits. Thus if
.RI * px
.RI "== 12.34 and " pm \(-> ndigits
== 8, then
.IR pd \(-> ds
will contain 12340000 and \fIpd\fR\(->\fIexponent\fR
will contain \(mi6.
.sp
.LP
.RI "If " pm \(-> df
==
.I fixed_form
and
.IR pm \(-> ndigits
.RI ">= 0, then the decimal value is rounded at " pm \(-> ndigits
digits
to the right of the decimal point. For example, if
.RI * px
== 12.34 and
.IR pm \(-> ndigits
.RI "== 1, then " pd \(-> ds
will contain 123
and
.IR pd \(-> exponent
will be set to \(mi1.
.sp
.LP
.RI "If " pm \(-> df
==
.I fixed_form
and
\fIpm\fR\(->\fIndigits\fR<
0, then the decimal value is rounded at \(mi\fIpm\fR\(->\fIndigits\fR digits
.RI "to the left of the decimal point, and " pd \(-> ds
is padded with
trailing zeros up to the decimal point. For example, if
.RI * px
== 12.34
and
.IR pm \(-> n
digits == \(mi1, then \fIpd\fR\(->\fIds\fR will
.RI "contain 10 and " pd \(-> exponent
will be set to 0.
.sp
.LP
.RI "When " pm \(-> df
==
.I fixed_form
and the value to be converted
is large enough that the  resulting string would contain more than
.BR DECIMAL_STRING_LENGTH \(mi1
digits, then the string placed in
.IR pd \(-> ds
is limited to exactly
.BR DECIMAL_STRING_LENGTH -1
digits (by moving the place at which the value is rounded further left if
.RI "need be), " pd \(-> exponent
is adjusted accordingly and the
overflow flag is set in *\fIps\fR.
.sp
.LP
.I pd->more
is not used.
.sp
.LP
The
.BR econvert (3C),
\fBfconvert\fR(3C),
.BR gconvert (3C),
.BR printf (3C),
and
.BR sprintf (3C)
functions all use
.BR double_to_decimal() .
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR econvert (3C),
.BR fconvert (3C),
.BR gconvert (3C),
.BR printf (3C),
.BR sprintf (3C),
.BR attributes (5)
