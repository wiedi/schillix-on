'\" te
.\" Copyright (c) 2001, the Institute of Electrical and Electronics Engineers,
.\" Inc. and The Open Group. All Rights Reserved.
.\" Copyright (c) 1995 IEEE  All Rights Reserved.
.\" Copyright 1991, 1992, 1994, The X/Open Company Ltd.
.\" Portions Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH pthread_atfork 3C "12 Dec 2003" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
pthread_atfork \- register fork handlers
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <unistd.h>

\fBint\fR \fBpthread_atfork\fR(\fBvoid (*\fIprepare\fR) (void), \fBvoid (*\fIparent\fR) (void),
     \fBvoid (*\fIchild\fR) (void));
.fi

.SH DESCRIPTION
.sp
.LP
The
.B pthread_atfork()
function declares fork handlers to be called prior
to and following
.BR fork (2),
within the thread that called
.BR fork() .
The
order of calls to
.B pthread_atfork()
is significant.
.sp
.LP
Before
.B fork()
processing begins, the
.I prepare
fork handler is
called. The
.I prepare
handler is not called if its address is
.IR NULL.

.sp
.LP
The
.I parent
fork handler is called after
.B fork()
processing finishes
in the parent process, and the
.I child
fork handler is called after
.B fork()
processing finishes in the child process. If the address of
.I parent
or
.I child
is
.IR NULL ,
then its handler is not called.
.sp
.LP
The
.I prepare
fork handler is called in
.B LIFO
(last-in first-out)
order, whereas the
.I parent
and
.I child
fork handlers are called in
.B FIFO
(first-in first-out) order. This calling order allows applications
to preserve locking order.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B pthread_atfork()
returns
.BR 0 .
Otherwise,
an error number is returned.
.SH ERRORS
.sp
.LP
The
.B pthread_atfork()
function will fail if:
.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 11n
.rt
Insufficient table space exists to record the fork handler addresses.
.RE

.SH USAGE
.sp
.LP
Solaris threads do not offer
.B pthread_atfork()
functionality (there is no
.B thr_atfork()
interface). However, a Solaris threads application can call
.B pthread_atfork()
to ensure
.BR fork() -safety,
since the two thread APIs
.RB "are interoperable. See" fork "(2) for information relating to " fork() " in"
a Solaris threads environment in Solaris 10 relative to previous releases.
.SH EXAMPLES
.LP
.B Example 1
Make a library safe with respect to
.BR fork() .
.sp
.LP
All multithreaded applications that call
.B fork()
in a POSIX threads
program and do more than simply call
.BR exec (2)
in the child of the fork
need to ensure that the child is protected from deadlock.

.sp
.LP
Since the "fork-one" model results in duplicating only the thread that called
.BR fork() ,
it is possible that at the time of the call another thread in the
parent owns a lock. This thread is not duplicated in the child, so no thread
will unlock this lock in the child.  Deadlock occurs if the single thread in
the child needs this lock.

.sp
.LP
The problem is more serious with locks in libraries.  Since a library writer
does not know if the application using the library calls
.BR fork() ,
the
library must protect itself from such a deadlock scenario.  If the application
.RB "that links with this library calls " fork() " and does not call  " exec() 
in the child, and if it needs a library lock that may be held by some other
thread in the parent that is inside the library at the time of the fork, the
application deadlocks inside the library.

.sp
.LP
The following describes how to make a library  safe with respect to
.B fork()
by using 
.BR pthread_atfork() .

.RS +4
.TP
1.
Identify all locks used by the library (for example
.BR {L1,\|.\|.\|.Ln} ).
Identify also the locking order for these locks (for example
\fB{L1\|.\|.\|.Ln}, as well\fR.)
.RE
.RS +4
.TP
2.
Add a call to
.B pthread_atfork(f1, f2, f3)
in the  library's \fI\&.init\fR
section.
.BR f1 ,
.BR f2 ,
.B f3
are defined as follows:
.RE
.sp
.in +2
.nf
\fB        f1(\|)
        {
                /* ordered in lock order */
                pthread_mutex_lock(L1);
                pthread_mutex_lock(\|.\|.\|.);
                pthread_mutex_lock(Ln);
        }

        f2(\|)
        {
                pthread_mutex_unlock(L1);
                pthread_mutex_unlock(\|.\|.\|.);
                pthread_mutex_unlock(Ln);
        }

        f3(\|)
        {
                pthread_mutex_unlock(L1);
                pthread_mutex_unlock(\|.\|.\|.);
                pthread_mutex_unlock(Ln);
        }\fR
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR exec (2),
.BR fork (2),
.BR atexit (3C),
.BR attributes (5),
.BR standards (5)
