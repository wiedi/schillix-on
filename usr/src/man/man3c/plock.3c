'\" te
.\" Copyright 1989 AT&T.  Copyright (c) 2004, Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH plock 3C "22 Mar 2004" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
plock \- lock or unlock into memory process, text, or data
.SH SYNOPSIS
.LP
.nf
#include <sys/lock.h>

\fBint\fR \fBplock\fR(\fBint\fR \fIop\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B plock()
function allows the calling process to lock or unlock
into memory its text segment (text lock), its data segment (data lock), or
both its text and data segments (process lock). Locked segments are immune
to all routine swapping. The effective user ID of the calling process must
be super-user to use this call.
.sp
.LP
The
.B plock()
function performs the function specified by
.IR op :
.sp
.ne 2
.mk
.na
.B PROCLOCK
.ad
.RS 12n
.rt
Lock text and data segments into memory (process lock).
.RE

.sp
.ne 2
.mk
.na
.B TXTLOCK
.ad
.RS 12n
.rt
Lock text segment into memory (text lock).
.RE

.sp
.ne 2
.mk
.na
.B DATLOCK
.ad
.RS 12n
.rt
Lock data segment into memory (data lock).
.RE

.sp
.ne 2
.mk
.na
.B UNLOCK
.ad
.RS 12n
.rt
Remove locks.
.RE

.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B 0
is returned. Otherwise,
.B \(mi1
is
returned and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B plock()
function fails and does not perform the requested
operation if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
Not enough memory.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I op
argument is equal to
.B PROCLOCK
and a process lock, a text
.RI "lock, or a data lock already exists on the calling process; the" " op"
argument is equal to
.B TXTLOCK
and a text lock or a process lock already
exists on the calling process; the
.I op
argument is equal to
\fBDATLOCK\fR and a data lock or a process lock already exists on the
calling process; or the
.I op
argument is equal to
.B UNLOCK
and no
lock exists on the calling process.
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 10n
.rt
The {\fBPRIV_PROC_LOCK_MEMORY\fR} privilege is not asserted in the
effective set of the calling process.
.RE

.SH USAGE
.sp
.LP
The \fBmlock\fR(3C) and \fBmlockall\fR(3C) functions are the preferred
interfaces for process locking.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR exec (2),
.BR exit (2),
.BR fork (2),
.BR memcntl (2),
.BR mlock (3C),
.BR mlockall (3C),
.BR attributes (5)
