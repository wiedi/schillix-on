'\" te
.\" Copyright (c) 1996, Sun Microsystems, Inc.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH decimal_to_floating 3C "1 Oct 2001" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
decimal_to_floating, decimal_to_single, decimal_to_double,
decimal_to_extended, decimal_to_quadruple \- convert decimal record to
floating-point value
.SH SYNOPSIS
.LP
.nf
#include <floatingpoint.h>

\fBvoid\fR \fBdecimal_to_single\fR(\fBsingle *\fIpx\fR, \fBdecimal_mode *\fIpm\fR,
     \fBdecimal_record *\fIpd\fR, \fBfp_exception_field_type *\fIps\fR);
.fi

.LP
.nf
\fBvoid\fR \fBdecimal_to_double\fR(\fBdouble *\fIpx\fR, \fBdecimal_mode *\fIpm\fR,
     \fBdecimal_record *\fIpd\fR, \fBfp_exception_field_type *\fIps\fR);
.fi

.LP
.nf
\fBvoid\fR \fBdecimal_to_extended\fR(\fBextended *\fIpx\fR, \fBdecimal_mode *\fIpm\fR,
     \fBdecimal_record *\fIpd\fR, \fBfp_exception_field_type *\fIps\fR);
.fi

.LP
.nf
\fBvoid\fR \fBdecimal_to_quadruple\fR(\fBquadruple *\fIpx\fR, \fBdecimal_mode *\fIpm\fR,
     \fBdecimal_record *\fIpd\fR, \fBfp_exception_field_type *\fIps\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions convert the decimal record
.RI * pd
to a floating-point
.RI "value *" px " observing the rounding direction specified in *" pm " and"
setting
.RI * ps
to reflect any floating-point exceptions that occur.
.sp
.LP
When
.IR pd ->\c
.B fpclass
is
.BR fp_zero ,
\fBfp_infinity\fR,
.BR fp_quiet ,
or
.BR fp_signaling ,
.RI * px
is set to zero, infinity, a
quiet NaN, or a signaling NaN, respectively, with the sign indicated by
.I
pd\c
.RB -> sign .
All other fields in
.RI * pd
are ignored.
.sp
.LP
When
.IR pd ->\c
.B fpclass
is
.B fp_normal
or
.BR fp_subnormal ,
.IR pd ->\c
.B ds
must contain a null-terminated string of one or more
ASCII digits representing a non-zero integer
.IR m ,
and
.IR pd ->\c
.B ndigits
must be equal to the length of this string. Then
.RI * px
is set to a correctly rounded approximation to
.sp
.in +2
.nf
\(mi1**(pd->sign) * m * 10**(pd->exponent)
.fi
.in -2

.sp
.LP
.IR pd ->\c
.B more
can be set to a non-zero value to indicate that
.RI "insignificant trailing digits were omitted from " pd ->\c
.BR ds .
In this
case,
.I m
is replaced by
.I m
+
.I delta
in the expression above,
where
.I delta
is some tiny positive fraction.
.sp
.LP
The converted value is rounded according to the rounding direction
.RI "specified in " pm ->\c
.BR rd .
.IR pm ->\c
.B df
and
.IR pm ->\c
.B ndigits
are not used.
.sp
.LP
On exit,
.RI * ps
contains a bitwise OR of flags corresponding to any
floating-point exceptions that occurred. The only possible exceptions are
underflow, overflow, and inexact.  If no floating-point exceptions occurred,
.RI * ps
is set to zero.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR scanf (3C),
.BR string_to_decimal (3C),
.BR strtod (3C),
.BR attributes (5)
