'\" te
.\" Copyright (c) 1997 Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH thr_min_stack 3C "12 May 1998" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
thr_min_stack \- return the minimum-allowable size for a thread's stack
.SH SYNOPSIS
.LP
.nf
cc -mt [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|.[ \fIlibrary\fR.\|.\|. ]
#include <thread.h>

\fBsize_t\fR \fBthr_min_stack\fR(\fIvoid\fR);
.fi

.SH DESCRIPTION
.sp
.LP
When a thread is created with a user-supplied stack, the user must reserve
enough space to run this thread. In a dynamically linked execution
environment, it is very hard to know what the minimum stack requirments are
for a thread. The function
.B thr_min_stack()
returns the amount of space
needed to execute a null thread. This is a thread that was created to
execute a null procedure. A thread that does something useful should have a
stack size that is
.B thr_min_stack()
+
.IR "<some increment>" \&.
.sp
.LP
Most users should not be creating threads with user-supplied stacks. This
functionality was provided to support applications that wanted complete
control over their execution environment.
.sp
.LP
Typically, users should let the threads library manage stack allocation.
The threads library provides default stacks which should meet the
requirements of any created thread.
.sp
.LP
.B thr_min_stack()
will return the unsigned int
.BR THR_MIN_STACK,
which is the minimum-allowable size for a thread's stack.
.sp
.LP
In this implementation the default size for a user-thread's stack is one
mega-byte. If the second argument to
.BR thr_create (3C)
is
.B NULL,
then the default stack size for the newly-created thread will be used.
Otherwise, you may specify a stack-size that is at least
.B THR_MIN_STACK,
yet less than the size of your machine's virtual
memory.
.sp
.LP
It is recommended that the default stack size be used.
.sp
.LP
To determine the smallest-allowable size for a thread's stack, execute the
following:
.sp
.in +2
.nf
/* cc thisfile.c -lthread */
#define _REENTRANT
#include <thread.h>
#include <stdio.h>
main(\|)  {
        printf("thr_min_stack(\|) returns %u\en",thr_min_stack(\|));
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR attributes (5),
.BR standards (5)
