'\" te
.\" Copyright (c) 2008 Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH getspnam 3C "23 Jan 2008" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
getspnam, getspnam_r, getspent, getspent_r, setspent, endspent, fgetspent,
fgetspent_r \- get password entry
.SH SYNOPSIS
.LP
.nf
#include <shadow.h>

\fBstruct spwd *\fBgetspnam\fR(\fBconst char *\fIname\fR);
.fi

.LP
.nf
\fBstruct spwd *\fBgetspnam_r\fR(\fBconst char *\fIname\fR, \fBstruct spwd *\fIresult\fR,
     \fBchar *\fIbuffer\fR, \fBint\fR \fIbuflen\fR);
.fi

.LP
.nf
\fBstruct spwd *\fBgetspent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBstruct spwd *\fBgetspent_r\fR(\fBstruct spwd *\fIresult\fR, \fBchar *\fIbuffer\fR,
     \fBint\fR \fIbuflen\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsetspent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBvoid\fR \fBendspent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBstruct spwd *\fBfgetspent\fR(\fBFILE *\fIfp\fR);
.fi

.LP
.nf
\fBstruct spwd *\fBfgetspent_r\fR(\fBFILE *\fIfp\fR, \fBstruct spwd *\fIresult\fR,
     \fBchar *\fIbuffer\fR, \fBint\fR \fIbuflen\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions are used to obtain shadow password entries.  An entry may
come from any of the sources for
.B shadow
specified in the
.B /etc/nsswitch.conf
file (see
.BR nsswitch.conf (4)).
.sp
.LP
The
.B getspnam()
function searches for a shadow password entry with the
login name specified by the character string argument
.IR name .
.sp
.LP
The
.BR setspent() ,
.BR getspent() ,
and
.B endspent()
functions are
used to enumerate shadow password entries from the database.
.sp
.LP
The
.B setspent()
function sets (or resets) the enumeration to the
beginning of the set of shadow password entries.  This function should be
called before the first call to
.BR getspent() .
Calls to
.BR getspnam()
leave the enumeration position in an indeterminate state.
.sp
.LP
Successive calls to
.B getspent()
return either successive entries or
.IR NULL ,
indicating the end of the enumeration.
.sp
.LP
The
.B endspent()
function may be called to indicate that the caller
expects to do no further shadow password retrieval operations; the system
may then  close the shadow password file, deallocate resources it was using,
and so forth.  It is still allowed, but possibly less efficient, for the
process to call more shadow password functions after calling
.BR endspent() .
.sp
.LP
The
.B fgetspent()
function, unlike the other functions above, does not
use
.BR nsswitch.conf ;
it reads and parses the next line from the stream
.IR fp ,
which is assumed to have the format of the
.B shadow
file (see
.BR shadow (4)).
.SS "Reentrant Interfaces"
.sp
.LP
The
.BR getspnam() ,
.BR getspent() ,
and
.B fgetspent()
functions
use thread-specific data storage that is reused in each call to one of these
functions by the same thread, making them safe to use but not recommended
for multithreaded applications.
.sp
.LP
The
.BR getspnam_r() ,
.BR getspent_r() ,
and
.B fgetspent_r()
functions provide reentrant interfaces for these operations.
.sp
.LP
Each reentrant interface performs the same operation as its non-reentrant
counterpart, named by removing the
.B _r
suffix.  The reentrant
interfaces, however, use buffers supplied by the caller to store returned
results, and  are safe for use in both single-threaded and multithreaded
applications.
.sp
.LP
Each reentrant interface takes the same argument as its non-reentrant
counterpart, as well as the following additional arguments.  The
.I result
argument must be a pointer to a
.B "struct spwd"
structure
allocated by the caller.  On successful completion, the function returns the
shadow password entry in this structure. The
.I buffer
argument must be
a pointer to a buffer supplied by the caller.  This buffer is used as
storage space for the shadow password data.  All of the pointers within the
returned
.B "struct spwd"
.I result
point to data stored within this
buffer (see
.BR "RETURN VALUES" ).
The buffer must be large enough to hold
all of the data associated with the shadow password entry. The
.I buflen
argument should give the size in bytes of the buffer indicated by
.I buffer.
.sp
.LP
For enumeration in multithreaded applications, the position within the
enumeration is a process-wide property shared by all threads. The
.B setspent()
function may be used in a multithreaded application but
resets the enumeration position for all threads.  If multiple threads
interleave calls to
.BR getspent_r() ,
the threads will enumerate disjoint
subsets of the shadow password database.
.sp
.LP
Like its non-reentrant counterpart,
.B getspnam_r()
leaves the
enumeration position in an indeterminate state.
.SH RETURN VALUES
.sp
.LP
Password entries are represented by the
.B "struct spwd"
structure defined
in
.BR <shadow.h> :
.sp
.in +2
.nf
\fBstruct spwd{
    char           *sp_namp;     /* login name */
    char           *sp_pwdp;     /* encrypted passwd */
    int            sp_lstchg;    /* date of last change */
    int            sp_min;       /* min days to passwd change */
    int            sp_max;       /* max days to passwd change*/
    int            sp_warn;      /* warning period */
    int            sp_inact;     /* max days inactive */
    int            sp_expire;    /* account expiry date */
    unsigned int   sp_flag;      /* not used */
};\fR
.fi
.in -2

.sp
.LP
See
.BR shadow (4)
for more information on the interpretation of this
data.
.sp
.LP
The 
.BR getspnam() and
\fBgetspnam_r()\fR functions each return a pointer
to a
.B "struct spwd"
if they successfully locate the requested entry;
otherwise they return
.IR NULL .
.sp
.LP
The
.BR getspent() ,
.BR getspent_r() ,
.BR fgetspent() ,
and
.B fgetspent()
functions each return a pointer to a
.B "struct spwd"
if
they successfully enumerate an entry; otherwise they return
.IR NULL ,
indicating the end of the enumeration.
.sp
.LP
The
.BR getspnam() ,
.BR getspent() ,
and
.B fgetspent()
functions
use thread-specific data storage, so returned data must be copied before a
subsequent call to any of these functions if the data is to be saved.
.sp
.LP
When the pointer returned by the reentrant functions
.BR getspnam_r() ,
.BR getspent_r() ,
and
.B fgetspent_r()
is non-null, it is always equal
to the
.I result
pointer that was supplied by the caller.
.SH ERRORS
.sp
.LP
The reentrant functions
.BR getspnam_r() ,
.BR getspent_r() ,
and
.B fgetspent_r()
will return
.B NULL
and set
.B errno
to
.B ERANGE
if the length of the buffer supplied by caller is not large
enough to store the result.  See
.BR Intro (2)
for the proper usage and
interpretation of
.B errno
in multithreaded applications.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelT{
See "Reentrant Interfaces" in \fBDESCRIPTION\fR.
T}
.TE

.SH SEE ALSO
.sp
.LP
.BR nispasswd (1),
.BR passwd (1),
.BR yppasswd (1),
.BR Intro (3),
.BR getlogin (3C),
.BR getpwnam (3C),
.BR nsswitch.conf (4),
.BR passwd (4),
.BR shadow (4),
.BR attributes (5)
.SH WARNINGS
.sp
.LP
The reentrant interfaces
.BR getspnam_r() ,
.BR getspent_r() ,
and
.B fgetspent_r()
are included in this release on an uncommitted basis
only, and are subject to change or removal in future minor releases.
.SH NOTES
.sp
.LP
When compiling multithreaded applications, see
.BR Intro (3),
\fINotes On
Multithreaded Applications\fR, for information about the use of the
.B _REENTRANT
flag.
.sp
.LP
Use of the enumeration interfaces
.B getspent()
and
.BR getspent_r()
is not recommended; enumeration is supported for the shadow file,
.B NIS,
and
.B NIS+,
but in general is not efficient and may not be supported for
all database sources.  The semantics of enumeration are discussed further in
.BR nsswitch.conf (4).
.sp
.LP
Access to shadow password information may be restricted in a manner
depending on the database source being used.  Access to the
.B /etc/shadow
file is generally restricted to processes running with the
effective uid of the file owner or the
.RB { PRIV_FILE_DAC_READ }
privilege.
Other database sources may impose stronger or less stringent restrictions.
.sp
.LP
Empty fields in the database source return -1 values for all fields except
.B sp_pwdp
and
.BR sp_flag ,
where the value returned is 0.
.sp
.LP
When
.B NIS
is used as the database source,  the information for the
shadow password entries is obtained from the ``passwd.byname'' map. This map
stores only the information for the
.B sp_namp
and
.B sp_pwdp
fields
of the
.B "struct spwd"
structure. Shadow password entries obtained from
.B NIS
will contain the value
.B -1
in the remainder of the fields.
.sp
.LP
When
.B NIS+
is used as the database source, and the caller lacks the
permission needed to retrieve the encrypted password from the
.BR NIS+
``passwd.org_dir'' table, the
.B NIS+
service returns the string ``*NP*''
instead of the actual encrypted password string.  The functions described on
this page will then return the string ``*NP*'' to the caller as the value of
the member
.B sp_pwdp
in the returned shadow password structure.
