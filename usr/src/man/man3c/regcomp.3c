'\" te
.\" Copyright (c) 1992, X/Open Company Limited. All Rights Reserved.
.\" Portions Copyright (c) 2003, Sun Microsystems, Inc.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH regcomp 3C "1 Nov 2003" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
regcomp, regexec, regerror, regfree \- regular expression matching
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <regex.h>

\fBint\fR \fBregcomp\fR(\fBregex_t *restrict\fR \fIpreg\fR, \fBconst char *restrict\fR \fIpattern\fR,
     \fBint\fR \fIcflags\fR);
.fi

.LP
.nf
\fBint\fR \fBregexec\fR(\fBconst regex_t *restrict\fR \fIpreg\fR,
     \fBconst char *restrict\fR \fIstring\fR, \fBsize_t\fR \fInmatch\fR,
     \fBregmatch_t\fR \fIpmatch\fR[restrict], \fBint\fR \fIeflags\fR);
.fi

.LP
.nf
\fBsize_t\fR \fBregerror\fR(\fBint\fR \fIerrcode\fR, \fBconst regex_t *restrict\fR \fIpreg\fR,
     \fBchar *restrict\fR \fIerrbuf\fR, \fBsize_t\fR \fIerrbuf_size\fR);
.fi

.LP
.nf
\fBvoid\fR \fBregfree\fR(\fBregex_t *\fIpreg\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions interpret
.I basic
and
.I extended
regular
expressions (described on the
.BR regex (5)
manual page).
.sp
.LP
The structure type
.B regex_t
contains at least the following member:
.sp
.ne 2
.mk
.na
.B size_t re_nsub
.ad
.RS 18n
.rt
Number of parenthesised subexpressions.
.RE

.sp
.LP
The structure type
.B regmatch_t
contains at least the following
members:
.sp
.ne 2
.mk
.na
.B regoff_t rm_so
.ad
.RS 18n
.rt
Byte offset from start of
.I string
to start of substring.
.RE

.sp
.ne 2
.mk
.na
.B regoff_t rm_eo
.ad
.RS 18n
.rt
Byte offset from start of
.I string
of the first character after the end
of substring.
.RE

.SS "\fBregcomp()\fR"
.sp
.LP
The
.B regcomp()
function will compile the regular expression contained
in the string pointed to by the
.I pattern
argument and place the results
in the structure pointed to by
.IR preg .
The
.I cflags
argument is the
bitwise inclusive
.B OR
of zero or more of the following flags, which are
defined in the header
.BR <regex.h> :
.sp
.ne 2
.mk
.na
.B REG_EXTENDED
.ad
.RS 16n
.rt
Use Extended Regular Expressions.
.RE

.sp
.ne 2
.mk
.na
.B REG_ICASE
.ad
.RS 16n
.rt
Ignore case in match.
.RE

.sp
.ne 2
.mk
.na
.B REG_NOSUB
.ad
.RS 16n
.rt
Report only success/fail in
.BR regexec() .
.RE

.sp
.ne 2
.mk
.na
.B REG_NEWLINE
.ad
.RS 16n
.rt
Change the handling of
.B NEWLINE
characters, as described in the
text.
.RE

.sp
.LP
The default regular expression type for
.I pattern
is a Basic Regular
Expression. The application can specify Extended Regular Expressions using
the
.B REG_EXTENDED
.I cflags
flag.
.sp
.LP
If the
.B REG_NOSUB
flag was not set in
.IR cflags ,
then
.B regcomp()
will set
.I re_nsub
to the number of parenthesised
subexpressions (delimited by \e(\e) in basic regular expressions or () in
extended regular expressions) found in
.IR " pattern" .
.SS "\fBregexec()\fR"
.sp
.LP
The
.B regexec()
function compares the null-terminated string specified
by
.I string
with the compiled regular expression
.I preg
initialized
by a previous call to
.BR regcomp() .
The
.I eflags
argument is the
bitwise inclusive
.B OR
of zero or more of the following flags, which are
defined in the header <\fBregex.h\fR>:
.sp
.ne 2
.mk
.na
.B REG_NOTBOL
.ad
.RS 14n
.rt
The first character of the string pointed to by
.I string
is not the
beginning of the line. Therefore, the circumflex character
.RI ( ^ ),
when
taken as a special character, will not match the beginning of
.IR string .
.RE

.sp
.ne 2
.mk
.na
.B REG_NOTEOL
.ad
.RS 14n
.rt
The last character of the string pointed to by
.I string
is not the end
of the line. Therefore, the dollar sign
.RI ( $ ),
when taken as a special
character, will not match the end of
.IR string .
.RE

.sp
.LP
If
.I nmatch
is zero or
.B REG_NOSUB
was set in the \fIcflags\fR
argument to
.BR regcomp() ,
then
.B regexec()
will ignore the
.I pmatch
argument. Otherwise, the
.I pmatch
argument must point to an
array with at least
.I nmatch
elements, and
.B regexec()
will fill in
the elements of that array with offsets of the substrings of
.IR string
that correspond to the parenthesised subexpressions of
.IR pattern :
\fIpmatch\fB[\fIi\fB]\fR.\fIrm_so\fR will be the byte offset of the
beginning and \fIpmatch\fB[\fIi\fB]\fR.\fIrm_eo\fR will be one
greater than the byte offset of the end of substring
.IR i .
(Subexpression
.I i
begins at the \fIi\fRth matched open parenthesis, counting from 1.)
Offsets in \fIpmatch\fB[0]\fR identify the substring that corresponds to
the entire regular expression. Unused elements of
.I pmatch
up to
\fIpmatch\fB[\fInmatch\fB\(mi1]\fR will be filled with
\fB\(mi1\fR\&. If there are more than \fInmatch\fR subexpressions in
.I pattern
(\fIpattern\fR itself counts as a subexpression), then
.B regexec()
will still do the match, but will record only the first
.I nmatch
substrings.
.sp
.LP
When matching a basic or extended regular expression, any given
parenthesised subexpression of
.I pattern
might participate in the match
of several different substrings of
.IR string ,
or it might not match any
substring even though the pattern as a whole did match. The following rules
are used to determine which substrings to report in
.I pmatch
when
matching regular expressions:
.sp
.ne 2
.mk
.na
.B 1.
.ad
.RS 6n
.rt
If subexpression
.I i
in a regular expression is not contained within
another subexpression, and it participated in the match several times, then
the byte offsets in \fIpmatch\fB[\fIi\fB]\fR will delimit the last
such match.
.RE

.sp
.ne 2
.mk
.na
.B 2.
.ad
.RS 6n
.rt
If subexpression
.I i
is not contained within another subexpression, and
it did not participate in an otherwise successful match, the byte offsets in
\fIpmatch\fB[\fIi\fB]\fR will be \fB\(mi1\fR\&. A subexpression
does not participate in the match when:
.sp
.B *
or \fB\e{\e}\fR  appears immediately after the subexpression in a
basic regular expression, or
.BR * ,
.BR ? ,
or \fB{\|}\fR appears
immediately after the subexpression in an extended regular expression, and
the subexpression did not match (matched zero times)
.sp
or
.sp
.B |
is used in an extended regular expression to select this
subexpression or another, and the other subexpression matched.
.RE

.sp
.ne 2
.mk
.na
.B 3.
.ad
.RS 6n
.rt
If subexpression
.I i
is contained within another subexpression
.IR j ,
and
.I i
is not contained within any other subexpression that is
contained within
.IR j ,
and a match of subexpression
.I j
is reported
in \fIpmatch\fB[\fIj\fB]\fR, then the match or non-match of
subexpression \fIi\fR reported in \fIpmatch\fB[\fIi\fB]\fR will be
as described in 1. and 2. above, but within the substring reported in
\fIpmatch\fB[\fIj\fB]\fR rather than the whole string.
.RE

.sp
.ne 2
.mk
.na
.B 4.
.ad
.RS 6n
.rt
If subexpression
.I i
is contained in subexpression
.IR j ,
and the
byte offsets in \fIpmatch\fB[\fIj\fB]\fR are \fB\(mi1\fR, then the
pointers in \fIpmatch\fB[\fIi\fB]\fR also will be \fB\(mi1\fR\&.
.RE

.sp
.ne 2
.mk
.na
.B 5.
.ad
.RS 6n
.rt
If subexpression
.I i
matched a zero-length string, then both byte
offsets in \fIpmatch\fB[\fIi\fB]\fR will be the byte offset of the
character or
.I NULL
terminator immediately following the zero-length
string.
.RE

.sp
.LP
If, when
.B regexec()
is called, the locale is different from when the
regular expression was compiled, the result is undefined.
.sp
.LP
If
.B REG_NEWLINE
is not set in
.IR cflags ,
then a
.BR NEWLINE
character in
.I pattern
or
.I string
will be treated as an ordinary
character. If
.B REG_NEWLINE
is set, then newline will be treated as an
ordinary character except as follows:
.sp
.ne 2
.mk
.na
.B 1.
.ad
.RS 6n
.rt
A
.B NEWLINE
character in
.I string
will not be matched by a period
outside a bracket expression or by any form of a non-matching list.
.RE

.sp
.ne 2
.mk
.na
.B 2.
.ad
.RS 6n
.rt
A circumflex (^) in
.IR pattern ,
when used to specify expression
anchoring will match the zero-length string immediately after a newline in
.IR string ,
regardless of the setting of
.BR REG_NOTBOL .
.RE

.sp
.ne 2
.mk
.na
.B 3.
.ad
.RS 6n
.rt
A dollar-sign ($) in
.IR pattern ,
when used to specify expression
anchoring, will match the zero-length string immediately before a newline in
.IR string ,
regardless of the setting of
.BR REG_NOTEOL.
.RE

.SS "\fBregfree()\fR"
.sp
.LP
The \fBregfree()\fR function frees any memory allocated by \fBregcomp()\fR
associated with
.IR preg .
.sp
.LP
The following constants are defined as error return values:
.sp
.ne 2
.mk
.na
.B REG_NOMATCH
.ad
.RS 16n
.rt
The
.B regexec()
function failed to match.
.RE

.sp
.ne 2
.mk
.na
.B REG_BADPAT
.ad
.RS 16n
.rt
Invalid regular expression.
.RE

.sp
.ne 2
.mk
.na
.B REG_ECOLLATE
.ad
.RS 16n
.rt
Invalid collating element referenced.
.RE

.sp
.ne 2
.mk
.na
.B REG_ECTYPE
.ad
.RS 16n
.rt
Invalid character class type referenced.
.RE

.sp
.ne 2
.mk
.na
.B REG_EESCAPE
.ad
.RS 16n
.rt
Trailing \e in pattern.
.RE

.sp
.ne 2
.mk
.na
.B REG_ESUBREG
.ad
.RS 16n
.rt
Number in \e\fIdigit\fR invalid or in error.
.RE

.sp
.ne 2
.mk
.na
.B REG_EBRACK
.ad
.RS 16n
.rt
\fB[\|]\fR imbalance.
.RE

.sp
.ne 2
.mk
.na
.B REG_ENOSYS
.ad
.RS 16n
.rt
The function is not supported.
.RE

.sp
.ne 2
.mk
.na
.B REG_EPAREN
.ad
.RS 16n
.rt
\fB\e(\|\e)\fR or \fB()\fR imbalance.
.RE

.sp
.ne 2
.mk
.na
.B REG_EBRACE
.ad
.RS 16n
.rt
\e{ \e} imbalance.
.RE

.sp
.ne 2
.mk
.na
.B REG_BADBR
.ad
.RS 16n
.rt
Content of \e{ \e} invalid: not a number, number too large, more than two
numbers, first larger than second.
.RE

.sp
.ne 2
.mk
.na
.B REG_ERANGE
.ad
.RS 16n
.rt
Invalid endpoint in range expression.
.RE

.sp
.ne 2
.mk
.na
.B REG_ESPACE
.ad
.RS 16n
.rt
Out of memory.
.RE

.sp
.ne 2
.mk
.na
.B REG_BADRPT
.ad
.RS 16n
.rt
?, * or + not preceded by valid regular expression.
.RE

.SS "\fBregerror()\fR"
.sp
.LP
The
.B regerror()
function provides a mapping from error codes returned
by
.B regcomp()
and
.B regexec()
to unspecified printable strings. It
generates a string corresponding to the value of the
.I errcode
argument,
which must be the last non-zero value returned by
.B regcomp()
or
.B regexec()
with the given value of
.IR preg .
If
.I errcode
is not
such a value, an error message indicating that the error code is invalid is
returned.
.sp
.LP
If
.I preg
is a
.I NULL
pointer, but
.I errcode
is a value
returned by a previous call to
.B regexec()
or
.BR regcomp() ,
the
.B regerror()
still generates an error string corresponding to the value
of
.IR errcode .
.sp
.LP
If the
.I errbuf_size
argument is not zero,
.B regerror()
will place
the generated string into the buffer of size
.I errbuf_size
bytes pointed
to by
.IR errbuf .
If the string (including the terminating \fBNULL)\fR
cannot fit in the buffer,
.B regerror()
will truncate the string and
null-terminate the result.
.sp
.LP
If \fIerrbuf_size\fR is zero, \fBregerror()\fR ignores the \fIerrbuf\fR
argument, and returns the size of the buffer needed to hold the generated
string.
.sp
.LP
If the
.I preg
argument to
.B regexec()
or
.B regfree()
is not a
compiled regular expression returned by
.BR regcomp() ,
the result is
undefined. A
.I preg
is no longer treated as a compiled regular
expression after it is given to
.BR regfree() .
.sp
.LP
See
.BR regex (5)
for BRE (Basic Regular Expression) Anchoring.
.SH RETURN VALUES
.sp
.LP
On successful completion, the
.B regcomp()
function returns
.BR 0 .
Otherwise, it returns an integer value indicating an error as described in
<\fBregex.h\fR>, and the content of \fIpreg\fR is undefined.
.sp
.LP
On successful completion, the
.B regexec()
function returns
.BR 0 .
Otherwise it returns
.B REG_NOMATCH
to indicate no match, or
.B REG_ENOSYS
to indicate that the function is not supported.
.sp
.LP
Upon successful completion, the
.B regerror()
function returns the
number of bytes needed to hold the entire generated string. Otherwise, it
returns
.B 0
to indicate that the function is not implemented.
.sp
.LP
The
.B regfree()
function returns no value.
.SH ERRORS
.sp
.LP
No errors are defined.
.SH USAGE
.sp
.LP
An application could use:
.sp
.LP
.B regerror(code,preg,(char *)NULL,(size_t)0)
.sp
.LP
to find out how big a buffer is needed for the generated string,
.B malloc
a buffer to hold the string, and then call \fBregerror()\fR
again to get the string (see
.BR malloc (3C)).
Alternately, it could
allocate a fixed, static buffer that is big enough to hold most strings, and
then use
.B malloc()
to allocate a larger buffer if it finds that this is
too small.
.SH EXAMPLES
.LP
.B Example 1
Example to match string against the extended regular
expression in pattern.
.sp
.in +2
.nf
#include <regex.h>
/*
* Match string against the extended regular expression in
* pattern, treating errors as no match.
*
* return 1 for match, 0 for no match
*/

int
match(const char *string, char *pattern)
{
      int status;
      regex_t re;
      if (regcomp(&re, pattern, REG_EXTENDED\||\|REG_NOSUB) != 0) {
           return(0);      /* report error */
      }
      status = regexec(&re, string, (size_t) 0, NULL, 0);
      regfree(&re);
      if (status != 0) {
            return(0);      /* report error */
      }
      return(1);
}
.fi
.in -2

.sp
.LP
The following demonstrates how the
.B REG_NOTBOL
flag could be used with
.B regexec()
to find all substrings in a line that match a pattern
supplied by a user. (For simplicity of the example, very little error
checking is done.)

.sp
.in +2
.nf
(void) regcomp (&re, pattern, 0);
/* this call to regexec(\|) finds the first match on the line */
error = regexec (&re, &buffer[0], 1, &pm, 0);
while (error == 0) {	/* while matches found */
        /* substring found between pm.rm_so and pm.rm_eo */
        /* This call to regexec(\|) finds the next match */
        error = regexec (&re, buffer + pm.rm_eo, 1, &pm, REG_NOTBOL);
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
CSIEnabled
_
Interface StabilityStandard
_
MT-LevelMT-Safe with exceptions
.TE

.SH SEE ALSO
.sp
.LP
.BR fnmatch (3C),
.BR glob (3C),
.BR malloc (3C),
.BR setlocale (3C),
.BR attributes (5),
.BR standards (5),
.BR regex (5)
.SH NOTES
.sp
.LP
The
.B regcomp()
function can be used safely in a multithreaded
application as long as
.BR setlocale "(3C) is not being called to change the"
locale.
