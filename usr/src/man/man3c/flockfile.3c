'\" te
.\" Copyright (c) 2003 Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH flockfile 3C "10 Sep 2003" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
flockfile, funlockfile, ftrylockfile \- acquire and release stream lock
.SH SYNOPSIS
.LP
.nf
#include <stdio.h>

\fBvoid\fR \fBflockfile\fR(\fBFILE *\fIstream\fR);
.fi

.LP
.nf
\fBvoid\fR \fBfunlockfile\fR(\fBFILE *\fIstream\fR);
.fi

.LP
.nf
\fBint\fR \fBftrylockfile\fR(\fBFILE *\fIstream\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B flockfile()
function acquires an internal lock of a stream
.IR stream .
If the lock is already acquired by another thread, the thread
calling
.B flockfile()
is suspended until it can acquire the lock.  In
the case that the stream lock is available,
.B flockfile()
not only
acquires the lock, but keeps track of the number of times it is being called
by the current thread.  This implies that the stream lock can be acquired
more than once by the same thread.
.sp
.LP
The
.B funlockfile()
function releases the lock being held by the
current thread.  In the case of recursive locking, this function must be
called the same number of times
.B flockfile()
was called.  After the
number of
.B funlockfile()
calls is equal to the number of
.B flockfile()
calls, the stream lock is available for other threads to
acquire.
.sp
.LP
The
.B ftrylockfile()
function acquires an internal lock of a stream
.IR stream ,
only if that object is available.  In essence
.B ftrylockfile()
is a non-blocking version of \fBflockfile()\fR.
.SH RETURN VALUES
.sp
.LP
The
.B ftrylockfile()
function returns
.B 0
on success and non-zero
to indicate a lock cannot be acquired.
.SH EXAMPLES
.LP
.B Example 1
A sample program of \fBflockfile()\fR.
.sp
.LP
The following example prints everything out together, blocking other
threads that might want to write to the same file between calls to
.BR fprintf (3C):

.sp
.in +2
.nf
FILE iop;
flockfile(iop);
fprintf(iop, "hello ");
fprintf(iop, "world);
fputc(iop, 'a');
funlockfile(iop);
.fi
.in -2

.sp
.LP
An unlocked interface is available in case performance is an issue.  For
example:

.sp
.in +2
.nf
flockfile(iop);
while (!feof(iop)) {
        *c++ = getc_unlocked(iop);
}
funlockfile(iop);
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR Intro (3),
.BR __fsetlocking (3C),
.BR ferror (3C),
.BR fprintf (3C),
.BR getc (3C),
.BR putc (3C),
.BR stdio (3C),
.BR ungetc (3C),
.BR attributes (5),
.BR standards (5)
.SH NOTES
.sp
.LP
The interfaces on this page  are as specified in IEEE Std 1003.1:2001.  See
.BR standards (5).
