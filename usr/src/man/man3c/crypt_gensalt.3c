'\" te
.\" Copyright (c) 2002, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH crypt_gensalt 3C "10 Jun 2002" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
crypt_gensalt \- generate salt string for string encoding
.SH SYNOPSIS
.LP
.nf
#include <crypt.h>

\fBchar *\fBcrypt_gensalt\fR(\fBconst char *\fIoldsalt\fR, \fBconst struct passwd *\fIuserinfo\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B crypt_gensalt()
function generates the salt string required by
.BR crypt (3C).
.sp
.LP
If
.I oldsalt
is
.IR NULL ,
.B crypt_gensalt()
uses the algorithm
defined by
.B CRYPT_DEFAULT
in
.BR /etc/security/policy.conf .
See
.BR policy.conf (4).
.sp
.LP
If
.I oldsalt
is non-null,
.B crypt_gensalt()
determines if the
algorithm specified by
.I oldsalt
is allowable by checking the
.B CRYPT_ALGORITHMS_ALLOW
and
.B CRYPT_ALGORITHMS_DEPRECATE
variables
in
.BR /etc/security/policy.conf .
If the algorithm is allowed,
.B crypt_gensalt()
loads the appropriate shared library and calls
.BR crypt_gensalt_impl (3C).
If the algorithm is not allowed or there is no
entry for it in
.BR crypt.conf ,
.B crypt_gensalt()
uses the default
algorithm.
.sp
.LP
The mechanism just described provides a means to migrate users to new
password hashing algorithms when the password is changed.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B crypt_gensalt()
returns a pointer to the
new salt. Otherwise a null pointer is returned and
.B errno
is set to
indicate the error.
.SH ERRORS
.sp
.LP
The
.B crypt_gensalt()
function will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 11n
.rt
The configuration file
.B crypt.conf
contains an invalid entry.
.RE

.sp
.ne 2
.mk
.na
.B ELIBACC
.ad
.RS 11n
.rt
The required shared library was not found.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 11n
.rt
There is insufficient memory to perform hashing.
.RE

.SH USAGE
.sp
.LP
The value returned by
.B crypt_gensalt()
points to a null-terminated
string. The caller of
.B crypt_gensalt()
is responsible for calling
.BR free (3C).
.sp
.LP
Applications dealing with user authentication and password changing should
not call
.B crypt_gensalt()
directly but should instead call the
appropriate
.BR pam (3PAM)
functions.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR passwd (1),
.BR crypt (3C),
.BR crypt_genhash_impl (3C),
.BR crypt_gensalt_impl (3C),
.BR getpassphrase (3C),
.BR malloc (3C),
.BR pam (3PAM),
.BR crypt.conf (4),
.BR passwd (4),
.BR policy.conf (4),
.BR attributes (5)
