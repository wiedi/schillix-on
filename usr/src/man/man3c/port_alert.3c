'\" te
.\" Copyright (c) 2003, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH port_alert 3C "1 Oct 2003" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
port_alert \- set a port in alert mode
.SH SYNOPSIS
.LP
.nf
#include <port.h>

\fBint\fR \fBport_alert\fR(\fBint\fR \fIport\fR, \fBint\fR \fIflags\fR, \fBint\fR \fIevents\fR, \fBvoid *\fIuser\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B port_alert()
function transitions a port into or out of alert
mode. A port in alert mode immediately awakens all threads blocked in
.BR port_get (3C)
or
.BR port_getn "(3C). These threads return with an"
alert notification that consists of a single
.B port_event_t
structure
with the source
.BR PORT_SOURCE_ALERT .
Subsequent threads trying to
retrieve events from a port that is in alert mode will return immediately
with the alert notification.
.sp
.LP
A port is transitioned into alert mode by calling the
.BR port_alert()
function with a non-zero
.I events
parameter.  The specified \fIevents\fR
and
.I user
parameters will be made available in the
.BR portev_events
and the
.B portev_user
members of the alert notification, respectively.
The \fIflags\fR argument determines the mode of operation of the alert
mode:
.RS +4
.TP
.ie t \(bu
.el o
If \fIflags\fR is set to
.BR PORT_ALERT_SET ,
\fBport_alert()\fR sets the
port in alert mode independent of the current state of the port.  The
\fBportev_events\fR and \fBportev_user\fR members are set or updated
accordingly.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If \fIflags\fR is set to
.B PORT_ALERT_UPDATE
and the port is not in
alert mode,
.B port_alert()
transitions the port into alert mode.  The
\fBportev_events\fR and \fBportev_user\fR members are set accordingly.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If \fIflags\fR is set to
.B PORT_ALERT_UPDATE
and the port is already in
alert mode,
.B port_alert()
returns with an error value of
.BR EBUSY .
.RE
.sp
.LP
\fBPORT_ALERT_SET\fR and \fBPORT_ALERT_UPDATE\fR are mutually exclusive.
.sp
.LP
A port is transitioned out of alert mode by calling the
.BR port_alert()
function with a zero
.I events
parameter.
.sp
.LP
Events can be queued to a port that is in alert mode, but they will not be
retrievable until the port is transitioned out of alert mode.
.SH RETURN VALUES
.sp
.LP
Upon succesful completion, 0 is returned. Otherwise, -1 is returned and
\fBerrno\fR is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B port_alert()
function will fail if:
.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 10n
.rt
The port identifier is not valid.
.RE

.sp
.ne 2
.mk
.na
.B EBADFD
.ad
.RS 10n
.rt
The
.I port
argument is not an event port file descriptor.
.RE

.sp
.ne 2
.mk
.na
.B EBUSY
.ad
.RS 10n
.rt
The port is already in alert mode.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
Mutually exclusive \fIflags\fR are set.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Architectureall
_
AvailabilitySUNWcsr, SUNWhea
_
Interface StabilityEvolving
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR port_associate (3C),
.BR port_create (3C),
.BR port_get (3C),
.BR port_send (3C),
.BR attributes (5)
