'\" te
.\" Copyright (c) 2002, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH stack_violation 3C "18 Jul 2002" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
stack_violation \- determine stack boundary violation event
.SH SYNOPSIS
.LP
.nf
#include <ucontext.h>

\fBint\fR \fBstack_violation\fR(\fBint\fR \fIsig\fR, \fBconst siginfo_t *\fIsip\fR,
     \fBconst ucontext_t *\fIucp\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B stack_violation()
function returns a boolean value indicating
whether the signal,
.IR sig ,
and accompanying signal information,
.IR sip ,
and saved context,
.IR ucp ,
represent a stack boundary
violation event or a stack overflow.
.SH RETURN VALUES
.sp
.LP
The
.B stack_violation()
function returns 0 if the signal does not
represent a stack boundary violation event and 1 if the signal does
represent a stack boundary violation event.
.SH ERRORS
.sp
.LP
No errors are defined.
.SH EXAMPLES
.LP
.B Example 1
Set up a signal handler to run on an alternate stack.
.sp
.LP
The following example sets up a signal handler for
.B SIGSEGV
to run on
an alternate signal stack. For each signal it handles, the handler emits a
message to indicate if the signal was produced due to a stack boundary
violation.

.sp
.in +2
.nf
#include <stdlib.h>
#include <unistd.h>
#include <ucontext.h>
#include <signal.h>


static void
handler(int sig, siginfo_t *sip, void *p)
{
        ucontext_t *ucp = p;
        const char *str;

        if (stack_violation(sig, sip, ucp))
                str = "stack violation.\en";
        else
                str = "no stack violation.\en";

        (void) write(STDERR_FILENO, str, strlen(str));

        exit(1);
}

int
main(int argc, char **argv)
{
        struct sigaction sa;
        stack_t altstack;

        altstack.ss_size = SIGSTKSZ;
        altstack.ss_sp = malloc(SIGSTKSZ);
        altstack.ss_flags = 0;

        (void) sigaltstack(&altstack, NULL);

        sa.sa_sigaction = handler;
        (void) sigfillset(&sa.sa_mask);
        sa.sa_flags = SA_ONSTACK | SA_SIGINFO;
        (void) sigaction(SIGSEGV, &sa, NULL);

        /*
         * The application is now set up to use stack_violation(3C).
         */

        return (0);
}
.fi
.in -2

.SH USAGE
.sp
.LP
An application typically uses
.B stack_violation()
in a signal handler
that has been installed for
.B SIGSEGV
using
.BR sigaction (2)
with the
.B SA_SIGINFO
flag set and is configured to run on an alternate signal
stack.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelAsync-Signal-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR sigaction (2),
.BR sigaltstack (2),
.BR stack_getbounds (3C),
.BR stack_inbounds (3C),
.BR stack_setbounds (3C),
.BR attributes (5)
