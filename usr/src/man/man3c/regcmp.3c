'\" te
.\" Copyright 1989 AT&T Copyright (c) 2002, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH regcmp 3C "14 Nov 2002" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
regcmp, regex \- compile and execute regular expression
.SH SYNOPSIS
.LP
.nf
#include <libgen.h>

\fBchar *\fBregcmp\fR(\fBconst char *\fIstring1\fR, /* \fBchar *\fIstring2\fR */ .\|.\|.,
     \fBint\fR /*(\fBchar*\fR)0*/);
.fi

.LP
.nf
\fBchar *\fBregex\fR(\fBconst char *\fIre\fR, \fBconst char *\fIsubject\fR,
     /* \fBchar *\fIret0\fR */ .\|.\|.);
.fi

.LP
.nf
extern char *__loc1;
.fi

.SH DESCRIPTION
.sp
.LP
The
.B regcmp()
function compiles a regular expression (consisting of the
concatenated arguments) and returns a pointer to the compiled form.  The
.BR malloc (3C)
function is used to create space for the compiled form. It is
the user's responsibility to free unneeded space so allocated. A \fINULL\fR
return from
.B regcmp()
indicates an incorrect argument. \fBregcmp\fR(1)
has been written to generally preclude the need for this routine at execution
time.
.sp
.LP
The
.B regex()
function executes a compiled pattern against the subject
string. Additional arguments are passed to receive values back.  The
\fBregex()\fR function returns \fINULL\fR on failure or a pointer to the next
unmatched character on success. A global character pointer
.B __loc1
points
to where the match began.  The
.B regcmp()
and
.B regex()
functions were
mostly borrowed from the editor
.BR ed (1);
however, the syntax and semantics
have been changed slightly. The following are the valid symbols and associated
meanings.
.sp
.ne 2
.mk
.na
\fB[\|]\|*\|.^\fR
.ad
.RS 18n
.rt
This group of symbols retains its meaning as described on the
.BR regexp (5)
manual page.
.RE

.sp
.ne 2
.mk
.na
.B $
.ad
.RS 18n
.rt
Matches the end of the string; \fB\en\fR matches a newline.
.RE

.sp
.ne 2
.mk
.na
\fB\(mi\fR
.ad
.RS 18n
.rt
Within brackets the minus means \fIthrough\fR. For example, \fB[a\(miz]\fR is
equivalent to \fB[abcd\|.\|.\|.xyz]\fR. The \fB\(mi\fR can appear as itself
only if used as the first or last character. For example, the character class
expression \fB[]\(mi]\fR matches the characters \fB]\fR and \fB\(mi\fR\&.
.RE

.sp
.ne 2
.mk
.na
.B +
.ad
.RS 18n
.rt
A regular expression followed by
.B +
means
.IR "one or more times" .
For
example, \fB[0\(mi9]+\fR is equivalent to \fB[0\(mi9][0\(mi9]*.\fR
.RE

.sp
.ne 2
.mk
.na
\fB{\fIm\fR} {\fIm,\fR} {\fIm,u\fR}\fR
.ad
.RS 18n
.rt
Integer values enclosed in \fB{\|}\fR indicate the number of times the
preceding regular expression is to be applied. The value
.I m
is the
minimum number and
.I u
is a number, less than 256, which is the maximum.
If only \fIm\fR is present (that is, \fB{\fIm\fB}\fR), it indicates the
exact number of times the regular expression is to be applied. The value
\fB{\fIm\fB,}\fR is analogous to \fB{\fIm,infinity\fB}\fR. The
plus (\fB+\fR) and star (\fB*\fR) operations are equivalent to
.B {1,}
and
\fB{0,}\fR respectively.
.RE

.sp
.ne 2
.mk
.na
\fB( .\|.\|. )$\fIn\fR
.ad
.RS 18n
.rt
The value of the enclosed regular expression is to be returned. The value
will be stored in the (\fIn\fR+1)th argument following the subject argument.
.RB "At most, ten enclosed regular expressions are allowed. The" " regex()"
function makes its assignments unconditionally.
.RE

.sp
.ne 2
.mk
.na
\fB( .\|.\|. )\fR
.ad
.RS 18n
.rt
Parentheses are used for grouping. An operator, for example, \fB*\fR,
.BR + ,
\fB{\|}\fR, can work on a single character or a regular expression
enclosed in parentheses. For example,
.BR (a*(cb+)*)$0 .
By necessity, all
the above defined symbols are special. They must, therefore, be escaped with a
\fB\e\fR (backslash)  to be used as themselves.
.RE

.SH EXAMPLES
.LP
\fBExample 1\fR Example matching a leading newline in the subject string.
.sp
.LP
The following example matches a leading newline in the subject string pointed
at by cursor.

.sp
.in +2
.nf
char *cursor, *newcursor, *ptr;
	.\|.\|.
newcursor = regex((ptr = regcmp("^\en", (char *)0)), cursor);
free(ptr);
.fi
.in -2

.sp
.LP
The following example matches through the string
.B Testing3
and returns
the address of the character after the last matched character  (the
``\fB4\fR''). The string \fBTesting3\fR is copied to the character array
.BR ret0 .

.sp
.in +2
.nf
char ret0[9];
char *newcursor, *name;
	.\|.\|.
name = regcmp("([A\(miZa\(miz][A\(miza\(miz0\(mi9]{0,7})$0", (char *)0);
newcursor = regex(name, "012Testing345", ret0);
.fi
.in -2

.sp
.LP
The following example applies a precompiled regular expression in
\fBfile.i\fR (see
.BR regcmp (1))
against
.IR string .

.sp
.in +2
.nf
\fB#include "file.i"
char *string, *newcursor;
	.\|.\|.
newcursor = regex(name, string);\fR
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR ed (1),
.BR regcmp (1),
.BR malloc (3C),
.BR attributes (5),
.BR regexp (5)
.SH NOTES
.sp
.LP
The user program may run out of memory if
.B regcmp()
is called
iteratively without freeing the vectors no longer required.
.sp
.LP
When compiling multithreaded applications, the
.B _REENTRANT
flag must be
defined on the compile line.  This flag should only be used in multithreaded
applications.
