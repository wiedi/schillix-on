'\" te
.\" Copyright 1989 AT&T
.\" Copyright (c) 2002, Sun Microsystems, Inc.  All Rights Reserved
.\" Portions Copyright (c) 1992, X/Open Company Limited  All Rights Reserved
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH truncate 3C "5 Apr 2002" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
truncate, ftruncate \- set a file to a specified length
.SH SYNOPSIS
.LP
.nf
#include <unistd.h>

\fBint\fR \fBtruncate\fR(\fBconst char *\fIpath\fR, \fBoff_t\fR \fIlength\fR);
.fi

.LP
.nf
\fBint\fR \fBftruncate\fR(\fBint\fR \fIfildes\fR, \fBoff_t\fR \fIlength\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B truncate()
function causes the regular file named by
.IR path
to have a size equal to
.I length
bytes.
.sp
.LP
If the file previously was larger than
.IR length ,
the extra data is
discarded. If the file was previously shorter than length, its size is
increased, and the extended area appears as if it were zero-filled.
.sp
.LP
The application must ensure that the process has write permission for the
file.
.sp
.LP
This function does not modify the file offset for any open file
descriptions associated with the file.
.sp
.LP
The
.B ftruncate()
function causes the regular file referenced by
.I fildes
to be truncated to
.IR length .
If the size of the file
previously exceeded
.IR length ,
the extra data is no longer available to
reads on the file. If the file previously was smaller than this size,
.B ftruncate()
increases the size of the file with the extended area
appearing as if it were zero-filled. The value of the seek pointer is not
modified by a call to
.BR ftruncate() .
.sp
.LP
The
.B ftruncate()
function works only with regular files and shared
memory. If \fIfildes\fR refers to a shared memory object, \fBftruncate()\fR
sets the size of the shared memory object to
.IR length .
If \fIfildes\fR
refers to a directory or is not a valid file descriptor open for writing,
.B ftruncate()
fails.
.sp
.LP
If the effect of
.B ftruncate()
is to decrease the size of a shared
memory object or memory mapped file and whole pages beyond the new end were
previously mapped, then the whole pages beyond the new end shall be
discarded.
.sp
.LP
If the effect of
.B ftruncate()
is to increase the size of a shared
memory object, it is unspecified if the contents of any mapped pages between
the old end-of-file and the new are flushed to the underlying object.
.sp
.LP
These functions do not modify the file offset for any open file
descriptions associated with the file.  On successful completion, if the
file size is changed, these functions will mark for update the
.B st_ctime
and
.B st_mtime
fields of the file, and if the file is a
regular file, the
.B S_ISUID
and
.B S_ISGID
bits of the file mode are
left unchanged.
.sp
.LP
If the request would cause the file size to exceed the soft file size limit
for the process, the request will fail and a
.B SIGXFSZ
signal will be
generated for the process.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B ftruncate()
and
.B truncate()
return
.BR 0 .
Otherwise, \fB\(mi1\fR is returned and
.B errno
is set to
indicate the error.
.SH ERRORS
.sp
.LP
The \fBftruncate()\fR and \fBtruncate()\fR functions will fail if:
.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 19n
.rt
A signal was caught during execution.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 19n
.rt
The
.I length
argument was less than 0.
.RE

.sp
.ne 2
.mk
.na
.B EFBIG
or
.BR EINVAL
.ad
.RS 19n
.rt
The
.I length
argument was greater than the maximum file size.
.RE

.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 19n
.rt
An I/O error occurred while reading from or writing to a file system.
.RE

.sp
.ne 2
.mk
.na
.B EROFS
.ad
.RS 19n
.rt
The named file resides on a read-only file system.
.RE

.sp
.LP
The
.B truncate()
function will fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 16n
.rt
A component of the path prefix denies search permission, or write
permission is denied on the file.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 16n
.rt
The
.I path
argument points outside the process' allocated address
space.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 16n
.rt
The
.I path
argument is not an ordinary file.
.RE

.sp
.ne 2
.mk
.na
.B EISDIR
.ad
.RS 16n
.rt
The named file is a directory.
.RE

.sp
.ne 2
.mk
.na
.B ELOOP
.ad
.RS 16n
.rt
Too many symbolic links were encountered in resolving
.IR path .
.RE

.sp
.ne 2
.mk
.na
.B EMFILE
.ad
.RS 16n
.rt
The maximum number of file descriptors available to the process has been
reached.
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
The length of the specified pathname exceeds {\fBPATH_MAX\fR} bytes, or the
length of a component of the pathname exceeds {\fBNAME_MAX\fR} bytes.
.RE

.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 16n
.rt
A component of
.I path
does not name an existing file or
.I path
is
an empty string.
.RE

.sp
.ne 2
.mk
.na
.B ENFILE
.ad
.RS 16n
.rt
Additional space could not be allocated for the system file table.
.RE

.sp
.ne 2
.mk
.na
.B ENOTDIR
.ad
.RS 16n
.rt
A component of the path prefix of
.I path
is not a directory.
.RE

.sp
.ne 2
.mk
.na
.B ENOLINK
.ad
.RS 16n
.rt
The
.I path
argument points to a remote machine and the link to that
machine is no longer active.
.RE

.sp
.LP
The
.B ftruncate()
function will fail if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 19n
.rt
The file exists, mandatory file/record locking is set, and there are
outstanding record locks on the file (see
.BR chmod (2)).
.RE

.sp
.ne 2
.mk
.na
.B EBADF
or
.BR EINVAL
.ad
.RS 19n
.rt
The
.I fildes
argument is not a file descriptor open for writing.
.RE

.sp
.ne 2
.mk
.na
.B EFBIG
.ad
.RS 19n
.rt
The file is a regular file and
.I length
is greater than the offset
maximum established in the open file description associated with
.IR fildes .
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 19n
.rt
The
.I fildes
argument references a file that was opened without write
permission.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 19n
.rt
The
.I fildes
argument does not correspond to an ordinary file.
.RE

.sp
.ne 2
.mk
.na
.B ENOLINK
.ad
.RS 19n
.rt
The
.I fildes
argument points to a remote machine and the link to that
machine is no longer active.
.RE

.sp
.LP
The
.B truncate()
function may fail if:
.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 16n
.rt
Pathname resolution of a symbolic link produced an intermediate result
whose length exceeds {\fBPATH_MAX\fR}.
.RE

.SH USAGE
.sp
.LP
The
.B truncate()
and
.B ftruncate()
functions have transitional
interfaces for 64-bit file offsets.  See
.BR lf64 (5).
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR chmod (2),
.BR fcntl (2),
.BR open (2),
.BR attributes (5),
.BR lf64 (5),
.BR standards (5)
