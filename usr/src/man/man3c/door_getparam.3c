'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH door_getparam 3C "22 Mar 2005" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
door_getparam, door_setparam \- retrieve and set door parameters
.SH SYNOPSIS
.LP
.nf
\fBcc\fR \fB-mt\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. [ \fIlibrary\fR.\|.\|. ]
#include <door.h>

\fBint\fR \fBdoor_getparam\fR(\fBint\fR \fId\fR, \fBint\fR \fIparam\fR, \fBsize_t *\fIout\fR);
.fi

.LP
.nf
\fBint\fR \fBdoor_setparam\fR(\fBint\fR \fId\fR, \fBint\fR \fIparam\fR, \fBsize_t\fR \fIval\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B door_getparam()
function retrieves the value of
.I param
for
the door descriptor
.I d
and writes it through the pointer
.IR out .
The
.B door_setparam()
function sets the value of
.I param
for the door
descriptor
.I d
to
.IR val .
The
.I param
argument names the
parameter to view or change and can be one of the following values:
.sp
.ne 2
.mk
.na
.B DOOR_PARAM_DATA_MAX
.ad
.RS 23n
.rt
This parameter represents the maximum amount of data that can be passed to
the door routine. Any attempt to call
.BR door_call (3C)
on a door with a
.I data_size
value larger than the door's
.B DOOR_PARAM_DATA_MAX
parameter will fail with
.BR ENOBUFS .
At door creation time, this
parameter is initialized to
.B SIZE_MAX
and can be set to any value from
0 to
.BR SIZE_MAX ,
inclusive. This parameter must be greater than or equal
to the
.B DOOR_PARAM_DATA_MIN
parameter.
.RE

.sp
.ne 2
.mk
.na
.B DOOR_PARAM_DATA_MIN
.ad
.RS 23n
.rt
This parameter represents the the minimum amount of data that can be passed
to the door routine. Any attempt to call
.BR door_call (3C)
on a door with
a
.I data_size
.RB "value smaller than the door's" " DOOR_PARAM_DATA_MIN"
parameter will fail with
.BR ENOBUFS .
At door creation time, this
parameter is initialized to 0, and can be set to any value from 0 to
.BR SIZE_MAX ,
inclusive. This parameter must be less than or equal to the
.B DOOR_PARAM_DATA_MAX
parameter.
.RE

.sp
.ne 2
.mk
.na
.B DOOR_PARAM_DESC_MAX
.ad
.RS 23n
.rt
This parameter represents the the maximum number of argument descriptors
that can be passed to the door routine. Any attempt to call
.BR door_call (3C)
on a door with a
.IR desc_nu "m value larger than the"
door's
.B DOOR_PARAM_DESC_MAX
parameter will fail with
.BR ENFILE .
If
the door was created with the
.B DOOR_REFUSE_DESC
flag, this parameter is
initialized to 0 and cannot be changed to any other value. Otherwise, it is
initialized to
.B INT_MAX
and can be set to any value from 0 to
.BR INT_MAX ,
inclusive.
.RE

.sp
.LP
The
.B door_setparam()
function can only affect doors that were created
by the current process.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, 0 is returned.  Otherwise, -1 is returned and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B door_getparam()
function will fail if:
.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 13n
.rt
The
.I d
argument is not a door descriptor.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 13n
.rt
The
.I out
argument is not a valid address.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 13n
.rt
The
.I param
argument is not a recognized parameter.
.RE

.sp
.ne 2
.mk
.na
.B EOVERFLOW
.ad
.RS 13n
.rt
The value of the parameter is larger than the
.BR SIZE_MAX .
This
condition can occur only if the calling process is 32-bit and the door
targets a 64-bit process or the kernel.
.RE

.sp
.LP
The
.B door_setparam()
function will fail if:
.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 11n
.rt
The
.I d
argument is not a door descriptor or has been revoked.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 11n
.rt
The
.I param
argument is not a recognized parameter, or the requested
change would make
.B DOOR_PARAM_DATA_MIN
greater than
.BR DOOR_PARAM_DATA_MAX .
.RE

.sp
.ne 2
.mk
.na
.B ENOTSUP
.ad
.RS 11n
.rt
The
.I param
argument is
.BR DOOR_PARAM_DESC_MAX ,
.I d
was created
with the
.B DOOR_REFUSE_DESC
flag, and
.I val
is not zero.
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 11n
.rt
The
.I d
argument was not created by this process.
.RE

.sp
.ne 2
.mk
.na
.B ERANGE
.ad
.RS 11n
.rt
The
.I val
argument is not in supported range of
.IR param .
.RE

.SH EXAMPLES
.LP
.B Example 1
Set up a door with a fixed request size.
.sp
.in +2
.nf
typedef struct my_request {
     int request;
ar buffer[4096];
} my_request_t;

fd = door_create(my_handler, DOOR_REFUSE_DESC);
if (fd < 0)
     /* handle error */

if (door_setparam(fd, DOOR_PARAM_DATA_MIN,
    sizeof (my_request_t)) < 0 ||
    door_setparam(fd, DOOR_PARAM_DATA_MAX,
    sizeof (my_request_t)) < 0)
 /* handle error */

/*
 * the door will only accept door_call(3DOOR)s with a
 * data_size which is exactly sizeof (my_request_t).
 */
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStable
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR door_call (3C),
.BR door_create (3C),
.BR attributes (5)
.SH NOTES
.sp
.LP
The parameters that can be manipulated by
.B door_setparam()
are not the
only limitation on the size of requests. If the door server thread's stack
size is not large enough to hold all of the data requested plus room for
processing the request, the door call will fail with
.BR E2BIG .
.sp
.LP
The
.B DOOR_PARAM_DATA_MIN
parameter will not prevent
.B DOOR_UNREF_DATA
notifications from being sent to the door.
