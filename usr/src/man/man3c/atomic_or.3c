'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH atomic_or 3C "13 May 2005" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
atomic_or, atomic_or_8, atomic_or_uchar, atomic_or_16, atomic_or_ushort,
atomic_or_32, atomic_or_uint, atomic_or_ulong, atomic_or_64, atomic_or_8_nv,
atomic_or_uchar_nv, atomic_or_16_nv, atomic_or_ushort_nv, atomic_or_32_nv,
atomic_or_uint_nv, atomic_or_ulong_nv, atomic_or_64_nv \- atomic OR
operations
.SH SYNOPSIS
.LP
.nf
#include <atomic.h>

\fBvoid\fR \fBatomic_or_8\fR(\fBvolatile uint8_t *\fItarget\fR, \fBuint8_t\fR \fIbits\fR);
.fi

.LP
.nf
\fBvoid\fR \fBatomic_or_uchar\fR(\fBvolatile uchar_t *\fItarget\fR, \fBuchar_t\fR \fIbits\fR);
.fi

.LP
.nf
\fBvoid\fR \fBatomic_or_16\fR(\fBvolatile uint16_t *\fItarget\fR, \fBuint16_t\fR \fIbits\fR);
.fi

.LP
.nf
\fBvoid\fR \fBatomic_or_ushort\fR(\fBvolatile ushort_t *\fItarget\fR, \fBushort_t\fR \fIbits\fR);
.fi

.LP
.nf
\fBvoid\fR \fBatomic_or_32\fR(\fBvolatile uint32_t *\fItarget\fR, \fBuint32_t\fR \fIbits\fR);
.fi

.LP
.nf
\fBvoid\fR \fBatomic_or_uint\fR(\fBvolatile uint_t *\fItarget\fR, \fBuint_t\fR \fIbits\fR);
.fi

.LP
.nf
\fBvoid\fR \fBatomic_or_ulong\fR(\fBvolatile ulong_t *\fItarget\fR, \fBulong_t\fR \fIbits\fR);
.fi

.LP
.nf
\fBvoid\fR \fBatomic_or_64\fR(\fBvolatile uint64_t *\fItarget\fR, \fBuint64_t\fR \fIbits\fR);
.fi

.LP
.nf
\fBuint8_t\fR \fBatomic_or_8_nv\fR(\fBvolatile uint8_t *\fItarget\fR, \fBuint8_t\fR \fIbits\fR);
.fi

.LP
.nf
\fBuchar_t\fR \fBatomic_or_uchar_nv\fR(\fBvolatile uchar_t *\fItarget\fR, \fBuchar_t\fR \fIbits\fR);
.fi

.LP
.nf
\fBuint16_t\fR \fBatomic_or_16_nv\fR(\fBvolatile uint16_t *\fItarget\fR, \fBuint16_t\fR \fIbits\fR);
.fi

.LP
.nf
\fBushort_t\fR \fBatomic_or_ushort_nv\fR(\fBvolatile ushort_t *\fItarget\fR, \fBushort_t\fR \fIbits\fR);
.fi

.LP
.nf
\fBuint32_t\fR \fBatomic_or_32_nv\fR(\fBvolatile uint32_t *\fItarget\fR, \fBuint32_t\fR \fIbits\fR);
.fi

.LP
.nf
\fBuint_t\fR \fBatomic_or_uint_nv\fR(\fBvolatile uint_t *\fItarget\fR, \fBuint_t\fR \fIbits\fR);
.fi

.LP
.nf
\fBulong_t\fR \fBatomic_or_ulong_nv\fR(\fBvolatile ulong_t *\fItarget\fR, \fBulong_t\fR \fIbits\fR);
.fi

.LP
.nf
\fBuint64_t\fR \fBatomic_or_64_nv\fR(\fBvolatile uint64_t *\fItarget\fR, \fBuint64_t\fR \fIbits\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions enable the the bitwise OR of
.I bits
to the value stored
in
.I target
to occur in an atomic manner.
.SH RETURN VALUES
.sp
.LP
The *\fB_nv()\fR variants of these functions return the new value of
.IR target .
.SH ERRORS
.sp
.LP
No errors are defined.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStable
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR atomic_add (3C),
.BR atomic_and (3C),
.BR atomic_bits (3C),
.BR atomic_cas (3C),
.BR atomic_dec (3C),
.BR atomic_inc (3C),
.BR atomic_swap (3C),
.BR membar_ops (3C),
.BR attributes (5),
.BR atomic_ops (9F)
.SH NOTES
.sp
.LP
The *\fB_nv()\fR variants are substantially more expensive on some
platforms than the versions that do not return values. Do not use them
unless you need to know the new value
.BR atomically .
