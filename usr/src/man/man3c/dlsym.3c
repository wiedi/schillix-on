'\" te
.\" Copyright 1989 AT&T. Copyright (c) 2005, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH dlsym 3C "26 Sep 2005" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
dlsym \- get the address of a symbol in a shared object or executable
.SH SYNOPSIS
.LP
.nf
#include <dlfcn.h>

\fBvoid *\fBdlsym\fR(\fBvoid *restrict\fR \fIhandle\fR, \fBconst char *restrict\fR \fIname\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B dlsym()
function allows a process to obtain the address of a symbol
that is defined within a shared object or executable. The
.I handle
argument
is either the value returned from a call to
.B dlopen()
or one of a family
of special handles. The
.I name
argument is the symbol's name as a character
string.
.sp
.LP
If
.I handle
is returned from
.BR dlopen() ,
the associated shared object
must not have been closed using
.BR dlclose() .
A
.I handle
can be obtained
from
.B dlopen()
using the
.B RTLD_FIRST
mode. With this mode, the
\fBdlsym()\fR function searches for the named symbol in the initial object
referenced by
.IR handle .
Without this mode, the
.B dlsym()
function
searches for the named symbol in the group of shared objects loaded
automatically as a result of loading the object referenced by
.IR handle .
See
.BR dlopen (3C)
and NOTES.
.sp
.LP
The following special handles are supported.
.sp
.ne 2
.mk
.na
.B RTLD_DEFAULT
.ad
.RS 16n
.rt
Instructs
.B dlsym()
to search for the named symbol starting with the first
object loaded, typically the dynamic executable. The search continues through
the list of initial dependencies that are loaded with the process, followed by
any objects obtained with \fBdlopen\fR(3C). This search follows the default
model that is used to relocate all objects within the process.
.sp
This model also provides for transitioning into a lazy loading environment. If
a symbol can not be found in the presently loaded objects, any pending lazy
loaded objects are processed in an attempt to locate the symbol. This loading
compensates for objects that have not fully defined their dependencies.
However, this compensation can undermine the advantages of lazy loading.
.RE

.sp
.ne 2
.mk
.na
.B RTLD_PROBE
.ad
.RS 16n
.rt
Instructs
.B dlsym()
to search for the named symbol in the same manner as
occurs with a
.I handle
of
.BR RTLD_DEFAULT .
However, this model only
searches for symbols in the presently loaded objects, together with any lazy
loadable objects specifically identified by the caller to provide the named
symbol. This handle does not trigger an exhaustive load of any lazy loadable
symbols in an attempt to find the named symbol. This handle can provide a more
optimal search than would occur using
.BR RTLD_DEFAULT .
.RE

.sp
.ne 2
.mk
.na
.B RTLD_NEXT
.ad
.RS 16n
.rt
Instructs
.B dlsym()
to search for the named symbol in the objects that
were loaded following the object from which the
.B dlsym()
call is being
made.
.RE

.sp
.ne 2
.mk
.na
.B RTLD_SELF
.ad
.RS 16n
.rt
Instructs
.B dlsym()
to search for the named symbol in the objects that
were loaded starting with the object from which the
.B dlsym()
call is being
made.
.RE

.sp
.LP
When used with a special handle,
.B dlsym()
is selective in searching
objects that have been loaded using
.BR dlopen() .
These objects are searched
for symbols if one of the following conditions are true.
.RS +4
.TP
.ie t \(bu
.el o
The object is part of the same local
.B dlopen()
dependency hierarchy as
the calling object. See the
.I "Linker and Libraries Guide"
for a description
of
.B dlopen()
dependency hierarchies.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The object has global search access. See \fBdlopen\fR(3C) for a discussion of
the
.B RTLD_GLOBAL
mode.
.RE
.SH RETURN VALUES
.sp
.LP
The
.B dlsym()
function returns
.I NULL
if
.I handle
does not refer
to a valid object opened by
.B dlopen()
or is not one of the special
handles. The function also returns
.I NULL
if the named symbol cannot be
found within any of the objects associated with
.IR handle .
Additional
diagnostic information is available through
.BR dlerror (3C).
.SH EXAMPLES
.LP
\fBExample 1\fR Use \fBdlopen()\fR and \fBdlsym()\fR to access a function or
data objects.
.sp
.LP
The following code fragment demonstrates how to use
.B dlopen()
and
\fBdlsym()\fR to access either function or data objects. For simplicity, error
checking has been omitted.

.sp
.in +2
.nf
void      *handle;
int       *iptr, (*fptr)(int);

/* open the needed object */
handle = dlopen("/usr/home/me/libfoo.so.1", RTLD_LAZY);

/* find the address of function and data objects */
fptr = (int (*)(int))dlsym(handle, "my_function");
iptr = (int *)dlsym(handle, "my_object");

/* invoke function, passing value of integer as a parameter */
(*fptr)(*iptr);
.fi
.in -2

.LP
\fBExample 2\fR Use \fBdlsym()\fR to verify that a particular function is
defined.
.sp
.LP
The following code fragment shows how to use
.B dlsym()
to verify that a
function is defined. If the function exists, the function is called.

.sp
.in +2
.nf
int (*fptr)();

if ((fptr = (int (*)())dlsym(RTLD_DEFAULT,
    "my_function")) != NULL) {
        (*fptr)();
}
.fi
.in -2

.SH USAGE
.sp
.LP
The
.B dlsym()
function is one of a family of functions that give the user
direct access to the dynamic linking facilities. These facilities are available
to dynamically-linked processes only. See the \fILinker and Libraries
Guide\fR.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR ld (1),
.BR ld.so.1 (1),
.BR dladdr (3C),
.BR dlclose (3C),
.BR dldump (3C),
.BR dlerror (3C),
.BR dlinfo (3C),
.BR dlopen (3C),
.BR attributes (5),
.BR standards (5)
.sp
.LP
.I Linker and Libraries Guide
.SH NOTES
.sp
.LP
If an object is acting as a filter, care should be taken when interpreting the
address of any symbol obtained using a handle to this object. For example,
using dlsym(3C) to obtain the symbol
.I _end
for this object, results in
returning the address of the symbol
.I _end
within the filtee, not the
filter. For more information on filters see the \fILinker and Libraries
Guide\fR.
