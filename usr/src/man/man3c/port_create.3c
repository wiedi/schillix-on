'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH port_create 3C "5 Feb 2008" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
port_create \- create a port
.SH SYNOPSIS
.LP
.nf
#include <port.h>

\fBint\fR \fBport_create\fR(\fBvoid\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B port_create()
function establishes a queue that multiplexes
events from disjoint sources.  Each source has a corresponding object type
and source-specific mechanism for associating an object with a port.
.sp

.sp
.TS
tab();
cw(1.83i) cw(1.83i) cw(1.83i)
lw(1.83i) lw(1.83i) lw(1.83i)
.
sourceobject typeassociation mechanism
_
\fBPORT_SOURCE_AIO\fR\fBstruct aiocb\fRT{
\fBaio_read\fR(3C), \fBaio_write\fR(3C), \fBlio_listio\fR(3C)
T}
\fBPORT_SOURCE_FD\fRfile descriptor\fBport_associate\fR(3C)
\fBPORT_SOURCE_MQ\fR\fBmqd_t\fR\fBmq_notify\fR(3C)
\fBPORT_SOURCE_TIMER\fR\fBtimer_t\fR\fBtimer_create\fR(3C)
\fBPORT_SOURCE_USER\fR\fBuintptr_t\fR\fBport_send\fR(3C)
\fBPORT_SOURCE_ALERT\fR\fBuintptr_t\fR\fBport_alert\fR(3C)
\fBPORT_SOURCE_FILE\fR\fBfile_obj_t\fR\fBport_associate\fR(3C)
.TE

.sp
.LP
.B PORT_SOURCE_AIO
events represent the completion of an asynchronous
I/O transaction. An asynchronous I/O transaction is associated with a port
by specifying
.B SIGEV_PORT
as its notification mechanism. See
.BR aio_read (3C),
.BR aio_write (3C),
.BR lio_listio (3C),
and
.BR aio.h (3HEAD)
for details.
.sp
.LP
.B PORT_SOURCE_FD
events represent a transition in the
.BR poll (2)
status of a given file descriptor. Once an event is delivered, the file
descriptor is no longer associated with the port. A file descriptor is
associated (or re-associated) with a port using the
.BR port_associate (3C)
function.
.sp
.LP
.B PORT_SOURCE_MQ
events represent a message queue transition from empty
to non-empty.  A message queue is associated with a port by specifying
.B SIGEV_PORT
as its notification mechanism. See
.BR mq_notify (3C)
for
more information.
.sp
.LP
.B PORT_SOURCE_TIMER
events represent one or more timer expirations for
a given timer.  A timer is associated with a port by specifying
.B SIGEV_PORT
as its notification mechanism. See
.BR timer_create (3C)
for more information.
.sp
.LP
.B PORT_SOURCE_USER
events represent user-defined events. These events
are generated by
.BR port_send "(3C) or"
.BR port_sendn (3C).
.sp
.LP
.B PORT_SOURCE_ALERT
events indicate that the port itself is in alert
mode. The mode of the port is changed with
.BR port_alert (3C).The
.B port_create()
function returns a file descriptor that represents a
newly created port. The
.BR close (2)
function destroys the port and frees
all allocated resources.
.sp
.LP
.B PORT_SOURCE_FILE
events represent file/directory status change. Once
an event is delivered, the file object associated with the port is no longer
active. It has to be reassociated to activate. A file object is associated
or reassociated with a port using the
.BR port_associate (3C).
.sp
.LP
The
.BR port_get (3C)
and
.BR port_getn (3C)
functions retrieve events
from a port. They ignore non retrievable events (non-own or non-shareable
events).
.sp
.LP
As a port is represented by a file descriptor, ports are shared between
child and parent processes after
.BR fork() .
Both can continue to
associate sources with the port, both can receive events from the port, and
events associated with and/or generated by either process are retrievable in
the other. Since some events might not have meaning in both parent and
child, care must be taken when using ports after
.BR fork() .
.sp
.LP
If a port is exported to other processes, the port is destroyed on last
close.
.sp
.LP
.B PORT_SOURCE_USER
and
.B PORT_SOURCE_ALERT
events can be
distributed across processes.
.B PORT_SOURCE_FD
events can only be shared
between processes when child processes inherit opened file decriptors from
the parent process. See
.BR fork (2).
.B PORT_SOURCE_TIMER
and
.B PORT_SOURCE_AIO
cannot be shared between processes.
.SH RETURN VALUES
.sp
.LP
Upon succesful completion, the
.B port_create()
function returns a
non-negative value, the port identifier. Otherwise, \(mi1 is returned and
errno is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B port_create()
function will fail if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
The maximum allowable number of ports is currently open in the system. The
maximum allowable number of ports is the minimum value of the
.B project.max-port-ids
resource control. See
.BR setrctl (2)
and
.BR rctladm (1M)
for information on using resource controls.
.RE

.sp
.ne 2
.mk
.na
.B EMFILE
.ad
.RS 10n
.rt
The process has too many open descriptors.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Architectureall
_
AvailabilitySUNWcsr, SUNWhea
_
Interface StabilityCommitted
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR rctladm (1M),
.BR close (2),
.BR exit (2),
.BR fork (2),
.BR poll (2),
.BR setrctl (2),
.BR aio_read (3C),
.BR aio_write (3C),
.BR aio.h (3HEAD),
.BR lio_listio (3C),
.BR mq_notify (3C),
.BR port_associate (3C),
.BR port_get (3C),
.BR timer_create (3C),
.BR attributes (5)
