'\" te
.\" Copyright (c) 2009, Sun Microsystems,
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH dlinfo 3C "4 Feb 2009" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
dlinfo \- dynamic load information
.SH SYNOPSIS
.LP
.nf
#include <dlfcn.h>
#include <link.h>
#include <limits.h>
#include <sys/mman.h>

\fBint\fR \fBdlinfo\fR(\fBvoid *\fIhandle\fR, \fBint\fR \fIrequest\fR, \fBvoid *\fIp\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B dlinfo()
function sets or extracts information from the runtime
linker
.BR ld.so.1 (1).
This function is loosely modeled after the
.BR ioctl (2)
function. The
.I request
argument and a third argument of
varying type are passed to
.BR dlinfo() .
The action taken by
.B dlinfo()
depends on the value of the
.I request
that is provided.
.sp
.LP
The
.I handle
argument is either the value that is returned from a
.BR dlopen (3C)
or
.B dlmopen()
call, or the special handle
.BR RTLD_SELF .
A
.I handle
argument is required for all requests except
.BR RTLD_DI_CONFIGADDR ,
.BR RTLD_DI_GETSIGNAL ,
and
.BR RTLD_DI_SETSIGNAL .
If
.I handle
is the value that is returned from a
.B dlopen()
or
.B dlmopen()
call, the information returned by the
.B dlinfo()
call pertains to the specified object. If
.I handle
is the
special handle
.BR RTLD_SELF ,
the information returned by the
.B dlinfo()
call pertains to the caller.
.sp
.LP
The
.I request
argument can take the following values:
.sp
.ne 2
.mk
.na
.B RTLD_DI_ARGSINFO
.ad
.sp .6
.RS 4n
Obtain process argument information. The
.I p
argument is a pointer
(\fBDl_argsinfo_t *\fIp\fR). The following elements from this structure are
initialized:
.sp
.ne 2
.mk
.na
.B dla_argc
.ad
.RS 12n
.rt
The number of arguments passed to the process.
.RE

.sp
.ne 2
.mk
.na
.B dla_argv
.ad
.RS 12n
.rt
The argument array passed to the process.
.RE

.sp
.ne 2
.mk
.na
.B dla_envp
.ad
.RS 12n
.rt
The active environment variable array that is available to the process. This
element initially points to the environment variable array that is made
available to
.BR exec (2).
This element can be updated should an alternative
environment be established by the process. See
.BR putenv (3C).
.RE

.sp
.ne 2
.mk
.na
.B dla_auxv
.ad
.RS 12n
.rt
The auxiliary vector array passed to the process.
.RE

A process can be established from executing the runtime linker directly from
the command line. See
.BR ld.so.1 (1).
The
.B Dl_argsinfo_t
information
reflects the information that is made available to the application regardless
of how the runtime linker has been invoked.
.RE

.sp
.ne 2
.mk
.na
.B RTLD_DI_CONFIGADDR
.ad
.sp .6
.RS 4n
Obtain the configuration file information. The
.I p
argument is a
.B Dl_info_t
pointer (\fBDl_info_t *\fIp\fR). The following elements
from this structure are initialized:
.sp
.ne 2
.mk
.na
.B dli_fname
.ad
.RS 13n
.rt
The full name of the configuration file.
.RE

.sp
.ne 2
.mk
.na
.B dli_fbase
.ad
.RS 13n
.rt
The base address of the configuration file loaded into memory.
.RE

.RE

.sp
.ne 2
.mk
.na
.B RTLD_DI_LINKMAP
.ad
.sp .6
.RS 4n
Obtain the
.B Link_map
for the
.I handle
that is specified. The
.I p
argument points to a
.B Link_map
pointer (\fBLink_map **\fIp\fR). The
actual storage for the
.B Link_map
structure is maintained by
.BR ld.so.1 .
.sp
The
.B Link_map
structure includes the following members:
.sp
.in +2
.nf
    unsigned long l_addr;      /* base address */
    char          *l_name;     /* object name */
    Elf32_Dyn     *l_ld;       /* .dynamic section */
    Link_map      *l_next;     /* next link object */
    Link_map      *l_prev;     /* previous link object */
    char          *l_refname;  /* filter reference name */
.fi
.in -2

.sp
.ne 2
.mk
.na
.B l_addr
.ad
.RS 13n
.rt
The base address of the object loaded into memory.
.RE

.sp
.ne 2
.mk
.na
.B l_name
.ad
.RS 13n
.rt
The full name of the loaded object. This full name is the filename of the
object as referenced by
.BR ld.so.1 .
.RE

.sp
.ne 2
.mk
.na
.B l_ld
.ad
.RS 13n
.rt
Points to the
.B SHT_DYNAMIC
structure.
.RE

.sp
.ne 2
.mk
.na
.B l_next
.ad
.RS 13n
.rt
The next
.B Link_map
on the link-map list. Other objects on the same
link-map list as the current object can be examined by following the
.B l_next
and
.B l_prev
members.
.RE

.sp
.ne 2
.mk
.na
.B l_prev
.ad
.RS 13n
.rt
The previous
.B Link_map
on the link-map list.
.RE

.sp
.ne 2
.mk
.na
.B l_refname
.ad
.RS 13n
.rt
If the object that is referenced is a
.IR filter ,
this member points to the
name of the object being filtered. If the object is not a
.IR filter ,
this
member is
.BR 0 .
See the
.IR "Linker and Libraries Guide" .
.RE

.RE

.sp
.ne 2
.mk
.na
.B RTLD_DI_LMID
.ad
.sp .6
.RS 4n
Obtain the
.B ID
for the link-map list upon which the
.I handle
is
loaded. The
.I p
argument is a
.B Lmid_t
pointer (\fBLmid_t *\fIp\fR).
.RE

.sp
.ne 2
.mk
.na
.B RTLD_DI_MMAPCNT
.ad
.sp .6
.RS 4n
Determine the number of segment mappings for the
.I handle
that is
specified, for use in a
.B RTLD_DI_MMAPS
request. The
.I p
argument is a
.B uint_t
pointer (\fBuint_t *\fIp\fR). On return from a
.B RTLD_DI_MMAPCNT
request, the
.B uint_t
value that is pointed to by
.I p
contains the number of segment mappings that the associated object
uses.
.sp
To obtain the complete mapping information for an object, a
.B mmapobj_result_t
array for
.B RTLD_DI_MMAPCNT
entries must be
provided. This array is assigned to the
.B dlm_maps
member, and the number
of entries available in the arry are assigned to the
.B dlm_acnt
member.
This initialized structure is then passed to a
.B RTLD_DI_MMAPS
request.
See
.BR EXAMPLES .
.RE

.sp
.ne 2
.mk
.na
.B RTLD_DI_MMAPS
.ad
.sp .6
.RS 4n
Obtain segment mapping information for the
.I handle
that is specified.
The
.I p
argument is a \fBDl_mapinfo_t\fR pointer (\fBDl_mapinfo_t *\fIp\fR). This structure can be initialized from the mapping count
obtained from a previous
.B RTLD_DI_MMAPCNT
request.
.sp
Segment mapping information is provided in an array of
.BR mmapobj_result_t
structures that originate from the
.BR mmapobj (2)
of the associated object.
The
.B dlm_acnt
member, typically initialized from a previous
.B RTLD_DI_MMAPCNT
request, indicates the number of enteries in a
.B mmapobj_result_t
array. This array is assigned to the
.B dlm_maps
.RB "member. This initialized structure is then passed to a" " RTLD_DI_MMAPS"
request, where the segment mapping information is copied to the
.B mmapobj_result_t
array. The
.B dlm_rcnt
member indicates the number
of
.B mmapobj_result_t
element entries that are returned. See
.BR EXAMPLES .
.RE

.sp
.ne 2
.mk
.na
.B RTLD_DI_SERINFO
.ad
.sp .6
.RS 4n
Obtain the library search paths for the
.I handle
that is specified. The
.I p
argument is a \fBDl_serinfo_t\fR pointer (\fBDl_serinfo_t *\fIp\fR). A user must first initialize the \fBDl_serinfo_t\fR structure
with a
.B RTLD_DI_SERINFOSIZE
request. See
.BR EXAMPLES .
.sp
.RB "The returned " Dl_serinfo_t " structure contains " dls_cnt 
.B Dl_serpath_t
entries. Each entry's
.B dlp_name
member points to the
search path. The corresponding
.B dlp_info
member contains one of more
flags indicating the origin of the path. See the
.B LA_SER_*
flags that are
defined in
.RB < link.h >.
.RE

.sp
.ne 2
.mk
.na
.B RTLD_DI_SERINFOSIZE
.ad
.sp .6
.RS 4n
Initialize a
.B Dl_serinfo_t
structure for the
.I handle
that is
specified, for use in a
.B RTLD_DI_SERINFO
.RB "request. Both the" " dls_cnt"
and
.B dls_size
members are returned. The
.B dls_cnt
member indicates
the number of search paths that are applicable to the
.IR handle .
The
.B dls_size
member indicates the total size of a
.B Dl_serinfo_t
buffer
required to hold
.B "dls_cnt Dl_serpath_t"
entries and the associated
search path strings. The
.I p
argument is a
.B Dl_serinfo_t
pointer
(\fBDl_serinfo_t *\fIp\fR).
.sp
To obtain the complete path information, a new
.B Dl_serinfo_t
buffer of
size
.B dls_size
should be allocated. This new buffer should be initialized
with the
.B dls_cnt
and
.B dls_size
entries. The initialized buffer is
then passed to a
.B RTLD_DI_SERINFO
request. See
.BR EXAMPLES .
.RE

.sp
.ne 2
.mk
.na
.B RTLD_DI_ORIGIN
.ad
.sp .6
.RS 4n
Obtain the origin of the dynamic object that is associated with the
.IR handle .
The
.I p
argument is a
.B char
pointer (\fBchar *\fIp\fR). The \fBdirname\fR(3C) of the associated object's
.BR realpath (3C),
which can be no larger than
.RB { PATH_MAX },
is copied to
the pointer
.IR p .
.RE

.sp
.ne 2
.mk
.na
.B RTLD_DI_GETSIGNAL
.ad
.sp .6
.RS 4n
Obtain the numeric signal number used by the runtime linker to kill the
process in the event of a fatal runtime error. The
.I p
argument is an
.B int
pointer (\fBint *\fIp\fR). The signal number is copied to the
pointer
.IR p .
.sp
By default, the signal used by the runtime linker to terminate a process is
.BR SIGKILL .
See
.BR thr_kill (3C).
This default can be changed by calling
.B dlinfo()
with
.B RTLD_DI_SETSIGNAL
or by setting the environment
variable
.BR LD_SIGNAL .
See
.BR ld.so.1 (1).
.RE

.sp
.ne 2
.mk
.na
.B RTLD_DI_SETSIGNAL
.ad
.sp .6
.RS 4n
Provide a numeric signal number used by the runtime linker to kill the
process in the event of a fatal runtime error. The
.I p
argument is an
.B int
pointer (\fBint *\fIp\fR). The value pointed to by
.I p
is
established as the terminating signal value.
.sp
The current signal number used by the runtime linker to terminate a process
can be obtained from
.B dlinfo()
using
.BR RTLD_DI_GETSIGNAL .
Use of the
.B RTLD_DI_SETSIGNAL
option is equivalent to setting the environment
variable
.BR LD_SIGNAL .
See
.BR ld.so.1 (1).
.RE

.SH RETURN VALUES
.sp
.LP
The
.B dlinfo()
function returns \(mi1 if the
.I request
is invalid,
the parameter
.I p
is
.IR NULL ,
or the
.B Dl_serinfo_t
structure is
uninitialized for a
.B RTLD_DI_SERINFO
request.
.B dlinfo()
also returns
\(mi1 if the
.I handle
argument does not refer to a valid object opened by
.BR dlopen() ,
or is not the special handle
.BR RTLD_SELF .
Detailed
diagnostic information is available with
.BR dlerror (3C).
.SH EXAMPLES
.LP
.B Example 1
Use
.B dlinfo()
to obtain library search paths.
.sp
.LP
The following example demonstrates how a dynamic object can inspect the
library search paths that would be used to locate a simple filename with
.BR dlopen() .
For simplicity, error checking has been omitted.

.sp
.in +2
.nf
    Dl_serinfo_t   _info, *info = &_info;
    Dl_serpath_t   *path;
    uint_t         cnt;

    /* determine search path count and required buffer size */
    dlinfo(RTLD_SELF, RTLD_DI_SERINFOSIZE, info);

    /* allocate new buffer and initialize */
    info = malloc(_info.dls_size);
    info->dls_size = _info.dls_size;
    info->dls_cnt = _info.dls_cnt;

    /* obtain sarch path information */
    dlinfo(RTLD_SELF, RTLD_DI_SERINFO, info);

    path = &info->dls_serpath[0];

    for (cnt = 1; cnt <= info->dls_cnt; cnt++, path++) {
        (void) printf("%2d: %s\en", cnt, path->dls_name);
    }
.fi
.in -2

.LP
.B Example 2
Use
.B dlinfo()
to obtain segment information.
.sp
.LP
The following example demonstrates how a dynamic object can inspect its
segment mapping information. For simplicity, error checking has been omitted

.sp
.in +2
.nf
    Dl_mapinfo_t   mi;
    uint_t         cnt;

    /* determine the number of segment mappings */
    dlinfo(RTLD_SELF, RTLD_DI_MMAPCNT, &mi.dlm_acnt);

    /* allocate the appropriate mapping array */
    mi.dlm_maps = malloc(mi.dlm_acnt * sizeof (mmapobj_result_t));

    /* obtain the mapping information */
    dlinfo(RTLD_SELF, RTLD_DI_MMAPS, &mi);

    for (cnt = 0; cnt < mi.dlm_rcnt; cnt++) {
        (void) printf("addr=%x - memory size=%x\en",
            mi.dlm_maps[cnt].mr_addr, mi.dlm_maps[cnt].mr_msize);
    }
.fi
.in -2

.SH USAGE
.sp
.LP
The
.B dlinfo()
function is one of a family of functions that give the
user direct access to the dynamic linking facilities. These facilities are
available to dynamically-linked processes only. See the \fILinker and Libraries Guide\fR.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStable
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR ld (1),
.BR ld.so.1 (1),
.BR exec (2),
.BR ioctl (2),
.BR mmapobj (2),
.BR dirname (3C),
.BR dlclose (3C),
.BR dldump (3C),
.BR dlerror (3C),
.BR dlopen (3C),
.BR dlsym (3C),
.BR putenv (3C),
.BR realpath (3C),
.BR thr_kill (3C),
.BR attributes (5).
.sp
.LP
.I Linker and Libraries Guide
