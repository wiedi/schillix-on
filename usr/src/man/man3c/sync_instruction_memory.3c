'\" te
.\" Copyright (c) 1998, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH sync_instruction_memory 3C "12 Feb 1997" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
sync_instruction_memory \- make modified instructions executable
.SH SYNOPSIS
.LP
.nf
\fBvoid\fR \fBsync_instruction_memory\fR(\fBcaddr_t\fR \fIaddr\fR, \fBint\fR \fIlen\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B sync_instruction_memory()
function performs whatever steps are
required to make instructions modified by a program executable.
.sp
.LP
Some processor architectures, including some  SPARC processors, have
separate and independent instruction and data caches which are not kept
consistent by hardware.  For example, if the instruction cache contains an
instruction from some address and the program then stores a new instruction
at that address, the new instruction may not be immediately visible to the
instruction fetch mechanism. Software must explicitly invalidate the
instruction cache entries for new or changed mappings of pages that might
.RB "contain executable instructions.  The" " sync_instruction_memory()"
function performs this function, and/or any other functions needed to make
modified instructions between \fIaddr\fR and \fIaddr\fR+\fIlen\fR visible. A
program should call
.B sync_instruction_memory()
after modifying
instructions and before executing them.
.sp
.LP
On processors with unified caches (one cache for both instructions and
data) and pipelines which are flushed by a branch instruction, such as the
x86 architecture, the function may do nothing and just return.
.sp
.LP
The changes are immediately visible to the thread calling
.B sync_instruction_memory()
when the call returns, even if the thread
should migrate to another processor during or after the call. The changes
become visible to other threads in the same manner that stores do; that is,
they eventually become visible, but the latency is
implementation-dependent.
.sp
.LP
The result of executing
.B sync_instruction_memory()
are unpredictable
if \fIaddr\fR through \fIaddr\fR+\fIlen\fR-1 are not valid for the address
space of the program making the call.
.SH RETURN VALUES
.sp
.LP
No values are returned.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR attributes (5)
