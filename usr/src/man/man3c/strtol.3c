'\" te
.\" Copyright 1989 AT&T.
.\" Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\" Portions Copyright (c) 2004, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH strtol 3C "6 May 2003" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
strtol, strtoll, atol, atoll, atoi, lltostr, ulltostr \- string conversion
routines
.SH SYNOPSIS
.LP
.nf
#include <stdlib.h>

\fBlong\fR \fBstrtol\fR(\fBconst char *restrict\fR \fIstr\fR, \fBchar **restrict\fR \fIendptr\fR, \fBint\fR \fIbase\fR);
.fi

.LP
.nf
\fBlong long\fR \fBstrtoll\fR(\fBconst char *restrict\fR \fIstr\fR, \fBchar **restrict\fR \fIendptr\fR,
     \fBint\fR \fIbase\fR);
.fi

.LP
.nf
\fBlong\fR \fBatol\fR(\fBconst char *\fIstr\fR);
.fi

.LP
.nf
\fBlong long\fR \fBatoll\fR(\fBconst char *\fIstr\fR);
.fi

.LP
.nf
\fBint\fR \fBatoi\fR(\fBconst char *\fIstr\fR);
.fi

.LP
.nf
\fBchar *\fBlltostr\fR(\fBlong long\fR \fIvalue\fR, \fBchar *\fIendptr\fR);
.fi

.LP
.nf
\fBchar *\fBulltostr\fR(\fBunsigned long long\fR \fIvalue\fR, \fBchar *\fIendptr\fR);
.fi

.SH DESCRIPTION
.SS "\fBstrtol()\fR and \fBstrtoll()\fR"
.sp
.LP
The
.B strtol()
function converts the initial portion of the string pointed
to by
.I str
to a type
.B "long int"
representation.
.sp
.LP
The
.B strtoll()
function converts the initial portion of the string
pointed to by
.I str
to a type
.B "long long"
representation.
.sp
.LP
Both functions first decompose the input string into three parts: an initial,
possibly empty, sequence of white-space characters (as specified by
.BR isspace (3C));
a subject sequence interpreted as an integer represented in
some radix determined by the value of
.IR base ;
and a final string of one or
more unrecognized characters, including the terminating null byte of the input
string. They then attempt to convert the subject sequence to an integer and
return the result.
.sp
.LP
If the value of
.I base
is 0, the expected form of the subject sequence is
that of a decimal constant, octal constant or hexadecimal constant, any of
which may be preceded by a + or \(mi sign. A decimal constant begins with a
non-zero digit, and consists of a sequence of decimal digits. An octal constant
consists of the prefix 0 optionally followed by a sequence of the digits 0 to 7
only. A hexadecimal constant consists of the prefix 0x or 0X followed by a
sequence of the decimal digits and letters a (or A) to f (or F) with values 10
to 15 respectively.
.sp
.LP
If the value of
.I base
is between 2 and 36, the expected form of the
subject sequence is a sequence of letters and digits representing an integer
with the radix specified by
.IR base ,
optionally preceded by a + or \(mi
sign. The letters from a (or A) to z (or Z) inclusive are ascribed the values
10 to 35; only letters whose ascribed values are less than that of
.I base
are permitted. If the value of
.I base
is 16, the characters 0x or 0X may
optionally precede the sequence of letters and digits, following the sign if
present.
.sp
.LP
The subject sequence is defined as the longest initial subsequence of the
input string, starting with the first non-white-space character, that is of the
expected form. The subject sequence contains no characters if the input string
is empty or consists entirely of white-space characters, or if the first
non-white-space character is other than a sign or a permissible letter or
digit.
.sp
.LP
If the subject sequence has the expected form and the value of
.I base
is
0, the sequence of characters starting with the first digit is interpreted as
an integer constant. If the subject sequence has the expected form and the
value of
.I base
is between 2 and 36, it is used as the base for conversion,
ascribing to each letter its value as given above. If the subject sequence
begins with a minus sign, the value resulting from the conversion is negated. A
pointer to the final string is stored in the object pointed to by
.IR endptr ,
provided that
.I endptr
is not a null pointer.
.sp
.LP
In other than the POSIX locale, additional implementation-dependent subject
sequence forms may be accepted.
.sp
.LP
If the subject sequence is empty or does not have the expected form, no
conversion is performed; the value of
.I str
is stored in the object pointed
to by
.IR endptr ,
provided that
.I endptr
is not a null pointer.
.SS "\fBatol()\fR, \fBatoll()\fR and \fBatoi()\fR"
.sp
.LP
Except for behavior on error,
.B atol()
is equivalent to:
.BR "strtol(str, (char **)NULL, 10)" .
.sp
.LP
Except for behavior on error,
.B atoll()
is equivalent to:
.BR "strtoll(str, (char **)NULL, 10)" .
.sp
.LP
Except for behavior on error,
.B atoi()
is equivalent to:
.BR "(int) strtol(str, (char **)NULL, 10)" .
.sp
.LP
If the value cannot be represented, the behavior is undefined.
.SS "\fBlltostr()\fR and \fBulltostr()\fR"
.sp
.LP
The
.B lltostr()
function returns a pointer to the string represented by
the
.BR "long long"
.IR value .
The
.I endptr
argument is assumed to
point to the byte following a storage area into which the decimal
representation of
.I value
.RB "is to be placed as a string.  The" " lltostr()"
function converts
.I value
to decimal and produces the string,  and returns
a pointer to the beginning of the string. No leading zeros are produced, and no
terminating null is produced. The low-order digit of the result always occupies
.RI "memory position  " endptr \(mi1.
The behavior of
.B lltostr()
is
undefined if
.I value
is negative.  A single zero digit is produced if
.I value
is 0.
.sp
.LP
The
.B ulltostr()
function is similar to
.B lltostr()
except that
.I value
is an
.BR "unsigned long long" .
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.BR strtol() ,
.BR strtoll() ,
.BR atol() ,
.BR atoll() ,
and
.B atoi()
return the converted value, if any. If no
conversion could be performed,
.B strtol()
and
.B strtoll()
return
.B 0
and
.B errno
may be set to
.BR EINVAL .
.sp
.LP
If the correct value is outside the range of representable values,
.B strtol()
returns
.B LONG_MAX
or
.B LONG_MIN
and
.BR strtoll()
returns
.B LLONG_MAX
or
.B LLONG_MIN
(according to the sign of the
value), and
.B errno
is set to
.BR ERANGE .
.sp
.LP
Upon successful completion,
.B lltostr()
and
.B ulltostr()
return a
pointer to the converted string.
.SH ERRORS
.sp
.LP
The
.B strtol()
and
.B strtoll()
functions will fail if:
.sp
.ne 2
.mk
.na
.B ERANGE
.ad
.RS 10n
.rt
The value to be returned is not representable. The
.B strtol()
and
.B strtoll()
functions may fail if:
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The value of
.I base
is not supported.
.RE

.SH USAGE
.sp
.LP
Because 0,
.BR LONG_MIN ,
.BR LONG_MAX ,
.BR LLONG_MIN ,
and
.B LLONG_MAX
are returned on error and are also valid returns on success, an
application wishing to check for error situations should set
.B errno
to 0,
call the function, then check
.B errno
and if it is non-zero, assume an
error has occurred.
.sp
.LP
The
.B strtol()
function no longer accepts values greater than
.B LONG_MAX
or
.B LLONG_MAX
as valid input. Use
.BR strtoul (3C)
instead.
.sp
.LP
Calls to
.B atoi()
and
.B atol()
might be faster than corresponding
calls to
.BR strtol() ,
and calls to
.B atoll()
might be faster than
corresponding calls to
.BR strtoll() .
However, applications should not use
the
.BR atoi() ,
.BR atol() ,
or
.B atoll()
functions unless they know the
value represented by the argument will be in range for the corresponding result
type.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilitySee below.
_
MT-LevelMT-Safe
.TE

.sp
.LP
The
.BR strtol() ,
.BR strtoll() ,
.BR atol() ,
.BR atoll() ,
and
.B atoi()
functions are Standard.
.SH SEE ALSO
.sp
.LP
.BR isalpha (3C),
.BR isspace (3C),
.BR scanf (3C),
.BR strtod (3C),
.BR strtoul (3C),
.BR attributes (5),
.BR standards (5)
