'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 2001, the Institute of Electrical and Electronics Engineers, Inc. and The Open Group. All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ctime 3C "27 May 2005" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
ctime, ctime_r, localtime, localtime_r, gmtime, gmtime_r, asctime,
asctime_r, tzset \- convert date and time to string
.SH SYNOPSIS
.LP
.nf
#include <time.h>

\fBchar *\fBctime\fR(\fBconst time_t *\fIclock\fR);
.fi

.LP
.nf
\fBstruct tm *\fBlocaltime\fR(\fBconst time_t *\fIclock\fR);
.fi

.LP
.nf
\fBstruct tm *\fBgmtime\fR(\fBconst time_t *\fIclock\fR);
.fi

.LP
.nf
\fBchar *\fBasctime\fR(\fBconst struct tm *\fItm\fR);
.fi

.LP
.nf
extern time_t timezone, altzone;
extern int daylight;
extern char *tzname[2];

\fBvoid\fR \fBtzset\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBchar *\fBctime_r\fR(\fBconst time_t *\fIclock\fR, \fBchar *\fIbuf\fR, \fBint\fR \fIbuflen\fR);
.fi

.LP
.nf
\fBstruct tm *\fBlocaltime_r\fR(\fBconst time_t *restrict\fR \fIclock\fR,
     \fBstruct tm *restrict\fR \fIres\fR);
.fi

.LP
.nf
\fBstruct tm *\fBgmtime_r\fR(\fBconst time_t *restrict\fR \fIclock\fR,
     \fBstruct tm *restrict\fR \fIres\fR);
.fi

.LP
.nf
\fBchar *\fBasctime_r\fR(\fBconst struct tm *restrict\fR \fItm\fR, \fBchar *restrict\fR \fIbuf\fR,
     \fBint\fR \fIbuflen\fR);
.fi

.SS "Standard conforming"
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-D_POSIX_PTHREAD_SEMANTICS\fR [ \fIlibrary\fR.\|.\|. ]

\fBchar *\fBctime_r\fR(\fBconst time_t *\fIclock\fR, \fBchar *\fIbuf\fR);
.fi

.LP
.nf
\fBchar *\fBasctime_r\fR(\fBconst struct tm *\fItm\fR, \fBchar *\fIbuf\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B ctime()
function converts the time pointed to by
.IR clock ,
representing the time in seconds since the Epoch (00:00:00 UTC, January 1,
1970), to local time in the form of a 26-character string, as shown below.
Time zone and daylight savings corrections are made before string generation.
The fields are in constant width:
.sp
.LP
Fri Sep 13 00:00:00 1986\en\e0
.sp
.LP
The
.B ctime()
function is equivalent to:
.sp
.LP
\fBasctime(localtime(\fIclock\fB))\fR
.sp
.LP
The
.BR ctime() ,
.BR asctime() ,
.BR gmtime() ,
and
.BR localtime()
functions return values in one of two thread-specific data objects: a
broken-down time structure and an array of
.BR char .
Execution of any of
the functions can overwrite the information returned in either of these
objects by any of the other functions executed by the same thread.
.sp
.LP
The
.B ctime_r()
function has the same functionality as
.BR ctime()
except that the caller must supply a buffer
.I buf
with length
.I buflen
to store the result;
.I buf
must be at least 26 bytes. The
standard-conforming
.B ctime_r()
function does not take a \fIbuflen\fR
parameter.
.sp
.LP
The
.B localtime()
and
.B gmtime()
functions return pointers to
.B tm
structures (see below). The
.B localtime()
function corrects for
the main time zone and possible alternate ("daylight savings") time zone; the
.B gmtime()
function converts directly to Coordinated Universal Time
(UTC), which is what the UNIX system uses internally.
.sp
.LP
The
.B localtime_r()
and
.B gmtime_r()
functions have the same
functionality as
.B localtime()
and
.B gmtime()
respectively, except
that the caller must supply a buffer
.I res
to store the result.
.sp
.LP
The
.B asctime()
function converts a
.B tm
structure to a 26-character
string, as shown in the previous example, and returns a pointer to the
string.
.sp
.LP
The
.B asctime_r()
function has the same functionality as
.BR asctime()
except that the caller must supply a buffer
.I buf
with length
.I buflen
for the result to be stored.  The
.I buf
argument must be at
least 26 bytes. The standard-conforming
.B asctime_r()
function does not
take a \fIbuflen\fR parameter.  The \fBasctime_r()\fR function returns a
pointer to
.I buf
upon success.  In case of failure,
.I NULL
is
returned and
.B errno
is set.
.sp
.LP
Declarations of all the functions and externals, and the
.B tm
structure,
are in the <\fBtime.h\fR> header. The members of the
.B tm
structure
are:
.sp
.in +2
.nf
int   tm_sec;    /* seconds after the minute \(em [0, 60] */
                 /* for leap seconds */
int   tm_min;    /* minutes after the hour \(em [0, 59] */
int   tm_hour;   /* hour since midnight \(em [0, 23] */
int   tm_mday;   /* day of the month \(em [1, 31] */
int   tm_mon;    /* months since January \(em [0, 11] */
int   tm_year;   /* years since 1900 */
int   tm_wday;   /* days since Sunday \(em [0, 6] */
int   tm_yday;   /* days since January 1 \(em [0, 365] */
int   tm_isdst;  /* flag for alternate daylight savings time */
.fi
.in -2

.sp
.LP
The value of
.B tm_isdst
is positive if daylight savings time is in
effect, zero if daylight savings time is not in effect, and negative if the
information is not available. Previously, the value of
.B tm_isdst
was
defined as non-zero if daylight savings was in effect.
.sp
.LP
The external
.B time_t
variable
.B altzone
contains the difference, in
seconds, between Coordinated Universal Time and the alternate time zone. The
external variable
.B timezone
contains the difference, in seconds, between
UTC and local standard time. The external variable
.B daylight
indicates
whether time should reflect daylight savings time. Both
.B timezone
and
.B altzone
default to 0 (UTC). The external variable
.B daylight
is
non-zero if an alternate time zone exists. The time zone names are contained
in the external variable
.BR tzname ,
which by default is set to:
.sp
.LP
char *tzname[2] = { "GMT", "\|" };
.sp
.LP
These functions know about the peculiarities of this conversion for various
time periods for the
.B U.S.
(specifically, the years 1974, 1975, and
1987). They start handling the new daylight savings time starting with the
first Sunday in April, 1987.
.sp
.LP
The
.B tzset()
function uses the contents of the environment variable
.B TZ
to override the value of the different external variables. It is
called by
.B asctime()
and can also be called by the user. If
.B TZ
is
not specified or has an invalid setting,
.B tzset()
uses
.BR GMT0 .
See
.BR environ (5)
for a description of the
.B TZ
environment variable.
.sp
.LP
Starting and ending times are relative to the current local time zone. If
the alternate time zone start and end dates and the time are not provided,
the days for the United States that year will be used and the time will be 2
AM. If the start and end dates are provided but the time is not provided, the
time will be 2 AM. The effects of
.B tzset()
change the values of the
external variables
.BR timezone ,
.BR altzone ,
.BR daylight ,
and
.BR tzname .
.sp
.LP
Note that in most installations,
.B TZ
is set to the correct value by
default when the user logs on, using the local
.B /etc/default/init
file
(see
.BR TIMEZONE (4)).
.SH RETURN VALUES
.sp
.LP
Upon successful completion, the
.B gmtime()
and
.BR localtime()
functions return a pointer to a
.BR "struct tm" .
If an error is detected,
.B gmtime()
and
.B localtime()
return a null pointer.
.sp
.LP
Upon successful completion, the
.B gmtime_r()
and
.BR localtime_r()
functions return the address of the structure pointed to by the
.IR res
argument. If an error is detected,
.B gmtime_r()
and
.BR localtime_r()
return a null pointer and set
.B errno
to indicate the error.
.SH ERRORS
.sp
.LP
The
.B ctime_r()
and
.B asctime_r()
functions will fail if:
.sp
.ne 2
.mk
.na
.B ERANGE
.ad
.RS 10n
.rt
The length of the buffer supplied by the caller is not large enough to store
the result.
.RE

.sp
.LP
The
.BR gmtime() ,
.BR gmtime_r() ,
.BR localtime() ,
and
.B localtime_r()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EOVERFLOW
.ad
.RS 13n
.rt
The result cannot be represented.
.RE

.SH USAGE
.sp
.LP
These functions do not support localized date and time formats. The
.BR strftime (3C)
function can be used when localization is required.
.sp
.LP
The
.BR localtime() ,
.BR localtime_r() ,
.BR gmtime() ,
.BR gmtime_r() ,
.BR ctime() ,
and
.B ctime_r()
functions assume
Gregorian dates. Times before the adoption of the Gregorian calendar will not
match historial records.
.SH EXAMPLES
.LP
.B Example 1
Examples of the
.B tzset()
function.
.sp
.LP
The
.B tzset()
function scans the contents of the environment variable
and assigns the different fields to the respective variable. For example, the
most complete setting for New Jersey in 1986 could be:

.sp
.in +2
.nf
EST5EDT4,116/2:00:00,298/2:00:00
.fi
.in -2

.sp
.LP
or simply

.sp
.in +2
.nf
EST5EDT
.fi
.in -2

.sp
.LP
An example of a southern hemisphere setting such as the Cook Islands could
be

.sp
.in +2
.nf
KDT9:30KST10:00,63/5:00,302/20:00
.fi
.in -2

.sp
.LP
In the longer version of the New Jersey example of
.BR TZ,
\fBtzname\fR[\fB0\fR] is EST, \fBtimezone\fR is set to 5*60*60,
\fBtzname\fR[\fB1\fR] is EDT, \fBaltzone\fR is set to 4*60*60, the starting
date of the alternate time zone is the 117th day at 2 AM, the ending date of
the alternate time zone is the 299th day at 2 AM (using zero-based Julian
days), and
.B daylight
is set positive. Starting and ending times are
relative to the current local time zone. If the alternate time zone start and
end dates and the time are not provided, the days for the United States that
year will be used and the time will be 2 AM. If the start and end dates are
provided but the time is not provided, the time will be 2 AM. The effects of
.B tzset()
are thus to change the values of the external variables
.BR timezone ,
.BR altzone ,
.BR daylight ,
and
.BR tzname .
The
.BR ctime() ,
.BR localtime() ,
.BR mktime() ,
and \fBstrftime()\fR
functions also update these external variables as if they had called
.B tzset()
at the time specified by the
.B time_t
or
.BR "struct tm"
value that they are converting.

.SH BUGS
.sp
.LP
The
.B zoneinfo
timezone data files do not transition past Tue Jan 19
03:14:07 2038 UTC.  Therefore for 64-bit applications using \fBzoneinfo\fR
timezones, calculations beyond this date might not use the correct offset
from standard time, and could return incorrect values. This affects the
64-bit version of
.BR localtime() ,
.BR localtime_r() ,
.BR ctime() ,
and
.BR ctime_r() .
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
CSIEnabled
_
Interface StabilityStandard
_
MT-LevelMT-Safe with exceptions
.TE

.sp
.LP
The
.BR asctime() ,
.BR ctime() ,
.BR gmtime() ,
and
.BR localtime()
functions are safe to use in multithread applications because they employ
thread-specific data. However, their use is discouraged because standards do
not require them to be thread-safe. The
.B asctime_r()
and
.B gmtime_r()
functions are MT-Safe. The
.BR ctime_r() ,
.BR localtime_r() ,
and
.B tzset()
functions are MT-Safe in multithread
applications, as long as no user-defined function directly modifies one of
the following variables:
.BR timezone ,
.BR altzone ,
.BR daylight ,
and
.BR tzname .
These four variables are not MT-Safe to access. They are
modified by the
.B tzset()
function in an MT-Safe manner. The
.BR mktime() ,
.BR localtime_r() ,
and
.B ctime_r()
functions call
.BR tzset() .
.SH SEE ALSO
.sp
.LP
.BR time (2),
.BR Intro (3),
.BR getenv (3C),
.BR mktime (3C),
.BR printf (3C),
.BR putenv (3C),
.BR setlocale (3C),
.BR strftime (3C),
.BR TIMEZONE (4),
.BR attributes (5),
.BR environ (5),
.BR standards (5)
.SH NOTES
.sp
.LP
When compiling multithreaded programs, see
.BR Intro (3).
.sp
.LP
The return values for
.BR asctime() ,
.BR ctime() ,
.BR gmtime() ,
and
.B localtime()
point to thread-specific data whose content is overwritten
by each call by the same thread.
.sp
.LP
Setting the time during the interval of change from
.B timezone
to
.B altzone
or vice versa can produce unpredictable results. The system
administrator must change the Julian start and end days annually.
.sp
.LP
If
.B tzset()
has previously evaluated the timezone identified by the
value of the
.B TZ
environment variable,
.B tzset()
can reuse the
previous settings of the external variables
.BR altzone ,
.BR daylight ,
.BR timezone ,
and
.BR tzname []
associated with that timezone.
.sp
.LP
Solaris 2.4 and earlier releases provided definitions of the
.BR ctime_r() ,
.BR localtime_r() ,
.BR gmtime_r() ,
and
.BR asctime_r()
functions as specified in POSIX.1c Draft 6. The final POSIX.1c standard
changed the interface for
.B ctime_r()
and
.BR asctime_r() .
Support for
the Draft 6 interface is provided for compatibility only and might not be
supported in future releases. New applications and libraries should use the
standard-conforming interface.
.sp
.LP
For POSIX.1c-conforming applications, the
.B _POSIX_PTHREAD_SEMANTICS
and
.B _REENTRANT
flags are automatically turned on by defining the
.B _POSIX_C_SOURCE
flag with a value >= 199506L.
.sp
.LP
In Solaris 10,
.BR gmtime() ,
.BR gmtime_r() ,
.BR localtime() ,
and
.B localtime_r()
were updated to return a null pointer if an error is
detected. This change was based on the SUSv3 specification. See
.BR standards (5).
