'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH atomic_ops 3C "12 Aug 2004" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
atomic_ops \- atomic operations
.SH SYNOPSIS
.LP
.nf
#include <\fBatomic.h\fR>
.fi

.SH DESCRIPTION
.sp
.LP
This collection of functions provides atomic memory operations. There are 8
different classes of atomic operations:
.sp
.ne 2
.mk
.na
\fBatomic_add\fR(3C)\fR
.ad
.RS 19n
.rt
These functions provide an atomic addition of a signed value to a
variable.
.RE

.sp
.ne 2
.mk
.na
\fBatomic_and\fR(3C)\fR
.ad
.RS 19n
.rt
These functions provide an atomic logical 'and' of a value to a variable.
.RE

.sp
.ne 2
.mk
.na
\fBatomic_bits\fR(3C)\fR
.ad
.RS 19n
.rt
These functions provide atomic bit setting and clearing within a
variable.
.RE

.sp
.ne 2
.mk
.na
\fBatomic_cas\fR(3C)\fR
.ad
.RS 19n
.rt
These functions provide an atomic comparison of a value with a variable. If
the comparison is equal, then swap in a new value for the variable,
returning the old value of the variable in either case.
.RE

.sp
.ne 2
.mk
.na
\fBatomic_dec\fR(3C)\fR
.ad
.RS 19n
.rt
These functions provide an atomic decrement on a variable.
.RE

.sp
.ne 2
.mk
.na
\fBatomic_inc\fR(3C)\fR
.ad
.RS 19n
.rt
These functions provide an atomic increment on a variable.
.RE

.sp
.ne 2
.mk
.na
\fBatomic_or\fR(3C)\fR
.ad
.RS 19n
.rt
These functions provide an atomic logical 'or' of a value to a variable.
.RE

.sp
.ne 2
.mk
.na
\fBatomic_swap\fR(3C)\fR
.ad
.RS 19n
.rt
These functions provide an atomic swap of a value with a variable,
returning the old value of the variable.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStable
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR atomic_add (3C),
.BR atomic_and (3C),
.BR atomic_bits (3C),
.BR atomic_cas (3C),
.BR atomic_dec (3C),
.BR atomic_inc (3C),
.BR atomic_or (3C),
.BR atomic_swap (3C),
.BR membar_ops (3C),
.BR attributes (5)
.SH NOTES
.sp
.LP
Atomic instructions ensure global visibility of atomically-modified
variables on completion.  In a relaxed store order system, this does not
guarantee that the visibility of other variables will be synchronized with
the completion of the atomic instruction. If such synchronization is
required, memory barrier instructions must be used. See
.BR membar_ops (3C).
.sp
.LP
Atomic instructions can be expensive since they require synchronization to
occur at a hardware level. This means they should be used with care to
ensure that forcing hardware level synchronization occurs a minimum number
of times. For example, if you have several variables that need to be
incremented as a group, and each needs to be done atomically, then do so
with a mutex lock protecting all of them being incremented rather than using
the \fBatomic_inc\fR(3C) operation on each of them.
