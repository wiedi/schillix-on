'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH aioread 3C "5 Feb 2008" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
aioread, aiowrite \- read or write asynchronous I/O operations
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/asynch.h>

\fBint\fR \fBaioread\fR(\fBint\fR \fIfildes\fR, \fBchar *\fIbufp\fR, \fBint\fR \fIbufs\fR, \fBoff_t\fR \fIoffset\fR,
     \fBint\fR \fIwhence\fR, \fBaio_result_t *\fIresultp\fR);
.fi

.LP
.nf
\fBint\fR \fBaiowrite\fR(\fBint\fR \fIfildes\fR, \fBconst char *\fIbufp\fR, \fBint\fR \fIbufs\fR, \fBoff_t\fR \fIoffset\fR,
     \fBint\fR \fIwhence\fR, \fBaio_result_t *\fIresultp\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B aioread()
function initiates one asynchronous
.BR read (2)
and
returns control to the calling program. The read continues concurrently with
other activity of the process. An attempt is made to read
.I bufs
bytes
of data from the object referenced by the descriptor
.I fildes
into the
buffer pointed to by
.IR bufp .
.sp
.LP
The
.B aiowrite()
function initiates one asynchronous
.BR write (2)
and
returns control to the calling program. The write continues concurrently
with other activity of the process. An attempt is made to write
.I bufs
bytes of data from the buffer pointed to by
.I bufp
to the object
referenced by the descriptor
.IR fildes .
.sp
.LP
On objects capable of seeking, the I/O operation starts at the position
specified by
.I whence
and
.IR offset .
These parameters have the same
meaning as the corresponding parameters to the
.BR llseek (2)
function. On
objects not capable of seeking the I/O operation always start from the
current position and the parameters
.B whence
and
.I offset
are
ignored. The seek pointer for objects capable of seeking is not updated by
.B aioread()
or
.BR aiowrite() .
Sequential asynchronous operations on
these devices must be managed by the application using the
.I whence
and
.I offset
parameters.
.sp
.LP
The result of the asynchronous operation is stored in the structure pointed
to by
.IR resultp :
.sp
.in +2
.nf
int aio_return;          /* return value of read() or write() */
int aio_errno;          /* value of errno for read() or write() */
.fi
.in -2

.sp
.LP
Upon completion of the operation both
.B aio_return
and
.BR aio_errno
are set to reflect the result of the operation. Since
.B AIO_INPROGRESS
is not a value used by the system, the client can detect a change in state
by initializing
.B aio_return
to this value.
.sp
.LP
The application-supplied buffer
.I bufp
should not be referenced by the
application until after the operation has completed. While the operation is
in progress, this buffer is in use by the operating system.
.sp
.LP
Notification of the completion of an asynchronous I/O  operation can be
obtained synchronously through the 
.BR aiowait (3C)
function, or
asynchronously by installing a signal handler for the
.B SIGIO
signal.
Asynchronous notification is accomplished by sending the process a
.B SIGIO
signal. If a signal handler is not installed for the
.B SIGIO
signal, asynchronous notification is disabled. The delivery of this instance
of the
.B SIGIO
signal is reliable in that a signal delivered while the
handler is executing is not lost. If the client ensures that
.B aiowait()
returns nothing (using a polling timeout) before returning from the signal
handler, no asynchronous I/O notifications are lost. The
.B aiowait()
function is the only way to dequeue an asynchronous notification. The
.B SIGIO
signal can have several meanings simultaneously. For example, it
can signify that a descriptor generated
.B SIGIO
and an asynchronous
operation completed. Further, issuing an asynchronous request successfully
guarantees that space exists to queue the completion notification.
.sp
.LP
The
.BR close (2),
.BR exit (2)
and
.BR execve (2))
functions block
until all pending asynchronous I/O operations can be canceled by the
system.
.sp
.LP
It is an error to use the same result buffer in more than one outstanding
request. These structures can be reused only after the system has completed
the operation.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B aioread()
and
.B aiowrite()
return
.BR 0 .
Upon failure,
.B aioread()
and
.B aiowrite()
return
\fB\(mi1\fR and set
.B errno
to indicate the error.
.SH ERRORS
.sp
.LP
The
.B aioread()
and
.B aiowrite()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
The number of asynchronous requests that the system can handle at any one
time has been exceeded
.RE

.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 10n
.rt
The
.I fildes
argument is not a valid file descriptor open for
reading.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
At least one of
.I bufp
or
.I resultp
points to an address outside
the address space of the requesting process. This condition is reported only
if detected by the application process.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I resultp
argument is currently being used by an outstanding
asynchronous request.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I offset
argument is not a valid offset for this file system
type.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
Memory resources are unavailable to initiate request.
.RE

.SH USAGE
.sp
.LP
The
.B aioread()
and
.B aiowrite()
functions have transitional
interfaces for 64-bit file offsets.  See
.BR lf64 (5).
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR close (2),
.BR execve (2),
.BR exit (2),
.BR llseek (2),
.BR lseek (2),
.BR open (2),
.BR read (2),
.BR write (2),
.BR aiocancel (3C),
.BR aiowait (3C),
.BR sigvec (3UCB),
.BR attributes (5),
.BR lf64 (5)
