'\" te
.\" Copyright (c) 2003, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH schedctl_init 3C "28 May 2003" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
schedctl_init, schedctl_lookup, schedctl_exit, schedctl_start,
schedctl_stop \- preemption control
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|.  [ \fIlibrary\fR.\|.\|. ]
#include <schedctl.h>

\fBschedctl_t *\fBschedctl_init\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBschedctl_t *\fBschedctl_lookup\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBvoid\fR \fBschedctl_exit\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBvoid\fR \fBschedctl_start\fR(\fBschedctl_t *\fIptr\fR);
.fi

.LP
.nf
\fBvoid\fR \fBschedctl_stop\fR(\fBschedctl_t *\fIptr\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions provide limited control over the scheduling of a thread
(see
.BR threads (5)).
They allow a running thread to give a hint to the
kernel that preemptions of that thread should be avoided. The most likely
use for these functions is to block preemption while holding a spinlock.
Improper use of this facility, including attempts to block preemption for
sustained periods of time, may result in reduced performance.
.sp
.LP
The
.B schedctl_init()
function initializes preemption control for the
calling thread and returns a pointer used to refer to the data. If
.B schedctl_init()
is called more than once by the same thread, the most
recently returned pointer is the only valid one.
.sp
.LP
The
.B schedctl_lookup()
function returns the currently allocated
preemption control data associated with the calling thread that was
previously returned by
.BR schedctl_init() .
This can be useful in programs
where it is difficult to maintain local state for each thread.
.sp
.LP
The
.B schedctl_exit()
function removes the preemption control data
associated with the calling thread.
.sp
.LP
The
.B schedctl_start()
macro gives a hint to the kernel scheduler that
preemption should be avoided on the current thread. The pointer passed to
the macro must be the same as the pointer returned by the call to
.B schedctl_init()
by the current thread. The behavior of the program
when other values are passed is undefined.
.sp
.LP
The
.B schedctl_stop()
macro removes the hint that was set by
.BR schedctl_start() .
As with
.BR schedctl_start() ,
the pointer passed
to the macro must be the same as the pointer returned by the call to
.B schedctl_init()
by the current thread.
.sp
.LP
The
.B schedctl_start()
and
.B schedctl_stop()
macros are intended to
be used to bracket short critical sections, such as the time spent holding a
spinlock. Other uses, including the failure to call
.B schedctl_stop()
soon after calling
.BR schedctl_start() ,
might result in poor
performance.
.SH RETURN VALUES
.sp
.LP
The
.B schedctl_init()
function returns a pointer to a
.BR schedctl_t
structure if the initialization was successful, or
.I NULL
otherwise. The
.B schedctl_lookup()
function returns a pointer to a
.BR schedctl_t
structure if the data for that thread was found, or
.I NULL
otherwise.
.SH ERRORS
.sp
.LP
No errors are returned.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStable
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR priocntl (1),
.BR exec (2),
.BR fork (2),
.BR priocntl (2),
.BR attributes (5),
.BR threads (5)
.SH NOTES
.sp
.LP
Preemption control is intended for use by threads belonging to the
time-sharing (TS), interactive (IA), fair-share (FSS), and fixed-priority
(FX) scheduling classes. If used by threads in other scheduling classes,
such as real-time (RT), no errors will be returned but
.B schedctl_start()
and
.B schedctl_stop()
will not have any effect.
.sp
.LP
The data used for preemption control are not copied in the child of a
.BR fork (2).
Thus, if a process containing threads using preemption
control calls
.B fork
and the child does not immediately call
.BR exec (2),
each thread in the child must call
.BR schedctl_init()
again prior to any future uses of
.B schedctl_start()
and
.BR schedctl_stop() .
Failure to do so will result in undefined behavior.
