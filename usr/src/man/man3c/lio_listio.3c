'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH lio_listio 3C "5 Feb 2008" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
lio_listio \- list directed I/O
.SH SYNOPSIS
.LP
.nf
#include <aio.h>

\fBint\fR \fBlio_listio\fR(\fBint\fR \fImode\fR, \fBstruct aiocb *restrict const\fR \fIlist\fR[],
     \fBint\fR \fInent\fR, \fBstruct sigevent *restrict\fR \fIsig\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B lio_listio()
function allows the calling process, LWP, or thread,
to initiate a list of I/O requests within a single function call.
.sp
.LP
The
.I mode
argument takes one of the values
.B LIO_WAIT
or
.B LIO_NOWAIT
declared in
.RB < aio.h >
and determines whether the
function returns when the I/O operations have been completed, or as soon as
the operations have been queued. If the
.I mode
argument is
.BR LIO_WAIT ,
the function waits until all I/O is complete and the
.I sig
argument is ignored.
.sp
.LP
If the
.I mode
argument is
.BR LIO_NOWAIT ,
the function returns
immediately, and asynchronous notification occurs, according to the
.I sig
argument, when all the I/O operations complete. If
.I sig
is
.IR NULL ,
no asynchronous notification occurs. If
.I sig
is not
.IR NULL ,
asynchronous notification occurs as specified in
.BR signal.h (3HEAD)
when all the requests in
.I list
have completed.
.sp
.LP
The I/O requests enumerated by
.I list
are submitted in an unspecified
order.
.sp
.LP
The
.I list
argument is an array of pointers to
.B aiocb
structures.
The array contains
.I nent
elements. The array may contain null elements,
which are ignored.
.sp
.LP
The
.I aio_lio_opcode
field of each
.B aiocb
structure specifies the
operation to be performed. The supported operations are
.BR LIO_READ ,
.BR LIO_WRITE ,
and
.BR LIO_NOP ;
these symbols are defined in
.RB < aio.h ">. The " LIO_NOP " operation causes the list entry to be"
ignored. If the
.I aio_lio_opcode
element is equal to
.BR LIO_READ,
then an I/O operation is submitted as if by a call to
.BR aio_read (3C)
with the
.I aiocbp
equal to the address of the
.B aiocb
structure. If
the
.I aio_lio_opcode
element is equal to
.BR LIO_WRITE ,
then an I/O
operation is submitted as if by a call to
.BR aio_write "(3C) with the"
.I aiocbp
equal to the address of the
.B aiocb
structure.
.sp
.LP
The
.I aio_fildes
member specifies the file descriptor on which the
operation is to be performed.
.sp
.LP
The
.I aio_buf
member specifies the address of the buffer to or from
which the data is to be transferred.
.sp
.LP
The
.I aio_nbytes
member specifies the number of bytes of data to be
transferred.
.sp
.LP
The members of the
.I aiocb
structure further describe the I/O operation
to be performed, in a manner identical to that of the corresponding
.B aiocb
structure when used by the
.BR aio_read "(3C) and"
.BR aio_write (3C)
functions.
.sp
.LP
The
.I nent
argument specifies how many elements are members of the
list, that is, the length of the array.
.sp
.LP
The behavior of this function is altered according to the definitions of
synchronized I/O data integrity completion and synchronized I/O file
integrity completion if synchronized I/O is enabled on the file associated
with
.BR aio_fildes .
See
.BR fcntl.h (3HEAD)
definitions of \fBO_DSYNC\fR
and
.BR O_SYNC .
.sp
.LP
For regular files, no data transfer will occur past the offset maximum
established in the open file description associated with
.IR aiocbp\fR\(->\fBaio_fildes .
.SH RETURN VALUES
.sp
.LP
If the
.I mode
argument has the value
.BR LIO_NOWAIT ,
and the I/O
operations are successfully queued,
.B lio_listio()
returns
.BR 0 ;
otherwise, it returns \fB\(mi1\fR, and sets
.B errno
to indicate the
error.
.sp
.LP
If the
.I mode
argument has the value
.BR LIO_WAIT ,
and all the
indicated I/O has completed successfully,
.B lio_listio()
returns
.BR 0 ;
otherwise, it returns  \fB\(mi1\fR, and sets
.B errno
to
indicate the error.
.sp
.LP
In either case, the return value only indicates the success or failure of
the
.B lio_listio()
call itself, not the status of the individual I/O
requests. In some cases, one or more of the I/O requests contained in the
list may fail. Failure of an individual request does not prevent completion
of any other  individual request.  To determine the outcome of each I/O
request, the application must examine the error status associated with each
.I aiocb
control block.  Each error status so returned is identical to
that returned as a result of an
.BR aio_read "(3C) or"
.BR aio_write (3C)
function.
.SH ERRORS
.sp
.LP
The
.B lio_listio()
function will fail if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
The resources necessary to queue all the I/O requests were not available.
The error status for each request is recorded in the
.B aio_error
member
of the corresponding
.B aiocb
structure, and can be retrieved using
.BR aio_error (3C).
.RE

.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
The number of entries indicated by
.I nent
would cause the system-wide
limit
.B AIO_MAX
to be exceeded.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I mode
argument is an improper value, or the value of
.I nent
is
greater than
.BR AIO_LISTIO_MAX .
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 10n
.rt
A signal was delivered while waiting for all I/O requests to complete
during an
.B LIO_WAIT
operation. Note that, since each I/O operation
invoked by
.B lio_listio()
may possibly provoke a signal when it
completes, this error return may be caused by the completion of one (or
more) of the very I/O operations being awaited. Outstanding I/O requests are
not canceled, and the application can use
.BR aio_fsync (3C)
to determine
if any request was initiated;
.BR aio_return (3C)
to determine if any
request has completed; or
.BR aio_error (3C)
to determine if any request
was canceled.
.RE

.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 10n
.rt
One or more of the individual I/O operations failed. The application can
use
.BR aio_error (3C)
to check the error status for each \fBaiocb\fR
structure to determine the individual request(s) that failed.
.RE

.sp
.LP
In addition to the errors returned by the
.B lio_listio()
function, if
the
.B lio_listio()
function succeeds or fails with errors of
.BR EAGAIN ,
.BR EINTR ,
or
.BR EIO ,
then some of the I/O specified by
the list may have been initiated. If the
.B lio_listio()
function fails
with an error code other than
.BR EAGAIN ,
.BR EINTR ,
or
.BR EIO ,
no
operations from the list have been initiated. The I/O operation indicated by
each list element can encounter errors specific to the individual read or
write function being performed. In this event, the error status for each
.B aiocb
control block contains the associated error code. The error
codes that can be set are the same as would be set by a
.BR read (2)
or
.BR write (2)
function, with the following additional error codes
possible:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 15n
.rt
The requested I/O operation was not queued due to resource limitations.
.RE

.sp
.ne 2
.mk
.na
.B ECANCELED
.ad
.RS 15n
.rt
The requested I/O was canceled before the I/O completed due to an explicit
.BR aio_cancel (3C)
request.
.RE

.sp
.ne 2
.mk
.na
.B EFBIG
.ad
.RS 15n
.rt
The \fIaiocbp\fR\(->\fBaio_lio_opcode\fR is
.BR LIO_WRITE ,
the file is a
regular file, \fIaiocbp\fR\(->\fBaio_nbytes\fR is greater than 0, and the
\fIaiocbp\fR\(->\fBaio_offset\fR is greater than or equal to the offset
maximum in the open file description associated with
\fIaiocbp\fR\(->\fBaio_fildes.\fR
.RE

.sp
.ne 2
.mk
.na
.B EINPROGRESS
.ad
.RS 15n
.rt
The requested I/O is in progress.
.RE

.sp
.ne 2
.mk
.na
.B EOVERFLOW
.ad
.RS 15n
.rt
The \fIaiocbp\fR\(->\fBaio_lio_opcode\fR is
.BR LIO_READ ,
the file is a
regular file, \fIaiocbp\fR\(->\fBaio_nbytes\fR is greater than 0, and the
\fIaiocbp\fR\(->\fBaio_offset\fR is before the end-of-file and is greater
than or equal to the offset maximum in the open file description associated
with
.IR aiocbp \(->\fBaio_fildes.\fR
.RE

.SH USAGE
.sp
.LP
The
.B lio_listio()
function has a transitional interface for 64-bit
file offsets.  See
.BR lf64 (5).
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
.BR close (2),
.BR exec (2),
.BR exit (2),
.BR fork (2),
.BR lseek (2),
.BR read (2),
.BR write (2),
.BR aio_cancel (3C),
.BR aio_error (3C),
.BR aio_fsync (3C),
.BR aio_read (3C),
.BR aio_return (3C),
.BR aio_write (3C),
.BR aio.h (3HEAD),
.BR fcntl.h (3HEAD),
.BR siginfo.h (3HEAD),
.BR signal.h (3HEAD),
.BR attributes (5),
.BR lf64 (5),
.BR standards (5)
