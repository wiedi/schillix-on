'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH gethrtime 3C "7 Sep 2004" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
gethrtime, gethrvtime \- get high resolution time
.SH SYNOPSIS
.LP
.nf
#include <sys/time.h>

\fBhrtime_t\fR \fBgethrtime\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBhrtime_t\fR \fBgethrvtime\fR(\fBvoid\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B gethrtime()
function returns the current high-resolution real
time. Time is expressed as nanoseconds since some arbitrary time in the
past; it is not correlated in any way to the time of day, and thus is not
subject to resetting or drifting by way of
.BR adjtime (2)
or
\fBsettimeofday\fR(3C). The hi-res timer is ideally suited to performance
measurement tasks, where cheap, accurate interval timing is required.
.sp
.LP
The
.B gethrvtime()
function returns the current high-resolution LWP
virtual time, expressed as total nanoseconds of execution time.
.sp
.LP
The
.B gethrtime()
and
.B gethrvtime()
functions both return an
\fBhrtime_t,\fR which is a 64-bit (\fBlong long\fR) signed integer.
.SH EXAMPLES
.sp
.LP
The following code fragment measures the average cost of
.BR getpid (2):
.sp
.in +2
.nf
\fBhrtime_t start, end;
int i, iters = 100;

start = gethrtime();
for (i = 0; i < iters; i++)
        getpid();
end = gethrtime();

printf("Avg getpid() time = %lld nsec\en", (end \(mi start) / iters);\fR
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR proc (1),
.BR adjtime (2),
.BR gettimeofday (3C),
\fBsettimeofday\fR(3C), \fBattributes\fR(5)
.SH NOTES
.sp
.LP
Although the units of hi-res time are always the same (nanoseconds), the
actual resolution is hardware dependent.  Hi-res time is guaranteed to be
monotonic (it won't go backward, it won't periodically wrap) and linear (it
won't occasionally speed up or slow down for adjustment, like the time of
day can), but not necessarily unique: two sufficiently proximate calls may
return the same value.
