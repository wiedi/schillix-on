'\" te
.\" Copyright (c) 2003, Sun Microsystems, Inc. All Rights Reserved.
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH fgetc 3C "15 Oct 2003" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
fgetc, getc, getc_unlocked, getchar, getchar_unlocked, getw \- get a byte
from a stream
.SH SYNOPSIS
.LP
.nf
#include <stdio.h>

\fBint\fR \fBfgetc\fR(\fBFILE *\fIstream\fR);
.fi

.LP
.nf
\fBint\fR \fBgetc\fR(\fBFILE *\fIstream\fR);
.fi

.LP
.nf
\fBint\fR \fBgetc_unlocked\fR(\fBFILE *\fIstream\fR);
.fi

.LP
.nf
\fBint\fR \fBgetchar\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBint\fR \fBgetchar_unlocked\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBint\fR \fBgetw\fR(\fBFILE *\fIstream\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBfgetc()\fR function obtains the next byte (if present) as an
\fBunsigned char\fR converted to an
.BR int ,
from the input stream pointed
to by
.IR stream ,
and advances the associated file position indicator for
the stream (if defined).
.sp
.LP
For standard-conforming (see
.BR standards (5))
applications, if the
end-of-file indicator for the stream is set, \fBfgetc()\fR returns \fBEOF\fR
whether or not a next byte is present.
.sp
.LP
The \fBfgetc()\fR function may mark the \fBst_atime\fR field of the file
associated with
.I stream
for update. The
.B st_atime
field will be
marked for update by the first successful execution of
.BR fgetc() ,
\fBfgets\fR(3C), \fBfread\fR(3C), \fBfscanf\fR(3C), \fBgetc()\fR,
.BR getchar() ,
.BR gets (3C)
or
.BR scanf "(3C) using"
.I stream
that
returns data not supplied by a prior call to
.BR ungetc "(3C) or"
.BR ungetwc (3C).
.sp
.LP
The
.B getc()
function is functionally identical to
.BR fgetc() ,
except that it is implemented as a macro. It runs faster than
.BR fgetc() ,
but it takes up more space per invocation and its name cannot be passed as
an argument to a function call.
.sp
.LP
The
.B getchar()
routine is equivalent to
.BR getc(stdin) .
It is
implemented as a macro.
.sp
.LP
The
.B getc_unlocked()
and
.B getchar_unlocked()
routines are
variants of
.B getc()
and
.BR getchar() ,
respectively, that do not lock
the stream.  It is the caller's responsibility to acquire the stream lock
before calling these routines and releasing the lock afterwards; see
\fBflockfile\fR(3C) and \fBstdio\fR(3C). These routines are implemented as
macros.
.sp
.LP
The
.B getw()
function reads the next word from the
.IR stream .
The
size of a word is the size of an
.B int
and may vary from environment to
environment. The
.B getw()
function presumes no special alignment in the
file.
.sp
.LP
The
.B getw()
function may mark the
.B st_atime
field of the file
associated with
.I stream
for update. The
.B st_atime
field will be
marked for update by the first successful execution of
.BR fgetc() ,
\fBfgets\fR(3C), \fBfread\fR(3C),
.BR getc() ,
.BR getchar() ,
.BR gets (3C),
\fBfscanf\fR(3C) or \fBscanf\fR(3C) using \fIstream\fR that
returns data not supplied by a prior call to
.BR ungetc (3C).
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.BR fgetc() ,
.BR getc() ,
.BR getc_unlocked() ,
.BR getchar() ,
.BR getchar_unlocked() ,
and
\fBgetw()\fR return the next byte from the input stream pointed to by
.IR stream .
If the stream is at end-of-file, the end-of-file indicator for
the stream is set and these functions return
.BR EOF .
For
standard-conforming (see
.BR standards (5))
applications, if the
end-of-file indicator for the stream is set, these functions return
\fBEOF\fR whether or not the stream is at end-of-file. If a read error
occurs, the error indicator for the stream is set,
.B EOF
is returned,
and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.BR fgetc() ,
.BR getc() ,
.BR getc_unlocked() ,
.BR getchar() ,
.BR getchar_unlocked() ,
and
.B getw()
functions will fail if data needs
to be read and:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 13n
.rt
The
.B O_NONBLOCK
flag is set for the file descriptor underlying
\fIstream\fR and the process would be delayed in the \fBfgetc()\fR
operation.
.RE

.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 13n
.rt
The file descriptor underlying
.I stream
is not a valid file descriptor
open for reading.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 13n
.rt
The read operation was terminated due to the receipt of a signal, and no
data was transferred.
.RE

.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 13n
.rt
A physical I/O error has occurred, or the process is in a background
process group attempting to read from its controlling terminal, and either
the process is ignoring or blocking the
.B SIGTTIN
signal or the process
group is orphaned. This error may also be generated for
implementation-dependent reasons.
.RE

.sp
.ne 2
.mk
.na
.B EOVERFLOW
.ad
.RS 13n
.rt
The file is a regular file and an attempt was made to read at or beyond the
offset maximum associated with the corresponding stream.
.RE

.sp
.LP
The
.BR fgetc() ,
.BR getc() ,
.BR getc_unlocked() ,
.BR getchar() ,
.BR getchar_unlocked() ,
and
.B getw()
functions may fail if:
.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
Insufficient storage space is available.
.RE

.sp
.ne 2
.mk
.na
.B ENXIO
.ad
.RS 10n
.rt
A request was made of a non-existent device, or the request was outside the
capabilities of the device.
.RE

.SH USAGE
.sp
.LP
If the integer value returned by
.BR fgetc() ,
.BR getc() ,
.BR getc_unlocked() ,
.BR getchar() ,
.BR getchar_unlocked() ,
and
\fBgetw()\fR is stored into a variable of type \fBchar\fR and then compared
against the integer constant EOF, the comparison may never succeed, because
sign-extension of a variable of type
.B char
on widening to integer is
implementation-dependent.
.sp
.LP
The \fBferror\fR(3C) or \fBfeof\fR(3C) functions must be used to
distinguish between an error condition and an end-of-file condition.
.sp
.LP
Functions exist for the
.BR getc() ,
.BR getc_unlocked() ,
.BR getchar() ,
and
.B getchar_unlocked()
macros. To get the function
form, the macro name must be undefined (for example,
.BR "#undef getc" ).
.sp
.LP
When the macro forms are used,
.B getc()
and
.BR getc_unlocked()
evaluate the
.I stream
argument more than once. In particular,
\fBgetc(*\fIf++\fB);\fR does not work sensibly.  The \fBfgetc()\fR
function should be used instead when evaluating the
.I stream
argument
has side effects.
.sp
.LP
Because of possible differences in word length and byte ordering, files
written using
.B getw()
are machine-dependent, and may not be read using
\fBgetw()\fR on a different processor.
.sp
.LP
The
.B getw()
function is inherently byte stream-oriented and is not
tenable in the context of either multibyte character streams or
wide-character streams. Application programmers are recommended to use one
of the character-based input functions instead.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityT{
\fBfgetc()\fR, \fBgetc()\fR, \fBgetc_unlocked()\fR, \fBgetchar()\fR, and \fBgetchar_unlocked()\fR are Standard.
T}
_
MT-LevelSee \fBNOTES\fR below.
.TE

.SH SEE ALSO
.sp
.LP
.BR Intro (3),
\fB__fsetlocking\fR(3C), \fBfclose\fR(3C), \fBfeof\fR(3C),
\fBfgets\fR(3C), \fBfgetwc\fR(3C), \fBfgetws\fR(3C), \fBflockfile\fR(3C),
\fBfopen\fR(3C), \fBfread\fR(3C), \fBfscanf\fR(3C), \fBgets\fR(3C),
.BR putc (3C),
\fBscanf\fR(3C), \fBstdio\fR(3C), \fBungetc\fR(3C),
.BR ungetwc (3C),
.BR attributes (5),
.BR standards (5)
.SH NOTES
.sp
.LP
The
.BR fgetc() ,
.BR getc() ,
.BR getchar() ,
and
.B getw()
routines
are MT-Safe in multithreaded applications.  The
.B getc_unlocked()
and
\fBgetchar_unlocked()\fR routines are unsafe in multithreaded
applications.
