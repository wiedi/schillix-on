'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH timer_settime 3C "5 Feb 2008" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
timer_settime, timer_gettime, timer_getoverrun \- per-process timers
.SH SYNOPSIS
.LP
.nf
#include <time.h>

\fBint\fR \fBtimer_settime\fR(\fBtimer_t\fR \fItimerid\fR, \fBint\fR \fIflags\fR,
     \fBconst struct itimerspec *restrict\fR \fIvalue\fR,
     \fBstruct itimerspec *restrict\fR \fIovalue\fR);
.fi

.LP
.nf
\fBint\fR \fBtimer_gettime\fR(\fBtimer_t\fR \fItimerid\fR, \fBstruct itimerspec *\fIvalue\fR);
.fi

.LP
.nf
\fBint\fR \fBtimer_getoverrun\fR(\fBtimer_t\fR \fItimerid\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B timer_settime()
function sets the time until the next expiration
of the timer specified by
.I timerid
from the
.B it_value
member of
the
.I value
argument and arm the timer if the
.B it_value
member of
.I value
is non-zero. If the specified timer was already armed when
.B timer_settime()
is called, this call resets the time until next
expiration to the
.I value
specified. If the
.B it_value
member of
.I value
is 0, the timer is disarmed. The effect of disarming or
resetting a timer on pending expiration notifications is unspecified.
.sp
.LP
If the flag
.B TIMER_ABSTIME
is not set in the argument
.IR flags ,
.B timer_settime()
behaves as if the time until next expiration is set to
be equal to the interval specified by the
.B it_value
member of
.IR value .
That is, the timer expires in
.B it_value
nanoseconds from
when the call is made. If the flag
.B TIMER_ABSTIME
is set in the
argument
.IR flags ,
.B timer_settime()
behaves as if the time until
next expiration is set to be equal to the difference between the absolute
time specified by the
.B it_value
member of
.I value
and the current
value of the clock associated with
.IR timerid .
That is, the timer expires
when the clock reaches the value specified by the
.B it_value
member of
.IR value .
If the specified time has already passed, the function succeeds
and the expiration notification is made.
.sp
.LP
The reload value of the timer is set to the value specified by the
.B it_interval
member of
.IR value .
When a timer is armed with a
non-zero
.BR it_interval ,
a periodic (or repetitive) timer is specified.
.sp
.LP
Time values that are between two consecutive non-negative integer multiples
of the resolution of the specified timer will be rounded up to the larger
multiple of the resolution. Quantization error will not cause the timer to
expire earlier than the rounded time value.
.sp
.LP
If the argument
.I ovalue
is not
.IR NULL ,
the function
.B timer_settime()
stores, in the location referenced by
.IR ovalue ,
a
value representing the previous amount of time before the timer would have
expired or 0 if the timer was disarmed, together with the previous timer
reload value. The members of
.I ovalue
are subject to the resolution of
the timer, and they are the same values that would be returned by a
.B timer_gettime()
call at that point in time.
.sp
.LP
The
.B timer_gettime()
function stores the amount of time until the
specified timer,
.IR timerid ,
expires and the reload value of the timer
into the space pointed to by the
.I value
.RB "argument. The" " it_value"
member of this structure contains the amount of time before the timer
expires, or 0 if the timer is disarmed. This value is returned as the
interval until timer expiration, even if the timer was armed with absolute
time. The
.B it_interval
member of
.I value
contains the reload value
last set by
.BR timer_settime() .
.sp
.LP
Only a single signal will be queued to the process for a given timer at any
point in time. When a timer for which a signal is still pending expires, no
signal will be queued, and a timer overrun occurs. When a timer expiration
signal is delivered to or accepted by a process, the
.B timer_getoverrun()
function returns the timer expiration overrun count
for the specified timer. The overrun count returned contains the number of
extra timer expirations that occurred between the time the signal was
generated (queued) and when it was delivered or accepted, up to but not
including an implementation-dependent maximum of
.BR DELAYTIMER_MAX .
If
the number of such extra expirations is greater than or equal to
.BR DELAYTIMER_MAX ,
then the overrun count will be set to
.BR DELAYTIMER_MAX .
The value returned by
.B timer_getoverrun()
applies
to the most recent expiration signal delivery or acceptance for the timer.
If no expiration signal has been delivered for the timer, the meaning of the
overrun count returned is undefined.
.SH RETURN VALUES
.sp
.LP
If the
.B timer_settime()
or
.B timer_gettime()
functions succeed,
.B 0
is returned. If an error occurs for either of these functions,
\fB\(mi1\fR is returned, and \fBerrno\fR is set to indicate the error. If
the
.B timer_getoverrun()
function succeeds, it returns the timer
expiration overrun count as explained above.
.SH ERRORS
.sp
.LP
The
.BR timer_settime() ,
.B timer_gettime()
and
.B timer_getoverrun()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 11n
.rt
The
.I timerid
argument does not correspond to a timer returned by
.BR timer_create (3C)
but not yet deleted by
.BR timer_delete (3C).
.RE

.sp
.ne 2
.mk
.na
.B ENOSYS
.ad
.RS 11n
.rt
The
.BR timer_settime() ,
.BR timer_gettime() ,
and
.B timer_getoverrun()
functions are not supported by the system. The
.B timer_settime()
function will fail if:
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 11n
.rt
A
.I value
structure specified a nanosecond value less than zero or
greater than or equal to 1000 million.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
lw(2.75i) |lw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelAsync-Signal-Safe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
.BR time.h (3HEAD),
.BR clock_settime (3C),
.BR timer_create (3C),
.BR timer_delete (3C),
.BR attributes (5),
.BR standards (5)
