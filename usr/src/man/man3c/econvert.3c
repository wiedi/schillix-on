'\" te
.\" Copyright (c) 1999, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH econvert 3C "3 May 1999" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
econvert, fconvert, gconvert, seconvert, sfconvert, sgconvert, qeconvert,
qfconvert, qgconvert \- output conversion
.SH SYNOPSIS
.LP
.nf
#include <floatingpoint.h>

\fBchar *\fBeconvert\fR(\fBdouble\fR \fIvalue\fR, \fBint\fR \fIndigit\fR, \fBint *\fIdecpt\fR, \fBint *\fIsign\fR,
     \fBchar *\fIbuf\fR);
.fi

.LP
.nf
\fBchar *\fBfconvert\fR(\fBdouble\fR \fIvalue\fR, \fBint\fR \fIndigit\fR, \fBint *\fIdecpt\fR, \fBint *\fIsign\fR,
     \fBchar *\fIbuf\fR);
.fi

.LP
.nf
\fBchar *\fBgconvert\fR(\fBdouble\fR \fIvalue\fR, \fBint\fR \fIndigit\fR, \fBint\fR \fItrailing\fR, \fBchar *\fIbuf\fR);
.fi

.LP
.nf
\fBchar *\fBseconvert\fR(\fBsingle *\fIvalue\fR, \fBint\fR \fIndigit\fR, \fBint *\fIdecpt\fR, \fBint *\fIsign\fR,
     \fBchar *\fIbuf\fR);
.fi

.LP
.nf
\fBchar *\fBsfconvert\fR(\fBsingle *\fIvalue\fR, \fBint\fR \fIndigit\fR, \fBint *\fIdecpt\fR, \fBint *\fIsign\fR,
     \fBchar *\fIbuf\fR);
.fi

.LP
.nf
\fBchar *\fBsgconvert\fR(\fBsingle *\fIvalue\fR, \fBint\fR \fIndigit\fR, \fBint\fR \fItrailing\fR, \fBchar *\fIbuf\fR);
.fi

.LP
.nf
\fBchar *\fBqeconvert\fR(\fBquadruple *\fIvalue\fR, \fBint\fR \fIndigit\fR, \fBint *\fIdecpt\fR, \fBint *\fIsign\fR,
     \fBchar *\fIbuf\fR);
.fi

.LP
.nf
\fBchar *\fBqfconvert\fR(\fBquadruple *\fIvalue\fR, \fBint\fR \fIndigit\fR, \fBint *\fIdecpt\fR, \fBint *\fIsign\fR
     \fBchar *\fIbuf\fR);
.fi

.LP
.nf
\fBchar *\fBqgconvert\fR(\fBquadruple *\fIvalue\fR, \fBint\fR \fIndigit\fR, \fBint\fR \fItrailing\fR, \fBchar *\fIbuf\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B econvert()
function converts the
.I value
to a null-terminated
string of
.I ndigit
.B ASCII
digits in
.I buf
and returns a pointer
to
.IR buf .
.I buf
should contain at least
.I ndigit+1
characters.
The position of the decimal point relative to the beginning of the string is
stored indirectly through \fIdecpt\fR. Thus \fIbuf\fR == "314" and
.I *decpt
== 1 corresponds to the numerical value 3.14, while \fIbuf\fR
== "314" and \fI*decpt\fR == \(mi1 corresponds to the numerical value .0314.
If the sign of the result is negative, the word pointed to by
.I sign
is
nonzero; otherwise it is zero. The least significant digit is rounded.
.sp
.LP
The
.B fconvert()
function works much like
.BR econvert() ,
except that
the correct digit has been rounded as if for
.B sprintf(%w.nf)
output
with \fIn\fR=\fIndigit\fR digits to the right of the decimal point.
.I ndigit
can be negative to indicate rounding to the left of the decimal
point. The return value is a pointer to
.IR buf .
.I buf
should contain
at least
.I 310+max(0,ndigit)
characters to accomodate any
double-precision
.IR value .
.sp
.LP
The
.B gconvert()
function converts the
.I value
to a null-terminated
.B ASCII
string in
.I buf
and returns a pointer to
.IR buf .
It
produces
.I ndigit
significant digits in fixed-decimal format, like
.BR sprintf(%w.nf) ,
if possible, and otherwise in floating-decimal format,
like
.BR sprintf(%w.ne) ;
in either case
.I buf
is ready for printing,
with sign and exponent. The result corresponds to that obtained by
.sp
.in +2
.nf
(void) sprintf(buf,``%w.ng'',value) ;
.fi
.in -2

.sp
.LP
If
.I trailing
= 0, trailing zeros and a trailing point are suppressed,
as in
.BR sprintf(%g) .
If
.I trailing
!= 0, trailing zeros and a
trailing point are retained, as in
.BR sprintf(%#g) .
.sp
.LP
The
.BR seconvert() ,
.BR sfconvert() ,
and
.B sgconvert()
functions
are single-precision versions of these functions, and are more efficient
than the corresponding double-precision versions. A pointer rather than the
value itself is passed to avoid C's usual conversion of single-precision
arguments to double.
.sp
.LP
The
.BR qeconvert() ,
.BR qfconvert() ,
and
.B qgconvert()
functions
are quadruple-precision versions of these functions. The \fBqfconvert()\fR
function can overflow the
.I decimal_record
field
.I ds
if
.I value
is too large. In that case, \fIbuf\fR[0] is set to zero.
.sp
.LP
The
.BR ecvt() ,
.B fcvt()
and
.B gcvt()
functions are versions of
.BR econvert() ,
.BR fconvert() ,
and
.BR gconvert() ,
respectively, that
are documented on the
.BR ecvt "(3C) manual page.  They constitute the"
default implementation of these functions and conform to the X/Open CAE
Specification, System Interfaces and Headers, Issue 4, Version 2.
.SH USAGE
.sp
.LP
.B IEEE
Infinities and NaNs are treated similarly by these functions.
``NaN'' is returned for NaN, and ``Inf'' or ``Infinity'' for Infinity.  The
longer form is produced when
.I ndigit
>= 8.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
\fBecvt\fR(3C),\fBsprintf\fR(3C), \fBattributes\fR(5)
