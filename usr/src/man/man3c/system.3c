'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH system 3C "14 Dec 2006" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
system \- issue a shell command
.SH SYNOPSIS
.LP
.nf
#include <stdlib.h>

\fBint\fR \fBsystem\fR(\fBconst char *\fIstring\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B system()
function causes
.I string
to be given to the shell as
input, as if
.I string
had been typed as a command at a terminal. The
invoker waits until the shell has completed, then returns the exit status of
the shell in the format specified by
.BR waitpid (3C).
.sp
.LP
If
.I string
is a null pointer,
.B system()
checks if the shell
exists and is executable.  If the shell is available,
.B system()
returns
a non-zero value; otherwise, it returns
.BR 0 .
The standard to which the
caller conforms determines which shell is used. See
.BR standards (5).
.sp
.LP
The
.B system()
function sets the
.B SIGINT
and
.B SIGQUIT
signals
to be ignored, and blocks the
.B SIGCHLD
signal for the calling thread,
while waiting for the command to terminate. The
.B system()
function does
not affect the termination status of any child of the calling processes
other than the process it creates.
.sp
.LP
The termination status of the process created by the
.BR system()
function is not affected by the actions of other threads in the calling
process (it is invisible to \fBwait\fR(3C)) or by the disposition of the
.B SIGCHLD
signal in the calling process, even if it is set to be
ignored. No
.B SIGCHLD
signal is sent to the process containing the
calling thread when the command terminates.
.SH RETURN VALUES
.sp
.LP
The
.B system()
function executes
.BR posix_spawn "(3C) to create a"
child process running the shell that in turn executes the commands in
.IR string .
If
.B posix_spawn()
fails,
.B system()
returns
\fB\(mi1\fR and sets \fBerrno\fR to indicate the error; otherwise the exit
status of the shell is returned.
.SH ERRORS
.sp
.LP
The
.B system()
function may set
.B errno
values as described by
.BR fork (2),
in particular:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
A resource control or  limit on the total number of processes, tasks or
LWPs under execution by a single user,  task,  project, or  zone has been
exceeded, or the total amount of system memory available  is temporarily
insufficient to duplicate this process.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
There is not enough swap space.
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 10n
.rt
The  {\fBPRIV_PROC_FORK\fR} privilege is  not asserted in the effective set
of the calling process.
.RE

.SH USAGE
.sp
.LP
The
.B system()
function manipulates the signal handlers for
.B SIGINT
and
.BR SIGQUIT .
It is therefore not safe to call
.B system()
in a multithreaded process, since some other thread that
manipulates these signal handlers and a thread that concurrently calls
.B system()
can interfere with each other in a destructive manner.  If,
however, no such other thread is active,
.B system()
can safely be called
concurrently from multiple threads. See \fBpopen\fR(3C) for an alternative
to
.B system()
that is thread-safe.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR ksh (1),
.BR sh (1),
.BR popen (3C),
.BR posix_spawn (3C),
.BR wait (3C),
.BR waitpid (3C),
.BR attributes (5),
.BR standards (5)
