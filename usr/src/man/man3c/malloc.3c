'\" te
.\" Copyright 1989 AT&T.  Copyright (c) 2005, Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH malloc 3C "21 Mar 2005" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
malloc, calloc, free, memalign, realloc, valloc, alloca \- memory
allocator
.SH SYNOPSIS
.LP
.nf
#include <stdlib.h>

\fBvoid *\fBmalloc\fR(\fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBvoid *\fBcalloc\fR(\fBsize_t\fR \fInelem\fR, \fBsize_t\fR \fIelsize\fR);
.fi

.LP
.nf
\fBvoid\fR \fBfree\fR(\fBvoid *\fIptr\fR);
.fi

.LP
.nf
\fBvoid *\fBmemalign\fR(\fBsize_t\fR \fIalignment\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBvoid *\fBrealloc\fR(\fBvoid *\fIptr\fR, \fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
\fBvoid *\fBvalloc\fR(\fBsize_t\fR \fIsize\fR);
.fi

.LP
.nf
#include <alloca.h>

\fBvoid *\fBalloca\fR(\fBsize_t\fR \fIsize\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B malloc()
and \fBfree()\fR functions provide a simple,
general-purpose memory allocation package. The
.B malloc()
function
returns a pointer to a block of at least
.I size
bytes suitably aligned
for any use. If the space assigned by
.B malloc()
is overrun, the results
are undefined.
.sp
.LP
The argument to \fBfree()\fR is a pointer to a block previously allocated by
.BR malloc() ,
.BR calloc() ,
or
.BR realloc() .
After
.BR free() " is"
executed, this space is made available for further allocation by the
application, though not returned to the system. Memory is returned to the
system only upon termination of the application. If
.I ptr
is a null
pointer, no action occurs. If a random number is passed to
.BR free() ,
the
results are undefined.
.sp
.LP
The
.B calloc()
function allocates space for an array of
.IR nelem
elements of size
.IR elsize .
The space is initialized to zeros.
.sp
.LP
The
.B memalign()
function allocates
.I size
bytes on a specified
alignment boundary and returns a pointer to the allocated block. The value of
the returned address is guaranteed to be an even multiple of
.IR alignment .
The value of
.I alignment
must be a power of two and must be greater than
or equal to the size of a word.
.sp
.LP
The
.B realloc()
function changes the size of the block pointed to by
\fIptr\fR to \fIsize\fR bytes and returns a pointer to the (possibly moved)
block. The contents will be unchanged up to the lesser of the new and old
sizes. If the new size of the block requires movement of the block, the space
for the previous instantiation of the block is freed. If the new size is
larger, the contents of the newly allocated portion of the block are
unspecified. If
.I ptr
is
.IR NULL ,
\fBrealloc()\fR behaves like
\fBmalloc()\fR for the specified size. If \fIsize\fR is 0 and \fIptr\fR is
not a null pointer, the space pointed to is freed.
.sp
.LP
The
.B valloc()
function has the same effect as
.BR malloc() ,
except
that the allocated memory will be aligned to a multiple of the value returned
by \fBsysconf\fR(\fB_SC_PAGESIZE\fR).
.sp
.LP
The
.B alloca()
function allocates
.I size
bytes of space in the stack
frame of the caller, and returns a pointer to the allocated block. This
temporary space is automatically freed when the caller returns. If the
allocated block is beyond the current stack limit, the resulting behavior is
undefined.
.SH RETURN VALUES
.sp
.LP
Upon successful completion, each of the allocation functions returns a
pointer to space suitably aligned (after possible pointer coercion) for
storage of any type of object.
.sp
.LP
If there is no available memory,
.BR malloc() ,
.BR realloc() ,
.BR memalign() ,
.BR valloc() ,
and
.B calloc()
return a null pointer.
When
.B realloc()
is called with
.I size
> 0 and returns
.IR NULL ,
the block pointed to by
.I ptr
is left intact. If
.IR size ,
.IR nelem ,
or
.I elsize
is 0, either a null pointer or a unique pointer that can be
passed to \fBfree()\fR is returned.
.sp
.LP
If
.BR malloc() ,
.BR calloc() ,
or
.B realloc()
returns
unsuccessfully,
.B errno
will be set to indicate the error. The
\fBfree()\fR function does not set \fBerrno\fR.
.SH ERRORS
.sp
.LP
The
.BR malloc() ,
.BR calloc() ,
and
.B realloc()
functions will fail
if:
.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
The physical limits of the system are exceeded by
.I size
bytes of memory
which cannot be allocated.
.RE

.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
There is not enough memory available to allocate
.I size
bytes of memory;
but the application could try again later.
.RE

.SH USAGE
.sp
.LP
Portable applications should avoid using
.B valloc()
but should instead
use
.B malloc()
or
.BR mmap (2).
On systems with a large page size, the
number of successful
.B valloc()
operations might be 0.
.sp
.LP
These default memory allocation routines are safe for use in multithreaded
applications but are not scalable. Concurrent accesses by multiple threads
are single-threaded through the use of a single lock. Multithreaded
applications that make heavy use of dynamic memory allocation should be
linked with allocation libraries designed for concurrent access, such as
.BR libumem (3LIB)
or
.BR libmtmalloc "(3LIB). Applications that want to"
avoid using heap allocations (with
.BR brk (2))
can do so by using either
\fBlibumem\fR or \fBlibmapmalloc\fR(3LIB). The allocation libraries
.BR libmalloc (3LIB)
and \fBlibbsdmalloc\fR(3LIB) are available for special
needs.
.sp
.LP
Comparative features of the various allocation libraries can be found in the
.BR umem_alloc (3MALLOC)
manual page.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilitySee below.
_
MT-LevelSafe
.TE

.sp
.LP
The
.BR malloc() ,
.BR calloc() ,
\fBfree()\fR, \fBrealloc()\fR,
\fBvalloc()\fR functions are Standard. The \fBmemalign()\fR and
\fBalloca()\fR functions are Stable.
.SH SEE ALSO
.sp
.LP
.BR brk (2),
.BR getrlimit (2),
.BR libbsdmalloc (3LIB),
.BR libmalloc (3LIB),
.BR libmapmalloc (3LIB),
.BR libmtmalloc (3LIB),
.BR libumem (3LIB),
.BR umem_alloc (3MALLOC),
.BR watchmalloc (3MALLOC),
.BR attributes (5)
.SH WARNINGS
.sp
.LP
Undefined results will occur if the size requested for a block of memory
exceeds the maximum size of a process's heap, which can be obtained with
.BR getrlimit (2)
.sp
.LP
The
.B alloca()
function is machine-, compiler-, and most of all,
system-dependent. Its use is strongly discouraged.
