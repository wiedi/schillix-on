'\" te
.\" Copyright (c) 2002, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH drand48 3C "24 Jul 2002" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
drand48, erand48, lrand48, nrand48, mrand48, jrand48, srand48, seed48,
lcong48 \- generate uniformly distributed pseudo-random numbers
.SH SYNOPSIS
.LP
.nf
#include <stdlib.h>

\fBdouble\fR \fBdrand48\fR(void)
.fi

.LP
.nf
\fBdouble\fR \fBerand48\fR(\fBunsigned short\fR \fIx\fR(i)[3]);
.fi

.LP
.nf
\fBlong\fR \fBlrand48\fR(void)
.fi

.LP
.nf
\fBlong\fR \fBnrand48\fR(\fBunsigned short\fR \fIx\fR(i)[3]);
.fi

.LP
.nf
\fBlong\fR \fBmrand48\fR(void)
.fi

.LP
.nf
\fBlong\fR \fBjrand48\fR(\fBunsigned short\fR \fIx\fR(i)[3]);
.fi

.LP
.nf
\fBvoid\fR \fBsrand48\fR(\fBlong\fR \fIseedval\fR);
.fi

.LP
.nf
\fBunsigned short *\fBseed48\fR(\fBunsigned short\fR \fIseed16v\fR[3]);
.fi

.LP
.nf
\fBvoid\fR \fBlcong48\fR(\fBunsigned short\fR \fIparam\fR[7]);
.fi

.SH DESCRIPTION
.sp
.LP
This family of functions generates pseudo-random numbers using the
well-known linear congruential algorithm and 48-bit integer arithmetic.
.sp
.LP
Functions
.B drand48()
and
.B erand48()
return non-negative
double-precision floating-point values uniformly distributed over the
interval [0.0, 1.0).
.sp
.LP
Functions
.B lrand48()
and
.B nrand48()
return non-negative long
integers uniformly distributed over the interval [0, 2  ^31 ].
.sp
.LP
Functions
.B mrand48()
and
.B jrand48()
return signed long integers
uniformly distributed over the interval [-2 ^31  , 2 ^31  ].
.sp
.LP
Functions
.BR srand48() ,
.BR seed48() ,
and
.B lcong48()
are
initialization entry points, one of which should be invoked before either
.BR drand48() ,
.BR lrand48() ,
or
.B mrand48()
is called. (Although it
is not recommended practice, constant default initializer values will be
supplied automatically if
.BR drand48() ,
.BR lrand48() ,
or
.B mrand48()
is called without a prior call to an initialization entry
point.) Functions
.B erand48(\|),
.B
nrand48(\|), \c
and
.B jrand48()
do not require an initialization entry point to be called first.
.sp
.LP
All the routines work by generating a sequence of 48-bit integer values,
X(i ), according to the linear congruential formula
.sp
.LP
X(n+1)= (aX (n)+c)(mod m) n>=0.
.sp
.LP
The parameter
.I m
= 2^48; hence 48-bit integer arithmetic is performed.
Unless
.B lcong48()
has been invoked, the multiplier value
.IR a and
the
addend value
.IR c "are given by"
.br
.in +2
.I a
= 5DEECE66D(16) = 273673163155(8)
.in -2
.br
.in +2
.I c
= B(16) = 13(8)
.in -2
.sp
.LP
The value returned by any of the functions
.BR drand48() ,
.BR erand48() ,
.BR lrand48() ,
.BR nrand48() ,
.BR mrand48() ,
or
.B jrand48()
is computed by first generating the next 48-bit X(i) in the
sequence. Then the appropriate number of bits, according to the type of data
item to be returned, are copied from the high-order (leftmost) bits of X(i)
and transformed into the returned value.
.sp
.LP
The functions
.BR drand48() ,
.BR lrand48() ,
and
.B mrand48()
store
the last 48-bit X(i) generated in an internal buffer. X(i) must be
initialized prior to being invoked. The functions
.BR erand48() ,
.BR nrand48() ,
and
.B jrand48()
require the calling program to provide
storage for the successive X(i) values in the array specified as an argument
when the functions are invoked. These routines do not have to be
initialized; the calling program must place the desired initial value of
X(i) into the array and pass it as an argument. By using different
arguments, functions
.BR erand48() ,
.BR nrand48() ,
and
.BR jrand48()
allow separate modules of a large program to generate several
.I independent
streams of pseudo-random numbers, that is, the sequence of
numbers in each stream will
.I not
depend upon how many times the
routines have been called to generate numbers for the other streams.
.sp
.LP
The initializer function
.B srand48()
sets the high-order 32 bits of
X(i) to the 32 bits contained in its argument. The low-order 16 bits of X(i)
are set to the arbitrary value 330E(16) .
.sp
.LP
The initializer function
.B seed48()
sets the value of X(i) to the
48-bit value specified in the argument array. In addition, the previous
value of X(i) is copied into a 48-bit internal buffer, used only by
.BR seed48() ,
and a pointer to this buffer is the value returned by
.BR seed48() .
This returned pointer, which can just be ignored if not
needed, is useful if a program is to be restarted from a given point at some
future time \(em use the pointer to get at and store the last X(i) value,
and then use this value to reinitialize using
.B seed48()
when the
program is restarted.
.sp
.LP
The initialization function
.B lcong48()
allows the user to specify the
initial X(i) the multiplier value
.IR a ,
and the addend value
.IR c .
.RI "Argument array elements " param[0-2] " specify X(i), " param[3-5] 
specify the multiplier
.IR a ,
and
.IR param [6]
specifies the 16-bit
addend
.IR c .
After
.B lcong48()
has been called, a subsequent call to
either
.B srand48()
or
.B seed48()
will restore the ``standard''
multiplier and addend values,
.I a
and
.IR c ,
specified above.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
.B
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR rand (3C),
.BR attributes (5),
.BR standards (5)
