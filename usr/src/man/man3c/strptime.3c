'\" te
.\" Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\" Portions Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH strptime 3C "27 Aug 2007" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
strptime \- date and time conversion
.SH SYNOPSIS
.LP
.nf
#include <time.h>

\fBchar *\fBstrptime\fR(\fBconst char *restrict\fR \fIbuf\fR,
     \fBconst char *restrict\fR \fIformat\fR, \fBstruct tm *restrict\fR \fItm\fR);
.fi

.SS "Non-zeroing Behavior"
.LP
.nf
\fBcc\fR [\fIflag\fR.\|.\|.]  \fIfile\fR.\|.\|. \fB-D_STRPTIME_DONTZERO\fR [\fIlibrary\fR.\|.\|.]
#include <time.h>

\fBchar *\fBstrptime\fR(\fBconst char *restrict\fR \fIbuf\fR,
     \fBconst char *restrict\fR \fIformat\fR, \fBstruct tm *restrict\fR \fItm\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B strptime()
function converts the character string pointed to by
\fIbuf\fR to values which are stored in the \fBtm\fR structure pointed to by
.IR tm ,
using the format specified by \fIformat\fR.
.sp
.LP
The \fIformat\fR argument is composed of zero or more conversion
specifications. Each conversion specification is composed of a "%" (percent)
character followed by one or two conversion characters which specify the
replacement required. One or more white space characters (as specified by
.BR isspace (3C))
may precede or follow a conversion specification. There
must be white-space or other non-alphanumeric characters between any two
conversion specifications.
.sp
.LP
A non-zeroing version of
.BR strptime() ,
described below under
.BR "Non-zeroing Behavior" ,
is provided if
.B _STRPTIME_DONTZERO
is
defined.
.SS "Conversion Specifications"
.sp
.LP
The following conversion specifications are supported:
.sp
.ne 2
.mk
.na
.B %%
.ad
.RS 6n
.rt
Same as
.BR % .
.RE

.sp
.ne 2
.mk
.na
.B %a
.ad
.RS 6n
.rt
Day of week, using the locale's weekday names;  either the abbreviated or
full name may be specified.
.RE

.sp
.ne 2
.mk
.na
.B %A
.ad
.RS 6n
.rt
Same as
.BR %a .
.RE

.sp
.ne 2
.mk
.na
.B %b
.ad
.RS 6n
.rt
Month, using the locale's month names;  either the abbreviated or full name
may be specified.
.RE

.sp
.ne 2
.mk
.na
.B %B
.ad
.RS 6n
.rt
Same as
.BR %b .
.RE

.sp
.ne 2
.mk
.na
.B %c
.ad
.RS 6n
.rt
Locale's appropriate date and time representation.
.RE

.sp
.ne 2
.mk
.na
.B %C
.ad
.RS 6n
.rt
Century number (the year divided by 100 and truncated to an integer as a
decimal number [1,99]); single digits are preceded by 0. If
.B %C
is used
without the
.B %y
specifier,
.B strptime()
assumes the year offset is
zero in whichever century is specified.   Note the behavior of
.B %C
in
the absence of
.B %y
is not specified by any of the standards or
specifications described on the
.BR standards (5)
manual page, so portable
applications should not depend on it.  This behavior may change in a future
release.
.RE

.sp
.ne 2
.mk
.na
.B %d
.ad
.RS 6n
.rt
Day of month [1,31]; leading zero is permitted but not required.
.RE

.sp
.ne 2
.mk
.na
.B %D
.ad
.RS 6n
.rt
Date as \fB%m\fR/\fB%d\fR/\fB%y\fR.
.RE

.sp
.ne 2
.mk
.na
.B %e
.ad
.RS 6n
.rt
Same as
.BR %d .
.RE

.sp
.ne 2
.mk
.na
.B %h
.ad
.RS 6n
.rt
Same as
.BR %b .
.RE

.sp
.ne 2
.mk
.na
.B %H
.ad
.RS 6n
.rt
Hour (24-hour clock) [0,23];  leading zero is permitted but not required.
.RE

.sp
.ne 2
.mk
.na
.B %I
.ad
.RS 6n
.rt
Hour (12-hour clock) [1,12];  leading zero is permitted but not required.
.RE

.sp
.ne 2
.mk
.na
.B %j
.ad
.RS 6n
.rt
Day number of the year [1,366];  leading zeros are permitted but not
required.
.RE

.sp
.ne 2
.mk
.na
.B %m
.ad
.RS 6n
.rt
Month number [1,12]; leading zero is permitted but not required.
.RE

.sp
.ne 2
.mk
.na
.B %M
.ad
.RS 6n
.rt
Minute [0-59]; leading zero is permitted but not required.
.RE

.sp
.ne 2
.mk
.na
.B %n
.ad
.RS 6n
.rt
Any white space.
.RE

.sp
.ne 2
.mk
.na
.B %p
.ad
.RS 6n
.rt
Locale's equivalent of either a.m. or p.m.
.RE

.sp
.ne 2
.mk
.na
.B %r
.ad
.RS 6n
.rt
Appropriate time representation in the 12-hour clock format with
.BR %p .
.RE

.sp
.ne 2
.mk
.na
.B %R
.ad
.RS 6n
.rt
Time as \fB%H\fR:\fB%M\fR.
.RE

.SS "SUSv3"
.sp
.ne 2
.mk
.na
.B %S
.ad
.RS 6n
.rt
Seconds [0,60]; leading zero is permitted but not required. The range of
values is [00,60] rather than [00,59] to allow for the occasional leap
second.
.RE

.SS "Default and other standards"
.sp
.ne 2
.mk
.na
.B %S
.ad
.RS 6n
.rt
Seconds [0,61]; leading zero is permitted but not required. The range of
values is [00,61] rather than [00,59] to allow for the occasional leap
second and even more occasional double leap second.
.RE

.sp
.ne 2
.mk
.na
.B %t
.ad
.RS 6n
.rt
Any white space.
.RE

.sp
.ne 2
.mk
.na
.B %T
.ad
.RS 6n
.rt
Time as \fB%H\fR:\fB%M\fR:\fB%S\fR.
.RE

.sp
.ne 2
.mk
.na
.B %U
.ad
.RS 6n
.rt
Week number of the year as a decimal number [0,53], with Sunday as the
first day of the week; leading zero is permitted but not required.
.RE

.sp
.ne 2
.mk
.na
.B %w
.ad
.RS 6n
.rt
Weekday as a decimal number [0,6], with 0 representing Sunday.
.RE

.sp
.ne 2
.mk
.na
.B %W
.ad
.RS 6n
.rt
Week number of the year as a decimal number [0,53], with Monday as the
first day of the week; leading zero is permitted but not required.
.RE

.sp
.ne 2
.mk
.na
.B %x
.ad
.RS 6n
.rt
Locale's appropriate date representation.
.RE

.sp
.ne 2
.mk
.na
.B %X
.ad
.RS 6n
.rt
Locale's appropriate time representation.
.RE

.sp
.ne 2
.mk
.na
.B %y
.ad
.RS 6n
.rt
Year within century. When a century is not otherwise specified, values in
the range 69-99 refer to years in the twentieth century (1969 to 1999
inclusive); values in the range 00-68 refer to years in the twenty-first
century (2000 to 2068 inclusive).
.RE

.sp
.ne 2
.mk
.na
.B %Y
.ad
.RS 6n
.rt
Year, including the century (for example, 1993).
.RE

.sp
.ne 2
.mk
.na
.B %Z
.ad
.RS 6n
.rt
Time zone name or no characters if no time zone exists.
.RE

.SS "Modified Conversion Specifications"
.sp
.LP
Some conversion specifications can be modified by the
.B E
and
.BR O
modifier characters to indicate that an alternate format or specification
should be used rather than the one normally used by the unmodified
specification. If the alternate format or specification does not exist in
the current locale, the behavior will be as if the unmodified conversion
specification were used.
.sp
.ne 2
.mk
.na
.B %Ec
.ad
.RS 7n
.rt
Locale's alternate appropriate date and time representation.
.RE

.sp
.ne 2
.mk
.na
.B %EC
.ad
.RS 7n
.rt
Name of the base year (era) in the locale's alternate representation.
.RE

.sp
.ne 2
.mk
.na
.B %Ex
.ad
.RS 7n
.rt
Locale's alternate date representation.
.RE

.sp
.ne 2
.mk
.na
.B %EX
.ad
.RS 7n
.rt
Locale's alternate time representation.
.RE

.sp
.ne 2
.mk
.na
.B %Ey
.ad
.RS 7n
.rt
Offset from
.B %EC
(year only) in the locale's alternate
representation.
.RE

.sp
.ne 2
.mk
.na
.B %EY
.ad
.RS 7n
.rt
Full alternate year representation.
.RE

.sp
.ne 2
.mk
.na
.B %Od
.ad
.RS 7n
.rt
Day of the month using the locale's alternate numeric symbols.
.RE

.sp
.ne 2
.mk
.na
.B %Oe
.ad
.RS 7n
.rt
Same as
.BR %Od .
.RE

.sp
.ne 2
.mk
.na
.B %OH
.ad
.RS 7n
.rt
Hour (24-hour clock) using the locale's alternate numeric symbols.
.RE

.sp
.ne 2
.mk
.na
.B %OI
.ad
.RS 7n
.rt
Hour (12-hour clock) using the locale's alternate numeric symbols.
.RE

.sp
.ne 2
.mk
.na
.B %Om
.ad
.RS 7n
.rt
Month using the locale's alternate numeric symbols.
.RE

.sp
.ne 2
.mk
.na
.B %OM
.ad
.RS 7n
.rt
Minutes using the locale's alternate numeric symbols.
.RE

.sp
.ne 2
.mk
.na
.B %OS
.ad
.RS 7n
.rt
Seconds using the locale's alternate numeric symbols.
.RE

.sp
.ne 2
.mk
.na
.B %OU
.ad
.RS 7n
.rt
Week number of the year (Sunday as the first day of the week) using the
locale's alternate numeric symbols.
.RE

.sp
.ne 2
.mk
.na
.B %Ow
.ad
.RS 7n
.rt
Number of the weekday (Sunday=0) using the  locale's alternate numeric
symbols.
.RE

.sp
.ne 2
.mk
.na
.B %OW
.ad
.RS 7n
.rt
Week number of the year (Monday as the first day of the week) using the
locale's alternate numeric symbols.
.RE

.sp
.ne 2
.mk
.na
.B %Oy
.ad
.RS 7n
.rt
Year (offset from
.BR %C )
in the locale's alternate  representation and
using the locale's alternate numeric symbols.
.RE

.SS "General Specifications"
.sp
.LP
A conversion specification that is an ordinary character is executed by
scanning the next character from the buffer. If the character scanned from
the buffer differs from the one comprising the specification, the
specification fails, and the differing and subsequent characters remain
unscanned.
.sp
.LP
A series of specifications composed of
.BR %n ,
.BR %t ,
white-space
characters or any combination is executed by scanning up to the first
character that is not white space (which remains unscanned), or until no
more characters can be scanned.  White space is defined by
.BR isspace (3C).
.sp
.LP
Any other conversion specification is executed by scanning characters until
a character matching the next specification is scanned, or until no more
characters can be scanned. These characters, except the one matching the
next specification, are then compared to the locale values associated with
the conversion specifier.  If a match is found, values for the appropriate
\fItm\fR structure members are set to values corresponding to the locale
information. If no match is found, 
.B strptime()
fails and no more
characters are scanned.
.sp
.LP
The month names, weekday names, era names, and alternate numeric symbols
can consist of any combination of upper and lower case letters.  The user
can request that the input date or time specification be in a specific
language by setting the
.B LC_TIME
category using
.BR setlocale (3C).
.SS "Non-zeroing Behavior"
.sp
.LP
In addition to the behavior described above by various standards, the
Solaris implementation of
.B strptime()
provides the following
extensions. These may change at any time in the future.  Portable
applications should not depend on these extended features:
.RS +4
.TP
.ie t \(bu
.el o
If
.B _STRPTIME_DONTZERO
is not defined, the
.B "tm struct"
is zeroed
on entry and
.B strptime()
updates the fields of the
.BR "tm struct"
associated with the specifiers in the format string.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B _STRPTIME_DONTZERO
is defined,
.B strptime()
does not zero the
\fBtm struct\fR on entry.  Additionally, for some specifiers,
\fBstrptime()\fR will use some values in the input \fBtm struct\fR to
recalculate the date and re-assign the appropriate members of the \fBtm
struct\fR.
.RE
.sp
.LP
The following describes extended features regardless of whether
\fB_STRPTIME_DONTZERO\fR is defined or not defined:
.RS +4
.TP
.ie t \(bu
.el o
If
.B %j
is specified,
.B tm_yday
is set;  if year is given, and if
month and day are not given,
.B strptime()
calculates and sets
.BR tm_mon ,
.BR tm_mday ,
and
.BR tm_year .
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B %U
or
.B %W
is specified and if weekday and year are given and
month and day of month are not given,
.B strptime()
calculates and sets
.BR tm_mon ,
.BR tm_mday ,
.BR tm_wday ,
and
.BR tm_year .
.RE
.sp
.LP
The following describes extended features when
.B _STRPTIME_DONTZERO
is
not defined:
.RS +4
.TP
.ie t \(bu
.el o
If
.B %C
is specified and
.B %y
is not specified,
\fBstrptime()\fRassumes 0 as the year offset, then calculates the year, and
assigns
.BR tm_year .
.RE
.sp
.LP
The following describes extended features when
.B _STRPTIME_DONTZERO
is
defined:
.RS +4
.TP
.ie t \(bu
.el o
If
.B %C
is specified and
.B %y
is not specified, \fBstrptime()\fR
assumes the year offset of the year value of the
.B tm_year
member of the
input
.BR "tm struct" ,
then calculates the year and assigns
.BR tm_year .
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B %j
is specified and neither
.BR %y ,
.BR %Y ,
nor
.B %C
are
specified, and neither month nor day of month are specified,
\fBstrptime()\fR assumes the year value given by the value of the
\fBtm_year\fR field of the input
.BR "tm struct" .
Then, in addition to
setting
.BR tm_yday ,
\fBstrptime()\fR uses day-of-year and year values to
calculate the month and day-of-month, and assigns
.B tm_month
and
.BR tm_mday .
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B %U
or
.B %W
is specified, and if weekday and/or year are not
given, and month and day of month are not given,
.B strptime()
will
assume the weekday value and/or the year value as the value of the
\fBtm_wday\fR field and/or \fBtm_year\fR field of the input \fBtm struct\fR.
Then,
.B strptime()
will calculate the month and day-of-month and assign
.BR tm_month ,
.BR tm_mday ,
and/or \fBtm_year\fR.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B %p
is specified and if hour is not specified, \fBstrptime()\fR
will reference, and if needed, update the
.B tm_hour
member. If the
\fBam_pm\fR input is p.m. and the input \fBtm_hour\fR value is between 0 -
11,
.B strptime()
will add 12 hours and update
.BR tm_hour .
If the
\fBam_pm\fR input is a.m. and input \fBtm_hour\fR value is between 12 - 23,
\fBstrptime()\fR will subtract 12 hours and update \fBtm_hour\fR.
.RE
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B strptime()
returns a pointer to the
character following the last character parsed. Otherwise, a null pointer is
returned.
.SH USAGE
.sp
.LP
Several "same as" formats, and the special processing of white-space
characters are provided in order to ease the use of identical  \fIformat\fR
strings for \fBstrftime\fR(3C) and \fBstrptime()\fR.
.sp
.LP
The
.B strptime()
function tries to calculate
.BR tm_year ,
.BR tm_mon ,
and
.B tm_mday
when given incomplete input.  This allows
the
.B "struct tm"
created by
.B strptime()
to be passed to
.BR mktime (3C)
to produce a
.B time_t
value for dates and times that
are representable by a
.BR time_t .
.RB "As an example, since" " mktime()"
ignores
.BR tm_yday ,
\fBstrptime()\fR calculates \fBtm_mon\fR and
\fBtm_mday\fR as well as filling in \fBtm_yday\fR when \fB%j\fR is specified
without otherwise specifying a month and day within month.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
CSIEnabled
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
.BR ctime (3C),
.BR getdate (3C),
.BR isspace (3C),
.BR mktime (3C),
.BR setlocale (3C),
\fBstrftime\fR(3C), \fBattributes\fR(5),
.BR environ (5),
.BR standards (5)
