'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited  All Rights Reserved
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH mq_open 3C "5 Feb 2008" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
mq_open \- open a message queue
.SH SYNOPSIS
.LP
.nf
#include <mqueue.h>

\fBmqd_t\fR \fBmq_open\fR(\fBconst char *\fIname\fR, \fBint\fR \fIoflag\fR,
     \fB/* unsigned long\fR \fImode\fR, \fBmq_attr\fR \fIattr\fR */  .\|.\|.);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B mq_open()
function establishes the connection between a process
and a message queue with a message queue descriptor. It creates a open
message queue description that refers to the message queue, and a message
queue descriptor that refers to that open message queue description. The
message queue descriptor is used by other functions to refer to that message
queue.
.sp
.LP
The
.I name
argument points to a string naming a message queue. The
.I name
argument must conform to the construction rules for a  path-name.
If
.I name
is not the name of an existing message queue and its creation
is not requested,
.B mq_open()
fails and returns an error. The first
character of
.I name
must be a slash  (\fB/\fR) character and the
remaining characters of
.I name
cannot include any slash characters.
For maximum portability,
.I name
should include no more than 14
characters, but this limit is not enforced.
.sp
.LP
The
.I oflag
argument requests the desired receive and/or send access to
the message queue. The requested access permission to receive messages or
send messages is granted if the calling process would be granted read or
write access, respectively, to a file with the equivalent permissions.
.sp
.LP
The value of \fIoflag\fR is the bitwise inclusive \fBOR\fR of values from
the following list. Applications must specify exactly one of the first three
values (access modes) below in the value of
.IR oflag :
.sp
.ne 2
.mk
.na
.B O_RDONLY
.ad
.RS 13n
.rt
Open the message queue for receiving messages. The process can use the
returned message queue descriptor with
.BR mq_receive "(3C), but not"
.BR mq_send (3C).
A message queue may be open multiple times in the same or
different processes for receiving messages.
.RE

.sp
.ne 2
.mk
.na
.B O_WRONLY
.ad
.RS 13n
.rt
Open the queue for sending messages. The process can use the returned
message queue descriptor with
.BR mq_send "(3C) but not"
.BR mq_receive (3C).
A message queue may be open multiple times in the same
or different processes for sending messages.
.RE

.sp
.ne 2
.mk
.na
.B O_RDWR
.ad
.RS 13n
.rt
Open the queue for both receiving and sending messages. The process can use
any of the functions allowed for
.B O_RDONLY
and
.BR O_WRONLY .
A
message queue may be open multiple times in the same or different processes
for sending messages.
.RE

.sp
.LP
Any combination of the remaining flags may additionally be specified in the
value of
.IR oflag :
.sp
.ne 2
.mk
.na
.B O_CREAT
.ad
.RS 15n
.rt
This option is used to create a message queue, and it requires two
additional arguments:
.IR mode ,
which is of type
.BR mode_t ,
and
.IR attr ,
which is pointer to a
.B mq_attr
structure. If the pathname,
.IR name ,
has already been used to create a message queue that still
exists, then this flag has no effect, except as noted under \fBO_EXCL\fR
(see below). Otherwise, a message queue is created without any messages in
it.
.sp
The user ID of the message queue is set to the effective user ID of
process, and the group ID of the message queue is set to the effective group
ID of the process. The file permission bits are set to the value of
.IR mode ,
and modified by clearing all bits set in the file mode creation
mask of the process (see
.BR umask (2)).
.sp
If
.I attr
is non-\fINULL\fR and the calling process has the appropriate
privilege on
.IR name ,
the message queue
.I mq_maxmsg
and
.I mq_msgsize
attributes are set to the values of the corresponding
members in the
.B mq_attr
structure referred to by
.IR attr .
If
.I attr
is non-\fINULL\fR, but the calling process does not have the
appropriate privilege on
.IR name ,
the
.B mq_open()
function fails and
returns an error without creating the message queue.
.RE

.sp
.ne 2
.mk
.na
.B O_EXCL
.ad
.RS 15n
.rt
If both
.B O_EXCL
and
.B O_CREAT
are set,
.B mq_open()
will fail
if the message queue
.I name
exists. The check for the existence of the
message queue and the creation of the message queue if it does not exist are
atomic with respect to other processes executing
.B mq_open()
naming the
same
.I name
with both
.B O_EXCL
and
.B O_CREAT
set.  If
.B O_EXCL
and
.B O_CREAT
are not set, the result is undefined.
.RE

.sp
.ne 2
.mk
.na
.B O_NONBLOCK
.ad
.RS 15n
.rt
The setting of this flag is associated with the open message queue
description and determines whether a
.BR mq_send "(3C) or"
.BR mq_receive (3C)
waits for resources or messages that are not currently
available, or fails with
.B errno
set to
.BR EAGAIN .
See
.BR mq_send (3C)
and \fBmq_receive\fR(3C) for details.
.RE

.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B mq_open()
returns a message queue
descriptor; otherwise the function returns \fB(mqd_t)\(mi1\fR and sets
.B errno
to indicate the error condition.
.SH ERRORS
.sp
.LP
The
.B mq_open()
function will fail if:
.sp
.ne 2
.mk
.na
.B EACCES
.ad
.RS 17n
.rt
The message queue exists and the permissions specified by
.I oflag
are
denied, or the message queue does not exist and permission to create the
message queue is denied.
.RE

.sp
.ne 2
.mk
.na
.B EEXIST
.ad
.RS 17n
.rt
.B O_CREAT
and
.B O_EXCL
are set and the named message queue already
exists.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 17n
.rt
The
.B mq_open()
operation was interrupted by a signal.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 17n
.rt
The
.B mq_open()
operation is not supported for the given name, or
.B O_CREAT
was specified in
.IR oflag ,
the value of
.I attr
is not
.I NULL,
and either
.B mq_maxmsg
or
.B mq_msgsize
was less than or
equal to zero.
.RE

.sp
.ne 2
.mk
.na
.B EMFILE
.ad
.RS 17n
.rt
The number of open message queue descriptors in this process exceeds
.B MQ_OPEN_MAX,
of the number of open file descriptors in this process
exceeds
.BR OPEN_MAX.
.RE

.sp
.ne 2
.mk
.na
.B ENAMETOOLONG
.ad
.RS 17n
.rt
The length of the
.I name
string exceeds
.B PATH_MAX,
or a pathname
component is longer than
.I NAME_MAX
while
.B _POSIX_NO_TRUNC
is in
effect.
.RE

.sp
.ne 2
.mk
.na
.B ENFILE
.ad
.RS 17n
.rt
Too many message queues are currently open in the system.
.RE

.sp
.ne 2
.mk
.na
.B ENOENT
.ad
.RS 17n
.rt
.B O_CREAT
is not set and the named message queue does not exist.
.RE

.sp
.ne 2
.mk
.na
.B ENOSPC
.ad
.RS 17n
.rt
There is insufficient space for the creation of the new message queue.
.RE

.sp
.ne 2
.mk
.na
.B ENOSYS
.ad
.RS 17n
.rt
The
.B mq_open()
function is not supported by the system.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
lw(2.75i) |lw(2.75i)
lw(2.75i) |lw(2.75i)
.
\fBATTRIBUTE TYPE\fR\fBATTRIBUTE VALUE\fR
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
_
StandardSee \fBstandards\fR(5).
.TE

.SH SEE ALSO
.sp
.LP
.BR exec (2),
.BR exit (2),
.BR umask (2),
.BR sysconf (3C),
.BR mqueue.h (3HEAD),
.BR mq_close (3C),
.BR mq_receive (3C),
.BR mq_send (3C),
.BR mq_setattr (3C),
.BR mq_unlink (3C),
.BR attributes (5),
.BR standards (5)
.SH NOTES
.sp
.LP
Due to the manner in which message queues are implemented, they should not
be considered secure and should not be used in security-sensitive
applications.
.sp
.LP
Solaris 2.6 was the first release to support the Asynchronous Input and
Output option. Prior to this release, this function always returned
\fB\(mi1\fR and set \fBerrno\fR to
.BR ENOSYS .
