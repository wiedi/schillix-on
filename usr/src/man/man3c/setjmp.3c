'\" te
.\" Copyright (c) 2002, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1997, The Open Group. All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH setjmp 3C "14 Aug 2002" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
setjmp, sigsetjmp, longjmp, siglongjmp \- non-local goto
.SH SYNOPSIS
.LP
.nf
#include <setjmp.h>

\fBint\fR \fBsetjmp\fR(\fBjmp_buf\fR \fIenv\fR);
.fi

.LP
.nf
\fBint\fR \fBsigsetjmp\fR(\fBsigjmp_buf\fR \fIenv\fR, \fBint\fR \fIsavemask\fR);
.fi

.LP
.nf
\fBvoid\fR \fBlongjmp\fR(\fBjmp_buf\fR \fIenv\fR, \fBint\fR \fIval\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsiglongjmp\fR(\fBsigjmp_buf\fR \fIenv\fR, \fBint\fR \fIval\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions are useful for dealing with errors  and interrupts
encountered in a low-level subroutine of a program.
.sp
.LP
The
.B setjmp()
function saves its stack environment in
.I env
for
later use by
.BR longjmp() .
.sp
.LP
The
.B sigsetjmp()
function saves the calling process's registers and
stack environment (see
.BR sigaltstack (2))
in
.I env
for later use by
.BR siglongjmp() .
If
.I savemask
is non-zero, the calling process's
signal mask (see
.BR sigprocmask (2))
and scheduling parameters (see
.BR priocntl (2))
are also saved.
.sp
.LP
The
.B longjmp()
function restores the environment saved by the last call
of
.B setjmp()
with the corresponding
.I env
argument. After
.B longjmp()
completes, program execution continues as if the corresponding
call to
.B setjmp()
had just returned the value
.IR val .
The caller of
.B setjmp()
must not have returned in the interim.  The
.B longjmp()
function cannot cause
.B setjmp()
to return the value 0.  If
.B longjmp()
is invoked with a second argument of 0,
.B setjmp()
will
return 1. At the time of the second return from
.BR setjmp() ,
all external
and static variables have values as of the time
.B longjmp()
is called (see
.BR EXAMPLES ).
.sp
.LP
The
.B siglongjmp()
function restores the environment saved by the last
call of
.B sigsetjmp()
with the corresponding
.I env
argument. After
.B siglongjmp()
completes, program execution continues as if the
corresponding call to
.B sigsetjmp()
had just returned the value
.IR val .
The
.B siglongjmp()
function cannot cause
.B sigsetjmp()
to return the
value 0.  If
.B siglongjmp()
is invoked with a second argument of 0,
.B sigsetjmp()
will return 1. At the time of the second return from
.BR sigsetjmp() ,
all external and static variables have values as of the
time
.B siglongjmp()
was called.
.sp
.LP
If a signal-catching function interrupts
.BR sleep (3C)
and calls
.B siglongjmp()
to restore an environment saved prior to the
.BR sleep()
call, the action associated with
.B SIGALRM
and time it is scheduled to be
generated are unspecified. It is also unspecified whether the
.B SIGALRM
signal is blocked, unless the process's signal mask is restored as part of the
environment.
.sp
.LP
The
.B siglongjmp()
function restores the saved signal mask if and only
if the
.I env
argument was initialized by a call to the
.BR sigsetjmp()
function with a non-zero
.I savemask
argument.
.sp
.LP
The values of register and automatic variables are undefined. Register or
automatic variables whose value must be relied upon must be declared as
volatile.
.SH RETURN VALUES
.sp
.LP
If the return is from a direct invocation,
.B setjmp()
and
.B sigsetjmp()
return
.BR 0 .
If the return is from a call to
.BR longjmp() ,
.B setjmp()
returns a non-zero value. If the return is
from a call to
.BR siglongjmp() ,
.B sigsetjmp()
returns a non-zero
value.
.sp
.LP
After
.B longjmp()
is completed, program execution continues as if the
corresponding invocation of
.B setjmp()
had just returned the value
specified by
.IR val .
The
.B longjmp()
function cannot cause
.B setjmp()
to return 0; if
.I val
is 0,
.B setjmp()
returns 1.
.sp
.LP
After
.B siglongjmp()
is completed, program execution continues as if the
corresponding invocation of
.B sigsetjmp()
had just returned the value
specified by
.IR val .
The
.B siglongjmp()
function cannot cause
.B sigsetjmp()
to return 0; if
.I val
is 0,
.B sigsetjmp()
returns
1.
.SH EXAMPLES
.LP
.B Example 1
Example of
.B setjmp()
and
.B longjmp()
functions.
.sp
.LP
The following example uses both
.B setjmp()
and
.B longjmp()
to return
the flow of control to the appropriate instruction block:

.sp
.in +2
.nf
#include <stdio.h>
#include <setjmp.h>
#include <signal.h>
#include <unistd.h>
jmp_buf env; static void signal_handler();

main(\|)  {
        int returned_from_longjump, processing = 1;
        unsigned int time_interval = 4;
        if ((returned_from_longjump = setjmp(env)) != 0)
            switch (returned_from_longjump)     {
              case SIGINT:
                printf("longjumped from interrupt %d\en",SIGINT);
                break;
              case SIGALRM:
                printf("longjumped from alarm %d\en",SIGALRM);
                break;
            }
        (void) signal(SIGINT, signal_handler);
        (void) signal(SIGALRM, signal_handler);
        alarm(time_interval);
        while (processing)        {
          printf(" waiting for you to INTERRUPT (cntrl-C) .\|.\|.\en");
          sleep(1);
        }		 /* end while forever loop */
}

static void signal_handler(sig)
int sig; {
        switch (sig)     {
          case SIGINT:	.\|.\|. 	  /* process for interrupt */
                      	longjmp(env,sig);
                             	  /* break never reached */
          case SIGALRM:	.\|.\|. 	  /* process for alarm */
                       	longjmp(env,sig);
                               /* break never reached */
          default:     	exit(sig);
        }
}
.fi
.in -2

.sp
.LP
When this example is compiled and executed, and the user sends an interrupt
signal, the output will be:

.sp
.in +2
.nf
longjumped from interrupt
.fi
.in -2
.sp

.sp
.LP
Additionally, every 4 seconds the alarm will expire, signalling this process,
and the output will be:

.sp
.in +2
.nf
longjumped from alarm
.fi
.in -2
.sp

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR getcontext (2),
.BR priocntl (2),
.BR sigaction (2),
.BR sigaltstack (2),
.BR sigprocmask (2),
.BR signal (3C),
.BR attributes (5),
.BR standards (5)
.SH WARNINGS
.sp
.LP
If
.B longjmp()
or
.B siglongjmp()
are called even though
.I env
was
never primed by a call to
.B setjmp()
or
.BR sigsetjmp() ,
or when the
last such call was in a function that has since returned, the results are
undefined.
