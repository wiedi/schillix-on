'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH door_server_create 3C "22 Mar 2005" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
door_server_create \- specify an alternative door server thread creation
function
.SH SYNOPSIS
.LP
.nf
\fBcc\fR \fB-mt\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. [ \fIlibrary\fR.\|.\|. ]
#include <door.h>

\fBvoid (*) ()\fR \fBdoor_server_create\fR(\fBvoid (*\fIcreate_proc\fR)(door_info_t*));
.fi

.SH DESCRIPTION
.sp
.LP
Normally, the doors library creates new door  server threads in response to
incoming concurrent door invocations automatically. There is no pre-defined
upper limit on the number of  server threads that the system creates in
response to incoming  invocations (1 server thread for each active door
invocation). These threads are created with the default thread stack size
and POSIX (see
.BR standards (5))
threads cancellation disabled.  The
created threads also have the
.B THR_BOUND
.RB "| " " THR_DETACHED"
attributes for Solaris threads and the
.B PTHREAD_SCOPE_SYSTEM
|
.B PTHREAD_CREATE_DETACHED
attributes for POSIX threads. The signal
disposition, and scheduling class of the  newly created thread are inherited
from the  calling thread (initially from the thread calling
.BR door_create() ,
and subsequently from the current active door server
thread).
.sp
.LP
The
.B door_server_create()
function allows control over the creation of
server threads needed for door invocations. The procedure
.I create_proc
is called every time the available server thread pool is depleted. In the
case of private server pools associated with a door  (see the
.B DOOR_PRIVATE
attribute in
.BR door_create() ),
information on which
pool is depleted is passed  to the create function in the form of a
.B door_info_t
structure. The
.B di_proc
and
.B di_data
members of
the
.B door_info_t
structure can be  used as a door identifier associated
with the depleted pool. The
.I create_proc
procedure may limit the number
of server threads created and may also create server  threads with
appropriate attributes (stack size, thread-specific data, POSIX thread
cancellation, signal mask, scheduling attributes, and so forth)  for use
with door invocations.
.sp
.LP
The overall amount of data and argument descriptors that can be sent
through a door is limited by both the server thread's stack size and by the
parameters of the door itself. See
.BR door_setparam (3C).
.sp
.LP
The specified server creation function should create user level threads
using
.B thr_create()
with the
.B THR_BOUND
flag, or in the case of
POSIX threads,
.B pthread_create()
with the
.BR PTHREAD_SCOPE_SYSTEM
attribute. The server threads make themselves available for incoming door
.RB "invocations on this process by issuing a " door_return ( "NULL, 0, NULL, 0" ).
In this case, the
.B door_return()
arguments are ignored. See
.BR door_return (3C)
and
.BR thr_create (3C).
.sp
.LP
The server threads created by default are enabled for  POSIX thread
cancellations which may lead to unexpected  thread terminations while
holding resources  (such as locks) if the client aborts the associated
.BR door_call() .
See
.BR door_call "(3C). Unless the server code is truly"
interested in notifications  of client aborts during a door invocation and
is prepared to handle such notifications using  cancellation handlers, POSIX
thread cancellation should  be disabled for server threads using
.B pthread_setcancelstate
.RB ( PTHREAD_CANCEL_DISABLE ,
.IR NULL ).
If
all doors are created with the
.B DOOR_NO_CANCEL
flag (see
.BR door_create (3C)),
the threads will never be cancelled by an aborted
.B door_call()
call
.sp
.LP
The
.I create_proc
procedure need not create any additional server
threads if there is at least one server thread currently active in the
process (perhaps handling another door invocation)  or it may create as many
as seen fit each time it is called. If there are no available server threads
during an incoming door invocation, the associated
.B door_call()
blocks
until a server thread becomes available. The
.I create_proc
procedure
must be MT-Safe.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B door_server_create()
returns a pointer to
the previous server creation function. This function has no failure mode (it
cannot fail).
.SH EXAMPLES
.LP
.B Example 1
Creating door server threads.
.sp
.LP
The following example creates door server threads with cancellation
disabled and an 8k stack instead of the default stack size:

.sp
.in +2
.nf
#include <door.h>
#include <pthread.h>
#include <thread.h>

void *
my_thread(void *arg)
{
        pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, NULL);
        door_return(NULL, 0, NULL, 0);
}
void
my_create(door_info_t *dip)
{
        thr_create(NULL, 8192, my_thread, NULL,
                   THR_BOUND | THR_DETACHED, NULL);
}
main(\|)
{
        (void)door_server_create(my_create);
        \|.\|.\|.
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Architectureall
_
AvailabilitySUNWcsu
_
Interface StabilityStable
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR door_bind (3C),
.BR door_call (3C),
.BR door_create (3C),
.BR door_return (3C),
.BR pthread_create (3C),
.BR pthread_setcancelstate (3C),
.BR thr_create (3C),
.BR attributes (5),
.BR cancellation (5),
.BR standards (5)
