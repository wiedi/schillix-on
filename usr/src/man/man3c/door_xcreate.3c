'\" te
.\" Copyright (c) 2009, Sun Microsystems Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH door_xcreate 3C "17 Nov 2009" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
door_xcreate \- create a door descriptor for a private door with per-door
control over thread creation
.SH SYNOPSIS
.LP
.nf
#include <door.h>

typedef void door_server_procedure_t(void *, char *, size_t,
     door_desc_t *, uint_t);
.fi

.LP
.nf
typedef int door_xcreate_server_func_t(door_info_t *,
     void *(*)(void *), void *, void *);
.fi

.LP
.nf
typedef void door_xcreate_thrsetup_func_t(void *);
.fi

.LP
.nf
\fBint\fR \fBdoor_xcreate\fR(\fBdoor_server_procedure_t *\fIserver_proceduere\fR,
     \fBvoid *\fIcookie\fR, \fBuint_t\fR \fIattributes\fR,
     \fBdoor_xcreate_server_func_t *\fIthr_create_func\fR,
     \fBdoor_xcreate_thrsetup_func_t *\fIthr_setup_func\fR, \fBvoid *\fIcrcookie\fR,
     \fBint\fR \fInthread\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B door_xcreate()
function creates a private door to the given
.IR server_procedure ,
with per-door control over the creation of threads
that will service invocations of that door. A private door is a door that
has a private pool of threads that service calls to that door alone;
non-private doors share a pool of service threads (see
.BR door_create (3C)).
.SS "Creating private doors using \fBdoor_create()\fR"
.sp
.LP
Prior to the introduction of
.BR door_xcreate() ,
a private door was
created using
.B door_create()
specifying attributes including
.B DOOR_PRIVATE
after installing a suitable door server thread creation
function using
.BR door_server_create() .
During such a call to
.BR door_create() ,
the first server thread for that door is created by
calling the door server function; you must therefore already have installed
a custom door server creation function using
.BR door_server_create() .
The
custom server creation function is called at initial creation of a private
door, and again whenever a new invocation uses the last available thread for
that door. The function must decide whether it wants to increase the level
of concurrency by creating an additional thread - if it decides not to then
further invocations may have to wait for an existing active invocation to
complete before they can proceed. Additional threads may be created using
whatever thread attributes are desired in the application, and the
application must specify a thread start function (to
.BR thr_create (3C)
or
.BR pthread_create (3C))
which will perform a
.B door_bind()
to the
.RB "newly-created door before calling " door_return (\c
.IR NULL ,
0,
.IR NULL ,
0) to enter service. See
.BR door_server_create (3C)
and
.BR door_bind (3C)
for more information and for an example.
.sp
.LP
This "legacy" private door API is adequate for many uses, but has some
limitations:
.RS +4
.TP
.ie t \(bu
.el o
The server thread creation function appointed via the
.B door_server_create()
is shared by all doors in the process. Private
doors are distinguished from non-private in that the
.B door_info_t
pointer argument to the thread creation function is non-null for private
doors; from the
.B door_info_t
the associated door server procedure is
available via the
.B di_proc
member.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If a library wishes to create a private door of which the application is
essentially unaware it has no option but to inherit any function appointed
with
.B door_server_create()
which may render the library door
inoperable.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Newly-created server threads must bind to the door they will service, but
the door file descriptor to quote in
.B door_bind()
is not available in
the
.B door_info_t
structure we receive a pointer to. The door file
descriptor is returned as the result of
.BR door_create() ,
but the initial
service thread is created during the call to
.BR door_create() .
This leads
to complexity in the startup of the service thread, and tends to force the
use of global variables for the door file descriptors as per the example in
.BR door_bind() .
.RE
.SS "Creating private doors with \fBdoor_xcreate()\fR"
.sp
.LP
The
.B door_xcreate()
function is purpose-designed for the creation of
private doors and simplifies their use by moving responsibility for binding
the new server thread and synchronizing with it into a library-provided
thread startup function:
.RS +4
.TP
.ie t \(bu
.el o
The first three arguments to
.B door_xcreate()
are as you would use in
.BR door_create() :
the door
.IR server_procedure ,
a private cookie to
pass to that procedure whenever it is invoked for this door, and desired
door attributes. The
.B DOOR_PRIVATE
attribute is implicit, and an
additional attribute of
.B DOOR_NO_DEPLETION_CB
is available.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Four additional arguments specify a server thread creation function to use
for this door (must not be
.IR NULL ),
a thread setup function for new
server threads (can be
.IR NULL ),
a cookie to pass to those functions, and
the initial number of threads to create for this door.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The
.B door_xcreate_server_func_t()
for creating server threads has
differing semantics to those of a
.B door_server_func_t()
used in
.BR door_server_create() .
In addition to a
.B door_info_t
pointer it
also receives as arguments a library-provided thread start function and
thread start argument that it must use, and the private cookie registered in
the call to
.BR door_xcreate() .
The nominated
.B door_xcreate_server_func_t()
must:
.RS +4
.TP
.ie t \(bu
.el o
Return 0 if no additional thread is to be created, for example if it
decides the current level of concurrency is sufficient. When the server
thread creation function is invoked as part of a depletion callback (as
opposed to during initial
.BR door_xcreate() )
the
.B door_info_t
.B di_attributes
member includes
.BR DOOR_DEPLETION_CB .
.RE
.RS +4
.TP
.ie t \(bu
.el o
Otherwise attempt to create exactly one new thread using
.BR thr_create()
or
.BR pthread_create() ,
with whatever thread attributes (stack size) are
desired and quoting the implementation-provided thread start function and
opaque data cookie. If the call to
.B thr_create()
or
.B pthread_create()
is successful then return 1, otherwise return -1.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Do not call
.B door_bind()
or request to enter service via
.B
door_return\c
.RI ( NULL ,
0,
.IR NULL ,
0).
.RE
As in
.B door_server_create()
new server threads must be created
.B PTHREAD_SCOPE_SYSTEM
and
.B PTHREAD_CREATE_DETACHED
for POSIX
threads, and
.B THR_BOUND
and
.B THR_DETACHED
for Solaris threads. The
signal disposition and scheduling class of newly-created threads are
inherited from the calling thread, initially from the thread calling
.B door_xcreate()
and subsequently from the current active door server
thread.
.RE
.RS +4
.TP
.ie t \(bu
.el o
The library-provided thread start function performs the following
operations in the order presented:
.RS +4
.TP
.ie t \(bu
.el o
Calls the
.B door_xcreate_thrsetup_func_t()
if it is not
.IR NULL ,
passing the
.IR crcookie .
You can use this setup function to perform
custom service thread configuration that must be done from the context of
the new thread. Typically this is to configure cancellation preferences, and
possibly to associate application thread-specific-data with the
newly-created server thread.
.sp
If
.BR thr_setup_func() " was "
.I NULL
then a default is applied which
will configure the new thread with
\fBpthread_setcancelstate\fR(\fBPTHREAD_CANCEL_DISABLE\fR,
.IR NULL )
and
\fBpthread_setcanceltype\fR(\fBPTHREAD_CANCEL_DEFERRED\fR,
.IR NULL ).
If
the server code is truly interested in notifications of client aborts during
a door invocation then you will need to provide a
.B thr_setup_func()
that does not disable cancellations, and use
.BR pthread_cleanup_push (3C)and
\fBpthread_cleanup_pop\fR(3C)as
appropriate.
.RE
.RS +4
.TP
.ie t \(bu
.el o
Binds the new thread to the door file descriptor using
.BR door_bind() .
.RE
.RS +4
.TP
.ie t \(bu
.el o
Synchronizes with
.B door_xcreate()
so that the new server thread is
known to have successfully completed
.B door_bind()
before
.B door_xcreate()
returns.
.RE
.RE
.RS +4
.TP
.ie t \(bu
.el o
The number of service threads to create at initial door creation time can
be controlled through the
.I nthread
argument to
.BR door_xcreate() .
The nominated
.B door_xcreate_server_func_t()
will be called
.I nthread
times. All
.I nthread
new server threads must be created
successfully
.RB ( thr_create_func()
returns 1 for each) and all must
succeed in binding to the new door; if fewer than
.I nthread
threads are
created, or fewer than
.I nthread
succeed in binding, then
.B door_xcreate()
fails and any threads that were created are made to
exit.
.sp
No artificial maximum value is imposed on the
.I nthread
argument: it
may be as high as system resources and available virtual memory permit.
There is a small amount of additional stack usage in the
.B door_xcreate()
stack frame for each thread - up to 16 bytes in a
64-bit application. If there is unsufficient room to extend the stack for
this purpose then
.B door_xcreate()
fails with
.BR E2BIG .
.sp
The door attributes that can be selected in the call to
.B door_xcreate()
are the same as in
.BR door_create() ,
with
.B DOOR_PRIVATE
implied and
.B DOOR_NO_DEPLETION_CB
added:
.RS

.sp
.ne 2
.mk
.na
.B DOOR_PRIVATE
.ad
.sp .6
.RS 4n
.RB "It is not necessary to include this attribute. The" " door_xcreate()"
interfaces only creates private doors.
.RE

.sp
.ne 2
.mk
.na
.B DOOR_NO_DEPLETION_CB
.ad
.sp .6
.RS 4n
Create the initial pool of
.I nthread
service threads, but do not
perform further callbacks to the
.B thr_create_func()
for this door when
the thread pool appears to be depleted at the start of a new door
invocation. This allows you to select a fixed level of concurrency.
.sp
Another
.B di_attribute
is defined during thread depletion callbacks:
.RE

.sp
.ne 2
.mk
.na
.B DOOR_DEPLETION_CB
.ad
.sp .6
.RS 4n
This call to the server thread creation function is the result of a
depletion callback. This attribute is not set when the function is called
during initial
.BR door_xcreate() .
.RE

.RE

.RE
.sp
.LP
The descriptor returned from
.B door_xcreate()
will be marked as close
on
.BR exec
.RB ( FD_CLOEXEC ).
Information about a door is available for
all clients of a door using
.BR door_info (3C).
Applications concerned with
security should not place secure information in door data that is accessible
by
.BR door_info() .
In particular, secure data should not be stored in the
data item cookie.
.sp
.LP
A process can advertise a door in the file system name space using
.BR fattach (3C).
.sp
.LP
After creation,
.BR door_setparam (3C)can
be used to set limits on the
amount of data and descriptors clients can send over the door.
.sp
.LP
A door created with
.B door_xcreate()
may be revoked using
.BR door_revoke (3C).
This closes the associated file descriptor, and acts
as a barrier to further door invocations, but existing active invocations
are not guaranteed to have completed before
.B door_revoke()
returns.
Server threads bound to a revoked door do not wakeup or exit automatically
when the door is revoked.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B door_xcreate()
returns a non-negative
value. Otherwise,
.B door_xcreate()
returns -1 and sets
.B errno
to
indicate the error.
.SH ERRORS
.sp
.LP
The
.B door_xcreate()
function will fail if:
.sp
.ne 2
.mk
.na
.B E2BIG
.ad
.RS 11n
.rt
The requested
.I nthread
is too large. A small amount of stack space is
required for each thread we must start and synchronize with. If extending
the
.B door_xcreate()
stack by the required amount will exceed the stack
bounds then
.B E2BIG
is returned.
.RE

.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 11n
.rt
The attempt to
.B door_bind()
within the library-provided thread start
function failed.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 11n
.rt
Invalid attributes are passed,
.I nthread
is less than 1, or
.B thr_create_func()
is
.IR NULL .
This is also returned if
.B thr_create_func()
returns 0 (no thread creation attempted) during
.BR door_xcreate() .
.RE

.sp
.ne 2
.mk
.na
.B EMFILE
.ad
.RS 11n
.rt
The process has too many open descriptors.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 11n
.rt
Insufficient memory condition while creating the door.
.RE

.sp
.ne 2
.mk
.na
.B ENOTSUP
.ad
.RS 11n
.rt
A
.B door_xcreate()
call was attempted from a fork handler.
.RE

.sp
.ne 2
.mk
.na
.B EPIPE
.ad
.RS 11n
.rt
A call to the nominated
.B thr_create_func()
returned -1 indicating that
.B pthread_create()
or
.B thr_create()
failed.
.RE

.SH EXAMPLES
.LP
.B Example 1
Create a private door with an initial pool of 10 server
threads
.sp
.LP
Create a private door with an initial pool of 10 server threads. Threads
are created with the minimum required attributes and there is no thread
setup function. Use
.B fattach()
to advertise the door in the filesystem
namespace.

.sp
.in +2
.nf
static pthread_attr_t tattr;

/*
 * Simplest possible door_xcreate_server_func_t.  Always attempt to
 * create a thread, using the previously initialized attributes for
 * all threads. We must use the start function and argument provided,
 * and make no use of our private mycookie argument.
 */
int
thrcreatefunc(door_info_t *dip, void *(*startf)(void *),
    void *startfarg, void *mycookie)
{
        if (pthread_create(NULL, &tattr, startf, startfarg) != 0) {
                perror("thrcreatefunc: pthread_create");
                return (-1);
        }

        return (1);
}

/*
 * Dummy door server procedure - does no processing.
 */
void
door_proc(void *cookie, char *argp, size_t argsz, door_desc_t *descp,
    uint_t n)
{
    door_return (NULL, 0, NULL, 0);
}

int
main(int argc, char *argv[])
{
    struct stat buf;
    int did;

    /*
     * Setup thread attributes - minimum required.
     */
    (void) pthread_attr_init(&tattr);
    (void) pthread_attr_setdetachstate(&tattr, PTHREAD_CREATE_DETACHED);
    (void) pthread_attr_setscope(&tattr, PTHREAD_SCOPE_SYSTEM);

    /*
     * Create a private door with an initial pool of 10 server threads.
     */
    did = door_xcreate(door_proc, NULL, 0, thrcreatefunc, NULL, NULL,
                       10);

    if (did == -1) {
        perror("door_xcreate");
        exit(1);
    }

    if (stat(DOORPATH, &buf) < 0) {
        int newfd;

        if ((newfd = creat(DOORPATH, 0644)) < 0) {
            perror("creat");
            exit(1);
        }
        (void) close(newfd);
    }

    (void) fdetach(DOORPATH);

    (void) fdetach(DOORPATH);
    if (fattach(did, DOORPATH) < 0) {
        perror("fattach");
        exit(1);
    }

    (void) fprintf(stderr, "Pausing in main\en");
    (void) pause();
}
.fi
.in -2

.LP
.B Example 2
Create a private door with exactly one server thread and no
callbacks for additional threads
.sp
.LP
Create a private door with exactly one server thread and no callbacks for
additional threads.  Use a server thread stacksize of 32K, and specify a
thread setup function.

.sp
.in +2
.nf
#define DOORPATH        "/tmp/grmdoor"

static pthread_attr_t tattr;

/*
 * Thread setup function - configuration that must be performed from
 * the conext of the new thread.  The mycookie argument is the
 * second-to-last argument from door_xcreate.
 */
void
thrsetupfunc(void *mycookie)
{
    /*
     * If a thread setup function is specified it must do the
     * following at minimum.
     */
    (void) pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, NULL);

    /*
     * The default thread setup functions also performs the following
     * to disable thread cancellation notifications, so that server
     * threads are not cancelled when a client aborts a door call.
     * This is not a requirement.
     */
    (void) pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, NULL);

    /*
     * Now we can go on to perform other thread initialization,
     * for example to allocate and initialize some thread-specific data
     * for this thread;  for thread-specific data you can use a
       destructor function in pthread_key_create if you want to perform
       any actions if/when a door server thread exits.
     */
}

/*
 * The door_xcreate_server_func_t we will use for server thread
 * creation. The mycookie argument is the second-to-last argument
 * from door_xcreate.
 */
int
thrcreatefunc(door_info_t *dip, void *(*startf)(void *),
    void *startfarg, void *mycookie)
{
    if (pthread_create(NULL, &tattr, startf, startfarg) != 0) {
            perror("thrcreatefunc: pthread_create");
            return (-1);
    }

    return (1);
}

/*
 * Door procedure.  The cookie received here is the second arg to
 * door_xcreate.
 */
void
door_proc(void *cookie, char *argp, size_t argsz, door_desc_t *descp,
    uint_t n)
{
    (void) door_return(NULL, 0, NULL, 0);
}

int
main(int argc, char *argv[])
{
    struct stat buf;
    int did;

    /*
     * Configure thread attributes we will use in thrcreatefunc.
     * The PTHREAD_CREATE_DETACHED and PTHREAD_SCOPE_SYSTEM are
     * required.
     */
    (void) pthread_attr_init(&tattr);
    (void) pthread_attr_setdetachstate(&tattr, PTHREAD_CREATE_DETACHED);
    (void) pthread_attr_setscope(&tattr, PTHREAD_SCOPE_SYSTEM);
    (void) pthread_attr_setstacksize(&tattr, 16 * 1024);

    /*
     * Create a private door with just one server thread and asking for
         * no further callbacks on thread pool depletion during an
         * invocation.
         */
    did = door_xcreate(door_proc, NULL, DOOR_NO_DEPLETION_CB,
        thrcreatefunc, thrsetupfunc, NULL, 1);

    if (did == -1) {
            perror("door_xcreate");
            exit(1);
    }

    if (stat(DOORPATH, &buf) < 0) {
            int newfd;

            if ((newfd = creat(DOORPATH, 0644)) < 0) {
                    perror("creat");
                    exit(1);
            }
            (void) close(newfd);
    }

    (void) fdetach(DOORPATH);
    if (fattach(did, DOORPATH) < 0) {
            perror("fattach");
            exit(1);
    }

    (void) fprintf(stderr, "Pausing in main\en");
    (void) pause();
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Architectureall
_
AvailabilitySUNWcsu
_
Interface StabilityCommitted
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR door_bind (3C),
.BR door_call (3C),
.BR door_create (3C),
.BR door_info (3C),
.BR door_revoke (3C),
.BR door_server_create (3C),
.BR door_setparam (3C),
.BR fattach (3C),
.BR libdoor (3LIB),
.BR pthread_create (3C),
.BR pthread_cleanup_pop (3C),
.BR pthread_cleanup_push (3C),
.BR thr_create (3C),
.BR attributes (5),
.BR cancellation (5)
