'\" te
.\" Copyright 1989 AT&T  Copyright (c) 2004, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ptrace 3C "22 Mar 2004" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
ptrace \- allows a parent process to control the execution of a child
process
.SH SYNOPSIS
.LP
.nf
#include <unistd.h>
#include <sys/types.h>

\fBint\fR \fBptrace\fR(\fBint\fR \fIrequest\fR, \fBpid_t\fR \fIpid\fR, \fBint\fR \fIaddr\fR, \fBint\fR \fIdata\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B ptrace()
function allows a parent process to control the
execution of a child process. Its primary use is for the implementation of
breakpoint debugging. The child process behaves normally until it encounters
a signal (see
.BR signal.h (3HEAD)),
at which time it enters a stopped
state and its parent is notified by the
.BR wait (3C)
function. When the
child is in the stopped state, its parent can examine and modify its "core
image" using
.BR ptrace() .
Also, the parent can cause the child either to
terminate or continue, with the possibility of ignoring the signal that
caused it to stop.
.sp
.LP
The
.I request
argument determines the action to be taken by
.B ptrace()
and is one of the following:
.sp
.ne 2
.mk
.na
.B 0
.ad
.RS 5n
.rt
This request must be issued by the child process if it is to be traced by
its parent. It turns on the child's trace flag that stipulates that the
child should be left in a stopped state on receipt of a signal rather than
the state specified by
.I func
(see
.BR signal (3C)).
The
.IR pid ,
.IR addr ,
and
.I data
arguments are ignored, and a return value is not
defined for this request. Peculiar results ensue if the parent does not
expect to trace the child.
.RE

.sp
.LP
The remainder of the requests can only be used by the parent process. For
each,
.I pid
is the process
.B ID
of the child. The child must be in a
stopped state before these requests are made.
.sp
.ne 2
.mk
.na
.B 1, 2
.ad
.RS 8n
.rt
With these requests, the word at location
.I addr
in the address space
of the child is returned to the parent process. If instruction and data
space are separated, request
.B 1
returns a word from instruction space,
and request
.B 2
returns a word from data space. If instruction and data
space are not separated, either request
.B 1
or request
.B 2
may be
used with equal results. The
.I data
argument is ignored. These two
requests fail if
.I addr
is not the start address of a word, in which
case \fB\(mi1\fR is returned to the parent process and the parent's
.B errno
is set to
.BR EIO .
.RE

.sp
.ne 2
.mk
.na
.B 3
.ad
.RS 8n
.rt
With this request, the word at location
.I addr
in the child's user area
in the system's address space (see
.RB < sys/user.h >)
is returned to the
parent process. The
.I data
argument is ignored. This request fails if
.I addr
is not the start address of a word or is outside the user area,
in which case \fB\(mi1\fR is returned to the parent process and the parent's
.B errno
is set to
.BR EIO .
.RE

.sp
.ne 2
.mk
.na
.B 4, 5
.ad
.RS 8n
.rt
With these requests, the value given by the
.I data
argument is written
into the address space of the child at location
.IR addr .
If instruction
and data space are separated, request
.B 4
writes a word into instruction
space, and request
.B 5
writes a word into data space. If instruction and
data space are not separated, either request
.B 4
or request
.B 5
may
be used with equal results. On success, the value written into the address
space of the child is returned to the parent. These two requests fail if
.I addr
is not the start address of a word. On failure \fB\(mi1\fR is
returned to the parent process and the parent's
.B errno
is set to
.BR EIO .
.RE

.sp
.ne 2
.mk
.na
.B 6
.ad
.RS 8n
.rt
With this request, a few entries in the child's user area can be written.
.I data
gives the value that is to be written and
.I addr
is the
location of the entry. The few entries that can be written are the general
registers and the condition codes of the Processor Status Word.
.RE

.sp
.ne 2
.mk
.na
.B 7
.ad
.RS 8n
.rt
This request causes the child to resume execution. If the
.I data
argument is 0, all pending signals including the one that caused the child
to stop are canceled before it resumes execution. If the
.I data
argument
is a valid signal number, the child resumes execution as if it had incurred
.RI "that signal, and any other pending signals are canceled. The" " addr"
argument must be equal to 1 for this request. On success, the value of
.I data
is returned to the parent. This request fails if
.I data
is
not 0 or a valid signal number, in which case \fB\(mi1\fR is returned to the
parent process and the parent's
.B errno
is set to
.BR EIO .
.RE

.sp
.ne 2
.mk
.na
.B 8
.ad
.RS 8n
.rt
This request causes the child to terminate with the same consequences as
.BR exit (2).
.RE

.sp
.ne 2
.mk
.na
.B 9
.ad
.RS 8n
.rt
This request sets the trace bit in the Processor Status Word of the child
and then executes the same steps as listed above for request
.BR 7 .
The
trace bit causes an interrupt on completion of one machine instruction. This
effectively allows single stepping of the child.
.RE

.sp
.LP
To forestall possible fraud,
.B ptrace()
inhibits the set-user-ID
facility on subsequent calls to one of the
.B exec
family of functions
(see
.BR exec (2)).
If a traced process calls one of these functions, it
stops before executing the first instruction of the new image showing signal
.BR SIGTRAP .
.SH ERRORS
.sp
.LP
The
.B ptrace()
function will fail if:
.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 9n
.rt
The
.I request
argument is an illegal number.
.RE

.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 9n
.rt
The calling process does not have appropriate privileges to control the
calling process. See
.BR proc (4).
.RE

.sp
.ne 2
.mk
.na
.B ESRCH
.ad
.RS 9n
.rt
The
.I pid
argument identifies a child that does not exist or has not
executed a
.B ptrace()
call with request
.BR 0 .
.RE

.SH USAGE
.sp
.LP
The
.B ptrace()
function is available only with the 32-bit version of
.BR libc (3LIB).
It is not available with the 64-bit version of this
library.
.sp
.LP
The
.B /proc
debugging interfaces should be used instead of
.BR ptrace() ,
which provides quite limited debugger support and is itself
implemented using the
.B /proc
interfaces. There is no actual
.B ptrace()
system call in the kernel. See
.BR proc (4)
for descriptions
of the
.B /proc
debugging interfaces.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR exec (2),
.BR exit (2),
.BR libc (3LIB),
.BR signal (3C),
.BR signal.h (3HEAD),
.BR wait (3C),
.BR proc (4),
.BR attributes (5)
