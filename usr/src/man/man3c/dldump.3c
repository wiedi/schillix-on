'\" te
.\" Copyright (c) 2004 by Sun Microsystems, Inc.  All rights reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH dldump 3C "1 Mar 2004" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
dldump \- create a new file from a dynamic object component of the calling
process
.SH SYNOPSIS
.LP
.nf
#include <dlfcn.h>

\fBint\fR \fBdldump\fR(\fBconst char *\fR \fIipath\fR, \fBconst char *\fR \fIopath\fR, \fBint\fR \fIflags\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B dldump()
function creates a new dynamic object
.I opath
from
an existing dynamic object
.I ipath
that is bound to the current process.
An
.I ipath
value of
.B 0
is interpreted as the dynamic object that
started the process. The new object is constructed from the existing
objects' disc file. Relocations can be applied to the new object to pre-bind
it to other dynamic objects, or fix the object to a specific memory
location. In addition, data elements within the new object can be obtained
from the objects' memory image as this data exists in the calling process.
.sp
.LP
These techniques allow the new object to be executed with a lower startup
cost. This reduction can be because of less relocations being required to
load the object, or because of a reduction in the data processing
requirements of the object. However, limitations can exist in using these
techniques. The application of relocations to the new dynamic object
.I opath
can restrict its flexibility within a dynamically changing
environment. In addition, limitations in regards to data usage can make
dumping a memory image impractical. See
.BR EXAMPLES .
.sp
.LP
The runtime linker verifies that the dynamic object
.I ipath
is mapped
as part of the current process. Thus, the object must either be the dynamic
object that started the process, one of the process's dependencies, or an
object that has been preloaded. See
.BR exec (2),
and
.BR ld.so.1 (1).
.sp
.LP
As part of the runtime processing of a dynamic object,
.I relocation
records within the object are interpreted and applied to offsets within the
object. These offsets are said to be
.IR relocated .
Relocations can be
categorized into two basic types:
.I non-symbolic
and
.IR symbolic .
.sp
.LP
The
.I non-symbolic
relocation is a simple
.I relative
relocation
that requires the base address at which the object is mapped to perform the
relocation. The
.I symbolic
relocation requires the address of an
associated symbol, and results in a
.I binding
to the dynamic object that
defines this symbol. The symbol definition can originate from any of the
dynamic objects that make up the process, that is, the object that started
the process, one of the process's dependencies, an object that has been
preloaded, or the dynamic object being relocated.
.sp
.LP
The
.I flags
parameter controls the relocation processing and other
attributes of producing the new dynamic object
.IR opath .
Without any
.IR flags ,
the new object is constructed solely from the contents of the
.I ipath
disc file without any relocations applied.
.sp
.LP
Various relocation flags can be
.BR or 'ed
into the
.I flags
parameter
to affect the relocations that are applied to the new object.
.I Non-symbolic
relocations can be applied using the following:
.sp
.ne 2
.mk
.na
.B RTLD_REL_RELATIVE
.ad
.RS 21n
.rt
Relocation records from the object
.IR ipath ,
that define
.IR relative
relocations, are applied to the object
.IR opath .
.RE

.sp
.LP
A variety of
.I symbolic
relocations can be applied using the following
flags (each of these flags also implies
.B RTLD_REL_RELATIVE
is in
effect):
.sp
.ne 2
.mk
.na
.B RTLD_REL_EXEC
.ad
.RS 20n
.rt
Symbolic relocations that result in binding
.I ipath
to the dynamic
object that started the process, commonly a dynamic executable, are applied
to the object
.IR opath .
.RE

.sp
.ne 2
.mk
.na
.B RTLD_REL_DEPENDS
.ad
.RS 20n
.rt
Symbolic relocations that result in binding
.I ipath
to any of the
dynamic dependencies of the process are applied to the object
.IR opath .
.RE

.sp
.ne 2
.mk
.na
.B RTLD_REL_PRELOAD
.ad
.RS 20n
.rt
Symbolic relocations that result in binding
.I ipath
to any objects
preloaded with the process are applied to the object
.IR opath .
See
.B LD_PRELOAD
in
.BR ld.so.1 (1).
.RE

.sp
.ne 2
.mk
.na
.B RTLD_REL_SELF
.ad
.RS 20n
.rt
Symbolic relocations that result in binding
.I ipath
to itself, are
applied to the object
.IR opath .
.RE

.sp
.ne 2
.mk
.na
.B RTLD_REL_WEAK
.ad
.RS 20n
.rt
Weak relocations that remain unresolved are applied to the object
.I opath
as
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
.B RTLD_REL_ALL
.ad
.RS 20n
.rt
.I All
relocation records defined in the object
.I ipath
are applied
to the new object
.IR opath .
This is basically a concatenation of all the
above relocation flags.
.RE

.sp
.LP
Note that for dynamic executables,
.BR RTLD_REL_RELATIVE ,
.BR RTLD_REL_EXEC ,
and
.B RTLD_REL_SELF
have no effect. See
.BR EXAMPLES .
.sp
.LP
If relocations, knowledgeable of the base address of the mapped object, are
applied to the new object
.IR opath ,
then the new object becomes fixed to
the location that the
.I ipath
image is mapped within the current
process.
.sp
.LP
Any relocations applied to the new object
.I opath
will have the
original relocation record removed so that the relocation will not be
applied more than once. Otherwise, the new object
.I opath
will retain
the relocation records as they exist in the
.I ipath
disc file.
.sp
.LP
The following additional attributes for creating the new dynamic object
.I opath
can be specified using the
.I flags
parameter:
.sp
.ne 2
.mk
.na
.B RTLD_MEMORY
.ad
.RS 15n
.rt
The new object
.I opath
is constructed from the current memory contents
of the
.I ipath
image as it exists in the calling process. This option
allows data modified by the calling process to be captured in the new
object. Note that not all data modifications may be applicable for capture;
significant restrictions exist in using this technique. See
.BR EXAMPLES .
By default, when processing a dynamic executable, any allocated memory that
follows the end of the data segment is captured in the new object (see
.BR malloc (3C)
and
.BR brk (2)).
This data, which represents the process
heap, is saved as a new \fI\&.SUNW_heap\fR section in the object
.IR opath .
The objects' program headers and symbol entries, such as
.BR _end ,
are adjusted accordingly. See also
.B RTLD_NOHEAP.
When using
.RI "this attribute, any relocations that have been applied to the" " ipath"
memory image that do not fall into one of the requested relocation
categories are undone, that is, the relocated element is returned to the
value as it existed in the
.I ipath
disc file.
.RE

.sp
.ne 2
.mk
.na
.B RTLD_STRIP
.ad
.RS 15n
.rt
Only collect allocatable sections within the object
.IR opath .
Sections
that are not part of the dynamic objects' memory image are removed.
.B RTLD_STRIP
reduces the size of the
.I opath
disc file and is
comparable to having run the new object through
.BR strip (1).
.RE

.sp
.ne 2
.mk
.na
.B RTLD_NOHEAP
.ad
.RS 15n
.rt
Do not save any heap to the new object. This option is only meaningful when
processing a dynamic executable with the
.B RTLD_MEMORY
attribute and
allows for reducing the size of the
.I opath
disc file. The executable
must confine its data initialization to data elements within its data
segment, and must not use any allocated data elements that comprise the
heap.
.RE

.sp
.LP
It should be emphasized, that an object created by
.B dldump()
is simply
an updated
.B ELF
object file. No additional state regarding the process
at the time
.B dldump()
is called is maintained in the new object.
.B dldump()
does not provide a panacea for checkpoint and resume. A new
dynamic executable, for example, will not start where the original
executable called
.BR dldump() .
It will gain control at the executable's
normal entry point. See
.BR EXAMPLES .
.SH RETURN VALUES
.sp
.LP
On successful creation of the new object,
.B dldump()
returns
.BR 0 .
Otherwise, a non-zero value is returned and more detailed diagnostic
information is available through
.BR dlerror() .
.SH EXAMPLES
.LP
.B Example 1
Sample code using
.BR dldump() .
.sp
.LP
The following code fragment, which can be part of a dynamic executable
.BR a.out ,
can be used to create a new shared object from one of the
dynamic executables' dependencies
.BR libfoo.so.1 :

.sp
.in +2
.nf
const char *	ipath = "libfoo.so.1";
const char *	opath = "./tmp/libfoo.so.1";
\&...
if (dldump(ipath, opath, RTLD_REL_RELATIVE) != 0)
        (void) printf("dldump failed: %s\en", dlerror(\|));
.fi
.in -2

.sp
.LP
The new shared object
.I opath
is fixed to the address of the mapped
.I ipath
bound to the dynamic executable
.BR a.out .
All relative
relocations are applied to this new shared object, which will reduce its
relocation overhead when it is used as part of another process.

.sp
.LP
By performing only relative relocations, any symbolic relocation records
remain defined within the new object, and thus the dynamic binding to
external symbols will be preserved when the new object is used.

.sp
.LP
Use of the other relocation flags can fix specific relocations in the new
object and thus can reduce even more the runtime relocation startup cost of
the new object. However, this will also restrict the flexibility of using
the new object within a dynamically changing environment, as it will bind
the new object to some or all of the dynamic objects presently mapped as
part of the process.

.sp
.LP
For example, the use of
.B RTLD_REL_SELF
will cause any references to
symbols from
.I ipath
to be bound to definitions within itself if no
other preceding object defined the same symbol. In other words, a call to
\fIfoo(\|)\fR within
.I ipath
will bind to the definition \fIfoo\fR
within the same object. Therefore,
.I opath
will have one less binding
that must be computed at runtime. This reduces the startup cost of using
.I opath
by other applications; however, interposition of the symbol
.I foo
will no longer be possible.

.sp
.LP
Using a dumped shared object with applied relocations as an applications
dependency normally requires that the application have the same dependencies
as the application that produced the dumped image. Dumping shared objects,
and the various flags associated with relocation processing, have some
specialized uses. However, the technique is intended as a building block for
future technology.

.sp
.LP
The following code fragment, which is part of the dynamic executable
.BR a.out ,
can be used to create a new version of the dynamic
executable:

.sp
.in +2
.nf
static char *       dumped = 0;
const char *        opath = "./a.out.new";
\&...
if (dumped == 0) {
        char        buffer[100];
        int         size;
        time_t      seconds;
        ...
        /* Perform data initialization */
        seconds = time((time_t *)0);
        size = cftime(buffer, (char *)0, &seconds);
        if ((dumped = (char *)malloc(size + 1)) == 0) {
                (void) printf("malloc failed: %s\en", strerror(errno));
                return (1);
        }
        (void) strcpy(dumped, buffer);
        ...
        /*
         * Tear down any undesirable data initializations and
         * dump the dynamic executables memory image.
         */
        _exithandle(\|);
        _exit(dldump(0, opath, RTLD_MEMORY));
}
(void) printf("Dumped: %s\en", dumped);
.fi
.in -2

.sp
.LP
Any modifications made to the dynamic executable, up to the point the
.B dldump()
call is made, are saved in the new object
.BR a.out.new .
This mechanism allows the executable to update parts of its data segment and
heap prior to creating the new object. In this case, the date the executable
is dumped is saved in the new object. The new object can then be executed
without having to carry out the same (presumably expensive)
initialization.

.sp
.LP
For greatest flexibility, this example does not save
.I any
relocated
information. The elements of the dynamic executable
.I ipath
that have
been modified by relocations at process startup, that is, references to
external functions, are returned to the values of these elements as they
existed in the
.I ipath
disc file. This preservation of relocation
records allows the new dynamic executable to be flexible, and correctly bind
and initialize to its dependencies when executed on the same or newer
upgrades of the
.BR OS .

.sp
.LP
Fixing relocations by applying some of the relocation flags would bind the
new object to the dependencies presently mapped as part of the process
calling
.BR dldump() .
It may also remove necessary copy relocation
processing required for the correct initialization of its shared object
dependencies. Therefore, if the new dynamic executables' dependencies have
no specialized initialization requirements, the executable may still only
interact correctly with the dependencies to which it binds if they were
mapped to the same locations as they were when
.B dldump()
was called.

.sp
.LP
Note that for dynamic executables,
.B RTLD_REL_RELATIVE,
.B RTLD_REL_EXEC,
and
.B RTLD_REL_SELF
have no effect, as relocations
within the dynamic executable will have been fixed when it was created by
.BR ld (1).

.sp
.LP
When
.B RTLD_MEMORY
is used, care should be taken to insure that dumped
data sections that reference external objects are not reused without
appropriate re-initialization. For example, if a data item contains a file
descriptor, a variable returned from a shared object, or some other external
.RB "data, and this data item has been initialized prior to the" " dldump()"
call, its value will have no meaning in the new dumped image.

.sp
.LP
When
.B RTLD_MEMORY
is used, any modification to a data item that is
initialized via a relocation whose relocation record will be retained in the
new image will effectively be lost or invalidated within the new image. For
example, if a pointer to an external object is incremented prior to the
.B dldump()
call, this data item will be reset to its disc file contents
so that it can be relocated when the new image is used; hence, the previous
increment is lost.

.sp
.LP
Non-idempotent data initializations may prevent the use of
.BR RTLD_MEMORY .
For example, the addition of elements to a linked-list
via
.B init
sections can result in the linked-list data being captured in
the new image. Running this new image may result in
.B init
sections
continuing to add new elements to the list without the prerequisite
initialization of the list head. It is recommended that
.BR _exithandle (3C)
be called before
.B dldump()
to tear down any data
initializations established via initialization code.  Note that this may
invalidate the calling image; thus, following the call to
.BR dldump() ,
only a call to
.BR _Exit (2)
should be made.

.SH USAGE
.sp
.LP
The
.B dldump()
function is one of a family of functions that give the
user direct access to the dynamic linking facilities. These facilities are
available to dynamically-linked processes only. See \fILinker and Libraries Guide\fR).
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
AvailabilitySUNWcsu
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR ld (1),
.BR ld.so.1 (1),
.BR strip (1),
.BR _Exit (2),
.BR brk (2),
.BR exec (2),
.BR _exithandle (3C),
.BR dladdr (3C),
.BR dlclose (3C),
.BR dlerror (3C),
.BR dlopen (3C),
.BR dlsym (3C),
.BR end (3C),
.BR malloc (3C),
.BR attributes (5)
.sp
.LP
.I Linker and Libraries Guide
.SH NOTES
.sp
.LP
These functions are available to dynamically-linked processes only.
.sp
.LP
Any
.B NOBITS
sections within the
.I ipath
are expanded to
.B PROGBITS
sections within the
.IR opath .
.B NOBITS
sections occupy
no space within an
.B ELF
file image.
.B NOBITS
sections declare
memory that must be created and zero-filled when the object is mapped into
the runtime environment. \fB\&.bss\fR is a typical example of this section
type.
.B PROGBITS
sections, on the other hand, hold information defined
by the object within the
.B ELF
file image. This section conversion
reduces the runtime initialization cost of the new dumped object but
increases the objects' disc space requirement.
.sp
.LP
When a shared object is dumped, and relocations are applied which are
knowledgeable of the base address of the mapped object, the new object is
fixed to this new base address. The dumped object has its
.B ELF
type
reclassified to be a dynamic executable. The dumped object can be processed
by the runtime linker, but is not valid as input to the link-editor.
.sp
.LP
If relocations are applied to the new object, any remaining relocation
records are reorganized for better locality of reference. The relocation
sections are renamed to \fB\&.SUNW_reloc\fR and the association with the
section to relocate, is lost. Only the offset of the relocation record is
meaningful. \fB\&.SUNW_reloc\fR relocations do not make the new object
invalid to either the runtime linker or link-editor, but can reduce the
objects analysis with some
.B ELF
readers.
