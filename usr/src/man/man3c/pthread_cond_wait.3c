'\" te
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright (c) 2001, the Institute of Electrical and Electronics Engineers,
.\" Inc. and The Open Group. All Rights Reserved.
.\" Copyright 1991, 1992, 1994, The X/Open Company Ltd.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH pthread_cond_wait 3C "11 Nov 2008" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
pthread_cond_wait, pthread_cond_timedwait, pthread_cond_reltimedwait_np \-
wait on a condition
.SH SYNOPSIS
.LP
.nf
cc -mt [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. -lpthread [ \fIlibrary\fR.\|.\|. ]
#include <pthread.h>

\fBint\fR \fBpthread_cond_wait\fR(\fBpthread_cond_t *restrict\fR \fIcond\fR,
     \fBpthread_mutex_t *restrict\fR \fImutex\fR);
.fi

.LP
.nf
\fBint\fR \fBpthread_cond_timedwait\fR(\fBpthread_cond_t *restrict\fR \fIcond\fR,
     \fBpthread_mutex_t *restrict\fR \fImutex\fR,
     \fBconst struct timespec *restrict\fR \fIabstime\fR);
.fi

.LP
.nf
\fBint\fR \fBpthread_cond_reltimedwait_np\fR(\fBpthread_cond_t *\fIcond\fR,
     \fBpthread_mutex_t *\fImutex\fR, \fBconst struct timespec *\fIreltime\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.BR pthread_cond_wait() ,
.BR pthread_cond_timedwait() ,
and
.B pthread_cond_reltimedwait_np()
functions are used to block on a
condition variable. They are called with
.I mutex
locked by the calling
thread or undefined behavior will result.
.sp
.LP
These functions atomically release
.I mutex
and cause the calling thread
to block on the condition variable
.IR cond .
Atomically here means
``atomically with respect to access by another  thread to the mutex and then
the condition variable." That is, if another thread is able to acquire the
mutex after the about-to-block thread has released it, then a subsequent
call to
.B pthread_cond_signal()
or
.B pthread_cond_broadcast()
in
that thread behaves as if it were issued after the about-to-block thread has
blocked.
.sp
.LP
Upon successful return, the mutex has been locked and is owned by the
calling thread. If mutex is a robust mutex where an owner terminated while
holding the lock and the state is recoverable, the mutex is acquired even
though the function returns an error value.
.sp
.LP
When using condition variables there is always a boolean predicate, an
invariant, associated with each condition wait that must be true before the
thread should proceed. Spurious wakeups from the
.BR pthread_cond_wait() ,
.BR pthread_cond_timedwait() ,
or
.BR pthread_cond_reltimedwait_np()
functions could occur. Since the return from
.BR pthread_cond_wait() ,
.BR pthread_cond_timedwait() ,
or
.B pthread_cond_reltimedwait_np()
does
not imply anything about the value of this predicate, the predicate should
always be reevaluated.
.sp
.LP
The order in which blocked threads are awakened by
.B pthread_cond_signal()
or
.B pthread_cond_broadcast()
is determined
by the scheduling policy. See
.BR pthreads (5).
.sp
.LP
The effect of using more than one mutex for concurrent
.BR pthread_cond_wait() ,
.BR pthread_cond_timedwait() ,
or
.B pthread_cond_reltimedwait_np()
operations on the same condition
variable will result in undefined behavior.
.sp
.LP
A condition wait (whether timed or not) is a cancellation point. When the
cancelability enable state of a thread is set to
.BR PTHREAD_CANCEL_DEFERRED ,
a side effect of acting upon a cancellation
request while in a condition wait is that the mutex is reacquired before
calling the first cancellation cleanup handler.
.sp
.LP
A thread that has been unblocked because it has been canceled while blocked
in a call to
.B pthread_cond_wait()
or
.BR pthread_cond_timedwait()
does not consume any condition signal that may be directed concurrently at
the condition variable if there are other threads blocked on the condition
variable.
.sp
.LP
The
.B pthread_cond_timedwait()
function is the same as
.B pthread_cond_wait()
except that an error is returned if the absolute
time specified by
.I abstime
passes (that is, system time equals or
exceeds
.IR abstime )
before the condition
.I cond
is signaled or
broadcast, or if the absolute time specified by
.I abstime
has already
been passed at the time of the call. The
.I abstime
argument is of type
.BR "struct timespec" ,
defined in
.BR time.h "(3HEAD). When such time-outs"
occur,
.B pthread_cond_timedwait()
will nonetheless release and reacquire
the mutex referenced by
.IR mutex .
The function
.B pthread_cond_timedwait()
is also a cancellation point.
.sp
.LP
The
.B pthread_cond_reltimedwait_np()
function is a non-standard
extension provided by the Solaris version of POSIX threads as indicated by
the
.RB `` _np ''
(non-portable) suffix. The
.B pthread_cond_reltimedwait_np()
function is the same as
.B pthread_cond_timedwait()
except that the
.I reltime
argument
specifies a non-negative time relative to the current system time rather
than an absolute time. The
.I reltime
argument is of type
.BR "struct timespec" ,
defined in
.BR time.h (3HEAD).
An error value is returned if
the relative time passes (that is, system time equals or exceeds the
starting system time plus the relative time) before the condition
.I cond
is signaled or broadcast.  When such timeouts occur,
.B pthread_cond_reltimedwait_np()
releases and reacquires the mutex
referenced by
.IR mutex .
The
.BR pthread_cond_reltimedwait_np()
function is also a cancellation point.
.sp
.LP
If a signal is delivered to a thread waiting for a condition variable, upon
return from the signal handler the thread resumes waiting for the condition
variable as if it was not interrupted, or it returns
.B 0
due to spurious
wakeup.
.SH RETURN VALUES
.sp
.LP
Except in the case of
.BR ETIMEDOUT ,
.BR EOWNERDEAD ,
or
.BR ENOTRECOVERABLE ,
all of these error checks act as if they were
performed immediately at the beginning of processing for the function and
cause an error return, in effect, prior to modifying the state of the mutex
specified by
.I mutex
or the condition variable specified by
.IR cond .

.sp
.LP
Upon successful completion,
.B 0
is returned. Otherwise, an error value
is returned to indicate the error.
.SH ERRORS
.sp
.LP
These functions will fail if:
.sp
.ne 2
.mk
.na
.B EPERM
.ad
.RS 9n
.rt
The mutex type is
.B PTHREAD_MUTEX_ERRORCHECK
or the mutex is a robust
mutex, and the current thread does not own the mutex.
.RE

.sp
.LP
The
.B pthread_cond_timedwait()
function will fail if:
.sp
.ne 2
.mk
.na
.B ETIMEDOUT
.ad
.RS 13n
.rt
The absolute time specified by
.I abstime
to
.B pthread_cond_timedwait()
has passed.
.RE

.sp
.LP
The
.B pthread_cond_reltimedwait_np()
function will fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 13n
.rt
The value specified by
.I reltime
is invalid.
.RE

.sp
.ne 2
.mk
.na
.B ETIMEDOUT
.ad
.RS 13n
.rt
The relative time specified by
.I reltime
to
.B pthread_cond_reltimedwait_np()
has passed.
.RE

.sp
.LP
These functions may fail if:
.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The value specified by
.IR cond ,
.IR mutex ,
.IR abstime ,
or
.I reltime
is invalid.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
Different mutexes were supplied for concurrent operations on the same
condition variable.
.RE

.sp
.LP
If the mutex specified by
.I mutex
is a robust mutex (initialized with
the robustness attribute
.BR PTHREAD_MUTEX_ROBUST ),
the
.BR pthread_cond_wait() ,
.BR pthread_cond_timedwait() ,
and
.B pthread_cond_reltimedwait_np()
functions will, under the specified
conditions, return the following error values.  For complete information,
see the
.BR pthread_mutex_lock "(3C) and"
.BR pthread_mutexattr_setrobust (3C)
manual pages.
.sp
.ne 2
.mk
.na
.B EOWNERDEAD
.ad
.RS 19n
.rt
The last owner of this mutex died while holding the mutex, leaving the
state it was protecting possibly inconsistent. The mutex is now owned by the
caller.
.RE

.sp
.ne 2
.mk
.na
.B ENOTRECOVERABLE
.ad
.RS 19n
.rt
The mutex was protecting state that has now been left irrecoverable. The
mutex has not been acquired.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR pthread_cond_signal (3C),
.BR pthread_cond_broadcast (3C),
.BR pthread_mutex_lock (3C),
.BR pthread_mutexattr_getrobust (3C),
.BR time.h (3HEAD),
.BR attributes (5),
.BR condition (5),
.BR pthreads (5),
.BR standards (5)
