'\" te
.\" Copyright (c) 2007, Sun Microsystems Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH u8_textprep_str 3C "18 Sep 2007" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
u8_textprep_str \- string-based UTF-8 text preparation function
.SH SYNOPSIS
.LP
.nf
#include <sys/u8_textprep.h>

\fBsize_t\fR \fBu8_textprep_str\fR(\fBchar *\fIinarray\fR, \fBsize_t *\fIinlen\fR,
     \fBchar *\fIoutarray\fR, \fBsize_t *\fIoutlen\fR, \fBint\fR \fIflag\fR,
     \fBsize_t\fR \fIunicode_version\fR, \fBint *\fIerrnum\fR);
.fi

.SH PARAMETERS
.sp
.ne 2
.mk
.na
.I inarray
.ad
.RS 20n
.rt
A pointer to a byte array containing a sequence of UTF-8 character bytes to
be prepared.
.RE

.sp
.ne 2
.mk
.na
.I inlen
.ad
.RS 20n
.rt
As input argument, the number of bytes to be prepared in
.IR inarray .
As
output argument, the number of bytes in
.I inarray
still not consumed.
.RE

.sp
.ne 2
.mk
.na
.I outarray
.ad
.RS 20n
.rt
A pointer to a byte array where prepared UTF-8 character bytes can be
saved.
.RE

.sp
.ne 2
.mk
.na
.I outlen
.ad
.RS 20n
.rt
As input argument, the number of available bytes at
.I outarray
where
prepared character bytes can be saved.  As output argument, after the
conversion, the number of bytes still available at
.IR outarray .
.RE

.sp
.ne 2
.mk
.na
\fIflag\fR
.ad
.RS 20n
.rt
The possible preparation options constructed by a bitwise-inclusive-OR of
the following values:
.sp
.ne 2
.mk
.na
.B U8_TEXTPREP_IGNORE_NULL
.ad
.sp .6
.RS 4n
Normally
.B u8_textprep_str()
stops the preparation if it encounters
null byte even if the current
.I inlen
is pointing to a value bigger than
zero.
.sp
With this option, null byte does not stop the preparation and the
preparation continues until
.I inlen
specified amount of
.IR inarray
bytes are all consumed for preparation or an error happened.
.RE

.sp
.ne 2
.mk
.na
.B U8_TEXTPREP_IGNORE_INVALID
.ad
.sp .6
.RS 4n
Normally
.B u8_textprep_str()
stops the preparation if it encounters
illegal or incomplete characters with corresponding
.I errnum
values.
.sp
When this option is set,
.B u8_textprep_str()
does not stop the
preparation and instead treats such characters as no need to do any
preparation.
.RE

.sp
.ne 2
.mk
.na
.B U8_TEXTPREP_TOUPPER
.ad
.sp .6
.RS 4n
Map lowercase characters to uppercase characters if applicable.
.RE

.sp
.ne 2
.mk
.na
.B U8_TEXTPREP_TOLOWER
.ad
.sp .6
.RS 4n
Map uppercase characters to lowercase characters if applicable.
.RE

.sp
.ne 2
.mk
.na
.B U8_TEXTPREP_NFD
.ad
.sp .6
.RS 4n
Apply Unicode Normalization Form D.
.RE

.sp
.ne 2
.mk
.na
.B U8_TEXTPREP_NFC
.ad
.sp .6
.RS 4n
Apply Unicode Normalization Form C.
.RE

.sp
.ne 2
.mk
.na
.B U8_TEXTPREP_NFKD
.ad
.sp .6
.RS 4n
Apply Unicode Normalization Form KD.
.RE

.sp
.ne 2
.mk
.na
.B U8_TEXTPREP_NFKC
.ad
.sp .6
.RS 4n
Apply Unicode Normalization Form KC.
.RE

Only one case folding option is allowed. Only one Unicode Normalization
option is allowed.
.sp
When a case folding option and a Unicode Normalization option are specified
together, UTF-8 text preparation is done by doing case folding first and
then Unicode Normalization.
.sp
If no option is specified, no processing occurs except the simple copying
of bytes from input to output.
.RE

.sp
.ne 2
.mk
.na
.I unicode_version
.ad
.RS 20n
.rt
The version of Unicode data that should be used during UTF-8 text
preparation. The following values are supported:
.sp
.ne 2
.mk
.na
.B U8_UNICODE_320
.ad
.sp .6
.RS 4n
Use Unicode 3.2.0 data during comparison.
.RE

.sp
.ne 2
.mk
.na
.B U8_UNICODE_500
.ad
.sp .6
.RS 4n
Use Unicode 5.0.0 data during comparison.
.RE

.sp
.ne 2
.mk
.na
.B U8_UNICODE_LATEST
.ad
.sp .6
.RS 4n
Use the latest Unicode version data available which is Unicode 5.0.0
currently.
.RE

.RE

.sp
.ne 2
.mk
.na
.I errnum
.ad
.RS 20n
.rt
The error value when preparation is not completed or fails. The following
values are supported:
.sp
.ne 2
.mk
.na
.B E2BIG
.ad
.RS 10n
.rt
Text preparation stopped due to lack of space in the output array.
.RE

.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 10n
.rt
Specified option values are conflicting and cannot be supported.
.RE

.sp
.ne 2
.mk
.na
.B EILSEQ
.ad
.RS 10n
.rt
Text preparation stopped due to an input byte that does not belong to
UTF-8.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
Text preparation stopped due to an incomplete UTF-8 character at the end of
the input array.
.RE

.sp
.ne 2
.mk
.na
.B ERANGE
.ad
.RS 10n
.rt
The specified Unicode version value is not a supported version.
.RE

.RE

.SH DESCRIPTION
.sp
.LP
The
.B u8_textprep_str()
function prepares the sequence of UTF-8
characters in the array specified by
.I inarray
into a sequence of
corresponding UTF-8 characters prepared in the array specified by
.IR outarray .
The
.I inarray
argument points to a character byte array
to the first character in the input array and
.I inlen
indicates the
number of bytes to the end of the array to be converted. The \fIoutarray\fR
argument points to a character byte array to the first available byte in the
output array and
.I outlen
indicates the number of the available bytes to
the end of the array. Unless \fIflag\fR is
.BR U8_TEXTPREP_IGNORE_NULL ,
\fBu8_textprep_str()\fR normally stops when it encounters a null byte from
the input array regardless of the current
.I inlen
value.
.sp
.LP
If \fIflag\fR is \fBU8_TEXTPREP_IGNORE_INVALID\fR and a sequence of input
bytes does not form a valid UTF-8 character, preparation stops after the
previous successfully prepared character. If \fIflag\fR is
\fBU8_TEXTPREP_IGNORE_INVALID\fR and the input array ends with an incomplete
UTF-8 character, preparation stops after the previous successfully prepared
bytes. If the output array is not large enough to hold the entire prepared
text, preparation stops just prior to the input bytes that would cause the
output array to overflow. The value pointed to by
.I inlen
is decremented
to reflect the number of bytes still not prepared in the input array. The
value pointed to by
.I outlen
is decremented to reflect the number of
bytes still available in the output array.
.SH RETURN VALUES
.sp
.LP
The
.B u8_textprep_str()
function updates the values pointed to by
\fIinlen\fR and \fIoutlen\fR arguments to reflect the extent of the
preparation. When
.B U8_TEXTPREP_IGNORE_INVALID
is specified,
\fBu8_textprep_str()\fR returns the number of illegal or incomplete
characters found during the text preparation. When
\fBU8_TEXTPREP_IGNORE_INVALID\fR is not specified and the text preparation
is entirely successful, the function returns 0. If the entire string in the
input array is prepared, the value pointed to by
.I inlen
will be 0. If
the text preparation is stopped due to any conditions mentioned above, the
value pointed to by
.I inlen
will be non-zero and
.I errnum
is set to
indicate the error. If such and any other error occurs,
\fBu8_textprep_str()\fR returns (\fBsize_t\fR)-1 and sets \fIerrnum\fR to
indicate the error.
.SH EXAMPLES
.LP
\fBExample 1\fR Simple UTF-8 text preparation
.sp
.in +2
.nf
#include <sys/u8_textprep.h>
\&.
\&.
\&.
size_t ret;
char ib[MAXPATHLEN];
char ob[MAXPATHLEN];
size_t il, ol;
int err;
\&.
\&.
\&.
/*
 * We got a UTF-8 pathname from somewhere.
 *
 * Calculate the length of input string including the terminating
 * NULL byte and prepare other arguments.
 */
(void) strlcpy(ib, pathname, MAXPATHLEN);
il = strlen(ib) + 1;
ol = MAXPATHLEN;

/*
 * Do toupper case folding, apply Unicode Normalization Form D,
 * ignore NULL byte, and ignore any illegal/incomplete characters.
 */
ret = u8_textprep_str(ib, &il, ob, &ol,
    (U8_TEXTPREP_IGNORE_NULL|U8_TEXTPREP_IGNORE_INVALID|
    U8_TEXTPREP_TOUPPER|U8_TEXTPREP_NFD), U8_UNICODE_LATEST, &err);
if (ret == (size_t)-1) {
    if (err == E2BIG)
        return (-1);
    if (err == EBADF)
        return (-2);
    if (err == ERANGE)
        return (-3);
    return (-4);
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR u8_strcmp (3C),
.BR u8_validate (3C),
.BR attributes (5),
.BR u8_strcmp (9F),
.BR u8_textprep_str (9F),
.BR u8_validate (9F)
.sp
.LP
The Unicode Standard (http://www.unicode.org)
.SH NOTES
.sp
.LP
After the text preparation, the number of prepared UTF-8 characters and the
total number bytes may decrease or increase when you compare the numbers
with the input buffer.
.sp
.LP
Case conversions are performed using Unicode data of the corresponding
version. There are no locale-specific case conversions that can be
performed.
