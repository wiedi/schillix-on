'\" te
.\" Copyright (c) 2006, Sun Microsystems, Inc.   All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T.
.\" Portions Copyright (c) 1997, The Open Group. All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH popen 3C "14 Dec 2006" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
popen, pclose \- initiate a pipe to or from a process
.SH SYNOPSIS
.LP
.nf
#include <stdio.h>

\fBFILE *\fBpopen\fR(\fBconst char *\fIcommand\fR, \fBconst char *\fImode\fR);
.fi

.LP
.nf
\fBint\fR \fBpclose\fR(\fBFILE *\fIstream\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B popen()
function creates a pipe between the calling program and
the command to be executed.  The arguments to
.B popen()
are pointers to
null-terminated strings.  The
.I command
argument consists of a shell
command line.  The
.I mode
argument is an I/O mode, either
.B r
for
reading or
.I w
for writing. The value returned is a stream pointer such
that one can write to the standard input of the command, if the I/O mode is
.IR w ,
by writing to the file
.I stream
(see
.BR Intro (3));
and one
can read from the standard output of the command, if the I/O mode is
.BR r ,
by reading from the file
.IR stream .
Because open files are
shared, a type
.B r
command may be used as an input filter and a type
.I w
as an output filter. A trailing
.B F
character can also be
included in the
.I mode
argument as described in
.BR fopen (3C)
to
enable extended FILE facility.
.sp
.LP
The environment of the executed command will be as if a child process were
created within the
.B popen()
call using
.BR fork (2).
If the
application is standard-conforming (see
.BR standards (5)),
the child is
created as if invoked with the call:
.sp
.LP
\fBexecl("/usr/xpg4/bin/sh", "sh", "\fB-c",\fIcommand\fR,
.B (char *)0);
.sp
.LP
otherwise, the child is created as if invoked with the call:
.sp
.LP
\fBexecl("/usr/bin/sh", "sh", "\fB-c",\fIcommand\fR, \fB(char
*)0);\fR
.sp
.LP
The
.B pclose()
function closes a stream opened by
.B popen()
by
closing the pipe. It waits for the associated process to terminate and
returns the termination status of the process running the command language
interpreter. This is the value returned by
.BR waitpid (3C).
See
.BR wait.h (3HEAD)
for more information on termination status. If, however,
a call to
.B waitpid()
with a
.I pid
argument equal to the process ID
of the command line interpreter causes the termination status to be
unavailable to
.BR pclose() ,
then
.B pclose()
returns \(mi1 with
.B errno
set to
.B ECHILD
to report this condition.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B popen()
returns a pointer to an open
stream that can be used to read or write to the pipe. Otherwise, it returns
a null pointer and may set
.B errno
to indicate the error.
.sp
.LP
Upon successful completion,
.B pclose()
returns the termination status
of the command language interpreter as returned by
.BR waitpid() .
Otherwise, it returns
.B \(mi1
and sets
.B errno
to indicate the
error.
.SH ERRORS
.sp
.LP
The
.B pclose()
function will fail if:
.sp
.ne 2
.mk
.na
.B ECHILD
.ad
.RS 10n
.rt
The status of the child process could not be obtained, as described in the
DESCRIPTION.
.RE

.sp
.LP
The
.B popen()
function may fail if:
.sp
.ne 2
.mk
.na
.B EMFILE
.ad
.RS 10n
.rt
There are currently
.B FOPEN_MAX
or
.B STREAM_MAX
streams open in the
calling process.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The
.I mode
argument is invalid.
.RE

.sp
.LP
The
.B popen()
function may also set
.B errno
values as described by
.BR fork (2)
or
.BR pipe (2).
.SH USAGE
.sp
.LP
If the original and
.B popen()
processes concurrently read or write a
common file, neither should use buffered I/O. Problems with an output filter
may be forestalled by careful buffer flushing, for example, with
.B fflush()
(see
.BR fclose (3C)).
A security hole exists through the
.B IFS
and
.B PATH
environment variables.  Full pathnames should be
used (or
.B PATH
reset) and
.B IFS
should be set to space and tab
(\fB" \et"\fR).
.sp
.LP
Even if the process has established a signal handler for
.BR SIGCHLD ,
it
will be called when the command terminates.  Even if another thread in the
same process issues a
.BR wait (3C)
call, it will interfere with the return
value of
.BR pclose() .
Even if the process's signal handler for
.B SIGCHLD
has been set to ignore the signal, there will be no effect on
.BR pclose() .
.SH EXAMPLES
.LP
.B Example 1 popen()
example
.sp
.LP
The following program will print on the standard output (see
.BR stdio (3C))
the names of files in the current directory with a
\fB\&.c\fR suffix.

.sp
.in +2
.nf
#include <stdio.h>
#include <stdlib.h>
main(\|)
{
        char *cmd = "/usr/bin/ls *.c";
        char buf[BUFSIZ];
        FILE *ptr;

        if ((ptr = popen(cmd, "r")) != NULL) {
                while (fgets(buf, BUFSIZ, ptr) != NULL)
                        (void) printf("%s", buf);
                (void) pclose(ptr);
        }
        return 0;
}
.fi
.in -2

.LP
.B Example 2 system()
replacement
.sp
.LP
The following function can be used in a multithreaded process in place of
the most common usage of the Unsafe
.BR system (3C)
function:

.sp
.in +2
.nf
int my_system(const char *cmd)
{
        FILE *p;

        if ((p = popen(cmd, "w")) == NULL)
                return (-1);
        return (pclose(p));
}
.fi
.in -2

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilitySee below.
_
MT-LevelSafe
.TE

.sp
.LP
The
.B F
character in the
.I mode
argument of
.B popen()
is
Evolving. In all other respects this function is Standard. The
.B pclose()
function is Standard.
.SH SEE ALSO
.sp
.LP
.BR ksh (1),
.BR pipe (2),
.BR fclose (3C),
.BR fopen (3C),
.BR posix_spawn (3C),
.BR stdio (3C),
.BR system (3C),
.BR wait (3C),
.BR waitpid (3C),
.BR wait.h (3HEAD),
.BR attributes (5),
.BR standards (5)
