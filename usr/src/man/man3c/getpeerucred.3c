'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc. All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH getpeerucred 3C "26 May 2004" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
getpeerucred \- get connected socket or stream peer's credentials
.SH SYNOPSIS
.LP
.nf
#include <ucred.h>

\fBint\fR \fBgetpeerucred\fR(\fBint\fR \fIfd\fR, \fBucred_t **\fIucred\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B getpeerucred()
function returns the credentials of the peer
endpoint of a connection-oriented socket (\fBSOCK_STREAM\fR) or stream
.I fd
at the time the endpoint was created or the connection was
established. A process that initiates a connection retrieves the credentials
of its peer at the time the peer's endpoint was created. A process that
listens for connections retrieves the credentials of the peer at the time
the peer initiated the connection.
.sp
.LP
When successful,
.B getpeerucred()
stores the pointer to a freshly
allocated
.B ucred_t
in the memory location pointed to by the
.IR ucred
argument if that memory location contains the null pointer. If the memory
location is non-null, it will reuse the existing
.BR ucred_t .
.sp
.LP
When
.I ucred
is no longer needed, a credential allocated by
.B getpeerucred()
should be freed with \fBucred_free\fR(3C).
.sp
.LP
It is possible that all fields of the
.B ucred_t
are not available to
all peer endpoints and all callers.
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B getpeerucred()
returns 0. Otherwise, it
returns \(mi1 and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B getpeerucred()
function will fail if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 12n
.rt
There is not enough memory available to allocate sufficient memory to hold
the user credential. The application can try again later.
.RE

.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 12n
.rt
The
.I fd
argument is not a valid file descriptor.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 12n
.rt
The pointer location pointed to by the
.B "ucred_t **"
argument points to
an invalid, non-null address.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 12n
.rt
The socket is connected but the peer credentials are unknown.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 12n
.rt
The physical limits of the system are exceeded by the memory allocation
needed to hold the user credential.
.RE

.sp
.ne 2
.mk
.na
.B ENOTCONN
.ad
.RS 12n
.rt
The socket or stream is not connected or the stream's peer is unknown.
.RE

.sp
.ne 2
.mk
.na
.B ENOTSUP
.ad
.RS 12n
.rt
This operation is not supported on this file descriptor.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityEvolving
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR door_ucred (3C),
.BR ucred_get (3C),
.BR attributes (5),
.BR connld (7M)
.SH NOTES
.sp
.LP
The system currently supports both sides of connection endpoints for local
.BR AF_UNIX ,
.BR AF_INET ,
and
.B AF_INET6
sockets,
.BR /dev/tcp ,
.BR /dev/ticots ,
and
.B /dev/ticotsord
XTI/TLI connections, and pipe
file descriptors sent using
.B I_SENDFD
as a result of the open of a
named pipe with the "connld" module pushed.
