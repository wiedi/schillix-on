'\" te
.\" Copyright (c) 2005, Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH door_call 3C "22 Mar 2005" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
door_call \- invoke the function associated with a door descriptor
.SH SYNOPSIS
.LP
.nf
\fBcc\fR \fB-mt\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. [ \fIlibrary\fR.\|.\|. ]
#include <door.h>

\fBint\fR \fBdoor_call\fR(\fBint\fR \fId\fR, \fBdoor_arg_t *\fIparams\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B door_call()
function invokes the function associated with the
door descriptor
.IR d ,
and passes the arguments (if any) specified in
.IR params .
All of the
.I params
members are treated as in/out
parameters during a door invocation and may be updated  upon returning from
a door call. Passing
.I NULL
for
.I params
indicates there are no
arguments to be passed and no results expected.
.sp
.LP
Arguments are specified using the
.B data_ptr
and
.BR desc_ptr
members of
.IR params .
The size of the argument data in bytes is passed in
\fBdata_size\fR and the number of argument descriptors is passed in
.BR desc_num .
.sp
.LP
Results from the door invocation are placed in the buffer,
.BR rbuf .
See
.BR door_return (3C).
The
.B data_ptr
and
.B desc_ptr
members of
\fIparams\fR are updated to reflect the location of the results within the
\fBrbuf\fR buffer. The size of the data results and number of descriptors
returned are updated in the
.B data_size
and
.B desc_num
members. It
is acceptable to use the same buffer for  input argument data and results,
so
.B door_call()
may be called with
.B data_ptr
and
.BR desc_ptr
pointing to the buffer
.BR rbuf .
.sp
.LP
If the results of a door invocation exceed the size of the buffer specified
by
.BR rsize ,
the system automatically allocates  a new buffer in the
caller's address space  and updates the \fBrbuf\fR and
.B rsize
members
to reflect this location. In this case, the caller is  responsible for
reclaiming this area using \fBmunmap(rbuf, rsize)\fR when the buffer is no
longer required.  See
.BR munmap (2).
.sp
.LP
Descriptors passed in a
.B door_desc_t
structure are identified by the
\fBd_attributes\fR member. The client marks the \fBd_attributes\fR member
with the type of object being passed by logically OR-ing the value of object
type. Currently, the only object type that can be passed or returned is a
file descriptor, denoted by the
.B DOOR_DESCRIPTOR
attribute.
Additionally, the
.B DOOR_RELEASE
attribute can be set, causing the
descriptor to be closed in the caller's address space after it is passed to
the target. The descriptor will be  closed even if
.B door_call()
returns
an error, unless that error is
.B EFAULT
or
.BR EBADF .
.sp
.LP
The
.B door_desc_t
structure includes the following members:
.sp
.in +2
.nf
typedef struct {
         door_attr_t d_attributes;   /* Describes the parameter */
         union {
                 struct {
                         int d_descriptor;   /* Descriptor */
                         door_id_t d_id;    /* Unique door id */
                         } d_desc;
                 } d_data;
         } door_desc_t;
.fi
.in -2

.sp
.LP
When file descriptors are passed or returned,  a new descriptor is created
in the target address space and the
.B d_descriptor
member in the target
argument is updated to reflect the new descriptor. In addition, the system
passes a system-wide unique number associated with each door in the
\fBdoor_id\fR member and marks the \fBd_attributes\fR member with other
attributes associated with a door including the following:
.sp
.ne 2
.mk
.na
.B DOOR_LOCAL
.ad
.RS 20n
.rt
The door received was created  by this process using
.BR door_create() .
See
.BR door_create (3C).
.RE

.sp
.ne 2
.mk
.na
.B DOOR_PRIVATE
.ad
.RS 20n
.rt
The door received has a private pool of server threads associated with the
door.
.RE

.sp
.ne 2
.mk
.na
.B DOOR_UNREF
.ad
.RS 20n
.rt
The door received is expecting an unreferenced notification.
.RE

.sp
.ne 2
.mk
.na
.B DOOR_UNREF_MULTI
.ad
.RS 20n
.rt
Similar to
.BR DOOR_UNREF ,
except multiple unreferenced notifications
may be delivered for the same door.
.RE

.sp
.ne 2
.mk
.na
.B DOOR_REFUSE_DESC
.ad
.RS 20n
.rt
This door does not accept argument descriptors.
.RE

.sp
.ne 2
.mk
.na
.B DOOR_NO_CANCEL
.ad
.RS 20n
.rt
This door does not cancel the server thread upon client abort.
.RE

.sp
.ne 2
.mk
.na
.B DOOR_REVOKED
.ad
.RS 20n
.rt
The door received has been revoked by the server.
.RE

.sp
.LP
The
.B door_call()
function is not a restartable system call. It returns
\fBEINTR\fR if a signal was caught and handled by this thread. If the door
invocation is not idempotent the caller should mask any signals that may be
generated during a
.B door_call()
operation. If the client aborts in the
middle of a
.B door_call()
and the door was not created with the
\fBDOOR_NO_CANCEL\fR flag, the server thread is notified using the POSIX
(see
.BR standards (5))
thread cancellation mechanism. See
.BR cancellation (5).
.sp
.LP
The descriptor returned from
.B door_create()
is marked as close on
.BR exec(FD_CLOEXEC) .
Information about a door is available for all
clients of a door using
.BR door_info() .
Applications concerned with
security should not place secure information in door data that is accessible
by
.BR door_info() .
In particular, secure data should not be stored in the
data item
.IR cookie .
See
.BR door_info (3C).
.SH RETURN VALUES
.sp
.LP
Upon successful completion,
.B 0
is returned. Otherwise,
.B \(mi1
is
returned and
.B errno
is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B door_call()
function will fail if:
.sp
.ne 2
.mk
.na
.B E2BIG
.ad
.RS 13n
.rt
Arguments were too big for server thread stack.
.RE

.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 13n
.rt
Server was out of available resources.
.RE

.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 13n
.rt
Invalid door descriptor was passed.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 13n
.rt
Argument pointers pointed outside the allocated address space.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 13n
.rt
A signal was caught in the client, the client called
.BR fork (2),
or the
server exited during invocation.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 13n
.rt
Bad arguments were passed.
.RE

.sp
.ne 2
.mk
.na
.B EMFILE
.ad
.RS 13n
.rt
The client or server has too many open descriptors.
.RE

.sp
.ne 2
.mk
.na
.B ENFILE
.ad
.RS 13n
.rt
The
.I desc_num
argument is larger than the door's
\fBDOOR_PARAM_DESC_MAX\fR parameter (see \fBdoor_getparam\fR(3C)), and the
door does not have the
.B DOOR_REFUSE_DESC
set.
.RE

.sp
.ne 2
.mk
.na
.B ENOBUFS
.ad
.RS 13n
.rt
The
.I data_size
argument is larger than the door's
\fBDOOR_PARAM_DATA_MAX\fR parameter, or smaller than the door's
\fBDOOR_PARAM_DATA_MIN\fR parameter (see
.BR door_getparam (3C)).
.RE

.sp
.ne 2
.mk
.na
.B ENOTSUP
.ad
.RS 13n
.rt
The
.I desc_num
argument is non-zero and the door has the
\fBDOOR_REFUSE_DESC\fR flag set.
.RE

.sp
.ne 2
.mk
.na
.B EOVERFLOW
.ad
.RS 13n
.rt
System could not create overflow area in caller for results.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Architectureall
_
AvailabilitySUNWcsu
_
Interface StabilityStable
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR munmap (2),
.BR door_create (3C),
.BR door_getparam (3C),
.BR door_info (3C),
.BR door_return (3C),
.BR libdoor (3LIB),
.BR attributes (5),
.BR cancellation (5),
.BR standards (5)
