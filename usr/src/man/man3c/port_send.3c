'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH port_send 3C "24 Oct 2007" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
port_send, port_sendn \- send a user-defined event to a port or list of
ports
.SH SYNOPSIS
.LP
.nf
#include <port.h>

\fBint\fR \fBport_send\fR(\fBint\fR \fIport\fR, \fBint\fR \fIevents\fR, \fBvoid *\fIuser\fR);
.fi

.LP
.nf
\fBint\fR \fBport_sendn\fR(\fBint\fR \fIports\fR[], \fBint\fR \fIerrors\fR[], \fBuint_t\fR \fInent\fR,
     \fBint\fR \fIevents\fR, \fBvoid *\fIuser\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B port_send()
function submits a user-defined event to a specified
port. The
.I port
argument is a file descriptor that represents a port.
The sent event has its
.B portev_events
member set to the value specified
in the
.I events
parameter and its
.B portev_user
member set to the
value specified in the
.I user
parameter.  The
.B portev_object
member
of an event sent with
.B port_send()
is unspecified.
.sp
.LP
The
.B port_sendn()
function submits a user-defined event to multiple
ports. The
.I ports
argument is an array of file descriptors that
represents ports (see
.BR port_create (3C)).
The
.I nent
argument
specifies the number of file descriptors in the
.IR ports []
array. An
event is submitted to each specified port. Each event has its
.B portev_events
member set to the value specified in the
.IR events
parameter and its
.B portev_user
member set to the value specified in the
.I user
parameter.  The
.B portev_object
member of
.I events
sent
with
.B port_sendn()
is unspecified.
.sp
.LP
A port that is in alert mode can be sent an event, but that event will not
be retrievable until the port has resumed normal operation.  See
.BR port_alert (3C).
.SH RETURN VALUES
.sp
.LP
Upon successful completion, the
.B port_send()
function returns 0.
Otherwise, it returns \(mi1 and sets
.B errno
to indicate the error.
.sp
.LP
The
.B port_sendn()
function returns the number of successfully
.RI "submitted events.  A non-negative return value less than the" " nent"
argument indicates that at least one error occurred. In this case, each
element of the
.IR errors []
array is filled in. An element of the
\fIerrors\fR[] array is set to 0 if the event was successfully sent to the
corresponding port in the
.IR ports []
array, or is set to indicate the
error if the event was not successfully sent.  If an error occurs, the
.B port_sendn()
function returns \(mi1 and sets
.B errno
to indicate
the error.
.SH ERRORS
.sp
.LP
The
.B port_send()
and
.B port_sendn()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EAGAIN
.ad
.RS 10n
.rt
The maximum number of events per port is exceeded.  The maximum allowable
number of events per port is the minimum value of the
.B process.max-port-events
resource control at the time
.BR port_create (3C)
was used to create the port.
.RE

.sp
.ne 2
.mk
.na
.B EBADF
.ad
.RS 10n
.rt
The port file descriptor is not valid.
.RE

.sp
.ne 2
.mk
.na
.B EBADFD
.ad
.RS 10n
.rt
The
.I port
argument is not an event port file descriptor.
.RE

.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
There is not enough memory available to satisfy the request.
.RE

.sp
.LP
The
.B port_sendn()
function will fail if:
.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The
.IR ports []
pointer or \fIerrors\fR[] pointer is not reasonable.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The value of the
.I nent
argument is 0.
.RE

.SH EXAMPLES
.LP
.B Example 1
Use
.B port_send()
to send a user event
(PORT_SOURCE_USER) to a port.
.sp
.LP
The following example uses
.B port_send()
to send a user event
.RB ( PORT_SOURCE_USER ") to a port and " port_get() " to retrieve it. The"
.B portev_user
and
.B portev_events
members of the
.BR port_event_t
structure are the same as the corresponding user and events arguments of the
.B port_send()
function.

.sp
.in +2
.nf
#include <port.h>

int             myport;
port_event_t    pe;
struct timespec timeout;
int             ret;
void            *user;

myport = port_create();
if (myport) {
        /* port creation failed .\|.\|. */
        .\|.\|.
        return(.\|.\|.);
}
\&.\|.\|.
events = 0x01;          /* own event definition(s) */
user = <my_own_value>;
ret = port_send(myport, events, user);
if (ret == -1) {
        /* error detected .\|.\|. */
        .\|.\|.
        close(myport);
        return (.\|.\|.);
}

/*
 * The following code could also be executed from another thread or
 * process.
 */
timeout.tv_sec = 1;     /* user defined */
timeout.tv_nsec = 0;
ret = port_get(myport, &pe, &timeout);
if (ret == -1) {
        /*
         * error detected :
         * - EINTR or ETIME : log error code and try again .\|.\|.
         * - Other kind of errors : may have to close the port .\|.\|.
         */
        return(.\|.\|.);
}

/*
 * After port_get() returns successfully, the port_event_t
 * structure will be filled with:
 * pe.portev_source =   PORT_SOURCE_USER
 * pe.portev_events = 0x01
 * pe.portev_object = unspecified
 * pe.portev_user = <my_own_value>
 */
\&.\|.\|.
close(myport);
.fi
.in -2

.SH USAGE
.sp
.LP
See
.BR setrctl (2)
and
.BR rctladm (1M)
for information on using
resource controls.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Architectureall
_
AvailabilitySUNWcsr, SUNWhea
_
Interface StabilityCommitted
_
MT-LevelAsync-Signal-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR rctladm (1M),
.BR setrctl (2),
.BR port_alert (3C),
.BR port_associate (3C),
.BR port_create (3C),
.BR port_get (3C),
.BR attributes (5)
