'\" te
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved. The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\" Copyright (c) 2005, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.TH wait3 3C "4 Nov 2005" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
wait3, wait4 \- wait for process to terminate or stop
.SH SYNOPSIS
.LP
.nf
#include <sys/wait.h>
#include <sys/time.h>
#include <sys/resource.h>

\fBpid_t\fR \fBwait3\fR(\fBint *\fIstatusp\fR, \fBint\fR \fIoptions\fR, \fBstruct rusage *\fIrusage\fR);
.fi

.LP
.nf
\fBpid_t\fR \fBwait4\fR(\fBpid_t\fR \fIpid\fR, \fBint *\fIstatusp\fR, \fBint\fR \fIoptions\fR, \fBstruct rusage *\fIrusage\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B wait3()
function delays its caller until a signal is received or
one of its child processes terminates or stops due to tracing. If any child
process has died or stopped due to tracing and this has not already been
reported, return is immediate, returning the process
.B ID
and status of
one of those children. If that child process has died, it is discarded. If
there are no children, \(mi1 is returned immediately. If there are only
running or stopped but reported children, the calling process is blocked.
.sp
.LP
If
.I statusp
is not a null pointer, then on return from a successful
.B wait3()
call, the status of the child process is stored in the integer
pointed to by
.IR statusp .
.I *statusp
indicates the cause of
termination and other information about the terminated process in the
following manner:
.RS +4
.TP
.ie t \(bu
.el o
If the low-order 8 bits of
.I *statusp
are equal to 0177, the child
process has stopped; the 8 bits higher up from the low-order 8 bits of
.I *statusp
contain the number of the signal that caused the process to
stop. See
.BR signal.h (3HEAD).
.RE
.RS +4
.TP
.ie t \(bu
.el o
If the low-order 8 bits of
.I *statusp
are non-zero and are not equal to
0177, the child process terminated due to a signal; the low-order 7 bits of
.I *statusp
contain the number of the signal that terminated the process.
In addition, if the low-order seventh bit of
.I *statusp
(that is, bit
0200) is set, a ``core image'' of the process was produced; see
.BR signal.h (3HEAD).
.RE
.RS +4
.TP
.ie t \(bu
.el o
Otherwise, the child process terminated due to an
.B exit()
call; the 8
bits higher up from the low-order 8 bits of
.I *statusp
contain the
low-order 8 bits of the argument that the child process passed to
.BR exit() ;
see
.BR exit (2).
.RE
.sp
.LP
The
.I options
argument is constructed from the bitwise inclusive
.B OR
of zero or more of the following flags, defined in
.RB < sys/wait.h >:
.sp
.ne 2
.mk
.na
.B WNOHANG
.ad
.RS 13n
.rt
Execution of the calling process is not suspended if status is not
immediately available for any child process.
.RE

.sp
.ne 2
.mk
.na
.B WUNTRACED
.ad
.RS 13n
.rt
The status of any child processes that are stopped, and whose status has
not yet been reported since they stopped, are also reported to the
requesting process.
.RE

.sp
.LP
If
.I rusage
is not a null pointer, a summary of the resources used by
the terminated process and all its children is returned. Only the user time
used and the system time used are currently available. They are returned in
the
.B ru_utime
and
.BR ru_stime ,
members of the rusage structure,
respectively.
.sp
.LP
When the
.B WNOHANG
option is specified and no processes have status to
report,
.B wait3()
returns 0. The
.B WNOHANG
and
.BR WUNTRACED
options may be combined by the bitwise
.B OR
operation of the two
values.
.sp
.LP
The
.B wait4()
function is an extended interface.  If
.I pid
is 0,
.B wait4()
is equivalent to
.BR wait3() .
If
.I pid
has a nonzero
value,
.B wait4()
returns status only for the indicated process
.BR ID,
but not for any other child processes. If
.I pid
has a negative value,
.B wait4()
return status only for child processes whose process group ID
is equal to the absolute value of
.IR pid .
The status can be evaluated
using the macros defined by
.BR wait.h (3HEAD).
.SH RETURN VALUES
.sp
.LP
If
.B wait3()
or
.B wait4()
returns due to a stopped or terminated
child process, the process
.B ID
of the child is returned to the calling
process. Otherwise, \fB\(mi1\fR is returned and
.B errno
is set to
indicate the error.
.sp
.LP
If
.B wait3()
or
.B wait4()
return due to the delivery of a signal to
the calling process, \fB\(mi1\fR is returned and
.B errno
is set to
.BR EINTR .
If
.B WNOHANG
was set in
.IR options ,
it has at least one
child process specified by
.I pid
for which status is not available, and
status is not available for any process specified by
.IR pid ,
.B 0
is
returned. Otherwise, \fB\(mi1\fR is returned and
.B errno
is set to
indicate the error.
.sp
.LP
The
.B wait3()
and
.B wait4()
functions return
.B 0
if
.B WNOHANG
is specified and there are no stopped or exited children, and
return the process
.B ID
of the child process if they return due to a
stopped or terminated child process. Otherwise, they return \fB\(mi1\fR and
set
.B errno
to indicate the error.
.SH ERRORS
.sp
.LP
The
.B wait3()
and
.B wait4()
functions will fail and return
immediately if:
.sp
.ne 2
.mk
.na
.B ECHILD
.ad
.RS 10n
.rt
The calling process has no existing unwaited-for child processes.
.RE

.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The
.I statusp
or
.I rusage
arguments point to an illegal address.
.RE

.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 10n
.rt
The function was interrupted by a signal. The value of the location pointed
to by
.I statusp
is undefined.
.RE

.sp
.ne 2
.mk
.na
.B EINVAL
.ad
.RS 10n
.rt
The value of
.I options
is not valid.
.RE

.sp
.LP
The
.B wait4()
function may fail if:
.sp
.ne 2
.mk
.na
.B ECHILD
.ad
.RS 10n
.rt
The process specified by
.I pid
does not exist or is not a child of the
calling process.
.RE

.sp
.LP
The
.BR wait3() and
\fBwait4()\fR functions will terminate prematurely,
return \fB\(mi1\fR, and set \fBerrno\fR to
.B EINTR
upon the arrival of a
signal whose
.B SA_RESTART
bit in its flags field is not set (see
.BR sigaction (2)).
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelAsync-Signal-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR kill (1),
.BR exit (2),
.BR waitid (2),
.BR waitpid (3C),
.BR getrusage (3C),
.BR signal (3C),
.BR signal.h (3HEAD),
.BR wait (3C),
.BR wait.h (3HEAD),
.BR proc (4),
.BR attributes (5)
.SH NOTES
.sp
.LP
If a parent process terminates without waiting on its children, the
initialization process (process
.B ID
= 1) inherits the children.
.sp
.LP
The
.B wait3()
and
.B wait4()
functions are automatically restarted
when a process receives a signal while awaiting termination of a child
process, unless the
.B SA_RESTART
bit is not set in the flags for that
signal.
