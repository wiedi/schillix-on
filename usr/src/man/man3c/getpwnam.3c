'\" te
.\" Copyright (c) 2009, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 2001, the Institute of Electrical and Electronics Engineers, Inc. and The Open Group. All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH getpwnam 3C "5 Apr 2004" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
getpwnam, getpwnam_r, getpwent, getpwent_r, getpwuid, getpwuid_r, setpwent,
endpwent, fgetpwent, fgetpwent_r \- get password entry
.SH SYNOPSIS
.LP
.nf
#include <pwd.h>

\fBstruct passwd *\fBgetpwnam\fR(\fBconst char *\fIname\fR);
.fi

.LP
.nf
\fBstruct passwd *\fBgetpwnam_r\fR(\fBconst char *\fIname\fR, \fBstruct passwd *\fIpwd\fR,
     \fBchar *\fIbuffer\fR, \fBint\fR \fIbuflen\fR);
.fi

.LP
.nf
\fBstruct passwd *\fBgetpwent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBstruct passwd *\fBgetpwent_r\fR(\fBstruct passwd *\fIpwd\fR, \fBchar *\fIbuffer\fR,
     \fBint\fR \fIbuflen\fR);
.fi

.LP
.nf
\fBstruct passwd *\fBgetpwuid\fR(\fBuid_t\fR \fIuid\fR);
.fi

.LP
.nf
\fBstruct passwd *\fBgetpwuid_r\fR(\fBuid_t\fR \fIuid\fR, \fBstruct passwd *\fIpwd\fR,
    \fBchar *\fIbuffer\fR, \fBint\fR  \fIbuflen\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsetpwent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBvoid\fR \fBendpwent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBstruct passwd *\fBfgetpwent\fR(\fBFILE *\fIf\fR);
.fi

.LP
.nf
\fBstruct passwd *\fBfgetpwent_r\fR(\fBFILE *\fIf\fR, \fBstruct passwd *\fIpwd\fR,
     \fBchar *\fIbuffer\fR, \fBint\fR \fIbuflen\fR);
.fi

.SS "Standard conforming"
.LP
.nf
cc [ \fIflag\fR.\|.\|.] \fIfile\fR.\|.\|. \fB-D_POSIX_PTHREAD_SEMANTICS\fR [ \fIlibrary\fR.\|.\|. ]

\fBint\fR \fBgetpwnam_r\fR(\fBconst char *\fIname\fR, \fBstruct passwd *\fIpwd\fR, \fBchar *\fIbuffer\fR,
     \fBsize_t\fR \fIbufsize\fR, \fBstruct passwd **\fIresult\fR);
.fi

.LP
.nf
\fBint\fR \fBgetpwuid_r\fR(\fBuid_t\fR \fIuid\fR, \fBstruct passwd *\fIpwd\fR, \fBchar *\fIbuffer\fR,
     \fBsize_t\fR \fIbufsize\fR, \fBstruct passwd **\fIresult\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions are used to obtain password entries. Entries can come from
any of the sources for
.B passwd
specified in the
.B /etc/nsswitch.conf
file (see
.BR nsswitch.conf (4)).
.sp
.LP
The
.B getpwnam()
function searches for a password entry with the login
name specified by the character string parameter
.IR name .
.sp
.LP
The
.B getpwuid()
function searches for a password entry with the
(numeric) user
.B ID
specified by the
.I uid
parameter.
.sp
.LP
The
.BR setpwent() ,
.BR getpwent() ,
and
.B endpwent()
functions are
used to enumerate password entries from the database. The
.B setpwent()
function sets (or resets) the enumeration to the beginning of the set of
password entries. This function should be called before the first call to
.BR getpwent() .
Calls to
.B getpwnam()
and
.B getpwuid()
leave the
enumeration position in an indeterminate state. Successive calls to
.B getpwent()
return either successive entries or a null pointer,
indicating the end of the enumeration.
.sp
.LP
The
.B endpwent()
function may be called to indicate that the caller
expects to do no further password retrieval operations; the system may then
close the password file, deallocate resources it was using, and so forth.
It is still allowed, but possibly less efficient, for the process to call
more password functions after calling
.BR endpwent() .
.sp
.LP
The
.B fgetpwent()
function, unlike the other functions above, does not
use
.B nsswitch.conf
but reads and parses the next line from the stream
.IR f ,
which is assumed to have the format of the
.B passwd
file.  See
.BR passwd (4).
.SS "Reentrant Interfaces"
.sp
.LP
The
.BR getpwnam() ,
.BR getpwuid() ,
.BR getpwent() ,
and
.B fgetpwent()
functions use thread-specific data storage that is reused
in each call to one of these functions by the same thread, making them safe
to use but not recommended for multithreaded applications.
.sp
.LP
The parallel functions
.BR getpwnam_r() ,
.BR getpwuid_r() ,
.BR getpwent_r() ,
and
.B fgetpwent_r()
provide reentrant interfaces for
these operations.
.sp
.LP
Each reentrant interface performs the same operation as its non-reentrant
counterpart, named by removing the "\|_r\|" suffix. The reentrant
interfaces, however, use buffers supplied by the caller to store returned
results instead of using thread-specific data that can be overwritten by
each call. They are safe for use in both single-threaded and multithreaded
applications.
.sp
.LP
Each reentrant interface takes the same parameters as its non-reentrant
counterpart, as well as the following additional parameters. The
.I pwd
parameter must be a pointer to a
.B "struct passwd"
structure allocated by
the caller. On successful completion, the function returns the password
entry in this structure. The parameter
.I buffer
is a pointer to a buffer
supplied by the caller, used as storage space for the password data. All
pointers within the returned
.B "struct passwd"
.I pwd
point to data
stored within this buffer; see
.B "passwd Structure"
below. The buffer must
be large enough to hold all the data associated with the password entry. The
.RI "parameter " buflen " (or " bufsize " for the standard-conforming"
versions; see
.BR standards (5))
should give the size in bytes of
.IR buffer .
The maximum size needed for this buffer can be determined with
.RB "the {" _SC_GETPW_R_SIZE_MAX "} " sysconf (3C)
parameter. The
standard-conforming versions place a pointer to the modified
.I pwd
structure in the
.I result
parameter, instead of returning a pointer to
this structure. A null pointer is returned at the location pointed to by
.I result
on error or if the requested entry is not found.
.sp
.LP
For enumeration in multithreaded applications, the position within the
enumeration is a process-wide property shared by all threads. The
.B setpwent()
function can be used in a multithreaded application but
resets the enumeration position for all threads.  If multiple threads
interleave calls to
.BR getpwent_r() ,
the threads will enumerate disjoint
subsets of the password database.
.sp
.LP
Like their non-reentrant counterparts,
.B getpwnam_r()
and
.B getpwuid_r()
leave the enumeration position in an indeterminate
state.
.SS "passwd Structure"
.sp
.LP
Password entries are represented by the
.B "struct passwd"
structure
defined in
.RB < pwd.h >:
.sp
.in +2
.nf
struct passwd {
    char *pw_name;      /* user's login name */
    char *pw_passwd;    /* no longer used */
    uid_t pw_uid;       /* user's uid */
    gid_t pw_gid;       /* user's gid */
    char *pw_age;       /* not used */
    char *pw_comment;   /* not used */
    char *pw_gecos;     /* typically user's full name */
    char *pw_dir;       /* user's home dir */
    char *pw_shell;     /* user's login shell */
};
.fi
.in -2

.sp
.LP
The
.B pw_passwd
member should not be used as the encrypted password for
the user; use
.B getspnam()
or
.B getspnam_r()
instead. See
.BR getspnam (3C).
.SH RETURN VALUES
.sp
.LP
The
.BR getpwnam() ,
.BR getpwnam_r() ,
.BR getpwuid() ,
and
.B getpwuid_r()
functions each return a pointer to a
.BR "struct passwd"
if they successfully locate the requested entry. A null pointer is returned
if the requested entry is not found, or an error occurs. On error,
.B errno
is set to indicate the error.
.sp
.LP
Applications wishing to check for error situations should set
.BR errno
to 0 before calling
.BR getpwnam() ,
.BR getpwnam_r() ,
.BR getpwuid() ,
.BR getpwuid_r() ,
.BR getpwent() ,
.BR getpwent_r() ,
.BR fgetpwent() ,
and
.BR fgetpwent_r() .
If these non-reentrant functions return a null
pointer and
.B errno
is non-zero, an error occurred.
.sp
.LP
The standard-conforming functions
.B getpwnam_r()
and
.BR getpwuid_r()
can return
.B 0
even on an error, particularly in the case where the
requested entry is not found. The application needs to check the return
value and that the
.I pwd
pointer is non-null. Otherwise, an error value
is returned to indicate the error.
.sp
.LP
The
.BR getpwent() ,
.BR getpwent_r() ,
.BR fgetpwent() ,
and
.B fgetpwent_r()
functions each return a pointer to a
.BR "struct passwd"
if they successfully enumerate an entry; otherwise they return a null
pointer on end-of-file or error. On error,
.B errno
is set to indicate
the error.
.sp
.LP
See
.BR Intro (2)
for the proper usage and interpretation of
.BR errno
in multithreaded applications.
.sp
.LP
The
.BR getpwnam() ,
.BR getpwuid() ,
.BR getpwent() ,
and
.B fgetpwent()
functions use thread-specific data storage, so returned
data must be copied before a subsequent call to any of these functions if
the data is to be saved.
.sp
.LP
When the pointer returned by the reentrant functions
.BR getpwnam_r() ,
.BR getpwuid_r() ,
.BR getpwent_r() ,
and
.B fgetpwent_r()
is non-null,
it is always equal to the
.I pwd
pointer that was supplied by the
caller.
.SH ERRORS
.sp
.LP
The
.BR getpwent_r() ,
.BR fgetpwent() ,
and
.B fgetpwent_r()
functions will fail if:
.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 10n
.rt
An I/O error has occurred.
.RE

.sp
.ne 2
.mk
.na
.B ERANGE
.ad
.RS 10n
.rt
Insufficient storage was supplied by
.IR buffer " and "
.I bufsize
to
contain the data to be referenced by the resulting
.B passwd
structure.
.RE

.sp
.LP
The
.B getpwent_r()
function will fail if:
.sp
.ne 2
.mk
.na
.B EMFILE
.ad
.RS 10n
.rt
There are
.RB { OPEN_MAX }
file descriptors currently open in the calling
process.
.RE

.sp
.ne 2
.mk
.na
.B ENFILE
.ad
.RS 10n
.rt
The maximum allowable number of files is currently open in the system.
.RE

.sp
.LP
The
.BR getpwnam() ,
.BR getpwnam_r() ,
.BR getpwuid() ,
.BR getpwuid_r() ,
.BR getpwent() ,
.BR setpwent() ,
and
.BR endpwent()
functions may fail if:
.sp
.ne 2
.mk
.na
.B EIO
.ad
.RS 7n
.rt
An I/O error has occurred.
.RE

.sp
.LP
The
.BR getpwnam() ,
.BR getpwnam_r() ,
.BR getpwuid() ,
.BR getpwuid_r() ,
.BR getpwent() ,
and
.B setpwent()
functions may
fail if:
.sp
.ne 2
.mk
.na
.B EMFILE
.ad
.RS 10n
.rt
There are
.RB { OPEN_MAX }
file descriptors currently open in the calling
process.
.RE

.sp
.ne 2
.mk
.na
.B ENFILE
.ad
.RS 10n
.rt
The maximum allowable number of files is currently open in the system.
.RE

.sp
.LP
The
.BR getpwnam() ,
.BR getpwnam_r() ,
.BR getpwuid() ,
and
.B getpwuid_r()
functions may fail if:
.sp
.ne 2
.mk
.na
.B EINTR
.ad
.RS 9n
.rt
A signal was caught during the execution of the function call.
.RE

.sp
.LP
The
.B getpwnam_r()
and
.B getpwuid_r()
functions may fail if:
.sp
.ne 2
.mk
.na
.B ERANGE
.ad
.RS 10n
.rt
Insufficient storage was supplied by
.IR buffer " and "
.I bufsize
to
contain the data to be referenced by the resulting
.B passwd
structure.
.RE

.SH USAGE
.sp
.LP
Three names associated with the current process can be determined:
\fBgetpwuid\fR(\fBgeteuid()\fR) returns the name associated with the
effective user ID of the process;
.B getlogin()
returns the name
associated with the current login activity; and
\fBgetpwuid\fR(\fBgetuid()\fR) returns the name associated with the real
user ID of the process.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityCommitted
_
MT-LevelSee \fBReentrant Interfaces\fR in \fBDESCRIPTION\fR.
_
StandardSee below.
.TE

.sp
.LP
For
.BR endpwent() ,
.BR getpwent() ,
.BR getpwnam() ,
.BR getpwnam_r() ,
.BR getpwuid() ,
.BR getpwuid_r() ,
and
.BR setpwent() ,
see
.BR standards (5).
.SH SEE ALSO
.sp
.LP
.BR nispasswd (1),
.BR passwd (1),
.BR yppasswd (1),
.BR Intro (2),
.BR Intro (3),
.BR cuserid (3C),
.BR getgrnam (3C),
.BR getlogin (3C),
.BR getspnam (3C),
.BR nsswitch.conf (4),
.BR passwd (4),
.BR shadow (4),
.BR attributes (5),
.BR standards (5)
.SH NOTES
.sp
.LP
When compiling multithreaded programs, see
.BR Intro (3).
.sp
.LP
Use of the enumeration interfaces
.B getpwent()
and
.BR getpwent_r()
is discouraged; enumeration is supported for the
.B passwd
file,
.B NIS,
and
.B NIS+,
but in general is not efficient and might not be
supported for all database sources.  The semantics of enumeration are
discussed further in
.BR nsswitch.conf (4).
.sp
.LP
Previous releases allowed the use of `+' and `-' entries in
.B /etc/passwd
to selectively include and exclude
.B NIS
entries. The
primary usage of these `+/-' entries is superseded by the name service
switch, so the `+/-' form might not be supported in future releases.
.sp
.LP
If required, the `+/-' functionality can still be obtained for
.B NIS
by
specifying
.B compat
as the source for
.BR passwd .
.sp
.LP
If the `+/-' functionality is required in conjunction with
.B NIS+,
specify both
.B compat
as the source for
.B passwd
and
.BR nisplus
as the source for the pseudo-database
.BR passwd_compat .
See
.BR passwd (4),
.BR shadow (4),
and
.BR nsswitch.conf (4)
for details.
.sp
.LP
If the `+/-' is used, both
.B /etc/shadow
and
.B /etc/passwd
should
have the same `+' and `-' entries to ensure consistency between the password
and shadow databases.
.sp
.LP
If a password entry from any of the sources contains an empty
.I uid
or
.I gid
field, that entry will be ignored by the files,
.BR NIS ,
and
.B NIS+
name service switch backends, causing the user to appear unknown
to the system.
.sp
.LP
If a password entry contains an empty
.IR gecos ,
.IR "home directory" ,
or
.I shell
field,
.B getpwnam()
and
.B getpwnam_r()
return a pointer
to a null string in the respective field of the
.B passwd
structure.
.sp
.LP
If the shell field is empty,
.BR login (1)
automatically assigns the
default shell.  See
.BR login (1).
.sp
.LP
Solaris 2.4 and earlier releases provided definitions of the
.B getpwnam_r()
and
.B getpwuid_r()
functions as specified in POSIX.1c
Draft 6. The final POSIX.1c standard changed the interface for these
functions. Support for the Draft 6 interface is provided for compatibility
only and might not be supported in future releases. New applications and
libraries should use the standard-conforming interface.
.sp
.LP
For POSIX.1c-conforming applications, the
.B _POSIX_PTHREAD_SEMANTICS
and
.B _REENTRANT
flags are automatically turned on by defining the
.B _POSIX_C_SOURCE
flag with a value \(>=199506L.
