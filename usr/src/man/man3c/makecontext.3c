'\" te
.\" Copyright 1989 AT&T.
.\" Copyright (c) 2004, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH makecontext 3C "8 Mar 2004" "SunOS 5.11" "Standard C Library Functions"
.SH NAME
makecontext, swapcontext \- manipulate user contexts
.SH SYNOPSIS
.LP
.nf
#include <ucontext.h>

\fBvoid\fR \fBmakecontext\fR(\fBucontext_t *\fIucp\fR, \fBvoid (*\fIfunc\fR)(), \fBint\fR \fIargc\fR.\|.\|.);
.fi

.LP
.nf
\fBint\fR \fBswapcontext\fR(\fBucontext_t *restrict\fR \fIoucp\fR,
     \fBconst ucontext_t *restrict\fR \fIucp\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B makecontext()
function modifies the context specified by
.IR ucp ,
which has been initialized using
.BR getcontext (2).
When this
context is resumed using
.B swapcontext()
or
.BR setcontext (2),
execution continues by calling the function
.IR func ,
passing it the
arguments that follow
.I argc
in the
.B makecontext()
call. The value
of
.I argc
must match the number of pointer-sized integer arguments
passed to
.IR func ,
otherwise the behavior is undefined.
.sp
.LP
Before a call is made to
.BR makecontext() ,
the context being modified
should have a stack allocated for it. The stack is assigned to the context
by initializing the
.B uc_stack
member.
.sp
.LP
The
.B uc_link
member is used to determine the context that will be
resumed when the context being modified by
.B makecontext()
returns.  The
.B uc_link
member should be initialized prior to the call to
.BR makecontext() .
If the
.B uc_link
member is initialized to
.IR NULL ,
the thread executing \fIfunc\fR will exit when \fIfunc\fR
returns. See
.BR pthread_exit (3C).
.sp
.LP
The
.B swapcontext()
function saves the current context in the context
structure pointed to by
.I oucp
and sets the context to the context
structure pointed to by
.IR ucp .
.sp
.LP
If the
.I ucp
or
.I oucp
argument points to an invalid address, the
behavior is undefined and
.B errno
may be set to
.BR EFAULT .
.SH RETURN VALUES
.sp
.LP
On successful completion,
.B swapcontext()
returns
.BR 0 .
Otherwise,
\fB\(mi1\fR is returned and \fBerrno\fR is set to indicate the error.
.SH ERRORS
.sp
.LP
The
.B swapcontext()
function will fail if:
.sp
.ne 2
.mk
.na
.B ENOMEM
.ad
.RS 10n
.rt
The
.I ucp
argument does not have enough stack left to complete the
operation.
.RE

.sp
.LP
The
.B swapcontext()
function may fail if:
.sp
.ne 2
.mk
.na
.B EFAULT
.ad
.RS 10n
.rt
The
.I ucp
or
.I oucp
argument points to an invalid address.
.RE

.SH EXAMPLES
.LP
.B Example 1
Alternate execution context on a stack whose memory was
allocated using
.BR mmap() .
.sp
.in +2
.nf
#include <stdio.h>
#include <ucontext.h>
#include <sys/mman.h>

void
assign(long a, int *b)
{
        *b = (int)a;
}

int
main(int argc, char **argv)
{
        ucontext_t uc, back;
        size_t sz = 0x10000;
        int value = 0;

        getcontext(&uc);

        uc.uc_stack.ss_sp = mmap(0, sz,
            PROT_READ | PROT_WRITE | PROT_EXEC,
            MAP_PRIVATE | MAP_ANON, -1, 0);
        uc.uc_stack.ss_size = sz;
        uc.uc_stack.ss_flags = 0;

        uc.uc_link = &back;

        makecontext(&uc, assign, 2, 100L, &value);
        swapcontext(&back, &uc);

        printf("done %d\en", value);

        return (0);
}
.fi
.in -2

.SH USAGE
.sp
.LP
These functions are useful for implementing user-level context switching
between multiple threads of control within a process (co-processing). More
effective multiple threads of control can be obtained by using native
support for multithreading. See
.BR threads (5).
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStandard
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR mmap (2),
.BR getcontext (2),
.BR sigaction (2),
.BR sigprocmask (2),
.BR pthread_exit (3C),
.BR ucontext.h (3HEAD),
.BR attributes (5),
.BR standards (5),
.BR threads (5)
.SH NOTES
.sp
.LP
The semantics of the
.B uc_stack
member of the
.BR ucontext_t
structure have changed as they apply to inputs to
.BR makecontext() .
Prior
to Solaris 10, the
.B ss_sp
member of the
.B uc_stack
structure
represented the high memory address of the area reserved for the stack. The
.B ss_sp
member now represents the base (low memory address), in keeping
with other uses of
.BR ss_sp .
.sp
.LP
This change in the meaning of
.B ss_sp
is now the default behavior. The
.B -D__MAKECONTEXT_V2_SOURCE
compilation flag used in Solaris 9 update
releases to access this behavior is obsolete.
.sp
.LP
Binary compatibility has been preserved with releases prior to Solaris 10.
Before recompiling, applications that use
.B makecontext()
must be
updated to reflect this behavior change. The example below demonstates a
typical change that must be applied:
.sp
.in +2
.nf
--- example1_s9.c       Thu Oct  3 11:58:17 2002
+++ example1.c  Thu Jun 27 13:28:16 2002
@@ -27,12 +27,9 @@
        uc.uc_stack.ss_sp = mmap(0, sz,
            PROT_READ | PROT_WRITE | PROT_EXEC,
            MAP_PRIVATE | MAP_ANON, -1, 0);
-       uc.uc_stack.ss_sp = (char *)uc.uc_stack.ss_sp + sz - 8;
        uc.uc_stack.ss_size = sz;
        uc.uc_stack.ss_flags = 0;

        uc.uc_link = &back

        makecontext(&uc, assign, 2, 100L, &value);
.fi
.in -2

