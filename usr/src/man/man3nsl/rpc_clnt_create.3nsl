'\" te
.\" Copyright 1989 AT&T
.\" Copyright (C) 2009, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH rpc_clnt_create 3NSL "23 Jul 2009" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
rpc_clnt_create, clnt_control, clnt_create, clnt_create_timed,
clnt_create_vers, clnt_create_vers_timed, clnt_destroy, clnt_dg_create,
clnt_pcreateerror, clnt_raw_create, clnt_spcreateerror, clnt_tli_create,
clnt_tp_create, clnt_tp_create_timed, clnt_vc_create, rpc_createerr,
clnt_door_create \- library routines for dealing with creation and
manipulation of CLIENT handles
.SH SYNOPSIS
.LP
.nf
#include <rpc/rpc.h>

\fBbool_t\fR \fBclnt_control\fR(\fBCLIENT *\fIclnt\fR, \fBconst uint_t\fR \fIreq\fR, \fBchar *\fIinfo\fR);
.fi

.LP
.nf
\fBCLIENT *\fBclnt_create\fR(\fBconst char *\fIhost\fR, \fBconst rpcprog_t\fR \fIprognum\fR,
     \fBconst rpcvers_t\fR \fIversnum\fR, \fBconst char *\fInettype\fR);
.fi

.LP
.nf
\fBCLIENT *\fBclnt_create_timed\fR(\fBconst char *\fIhost\fR, \fBconst rpcprog_t\fR \fIprognum\fR,
     \fBconst rpcvers_t\fR \fIversnum\fR, \fBconst\fR \fInettype\fR,
     \fBconst struct timeval *\fItimetout\fR);
.fi

.LP
.nf
\fBCLIENT *\fBclnt_create_vers\fR (\fBconst char *\fIhost\fR,
     \fBconst rpcprog_t\fR \fIprognum\fR, \fBrpcvers_t *\fIvers_outp\fR,
     \fBconst rpcvers_t\fR \fIvers_low\fR, \fBconst rpcvers_t\fR \fIvers_high\fR,
     \fBconst char *\fInettype\fR);
.fi

.LP
.nf
\fBCLIENT *\fBclnt_create_vers_timed\fR(\fBconst char *\fIhost\fR,
     \fBconst rpcprog_t\fR \fIprognum\fR, \fBrpcvers_t *\fIvers_outp\fR,
     \fBconst rpcvers_t\fR \fIvers_low\fR, \fBconst rpcvers_t\fR \fIvers_high\fR,
     \fBchar *\fInettype\fR, \fBconst struct timeval *\fItimeout\fR);
.fi

.LP
.nf
\fBvoid\fR \fBclnt_destroy\fR(\fBCLIENT *\fIclnt\fR);
.fi

.LP
.nf
\fBCLIENT *\fBclnt_dg_create\fR(\fBconst int\fR \fIfildes\fR,
     \fBconst struct netbuf *\fIsvcaddr\fR, \fBconst rpcprog_t\fR \fIprognum\fR,
     \fBconst rpcvers_t\fR \fIversnum\fR, \fBconst uint_t\fR \fIsendsz\fR,
     \fBconst uint_t\fR \fIrecsz\fR);
.fi

.LP
.nf
\fBvoid\fR \fBclnt_pcreateerror\fR(\fBconst char *\fIs\fR);
.fi

.LP
.nf
\fBCLIENT *\fBclnt_raw_create\fR(\fBconst rpcprog_t\fR \fIprognum\fR,
     \fBconst rpcvers_t\fR \fIversnum\fR);
.fi

.LP
.nf
\fBchar *\fBclnt_spcreateerror\fR(\fBconst char *\fIs\fR);
.fi

.LP
.nf
\fBCLIENT *\fBclnt_tli_create\fR(\fBconst int\fR \fIfildes\fR,
     \fBconst struct netconfig *\fInetconf\fR, \fBconst struct netbuf *\fIsvcaddr\fR,
     \fBconst rpcprog_t\fR \fIprognum\fR, \fBconst rpcvers_t\fR \fIversnum\fR,
     \fBconst uint_t\fR \fIsendsz\fR, \fBconst uint_t\fR \fIrecsz\fR);
.fi

.LP
.nf
\fBCLIENT *\fBclnt_tp_create\fR(\fBconst char *\fIhost\fR,
     \fBconst rpcprog_t\fR \fIprognum\fR, \fBconst rpcvers_t\fR \fIversnum\fR,
     \fBconst struct netconfig *\fInetconf\fR);
.fi

.LP
.nf
\fBCLIENT *\fBclnt_tp_create_timed\fR(\fBconst char *\fIhost\fR,
     \fBconst rpcprog_t\fR \fIprognum\fR, \fBconst rpcvers_t\fR \fIversnum\fR,
     \fBconst struct netconfig *\fInetconf\fR, \fBconst struct timeval *\fItimeout\fR);
.fi

.LP
.nf
\fBCLIENT *\fBclnt_vc_create\fR(\fBconst int\fR \fIfildes\fR,
     \fBconst struct netbuf *\fIsvcaddr\fR, \fBconst rpcprog_t\fR \fIprognum\fR,
     \fBconst rpcvers_t\fR \fIversnum\fR, \fBconst uint_t\fR \fIsendsz\fR,
     \fBconst uint_t\fR \fIrecsz\fR);
.fi

.LP
.nf
\fBstruct rpc_createerr\fR \fBrpc_createerr\fR
.fi

.LP
.nf
\fBCLIENT *\fBclnt_door_create\fR(\fBconst rpcprog_t\fR \fIprognum\fR,
     \fBconst rpcvers_t\fR \fIversnum\fR, \fBconst uint_t\fR \fIsendsz\fR);
.fi

.SH DESCRIPTION
.sp
.LP
.B RPC
library routines allow
.B C
language programs to make
.RB "procedure calls on other machines across the network. First a" " CLIENT"
handle is created and then the client calls a procedure to send a request to
the server. On receipt of the request, the server calls a dispatch routine
to perform the requested service, and then sends a reply.
.sp
.LP
These routines are MT-Safe. In the case of multithreaded applications, the
.B -mt
option must be specified on the command line at compilation time.
When the
.B -mt
option is specified,
.B rpc_createerr()
becomes a
macro that enables each thread to have its own
.BR rpc_createerr() .
See
.BR threads (5).
.SS "Routines"
.sp
.LP
See
.BR rpc (3NSL)
for the definition of the
.B CLIENT
data
structure.
.sp
.ne 2
.mk
.na
.B clnt_control()
.ad
.sp .6
.RS 4n
A function macro to change or retrieve various information about a client
object.
.I req
indicates the type of operation, and
.I info
is a
pointer to the information. For both connectionless and connection-oriented
transports, the supported values of
.I req
and their argument types and
what they do are:
.sp
.in +2
.nf
CLSET_TIMEOUT struct timeval * set total timeout
CLGET_TIMEOUT	struct timeval *	get total timeout
.fi
.in -2

If the timeout is set using
.BR clnt_control() ,
the timeout argument
passed by
.B clnt_call()
is ignored in all subsequent calls. If the
timeout value is set to
.BR 0 ,
.B clnt_control()
immediately returns
.BR RPC_TIMEDOUT .
Set the timeout parameter to
.B 0
for batching
calls.
.sp
.in +2
.nf
CLGET_SERVER_ADDR struct netbuf * get server's address
CLGET_SVC_ADDR	struct netbuf *	get server's address
CLGET_FD	int *	get associated file descriptor
CLSET_FD_CLOSE	void	close the file descriptor when
		destroying the client handle
		(see \fBclnt_destroy()\fR)
CLSET_FD_NCLOSE	void	do not close the file
		descriptor when destroying the client handle
CLGET_VERS   rpcvers_t get the RPC program's version
		number associated with the
		client handle
CLSET_VERS	rpcvers_t set the RPC program's version
		number associated with the
		client handle.  This assumes
		that the RPC server for this
		new version is still listening
		at the address of the previous
		version.
CLGET_XID	uint32_t	get the XID of the previous
		remote procedure call
CLSET_XID	uint32_t	set the XID of the next
		remote procedure call
CLGET_PROG	rpcprog_t	get program number
CLSET_PROG	rpcprog_t	set program number
.fi
.in -2

The following operations are valid for connection-oriented transports
only:
.sp
.in +2
.nf
CLSET_IO_MODE rpciomode_t*    set the IO mode used
 		to send one-way requests. The argument for this operation
		can be either:
   - RPC_CL_BLOCKING 	all sending operations block
 		until the underlying transport protocol has
 		accepted requests. If you specify this argument
 		you cannot use flush and getting and setting buffer
 		size is meaningless.
   - RPC_CL_NONBLOCKING   sending operations do not
 		block and return as soon as requests enter the buffer.
 		You can now use non-blocking I/O. The requests in the
		buffer are pending. The requests are sent to
		the server as soon as a two-way request is sent
		or a flush is done. You are responsible for flushing
		the buffer. When you choose RPC_CL_NONBLOCKING argument
 		you have a choice of flush modes as specified by
		CLSET_FLUSH_MODE.
CLGET_IO_MODE rpciomode_t* 		get the current IO mode
CLSET_FLUSH_MODE rpcflushmode_t* 		set the flush mode.
 		The flush mode can only be used in non-blocking I/O mode.
		The argument can be either of the following: 	
	- RPC_CL_BESTEFFORT_FLUSH: All flushes send requests
 		in the buffer until the transport end-point blocks.
 		If the transport connection is congested, the call
 		returns directly. 	
	- RPC_CL_BLOCKING_FLUSH: Flush blocks until the
 		underlying transport protocol accepts all pending
		requests into the queue.
CLGET_FLUSH_MODE rpcflushmode_t*  	get the current flush mode.
CLFLUSH rpcflushmode_t  		flush the pending requests.
		This command can only be used in non-blocking I/O mode.
		The flush policy depends on which of the following
		parameters is specified:
	- RPC_CL_DEFAULT_FLUSH, or NULL:	The flush is done
	   according to the current flush mode policy
		(see CLSET_FLUSH_MODE option).
	- RPC_CL_BESTEFFORT_FLUSH:		The flush tries
		to send pending requests without blocking; the call
		returns directly. If the transport connection is
		congested, this call could return without the request
		being sent.
	- RPC_CL_BLOCKING_FLUSH:		The flush sends all pending
		requests. This call will block until all the requests
		have been accepted by the transport layer.
CLSET_CONNMAXREC_SIZE int*    set the buffer size.
 		It is not possible to dynamically
		resize the buffer if it contains data.
		The default size of the buffer is 16 kilobytes.
CLGET_CONNMAXREC_SIZE int*  		get the current size of the
		buffer
CLGET_CURRENT_REC_SIZE int*  		get the size of
		the pending requests stored in the buffer. Use of this
		command is only recommended when you are in non-blocking
		I/O mode. The current size of the buffer is always zero
		when the handle is in blocking mode as the buffer is not
		used in this mode.
.fi
.in -2

The following operations are valid for connectionless transports only:
.sp
.in +2
.nf
CLSET_RETRY_TIMEOUT  struct timeval *    set the retry timeout
CLGET_RETRY_TIMEOUT  struct timeval *    get the retry timeout
.fi
.in -2

The retry timeout is the time that
.B RPC
waits for the server to reply
before retransmitting the request.
.sp
.B clnt_control()
returns
.B TRUE
on success and
.B FALSE
on
failure.
.RE

.sp
.ne 2
.mk
.na
.B clnt_create()
.ad
.sp .6
.RS 4n
Generic client creation routine for program
.I prognum
and version
.IR versnum .
.I host
identifies the name of the remote host where the
server is located.
.I nettype
indicates the class of transport protocol
to use. The transports are tried in left to right order in
.B NETPATH
variable or in top to bottom order in the netconfig database.
.sp
.B clnt_create()
tries all the transports of the
.I nettype
class
available from the
.B NETPATH
environment variable and the netconfig
database, and chooses the first successful one. A default timeout is set and
can be modified using
.BR clnt_control() .
This routine returns
.IR NULL
if it fails. The
.B clnt_pcreateerror()
routine can be used to print the
reason for failure.
.sp
Note that
.B clnt_create()
returns a valid client handle even if the
particular version number supplied to
.B clnt_create()
is not registered
with the
.B rpcbind
service. This mismatch will be discovered by a
.B clnt_call
later (see
.BR rpc_clnt_calls (3NSL)).
.RE

.sp
.ne 2
.mk
.na
.B clnt_create_timed()
.ad
.sp .6
.RS 4n
Generic client creation routine which is similar to
.B clnt_create()
but
which also has the additional parameter
.I timeout
that specifies the
maximum amount of time allowed for each transport class tried. In all other
respects, the
.B clnt_create_timed()
call behaves exactly like the
.B clnt_create()
call.
.RE

.sp
.ne 2
.mk
.na
.B clnt_create_vers()
.ad
.sp .6
.RS 4n
Generic client creation routine which is similar to
.B clnt_create()
but
which also checks for the version availability.
.I host
identifies the
name of the remote host where the server is located.
.I nettype
indicates
the class transport protocols to be used. If the routine is successful it
returns a client handle created for the highest version between
.I vers_low
and
.I vers_high
that is supported by the server.
.I vers_outp
is set to this value. That is, after a successful return
.I vers_low
<=
.I *vers_outp
<=
.IR vers_high .
If no version between
.I vers_low
and
.I vers_high
is supported by the server then the
routine fails and returns
.B NULL.
A default timeout is set and can be
modified using
.BR clnt_control() .
This routine returns
.I NULL
if it
fails. The
.B clnt_pcreateerror()
routine can be used to print the reason
for failure.
.sp
Note:
.B clnt_create()
returns a valid client handle even if the
particular version number supplied to
.B clnt_create()
is not registered
with the
.B rpcbind
service. This mismatch will be discovered by a
.B clnt_call
later (see
.BR rpc_clnt_calls (3NSL)).
However,
.B clnt_create_vers()
does this for you and returns a valid handle only
if a version within the range supplied is supported by the server.
.RE

.sp
.ne 2
.mk
.na
.B clnt_create_vers_timed()
.ad
.sp .6
.RS 4n
Generic client creation routine similar to
.B clnt_create_vers()
but
with the additional parameter
.IR timeout ,
which specifies the maximum
amount of time allowed for each transport class tried.   In all other
respects, the
.B clnt_create_vers_timed()
call behaves exactly like the
.B clnt_create_vers()
call.
.RE

.sp
.ne 2
.mk
.na
.B clnt_destroy()
.ad
.sp .6
.RS 4n
A function macro that destroys the client's
.B RPC
handle. Destruction
usually involves deallocation of private data structures, including
.I clnt
itself. Use of
.I clnt
is undefined after calling
.BR clnt_destroy() .
If the
.B RPC
library opened the associated file
descriptor, or
.B CLSET_FD_CLOSE
was set using
.BR clnt_control() ,
the
file descriptor will be closed.
.sp
The caller should call \fBauth_destroy(\fIclnt\fR->\fBcl_auth)\fR
(before calling
.BR clnt_destroy() )
to destroy the associated
.BR AUTH
structure (see
.BR rpc_clnt_auth (3NSL)).
.RE

.sp
.ne 2
.mk
.na
.B clnt_dg_create()
.ad
.sp .6
.RS 4n
This routine creates an
.B RPC
client for the remote program
.I prognum
and version
.IR versnum ;
the client uses a connectionless
transport. The remote program is located at address
.IR svcaddr .
The
parameter
.I fildes
is an open and bound file descriptor. This routine
will resend the call message in intervals of 15 seconds until a response is
received or until the call times out. The total time for the call to time
out is specified by
.B clnt_call()
(see
.B clnt_call()
in
.BR rpc_clnt_calls (3NSL)).
The retry time out and the total time out
periods can be changed using
.BR clnt_control() .
The user may set the size
of the send and receive buffers with the parameters
.I sendsz
and
.IR recvsz ;
values of
.B 0
choose suitable defaults. This routine
returns
.I NULL
if it fails.
.RE

.sp
.ne 2
.mk
.na
.B clnt_pcreateerror()
.ad
.sp .6
.RS 4n
Print a message to standard error indicating why a client
.B RPC
handle
could not be created. The message is prepended with the string
.I s
and a
colon, and appended with a newline.
.RE

.sp
.ne 2
.mk
.na
.B clnt_raw_create()
.ad
.sp .6
.RS 4n
This routine creates an
.B RPC
client handle for the remote program
.I prognum
and version
.IR versnum .
The transport used to pass messages
to the service is a buffer within the process's address space, so the
corresponding
.B RPC
server should live in the same address space; (see
.B svc_raw_create()
in
.BR rpc_svc_create "(3NSL)). This allows"
simulation of
.B RPC
and measurement of
.B RPC
overheads, such as
round trip times, without any kernel or networking interference. This
routine returns
.I NULL
if it fails.
.B clnt_raw_create()
should be
called after
.BR svc_raw_create() .
.RE

.sp
.ne 2
.mk
.na
.B clnt_spcreateerror()
.ad
.sp .6
.RS 4n
Like
.BR clnt_pcreateerror() ,
except that it returns a string instead of
printing to the standard error. A newline is not appended to the message in
this case.
.sp
Warning: returns a pointer to a buffer that is overwritten on each call. In
multithread applications, this buffer is implemented as thread-specific
data.
.RE

.sp
.ne 2
.mk
.na
.B clnt_tli_create()
.ad
.sp .6
.RS 4n
This routine creates an
.B RPC
client handle for the remote program
.I prognum
and version
.IR versnum .
The remote program is located at
address
.IR svcaddr .
If
.I svcaddr
is
.I NULL
and it is
connection-oriented, it is assumed that the file descriptor is connected.
For connectionless transports, if
.I svcaddr
is
.IR NULL ,
.B RPC_UNKNOWNADDR
error is set.
.I fildes
is a file descriptor which
may be open, bound and connected. If it is
.BR RPC_ANYFD ,
it opens a file
descriptor on the transport specified by
.IR netconf .
If
.IR fildes " is"
.B RPC_ANYFD
and
.I netconf
is
.IR NULL ,
a
.BR RPC_UNKNOWNPROTO
error is set. If
.I fildes
is unbound, then it will attempt to bind the
descriptor. The user may specify the size of the buffers with the parameters
.I sendsz
and
.IR recvsz ;
values of
.B 0
choose suitable defaults.
Depending upon the type of the transport (connection-oriented or
connectionless),
.B clnt_tli_create()
calls appropriate client creation
routines. This routine returns
.I NULL
if it fails. The
.B clnt_pcreateerror()
routine can be used to print the reason for
failure. The remote
.B rpcbind
service (see
.BR rpcbind (1M))
is not
consulted for the address of the remote service.
.RE

.sp
.ne 2
.mk
.na
.B clnt_tp_create()
.ad
.sp .6
.RS 4n
Like
.B clnt_create()
except
.B clnt_tp_create()
tries only one
transport specified through
.IR netconf .
.sp
.B clnt_tp_create()
creates a client handle for the program
.IR prognum ,
the version
.IR versnum ,
and for the transport specified by
.IR netconf .
Default options are set, which can be changed using
.B clnt_control()
calls. The remote
.B rpcbind
service on the host
.I host
is consulted for the address of the remote service. This routine
returns
.I NULL
if it fails. The
.B clnt_pcreateerror()
routine can be
used to print the reason for failure.
.RE

.sp
.ne 2
.mk
.na
.B clnt_tp_create_timed()
.ad
.sp .6
.RS 4n
Like
.B clnt_tp_create()
except
.B clnt_tp_create_timed()
has the
extra parameter
.I timeout
which specifies the maximum time allowed for
the creation attempt to succeed. In all other respects, the
.B clnt_tp_create_timed()
call behaves exactly like the
.B clnt_tp_create()
call.
.RE

.sp
.ne 2
.mk
.na
.B clnt_vc_create()
.ad
.sp .6
.RS 4n
This routine creates an
.B RPC
client for the remote program
.I prognum
and version
.IR versnum ;
the client uses a
connection-oriented transport. The remote program is located at address
.IR svcaddr .
The parameter
.I fildes
is an open and bound file
descriptor. The user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.IR recvsz ;
values of
.B 0
choose
suitable defaults. This routine returns
.I NULL
if it fails.
.sp
The address
.I svcaddr
should not be
.I NULL
and should point to the
actual address of the remote program.
.B clnt_vc_create()
does not
consult the remote
.B rpcbind
service for this information.
.RE

.sp
.ne 2
.mk
.na
.B rpc_createerr()
.ad
.sp .6
.RS 4n
A global variable whose value is set by any
.B RPC
client handle
creation routine that fails.  It is used by the routine
.B clnt_pcreateerror()
to print the reason for the failure.
.sp
In multithreaded applications,
.B rpc_createerr
becomes a macro which
enables each thread to have its own
.BR rpc_createerr .
.RE

.sp
.ne 2
.mk
.na
.B clnt_door_create()
.ad
.sp .6
.RS 4n
This routine creates an RPC client handle over doors for the given program
.I prognum
and version
.IR versnum .
Doors is a transport mechanism that
facilitates fast data transfer between processes on the same machine. The
user may set the size of the send buffer with the parameter
.IR sendsz .
If
.I sendsz
is 0, the corresponding default buffer size is 16 Kbyte. The
.B clnt_door_create()
routine returns
.I NULL
if it fails and sets a
value for
.BR rpc_createerr .
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
ArchitectureAll
_
AvailabilitySUNWcsl (32-bit)
_
SUNWcslx (64-bit)
_
Interface StabilityCommitted
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR rpcbind (1M),
.BR rpc (3NSL),
.BR rpc_clnt_auth (3NSL),
.BR rpc_clnt_calls (3NSL),
.BR rpc_svc_create (3NSL),
.BR svc_raw_create (3NSL),
.BR threads (5),
.BR attributes (5)
