'\" te
.\" Copyright 1989 AT&T
.\" Copyright (C) 2000, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH xdr_create 3NSL "26 Sep 2000" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
xdr_create, xdr_destroy, xdrmem_create, xdrrec_create, xdrstdio_create \-
library routines for external data representation stream creation
.SH SYNOPSIS
.LP
.nf
#include <rpc/xdr.h>

\fBvoid\fR \fBxdr_destroy\fR(\fBXDR *\fIxdrs\fR);
.fi

.LP
.nf
\fBvoid\fR \fBxdrmem_create\fR(\fBXDR *\fIxdrs\fR, \fBconst caddr_t\fR \fIaddr\fR, \fBconst uint_t\fR \fIsize\fR,
     \fBconst enum xdr_op\fR \fIop\fR);
.fi

.LP
.nf
\fBvoid\fR \fBxdrrec_create\fR(\fBXDR *\fIxdrs\fR, \fBconst uint_t\fR \fIsendsz\fR, \fBconst uint_t\fR \fIrecvsz\fR,
     \fBconst caddr_t\fR \fIhandle\fR, \fBconst int (*\fIreadit\fR)const void *\fIread_handle\fR,
     char *\fIbuf\fR, const int \fIlen\fR, \fBconst int (*\fIwriteit\fR)
     const void *\fIwrite_handle\fR, const char *\fIbuf\fR, const int \fIlen\fR);
.fi

.LP
.nf
\fBvoid\fR \fBxdrstdio_create\fR(\fBXDR *\fIxdrs\fR, \fBFILE *\fR
     \fIfile\fR, \fBconst enum xdr_op\fR \fIop\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B XDR
library routines allow C programmers to describe arbitrary
data structures in a machine-independent fashion. Protocols such as remote
procedure calls (RPC) use these routines to describe the format of the
data.
.sp
.LP
These routines deal with the creation of
.B XDR
streams, which must be
created before any data can be translated into
.B XDR
format.
.SS "Routines"
.sp
.LP
See
.BR rpc (3NSL)
for the definition of the
.B "XDR CLIENT"
and
.B SVCXPRT
data structures. Any buffers passed to the
.B XDR
routines
must be properly aligned. Use
.BR malloc (3C)
to allocate these buffers or
be sure that the buffer address is divisible evenly by four.
.sp
.ne 2
.mk
.na
.B xdr_destroy()
.ad
.RS 21n
.rt
A macro that invokes the destroy routine associated with the
.BR XDR
stream,
.IR xdrs .
Private data structures associated with the stream are
freed. Using
.I xdrs
after
.B xdr_destroy()
is invoked is undefined.
.RE

.sp
.ne 2
.mk
.na
.B xdrmem_create()
.ad
.RS 21n
.rt
This routine initializes the
.B XDR
stream object pointed to by
.IR xdrs .
The stream's data is written to or read from a chunk of memory at
location
.I addr
whose length is no less than
.I size
bytes long.  The
.I op
determines the direction of the
.B XDR
stream. The value of
.I op
can be either
.BR XDR_ENCODE ,
.BR XDR_DECODE ,
or
.BR XDR_FREE .
.RE

.sp
.ne 2
.mk
.na
.B xdrrec_create()
.ad
.RS 21n
.rt
This routine initializes the read-oriented
.B XDR
stream object pointed
to by
.IR xdrs .
The stream's data is written to a buffer of size
.IR sendsz .
A value of
.B 0
indicates the system should use a suitable
default. The stream's data is read from a buffer of size
.IR recvsz .
It too
can be set to a suitable default by passing a
.B 0
value.  When a stream's
output buffer is full,
.I writeit
is called.  Similarly, when a stream's
input buffer is empty,
.B xdrrec_create()
calls
.IR readit .
The behavior
of these two routines is similar to the system calls
.B read()
and
.BR write() ,
except that an appropriate handle,
.I read_handle
or
.IR write_handle ,
is passed to the former routines as the first parameter
instead of a file descriptor. See
.BR read (2)
and
.BR write (2),
respectively. The
.B XDR
stream's
.I op
field must be set by the
caller.
.sp
This
.B XDR
stream implements an intermediate record stream. Therefore,
additional bytes in the stream are provided for record boundary
information.
.RE

.sp
.ne 2
.mk
.na
.B xdrstdio_create()
.ad
.RS 21n
.rt
This routine initializes the
.B XDR
stream object pointed to by
.IR xdrs .
The
.B XDR
stream data is written to or read from the standard
.B I/O
stream
.BR file .
The parameter
.I op
determines the direction
of the
.B XDR
stream. The value of
.I op
can be either
.BR XDR_ENCODE ,
.BR XDR_DECODE ,
or
.BR XDR_FREE .
.sp
The destroy routine associated with
.B XDR
streams calls
.B fflush()
on the
.I file
stream, but never
.BR fclose() .
See
.BR fclose (3C).
.RE

.sp
.LP
A failure of any of these functions can be detected by first initializing
the
.I x_ops
field in the
.B XDR
structure
.RI ( xdrs ->
.IR x_ops )
to
.I NULL
before calling the
.B xdr*_create()
function.  If the
.I x_ops
field is still
.I NULL,
after the return from the
.B xdr*_create()
function, the call has failed.  If the
.I x_ops
field
contains some other value, assume that the call has succeeded.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR read (2),
.BR write (2),
.BR fclose (3C),
.BR malloc (3C),
.BR rpc (3NSL),
.BR xdr_admin (3NSL),
.BR xdr_complex (3NSL),
.BR xdr_simple (3NSL),
.BR attributes (5)
