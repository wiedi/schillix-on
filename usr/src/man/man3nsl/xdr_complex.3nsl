'\" te
.\" Copyright 1989 AT&T  Copyright (c) 1997, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH xdr_complex 3NSL "30 Dec 1996" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
xdr_complex, xdr_array, xdr_bytes, xdr_opaque, xdr_pointer, xdr_reference,
xdr_string, xdr_union, xdr_vector, xdr_wrapstring \- library routines for
external data representation
.SH DESCRIPTION
.sp
.LP
.B XDR
library routines allow C programmers to describe complex data
structures in a machine-independent fashion. Protocols such as remote
procedure calls (RPC) use these routines to describe the format of the data.
These routines are the
.B XDR
library routines for complex data
structures. They require the creation of
.B XDR
streams. See
.BR xdr_create (3NSL).
.SS "Routines"
.sp
.LP
See
.BR rpc (3NSL)
for the definition of the
.B XDR
data structure.
Note that any buffers passed to the
.B XDR
routines must be properly
aligned. It is suggested either that
.B malloc()
be used to allocate
these buffers, or that the programmer insure  that the buffer address is
divisible evenly by four.
.sp
.LP
.B #include <rpc/xdr.h>
.sp
.ne 2
.mk
.na
\fBbool_t xdr_array(XDR *\fIxdrs\fR, caddr_t *\fIarrp\fR, uint_t
.RI * sizep ,
const uint_t
.IR maxsize ,
const uint_t
.IR elsize ,
const
xdrproc_t
.IR elproc );\fR
.ad
.sp .6
.RS 4n
.B xdr_array()
translates between variable-length arrays and their
corresponding external representations. The parameter
.I arrp
is the
address of the pointer to the array, while
.I sizep
is the address of the
element count of the array; this element count cannot exceed
.IR maxsize .
The parameter
.I elsize
is the size of each of the array's elements, and
.I elproc
is an
.B XDR
routine that translates between the array
elements' C form and their external representation. If
.BI * aarp
is
.I NULL
when decoding,
.B " xdr_array()"
allocates memory and
.BI * aarp
points to it. This routine returns \fBTRUE\fR if it
succeeds,
.B FALSE
otherwise.
.RE

.sp
.ne 2
.mk
.na
\fBbool_t xdr_bytes(XDR *\fIxdrs\fR, char **\fIsp\fR, uint_t *\fIsizep\fR,
const uint_t
.IR maxsize );\fR
.ad
.sp .6
.RS 4n
.B xdr_bytes()
translates between counted byte strings and their
external representations. The parameter
.I sp
is the address of the
string pointer. The length of the string is located at address
.IR sizep ;
strings cannot be longer than
.IR maxsize .
If \fB*\fIsp\fR is
.I NULL
when decoding,
.B xdr_bytes()
allocates memory and
.BI * sp
points to it. This routine returns \fBTRUE\fR if it
succeeds,
.B FALSE
otherwise.
.RE

.sp
.ne 2
.mk
.na
\fBbool_t xdr_opaque(XDR *\fIxdrs\fR, caddr_t
.IR cp ,
const uint_t
.IR cnt );
.ad
.sp .6
.RS 4n
.B xdr_opaque()
translates between fixed size opaque data and its
external representation. The parameter
.B cp
is the address of the opaque
object, and
.I cnt
.RB "is its size in bytes. This routine returns" " TRUE"
if it succeeds,
.B FALSE
otherwise.
.RE

.sp
.ne 2
.mk
.na
\fBbool_t xdr_pointer(XDR *\fIxdrs\fR, char **objpp, uint_t
.IR objsize ,
const xdrproc_t
.IR xdrobj );\fR
.ad
.sp .6
.RS 4n
Like
.B xdr_reference()
except that it serializes null pointers, whereas
.B xdr_reference()
does not.  Thus,
.B xdr_pointer()
can represent
recursive data structures, such as binary trees or linked lists. If
.BI * objpp
is  \fINULL\fR when decoding, \fBxdr_pointer()\fR
allocates memory and
.BI * objpp
points to it.
.RE

.sp
.ne 2
.mk
.na
\fBbool_t xdr_reference(XDR *\fIxdrs\fR, caddr_t *\fIpp\fR, uint_t
.IR size ,
const xdrproc_t \fIproc\fR);\fR
.ad
.sp .6
.RS 4n
.B xdr_reference()
provides pointer chasing within structures.  The
parameter
.I pp
is the address of the pointer;
.B size
is the
.B sizeof
the structure that
.I *pp
points to; and
.B proc
is an
.B XDR
procedure that translates the structure between its C form and its
external representation. If \fB*\fIpp\fR is 
.I NULL
when decoding,
\fBxdr_reference()\fR allocates memory and \fB*\fIpp\fR points to it.
This routine returns
.B 1
if it succeeds,
.B 0
otherwise.
.sp
Warning: this routine does not understand null pointers. Use
.B xdr_pointer()
instead.
.RE

.sp
.ne 2
.mk
.na
\fBbool_t xdr_string(XDR *\fIxdrs\fR, char **\fIsp\fR, const uint_t
.IR maxsize );
.ad
.sp .6
.RS 4n
.B xdr_string()
translates between C strings and their corresponding
external representations. Strings cannot be longer than
.IR maxsize .
Note:
\fIsp\fR is the address of the string's pointer. If \fB*\fIsp\fR is
.I NULL
when decoding,
.B xdr_string()
allocates memory and
.BI * sp
points to it. This routine returns \fBTRUE\fR if it
succeeds,
.B FALSE
otherwise. Note:
.B xdr_string()
can be used to
send an empty string ("\|"), but not a null string.
.RE

.sp
.ne 2
.mk
.na
\fBbool_t xdr_union(XDR *\fIxdrs\fR, enum_t *\fIdscmp\fR, char *\fIunp\fR,
const struct xdr_discrim *\fIchoices\fR, const xdrproc_t
(*\fIdefaultarm\fR));\fR
.ad
.sp .6
.RS 4n
.B xdr_union()
translates between a discriminated C
.B union
and its
corresponding external representation. It first translates the discriminant
of the union located at
.IR dscmp .
This discriminant is always an
.BR enum_t .
Next the union located at
.I unp
is translated.  The
parameter
.I choices
is a pointer to an array of
.BR xdr_discrim
structures. Each structure contains an ordered pair of [\fIvalue, proc\fR].
If the union's discriminant is equal to the associated
.IR value ,
then the
.B proc
is called to translate the union. The end of the
.B xdr_discrim
structure array is denoted by a routine of value
.IR NULL .
If the discriminant is not found in the
.I choices
array,
then the
.I defaultarm
procedure is called (if it is not
.IR NULL ).
It
returns
.B TRUE
if it succeeds,
.B FALSE
otherwise.
.RE

.sp
.ne 2
.mk
.na
\fBbool_t xdr_vector(XDR *\fIxdrs\fR, char *\fIarrp\fR, const uint_t
.IR size ,
const uint_t \fIelsize\fR, const xdrproc_t \fIelproc\fR);\fR
.ad
.sp .6
.RS 4n
.B xdr_vector()
translates between fixed-length arrays and their
corresponding external representations. The parameter
.I arrp
is the
address of the pointer to the array, while
.B size
is the element count
of the array. The parameter
.I elsize
is the
.B sizeof
each of the
array's elements, and
.I elproc
is an
.B XDR
routine that translates
between the array elements' C form and their external representation. This
routine returns
.B TRUE
if it succeeds,
.B FALSE
otherwise.
.RE

.sp
.ne 2
.mk
.na
\fBbool_t xdr_wrapstring(XDR *\fIxdrs\fR, char **\fIsp\fR);\fR
.ad
.sp .6
.RS 4n
A routine that calls \fBxdr_string(\fIxdrs\fB,\fR \fIsp\fB, \fImaxuint\fB);\fR where \fImaxuint\fR is the maximum value of an
unsigned integer.
.sp
Many routines, such as
.BR xdr_array() ,
.BR xdr_pointer() ,
and
.B xdr_vector()
take a function pointer of type
.BR xdrproc_t() ,
which
takes two arguments.
.BR xdr_string() ,
one of the most frequently used
routines, requires three arguments, while
.B xdr_wrapstring()
only
requires two. For these routines,
.B xdr_wrapstring()
is desirable. This
routine returns
.B TRUE
if it succeeds,
.B FALSE
otherwise.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR malloc (3C),
.BR rpc (3NSL),
.BR xdr_admin (3NSL),
.BR xdr_create (3NSL),
.BR xdr_simple (3NSL),
.BR attributes (5)
