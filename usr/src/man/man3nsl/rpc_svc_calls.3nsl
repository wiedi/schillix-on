'\" te
.\" Copyright 1989 AT&T
.\" Copyright (C) 2004 Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH rpc_svc_calls 3NSL "26 Jan 2004" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
rpc_svc_calls, svc_dg_enablecache, svc_done, svc_exit, svc_fdset,
svc_freeargs, svc_getargs, svc_getreq_common, svc_getreq_poll,
svc_getreqset, svc_getrpccaller, svc_max_pollfd, svc_pollfd, svc_run,
svc_sendreply, svc_getcallerucred, svc_fd_negotiate_ucred \- library
routines for RPC servers
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lnsl\fR [ \fIlibrary\fR.\|.\|.]
#include <rpc/rpc.h>

\fBint\fR \fBsvc_dg_enablecache\fR(\fBSVCXPRT *\fIxprt\fR, \fBconst uint_t\fR \fIcache_size\fR);
.fi

.LP
.nf
\fBint\fR \fBsvc_done\fR(\fBSVCXPRT *\fIxprt\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsvc_exit\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsvc_fd_negotiate_ucred\fR(\fBint\fR \fIfd\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBsvc_freeargs\fR(\fBconst SVCXPRT *\fIxprt\fR, \fBconst txdrproc_t\fR \fIinproc\fR,
     \fBcaddr_t\fR \fIin\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBsvc_getargs\fR(\fBconst SVCXPRT *\fIxprt\fR, \fBconst xdrproc_t\fR \fIinproc\fR,
     \fBcaddr_t\fR \fIin\fR);
.fi

.LP
.nf
\fBint\fR \fBsvc_getcallerucred\fR(\fBconst SVCXPRT *\fIxprt\fR, \fBucred_t **\fIucred\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsvc_getreq_common\fR(\fBconst int\fR \fIfd\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsvc_getreqset\fR(\fBfd_set *\fIrdfds\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsvc_getreq_poll\fR(\fBstruct pollfd *\fIpfdp\fR, \fBconst int\fR \fIpollretval\fR);
.fi

.LP
.nf
\fBstruct netbuf *\fBsvc_getrpccaller\fR(\fBconst SVCXPRT *\fIxprt\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsvc_run\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBsvc_sendreply\fR(\fBconst SVCXPRT *\fIxprt\fR, \fBconst xdrproc_t\fR \fIoutproc\fR,
     \fBcaddr_t\fR \fIout\fRint svc_max_pollfd;
fd_set svc_fdset;
pollfd_t *svc_pollfd;
.fi

.SH DESCRIPTION
.sp
.LP
These routines are part of the
.B RPC
library which allows C language
programs to make procedure calls on other machines across the network.
.sp
.LP
These routines are associated with the server side of the
.BR RPC
mechanism. Some of them are called by the server side dispatch function.
Others, such as
.BR svc_run() ,
are called when the server is initiated.
.sp
.LP
Because the service transport handle
.B SVCXPRT
contains a single data
area for decoding arguments and encoding results, the structure cannot
freely be shared between threads that call functions to decode arguments and
encode results. When a server is operating in the Automatic or User MT
modes, however, a copy of this structure is passed to the service dispatch
procedure in order to enable concurrent request processing. Under these
circumstances, some routines which would otherwise be Unsafe, become Safe.
These are marked as such. Also marked are routines that are Unsafe for
multithreaded applications, and are not to be used by such applications. See
.BR rpc (3NSL)
for the definition of the
.B SVCXPRT
data structure.
.sp
.LP
The
.B svc_dg_enablecache()
function allocates a duplicate request cache
for the service endpoint
.IR xprt ,
large enough to hold
.IR cache_size
entries. Once enabled, there is no way to disable caching. The function
returns
.B 1
if space necessary for a cache of the given size was
successfully allocated, and
.B 0
otherwise. This function is Safe in
multithreaded applications.
.sp
.LP
The
.B svc_done()
function frees resources allocated to service a client
request directed to the service endpoint
.IR xprt .
This call pertains only
to servers executing in the User MT mode. In the User MT mode, service
procedures must invoke this call before returning, either after a client
request has been serviced, or after an error or abnormal condition that
prevents a reply from being sent. After
.BR svc_done ()
is invoked, the
service endpoint
.I xprt
should not be referenced by the service
procedure. Server multithreading modes and parameters can be set using the
.BR rpc_control ()
call. This function is Safe in multithreaded
applications. It will have no effect if invoked in modes other than the User
MT mode.
.sp
.LP
The
.B svc_exit()
function when called by any of the RPC server
procedures or otherwise, destroys all services registered by the server and
causes
.B svc_run()
to return. If RPC server activity is to be resumed,
services must be reregistered with the RPC library either through one of the
.BR rpc_svc_create (3NSL)
functions, or using
.BR xprt_register (3NSL).
The
.B svc_exit()
function has global scope and ends all RPC server
activity.
.sp
.LP
The
.B svc_freeargs()
function macro frees any data allocated by the
.B RPC/XDR
system when it decoded the arguments to a service procedure
using
.BR svc_getargs() .
This routine returns
.B TRUE
if the results
were successfully freed, and
.B FALSE
otherwise. This function macro is
Safe in multithreaded applications utilizing the Automatic or User MT
modes.
.sp
.LP
The
.B svc_getargs()
function macro decodes the arguments of an
.B RPC
request associated with the
.B RPC
service transport handle
.IR xprt .
The parameter
.I in
is the address where the arguments will
be placed;
.I inproc
is the
.B XDR
routine used to decode the
arguments. This routine returns
.B TRUE
if decoding succeeds, and
.B FALSE
otherwise. This function macro is Safe in multithreaded
applications utilizing the Automatic or User MT modes.
.sp
.LP
The
.B svc_getreq_common()
function is called to handle a request on a
file descriptor.
.sp
.LP
The
.B svc_getreq_poll()
function is only of interest if a service
implementor does not call
.BR svc_run() ,
but instead implements custom
asynchronous event processing. It is called when
.BR poll (2)
has
determined that an RPC request has arrived on some RPC file descriptors;
.I pollretval
is the return value from
.BR poll (2)
and
.I pfdp
is
the array of
.I pollfd
structures on which the
.BR poll (2)
was done. It
is assumed to be an array large enough to contain the maximal number of
descriptors allowed. The
.B svc_getreq_poll()
function macro is Unsafe in
multithreaded applications.
.sp
.LP
The
.B svc_getreqset()
function is only of interest if a service
implementor does not call
.BR svc_run() ,
but instead implements custom
asynchronous event processing. It is called when
.BR select (3C)
has
determined that an
.B RPC
request has arrived on some
.B RPC
file
descriptors;
.I rdfds
is the resultant read file descriptor bit mask. The
routine returns when all file descriptors associated with the value of
.I rdfds
have been serviced. This function macro is Unsafe in
multithreaded applications.
.sp
.LP
The
.B svc_getrpccaller()
function is the approved way of getting the
network address of the caller of a procedure associated with the
.BR RPC
service transport handle
.IR xprt .
This function macro is Safe in
multithreaded applications.
.sp
.LP
The
.B svc_run()
function never returns. In single-threaded mode, the
function waits for
.B RPC
requests to arrive. When an RPC request
arrives, the
.B svc_run()
function calls the appropriate service
procedure. This procedure is usually waiting for the
.BR poll (2)
library
call to return.
.sp
.LP
Applications that execute in the Automatic or the User MT mode should
invoke the
.B svc_run()
function exactly once. In the Automatic MT mode,
the
.B svc_run()
function creates threads to service client requests. In
the User MT mode, the function provides a framework for service developers
to create and manage their own threads for servicing client requests.
.sp
.LP
The
.B svc_fdset
global variable reflects the
.B RPC
server's read
file descriptor bit mask. This is only of interest if service implementors
do not call
.BR svc_run() ,
but rather do their own asynchronous event
processing. This variable is read-only may change after calls to
.B svc_getreqset()
or after any creation routine. Do not pass its address
to \fBselect\fR(3C). Instead, pass the address of a copy. multithreaded
applications executing in either the Automatic MT mode or the user MT mode
should never read this variable. They should use auxiliary threads to do
asynchronous event processing. The
.B svc_fdset
variable is limited to
1024 file descriptors and is considered obsolete. Use of
.B svc_pollfd
is
recommended instead.
.sp
.LP
The \fBsvc_pollfd\fR global variable points to an array of \fBpollfd_t\fR
structures that reflect the
.B RPC
server's read file descriptor array.
This is only of interest if service service implementors do not call
.B svc_run()
but rather do their own asynchronous event processing. This
variable is read-only, and it may change after calls to
.B svc_getreg_poll()
or any creation routines. Do no pass its address to
.BR poll (2).
Instead, pass the address of a copy. By default,
.B svc_pollfd
is limited to 1024 entries. Use
.BR rpc_control (3NSL)
to
remove this limitation. multithreaded applications executing in either the
Automatic MT mode or the user MT mode should never be read this variable.
They should use auxiliary threads to do asynchronous event processing.
.sp
.LP
The
.B svc_max_pollfd
global variable contains the maximum length of the
.B svc_pollfd
array. This variable is read-only, and it may change after
calls to
.B svc_getreg_poll()
or any creation routines.
.sp
.LP
The
.B svc_sendreply()
function is called by an
.B RPC
service
dispatch routine to send the results of a remote procedure call. The
.I xprt
parameter is the transport handle of the request. The
.I outproc
parameter is the
.B XDR
routine used to encode the results.
The
.I out
parameter is the address of the results. This routine returns
.B TRUE
if it succeeds,
.B FALSE
otherwise. The
.B svc_sendreply()
function macro is Safe in multithreaded applications that use the Automatic
or the User MT mode.
.sp
.LP
The
.B svc_fd_negotiate_ucred()
function is called by an RPC server to
inform the underlying transport that the function wishes to receive
.B ucreds
for local calls, including those over IP transports.
.sp
.LP
The
.B svc_getcallerucred()
function attempts to retrieve the
.B ucred_t
associated with the caller. The function returns\fR 0 when
successful and
.B -1
when not.
.sp
.LP
When successful, the
.B svc_getcallerucred()
function stores the pointer
to a freshly allocated
.B ucred_t
in the memory location pointed to by
the
.I ucred
argument if that memory location contains the null pointer.
If the memory location is non-null, the function reuses the existing
.BR ucred_t .
When
.I ucred
is no longer needed, a credential allocated
by
.B svc_getcallerucred()
should be freed with \fBucred_free\fR(3C).
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of attribute types and values.
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelSee below.
.TE

.sp
.LP
The
.BR svc_fd_negotiate_ucred() ,
.BR svc_dg_enablecache() ,
.BR svc_getrpccaller() ,
and
.B svc_getcallerucred()
functions are Safe
in multithreaded applications. The
.BR svc_freeargs() ,
.BR svc_getargs() ,
and
.B svc_sendreply()
functions are Safe in
multithreaded applications that use the Automatic or the User MT mode. The
.BR svc_getreq_common() ,
.BR svc_getreqset() ,
and
.B svc_getreq_poll()
functions are Unsafe in multithreaded applications
and should be called only from the main thread.
.SH SEE ALSO
.sp
.LP
.BR rpcgen (1),
.BR poll (2),
.BR getpeerucred (3C),
.BR rpc (3NSL),
.BR rpc_control (3NSL),
.BR rpc_svc_create (3NSL),
.BR rpc_svc_err (3NSL),
.BR rpc_svc_reg (3NSL),
.BR select (3C),
.BR ucred_free (3C),
.BR xprt_register (3NSL),
.BR attributes (5)
