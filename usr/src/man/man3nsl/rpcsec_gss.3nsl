'\" te
.\" Copyright (C) 2001, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH rpcsec_gss 3NSL "29 Jun 2001" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
rpcsec_gss \- security flavor incorporating GSS-API protections
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|.  -lnsl [ \fIlibrary\fR.\|.\|. ]
#include <rpc/rpcsec_gss.h>
.fi

.SH DESCRIPTION
.sp
.LP
.B
RPCSEC_GSS \c
is a security flavor which sits "on top" of the
.B GSS-API
(Generic Security Service API) for network transmissions.
Applications using
.B RPCSEC_GSS
can take advantage of
.BR GSS-API
security features; moreover, they can use any security mechanism (such as
.RB "RSA public key or Kerberos) that works with  the" " GSS-API."
.sp
.LP
The
.B GSS-API
offers two security services beyond the traditional
authentication services
.B "(AUTH_DH, AUTH_SYS,"
and
.B AUTH_KERB):
integrity and privacy.  With integrity, the system uses
cryptographic checksumming to ensure the authenticity of a message
(authenticity of originator, recipient, and data); privacy provides
.RB "additional security by encrypting data.  Applications using" " RPCSEC_GSS"
specify which service they wish to use. Type of security service is
mechanism-independent.
.sp
.LP
Before exchanging data with a peer, an application must establish a context
for the exchange.
.B RPCSEC_GSS
provides a single function for this
purpose,
.BR rpc_gss_seccreate() ,
which allows the application to specify
the security mechanism, Quality of Protection (QOP), and type of service at
context creation. (The QOP parameter sets the cryptographic algorithms to be
used with integrity or privacy, and is mechanism-dependent.) Once a context
is established, applications can reset the QOP and type of service for each
data unit exchanged, if desired.
.sp
.LP
Valid mechanisms and QOPs may be obtained from configuration files or from
the name service.  Each mechanism has a default QOP.
.sp
.LP
Contexts are destroyed with the usual RPC
.B auth_destroy()
call.
.SS "Data Structures"
.sp
.LP
Some of the data structures used by the
.B RPCSEC_GSS
package are shown
below.
.SS "\fBrpc_gss_service_t\fR"
.sp
.LP
This enum defines the types of security services the context may have.
.B rpc_gss_seccreate()
takes this as one argument when setting the
service type for a session.
.sp
.in +2
.nf
typedef enum {
   rpc_gss_svc_default = 0,
   rpc_gss_svc_none = 1,
   rpc_gss_svc_integrity = 2,
   rpc_gss_svc_privacy = 3
} rpc_gss_service_t ;
.fi
.in -2

.SS "\fBrpc_gss_options_req_t\fR"
.sp
.LP
Structure containing options passed directly through to the
.BR GSS-API.
.B rpc_gss_seccreate()
takes this as an argument when creating a context.

.sp
.in +2
.nf
typedef struct {
   int  req_flags;	        /*GSS request bits */
   int  time_req;           /*requested credential lifetime */
   gss_cred_id_t  my_cred;  /*GSS credential struct*/
   gss_channel_bindings_t;
   input_channel_bindings;
} rpc_gss_options_req_t ;
.fi
.in -2

.SS "\fBrpc_gss_OID\fR"
.sp
.LP
This data type is used by in-kernel RPC routines, and thus is mentioned
here for informational purposes only.
.sp
.in +2
.nf
typedef struct {
   u_int	length;			
   void	*elements		
} *rpc_gss_OID;
.fi
.in -2

.SS "\fBrpc_gss_options_ret_t\fR"
.sp
.LP
Structure containing
.B GSS-API
options returned to the calling
function,
.BR rpc_gss_seccreate() .
.B MAX_GSS_MECH
is defined as 128.

.sp
.in +2
.nf
typedef struct {
   int           major_status;
   int           minor_status;
   u_int         rpcsec_version                  /*vers. of RPCSEC_GSS */
   int           ret_flags
   int           time_req
   gss_ctx_id_t  gss_context;
   char          actual_mechanism[MAX_GSS_MECH]; /*mechanism used*/
} rpc_gss_options_ret_t;
.fi
.in -2

.SS "\fBrpc_gss_principal_t\fR"
.sp
.LP
The (mechanism-dependent, opaque) client principal type.  Used as an
argument to the
.B rpc_gss_get_principal_name()
function, and in the
.B gsscred
table.  Also referenced by the
.B rpc_gss_rawcred_t
structure for raw credentials (see below).
.sp
.in +2
.nf
typedef struct {
   int len;			
   char name[1];	
} *rpc_gss_principal_t;
.fi
.in -2

.SS "\fBrpc_gss_rawcred_t\fR"
.sp
.LP
Structure for raw credentials.  Used by
.B rpc_gss_getcred()
and
.BR rpc_gss_set_callback() .
.sp
.in +2
.nf
typedef struct {
   u_int                version;          /*RPC version # */
   char                 *mechanism;       /*security mechanism*/
   char                 *qop;             /*Quality of Protection*/
   rpc_gss_principal_t  client_principal; /*client name*/
   char                 *svc_principal;   /*server name*/
   rpc_gss_service_t    service;          /*service (integrity, etc.)*/
} rpc_gss_rawcred_t;
.fi
.in -2

.SS "\fBrpc_gss_ucred_t\fR"
.sp
.LP
Structure for UNIX credentials.  Used by
.B rpc_gss_getcred()
as an
alternative to
.BR rpc_gss_rawcred_t .
.sp
.in +2
.nf
typedef struct {
   uid_t  uid;      /*user ID*/
   gid_t  gid;      /*group ID*/
   short  gidlen;		
   git_t  *gidlist; /*list of groups*/
} rpc_gss_ucred_t;
.fi
.in -2

.SS "\fBrpc_gss_callback_t\fR"
.sp
.LP
Callback structure used by
.BR rpc_gss_set_callback() .
.sp
.in +2
.nf
typedef struct {
   u_int   program;       /*RPC program #*/
   u_int   version;       /*RPC version #*/
   bool_t  (*callback)(); /*user-defined callback routine*/
} rpc_gss_callback_t;
.fi
.in -2

.SS "\fBrpc_gss_lock_t\fR"
.sp
.LP
Structure used by a callback routine to enforce a particular QOP and
service for a session.  The
.B locked
field is normally set to
.B FALSE;
the server sets it to
.B TRUE
in order to lock the session.
(A locked context will reject all requests having different QOP and service
values than those found in the
.B raw_cred
structure.)  For more
information, see the
.BR rpc_gss_set_callback (3NSL)
man page.
.sp
.in +2
.nf
typedef struct {
   bool_t                 locked;
   rpc_gss_rawcred_t      *raw_cred;
} rpc_gss_lock_t;
.fi
.in -2

.SS "\fBrpc_gss_error_t\fR"
.sp
.LP
Structure used by
.B rpc_gss_get_error()
to fetch an error code when a
.B RPCSEC_GSS
routine fails.
.sp
.in +2
.nf
typedef struct {
   int  rpc_gss_error;
   int  system_error;    /*same as errno*/
} rpc_gss_error_t;
.fi
.in -2

.SS "Index to Routines"
.sp
.LP
The following lists
.B RPCSEC_GSS
routines and the manual reference
pages on which they are described.  An (S) indicates it is a server-side
function:
.sp
.ne 2
.mk
.na
.B Routine
(Manual Page)\fR
.ad
.sp .6
.RS 4n
.B Description
.RE

.sp
.ne 2
.mk
.na
.BR rpc_gss_seccreate (3NSL)
.ad
.sp .6
.RS 4n
Create a secure
.B RPCSEC_GSS
context
.RE

.sp
.ne 2
.mk
.na
.BR rpc_gss_set_defaults (3NSL)
.ad
.sp .6
.RS 4n
Switch service, QOP for a session
.RE

.sp
.ne 2
.mk
.na
.BR rpc_gss_max_data_length (3NSL)
.ad
.sp .6
.RS 4n
Get maximum data length allowed by transport
.RE

.sp
.ne 2
.mk
.na
.BR rpc_gss_set_svc_name (3NSL)
.ad
.sp .6
.RS 4n
Set server's principal name (S)
.RE

.sp
.ne 2
.mk
.na
.BR rpc_gss_getcred (3NSL)
.ad
.sp .6
.RS 4n
Get credentials of caller (S)
.RE

.sp
.ne 2
.mk
.na
.BR rpc_gss_set_callback (3NSL)
.ad
.sp .6
.RS 4n
Specify callback to see context use (S)
.RE

.sp
.ne 2
.mk
.na
.BR rpc_gss_get_principal_name (3NSL)
.ad
.sp .6
.RS 4n
Get client principal name (S)
.RE

.sp
.ne 2
.mk
.na
.BR rpc_gss_svc_max_data_length (3NSL)
.ad
.sp .6
.RS 4n
Get maximum data length allowed by transport (S)
.RE

.sp
.ne 2
.mk
.na
.BR rpc_gss_get_error (3NSL)
.ad
.sp .6
.RS 4n
Get error number
.RE

.sp
.ne 2
.mk
.na
.BR rpc_gss_get_mechanisms (3NSL)
.ad
.sp .6
.RS 4n
Get valid mechanism strings
.RE

.sp
.ne 2
.mk
.na
.BR rpc_gss_get_mech_info (3NSL)
.ad
.sp .6
.RS 4n
Get valid QOP strings, current service
.RE

.sp
.ne 2
.mk
.na
.BR rpc_gss_get_versions (3NSL)
.ad
.sp .6
.RS 4n
Get supported
.B RPCSEC_GSS
versions
.RE

.sp
.ne 2
.mk
.na
.BR rpc_gss_is_installed (3NSL)
.ad
.sp .6
.RS 4n
Checks if a mechanism is installed
.RE

.sp
.ne 2
.mk
.na
.BR rpc_gss_mech_to_oid (3NSL)
.ad
.sp .6
.RS 4n
Maps ASCII mechanism to OID representation
.RE

.sp
.ne 2
.mk
.na
.BR rpc_gss_qop_to_num (3NSL)
.ad
.sp .6
.RS 4n
Maps ASCII QOP, mechansim to u_int number
.RE

.SS "Utilities"
.sp
.LP
The
.B gsscred
utility manages the
.B gsscred
table, which contains
mappings of principal names between network and local credentials.  See
.BR gsscred (1M).
.SH FILES
.sp
.ne 2
.mk
.na
.B /etc/gss/mech
.ad
.RS 18n
.rt
List of installed mechanisms
.RE

.sp
.ne 2
.mk
.na
.B /etc/gss/qop
.ad
.RS 18n
.rt
List of valid QOPs
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
_
AvailabilitySUNWrsg (32-bit)
_
SUNWrsgx (64-bit)
.TE

.SH SEE ALSO
.sp
.LP
.BR gsscred (1M),
.BR rpc (3NSL),
.BR rpc_clnt_auth (3NSL),
.BR xdr (3NSL),
.BR attributes (5),
.BR environ (5)
.sp
.LP
\fIONC+ Developer\&'s Guide\fR
.sp
.LP
Linn, J. \fIRFC 2743, Generic Security Service Application Program Interface Version 2, Update 1\fR. Network Working Group. January 2000.
