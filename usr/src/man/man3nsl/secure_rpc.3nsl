'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH secure_rpc 3NSL "19 Feb 2004" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
secure_rpc, authdes_getucred, authdes_seccreate, getnetname, host2netname,
key_decryptsession, key_encryptsession, key_gendes, key_setsecret,
key_secretkey_is_set, netname2host, netname2user, user2netname \- library
routines for secure remote procedure calls
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lnsl\fR [ \fIlibrary\fR.\|.\|.]
#include <rpc/rpc.h>
#include <sys/types.h>
\fBint\fR \fBauthdes_getucred\fR(\fBconst struct authdes_cred *\fIadc\fR, \fBuid_t *\fIuidp\fR,
     \fBgid_t *\fIgidp\fR, \fBshort *\fIgidlenp\fR, \fBgid_t *\fIgidlist\fR);
.fi

.LP
.nf
\fBAUTH *\fBauthdes_seccreate\fR(\fBconst char *\fIname\fR, \fBconst uint_t\fR \fIwindow\fR,
     \fBconst char *\fItimehost\fR, \fIckey\fR);
.fi

.LP
.nf
\fBint\fR \fBgetnetname\fR(\fBchar\fR \fIname\fR \fB[MAXNETNAMELEN+1]\fR);
.fi

.LP
.nf
\fBint\fR \fBhost2netname\fR(\fBchar\fR \fIname\fR \fB[MAXNETNAMELEN+1]\fR, \fBconst char *\fIhost\fR,
     \fBconst char *\fIdomain\fR);
.fi

.LP
.nf
\fBint\fR \fBkey_decryptsession\fR(\fBconst char *\fIremotename\fR, \fBdes_block *\fIdeskey\fR);
.fi

.LP
.nf
\fBint\fR \fBkey_encryptsession\fR(\fBconst char *\fIremotename\fR, \fBdes_block *\fIdeskey\fR);
.fi

.LP
.nf
\fBint\fR \fBkey_gendes\fR(\fBdes_block *\fIdeskey\fR);
.fi

.LP
.nf
\fBint\fR \fBkey_setsecret\fR(\fBconst char *\fIkey\fR);
.fi

.LP
.nf
\fBint\fR \fBkey_secretkey_is_set\fR(void)
.fi

.LP
.nf
\fBint\fR \fBnetname2host\fR(\fBconst char *\fIname\fR, \fBchar *\fIhost\fR, \fBconst int\fR \fIhostlen\fR);
.fi

.LP
.nf
\fBint\fR \fBnetname2user\fR(\fBconst char *\fIname\fR, \fBuid_t *\fIuidp\fR, \fBgid_t *\fIgidp\fR, \fBint *\fIgidlenp\fR,
     \fBgid_t *\fIgidlist\fR \fB[NGRPS]\fR);
.fi

.LP
.nf
\fBint\fR \fBuser2netname\fR(\fBchar\fR \fIname\fR \fB[MAXNETNAMELEN+1]\fR, \fBconst uid_t\fR \fIuid\fR,
     \fBconst char *\fIdomain\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B RPC
library functions allow C programs to make procedure calls on
other machines across the network.
.sp
.LP
.B RPC
supports various authentication flavors. Among them are:
.sp
.ne 2
.mk
.na
.B AUTH_NONE
.ad
.RS 13n
.rt
No authentication (none).
.RE

.sp
.ne 2
.mk
.na
.B AUTH_SYS
.ad
.RS 13n
.rt
Traditional
.B UNIX-style
authentication.
.RE

.sp
.ne 2
.mk
.na
.B AUTH_DES
.ad
.RS 13n
.rt
.B DES
encryption-based authentication.
.RE

.sp
.LP
The
.B authdes_getucred()
and
.B authdes_seccreate()
functions
implement the
.B AUTH_DES
authentication style. The keyserver daemon
.BR keyserv (1M)
must be running for the
.B AUTH_DES
authentication
system to work and
.BR keylogin (1)
.RB "must have been run. The" " AUTH_DES"
style of authentication is discussed here. For information about the
.B AUTH_NONE
and
.B AUTH_SYS
flavors of authentication, refer to
.BR rpc_clnt_auth (3NSL).
See \fBrpc\fR(3NSL) for the definition of the
.B AUTH
data structure.
.sp
.LP
The following functions documented on this page are MT-Safe. For the
MT-levels of other authentication styles, see relevant man pages.
.sp
.ne 2
.mk
.na
.B authdes_getucred()
.ad
.RS 26n
.rt
This is the first of two functions that interface to the
.B RPC
secure
authentication system
.BR AUTH_DES .
The second is the
.B authdes_seccreate()
function. The
.B authdes_getucred()
function is
used on the server side to convert an
.B AUTH_DES
credential, which is
operating system independent, to an
.B AUTH_SYS
credential. The
.B authdes_getucred()
function returns
.B 1
if it succeeds,
.B 0
if
it fails.
.sp
The \fB*\fIuidp\fR parameter is set to the user's numerical \fBID\fR
associated with \fIadc\fR. The \fB*\fIgidp\fR parameter is set to the
numerical \fBID\fR of the user's group. The \fB*\fIgidlist\fR parameter
contains the numerical
.B IDs
of the other groups to which the user
belongs. The \fB*\fIgidlenp\fR parameter is set to the number of valid
group ID entries specified by the \fB*\fIgidlist\fR parameter.
.sp
The
.B authdes_getucred()
function fails if the
.BR authdes_cred
structure was created with the netname of a host. In such a case,
.B netname2host()
should be used to get the host name from the host
netname in the
.B authdes_cred
structure.
.RE

.sp
.ne 2
.mk
.na
.B authdes_seccreate()
.ad
.RS 26n
.rt
The second of two
.B AUTH_DES
authentication functions, the
.B authdes_seccreate()
function is used on the client side to return an
authentication handle that enables the use of the secure authentication
system. The first field,
.IR name ,
specifies the network name
.I netname
of the owner of the server process. The field usually
represents a hostname derived from the
.B host2netname()
utility, but the
field might also represent a user name converted with the
.B user2netname()
utility.
.sp
The second field,
.IR window ,
specifies the validity of the client
credential in seconds. If the difference in time between the client's clock
and the server's clock exceeds
.IR window ,
the server rejects the client's
credentials and the clock will have to be resynchronized. A small window is
more secure than a large one, but choosing too small a window increases the
frequency of resynchronization due to clock drift.
.sp
The third parameter,
.IR timehost ,
is the host's name and is optional. If
.I timehost
is
.IR NULL ,
the authentication system assumes that the
local clock is always in sync with the
.I timehost
clock and does not
attempt resynchronization. If a timehost is supplied, the system consults
the remote time service whenever resynchronization is required. The
.I timehost
parameter is usually the name of the host on which the server
is running.
.sp
The final parameter,
.IR ckey ,
is also optional. If
.I ckey
is
.I NULL,
the authentication system generates a random
.B DES
key to be
used for the encryption of credentials. If
.I ckey
is supplied, it is
used for encryption.
.sp
If
.B authdes_seccreate()
fails, it returns \fINULL.\fR
.RE

.sp
.ne 2
.mk
.na
.B getnetname()
.ad
.RS 26n
.rt
This function returns the unique, operating system independent netname of
the caller in the fixed-length array
.IR name .
The function returns
.B 1
if it succeeds and
.B 0
if it fails.
.RE

.sp
.ne 2
.mk
.na
.B host2netname()
.ad
.RS 26n
.rt
This function converts a domain-specific hostname
.I host
to an
operating system independent netname. The function returns
.B 1
if it
succeeds and
.B 0
if it fails. The
.B host2netname()
function is the
inverse of the
.B netname2host()
function. If the
.I domain
is
.IR NULL ,
.B host2netname()
uses the default domain name of the
machine. If
.I host
is
.IR NULL ,
it defaults to that machine itself. If
.I domain
is
.I NULL
and
.I host
is an NIS name such as
.BR myhost.sun.example.com ,
the
.B host2netname()
function uses the
domain
.B sun.example.com
rather than the default domain name of the
machine.
.RE

.sp
.ne 2
.mk
.na
.B key_decryptsession()
.ad
.RS 26n
.rt
This function is an interface to the keyserver daemon, which is associated
with
.B RPC's
secure authentication system (\fBAUTH_DES\fR
authentication). User programs rarely need to call
.B key_decryptsession()
or the associated functions
.BR key_encryptsession() ,
.BR key_gendes() ,
and
.BR key_setsecret() .
.sp
The
.B key_decryptsession()
function takes a server netname
.I remotename
and a
.B DES
key
.IR deskey ,
and decrypts the key by
using the the public key of the server and the secret key associated with
the effective
.B UID
of the calling process. The
.B key_decryptsession()
function is the inverse of
.B key_encryptsession()
function.
.RE

.sp
.ne 2
.mk
.na
.B key_encryptsession()
.ad
.RS 26n
.rt
This function is a keyserver interface that takes a server netname
.I remotename
and a
.B DES
key
.IR deskey ,
and encrypts the key
using the public key of the the server and the secret key associated with
the effective
.B UID
of the calling process. If the keyserver does not
have a key registered for the UID, it falls back to using the secret key for
the netname
.B nobody
unless this feature has been disabled. See
.BR keyserv (1M).
The
.B key_encryptsession()
function is the inverse of
.B key_decryptsession()
function. The
.B key_encryptsession()
function
returns
.B 0
if it succeeds, \fB\(mi1\fR if it fails.
.RE

.sp
.ne 2
.mk
.na
.B key_gendes()
.ad
.RS 26n
.rt
This is a keyserver interface function used to ask the keyserver for a
secure conversation key. Selecting a conversion key at random is generally
not secure because the common ways of choosing random numbers are too easy
to guess. The
.B key_gendes()
function returns
.B 0
if it succeeds,
\fB\(mi1\fR if it fails.
.RE

.sp
.ne 2
.mk
.na
.B key_setsecret()
.ad
.RS 26n
.rt
This is a keyserver interface function used to set the key for the
effective
.B UID
of the calling process. This function returns
.B 0
if
it succeeds, \fB\(mi1\fR if it fails.
.RE

.sp
.ne 2
.mk
.na
.B key_secretkey_is_set()
.ad
.RS 26n
.rt
This is a keyserver interface function used to determine if a key has been
set for the effective
.B UID
of the calling process. If the keyserver has
a key stored for the effective
.B UID
of the calling process, the
.B key_secretkey_is_set()
function returns
.BR 1 .
Otherwise it returns
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
.B netname2host()
.ad
.RS 26n
.rt
This function converts an operating system independent netname
.IR name
to a domain-specific hostname
.IR host .
The
.I hostlen
parameter is the
maximum size of
.IR host .
The
.B netname2host()
function returns
.B 1
if it succeeds and
.B 0
if it fails. The function is the inverse
of the
.B host2netname()
function.
.RE

.sp
.ne 2
.mk
.na
.B netname2user()
.ad
.RS 26n
.rt
This function converts an operating system independent netname to a
domain-specific user
.BR ID .
The
.B netname2user()
function returns
.B 1
if it succeeds and
.B 0
if it fails.The function is the inverse
of the
.B user2netname()
function.
.sp
The \fB*\fIuidp\fR parameter is set to the user's numerical \fBID\fR
associated with \fIname\fR. The \fB*\fIgidp\fR parameter is set to the
numerical
.B ID
of the user's group. The
.I gidlist
parameter contains
the numerical
.B IDs
of the other groups to which the user belongs. The
\fB*\fIgidlenp\fR parameter is set to the number of valid group \fBID\fR
entries specified by the
.I gidlist
parameter.
.RE

.sp
.ne 2
.mk
.na
.B user2netname()
.ad
.RS 26n
.rt
This function converts a domain-specific username to an operating system
independent netname. The
.B user2netname()
function returns
.B 1
if it
succeeds and
.B 0
if it fails. The function is the inverse of
.B netname2user()
function.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR chkey (1),
.BR keylogin (1),
.BR keyserv (1M),
.BR newkey (1M),
.BR rpc (3NSL),
.BR rpc_clnt_auth (3NSL),
.BR attributes (5)
