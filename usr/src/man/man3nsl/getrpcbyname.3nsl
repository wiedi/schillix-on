'\" te
.\" Copyright (c) 1998 Sun Microsystems, Inc.  All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH getrpcbyname 3NSL "20 Feb 1998" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
getrpcbyname, getrpcbyname_r, getrpcbynumber, getrpcbynumber_r, getrpcent,
getrpcent_r, setrpcent, endrpcent \- get RPC entry
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR .\|.\|. ] \fIfile\fR .\|.\|. \fB-lnsl\fR [ \fIlibrary\fR .\|.\|. ]
#include <rpc/rpcent.h>



\fBstruct rpcent *\fBgetrpcbyname\fR(\fBconst char *\fIname\fR);
.fi

.LP
.nf
\fBstruct rpcent *\fBgetrpcbyname_r\fR(\fBconst char *\fIname\fR, \fBstruct rpcent *\fIresult\fR,
     \fBchar *\fIbuffer\fR, \fBint\fR \fIbuflen\fR);
.fi

.LP
.nf
\fBstruct rpcent *\fBgetrpcbynumber\fR(\fBconst int\fR \fInumber\fR);
.fi

.LP
.nf
\fBstruct rpcent *\fBgetrpcbynumber_r\fR(\fBconst int\fR \fInumber\fR, \fBstruct rpcent *\fIresult\fR,
     \fBchar *\fIbuffer\fR, \fBint\fR \fIbuflen\fR);
.fi

.LP
.nf
\fBstruct rpcent *\fBgetrpcent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBstruct rpcent *\fBgetrpcent_r\fR(\fBstruct rpcent *\fIresult\fR, \fBchar *\fIbuffer\fR,
     \fBint\fR \fIbuflen\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsetrpcent\fR(\fBconst int\fR \fIstayopen\fR);
.fi

.LP
.nf
\fBvoid\fR \fBendrpcent\fR(\fBvoid\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions are used to obtain entries for RPC (Remote Procedure Call)
services. An entry may come from any of the sources for
.B rpc
specified
in the \fB/etc/nsswitch.conf\fR file (see \fBnsswitch.conf\fR(4)).
.sp
.LP
\fBgetrpcbyname()\fR searches for an entry with the RPC service name
specified by the parameter
.IR name .
.sp
.LP
\fBgetrpcbynumber()\fR searches for an entry with the RPC program number
.IR number .
.sp
.LP
The functions
.BR setrpcent() ,
.BR getrpcent() ,
and
.BR endrpcent()
are used to enumerate RPC entries from the database.
.sp
.LP
\fBsetrpcent()\fR sets (or resets) the enumeration to the beginning of the
set of RPC entries.  This function should be called before the first call to
.BR getrpcent() .
Calls to
.B getrpcbyname()
and
.BR getrpcbynumber()
leave the enumeration position in an indeterminate state.   If the
\fIstayopen\fR flag is non-zero, the system may keep allocated resources
such as open file descriptors until a subsequent call to
.BR endrpcent() .
.sp
.LP
Successive calls to
.B getrpcent()
return either successive entries or
\fBNULL,\fR indicating the end of the enumeration.
.sp
.LP
\fBendrpcent()\fR may be called to indicate that the caller expects to do
no further RPC entry retrieval operations; the system may then deallocate
resources it was using.  It is still allowed, but possibly less efficient,
for the process to call more RPC entry retrieval functions after calling
.BR endrpcent() .
.SS "Reentrant Interfaces"
.sp
.LP
The functions
.BR getrpcbyname() ,
.BR getrpcbynumber() ,
and
\fBgetrpcent()\fR use static storage that is re-used in each call, making
these routines unsafe for use in multithreaded applications.
.sp
.LP
The functions
.BR getrpcbyname_r() ,
.BR getrpcbynumber_r() ,
and
\fBgetrpcent_r()\fR provide reentrant interfaces for these operations.
.sp
.LP
Each reentrant interface performs the same operation as its non-reentrant
counterpart, named by removing the  ``\fB_r\fR'' suffix.  The reentrant
interfaces, however, use buffers supplied by the caller to store returned
results, and  are safe for use in both single-threaded and multithreaded
applications.
.sp
.LP
Each reentrant interface takes the same parameters as its non-reentrant
counterpart, as well as the following additional parameters.  The parameter
\fIresult\fR must be a pointer to a \fBstruct rpcent\fR structure allocated
by the caller.  On successful completion, the function returns the RPC entry
in this structure. The parameter \fIbuffer\fR must be a pointer to a buffer
supplied by the caller.  This buffer is used as storage space for the RPC
entry data.  All of the pointers within the returned \fBstruct rpcent\fR
\fIresult\fR point to data stored within this buffer (see \fBRETURN
VALUES\fR). The buffer must be large enough to hold all of the data
associated with the RPC entry. The parameter \fIbuflen\fR should give the
size in bytes of the buffer indicated by
.IR buffer .
.sp
.LP
For enumeration in multithreaded applications, the position within the
enumeration is a process-wide property shared by all threads.
\fBsetrpcent()\fR may be used in a multithreaded application but resets the
enumeration position for all threads.  If multiple threads interleave calls
to
.BR getrpcent_r() ,
the threads will enumerate disjoint subsets of the
RPC entry database.
.sp
.LP
Like their non-reentrant counterparts,
.B getrpcbyname_r()
and
\fBgetrpcbynumber_r()\fR leave the enumeration position in an indeterminate
state.
.SH RETURN VALUES
.sp
.LP
RPC entries are represented by the
.B "struct rpcent"
structure defined in
.BR <rpc/rpcent.h> :
.sp
.in +2
.nf
struct rpcent {
   char *r_name;       /* name of this rpc service
   char **r_aliases;   /* zero-terminated list of alternate names */
   int r_number;       /* rpc program number */
};
.fi
.in -2

.sp
.LP
The functions
.BR getrpcbyname() ,
.BR getrpcbyname_r(\|) ,
\fBgetrpcbynumber(\|)\fR, and \fBgetrpcbynumber_r()\fR each return a pointer
to a
.B "struct rpcent"
if they successfully locate the requested entry;
otherwise they return
.BR NULL.
.sp
.LP
The functions
.B getrpcent()
and
.B getrpcent_r()
each return a
pointer to a
.B "struct rpcent"
if they successfully enumerate an entry;
otherwise they return
.B NULL,
indicating the end of the enumeration.
.sp
.LP
The functions
.BR getrpcbyname() ,
.BR getrpcbynumber() ,
and
\fBgetrpcent()\fR use static storage, so returned data must be copied before
a subsequent call to any of these functions if the data is to be saved.
.sp
.LP
When the pointer returned by the reentrant functions
.BR getrpcbyname_r() ,
.BR getrpcbynumber_r() ,
and
.B getrpcent_r()
is
non-NULL, it is always equal to the
.I result
pointer that was supplied
by the caller.
.SH ERRORS
.sp
.LP
The reentrant functions
.BR getrpcyname_r() ,
\fBgetrpcbynumber_r(\|)\fR
and
.B getrpcent_r()
will return
.B NULL
and set
.B errno
to
\fBERANGE\fR if the length of the buffer supplied by caller is not large
enough to store the result. See
.BR Intro (2)
for the proper usage and
interpretation of
.B errno
in multithreaded applications.
.SH FILES
.sp
.LP
.B /etc/rpc
.sp
.LP
\fB/etc/nsswitch.conf\fR
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelT{
See "Reentrant Interfaces" in \fBDESCRIPTION\fR.
T}
.TE

.SH SEE ALSO
.sp
.LP
.BR rpcinfo (1M),
.BR rpc (3NSL),
.BR nsswitch.conf (4),
.BR rpc (4),
.BR attributes (5)
.SH WARNINGS
.sp
.LP
The reentrant interfaces
.BR getrpcbyname_r() ,
.BR getrpcbynumber_r() ,
and
.B getrpcent_r()
are included in this release on an uncommitted basis
only, and are subject to change or removal in future minor releases.
.SH NOTES
.sp
.LP
When compiling multithreaded applications, see
.BR Intro (3),
\fINotes On
Multithreaded Applications\fR, for information about the use of the
\fB_REENTRANT\fR flag.
.sp
.LP
Use of the enumeration interfaces
.B getrpcent()
and
.BR getrpcent_r()
is discouraged; enumeration may not be supported for all database sources.
The semantics of enumeration are discussed further in
.BR nsswitch.conf (4).
