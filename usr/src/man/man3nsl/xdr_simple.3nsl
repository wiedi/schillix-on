'\" te
.\" Copyright (c) 2001, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright 1989 AT&T
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH xdr_simple 3NSL "27 Aug 2001" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
xdr_simple, xdr_bool, xdr_char, xdr_double, xdr_enum, xdr_float, xdr_free,
xdr_hyper, xdr_int, xdr_long, xdr_longlong_t, xdr_quadruple, xdr_short,
xdr_u_char, xdr_u_hyper, xdr_u_int, xdr_u_long, xdr_u_longlong_t,
xdr_u_short, xdr_void \- library routines for external data representation
.SH SYNOPSIS
.LP
.nf
#include<rpc/xdr.h>



\fBbool_t\fR \fBxdr_bool\fR(\fBXDR *\fIxdrs\fR, \fBbool_t *\fIbp\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBxdr_char\fR(\fBXDR *\fIxdrs\fR, \fBchar *\fIcp\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBxdr_double\fR(\fBXDR *\fIxdrs\fR, \fBdouble *\fIdp\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBxdr_enum\fR(\fBXDR *\fIxdrs\fR, \fBenum_t *\fIep\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBxdr_float\fR(\fBXDR *\fIxdrs\fR, \fBfloat *\fIfp\fR);
.fi

.LP
.nf
\fBvoid\fR \fBxdr_free\fR(\fBxdrproc_t\fR \fIproc\fR, \fBchar *\fIobjp\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBxdr_hyper\fR(\fBXDR *\fIxdrs\fR, \fBlonglong_t *\fIllp\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBxdr_int\fR(\fBXDR *\fIxdrs\fR, \fBint *\fIip\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBxdr_long\fR(\fBXDR *\fIxdrs\fR, \fBlongt *\fIlp\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBxdr_longlong_t\fR(\fBXDR *\fIxdrs\fR, \fBlonglong_t *\fIllp\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBxdr_quadruple\fR(\fBXDR *\fIxdrs\fR, \fBlong double *\fIpq\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBxdr_short\fR(\fBXDR *\fIxdrs\fR, \fBshort *\fIsp\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBxdr_u_char\fR(\fBXDR *\fIxdrs\fR, \fBunsigned char *\fIucp\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBxdr_u_hyper\fR(\fBXDR *\fIxdrs\fR, \fBu_longlong_t *\fIullp\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBxdr_u_int\fR(\fBXDR *\fIxdrs\fR, \fBunsigned *\fIup\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBxdr_u_long\fR(\fBXDR *\fIxdrs\fR, \fBunsigned long *\fIulp\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBxdr_u_longlong_t\fR(\fBXDR *\fIxdrs\fR, \fBu_longlong_t *\fIullp\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBxdr_u_short\fR(\fBXDR\fR \fIxdrs\fR, \fBunsigned short *\fIusp\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBxdr_void\fR(void)
.fi

.SH DESCRIPTION
.sp
.LP
The
.B XDR
library routines allow C programmers to describe simple data
structures in a machine-independent fashion. Protocols such as remote
procedure calls (RPC) use these routines to describe the format of the
data.
.sp
.LP
These routines require the creation of
.B XDR
streams (see
.BR xdr_create (3NSL)).
.SS "Routines"
.sp
.LP
See \fBrpc\fR(3NSL) for the definition of the 
.B XDR
data structure.
Note that any buffers passed to the
.B XDR
routines must be properly
aligned. It is suggested that
.BR malloc (3C)
be used to allocate these
buffers or that the programmer insure  that the buffer address is divisible
evenly by four.
.sp
.ne 2
.mk
.na
.B xdr_bool()
.ad
.RS 22n
.rt
\fBxdr_bool()\fR translates between booleans (C integers) and their
external representations. When encoding data, this filter produces values of
either
.B 1
or
.BR 0 .
This routine returns
.B TRUE
if it succeeds,
\fBFALSE\fR otherwise.
.RE

.sp
.ne 2
.mk
.na
.B xdr_char()
.ad
.RS 22n
.rt
\fBxdr_char()\fR translates between C characters and their external
representations. This routine returns
.B TRUE
if it succeeds, \fBFALSE\fR
otherwise. Note: encoded characters are not packed, and occupy 4 bytes each.
For arrays of characters, it is worthwhile to consider \fBxdr_bytes()\fR,
.BR xdr_opaque() ,
or
.B xdr_string()
(see \fBxdr_complex\fR(3NSL)).
.RE

.sp
.ne 2
.mk
.na
.B xdr_double()
.ad
.RS 22n
.rt
\fBxdr_double()\fR translates between C \fBdouble\fR precision numbers and
their external representations. This routine returns
.B TRUE
if it
succeeds,
.B FALSE
otherwise.
.RE

.sp
.ne 2
.mk
.na
.B xdr_enum()
.ad
.RS 22n
.rt
\fBxdr_enum()\fR translates between C \fBenum\fRs (actually integers) and
their external representations. This routine returns
.B TRUE
if it
succeeds,
.B FALSE
otherwise.
.RE

.sp
.ne 2
.mk
.na
\fBxdr_float()\fR
.ad
.RS 22n
.rt
\fBxdr_float()\fR translates between C \fBfloat\fRs and their external
representations. This routine returns
.B TRUE
if it succeeds, \fBFALSE\fR
otherwise.
.RE

.sp
.ne 2
.mk
.na
\fBxdr_free()\fR
.ad
.RS 22n
.rt
Generic freeing routine. The first argument is the
.B XDR
routine for
the object being freed. The second argument is a pointer to the object
itself. Note: the pointer passed to this routine is not freed, but what it
points to is freed (recursively, depending on the XDR routine).
.RE

.sp
.ne 2
.mk
.na
.B xdr_hyper()
.ad
.RS 22n
.rt
\fBxdr_hyper()\fR translates between ANSI C  \fBlong long\fR integers
and their external representations. This routine returns
.B TRUE
if it
succeeds,
.B FALSE
otherwise.
.RE

.sp
.ne 2
.mk
.na
.B xdr_int()
.ad
.RS 22n
.rt
\fBxdr_int()\fR translates between C integers and their external
representations. This routine returns
.B TRUE
if it succeeds, \fBFALSE\fR
otherwise.
.RE

.sp
.ne 2
.mk
.na
.B xdr_long()
.ad
.RS 22n
.rt
\fBxdr_long()\fR translates between C \fBlong\fR integers and their
external representations. This routine returns
.B TRUE
if it succeeds,
\fBFALSE\fR otherwise.
.sp
In a 64-bit environment, this routine returns an error if the value of
\fBlp\fR is outside the range
.BR "[INT32_MIN, INT32_MAX]" .
The
\fBxdr_int()\fR routine is recommended in place of this routine.
.RE

.sp
.ne 2
.mk
.na
.B xdr_longlong_t()
.ad
.RS 22n
.rt
\fBxdr_longlong_t()\fR translates between ANSI C  \fBlong long\fR
.RB "integers and their external representations. This routine returns" " TRUE"
if it succeeds,
.B FALSE
otherwise. This routine is identical to
.BR xdr_hyper() .
.RE

.sp
.ne 2
.mk
.na
.B xdr_quadruple()
.ad
.RS 22n
.rt
\fBxdr_quadruple()\fR translates between IEEE quadruple precision floating
point numbers and their external representations. This routine returns
\fBTRUE\fR if it succeeds, \fBFALSE\fR otherwise.
.RE

.sp
.ne 2
.mk
.na
.B xdr_short()
.ad
.RS 22n
.rt
\fBxdr_short()\fR translates between C \fBshort\fR integers and their
external representations. This routine returns
.B TRUE
if it succeeds,
\fBFALSE\fR otherwise.
.RE

.sp
.ne 2
.mk
.na
.B xdr_u_char()
.ad
.RS 22n
.rt
\fBxdr_u_char()\fR translates between \fBunsigned\fR C characters and their
external representations. This routine returns
.B TRUE
if it succeeds,
\fBFALSE\fR otherwise.
.RE

.sp
.ne 2
.mk
.na
.B xdr_u_hyper()
.ad
.RS 22n
.rt
\fBxdr_u_hyper()\fR translates between unsigned ANSI C  \fBlong\fR
\fBlong\fR integers and their external representations. This routine returns
\fBTRUE\fR if it succeeds, \fBFALSE\fR otherwise.
.RE

.sp
.ne 2
.mk
.na
.B xdr_u_int()
.ad
.RS 22n
.rt
A filter primitive that translates between a C
.B unsigned
integer and
its external representation. This routine returns
.B TRUE
if it succeeds,
\fBFALSE\fR otherwise.
.RE

.sp
.ne 2
.mk
.na
.B xdr_u_long()
.ad
.RS 22n
.rt
\fBxdr_u_long()\fR translates between C \fBunsigned long\fR integers and
their external representations. This routine returns
.B TRUE
if it
succeeds,
.B FALSE
otherwise.
.sp
In a 64-bit environment, this routine returns an error if the value of
\fIulp\fR is outside the range
.BR "[0, UINT32_MAX]" .
The
.BR xdr_u_int()
routine is recommended in place of this routine.
.RE

.sp
.ne 2
.mk
.na
.B xdr_u_longlong_t()
.ad
.RS 22n
.rt
\fBxdr_u_longlong_t()\fR translates between unsigned ANSI C  \fBlong\fR
\fBlong\fR integers and their external representations. This routine returns
\fBTRUE\fR if it succeeds, \fBFALSE\fR otherwise. This routine is identical
to
.BR xdr_u_hyper() .
.RE

.sp
.ne 2
.mk
.na
.B xdr_u_short()
.ad
.RS 22n
.rt
\fBxdr_u_short()\fR translates between C \fBunsigned short\fR integers and
their external representations. This routine returns
.B TRUE
if it
succeeds,
.B FALSE
otherwise.
.RE

.sp
.ne 2
.mk
.na
.B xdr_void()
.ad
.RS 22n
.rt
This routine always returns
.BR TRUE .
It may be passed to
.BR RPC
routines that require a function parameter, where nothing is to be done.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) cw(2.75i)
lw(2.75i) lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR malloc (3C),
.BR rpc (3NSL),
.BR xdr_admin (3NSL),
.BR xdr_complex (3NSL),
.BR xdr_create (3NSL),
.BR attributes (5)
