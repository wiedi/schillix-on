'\" te
.\" Copyright (C) 2001, Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH rpc_soc 3NSL "7 Jun 2001" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
rpc_soc, authdes_create, authunix_create, authunix_create_default, callrpc,
clnt_broadcast, clntraw_create, clnttcp_create, clntudp_bufcreate,
clntudp_create, get_myaddress, getrpcport, pmap_getmaps, pmap_getport,
pmap_rmtcall, pmap_set, pmap_unset, registerrpc, svc_fds, svc_getcaller,
svc_getreq, svc_register, svc_unregister, svcfd_create, svcraw_create,
svctcp_create, svcudp_bufcreate, svcudp_create, xdr_authunix_parms \-
obsolete library routines for RPC
.SH SYNOPSIS
.LP
.nf
#define PORTMAP
#include <rpc/rpc.h>
.fi

.LP
.nf
\fBAUTH *\fBauthdes_create\fR(\fBchar *\fIname\fR, \fBuint_t\fR \fIwindow\fR,
     \fBstruct sockaddr_in *\fIsyncaddr\fR, \fBdes_block *\fIckey\fR);
.fi

.LP
.nf
\fBAUTH *\fBauthunix_create\fR(\fBchar *\fIhost\fR, \fBuid_t\fR \fIuid\fR, \fBgid_t\fR \fIgid\fR,
     \fBint\fR \fIgrouplen\fR, \fBgid_t *\fIgidlistp\fR);
.fi

.LP
.nf
\fBAUTH *\fBauthunix_create_default\fR(void)
.fi

.LP
.nf
\fBcallrpc\fR(\fBchar *\fIhost\fR, \fBrpcprog_t\fR \fIprognum\fR, \fBrpcvers_t\fR \fIversnum\fR,
     \fBrpcproc_t\fR \fIprocnum\fR, \fBxdrproc_t\fR \fIinproc\fR, \fBchar *\fIin\fR,
     \fBxdrproc_t\fR \fIoutproc\fR, \fBchar *\fIout\fR);
.fi

.LP
.nf
\fBenum\fR \fBclnt_stat_clnt_broadcast\fR(\fBrpcprog_t\fR \fIprognum\fR, \fBrpcvers_t\fR \fIversnum\fR,
     \fBrpcproc_t\fR \fIprocnum\fR, \fBxdrproc_t\fR \fIinproc\fR, \fBchar *\fIin\fR,
     \fBxdrproc_t\fR \fIoutproc\fR, \fBchar *\fIout\fR, \fBresultproc_t\fIeachresult\fR);
.fi

.LP
.nf
\fBCLIENT *\fBclntraw_create\fR(\fBrpcproc_t\fR \fIprocnum\fR, \fBrpcvers_t\fR \fIversnum\fR);
.fi

.LP
.nf
\fBCLIENT *\fBclnttcp_create\fR(\fBstruct sockaddr_in *\fIaddr\fR,
     \fBrpcprog_t\fR \fIprognum\fR, \fBrpcvers_t\fR \fIversnum\fR, \fBint *\fIfdp\fR,
     \fBuint_t\fR \fIsendz\fR, \fBuint_t\fR \fIrecvsz\fR);
.fi

.LP
.nf
\fBCLIENT *\fBclntudp_bufcreate\fR(\fBstruct sockaddr_in *\fIaddr\fR, \fBrpcprog_t\fR \fIprognum\fR,
     \fBrpcvers_t\fR \fIversnum\fR, \fBstruct timeval\fR \fIwait\fR,
     \fBint *\fIfdp\fR, \fBuint_t\fR \fIsendz\fR, \fBuint_t\fR \fIrecvsz\fR);
.fi

.LP
.nf
\fBCLIENT *\fBclntudp_create\fR(\fBstruct sockaddr_in *\fIaddr\fR,
     \fBrpcprog_t\fR \fIprognum\fR, \fBstruct timeval\fR \fIwait\fR, \fBint *\fIfdp\fR);
.fi

.LP
.nf
\fBvoid\fR \fBget_myaddress\fR(\fBstruct sockaddr_in *\fIaddr\fR);
.fi

.LP
.nf
\fBushort\fR \fBgetrpcport\fR(\fBchar *\fIhost\fR, \fBrpcprog_t\fR \fIprognum\fR,
     \fBrpcvers_t\fR \fIversnum\fR, \fBrpcprot_t\fR \fIproto\fR);
.fi

.LP
.nf
\fBstruct pmaplist *\fBpmap_getmaps\fR(\fBstruct sockaddr_in *\fIaddr\fR);
.fi

.LP
.nf
\fBushort\fR \fBpmap_getport\fR(\fBstruct sockaddr_in *\fIaddr\fR,
     \fBrpcprog_t\fR \fIprognum\fR, \fBrpcvers_t\fR \fIversnum\fR,
     \fBrpcprot_t\fR \fIprotocol\fR);
.fi

.LP
.nf
\fBenum clnt_stat\fR \fBpmap_rmtcall\fR(\fBstruct sockaddr_in *\fIaddr\fR,
     \fBrpcprog_t\fR \fIprognum\fR, \fBrpcvers_t\fR \fIversnum\fR,
     \fBrpcproc_t\fR \fIprogcnum\fR, \fBcaddr_t\fR \fIin\fR, \fBxdrproct_t\fR \fIinproc\fR,
     \fBcaddr_t\fR \fIout\fR, \fBcdrproct_t\fR \fIoutproc\fR,
     \fBstruct timeval\fR \fItout\fR, \fBrpcport_t *\fIportp\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBpmap_set\fR(\fBrpcprog_t\fR \fIprognum\fR, \fBrpcvers_t\fR \fIversnum\fR,
     \fBrpcprot_t\fR \fIprotocol\fR, \fBu_short\fR \fIport\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBpmap_unset\fR(\fBrpcprog_t\fR \fIprognum\fR, \fBrpcvers_t\fR \fIversnum\fR);
.fi

.LP
.nf
int svc_fds;
.fi

.LP
.nf
\fBstruct sockaddr_in *\fBsvc_getcaller\fR(\fBSVCXPRT *\fIxprt\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsvc_getreq\fR(\fBint\fR \fIrdfds\fR);
.fi

.LP
.nf
\fBSVCXPRT *\fBsvcfd_create\fR(\fBint\fR \fIfd\fR, \fBuint_t\fR \fIsendsz\fR,
     \fBuint_t\fR \fIrecvsz\fR);
.fi

.LP
.nf
\fBSVCXPRT *\fBsvcraw_create\fR(void)
.fi

.LP
.nf
\fBSVCXPRT *\fBsvctcp_create\fR(\fBint\fR \fIfd\fR, \fBuint_t\fR \fIsendsz\fR,
     \fBuint_t\fR \fIrecvsz\fR);
.fi

.LP
.nf
\fBSVCXPRT *\fBsvcudp_bufcreate\fR(\fBint\fR \fIfd\fR, \fBuint_t\fR \fIsendsz\fR,
     \fBuint_t\fR \fIrecvsz\fR);
.fi

.LP
.nf
\fBSVCXPRT *\fBsvcudp_create\fR(\fBint\fR \fIfd\fR);
.fi

.LP
.nf
\fBregisterrpc\fR(\fBrpcprog_t\fR \fIprognum\fR, \fBrpcvers_t\fR \fIversnum\fR, \fBrpcproc_t\fR \fIprocnum\fR,
     \fBchar *(*procname)()\fR, \fBxdrproc_t\fR \fIinproc\fR, \fBxdrproc_t\fR \fIoutproc\fR);
.fi

.LP
.nf
\fBbool_t\fBsvc_register\fR(\fBSVCXPRT *\fIxprt\fR, \fBrpcprog_t\fR \fIprognum\fR, \fBrpcvers_t\fR \fIversnum\fR,
     \fBvoid (*\fIdispatch()\fR, \fBint\fR \fIprotocol\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsvc_unregister\fR(\fBrpcprog_t\fR \fIprognum\fR, \fBrpcvers_t\fR \fIversnum\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBxdr_authunix_parms\fR(\fBXDR *\fIxdrs\fR, \fBstruct authunix_parms *\fIsupp\fR);
.fi

.SH DESCRIPTION
.sp
.LP
\fBRPC\fR routines allow C programs to make procedure calls on other
machines across the network. First, the client calls a procedure to send a
request to the server. Upon receipt of the request, the server calls a
dispatch routine to perform the requested service, and then sends back a
reply. Finally, the procedure call returns to the client.
.sp
.LP
The routines described in this manual page have been superseded by other
routines. The preferred routine is given after the description of the
routine. New programs should use the preferred routines, as support for the
older interfaces may be dropped in future releases.
.SS "File Descriptors"
.sp
.LP
Transport independent
.B RPC
uses
.B TLI
as its transport interface
instead of sockets.
.sp
.LP
Some of the routines described in this section (such as
.BR clnttcp_create() )
take a pointer to a file descriptor as one of the
parameters. If the user wants the file descriptor to be a socket, then the
application will have to be linked with both
.B librpcsoc
and
.BR libnsl .
If the user passed
.B RPC_ANYSOCK
as the file descriptor,
and the application is linked with
.B libnsl
only, then the routine will
return a
.B TLI
file descriptor and not a socket.
.SS "Routines"
.sp
.LP
The following routines require that the header
.B <rpc/rpc.h>
be
included. The symbol
.B PORTMAP
should be defined so that the appropriate
function declarations for the old interfaces are included through the header
files.
.sp
.ne 2
.mk
.na
.B authdes_create()
.ad
.RS 30n
.rt
\fBauthdes_create()\fR is the first of two routines which interface to the
\fBRPC\fR secure authentication system, known as \fBDES\fR authentication.
The second is
.BR authdes_getucred() ,
below.  Note: the keyserver daemon
.BR keyserv (1M)
must be running for the
.B DES
authentication system to
work.
.sp
.BR authdes_create() ,
used on the client side,  returns an authentication
handle that will enable the use of the secure authentication system. The
first parameter
.I name
is the network name, or
.IR netname ,
of the
owner of the server process.  This field usually represents a hostname
derived from the utility routine
.BR host2netname() ,
but could also
represent a user name using
.BR user2netname() .
See
.BR secure_rpc (3NSL).
The second field is window on the validity of the
client credential, given in seconds.   A small window is more secure than a
large one,  but choosing too small of a window will increase the frequency
of resynchronizations because of clock drift.  The third parameter
\fIsyncaddr\fR is optional.   If it is \fBNULL,\fR then the authentication
system will assume that the local clock is always in sync with the server's
clock, and will not attempt resynchronizations. If an address is supplied,
however, then the system will use the address for consulting the remote time
service whenever resynchronization is required.  This parameter is usually
the address of the
.B RPC
server itself. The final parameter \fIckey\fR
is also optional. If it is
.B NULL,
then the authentication system will
generate a random
.B DES
key to be used for the encryption of
credentials. If it is supplied, however,  then it will be used instead.
.sp
This routine exists for backward compatibility only, and it is made
obsolete by
.BR authdes_seccreate() .
See
.BR secure_rpc (3NSL).
.RE

.sp
.ne 2
.mk
.na
.B authunix_create()
.ad
.RS 30n
.rt
Create and return an
.B RPC
authentication handle that contains .UX
authentication information. The parameter
.I host
is the name of the
machine on which the information was created;
.I uid
is the user's user
.B ID;
.I gid
is the user's current group
.B ID;
\fIgrouplen\fR and
\fIgidlistp\fR refer to a counted array of groups to which the user
belongs.
.sp
It is not very difficult to impersonate a user.
.sp
This routine exists for backward compatibility only, and it is made
obsolete by
.BR authsys_create() .
See
.BR rpc_clnt_auth (3NSL).
.RE

.sp
.ne 2
.mk
.na
\fBauthunix_create_default()\fR
.ad
.RS 30n
.rt
Call
.B authunix_create()
with the appropriate parameters.
.sp
This routine exists for backward compatibility only, and it is made
obsolete by
.BR authsys_create_default() .
See
.BR rpc_clnt_auth (3NSL).
.RE

.sp
.ne 2
.mk
.na
.B callrpc()
.ad
.RS 30n
.rt
Call the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
\fIprocnum\fR on the machine,
.IR host .
The parameter
.I inproc
is used
to encode the procedure's parameters, and
.I outproc
is used to decode
the procedure's results;
.I in
is the address of the procedure's
argument, and
.I out
is the address of where to place the result(s). This
routine returns
.B 0
if it succeeds, or the value of \fBenum
clnt_stat\fR cast to an integer if it fails. The routine \fBclnt_perrno()\fR
is handy for translating failure statuses into messages. See
.BR rpc_clnt_calls (3NSL).
.sp
You do not have control of timeouts or authentication using this routine.
This routine exists for backward compatibility only, and is made obsolete by
.BR rpc_call() .
See
.BR rpc_clnt_calls (3NSL).
.RE

.sp
.ne 2
.mk
.na
.B clnt_stat_clnt_broadcast()
.ad
.RS 30n
.rt
Like
.BR callrpc() ,
except the call message is broadcast to all locally
connected broadcast nets. Each time the caller receives a response, this
routine calls
.BR eachresult() ,
whose form is:
.sp
.in +2
.nf
\fBeachresult(char *\fIout\fR, struct sockaddr_in *\fIaddr\fR);\fR
.fi
.in -2

where
.I out
is the same as
.I out
passed to
.BR clnt_broadcast() ,
.RI "except that the remote procedure's output is decoded there;" " addr"
points to the address of the machine that sent the results. If
\fBeachresult()\fR returns
.BR 0 .
\fBclnt_broadcast()\fR waits for more
replies; otherwise it returns with appropriate status.  If
\fBeachresult()\fR is \fBNULL, clnt_broadcast()\fR returns without
waiting for any replies.
.sp
Broadcast packets are limited in size to the maximum transfer unit of the
transports involved. For Ethernet, the callers argument size is
approximately 1500 bytes. Since the call message is sent to all connected
networks, it may potentially lead to broadcast storms.
\fBclnt_broadcast()\fR uses SB AUTH_SYS credentials by default. See
.BR rpc_clnt_auth (3NSL).
This routine exists for backward compatibility
only, and is made obsolete by
.BR rpc_broadcast() .
See
.BR rpc_clnt_calls (3NSL).
.RE

.sp
.ne 2
.mk
.na
.B clntraw_create()
.ad
.RS 30n
.rt
This routine creates an internal, memory-based
.B RPC
client for the
remote program
.IR prognum ,
version
.IR versnum .
The transport used to
pass messages to the service is actually a buffer within the process's
address space, so the corresponding
.B RPC
server should live in the same
address space. See
.BR svcraw_create() .
This allows simulation of
\fBRPC\fR and acquisition of \fBRPC\fR overheads, such as round trip times,
without any kernel interference. This routine returns
.B NULL
if it
fails.
.sp
This routine exists for backward compatibility only. It has the same
functionality as
.BR clnt_raw_create() .
See
.BR rpc_clnt_create (3NSL),
which obsoletes it.
.RE

.sp
.ne 2
.mk
.na
.B clnttcp_create()
.ad
.RS 30n
.rt
This routine creates an
.B RPC
client for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.B TCP/IP
as a
transport. The remote program is located at Internet address
.IR addr .
If
\fIaddr\fR->\fIsin_port\fR is  \fB0\fR, then it is set to the actual
.RB "port that the remote program is listening on. The remote" " rpcbind"
service is consulted for this information. The parameter \fI*fdp\fR is a
file descriptor, which may be open and bound; if it is
.BR RPC_ANYSOCK ,
then this routine opens a new one and sets
.IR *fdp .
Refer to the \fBFile
Descriptor\fR section for more information. Since \fBTCP-based RPC\fR
uses buffered
.B I/O,
the user may specify the size of the send and
receive buffers with the parameters
.I sendsz
and
.IR recvsz .
Values of
\fB0\fR choose suitable defaults. This routine returns \fBNULL\fR if it
fails.
.sp
This routine exists for backward compatibility only.
.BR clnt_create() ,
.BR clnt_tli_create() ,
or
.B clnt_vc_create()
should be used instead.
See
.BR rpc_clnt_create (3NSL).
.RE

.sp
.ne 2
.mk
.na
\fBclntudp_bufcreate()\fR
.ad
.RS 30n
.rt
Create a client handle for the remote program
.IR prognum ,
on
.IR versnum ;
the client uses
.B UDP/IP
as the transport. The remote
program is located at the Internet address
.IR addr .
If
\fIaddr\fR->\fIsin_port\fR is  \fB0\fR, it is set to  port on which the
remote program is listening on (the remote
.B rpcbind
service is
consulted for this information). The parameter \fI*fdp\fR is a file
descriptor, which may be open and bound. If it is
.BR RPC_ANYSOCK ,
then
this routine opens a new one and sets
.IR *fdp .
Refer to the \fBFile
Descriptor\fR section for more information. The
.B UDP
transport resends
the call message in intervals of
.B wait
time until a response is
received or until the call times out. The total time for the call to time
out is specified by
.BR clnt_call() .
See
.BR rpc_clnt_calls (3NSL).
If
successful it returns a client handle, otherwise it returns
.B NULL.
The
error can be printed using the
.B clnt_pcreateerror()
routine. See
.BR rpc_clnt_create (3NSL).
.sp
The user can specify the maximum packet size for sending and receiving by
using
.I sendsz
and
.I recvsz
arguments for
.BR "UDP-based RPC"
messages.
.sp
If \fIaddr\fR->\fIsin_port\fR is  \fB0\fR and the requested version number
\fIversnum\fR is not registered with the remote portmap service, it returns
a handle if at least a version number for the given program number is
registered. The version mismatch is discovered by a
.B clnt_call()
later
(see
.BR rpc_clnt_calls (3NSL)).
.sp
This routine exists for backward compatibility only.
\fBclnt_tli_create()\fR or \fBclnt_dg_create()\fR should be used instead.
See
.BR rpc_clnt_create (3NSL).
.RE

.sp
.ne 2
.mk
.na
.B clntudp_create()
.ad
.RS 30n
.rt
This routine creates an
.B RPC
client handle for the remote program
.IR prognum ,
version
.IR versnum ;
the client uses
.B UDP/IP
as a
transport. The remote program is located at Internet address
.IR addr .
If
\fIaddr\fR->\fIsin_port\fR is  \fB0\fR, then it is set to actual port that
the remote program is listening on. The remote
.B rpcbind
service is
consulted for this information. The parameter \fI*fdp\fR is a file
descriptor, which may be open and bound; if it is
.BR RPC_ANYSOCK ,
then
this routine opens a new one and sets
.IR *fdp .
Refer to the \fBFile
Descriptor\fR section for more information. The
.B UDP
transport resends
the call message in intervals of
.B wait
time until a response is
received or until the call times out. The total time for the call to time
out is specified by
.BR clnt_call() .
See
.BR rpc_clnt_calls (3NSL).
\fBclntudp_create()\fR returns a client handle on success, otherwise it
returns
.BR NULL .
The error can be printed using the
\fBclnt_pcreateerror()\fR routine. See
.BR rpc_clnt_create (3NSL).
.sp
Since
.B "UDP-based RPC"
messages can only hold up to 8 Kbytes of
encoded data, this transport cannot be used for procedures that take large
arguments or return huge results.
.sp
This routine exists for backward compatibility only.
.BR clnt_create() ,
.BR clnt_tli_create() ,
or
.B clnt_dg_create()
should be used instead.
See
.BR rpc_clnt_create (3NSL).
.RE

.sp
.ne 2
.mk
.na
.B get_myaddress()
.ad
.RS 30n
.rt
Places the local system's
.B IP
address into
.IR *addr ,
without
consulting the library routines that deal with
.BR /etc/hosts .
The port
number is always set to
.BR htons(PMAPPORT) .
.sp
This routine is only intended for use with the
.B RPC
library. It
returns the local system's address in a form compatible with the  \fBRPC\fR
library, and should not be taken as the system's actual IP address. In fact,
the
.I *addr
buffer's host address part is actually zeroed. This address
may have only local significance and should  not be assumed to be an address
that can be used to connect to the local system by remote systems or
processes.
.sp
This routine remains for backward compatibility only. The routine
\fBnetdir_getbyname()\fR should be used with the name \fBHOST_SELF\fR to
retrieve the local system's network address as a \fInetbuf\fR structure. See
.BR netdir (3NSL).
.RE

.sp
.ne 2
.mk
.na
.B getrpcport()
.ad
.RS 30n
.rt
\fBgetrpcport()\fR returns the port number for the version \fIversnum\fR of
the
.B RPC
program
.I prognum
running on
.I host
and using protocol
.IR proto .
\fBgetrpcport()\fR returns  \fB0\fR if the  \fBRPC\fR system
failed to contact  the remote portmap service, the program associated with
\fIprognum\fR is not registered, or there is no mapping between the program
and a port.
.sp
This routine exists for backward compatibility only. Enhanced functionality
is provided by
.BR rpcb_getaddr() .
See
.BR rpcbind (3NSL).
.RE

.sp
.ne 2
.mk
.na
.B pmaplist()
.ad
.RS 30n
.rt
A user interface to the
.B portmap
service,  which returns a list of the
current
.B RPC
.RB "program-to-port mappings on the host located at" " IP"
address
.IR addr .
This routine can return
.B "NULL ."
The command
`\fBrpcinfo\fB-p\fR' uses this routine.
.sp
This routine exists for backward compatibility only, enhanced functionality
is provided by
.BR rpcb_getmaps() .
See
.BR rpcbind (3NSL).
.RE

.sp
.ne 2
.mk
.na
.B pmap_getport()
.ad
.RS 30n
.rt
A user interface to the
.B portmap
service,  which returns the port
number on which waits a service that supports program
.IR prognum ,
version
.IR versnum ,
and speaks the transport protocol associated with
.IR protocol .
The value of
.I protocol
is most likely
.BR IPPROTO_UDP
or
.BR IPPROTO_TCP .
A return value of
.B 0
means that the mapping does
not exist or that the
.B RPC
system failured to contact the remote
\fBportmap\fR service.   In the latter case, the global variable
\fBrpc_createerr\fR contains the \fB RPC\fR status.
.sp
This routine exists for backward compatibility only, enhanced functionality
is provided by
.BR rpcb_getaddr() .
See
.BR rpcbind (3NSL).
.RE

.sp
.ne 2
.mk
.na
.B pmap_rmtcall()
.ad
.RS 30n
.rt
Request that the
.B portmap
on the host at
.B IP
address
.IR *addr
make an
.B RPC
on the behalf of the caller to a procedure on that host.
\fI*portp\fR is modified to the program's port number if the procedure
succeeds. The definitions of other parameters are discussed in
\fBcallrpc()\fR and
.BR clnt_call() .
See
.BR rpc_clnt_calls (3NSL).
.sp
This procedure is only available for the UDP transport.
.sp
If the requested remote procedure is not registered with the remote
\fBportmap\fR then no error response is returned and the call times out.
Also, no authentication is done.
.sp
This routine exists for backward compatibility only, enhanced functionality
is provided by
.BR rpcb_rmtcall() .
See
.BR rpcbind (3NSL).
.RE

.sp
.ne 2
.mk
.na
.B pmap_set()
.ad
.RS 30n
.rt
A user interface to the
.B portmap
service,  that establishes a mapping
between the triple [\fIprognum\fR, \fIversnum\fR, \fIprotocol\fR] and
\fIport\fR on the machine's \fBportmap\fR service.  The value of
\fIprotocol\fR may be \fBIPPROTO_UDP\fR or
.BR IPPROTO_TCP .
Formerly, the
routine failed if the requested
.I port
was found to be in use.  Now, the
routine only fails if it finds that
.I port
is still bound.  If
\fIport\fR is not bound, the routine completes the requested registration.
This routine returns
.B 1
if it succeeds,
.B 0
otherwise.
Automatically done by
.BR svc_register() .
.sp
This routine exists for backward compatibility only, enhanced functionality
is provided by
.BR rpcb_set() .
See
.BR rpcbind (3NSL).
.RE

.sp
.ne 2
.mk
.na
.B pmap_unset()
.ad
.RS 30n
.rt
A user interface to the
.B portmap
service,  which destroys all mapping
between the triple [\fIprognum\fR, \fIversnum\fR, \fIall-protocols\fR] and
\fIport\fR on the machine's \fBportmap\fR service.  This routine returns one
if it succeeds,
.B 0
otherwise.
.sp
This routine exists for backward compatibility only, enhanced functionality
is provided by
.BR rpcb_unset() .
See
.BR rpcbind (3NSL).
.RE

.sp
.ne 2
.mk
.na
\fBsvc_fds()\fR
.ad
.RS 30n
.rt
A global variable reflecting the
.B RPC
service side's read file
.RB "descriptor bit mask; it is suitable as a parameter to the" " select()"
call. This is only of interest if a service implementor does not call
.BR svc_run() ,
but rather does his own asynchronous event processing. This
variable is read-only , yet it may change after calls to \fBsvc_getreq()\fR
or any creation routines. Do not pass its address to
.BR select() !
Similar
to
.BR svc_fdset ,
but limited to 32 descriptors.
.sp
This interface is made obsolete by
.BR svc_fdset .
See
.BR rpc_svc_calls (3NSL).
.RE

.sp
.ne 2
.mk
.na
.B svc_getcaller()
.ad
.RS 30n
.rt
This routine returns the network address, represented as a \fBstruct
sockaddr_in\fR, of the caller of a procedure associated with the \fBRPC\fR
service transport handle,
.IR xprt .
.sp
This routine exists for backward compatibility only, and is obsolete.  The
preferred interface is
.BR svc_getrpccaller() .
See
.BR rpc_svc_reg (3NSL),
which returns the address as a \fBstruct
netbuf\fR.
.RE

.sp
.ne 2
.mk
.na
.B svc_getreq()
.ad
.RS 30n
.rt
This routine is only of interest if a service implementor does not call
.BR svc_run() ,
but instead implements custom asynchronous event
processing. It is called when the
.B select()
call has determined that an
\fBRPC\fR request has arrived on some \fBRPC\fR file descriptors;
\fIrdfds\fR is the resultant read file descriptor bit mask. The routine
returns when all file descriptors associated with the value of \fIrdfds\fR
have been serviced. This routine is similar to
.B svc_getreqset()
but is
limited to 32 descriptors.
.sp
This interface is made obsolete by
.BR svc_getreqset()
.RE

.sp
.ne 2
.mk
.na
\fBsvcfd_create\fB()\fR
.ad
.RS 30n
.rt
Create a service on top of any open and bound descriptor. Typically, this
descriptor is a connected file descriptor for a stream protocol. Refer to
the
.B "File Descriptor"
section for more information.
.I sendsz
and
\fIrecvsz\fR indicate sizes for the send and receive buffers. If they are
.BR 0 ,
a reasonable default is chosen.
.sp
This interface is made obsolete by \fBsvc_fd_create()\fR (see
.BR rpc_svc_create (3NSL)).
.RE

.sp
.ne 2
.mk
.na
.B svcraw_create()
.ad
.RS 30n
.rt
This routine creates an internal, memory-based
.B RPC
service transport,
to which it returns a pointer. The transport is really a buffer within the
process's address space, so the corresponding
.B RPC
client should live
in the same address space; see
.BR clntraw_create() .
This routine allows
simulation of
.B RPC
and acquisition of
.B RPC
overheads (such as
round trip times), without any kernel interference. This routine returns
\fBNULL\fR if it fails.
.sp
This routine exists for backward compatibility only, and has the same
functionality of
.BR svc_raw_create() .
See
.BR rpc_svc_create (3NSL),
which obsoletes it.
.RE

.sp
.ne 2
.mk
.na
.B svctcp_create()
.ad
.RS 30n
.rt
This routine creates a
.B "TCP/IP-based RPC"
service transport, to
which it returns a pointer. The transport is associated with the file
descriptor
.IR fd ,
which may be
.BR RPC_ANYSOCK ,
in which case a new
file descriptor is created. If the file descriptor is not bound to a local
\fBTCP\fR port, then this routine binds it to an arbitrary port. Refer to
the
.B "File Descriptor"
section for more information. Upon completion,
\fIxprt\fR->\fBxp_fd\fR is the transport's file descriptor, and
\fIxprt\fR->\fBxp_port\fR is the transport's port number. This routine
returns
.B NULL
if it fails. Since
.B "TCP-based RPC"
uses
buffered
.B I/O,
users may specify the size of buffers; values of
\fB0\fR choose suitable defaults.
.sp
This routine exists for backward compatibility only.
.BR svc_create() ,
.BR svc_tli_create() ,
or
.B svc_vc_create()
should be used instead. See
.BR rpc_svc_create (3NSL).
.RE

.sp
.ne 2
.mk
.na
\fBsvcudp_bufcreate()\fR
.ad
.RS 30n
.rt
This routine creates a
.B "UDP/IP-based RPC"
service transport, to
which it returns a pointer. The transport is associated with the file
descriptor
.IR fd .
If \fIfd\fR is \fBRPC_ANYSOCK\fR then a new file
descriptor is created. If the file descriptor is not bound to a local
\fBUDP\fR port, then this routine binds it to an arbitrary port. Upon
completion, \fIxprt\fBxp_fd\fR is the transport's file descriptor, and
\fIxprt\fR->\fBxp_port\fR is the transport's port number. Refer to the
\fBFile Descriptor\fR section for more information. This routine returns
\fBNULL\fR if it fails.
.sp
The user specifies the maximum packet size for sending and receiving
UDP-based
.B RPC
messages by using the
.I sendsz
and
.IR recvsz
parameters.
.sp
This routine exists for backward compatibility only.
.BR svc_tli_create() ,
or
.B svc_dg_create()
should be used instead. See
.BR rpc_svc_create (3NSL).
.RE

.sp
.ne 2
.mk
.na
.B svcudp_create()
.ad
.RS 30n
.rt
This routine creates a
.B "UDP/IP-based RPC"
service transport, to
which it returns a pointer. The transport is associated with the file
descriptor
.IR fd ,
which may be
.BR RPC_ANYSOCK ,
in which case a new
file descriptor is created. If the file descriptor is not bound to a local
\fBUDP\fR port, then this routine binds it to an arbitrary port. Upon
completion, \fIxprt\fR->\fBxp_fd\fR is the transport's file descriptor, and
\fIxprt\fR->\fBxp_port\fR is the transport's port number. This routine
returns
.B NULL
if it fails.
.sp
Since
.B "UDP-based RPC"
messages can only hold up to 8 Kbytes of
encoded data, this transport cannot be used for procedures that take large
arguments or return huge results.
.sp
This routine exists for backward compatibility only.
.BR svc_create() ,
.BR svc_tli_create() ,
or
.B svc_dg_create()
should be used instead. See
.BR rpc_svc_create (3NSL).
.RE

.sp
.ne 2
.mk
.na
.B registerrpc()
.ad
.RS 30n
.rt
Register program
.IR prognum ,
procedure
.IR procname ,
and version
\fIversnum\fR with the \fBRPC\fR service package. If a request arrives for
program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
\fIprocname\fR is called with a pointer to its parameter(s). \fIprocname\fR
should return a pointer to its static result(s).
.I inproc
is used to
decode the parameters while
.I outproc
is used to encode the results.
This routine returns
.B 0
if the registration succeeded, \(mi1
otherwise.
.sp
\fBsvc_run()\fR must be called after all the services are registered.
.sp
This routine exists for backward compatibility only, and it is made
obsolete by
.BR rpc_reg() .
.RE

.sp
.ne 2
.mk
.na
.B svc_register()
.ad
.RS 30n
.rt
Associates
.I prognum
and
.I versnum
with the service dispatch
procedure,
.IR dispatch .
If
.I protocol
is
.BR 0 ,
the service is not
registered with the
.B portmap
service. If
.I protocol
is non-zero,
then a mapping of the triple [\fIprognum\fR, \fIversnum\fR, \fIprotocol\fR]
to \fIxprt\fR->\fBxp_port\fR is established with the local \fBportmap\fR
service (generally
.I protocol
is
.BR 0 ,
\fBIPPROTO_UDP\fR or
.BR IPPROTO_TCP ).
The procedure
.I dispatch
has the following form:
.sp
.in +2
.nf
\fBdispatch(struct svc_req *\fIrequest\fR, SVCXPRT *\fIxprt\fR);\fR
.fi
.in -2

The
.B svc_register()
routine returns one if it succeeds,  and  \fB0\fR
otherwise.
.sp
This routine exists for backward compatibility only. Enhanced functionality
is provided by
.BR svc_reg() .
.RE

.sp
.ne 2
.mk
.na
.B svc_unregister()
.ad
.RS 30n
.rt
Remove all mapping of the double [\fIprognum\fR, \fIversnum\fR] to dispatch
routines, and of the triple [\fIprognum\fR,
.IR versnum ,
\fIall-protocols\fR] to port number from
.BR portmap .
.sp
This routine exists for backward compatibility. Enhanced functionality is
provided by
.BR svc_unreg() .
.RE

.sp
.ne 2
.mk
.na
.B xdr_authunix_parms()
.ad
.RS 30n
.rt
Used for describing
.B UNIX
credentials. This routine is useful for
users who wish to generate these credentials without using the
.BR RPC
authentication package.
.sp
This routine exists for backward compatibility only, and is made obsolete
by
.BR xdr_authsys_parms() .
See
.BR rpc_xdr (3NSL).
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR keyserv (1M),
.BR rpcbind (1M),
.BR rpcinfo (1M),
.BR netdir (3NSL),
.BR netdir_getbyname (3NSL),
.BR rpc (3NSL),
.BR rpc_clnt_auth (3NSL),
.BR rpc_clnt_calls (3NSL),
.BR rpc_clnt_create (3NSL),
.BR rpc_svc_calls (3NSL),
.BR rpc_svc_create (3NSL),
.BR rpc_svc_err (3NSL),
.BR rpc_svc_reg (3NSL),
.BR rpc_xdr (3NSL),
.BR rpcbind (3NSL),
.BR secure_rpc (3NSL),
.BR select (3C),
.BR xdr_authsys_parms (3NSL),
.BR libnsl (3LIB),
.BR librpcsoc (3LIBUCB),
.BR attributes (5)
.SH NOTES
.sp
.LP
These interfaces are unsafe in multithreaded applications.  Unsafe
interfaces should be called only from the main thread.
