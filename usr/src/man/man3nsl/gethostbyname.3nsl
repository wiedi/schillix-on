'\" te
.\" Copyright (C) 2008, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" Copyright 1989 AT&T.
.\" Portions Copyright (c) 1992, X/Open Company Limited. All Rights Reserved
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH gethostbyname 3NSL "24 Aug 2007" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
gethostbyname, gethostbyname_r, gethostbyaddr, gethostbyaddr_r, gethostent,
gethostent_r, sethostent, endhostent \- get network host entry
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR.\|.\|. ] \fIfile\fR.\|.\|. \fB-lnsl\fR [ \fIlibrary\fR.\|.\|. ]
#include <netdb.h>

\fBstruct hostent *\fBgethostbyname\fR(\fBconst char *\fIname\fR);
.fi

.LP
.nf
\fBstruct hostent *\fBgethostbyname_r\fR(\fBconst char *\fIname\fR,
     \fBstruct hostent *\fIresult\fR, \fBchar *\fIbuffer\fR, \fBint\fR \fIbuflen\fR,
     \fBint *\fIh_errnop\fR);
.fi

.LP
.nf
\fBstruct hostent *\fBgethostbyaddr\fR(\fBconst char *\fIaddr\fR, \fBint\fR \fIlen\fR,
     \fBint\fR \fItype\fR);
.fi

.LP
.nf
\fBstruct hostent *\fBgethostbyaddr_r\fR(\fBconst char *\fIaddr\fR, \fBint\fR \fIlength\fR,
     \fBint\fR \fItype\fR, \fBstruct hostent *\fIresult\fR, \fBchar *\fIbuffer\fR,
     \fBint\fR \fIbuflen\fR, \fBint *\fIh_errnop\fR);
.fi

.LP
.nf
\fBstruct hostent *\fBgethostent\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBstruct hostent *\fBgethostent_r\fR(\fBstruct hostent *\fIresult\fR,
     \fBchar *\fIbuffer\fR, \fBint\fR \fIbuflen\fR, \fBint *\fIh_errnop\fR);
.fi

.LP
.nf
\fBint\fR \fBsethostent\fR(\fBint\fR \fIstayopen\fR);
.fi

.LP
.nf
\fBint\fR \fBendhostent\fR(\fBvoid\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These functions are used to obtain entries describing hosts. An entry can
come from any of the sources for
.B hosts
specified in the
.B /etc/nsswitch.conf
file. See
.BR nsswitch.conf (4).
These functions
have been superseded by
.BR getipnodebyname (3SOCKET),
.BR getipnodebyaddr (3SOCKET),
and
.BR getaddrinfo "(3SOCKET), which"
provide greater portability to applications when multithreading is performed
or technologies such as IPv6 are used. For example, the functions described
in the following cannot be used with applications targeted to work with
IPv6.
.sp
.LP
The
.B gethostbyname()
function searches for information for a host with
the hostname specified by the character-string parameter
.IR name .
.sp
.LP
The
.B gethostbyaddr()
function searches for information for a host with
a given host address. The parameter
.B type
specifies the family of the
address. This should be one of the address families defined in
\fB<sys/socket.h>\fR\&. See the
.B NOTES
section for more information.
Also see the
.B EXAMPLES
section for information on how to convert an
Internet
.B IP
address notation that is separated by periods (.) into an
.I addr
parameter. The parameter
.I len
specifies the length of the
buffer indicated by
.IR addr .
.sp
.LP
All addresses are returned in network order. In order to interpret the
addresses,
.BR byteorder (3SOCKET)
must be used for byte order
conversion.
.sp
.LP
The
.BR sethostent() ,
.BR gethostent() ,
and
.BR endhostent()
functions are used to enumerate host entries from the database.
.sp
.LP
The
.B sethostent()
function sets or resets the enumeration to the
beginning of the set of host entries. This function should be called before
the first call to
.BR gethostent() .
Calls to
.B gethostbyname()
and
.B gethostbyaddr()
leave the enumeration position in an indeterminate
state. If the
.I stayopen
flag is non-zero, the system can keep allocated
resources such as open file descriptors until a subsequent call to
.BR endhostent() .
.sp
.LP
Successive calls to the
.B gethostent()
function return either
successive entries or
.I NULL,
indicating the end of the enumeration.
.sp
.LP
The
.B endhostent()
function can be called to indicate that the caller
expects to do no further host entry retrieval operations; the system can
then deallocate resources it was using. It is still allowed, but possibly
less efficient, for the process to call more host retrieval functions after
calling
.BR endhostent() .
.SS "Reentrant Interfaces"
.sp
.LP
The
.BR gethostbyname() ,
.BR gethostbyaddr() ,
and
.BR gethostent()
functions use static storage that is reused in each call, making these
functions unsafe for use in multithreaded applications.
.sp
.LP
The
.BR gethostbyname_r() ,
.BR gethostbyaddr_r() ,
and
.B gethostent_r()
functions provide reentrant interfaces for these
operations.
.sp
.LP
Each reentrant interface performs the same operation as its non-reentrant
counterpart, named by removing the
.B _r
suffix. The reentrant
interfaces, however, use buffers supplied by the caller to store returned
results and the interfaces are safe for use in both single-threaded and
multithreaded applications.
.sp
.LP
Each reentrant interface takes the same parameters as its non-reentrant
counterpart, as well as the following additional parameters. The parameter
.I result
must be a pointer to a
.B "struct hostent"
structure allocated
by the caller. On successful completion, the function returns the host entry
in this structure. The parameter
.I buffer
must be a pointer to a buffer
supplied by the caller. This buffer is used as storage space for the host
data. All of the pointers within the returned
.B "struct hostent"
.I result
point to data stored within this buffer. See the \fBRETURN VALUES\fR section for more information. The buffer must be large enough to
hold all of the data associated with the host entry. The parameter
.I buflen
should give the size in bytes of the buffer indicated by
.IR buffer .
The parameter
.I h_errnop
should be a pointer to an
integer. An integer error status value is stored there on certain error
conditions. See the
.B ERRORS
section for more information.
.sp
.LP
For enumeration in multithreaded applications, the position within the
enumeration is a process-wide property shared by all threads. The
.B sethostent()
function can be used in a multithreaded application but
resets the enumeration position for all threads. If multiple threads
interleave calls to
.BR gethostent_r() ,
the threads will enumerate
disjoint subsets of the host database.
.sp
.LP
Like their non-reentrant counterparts,
.B gethostbyname_r()
and
.B gethostbyaddr_r()
leave the enumeration position in an indeterminate
state.
.SH RETURN VALUES
.sp
.LP
Host entries are represented by the
.B "struct hostent"
structure defined
in
.BR <netdb.h> :
.sp
.in +2
.nf
struct hostent {
    char    *h_name;         /* canonical name of host */
    char    **h_aliases;     /* alias list */
    int     h_addrtype;      /* host address type */
    int     h_length;        /* length of address */
    char    **h_addr_list;   /* list of addresses */
};
.fi
.in -2

.sp
.LP
See the
.B EXAMPLES
section for information about how to retrieve a
``.'' separated Internet
.B IP
address string from the
.IR h_addr_list
field of
.BR "struct hostent" .
.sp
.LP
The
.BR gethostbyname() ,
.BR gethostbyname_r() ,
.BR gethostbyaddr() ,
and
.B gethostbyaddr_r()
functions each return a pointer to a \fBstruct hostent\fR if they successfully locate the requested entry; otherwise they
return
.IR NULL .
.sp
.LP
The
.B gethostent()
and
.B gethostent_r()
functions each return a
pointer to a
.B "struct hostent"
if they successfully enumerate an entry;
otherwise they return
.IR NULL ,
indicating the end of the enumeration.
.sp
.LP
The
.BR gethostbyname() ,
.BR gethostbyaddr() ,
and
.BR gethostent()
functions use static storage, so returned data must be copied before a
subsequent call to any of these functions if the data is to be saved.
.sp
.LP
When the pointer returned by the reentrant functions
.BR gethostbyname_r() ,
.BR gethostbyaddr_r() ,
and
.BR gethostent_r()
is not
.IR NULL ,
it is always equal to the
.I result
pointer that was
supplied by the caller.
.sp
.LP
The
.B sethostent()
and
.B endhostent()
functions return
.B 0
on
success.
.SH ERRORS
.sp
.LP
The reentrant functions
.BR gethostbyname_r() ,
.BR gethostbyaddr_r() ,
and
.B gethostent_r()
will return
.I NULL
and set
.I errno
to
.B ERANGE
if the length of the buffer supplied by caller is not large
enough to store the result. See
.BR Intro (2)
for the proper usage and
interpretation of
.B errno
in multithreaded applications.
.sp
.LP
The reentrant functions
.B gethostbyname_r()
and
.BR gethostbyaddr_r()
set the integer pointed to by
.I h_errnop
to one of these values in case
of error.
.sp
.LP
On failures, the non-reentrant functions
.B gethostbyname()
and
.B gethostbyaddr()
set a global integer
.I h_errno
to indicate one of
these error codes (defined in
.BR <netdb.h> ):
.BR HOST_NOT_FOUND ,
.BR TRY_AGAIN ,
.BR NO_RECOVERY ,
.BR NO_DATA ,
and
.BR NO_ADDRESS .
.sp
.LP
If a resolver is provided with a malformed address, or if any other error
occurs before
.B gethostbyname()
.RB "is resolved, then" " gethostbyname()"
returns an internal error with a value of \(mi1.
.sp
.LP
The
.B gethostbyname()
function will set
.I h_errno
to
.B NETDB_INTERNAL
when it returns a
.I NULL
value.
.SH EXAMPLES
.LP
.B Example 1
Using
.BR gethostbyaddr()
.sp
.LP
Here is a sample program that gets the canonical name, aliases, and ``.''
separated Internet
.B IP
addresses for a given ``.'' separated
.B IP
address:

.sp
.in +2
.nf
#include <stdio.h>
#include <stdlib.h
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
int main(int argc, const char **argv)
{
	in_addr_t addr;
	struct hostent *hp;
	char **p;
	if (argc != 2) {
	    (void) printf("usage: %s IP-address\en", argv[0]);
	    exit (1);
	}
	if ((int)(addr = inet_addr(argv[1])) == -1) {
	    (void) printf("IP-address must be of the form a.b.c.d\en");
	    exit (2);
	}
	hp = gethostbyaddr((char *)&addr, 4, AF_INET);
	if (hp == NULL) {
	    (void) printf("host information for %s not found\en", argv[1]);
	    exit (3);
	}
	for (p = hp->h_addr_list; *p != 0; p++) {
	    struct in_addr in;
	    char **q;
	    (void) memcpy(&in.s_addr, *p, sizeof (in.s_addr));
         (void) printf("%s\t%s", inet_ntoa(in), hp\(mi>h_name);
	    for (q = hp->h_aliases; *q != 0; q++)
	        (void) printf(" %s", *q);
	    (void) putchar('\en');
	}
	exit (0);
}
.fi
.in -2

.sp
.LP
Note that the preceding sample program is unsafe for use in multithreaded
applications.

.SH FILES
.sp
.ne 2
.mk
.na
.B /etc/hosts
.ad
.RS 22n
.rt
hosts file that associates the names of hosts with their Internet Protocol
(IP) addresses
.RE

.sp
.ne 2
.mk
.na
.B /etc/netconfig
.ad
.RS 22n
.rt
network configuration database
.RE

.sp
.ne 2
.mk
.na
.B /etc/nsswitch.conf
.ad
.RS 22n
.rt
configuration file for the name service switch
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelT{
See \fBReentrant Interfaces\fR in the \fBDESCRIPTION\fR section.
T}
.TE

.SH SEE ALSO
.sp
.LP
.BR Intro (2),
.BR Intro (3),
.BR byteorder (3SOCKET),
.BR inet (3SOCKET),
.BR netdb.h (3HEAD),
.BR netdir (3NSL),
.BR hosts (4),
.BR netconfig (4),
.BR nss (4),
.BR nsswitch.conf (4),
.BR attributes (5)
.SH WARNINGS
.sp
.LP
The reentrant interfaces
.BR gethostbyname_r() ,
.BR gethostbyaddr_r() ,
and
.B gethostent_r()
are included in this release on an uncommitted
basis only and are subject to change or removal in future minor releases.
.SH NOTES
.sp
.LP
To ensure that they all return consistent results,
.BR gethostbyname() ,
.BR gethostbyname_r() ,
and
.B netdir_getbyname()
are implemented in
terms of the same internal library function. This function obtains the
system-wide source lookup policy based on the
.B inet
family entries in
.BR netconfig (4)
and the
.B hosts:
entry in
.BR nsswitch.conf (4).
Similarly,
.BR gethostbyaddr() ,
.BR gethostbyaddr_r() ,
and
.B netdir_getbyaddr()
are implemented in terms of the same internal
library function. If the
.B inet
family entries in
.BR netconfig (4)
have a ``-'' in the last column for
.B nametoaddr
libraries, then the
entry for
.B hosts
.RB "in " nsswitch.conf " will be used; " nametoaddr 
libraries in that column will be used, and
.B nsswitch.conf
will not be
consulted.
.sp
.LP
There is no analogue of
.B gethostent()
and
.B gethostent_r()
in the
netdir functions, so these enumeration functions go straight to the
.B hosts
entry in
.BR nsswitch.conf .
Thus enumeration can return
results from a different source than that used by
.BR gethostbyname() ,
.BR gethostbyname_r() ,
.BR gethostbyaddr() ,
and
.BR gethostbyaddr_r() .
.sp
.LP
All the functions that return a
.B "struct hostent"
must always return the
.I canonical name
in the
.I h_name
field. This name, by definition, is
the well-known and official hostname shared between all aliases and all
addresses. The underlying source that satisfies the request determines the
mapping of the input name or address into the set of names and addresses in
.BR hostent .
Different sources might do that in different ways. If there
is more than one alias and more than one address in
.BR hostent ,
no
pairing is implied between them.
.sp
.LP
The system attempts to put those addresses that are on the same subnet as
the caller before addresses that are on different subnets. However, if
address sorting is disabled by setting
.B SORT_ADDRS
to FALSE in the
.B /etc/default/nss
file, the system does not put the local subnet
addresses first. See
.BR nss (4)
for more information.
.sp
.LP
When compiling multithreaded applications, see
.BR Intro (3),
.BR "MULTITHREADED APPLICATIONS" ,
for information about the use of the
.B _REENTRANT
flag.
.sp
.LP
Use of the enumeration interfaces
.B gethostent()
and
.B gethostent_r()
is discouraged; enumeration might not be supported for
all database sources. The semantics of enumeration are discussed further in
.BR nsswitch.conf (4).
.sp
.LP
The current implementations of these functions only return or accept
addresses for the Internet address family (type
.BR AF_INET ).
.sp
.LP
The form for an address of type
.B AF_INET
is a
.BR "struct in_addr"
defined in
.RB < netinet/in.h >.
The functions described in
.BR inet (3SOCKET),
and illustrated in the
.B EXAMPLES
section, are
helpful in constructing and manipulating addresses in this form.
