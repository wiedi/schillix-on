'\" te
.\" Copyright 1994, The X/Open Company Ltd., All Rights Reserved.
.\" Portions Copyright 1989 AT&T.
.\" Portions Copyright (c) 1998, Sun Microsystems, Inc., All Rights Reserved
.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online
.\" at http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open Group,
.\" have given us permission to reprint portions of their documentation.
.\"
.\" In the following statement, the phrase "this text" refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form in
.\" the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard
.\" for Information Technology -- Portable Operating System Interface (POSIX),
.\" The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the
.\" Institute of Electrical and Electronics Engineers, Inc and The Open Group.
.\" In the event of any discrepancy between these versions and the original
.\" IEEE and The Open Group Standard, the original IEEE and The Open Group
.\" Standard is the referee document.
.\"
.\" The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH t_optmgmt 3NSL "7 May 1998" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
t_optmgmt \- manage options for a transport endpoint
.SH SYNOPSIS
.LP
.nf
#include <xti.h>



\fBint\fR \fBt_optmgmt\fR(\fBint\fR \fIfd\fR, \fBconst struct t_optmgmt *\fIreq\fR, \fBstruct t_optmgmt *\fIret\fR);
.fi

.SH DESCRIPTION
.sp
.LP
This routine is part of the
.B XTI
interfaces which evolved from the
\fBTLI\fR interfaces. \fBXTI\fR represents the future evolution of these
interfaces. However,
.B TLI
interfaces are supported for compatibility.
When using a
.B TLI
routine that has the same name as an
.BR XTI
routine, the 
.B tiuser.h
header file must be used.  Refer to the
\fBTLI COMPATIBILITY\fR section for a description of differences
between the two interfaces.
.sp
.LP
The
.B t_optmgmt()
function enables a transport user to retrieve, verify
or negotiate protocol options with the transport provider. The argument
\fIfd\fR identifies a transport endpoint.
.sp
.LP
The
.I req
and
.I ret
arguments point to a
.B t_optmgmt
structure
containing the following members:
.sp
.in +2
.nf
\fBstruct netbuf opt;
t_scalar_t    flags;\fR
.fi
.in -2

.sp
.LP
The
.I opt
field identifies protocol options and the \fIflags\fR field
is used to specify the action to take with those options.
.sp
.LP
The options are represented by a \fBnetbuf\fR structure in a manner similar
to the address in
.BR t_bind "(3NSL). The argument"
.I req
is used to
request a specific action of the provider and to send options to the
provider. The argument
.I len
specifies the number of bytes in the
options, \fIbuf\fR points to the options buffer, and
.I maxlen
has no
meaning for the
.I req
argument. The transport provider may return
options and flag values to the user through
.IR ret .
For
.IR ret ,
\fImaxlen\fR specifies the maximum size of the options buffer and \fIbuf\fR
points to the buffer where the options are to be placed. If 
.I maxlen
in
\fIret\fR is set to zero, no options values are returned. On return,
\fIlen\fR specifies the number of bytes of options returned. The value in
\fImaxlen\fR has no meaning for the \fIreq\fR argument, but must be set in
the
.I ret
argument to specify the maximum number of bytes the options
buffer can hold.
.sp
.LP
Each option in the options buffer is of the form
.BR "struct t_opthdr"
possibly followed by an option value.
.sp
.LP
The
.I level
field of
.B "struct t_opthdr"
identifies the XTI level or
a protocol of the transport provider. The
.I name
field identifies the
option within the level, and
.I len
contains its total length; that is,
the length of the option header
.B t_opthdr
plus the length of the option
value. If
.B t_optmgmt()
is called with the action 
.BR T_NEGOTIATE
set, the
.I status
field of the returned options contains information
about the success or failure of a negotiation.
.sp
.LP
Several options can be concatenated. The option user has, however to ensure
that each options header and value part starts at a boundary appropriate for
the architecture\(hyspecific alignment rules. The macros
\fBT_OPT_FIRSTHDR\fR(nbp), \fBT_OPT_NEXTHDR\fR (nbp,tohp),
\fBT_OPT_DATA\fR(tohp) are provided for that purpose.
.sp
.ne 2
.mk
.na
.B T_OPT_DATA(nhp)
.ad
.RS 29n
.rt
If argument is a pointer to a
.B t_opthdr
structure, this macro returns
an unsigned character pointer to the data associated with the
.BR t_opthdr .
.RE

.sp
.ne 2
.mk
.na
.B T_OPT_NEXTHDR(nbp, tohp)
.ad
.RS 29n
.rt
If the first argument is a pointer to a netbuf structure associated with an
option buffer and second argument is a pointer to a
.B t_opthdr
structure
within that option buffer, this macro returns a pointer to the next
\fBt_opthdr\fR structure or a null pointer if this \fBt_opthdr\fR is the
last
.B t_opthdr
in the option buffer.
.RE

.sp
.ne 2
.mk
.na
.B T_OPT_FIRSTHDR(tohp)
.ad
.RS 29n
.rt
If the argument is a pointer to a \fBnetbuf\fR structure associated with an
option buffer, this macro returns the pointer to the first \fBt_opthdr\fR
structure in the associated option buffer, or a null pointer if there is no
option buffer associated with this \fBnetbuf\fR or if it is not possible or
the associated option buffer is too small to accommodate even the first
aligned option header.
.sp
\fBT_OPT_FIRSTHDR\fR is useful for finding an appropriately aligned start
of the option buffer.
.B T_OPT_NEXTHDR
is useful for moving to the start
of the next appropriately aligned option in the option buffer. Note that
\fBOPT_NEXTHDR\fR is also available for backward compatibility requirements.
\fBT_OPT_DATA\fR is useful for finding the start of the data part in the
option buffer where the contents of its values start on an appropriately
aligned boundary.
.sp
If the transport user specifies several options on input, all options must
address the same level.
.sp
If any option in the options buffer does not indicate the same level as the
first option, or the level specified is unsupported, then the
\fBt_optmgmt()\fR request will fail with
.BR TBADOPT .
If the error is
detected, some options have possibly been successfully negotiated. The
transport user can check the current status by calling
.BR t_optmgmt()
with the 
.B T_CURRENT
flag set.
.sp
The \fIflags\fR field of \fIreq\fR must specify one of the following
actions:
.RE

.sp
.ne 2
.mk
.na
.B T_NEGOTIATE
.ad
.RS 29n
.rt
This action enables the transport user to negotiate option values.
.sp
The user specifies the options of interest and their values in the buffer
specified by \fIreq\(->opt.buf\fR and \fIreq\(->opt.len\fR. The negotiated
option values are returned in the buffer pointed to by \fIret->opt.buf\fR.
The
.I status
field of each returned option is set to indicate the result
of the negotiation. The value is 
.B T_SUCCESS
if the proposed value was
negotiated,
.B T_PARTSUCCESS
if a degraded value was negotiated,
\fBT_FAILURE\fR if the negotiation failed (according to the negotiation
rules),
.B T_NOTSUPPORT
if the transport provider does not support this
option or illegally requests negotiation of a privileged option, and
\fBT_READONLY\fR if modification of a read-only option was requested. If the
status is 
.B "T_SUCCESS, T_FAILURE,"
\fBT_NOTSUPPORT\fR or
\fBT_READONLY,\fR the returned option value is the same as the one requested
on input.
.sp
The overall result of the negotiation is returned in \fIret\(->flags\fR.
.sp
This field contains the worst single result, whereby the rating is done
according to the order 
.BR "T_NOTSUPPORT, T_READONLY,"
.B "T_FAILURE, T_PARTSUCCESS,"
.B T_SUCCESS.
The value
\fBT_NOTSUPPORT\fR is the worst result and  \fBT_SUCCESS\fR is the best.
.sp
For each level, the option 
.B T_ALLOPT
can be requested on input. No
value is given with this option; only the
.B t_opthdr
part is specified.
This input requests to negotiate all supported options of this level to
their default values. The result is returned option by option in
\fIret\(->opt.buf\fR. Note that depending on the state of the transport
endpoint, not all requests to negotiate the default value may be
successful.
.RE

.sp
.ne 2
.mk
.na
.B T_CHECK
.ad
.RS 29n
.rt
This action enables the user to verify whether the options specified in
\fIreq\fR are supported by the transport provider.If an option is specified
with no option value (it consists only of a
.B t_opthdr
structure), the
option is returned with its
.I status
field set to 
.B T_SUCCESS
if it
is supported, 
.B T_NOTSUPPORT
if it is not or needs additional user
privileges, and 
.B T_READONLY
if it is read-only (in the current XTI
state). No option value is returned.
.sp
If an option is specified with an option value, the
.I status
field of
the returned option has the same value, as if the user had tried to
negotiate this value with 
.B T_NEGOTIATE.
If the status is
.BR T_SUCCESS ,
.BR T_FAILURE ,
\fBT_NOTSUPPORT\fR or  \fBT_READONLY\fR,
the returned option value is the same as the one requested on input.
.sp
The overall result of the option checks is returned in \fIret\(->flags\fR.
This field contains the worst single result of the option checks, whereby
the rating is the same as for 
.B T_NEGOTIATE
\&.
.sp
Note that no negotiation takes place. All currently effective option values
remain unchanged.
.RE

.sp
.ne 2
.mk
.na
.B T_DEFAULT
.ad
.RS 29n
.rt
This action enables the transport user to retrieve the default option
values. The user specifies the options of interest in \fIreq\(->opt.buf\fR.
The option values are irrelevant and will be ignored; it is sufficient to
specify the
.B t_opthdr
part of an option only. The default values are
then returned in \fIret\(->opt.buf\fR.
.sp
The
.I status
field returned is 
.B T_NOTSUPPORT
if the protocol
level does not support this option or the transport user illegally requested
a privileged option, 
.B T_READONLY
if the option is read-only, and set
to
.B T_SUCCESS
in all other cases. The overall result of the request is
returned in \fIret\(->flags\fR. This field contains the worst single result,
whereby the rating is the same as for 
.BR T_NEGOTIATE.
.sp
For each level, the option 
.B T_ALLOPT
can be requested on input. All
supported options of this level with their default values are then returned.
In this case, \fIret\(->opt.maxlen\fR must be given at least the value
\fIinfo\(->options\fR before the call. See \fBt_getinfo\fR(3NSL) and
.BR t_open (3NSL).
.RE

.sp
.ne 2
.mk
.na
.B T_CURRENT
.ad
.RS 29n
.rt
This action enables the transport user to retrieve the currently effective
option values. The user specifies the options of interest in
\fIreq\(->opt.buf\fR. The option values are irrelevant and will be ignored;
it is sufficient to specifiy the
.B t_opthdr
part of an option only. The
currently effective values are then returned in \fIreq\(->opt.buf\fR.
.sp
The
.I status
field returned is 
.B T_NOTSUPPORT
if the protocol
level does not support this option or the transport user illegally requested
a privileged option, T_READONLY if the option is read-only, and set to
\fBT_SUCCESS\fR in all other cases. The overall result of the request is
returned in \fIret\(->flags\fR. This field contains the worst single result,
whereby the rating is the same as for 
.BR T_NEGOTIATE.
.sp
For each level, the option 
.B T_ALLOPT
can be requested on input. All
supported options of this level with their currently effective values are
then returned.
.sp
The option 
.B T_ALLOPT
can only be used with
.B t_optmgmt()
and the
actions
.B "T_NEGOTIATE, T_DEFAULT"
and 
.B T_CURRENT.
It can be
used with any supported level and addresses all supported options of this
level. The option has no value; it consists of a
.B t_opthdr
only.  Since
in a
.B t_optmgmt()
call only options of one level may be addressed, this
option should not be requested together with other options. The function
returns as soon as this option has been processed.
.sp
Options are independently processed in the order they appear in the input
option buffer. If an option is multiply input, it depends on the
implementation whether it is multiply output or whether it is returned only
once.
.sp
Transport providers may not be able to provide an interface capable of
supporting
.B T_NEGOTIATE
and/or 
.B T_CHECK
functionalities. When
this is the case, the error
.B TNOTSUPPORT
is returned.
.sp
The function
.B t_optmgmt()
may block under various circumstances and
depending on the implementation. The function will block, for instance, if
the protocol addressed by the call resides on a separate controller. It may
also block due to flow control constraints; that is, if data sent previously
across this transport endpoint has not yet been fully processed. If the
function is interrupted by a signal, the option negotiations that have been
done so far may remain valid. The behavior of the function is not changed if
\fBO_NONBLOCK\fR is set.
.RE

.SH RETURN VALUES
.sp
.LP
Upon successful completion, a value of 
.B 0
is returned. Otherwise, a
value of \(mi1 is returned and
.B t_errno
is set to indicate an error.
.SH VALID STATES
.sp
.LP
ALL - apart from \fBT_UNINIT\fR.
.SH ERRORS
.sp
.LP
On failure,
.B t_errno
is set to one of the following:
.sp
.ne 2
.mk
.na
.B TBADF
.ad
.RS 15n
.rt
The specified file descriptor does not refer to a transport endpoint.
.RE

.sp
.ne 2
.mk
.na
.B TBADFLAG
.ad
.RS 15n
.rt
An invalid flag was specified.
.RE

.sp
.ne 2
.mk
.na
.B TBADOPT
.ad
.RS 15n
.rt
The specified options were in an incorrect format or contained illegal
information.
.RE

.sp
.ne 2
.mk
.na
.B TBUFOVFLW
.ad
.RS 15n
.rt
The number of bytes allowed for an incoming argument
.I (maxlen)
is
greater than 
.B 0
but not sufficient to store the value of that
argument. The information to be returned in
.I ret
will be discarded.
.RE

.sp
.ne 2
.mk
.na
.B TNOTSUPPORT
.ad
.RS 15n
.rt
This action is not supported by the transport provider.
.RE

.sp
.ne 2
.mk
.na
.B TOUTSTATE
.ad
.RS 15n
.rt
The communications endpoint referenced by  \fIfd\fR is not in one of the
states in which a call to this function is valid.
.RE

.sp
.ne 2
.mk
.na
.B TPROTO
.ad
.RS 15n
.rt
This error indicates that a communication problem has been detected between
XTI and the transport provider for which there is no other suitable XTI
error
.BR (t_errno) .
.RE

.sp
.ne 2
.mk
.na
.B TSYSERR
.ad
.RS 15n
.rt
A system error has occurred during execution of this function.
.RE

.SH TLI COMPATIBILITY
.sp
.LP
The
.B XTI
and
.B TLI
interface definitions have common names but use
different header files. This, and other semantic differences between the two
interfaces are described in the subsections below.
.SS "Interface Header"
.sp
.LP
The
.B XTI
interfaces use the header file,
.BR xti.h .
.B TLI
interfaces should
.I not
use this header.  They should use the header:
.sp
.in +2
.nf
#include <tiuser.h>
.fi
.in -2

.SS "Error Description Values"
.sp
.LP
The
.B t_errno
value
.B TPROTO
can be set by the
.B XTI
interface
but not by the
.B TLI
interface.
.sp
.LP
The
.B t_errno
values that this routine can return under different
circumstances than its
.B XTI
counterpart are
.B TACCES
and
.BR TBUFOVFLW .
.sp
.ne 2
.mk
.na
.B TACCES
.ad
.RS 14n
.rt
can be returned to indicate that the user does not have permission to
negotiate the specified options.
.RE

.sp
.ne 2
.mk
.na
.B TBUFOVFLW
.ad
.RS 14n
.rt
can be returned even when the
.B maxlen
field of the corresponding
buffer has been set to zero.
.RE

.SS "Option Buffers"
.sp
.LP
The format of the options in an
.B opt
buffer is dictated by the
transport provider. Unlike the
.B XTI
interface, the
.B TLI
interface
does not fix the buffer format. The macros \fBT_OPT_DATA,\fR
\fBT_OPT_NEXTHDR,\fR and \fBT_OPT_FIRSTHDR\fR described for \fBXTI\fR are
not available for use by TLI interfaces.
.SS "Actions"
.sp
.LP
The semantic meaning of various action values for the \fBflags\fR field of
\fIreq\fR differs between the \fBTLI\fR and \fBXTI\fR interfaces. \fBTLI\fR
interface users should heed the following descriptions of the actions:
.sp
.ne 2
.mk
.na
.B T_NEGOTIATE
.ad
.RS 16n
.rt
This action enables the user to negotiate the values of the options
specified in
.I req
with the transport provider. The provider will
evaluate the requested options and negotiate the values, returning the
negotiated values through
.IR ret .
.RE

.sp
.ne 2
.mk
.na
.B T_CHECK
.ad
.RS 16n
.rt
This action enables the user to verify whether the options specified in
\fIreq\fR are supported by the transport provider. On return, the
\fBflags\fR field of \fIret\fR will have either \fBT_SUCCESS\fR or
\fBT_FAILURE\fR set to indicate to the user whether the options are
supported. These flags are only meaningful for the
.B T_CHECK
request.
.RE

.sp
.ne 2
.mk
.na
.B T_DEFAULT
.ad
.RS 16n
.rt
This action enables a user to retrieve the default options supported by the
transport provider into the
.B opt
field of
.IR ret .
In
.IR req ,
the
\fBlen\fR field of \fBopt\fR must be zero and the \fBbuf\fR field may be
.IR NULL .
.RE

.SS "Connectionless Mode"
.sp
.LP
If issued as part of the connectionless mode service,
.B t_optmgmt()
may
block due to flow control constraints. The function will not complete until
the transport provider has processed all previously sent data units.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR close (2),
.BR poll (2),
.BR select (3C),
.BR t_accept (3NSL),
.BR t_alloc (3NSL),
.BR t_bind (3NSL),
.BR t_close (3NSL),
.BR t_connect (3NSL),
\fBt_getinfo\fR(3NSL), \fBt_listen\fR(3NSL),
.BR t_open (3NSL),
.BR t_rcv (3NSL),
.BR t_rcvconnect (3NSL),
.BR t_rcvudata (3NSL),
.BR t_snddis (3NSL),
.BR attributes (5)
