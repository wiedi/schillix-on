'\" te
.\" Copyright 1989 AT&T
.\" Copyright (C) 2005, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH rpc_svc_create 3NSL "22 Mar 2005" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
rpc_svc_create, svc_control, svc_create, svc_destroy, svc_dg_create,
svc_fd_create, svc_raw_create, svc_tli_create, svc_tp_create, svc_vc_create,
svc_door_create \- server handle creation routines
.SH SYNOPSIS
.LP
.nf
#include <rpc/rpc.h>

\fBbool_t\fR \fBsvc_control\fR(\fBSVCXPRT *\fIsvc\fR, \fBconst uint_t\fR \fIreq\fR, \fBvoid *\fIinfo\fR);
.fi

.LP
.nf
\fBint\fR \fBsvc_create\fR(\fBconst void (*\fIdispatch\fR)const struct svc_req *,
     const SVCXPRT *, \fBconst rpcprog_t\fR \fIprognum\fR, \fBconst rpcvers_t\fR \fIversnum\fR,
     \fBconst char *\fInettype\fR);
.fi

.LP
.nf
\fBvoid\fR \fBsvc_destroy\fR(\fBSVCXPRT *\fIxprt\fR);
.fi

.LP
.nf
\fBSVCXPRT *\fBsvc_dg_create\fR(\fBconst int\fR \fIfildes\fR, \fBconst uint_t\fR \fIsendsz\fR,
     \fBconst uint_t\fR \fIrecvsz\fR);
.fi

.LP
.nf
\fBSVCXPRT *\fBsvc_fd_create\fR(\fBconst int\fR \fIfildes\fR, \fBconst uint_t\fR \fIsendsz\fR,
     \fBconst uint_t\fR \fIrecvsz\fR);
.fi

.LP
.nf
\fBSVCXPRT *\fBsvc_raw_create\fR(void)
.fi

.LP
.nf
\fBSVCXPRT *\fBsvc_tli_create\fR(\fBconst int\fR \fIfildes\fR, \fBconst struct netconfig *\fInetconf\fR,
     \fBconst struct t_bind *\fIbind_addr\fR, \fBconst uint_t\fR \fIsendsz\fR,
     \fBconst uint_t\fR \fIrecvsz\fR);
.fi

.LP
.nf
\fBSVCXPRT *\fBsvc_tp_create\fR(\fBconst void (*\fIdispatch\fR)
     const struct svc_req *, const SVCXPRT *), \fBconst rpcprog_t\fR \fIprognum\fR,
     \fBconst rpcvers_t\fR \fIversnum\fR, \fBconst struct netconfig *\fInetconf\fR);
.fi

.LP
.nf
\fBSVCXPRT *\fBsvc_vc_create\fR(\fBconst int\fR \fIfildes\fR, \fBconst uint_t\fR \fIsendsz\fR,
     \fBconst uint_t\fR \fIrecvsz\fR);
.fi

.LP
.nf
\fBSVCXPRT *\fBsvc_door_create\fR(\fBvoid (*\fIdispatch\fR)(struct svc_req *, SVCXPRT *),
     \fBconst rpcprog_t\fR \fIprognum\fR, \fBconst rpcvers_t\fR \fIversnum\fR,
     \fBconst uint_t\fR \fIsendsz\fR);
.fi

.SH DESCRIPTION
.sp
.LP
These routines are part of the
.B RPC
library which allows C language
programs to make procedure calls on servers across the network. These
routines deal with the creation of service handles. Once the handle is
created, the server can be invoked by calling
.BR svc_run() .
.SS "Routines"
.sp
.LP
See \fBrpc\fR(3NSL) for the definition of the
.B SVCXPRT
data
structure.
.sp
.ne 2
.mk
.na
.B svc_control()
.ad
.RS 21n
.rt
A function to change or retrieve information about a service object.
.I req
indicates the type of operation and
.I info
is a pointer to the
information. The supported values of
.IR req ,
their argument types, and
what they do are:
.sp
.ne 2
.mk
.na
.B SVCGET_VERSQUIET
.ad
.RS 25n
.rt
If a request is received for a program number served by this server but the
version number is outside the range registered with the server, an
.B RPC_PROGVERSMISMATCH
error will normally be returned.  \fIinfo\fR
should be a pointer to an integer. Upon successful completion of the
.B SVCGET_VERSQUIET
request,  *\fIinfo\fR contains an integer which
describes the server's current behavior:
.B 0
indicates normal server
behavior, that is, an
.B RPC_PROGVERSMISMATCH
error will be returned.
.B 1
indicates that the out of range request will be silently ignored.
.RE

.sp
.ne 2
.mk
.na
.B SVCSET_VERSQUIET
.ad
.RS 25n
.rt
If a request is received for a program number served by this server but the
version number is outside the range registered with the server, an
.B RPC_PROGVERSMISMATCH
error will normally be returned.  It is sometimes
desirable to change this behavior.
.I info
should be a pointer to an
integer which is either
.BR 0 ,
indicating normal server behavior and an
.B RPC_PROGVERSMISMATCH
error will be returned, or
.BR 1 ,
indicating
that the out of range request should be silently ignored.
.RE

.sp
.ne 2
.mk
.na
.B SVCGET_XID
.ad
.RS 25n
.rt
Returns the transaction
.B ID
of connection\(mioriented and
connectionless transport service calls. The transaction
.B ID
assists in
uniquely identifying client requests for a given
.B RPC
version, program
number, procedure, and client. The transaction
.B ID
is extracted from
the service transport handle
.IR svc .
.I info
must be a pointer to an
unsigned long. Upon successful completion of the
.B SVCGET_XID
request,
*\fIinfo\fR contains the transaction
.BR ID .
Note that rendezvous and raw
service handles do not define a transaction
.BR ID .
Thus, if the service
handle is of rendezvous or raw type, and the request is of type
.B SVCGET_XID, svc_control()
will return
.BR FALSE .
Note also
that the transaction
.B ID
read by the server can be set by the client
through the suboption
.B CLSET_XID
in
.BR clnt_control() .
See
.BR clnt_create (3NSL)
.RE

.sp
.ne 2
.mk
.na
.B SVCSET_RECVERRHANDLER
.ad
.RS 25n
.rt
Attaches or detaches a disconnection handler to the service handle,
.IR svc ,
that will be called when a transport error arrives during the
reception of a request or when the server is waiting for a request and the
connection shuts down. This handler is only useful for a connection oriented
service handle.
.sp
.I *info
contains the address of the error handler to attach, or
.I NULL
to detach a previously defined one. The error handler has two
arguments. It has a pointer to the erroneous service handle. It also has an
integer that indicates if the full service is closed (when equal to zero),
or that only one connection on this service is closed (when not equal to
zero).
.sp
.in +2
.nf
void handler (const SVCXPRT *svc, const bool_t isAConnection);
.fi
.in -2

With the service handle address,
.IR svc ,
the error handler is able to
detect which connection has failed and to begin an error recovery process.
The error handler can be called by multiple threads and should be
implemented in an MT-safe way.
.RE

.sp
.ne 2
.mk
.na
.B SVCGET_RECVERRHANDLER
.ad
.RS 25n
.rt
Upon successful completion of the
.B SVCGET_RECVERRHANDLER
request,
.I *info
contains the address of the handler for receiving errors. Upon
failure,
.I *info
contains
.IR NULL .
.RE

.sp
.ne 2
.mk
.na
.B SVCSET_CONNMAXREC
.ad
.RS 25n
.rt
Set the maximum record size (in bytes) and enable non-blocking mode for
this service handle. Value can be set and read for both connection and
non-connection oriented transports, but is silently ignored for the
non-connection oriented case. The
.I info
argument should be a pointer to
an
.BR int .
.RE

.sp
.ne 2
.mk
.na
.B SVCGET_CONNMAXREC
.ad
.RS 25n
.rt
Get the maximum record size for this service handle. Zero means no maximum
in effect and the connection is in blocking mode. The result is not
significant for non-connection oriented transports. The
.I info
argument
should be a pointer to an
.BR int .
.RE

This routine returns TRUE if the operation was successful. Otherwise, it
returns false.
.RE

.sp
.ne 2
.mk
.na
.B svc_create()
.ad
.RS 21n
.rt
.B svc_create()
creates server handles for all the transports belonging
to the class
.IR nettype .
.sp
.I nettype
defines a class of transports which can be used for a
particular application. The transports are tried in left to right order in
.B NETPATH
variable or in top to bottom order in the netconfig database.
If
.I nettype
is
.I NULL,
it defaults to
.BR netpath .
.sp
.B svc_create()
registers itself with the
.B rpcbind
service (see
.BR rpcbind (1M)).
.I dispatch
is called when there is a remote
procedure call for the given
.I prognum
and
.IR versnum ;
this requires
calling
.B svc_run()
(see
.B svc_run()
in
.BR rpc_svc_reg (3NSL)).
If
.B svc_create()
succeeds, it returns the number of server handles it
created, otherwise it returns
.B 0
and an error message is logged.
.RE

.sp
.ne 2
.mk
.na
.B svc_destroy()
.ad
.RS 21n
.rt
A function macro that destroys the
.B RPC
service handle
.IR xprt .
Destruction usually involves deallocation of private data structures,
including
.I xprt
itself.  Use of
.I xprt
is undefined after calling
this routine.
.RE

.sp
.ne 2
.mk
.na
.B svc_dg_create()
.ad
.RS 21n
.rt
This routine creates a connectionless
.B RPC
service handle, and returns
a pointer to it. This routine returns
.I NULL
if it fails, and an error
message is logged.
.I sendsz
and
.I recvsz
are parameters used to
specify the size of the buffers. If they are
.BR 0 ,
suitable defaults are
chosen. The file descriptor
.I fildes
should be open and bound. The
server is not registered with
.BR rpcbind (1M).
.sp
Warning: since connectionless-based
.B RPC
messages can only hold
limited amount of encoded data, this transport cannot be used for procedures
that take large arguments or return huge results.
.RE

.sp
.ne 2
.mk
.na
.B svc_fd_create()
.ad
.RS 21n
.rt
This routine creates a service on top of an open and bound file descriptor,
and returns the handle to it. Typically, this descriptor is a connected file
descriptor for a connection-oriented transport.
.I sendsz
and
.I recvsz
indicate sizes for the send and receive buffers. If they are
.BR 0 ,
reasonable defaults are chosen. This routine returns
.I NULL
if
it fails, and an error message is logged.
.RE

.sp
.ne 2
.mk
.na
.B svc_raw_create()
.ad
.RS 21n
.rt
This routine creates an
.B RPC
service handle and returns a pointer to
it. The transport is really a buffer within the process's address space, so
the corresponding
.B RPC
client should live in the same address space;
(see
.B clnt_raw_create()
in
.BR rpc_clnt_create "(3NSL)). This routine"
allows simulation of
.B RPC
and acquisition of
.B RPC
overheads (such
as round trip times), without any kernel and networking interference. This
routine returns
.I NULL
if it fails, and an error message is logged.
.sp
Note:
.B svc_run()
should not be called when the raw interface is being
used.
.RE

.sp
.ne 2
.mk
.na
.B svc_tli_create()
.ad
.RS 21n
.rt
This routine creates an
.B RPC
server handle, and returns a pointer to
it.
.I fildes
is the file descriptor on which the service is listening.
If
.IR fildes " is"
.BR RPC_ANYFD ,
it opens a file descriptor on the
transport specified by
.IR netconf .
If the file descriptor is unbound and
.I bindaddr
is non-null
.I fildes
is bound to the address specified by
.IR bindaddr ,
otherwise
.I fildes
is bound to a default address chosen
by the transport. In the case where the default address is chosen, the
number of outstanding connect requests is set to 8 for connection-oriented
transports. The user may specify the size of the send and receive buffers
with the parameters
.I sendsz
and
.I "recvsz ;"
values of
.BR 0
choose suitable defaults. This routine returns
.I NULL
if it fails, and
an error message is logged. The server is not registered with the
.BR rpcbind (1M)
service.
.RE

.sp
.ne 2
.mk
.na
.B svc_tp_create()
.ad
.RS 21n
.rt
.B svc_tp_create()
creates a server handle for the network specified by
.IR netconf ,
and registers itself with the
.B rpcbind
service.
.I dispatch
is called when there is a remote procedure call for the given
.I prognum
and
.IR versnum ;
this requires calling
.BR svc_run() .
.B svc_tp_create()
returns the service handle if it succeeds, otherwise a
.I NULL
is returned and an error message is logged.
.RE

.sp
.ne 2
.mk
.na
.B svc_vc_create()
.ad
.RS 21n
.rt
This routine creates a connection-oriented
.B RPC
service and returns a
pointer to it. This routine returns
.I NULL
if it fails, and an error
message is logged. The users may specify the size of the send and receive
buffers with the parameters
.I sendsz
and
.IR recvsz ;
values of
.BR 0
choose suitable defaults. The file descriptor
.I fildes
should be open
and bound. The server is not registered with the
.BR rpcbind (1M)
service.
.RE

.sp
.ne 2
.mk
.na
.B svc_door_create()
.ad
.RS 21n
.rt
This routine creates an RPC server handle over doors and returns a pointer
to it. Doors is a transport mechanism that facilitates fast data transfer
between processes on the same machine. for the given program The user may
set the size of the send buffer with the parameter
.IR sendsz .
If
.I sendsz
is 0, the corresponding default buffer size is 16 Kbyte. If
successful, the
.B svc_door_create()
routine returns the service handle.
Otherwise it returns
.I NULL
and sets a value for
.BR rpc_createerr .
The server is not registered with
.BR rpcbind "(1M). The"
.B SVCSET_CONNMAXREC
and
.BR "SVCGET_CONNMAXREC svc_control()"
requests can be used to set and change the maximum allowed request size for
the doors transport.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
ArchitectureAll
_
AvailabilitySUNWcsl (32-bit)
_
SUNWcslx (64-bit)
_
Interface StabilityEvolving
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR rpcbind (1M),
.BR rpc (3NSL),
.BR rpc_clnt_create (3NSL),
.BR rpc_svc_calls (3NSL),
.BR rpc_svc_err (3NSL),
.BR rpc_svc_reg (3NSL),
.BR attributes (5)
