'\" te
.\" Copyright 1989 AT&T
.\" Copyright (C) 2004, Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH ypclnt 3NSL "23 Jan 2004" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
ypclnt, yp_get_default_domain, yp_bind, yp_unbind, yp_match, yp_first,
yp_next, yp_all, yp_order, yp_master, yperr_string, ypprot_err \- NIS
Version 2 client interface
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fB-flag\fR.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lnsl\fR [ \fIlibrary\fR.\|.\|.]
#include <rpcsvc/ypclnt.h>
#include <rpcsvc/yp_prot.h>



\fBint\fR \fByp_bind\fR(\fBchar *\fIindomain\fR);
.fi

.LP
.nf
\fBvoid\fR \fByp_unbind\fR (\fBchar *\fIindomain\fR);
.fi

.LP
.nf
\fBint\fR \fByp_get_default_domain\fR(\fBchar **\fIoutdomain\fR);
.fi

.LP
.nf
\fBint\fR \fByp_match\fR(\fBchar *\fIindomain\fR, \fBchar *\fIinmap\fR, \fBchar *\fIinkey\fR, \fBint\fR \fIinkeylen\fR,
     \fBchar *\fBchar **\fIoutval\fR, \fBint *\fIoutvallen\fR);
.fi

.LP
.nf
\fBint\fR \fByp_first\fR(\fBchar *\fIindomain\fR, \fBchar *\fIinmap\fR, \fBchar **\fIoutkey\fR, \fBint *\fIoutkeylen\fR,
     \fBchar **\fIoutval\fR, \fBint *\fIoutvallen\fR);
.fi

.LP
.nf
\fBint\fR \fByp_next\fR(\fBchar *\fIindomain\fR, \fBchar *\fIinmap\fR, \fBchar *\fIinkey\fR, \fBint *\fIinkeylen\fR,
     \fBchar **\fIoutkey\fR, \fBint *\fIoutkeylen\fR, \fBchar **\fIoutval\fR,
     \fBint *\fIoutvallen\fR);
.fi

.LP
.nf
\fBint\fR \fByp_all\fR(\fBchar *\fIindomain\fR, \fBchar *\fIinmap\fR, \fBstruct ypall_callback *\fIincallback\fR);
.fi

.LP
.nf
\fBint\fR \fByp_order\fR(\fBchar *\fIindomain\fR, \fBchar *\fIinmap\fR, \fBunsigned long *\fIoutorder\fR);
.fi

.LP
.nf
\fBint\fR \fByp_master\fR(\fBchar *\fIindomain\fR, \fBchar *\fIinmap\fR, \fBchar **\fIoutname\fR);
.fi

.LP
.nf
\fBchar *\fByperr_string\fR(\fBint\fR \fIincode\fR);
.fi

.LP
.nf
\fBint\fR \fBypprot_err\fR(\fBchar *\fIdomain\fR);
.fi

.SH DESCRIPTION
.sp
.LP
This package of functions provides an interface to
.BR NIS ,
Network
Information Service Version 2, formerly referred to as
.BR YP .
In this
version of SunOS,
.B NIS
version 2 is supported only for compatibility
with previous versions. The recommended enterprise level information service
is
.B NIS+
or
.B NIS
version 3. See
.BR NIS+ (1).
The current SunOS
supports only the client interface to
.B NIS
version 2. This client
interface will in turn be served either by an existing
.B ypserv
process
running on another machine on the network that has an earlier version of
SunOS, or by a \fBNIS+\fR server running in "YP-compatibility mode". See
.BR rpc.nisd (1M).
The
.B NOTES
section in
.BR ypfiles (4)
discusses
the implications of being an
.B NIS
client of an
.B NIS+
server in
.BR "YP-compatibility mode" .
For commands used to access
.B NIS
from a
client machine, see \fBypbind\fR(1M),
.BR ypwhich (1),
.BR ypmatch (1),
and
.BR ypcat (1).
The package can be loaded from the standard library,
.BR /usr/lib/libnsl.so.1 .
.sp
.LP
All input parameter names begin with
.IR in .
Output parameters begin with
.IR out .
Output parameters of type
.B "char **"
should be addresses of
uninitialized character pointers. Memory is allocated by the NIS client
package using \fBmalloc\fR(3C) and can be freed by the user code if it has
no continuing need for it. For each
.I outkey
and
.IR outval ,
two extra
bytes of memory are allocated at the end that contain NEWLINE and
.IR null ,
respectively, but these two bytes are not reflected in
\fIoutkeylen\fR or
.IR outvallen .
The
.I indomain
and
.IR inmap
strings must be non-null and null-terminated. String parameters that are
accompanied by a count parameter may not be
.IR null ,
but they may point
to null strings, with the count parameter indicating this. Counted strings
need not be null-terminated.
.sp
.LP
All functions in this package of type
.I int
return
.B 0
if they
succeed. Otherwise, they return a failure code (\fBYPERR_\fIxxxx\fR).
Failure codes are described in the
.B ERRORS
section.
.SS "Routines"
.sp
.ne 2
.mk
.na
.B yp_bind()
.ad
.RS 27n
.rt
To use the NIS name services, the client process must be "bound" to an NIS
server that serves the appropriate domain using
.BR yp_bind() .
Binding
need not be done explicitly by user code. Binding is done automatically
whenever an NIS lookup function is called. The
.B yp_bind()
function can
be called directly for processes that make use of a backup strategy , for
example, a local file in cases when NIS services are not available. A
process should call
.B yp_unbind()
when it is finished using
.B NIS
in
order to free up resources.
.RE

.sp
.ne 2
.mk
.na
.B yp_unbind()
.ad
.RS 27n
.rt
Each binding allocates or uses up one client process socket descriptor.
Each bound domain costs one socket descriptor. However, multiple requests to
the same domain use that same descriptor. The
.B yp_unbind()
function is
available at the client interface for processes that explicitly manage their
socket descriptors while accessing multiple domains. The call to
\fByp_unbind()\fR makes the domain
.IR unbound ,
and frees all per-process
and per-node resources used to bind it.
.sp
If an RPC failure results upon use of a binding, that domain will be
unbound automatically. At that point, the
.B ypclnt()
layer will retry a
few more times or until the operation succeeds, provided that
.BR rpcbind (1M)
and
.BR ypbind "(1M) are running, and either:"
.RS +4
.TP
.ie t \(bu
.el o
The client process cannot bind a server for the proper domain; or
.RE
.RS +4
.TP
.ie t \(bu
.el o
RPC requests to the server fail.
.RE
.sp
.LP
Under the following circumstances, the
.B ypclnt
layer will return
control to the user code, with either an error or success code and the
results:
.RS +4
.TP
.ie t \(bu
.el o
If an error is not RPC-related.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B rpcbind
is not running.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If
.B ypbind
is not running.
.RE
.RS +4
.TP
.ie t \(bu
.el o
If a bound
.B ypserv
process returns any answer (success or failure).
.RE
.RE

.sp
.ne 2
.mk
.na
\fByp_get_default_domain()\fR
.ad
.RS 27n
.rt
\fBNIS\fR lookup calls require a map name and a domain name, at minimum.
The client process should know the name of the map of interest. Client
processes fetch the node's default domain by calling
\fByp_get_default_domain()\fR and use the returned \fIoutdomain\fR as the
\fIindomain\fR parameter to successive \fBNIS\fR name service calls. The
domain returned is the same as that returned using the
.BR SI_SRPC_DOMAIN
command to the
.BR sysinfo (2)
system call. The value returned in
\fIoutdomain\fR should not be freed.
.RE

.sp
.ne 2
.mk
.na
.B yp_match()
.ad
.RS 27n
.rt
The
.B yp_match()
function returns the value associated with a passed
key. This key must be exact because no pattern matching is available.
\fByp_match()\fR requires a full YP map name, such as \fBhosts.byname\fR,
instead of the nickname
.BR hosts .
.RE

.sp
.ne 2
.mk
.na
\fByp_first()\fR
.ad
.RS 27n
.rt
The \fByp_first()\fR function returns the first key-value pair from the
named map in the named domain.
.RE

.sp
.ne 2
.mk
.na
.B yp_next()
.ad
.RS 27n
.rt
The
.B yp_next()
function returns the next key-value pair in a named
map. The
.I inkey
parameter must be the
.I outkey
returned from an
initial call to \fByp_first()\fR (to get the second key-value pair) or the
one returned from the
.IR n "th call to"
.B yp_next()
(to get the
\fIn\fRth + second key-value pair). Similarly, the \fIinkeylen\fR parameter
must be the
.I outkeylen
returned from the earlier \fByp_first()\fR or
\fByp_next()\fR call.
.sp
The concept of first and next is particular to the structure of the NIS map
being processed. Retrieval order is not related to either the lexical order
within any original (non-NIS name service) data base, or to any obvious
numerical sorting order on the keys, values, or key-value pairs. The only
ordering guarantee is that if the \fByp_first()\fR function is called on a
particular map, and then the
.B yp_next()
function is repeatedly called
on the same map at the same server until the call fails with a reason of
.BR YPERR_NOMORE ,
every entry in the data base is seen exactly once.
Further, if the same sequence of operations is performed on the same map at
the same server, the entries are seen in the same order.
.sp
Under conditions of heavy server load or server failure, the domain can
become unbound, then bound once again (perhaps to a different server) while
a client is running. This binding can cause a break in one of the
enumeration rules. Specific entries may be seen twice by the client, or not
at all. This approach protects the client from error messages that would
otherwise be returned in the midst of the enumeration. For a better solution
to enumerating all entries in a map, see
.BR yp_all() .
.RE

.sp
.ne 2
.mk
.na
.B yp_all()
.ad
.RS 27n
.rt
The
.B yp_all()
function provides a way to transfer an entire map from
server to client in a single request using TCP (rather than UDP as with
other functions in this package). The entire transaction takes place as a
single RPC request and response. The
.B yp_all()
function can be used
just like any other NIS name service procedure to identify the map in the
normal manner and to supply the name of a function that will be called to
.RB "process each key-value pair within the map. The call to" " yp_all()"
returns only when the transaction is completed (successfully or
unsuccessfully), or the \fBforeach()\fR function decides that it does not
want to see any more key-value pairs.
.sp
The third parameter to
.B yp_all()
is:
.sp
.in +2
.nf
struct ypall_callback *incallback {
	int (*foreach)(\|);
	char *data;
};
.fi
.in -2

The function \fBforeach()\fR is called:
.sp
.in +2
.nf
foreach(int \fIinstatus\fR, char *\fIinkey\fR,
int \fIinkeylen\fR, char *\fIinval\fR,
int \fIinvallen\fR, char *\fIindata\fR);
.fi
.in -2

The
.I instatus
parameter holds one of the return status values defined
in <\fBrpcsvc/yp_prot.h\fR>, either
.B YP_TRUE
or an error code. See
.BR ypprot_err() ,
for a function that converts an NIS name service
protocol error code to a
.B ypclnt
layer error code.
.sp
The key and value parameters are somewhat different than defined in the
synopsis section above. First, the memory pointed to by the
.I inkey
and
\fIinval\fR parameters is private to the \fByp_all()\fR function, and is
overwritten with the arrival of each new key-value pair. The \fBforeach()\fR
function must do something useful with the contents of that memory, but it
does not own the memory itself. Key and value objects presented to the
\fBforeach()\fR function look exactly as they do in the server's map. If
they were not NEWLINE-terminated or null-terminated in the map, they would
not be here either.
.sp
The
.I indata
parameter is the contents of the
\fIincallback\fR->\fIdata\fR element passed to \fByp_all()\fR. The
\fBdata\fR element of the callback structure can be used to share state
information between the \fBforeach()\fR function and the mainline code. Its
use is optional, and no part of the NIS client package inspects its
contents; cast it to something useful, or ignore it. The \fBforeach()\fR
function is Boolean. It should return
.B 0
to indicate that it wants to
be called again for further received key-value pairs, or non-zero to stop
the flow of key-value pairs. If \fBforeach()\fR returns a non-zero value, it
is not called again. The functional value of
.B yp_all()
is then
.BR 0 .
.RE

.sp
.ne 2
.mk
.na
.B yp_order()
.ad
.RS 27n
.rt
The
.B yp_order()
function returns the order number for a map. The
function is not supported if the
.B ypbind
process on the client's system
is bound to an \fBNIS+\fR server running in "YP-compatibility mode".
.RE

.sp
.ne 2
.mk
.na
.B yp_master()
.ad
.RS 27n
.rt
The
.B yp_master()
function returns the machine name of the master NIS
server for a map.
.RE

.sp
.ne 2
.mk
.na
.B yperr_string()
.ad
.RS 27n
.rt
The
.B yperr_string()
function returns a pointer to an error message
string that is null-terminated but contains no period or NEWLINE.
.RE

.sp
.ne 2
.mk
.na
.B ypprot_err()
.ad
.RS 27n
.rt
The
.B ypprot_err()
function takes an NIS name service protocol error
code as input, and returns a
.B ypclnt()
layer error code, which can be
used as an input to
.BR yperr_string() .
.RE

.SH RETURN VALUES
.sp
.LP
All integer functions return
.B 0
if the requested operation is
successful, or one of the following errors if the operation fails:
.sp
.ne 2
.mk
.na
.B YPERR_ACCESS
.ad
.RS 17n
.rt
Access violation.
.RE

.sp
.ne 2
.mk
.na
.B YPERR_BADARGS
.ad
.RS 17n
.rt
The arguments to the function are bad.
.RE

.sp
.ne 2
.mk
.na
.B YPERR_BADDB
.ad
.RS 17n
.rt
The
.B YP
database is bad.
.RE

.sp
.ne 2
.mk
.na
.B YPERR_BUSY
.ad
.RS 17n
.rt
The database is busy.
.RE

.sp
.ne 2
.mk
.na
.B YPERR_DOMAIN
.ad
.RS 17n
.rt
Cannot bind to server on this domain.
.RE

.sp
.ne 2
.mk
.na
.B YPERR_KEY
.ad
.RS 17n
.rt
No such key in map.
.RE

.sp
.ne 2
.mk
.na
.B YPERR_MAP
.ad
.RS 17n
.rt
No such map in server's domain.
.RE

.sp
.ne 2
.mk
.na
.B YPERR_NODOM
.ad
.RS 17n
.rt
Local domain name not set.
.RE

.sp
.ne 2
.mk
.na
.B YPERR_NOMORE
.ad
.RS 17n
.rt
No more records in map database.
.RE

.sp
.ne 2
.mk
.na
.B YPERR_PMAP
.ad
.RS 17n
.rt
Cannot communicate with
.BR rpcbind .
.RE

.sp
.ne 2
.mk
.na
.B YPERR_RESRC
.ad
.RS 17n
.rt
Resource allocation failure.
.RE

.sp
.ne 2
.mk
.na
.B YPERR_RPC
.ad
.RS 17n
.rt
\fBRPC\fR failure; domain has been unbound.
.RE

.sp
.ne 2
.mk
.na
.B YPERR_YPBIND
.ad
.RS 17n
.rt
Cannot communicate with
.BR ypbind .
.RE

.sp
.ne 2
.mk
.na
.B YPERR_YPERR
.ad
.RS 17n
.rt
Internal
.B YP
server or client error.
.RE

.sp
.ne 2
.mk
.na
.B YPERR_YPSERV
.ad
.RS 17n
.rt
Cannot communicate with
.BR ypserv .
.RE

.sp
.ne 2
.mk
.na
.B YPERR_VERS
.ad
.RS 17n
.rt
\fBYP\fR version mismatch.
.RE

.SH FILES
.sp
.LP
.B /usr/lib/libnsl.so.1
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR NIS+ (1),
.BR ypcat (1),
.BR ypmatch (1),
.BR ypwhich (1),
.BR rpc.nisd (1M),
.BR rpcbind (1M),
.BR ypbind (1M),
.BR ypserv (1M),
\fBsysinfo\fR(2), \fBmalloc\fR(3C),
.BR ypfiles (4),
.BR attributes (5)
