'\" te
.\" Copyright 1989 AT&T  Copyright (c) 1997, Sun Microsystems, Inc.  All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH xdr_admin 3NSL "30 Dec 1996" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
xdr_admin, xdr_control, xdr_getpos, xdr_inline, xdrrec_endofrecord,
xdrrec_eof, xdrrec_readbytes, xdrrec_skiprecord, xdr_setpos, xdr_sizeof \-
library routines for external data representation
.SH DESCRIPTION
.sp
.LP
.B XDR
library routines allow C programmers to describe arbitrary data
structures in a machine-independent fashion. Protocols such as remote
procedure calls (RPC) use these routines to describe the format of the
data.
.sp
.LP
These routines deal specifically with the management of the
.BR XDR
stream.
.SS "Routines"
.sp
.LP
See \fBrpc\fR(3NSL) for the definition of the
.B XDR
data structure.
Note that any buffers passed to the
.B XDR
routines must be properly
aligned. It is suggested either that
.BR malloc (3C)
be used to allocate
these buffers, or that the programmer insure  that the buffer address is
divisible evenly by four.
.sp
.LP
.B #include <rpc/xdr.h>
.sp
.ne 2
.mk
.na
\fBbool_t xdr_control( XDR *\fIxdrs\fB, int\fI req\fB, void
*\fIinfo\fB);\fR
.ad
.sp .6
.RS 4n
A function macro to change or retrieve various information about an
.B XDR
stream.
.I req
indicates the type of operation and \fIinfo\fR
is a pointer to the information. The supported values of
.I req
is
.B XDR_GET_BYTES_AVAIL
and its argument type is
.BR "xdr_bytesrec *" .
They return the number of bytes left unconsumed in the stream and a flag
indicating whether or not this is the last fragment.
.RE

.sp
.ne 2
.mk
.na
\fBuint_t xdr_getpos(const XDR *\fIxdrs\fB);\fR
.ad
.sp .6
.RS 4n
.RB "A macro that invokes the get-position routine associated with the" " XDR"
stream,
.IR xdrs .
The routine returns an unsigned integer, which indicates
the position of the
.B XDR
byte stream. A desirable feature of \fBXDR\fR
streams is that simple arithmetic works with this number, although the
.B XDR
stream instances need not guarantee this. Therefore, applications
written for portability should not depend on this feature.
.RE

.sp
.ne 2
.mk
.na
\fBlong *xdr_inline(XDR *\fIxdrs\fB, const int
\fIlen\fB);\fR
.ad
.sp .6
.RS 4n
.RB "A macro that invokes the in-line routine associated with the" " XDR"
stream,
.IR xdrs .
The routine returns a pointer to a contiguous piece of
the stream's buffer;
.I len
is the byte length of the desired buffer.
Note: pointer is cast to
.BR "long *" .
.sp
Warning:
.B xdr_inline()
may return
.I NULL
(\fB0\fR) if it cannot
allocate a contiguous piece of a buffer. Therefore the behavior may vary
among stream instances; it exists for the sake of efficiency, and
applications written for portability should not depend on this feature.
.RE

.sp
.ne 2
.mk
.na
\fBbool_t xdrrec_endofrecord(XDR *xdrs, int
\fIsendnow\fB);\fR
.ad
.sp .6
.RS 4n
This routine can be invoked only on streams created by
.BR xdrrec_create() .
See
.BR xdr_create "(3NSL). The data in the output"
buffer is marked as a completed record, and the output buffer is optionally
written out if
.I sendnow
is non-zero. This routine returns
.B TRUE
if
it succeeds,
.B FALSE
otherwise.
.RE

.sp
.ne 2
.mk
.na
\fBbool_t xdrrec_eof(XDR *\fIxdrs\fB);\fR
.ad
.sp .6
.RS 4n
This routine can be invoked only on streams created by
.BR xdrrec_create() .
After consuming the rest of the current record in the
stream, this routine returns
.B TRUE
if there is no more data in the
stream's input buffer. It returns
.B FALSE
if there is additional data
in the stream's input buffer.
.RE

.sp
.ne 2
.mk
.na
\fBint xdrrec_readbytes(XDR *\fIxdrs\fB, caddr_t\fI addr\fB,
uint_t\fI nbytes\fB);\fR
.ad
.sp .6
.RS 4n
This routine can be invoked only on streams created by
.BR xdrrec_create() .
It attempts to read
.I nbytes
bytes from the
.B XDR
stream into the buffer pointed to by
.IR addr .
Upon success this
routine returns the number of bytes read. Upon  failure, it returns
\fB\(mi1\fR\&. A return value of  \fB0\fR indicates an end of record.
.RE

.sp
.ne 2
.mk
.na
\fBbool_t xdrrec_skiprecord(XDR *\fIxdrs\fB);\fR
.ad
.sp .6
.RS 4n
This routine can be invoked only on streams created by
.BR xdrrec_create() .
See \fBxdr_create\fR(3NSL). It tells the   \fBXDR\fR
implementation that the rest of the current record in the stream's input
buffer should be discarded. This routine returns
.B TRUE
if it succeeds,
.B FALSE
otherwise.
.RE

.sp
.ne 2
.mk
.na
\fBbool_t xdr_setpos(XDR *\fIxdrs\fB, const uint_t
\fIpos\fB);\fR
.ad
.sp .6
.RS 4n
A macro that invokes the set position routine associated with the
.BR XDR
stream
.IR xdrs .
The parameter
.I pos
is a position value obtained from
.BR xdr_getpos() .
This routine returns
.B TRUE
if the
.B XDR
stream
was repositioned, and
.B FALSE
otherwise.
.sp
Warning: it is difficult to reposition some types of
.B XDR
streams, so
this routine may fail with one type of stream and succeed with another.
Therefore, applications written for portability should not depend on this
feature.
.RE

.sp
.ne 2
.mk
.na
\fBunsigned long xdr_sizeof(xdrproc_t \fIfunc\fB, void
*\fIdata\fB);\fR
.ad
.sp .6
.RS 4n
This routine returns the number of bytes required to encode
.IR data
using the
.B XDR
filter function
.IR func ,
excluding potential overhead
such as
.B RPC
headers or record markers.
.B 0
is returned on error.
This information might be used to select between transport protocols, or to
determine the buffer size for various lower levels of
.B RPC
client and
server creation routines, or to allocate storage when
.B XDR
is used
outside of the
.B RPC
subsystem.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelSafe
.TE

.SH SEE ALSO
.sp
.LP
.BR malloc (3C),
.BR rpc (3NSL),
.BR xdr_complex (3NSL),
.BR xdr_create (3NSL),
.BR xdr_simple (3NSL),
.BR attributes (5)
