'\" te
.\" Copyright 1989 AT&T
.\" Copyright (C) 2001, Sun Microsystems, Inc. All Rights Reserved
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH rpc_clnt_calls 3NSL "1 Aug 2001" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
rpc_clnt_calls, clnt_call, clnt_send, clnt_freeres, clnt_geterr,
clnt_perrno, clnt_perror, clnt_sperrno, clnt_sperror, rpc_broadcast,
rpc_broadcast_exp, rpc_call \- library routines for client side calls
.SH SYNOPSIS
.LP
.nf
#include <rpc/rpc.h>

\fBenum  clnt_stat\fR \fBclnt_call\fR(\fBCLIENT *\fIclnt\fR, \fBconst rpcproc_t\fR \fIprocnum\fR,
     \fBconst xdrproc_t\fR \fIinproc\fR,\ \fBconst caddr_t\fR \fIin\fR, \fBconst xdrproc_t\fR \fIoutproc\fR,
     \fBcaddr_t\fR \fIout\fR, \fBconst struct timeval\fR \fItout\fR);
.fi

.LP
.nf
\fBenum clnt_stat\fR \fBclnt_send\fR (\fBCLIENT *\fIclnt\fR, \fBconst u_long\fR
     \fIprocnum\fR, \fBconst xdrproc_t\fR \fIproc\fR, \fBconst caddr_t\fR \fIin\fR);
.fi

.LP
.nf
\fBbool_t\fR \fBclnt_freeres\fR(\fBCLIENT *\fIclnt\fR, \fBconst xdrproc_t\fR \fIoutproc\fR,
     \fBcaddr_t\fR \fIout\fR);
.fi

.LP
.nf
\fBvoid\fR \fBclnt_geterr\fR(\fBconst CLIENT *\fIclnt\fR, \fBstruct rpc_err *\fIerrp\fR);
.fi

.LP
.nf
\fBvoid\fR \fBclnt_perrno\fR(\fBconst enum clnt_stat\fR \fIstat\fR);
.fi

.LP
.nf
\fBvoid\fR \fBclnt_perror\fR(\fBconst CLIENT *\fIclnt\fR, \fBconst char *\fIs\fR);
.fi

.LP
.nf
\fBchar *\fBclnt_sperrno\fR(\fBconst enum clnt_stat\fR \fIstat\fR);
.fi

.LP
.nf
\fBchar *\fBclnt_sperror\fR(\fBconst CLIENT *\fIclnt\fR, \fBconst char *\fIs\fR);
.fi

.LP
.nf
\fBenum clnt_stat\fR \fBrpc_broadcast\fR(\fBconst rpcprog_t\fR \fIprognum\fR,
     \fBconst rpcvers_t\fR \fIversnum\fR, \fBconst rpcproc_t\fR \fIprocnum\fR,
     \fBconst xdrproc_t\fIinproc\fR, \fBconst caddr_t\fR \fIin\fR,
     \fBconst xdrproc_t\fR \fIoutproc\fR, \fBcaddr_t\fR \fIout\fR,
     \fBconst resultproc_t\fR \fIeachresult\fR, \fBconst char *\fInettype\fR);
.fi

.LP
.nf
\fBenum clnt_stat\fR \fBrpc_broadcast_exp\fR(\fBconst rpcprog_t\fR \fIprognum\fR,
     \fBconst rpcvers_t\fR \fIversnum\fR,\fBconst rpcproc_t\fR \fIprocnum\fR,
     \fBconst xdrproc_t\fIxargs\fR, \fBcaddr_t\fR \fIargsp\fR, \fBconst xdrproc_t\fIxresults\fR,
     \fBcaddr_t\fR \fIresultsp\fR, \fBconst resultproc_t\fR \fIeachresult\fR, \fBconst int\fR \fIinittime\fR,
     \fBconst int\fR \fIwaittime\fR, \fBconst char *\fInettype\fR);
.fi

.LP
.nf
\fBenum clnt_stat\fR \fBrpc_call\fR(\fBconst char *\fIhost\fR, \fBconst rpcprog_t\fR \fIprognum\fR,
     \fBconst rpcvers_t\fR \fIversnum\fR, \fBconst rpcproc_t\fR \fIprocnum\fR, \fBconst xdrproc_t\fR \fIinproc\fR,
     \fBconst char *\fIin\fR, \fBconst xdrproc_t\fR \fIoutproc\fR, \fBchar *\fIout\fR, \fBconst char *\fInettype\fR);
.fi

.SH DESCRIPTION
.sp
.LP
\fBRPC\fR library routines allow  \fBC\fR language programs to make
procedure calls on other machines across the network. First, the client
calls a procedure to send a request to the server. Upon receipt of the
request, the server calls a dispatch routine to perform the requested
service and then sends back a reply.
.sp
.LP
The
.BR clnt_call() ,
.BR rpc_call() ,
and
.B rpc_broadcast()
routines
handle the client side of the procedure call. The remaining routines deal
with error handling.
.sp
.LP
Some of the routines take a
.B CLIENT
handle as one of the parameters. A
\fBCLIENT\fR handle can be created by an  \fBRPC\fR creation routine such as
.BR clnt_create() .
See
.BR rpc_clnt_create (3NSL).
.sp
.LP
These routines are safe for use in multithreaded applications. \fBCLIENT\fR
handles can be shared between threads; however, in this implementation
requests by different threads are serialized. In other words, the first
request will receive its results before the second request is sent.
.SS "Routines"
.sp
.LP
See \fBrpc\fR(3NSL) for the definition of the
.B CLIENT
data
structure.
.sp
.ne 2
.mk
.na
.B clnt_call()
.ad
.RS 23n
.rt
A function macro that calls the remote procedure
.I procnum
associated
with the client handle,
.IR clnt ,
which is obtained with an
.BR RPC
client creation routine such as
.BR clnt_create() .
See
.BR rpc_clnt_create (3NSL).
The parameter
.I inproc
is the 
.BR XDR
function used to encode the procedure's parameters, and
.I outproc
is the
\fBXDR\fR function used to decode the procedure's results. \fIin\fR is the
address of the procedure's argument(s), and
.I out
is the address of
where to place the result(s).
.I tout
is the time allowed for results to
be returned, which is overridden by a time-out set explicitly through
.BR clnt_control() .
See
.BR rpc_clnt_create (3NSL).
.sp
If the remote call succeeds, the status returned is \fBRPC_SUCCESS\fR.
Otherwise, an appropriate status is returned.
.RE

.sp
.ne 2
.mk
.na
.B clnt_send()
.ad
.RS 23n
.rt
Use the
.B clnt_send()
function to call a remote asynchronous
function.
.sp
The
.B clnt_send()
function calls the remote function
.BR procnum()
associated with the client handle,
.IR clnt ,
which is obtained with an RPC
client creation routine such as
.BR clnt_create() .
See
.BR rpc_clnt_create (3NSL).
The parameter
.I proc
is the XDR function
used to encode the procedure's parameters. The parameter
.I in
is the
address of the procedure's argument(s).
.sp
By default, the blocking I/O mode is used. See the \fBclnt_control\fR(3NSL)
man page for more information on I/O modes.
.sp
The
.B clnt_send()
function does not check if the program version number
supplied to
.B clnt_create()
is registered with the
.BR rpcbind
service. Use
.B clnt_create_vers()
instead of
.B clnt_create()
to
.RB "check on incorrect version number registration." " clnt_create_vers()"
will return a valid handle to the client only if a version within the range
supplied to
.B clnt_create_vers()
is supported by the server.
.sp
\fBRPC_SUCCESS\fR is returned when a request is successfully delivered to
the transport layer. This does not mean that the request was received. If an
error is returned, use the
.B clnt_getterr()
routine to find the failure
status or the
.B clnt_perrno()
routine to translate the failure status
into error messages.
.RE

.sp
.ne 2
.mk
.na
\fBclnt_freeres()\fR
.ad
.RS 23n
.rt
A function macro that frees any data allocated by the
.B RPC/XDR
system
when it decoded the results of an 
.B RPC
.RI "call. The parameter" " out"
is the address of the results, and
.I outproc
is the
.B XDR
routine
describing the results. This routine returns
.B 1
if the results were
successfully freed; otherwise it returns \fB0\fR.
.RE

.sp
.ne 2
.mk
.na
.B clnt_geterr()
.ad
.RS 23n
.rt
A function macro that copies the error structure out of the client handle
to the structure at address
.IR errp .
.RE

.sp
.ne 2
.mk
.na
.B clnt_perrno()
.ad
.RS 23n
.rt
Prints a message to standard error corresponding to the condition indicated
by
.IR stat .
A newline is appended. It is normally used after a procedure
call fails for a routine for which a client handle is not needed, for
instance
.BR rpc_call()
.RE

.sp
.ne 2
.mk
.na
.B clnt_perror()
.ad
.RS 23n
.rt
Prints a message to the standard error indicating why an
.B RPC
call
failed;
.I clnt
is the handle used to do the call. The message is
prepended with string
.I s
and a colon. A newline is appended. This
routine is normally used after a remote procedure call fails for a routine
that requires a client handle, for instance \fBclnt_call()\fR.
.RE

.sp
.ne 2
.mk
.na
.B clnt_sperrno()
.ad
.RS 23n
.rt
Takes the same arguments as
.BR clnt_perrno() ,
but instead of sending a
message to the standard error indicating why an
.B RPC
call failed,
returns a pointer to a string that contains the message.
.sp
\fBclnt_sperrno()\fR is normally used instead of \fBclnt_perrno()\fR when
the program does not have a standard error, as a program running as a server
quite likely does not.
.B clnt_sperrno()
is also used if the programmer
does not want the message to be output with
.BR printf() ,
or if a message
format different than that supported by
.B clnt_perrno()
is to be used.
See \fBprintf\fR(3C). Unlike
.B clnt_sperror()
and
.BR clnt_spcreaterror() ,
\fBclnt_sperrno()\fR does not return a pointer to
static data. Therefore, the result is not overwritten on each call. See
.BR rpc_clnt_create (3NSL).
.RE

.sp
.ne 2
.mk
.na
.B clnt_sperror()
.ad
.RS 23n
.rt
Similar to
.BR clnt_perror() ,
except that like
.BR clnt_sperrno() ,
it
returns a string instead of printing to standard error. However,
\fBclnt_sperror()\fR does not append a newline at the end of the message.
.sp
\fBclnt_sperror()\fR returns a pointer to a buffer that is overwritten on
each call. In multithreaded applications, this buffer is implemented as
thread-specific data.
.RE

.sp
.ne 2
.mk
.na
.B rpc_broadcast()
.ad
.RS 23n
.rt
Similar to
.BR rpc_call() ,
except that the call message is broadcast to
all the connectionless transports specified by
.IR nettype .
If
\fInettype\fR is
.IR NULL ,
it defaults to
.BR netpath .
Each time it
receives a response, this routine calls
.BR eachresult() ,
whose form is:
.sp
.in +2
.nf
bool_t eachresult(caddr_t out,  const struct netbuf *addr,
const struct netconfig *netconf);
.fi
.in -2

where
.I out
is the same as
.I out
passed to
.BR rpc_broadcast() ,
.RI "except that the remote procedure's output is decoded there." " addr"
points to the address of the machine that sent the results, and
\fInetconf\fR is the netconfig structure of the transport on which the
remote server responded. If
.B eachresult()
returns
.BR 0 ,
\fBrpc_broadcast()\fR waits for more replies; otherwise, it returns with
appropriate status.
.sp
The broadcast file descriptors are limited in size to the maximum transfer
size of that transport. For Ethernet, this value is 1500 bytes.
\fBrpc_broadcast()\fR uses \fBAUTH_SYS\fR credentials by default. See
.BR rpc_clnt_auth (3NSL).
.RE

.sp
.ne 2
.mk
.na
.B rpc_broadcast_exp()
.ad
.RS 23n
.rt
Similar to
.BR rpc_broadcast() ,
except that the initial timeout,
\fIinittime\fR and the maximum timeout,
.IR waittime ,
are specified in
milliseconds.
.sp
\fIinittime\fR is the initial time that \fBrpc_broadcast_exp()\fR waits
before resending the request. After the first resend, the retransmission
interval increases exponentially until it exceeds
.IR waittime .
.RE

.sp
.ne 2
.mk
.na
.B rpc_call()
.ad
.RS 23n
.rt
Calls the remote procedure associated with
.IR prognum ,
.IR versnum ,
and
.I procnum
on the machine,
.IR host .
The parameter
.I inproc
is
used to encode the procedure's parameters, and
.I outproc
is used to
decode the procedure's results.
.I in
is the address of the procedure's
argument(s), and
.I out
is the address of where to place the result(s).
\fInettype\fR can be any of the values listed on \fBrpc\fR(3NSL). This
routine returns
.B RPC_SUCCESS
if it succeeds, or it returns an
appropriate status. Use the
.B clnt_perrno()
routine to translate failure
status into error messages.
.sp
The
.B rpc_call()
function uses the first available transport belonging
to the class
.I nettype
on which it can create a connection. You do not
have control of timeouts or authentication using this routine.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
ArchitectureAll
_
AvailabilitySUNWcsl (32-bit)
_
SUNWcslx (64-bit)
_
Interface StabilityEvolving
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
\fBprintf\fR(3C), \fBrpc\fR(3NSL), \fBrpc_clnt_auth\fR(3NSL),
.BR rpc_clnt_create (3NSL),
.BR attributes (5)
