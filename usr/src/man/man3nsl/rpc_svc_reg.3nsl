'\" te
.\" Copyright 1989 AT&T  Copyright (c) 1995 Sun Microsystems, Inc.   All Rights Reserved.
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH rpc_svc_reg 3NSL "20 Feb 1998" "SunOS 5.11" "Networking Services Library Functions"
.SH NAME
rpc_svc_reg, rpc_reg, svc_reg, svc_unreg, svc_auth_reg, xprt_register,
xprt_unregister \- library routines for registering servers
.SH DESCRIPTION
.sp
.LP
These routines are a part of the
.B RPC
library which allows the
\fBRPC\fR servers to register themselves with \fBrpcbind()\fR (see
.BR rpcbind (1M)),
and associate the given program and version number with
the dispatch function. When the RPC server receives a RPC request, the
library invokes the dispatch routine with the appropriate arguments.
.SS "Routines"
.sp
.LP
See \fBrpc\fR(3NSL) for the definition of the 
.B SVCXPRT
data
structure.
.sp
.in +2
.nf
\fB#include <rpc/rpc.h>\fR
.fi
.in -2
.sp

.sp
.ne 2
.mk
.na
\fBbool_t rpc_reg(const rpcprog_t \fIprognum\fR, const rpcvers_t
.IR versnum ,
const rpcproc_t
.IR procnum ,
char * (*\fIprocname\fR)(\|),
const xdrproc_t
.IR inproc ,
const xdrproc_t
.IR outproc ,
const char
*\fInettype\fR);\fR
.ad
.sp .6
.RS 4n
Register program
.IR prognum ,
procedure
.IR procname ,
and version
\fIversnum\fR with the \fBRPC\fR service package. If a request arrives for
program
.IR prognum ,
version
.IR versnum ,
and procedure
.IR procnum ,
\fIprocname\fR is called with a pointer to its parameter(s); \fIprocname\fR
should return a pointer to its
.B static
.RI "result(s). The" " arg"
parameter to
.I procname
is a pointer to the (decoded) procedure
argument.
.I inproc
is the XDR function used to decode the parameters
while
.I outproc
is the XDR function used to encode the results.
Procedures are registered on all available transports of the class
.IR nettype .
See \fBrpc\fR(3NSL). This routine returns \fB0\fR if the
registration succeeded, \fB\(mi1\fR otherwise.
.RE

.sp
.ne 2
.mk
.na
\fBint svc_reg(const SVCXPRT *\fIxprt\fR, const rpcprog_t \fIprognum\fR,
const rpcvers_t
.IR versnum ,
const void (*\fIdispatch\fR)(\|), const
struct netconfig *\fInetconf\fR);\fR
.ad
.sp .6
.RS 4n
Associates
.I prognum
and
.I versnum
with the service dispatch
procedure,
.IR dispatch .
If \fInetconf\fR is
.IR NULL ,
the service is
not registered with the
.B rpcbind
service.  For example, if a service
has already been registered using some other means, such as
.B inetd
(see
.BR inetd (1M)),
it will not need to be registered again. If \fInetconf\fR
is non-zero, then a mapping of the triple [\fIprognum\fR, \fI versnum\fR,
\fInetconf\fR->\fI]\fR to
.IR xprt ->
\fIxp_ltaddr\fR is established with
the local
.B rpcbind
service.
.sp
The
.B svc_reg()
routine returns
.B 1
if it succeeds, and \fB0\fR
otherwise.
.RE

.sp
.ne 2
.mk
.na
\fBvoid svc_unreg(const rpcprog_t \fIprognum\fR, const rpcvers_t
\fIversnum\fR);\fR
.ad
.sp .6
.RS 4n
Remove from the
.B rpcbind
service, all mappings of the triple
[\fIprognum\fR, \fIversnum\fR, \fIall-transports\fR] to network address and
all mappings within the RPC service package of the double [\fIprognum\fR,
\fIversnum\fR] to dispatch routines.
.RE

.sp
.ne 2
.mk
.na
\fBint svc_auth_reg(const int
.IR cred_flavor ,
const enum auth_stat
(*handler)(\|));\fR
.ad
.sp .6
.RS 4n
Registers the service authentication routine
.I handler
with the
dispatch mechanism so that it can be invoked to authenticate RPC requests
received with authentication type
.IR cred_flavor .
This interface allows
developers to add new authentication types to their RPC applications without
needing to modify the libraries. Service implementors usually do not need
this routine.
.sp
Typical service application would call
.B svc_auth_reg()
after
registering the service and prior to calling
.BR svc_run() .
When needed to
process an RPC credential of type
.IR cred_flavor ,
the
.IR handler
procedure will be called with two parameters \fB (struct svc_req
*\fIrqst\fB,\fR \fBstruct rpc_msg *\fImsg\fB)\fR and is expected
to return a valid
.B "enum auth_stat"
value. There is no provision to
change or delete an authentication handler once registered.
.sp
The
.B svc_auth_reg()
routine returns
.B 0
if the registration is
successful,
.B 1
if \fIcred_flavor\fR already has an authentication
handler registered for it, and \fB\(mi1\fR otherwise.
.RE

.sp
.ne 2
.mk
.na
\fBvoid xprt_register(const SVCXPRT *\fIxprt\fR);\fR
.ad
.sp .6
.RS 4n
After
.B RPC
service transport handle
.I xprt
is created, it is
registered with the
.B RPC
service package. This routine modifies the
global variable \fBsvc_fdset\fR (see
.BR rpc_svc_calls (3NSL)).
Service
implementors usually do not need this routine.
.RE

.sp
.ne 2
.mk
.na
\fBvoid xprt_unregister(const SVCXPRT *\fIxprt\fR);\fR
.ad
.sp .6
.RS 4n
Before an
.B RPC
service transport handle
.I xprt
is destroyed, it
unregisters itself with the
.B RPC
service package. This routine modifies
the global variable \fBsvc_fdset\fR (see
.BR rpc_svc_calls (3NSL)).
Service
implementors usually do not need this routine.
.RE

.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
MT-LevelMT-Safe
.TE

.SH SEE ALSO
.sp
.LP
.BR inetd (1M),
.BR rpcbind (1M),
.BR rpc (3NSL),
.BR rpc_svc_calls (3NSL),
.BR rpc_svc_create (3NSL),
.BR rpc_svc_err (3NSL),
.BR rpcbind (3NSL),
.BR select (3C),
.BR attributes (5)
