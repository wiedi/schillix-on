'\" te
.\" Copyright (c) 1997, Sun Microsystems, Inc.  All Rights Reserved
.\" Copyright (c) 2012-2013, J. Schilling
.\" Copyright (c) 2013, Andreas Roehler
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.opensource.org/licenses/cddl1.txt
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.TH kvm_getu 3KVM "2 May 2002" "SunOS 5.11" "Kernel VM Library Functions"
.SH NAME
kvm_getu, kvm_getcmd \- get the u-area or invocation arguments for a
process
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-lkvm\fR [ \fIlibrary\fR\&.\|.\|.]
#include <kvm.h>
#include <sys/param.h>
#include <sys/user.h>
#include <sys/proc.h>

\fBstruct user *\fBkvm_getu\fR(\fBkvm_t *\fIkd\fR, \fBstruct proc *\fIproc\fR);
.fi

.LP
.nf
\fBint\fR \fBkvm_getcmd\fR(\fBkvm_t *\fIkd\fR, \fBstruct proc *\fIproc\fR, \fBstruct user *\fIu\fR, \fBchar ***\fIarg\fR,
     \fBchar ***\fIenv\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The
.B kvm_getu()
function reads the u-area of the process specified by
.I proc
to an area of static storage associated with
.I kd
and returns
a pointer to it. Subsequent calls to
.B kvm_getu()
will overwrite this
static area.
.sp
.LP
The
.I kd
argument is a pointer to a kernel descriptor returned by
.BR kvm_open (3KVM).
The
.I proc
argument is a pointer to a copy in the
current process's address space of a
.I proc
structure, obtained, for
instance, by a prior
.BR kvm_nextproc (3KVM)
call.
.sp
.LP
The
.B kvm_getcmd()
function constructs a list of string pointers that
represent the command arguments and environment that were used to initiate
the process specified by
.IR proc .
.sp
.LP
The
.I kd
argument is a pointer to a kernel descriptor returned by
.BR kvm_open (3KVM).
The
.I u
argument is a pointer to a copy in the
current process's address space of a
.B user
structure, obtained, for
instance, by a prior
.B kvm_getu()
call. If
.I arg
is not
.IR NULL ,
the command line arguments are formed into a null-terminated array of string
pointers. The address of the first such pointer is returned in
.IR arg .
If
.I env
is not
.IR NULL ,
the environment is formed into a
null-terminated array of string pointers.  The address of the first of these
is returned in
.IR env .
.sp
.LP
The pointers returned in
.I arg
and
.I env
refer to data allocated by
.B malloc()
and should be freed by a call to
.B free()
when no longer
needed. See
.BR malloc (3C).
Both the string pointers and the strings
themselves are deallocated when freed.
.sp
.LP
Since the environment and command line arguments might have been modified
by the user process, there is no guarantee that it will be possible to
reconstruct the original command at all.  The
.B kvm_getcmd()
function
will make the best attempt possible, returning \(mi1 if the user process
data is unrecognizable.
.SH RETURN VALUES
.sp
.LP
On success,
.B kvm_getu()
returns a pointer to a copy of the u-area of
the process specified by
.IR proc .
On failure, it returns
.IR NULL .
.sp
.LP
The
.B kvm_getcmd()
function returns 0 on success and \(mi1 on failure.
If \(mi1 is returned, the caller still has the option of using the command
line fragment that is stored in the u-area.
.SH ATTRIBUTES
.sp
.LP
See
.BR attributes (5)
for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i)
lw(2.75i) |lw(2.75i)
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityStable
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
.BR kvm_nextproc (3KVM),
.BR kvm_open (3KVM),
.BR kvm_kread (3KVM),
.BR malloc (3C),
.BR libkvm (3LIB),
.BR attributes (5)
.SH NOTES
.sp
.LP
On systems that support both 32-bit and 64-bit processes, the 64-bit
implementation of
.B libkvm
ensures that the
.I arg
and
.BR env
pointer arrays for
.B kvm_getcmd()
are translated to the same form as if
they were 64-bit processes.  Applications that wish to access the raw 32-bit
stack directly can use
.BR kvm_uread() .
See
.BR kvm_read (3KVM).
